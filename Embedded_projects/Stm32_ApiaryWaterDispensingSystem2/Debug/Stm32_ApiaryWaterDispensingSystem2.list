
Stm32_ApiaryWaterDispensingSystem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ff8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001078  08018198  08018198  00028198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019210  08019210  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08019210  08019210  00029210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019218  08019218  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019218  08019218  00029218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801921c  0801921c  0002921c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08019220  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001203c  200001f8  08019418  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20012234  08019418  00032234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c07f  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006add  00000000  00000000  0005c2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002520  00000000  00000000  00062dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ca1  00000000  00000000  000652e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002038f  00000000  00000000  00066f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000320e4  00000000  00000000  00087318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aab14  00000000  00000000  000b93fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000af00  00000000  00000000  00163f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0016ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08018180 	.word	0x08018180

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	08018180 	.word	0x08018180

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 b9f1 	b.w	800109c <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9a6 	b.w	800109c <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9e08      	ldr	r6, [sp, #32]
 8000dda:	460d      	mov	r5, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	460f      	mov	r7, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4694      	mov	ip, r2
 8000de8:	d965      	bls.n	8000eb6 <__udivmoddi4+0xe2>
 8000dea:	fab2 f382 	clz	r3, r2
 8000dee:	b143      	cbz	r3, 8000e02 <__udivmoddi4+0x2e>
 8000df0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df4:	f1c3 0220 	rsb	r2, r3, #32
 8000df8:	409f      	lsls	r7, r3
 8000dfa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dfe:	4317      	orrs	r7, r2
 8000e00:	409c      	lsls	r4, r3
 8000e02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e06:	fa1f f58c 	uxth.w	r5, ip
 8000e0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e0e:	0c22      	lsrs	r2, r4, #16
 8000e10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e18:	fb01 f005 	mul.w	r0, r1, r5
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d90a      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e20:	eb1c 0202 	adds.w	r2, ip, r2
 8000e24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e28:	f080 811c 	bcs.w	8001064 <__udivmoddi4+0x290>
 8000e2c:	4290      	cmp	r0, r2
 8000e2e:	f240 8119 	bls.w	8001064 <__udivmoddi4+0x290>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4462      	add	r2, ip
 8000e36:	1a12      	subs	r2, r2, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e46:	fb00 f505 	mul.w	r5, r0, r5
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	d90a      	bls.n	8000e64 <__udivmoddi4+0x90>
 8000e4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e56:	f080 8107 	bcs.w	8001068 <__udivmoddi4+0x294>
 8000e5a:	42a5      	cmp	r5, r4
 8000e5c:	f240 8104 	bls.w	8001068 <__udivmoddi4+0x294>
 8000e60:	4464      	add	r4, ip
 8000e62:	3802      	subs	r0, #2
 8000e64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11e      	cbz	r6, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40dc      	lsrs	r4, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	e9c6 4300 	strd	r4, r3, [r6]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0xbc>
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	f000 80ed 	beq.w	800105e <__udivmoddi4+0x28a>
 8000e84:	2100      	movs	r1, #0
 8000e86:	e9c6 0500 	strd	r0, r5, [r6]
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	fab3 f183 	clz	r1, r3
 8000e94:	2900      	cmp	r1, #0
 8000e96:	d149      	bne.n	8000f2c <__udivmoddi4+0x158>
 8000e98:	42ab      	cmp	r3, r5
 8000e9a:	d302      	bcc.n	8000ea2 <__udivmoddi4+0xce>
 8000e9c:	4282      	cmp	r2, r0
 8000e9e:	f200 80f8 	bhi.w	8001092 <__udivmoddi4+0x2be>
 8000ea2:	1a84      	subs	r4, r0, r2
 8000ea4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	4617      	mov	r7, r2
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d0e2      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000eb4:	e7df      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb6:	b902      	cbnz	r2, 8000eba <__udivmoddi4+0xe6>
 8000eb8:	deff      	udf	#255	; 0xff
 8000eba:	fab2 f382 	clz	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	f040 8090 	bne.w	8000fe4 <__udivmoddi4+0x210>
 8000ec4:	1a8a      	subs	r2, r1, r2
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fa1f fe8c 	uxth.w	lr, ip
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ed4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ed8:	0c22      	lsrs	r2, r4, #16
 8000eda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ede:	fb0e f005 	mul.w	r0, lr, r5
 8000ee2:	4290      	cmp	r0, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x124>
 8000ee6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x122>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f200 80cb 	bhi.w	800108c <__udivmoddi4+0x2b8>
 8000ef6:	4645      	mov	r5, r8
 8000ef8:	1a12      	subs	r2, r2, r0
 8000efa:	b2a4      	uxth	r4, r4
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f08:	fb0e fe00 	mul.w	lr, lr, r0
 8000f0c:	45a6      	cmp	lr, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x14e>
 8000f10:	eb1c 0404 	adds.w	r4, ip, r4
 8000f14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f18:	d202      	bcs.n	8000f20 <__udivmoddi4+0x14c>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f200 80bb 	bhi.w	8001096 <__udivmoddi4+0x2c2>
 8000f20:	4610      	mov	r0, r2
 8000f22:	eba4 040e 	sub.w	r4, r4, lr
 8000f26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f2a:	e79f      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f2c:	f1c1 0720 	rsb	r7, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f42:	40fd      	lsrs	r5, r7
 8000f44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f48:	4323      	orrs	r3, r4
 8000f4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f4e:	fa1f fe8c 	uxth.w	lr, ip
 8000f52:	fb09 5518 	mls	r5, r9, r8, r5
 8000f56:	0c1c      	lsrs	r4, r3, #16
 8000f58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f60:	42a5      	cmp	r5, r4
 8000f62:	fa02 f201 	lsl.w	r2, r2, r1
 8000f66:	fa00 f001 	lsl.w	r0, r0, r1
 8000f6a:	d90b      	bls.n	8000f84 <__udivmoddi4+0x1b0>
 8000f6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f74:	f080 8088 	bcs.w	8001088 <__udivmoddi4+0x2b4>
 8000f78:	42a5      	cmp	r5, r4
 8000f7a:	f240 8085 	bls.w	8001088 <__udivmoddi4+0x2b4>
 8000f7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f82:	4464      	add	r4, ip
 8000f84:	1b64      	subs	r4, r4, r5
 8000f86:	b29d      	uxth	r5, r3
 8000f88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f98:	45a6      	cmp	lr, r4
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x1da>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fa4:	d26c      	bcs.n	8001080 <__udivmoddi4+0x2ac>
 8000fa6:	45a6      	cmp	lr, r4
 8000fa8:	d96a      	bls.n	8001080 <__udivmoddi4+0x2ac>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	4464      	add	r4, ip
 8000fae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fb6:	eba4 040e 	sub.w	r4, r4, lr
 8000fba:	42ac      	cmp	r4, r5
 8000fbc:	46c8      	mov	r8, r9
 8000fbe:	46ae      	mov	lr, r5
 8000fc0:	d356      	bcc.n	8001070 <__udivmoddi4+0x29c>
 8000fc2:	d053      	beq.n	800106c <__udivmoddi4+0x298>
 8000fc4:	b156      	cbz	r6, 8000fdc <__udivmoddi4+0x208>
 8000fc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fca:	eb64 040e 	sbc.w	r4, r4, lr
 8000fce:	fa04 f707 	lsl.w	r7, r4, r7
 8000fd2:	40ca      	lsrs	r2, r1
 8000fd4:	40cc      	lsrs	r4, r1
 8000fd6:	4317      	orrs	r7, r2
 8000fd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	2100      	movs	r1, #0
 8000fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe4:	f1c3 0120 	rsb	r1, r3, #32
 8000fe8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fec:	fa20 f201 	lsr.w	r2, r0, r1
 8000ff0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ff4:	409d      	lsls	r5, r3
 8000ff6:	432a      	orrs	r2, r5
 8000ff8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ffc:	fa1f fe8c 	uxth.w	lr, ip
 8001000:	fbb1 f0f7 	udiv	r0, r1, r7
 8001004:	fb07 1510 	mls	r5, r7, r0, r1
 8001008:	0c11      	lsrs	r1, r2, #16
 800100a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800100e:	fb00 f50e 	mul.w	r5, r0, lr
 8001012:	428d      	cmp	r5, r1
 8001014:	fa04 f403 	lsl.w	r4, r4, r3
 8001018:	d908      	bls.n	800102c <__udivmoddi4+0x258>
 800101a:	eb1c 0101 	adds.w	r1, ip, r1
 800101e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001022:	d22f      	bcs.n	8001084 <__udivmoddi4+0x2b0>
 8001024:	428d      	cmp	r5, r1
 8001026:	d92d      	bls.n	8001084 <__udivmoddi4+0x2b0>
 8001028:	3802      	subs	r0, #2
 800102a:	4461      	add	r1, ip
 800102c:	1b49      	subs	r1, r1, r5
 800102e:	b292      	uxth	r2, r2
 8001030:	fbb1 f5f7 	udiv	r5, r1, r7
 8001034:	fb07 1115 	mls	r1, r7, r5, r1
 8001038:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800103c:	fb05 f10e 	mul.w	r1, r5, lr
 8001040:	4291      	cmp	r1, r2
 8001042:	d908      	bls.n	8001056 <__udivmoddi4+0x282>
 8001044:	eb1c 0202 	adds.w	r2, ip, r2
 8001048:	f105 38ff 	add.w	r8, r5, #4294967295
 800104c:	d216      	bcs.n	800107c <__udivmoddi4+0x2a8>
 800104e:	4291      	cmp	r1, r2
 8001050:	d914      	bls.n	800107c <__udivmoddi4+0x2a8>
 8001052:	3d02      	subs	r5, #2
 8001054:	4462      	add	r2, ip
 8001056:	1a52      	subs	r2, r2, r1
 8001058:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800105c:	e738      	b.n	8000ed0 <__udivmoddi4+0xfc>
 800105e:	4631      	mov	r1, r6
 8001060:	4630      	mov	r0, r6
 8001062:	e708      	b.n	8000e76 <__udivmoddi4+0xa2>
 8001064:	4639      	mov	r1, r7
 8001066:	e6e6      	b.n	8000e36 <__udivmoddi4+0x62>
 8001068:	4610      	mov	r0, r2
 800106a:	e6fb      	b.n	8000e64 <__udivmoddi4+0x90>
 800106c:	4548      	cmp	r0, r9
 800106e:	d2a9      	bcs.n	8000fc4 <__udivmoddi4+0x1f0>
 8001070:	ebb9 0802 	subs.w	r8, r9, r2
 8001074:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001078:	3b01      	subs	r3, #1
 800107a:	e7a3      	b.n	8000fc4 <__udivmoddi4+0x1f0>
 800107c:	4645      	mov	r5, r8
 800107e:	e7ea      	b.n	8001056 <__udivmoddi4+0x282>
 8001080:	462b      	mov	r3, r5
 8001082:	e794      	b.n	8000fae <__udivmoddi4+0x1da>
 8001084:	4640      	mov	r0, r8
 8001086:	e7d1      	b.n	800102c <__udivmoddi4+0x258>
 8001088:	46d0      	mov	r8, sl
 800108a:	e77b      	b.n	8000f84 <__udivmoddi4+0x1b0>
 800108c:	3d02      	subs	r5, #2
 800108e:	4462      	add	r2, ip
 8001090:	e732      	b.n	8000ef8 <__udivmoddi4+0x124>
 8001092:	4608      	mov	r0, r1
 8001094:	e70a      	b.n	8000eac <__udivmoddi4+0xd8>
 8001096:	4464      	add	r4, ip
 8001098:	3802      	subs	r0, #2
 800109a:	e742      	b.n	8000f22 <__udivmoddi4+0x14e>

0800109c <__aeabi_idiv0>:
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop

080010a0 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	font = font_t;
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <GFX_SetFont+0x1c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000214 	.word	0x20000214

080010c0 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	4611      	mov	r1, r2
 80010cc:	461a      	mov	r2, r3
 80010ce:	460b      	mov	r3, r1
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	4613      	mov	r3, r2
 80010d4:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	2b7e      	cmp	r3, #126	; 0x7e
 80010da:	f200 80a3 	bhi.w	8001224 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80010de:	2300      	movs	r3, #0
 80010e0:	75fb      	strb	r3, [r7, #23]
 80010e2:	e096      	b.n	8001212 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 80010e4:	4b51      	ldr	r3, [pc, #324]	; (800122c <GFX_DrawChar+0x16c>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	3b20      	subs	r3, #32
 80010ec:	494f      	ldr	r1, [pc, #316]	; (800122c <GFX_DrawChar+0x16c>)
 80010ee:	6809      	ldr	r1, [r1, #0]
 80010f0:	3101      	adds	r1, #1
 80010f2:	7809      	ldrb	r1, [r1, #0]
 80010f4:	fb03 f101 	mul.w	r1, r3, r1
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	440b      	add	r3, r1
 80010fc:	3302      	adds	r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001104:	2300      	movs	r3, #0
 8001106:	757b      	strb	r3, [r7, #21]
 8001108:	e078      	b.n	80011fc <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800110a:	7dbb      	ldrb	r3, [r7, #22]
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d032      	beq.n	800117a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001114:	4b46      	ldr	r3, [pc, #280]	; (8001230 <GFX_DrawChar+0x170>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d113      	bne.n	8001144 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	b29a      	uxth	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	b29b      	uxth	r3, r3
 8001124:	4413      	add	r3, r2
 8001126:	b29b      	uxth	r3, r3
 8001128:	b218      	sxth	r0, r3
 800112a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800112e:	b29a      	uxth	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	b29b      	uxth	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	b21b      	sxth	r3, r3
 800113a:	79ba      	ldrb	r2, [r7, #6]
 800113c:	4619      	mov	r1, r3
 800113e:	f000 fb1f 	bl	8001780 <SSD1306_DrawPixel>
 8001142:	e052      	b.n	80011ea <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <GFX_DrawChar+0x170>)
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	fb03 f202 	mul.w	r2, r3, r2
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	18d0      	adds	r0, r2, r3
 8001152:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001156:	4a36      	ldr	r2, [pc, #216]	; (8001230 <GFX_DrawChar+0x170>)
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	fb03 f202 	mul.w	r2, r3, r2
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	18d1      	adds	r1, r2, r3
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <GFX_DrawChar+0x170>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	b29a      	uxth	r2, r3
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <GFX_DrawChar+0x170>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b29c      	uxth	r4, r3
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4623      	mov	r3, r4
 8001174:	f000 f960 	bl	8001438 <GFX_DrawFillRectangle>
 8001178:	e037      	b.n	80011ea <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800117a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800117e:	2b00      	cmp	r3, #0
 8001180:	d133      	bne.n	80011ea <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <GFX_DrawChar+0x170>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d114      	bne.n	80011b4 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	b29a      	uxth	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4413      	add	r3, r2
 8001194:	b29b      	uxth	r3, r3
 8001196:	b218      	sxth	r0, r3
 8001198:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800119c:	b29a      	uxth	r2, r3
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	4413      	add	r3, r2
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80011ac:	4619      	mov	r1, r3
 80011ae:	f000 fae7 	bl	8001780 <SSD1306_DrawPixel>
 80011b2:	e01a      	b.n	80011ea <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <GFX_DrawChar+0x170>)
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	fb03 f202 	mul.w	r2, r3, r2
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	18d0      	adds	r0, r2, r3
 80011c2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011c6:	4a1a      	ldr	r2, [pc, #104]	; (8001230 <GFX_DrawChar+0x170>)
 80011c8:	7812      	ldrb	r2, [r2, #0]
 80011ca:	fb03 f202 	mul.w	r2, r3, r2
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	18d1      	adds	r1, r2, r3
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <GFX_DrawChar+0x170>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <GFX_DrawChar+0x170>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b29c      	uxth	r4, r3
 80011de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	4623      	mov	r3, r4
 80011e6:	f000 f927 	bl	8001438 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80011ea:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	3301      	adds	r3, #1
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	757b      	strb	r3, [r7, #21]
 80011f6:	7dbb      	ldrb	r3, [r7, #22]
 80011f8:	085b      	lsrs	r3, r3, #1
 80011fa:	75bb      	strb	r3, [r7, #22]
 80011fc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <GFX_DrawChar+0x16c>)
 8001202:	6812      	ldr	r2, [r2, #0]
 8001204:	7812      	ldrb	r2, [r2, #0]
 8001206:	4293      	cmp	r3, r2
 8001208:	f6ff af7f 	blt.w	800110a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	3301      	adds	r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <GFX_DrawChar+0x16c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3301      	adds	r3, #1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	7dfa      	ldrb	r2, [r7, #23]
 800121c:	429a      	cmp	r2, r3
 800121e:	f4ff af61 	bcc.w	80010e4 <GFX_DrawChar+0x24>
 8001222:	e000      	b.n	8001226 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001224:	bf00      	nop
            }
        }
    }
}
 8001226:	371c      	adds	r7, #28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	20000214 	.word	0x20000214
 8001230:	20000000 	.word	0x20000000

08001234 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af02      	add	r7, sp, #8
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
 8001240:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 800124c:	e03e      	b.n	80012cc <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 800124e:	78f9      	ldrb	r1, [r7, #3]
 8001250:	7cfa      	ldrb	r2, [r7, #19]
 8001252:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	460b      	mov	r3, r1
 800125a:	68b9      	ldr	r1, [r7, #8]
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f7ff ff2f 	bl	80010c0 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <GFX_DrawString+0xb0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <GFX_DrawString+0xb4>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	fb02 f303 	mul.w	r3, r2, r3
 8001274:	3301      	adds	r3, #1
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4413      	add	r3, r2
 800127a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800127c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d120      	bne.n	80012c6 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001284:	2300      	movs	r3, #0
 8001286:	74bb      	strb	r3, [r7, #18]
 8001288:	e012      	b.n	80012b0 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	b29b      	uxth	r3, r3
 800128e:	3b01      	subs	r3, #1
 8001290:	b29b      	uxth	r3, r3
 8001292:	b218      	sxth	r0, r3
 8001294:	7cbb      	ldrb	r3, [r7, #18]
 8001296:	b29a      	uxth	r2, r3
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	b29b      	uxth	r3, r3
 800129c:	4413      	add	r3, r2
 800129e:	b29b      	uxth	r3, r3
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	2200      	movs	r2, #0
 80012a4:	4619      	mov	r1, r3
 80012a6:	f000 fa6b 	bl	8001780 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80012aa:	7cbb      	ldrb	r3, [r7, #18]
 80012ac:	3301      	adds	r3, #1
 80012ae:	74bb      	strb	r3, [r7, #18]
 80012b0:	7cba      	ldrb	r2, [r7, #18]
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <GFX_DrawString+0xb0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <GFX_DrawString+0xb4>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	fb01 f303 	mul.w	r3, r1, r3
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbe1      	blt.n	800128a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1ba      	bne.n	800124e <GFX_DrawString+0x1a>
	}
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000214 	.word	0x20000214
 80012e8:	20000000 	.word	0x20000000

080012ec <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001304:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1acb      	subs	r3, r1, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	bfb8      	it	lt
 8001312:	425b      	neglt	r3, r3
 8001314:	429a      	cmp	r2, r3
 8001316:	bfcc      	ite	gt
 8001318:	2301      	movgt	r3, #1
 800131a:	2300      	movle	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001320:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00b      	beq.n	8001340 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	623b      	str	r3, [r7, #32]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	dd0b      	ble.n	8001360 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	61bb      	str	r3, [r7, #24]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	b29b      	uxth	r3, r3
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	bfb8      	it	lt
 8001378:	425b      	neglt	r3, r3
 800137a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800137c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001380:	0fda      	lsrs	r2, r3, #31
 8001382:	4413      	add	r3, r2
 8001384:	105b      	asrs	r3, r3, #1
 8001386:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	da02      	bge.n	8001396 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001390:	2301      	movs	r3, #1
 8001392:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001394:	e030      	b.n	80013f8 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8001396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800139c:	e02c      	b.n	80013f8 <GFX_WriteLine+0x10c>
	        if (steep) {
 800139e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	b211      	sxth	r1, r2
 80013ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f9e4 	bl	8001780 <SSD1306_DrawPixel>
 80013b8:	e008      	b.n	80013cc <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	b21b      	sxth	r3, r3
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	b211      	sxth	r1, r2
 80013c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f9da 	bl	8001780 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80013cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80013ce:	8abb      	ldrh	r3, [r7, #20]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80013d6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013da:	2b00      	cmp	r3, #0
 80013dc:	da09      	bge.n	80013f2 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80013de:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	4413      	add	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80013e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80013ea:	8afb      	ldrh	r3, [r7, #22]
 80013ec:	4413      	add	r3, r2
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	ddce      	ble.n	800139e <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001400:	bf00      	nop
 8001402:	bf00      	nop
 8001404:	3730      	adds	r7, #48	; 0x30
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af02      	add	r7, sp, #8
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	1e5a      	subs	r2, r3, #1
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	4613      	mov	r3, r2
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f7ff ff5e 	bl	80012ec <GFX_WriteLine>
}
 8001430:	bf00      	nop
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	4611      	mov	r1, r2
 8001444:	461a      	mov	r2, r3
 8001446:	460b      	mov	r3, r1
 8001448:	80fb      	strh	r3, [r7, #6]
 800144a:	4613      	mov	r3, r2
 800144c:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	617b      	str	r3, [r7, #20]
 8001452:	e009      	b.n	8001468 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001454:	88ba      	ldrh	r2, [r7, #4]
 8001456:	f897 3020 	ldrb.w	r3, [r7, #32]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	6978      	ldr	r0, [r7, #20]
 800145e:	f7ff ffd4 	bl	800140a <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	88fa      	ldrh	r2, [r7, #6]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4413      	add	r3, r2
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	429a      	cmp	r2, r3
 8001472:	dbef      	blt.n	8001454 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <Read16>:
#include "INA219.h"
#include "stm32f4xx_hal.h"


uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b088      	sub	sp, #32
 8001482:	af04      	add	r7, sp, #16
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	460b      	mov	r3, r1
 8001488:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];



	HAL_I2C_Mem_Read(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, Value, 2, 1000);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	791b      	ldrb	r3, [r3, #4]
 8001492:	b29b      	uxth	r3, r3
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	b299      	uxth	r1, r3
 8001498:	78fb      	ldrb	r3, [r7, #3]
 800149a:	b29a      	uxth	r2, r3
 800149c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a0:	9302      	str	r3, [sp, #8]
 80014a2:	2302      	movs	r3, #2
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2301      	movs	r3, #1
 80014ae:	f006 fba9 	bl	8007c04 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 80014b2:	7b3b      	ldrb	r3, [r7, #12]
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	7b7b      	ldrb	r3, [r7, #13]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	4313      	orrs	r3, r2
 80014be:	b21b      	sxth	r3, r3
 80014c0:	b29b      	uxth	r3, r3
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b088      	sub	sp, #32
 80014ce:	af04      	add	r7, sp, #16
 80014d0:	6078      	str	r0, [r7, #4]
 80014d2:	460b      	mov	r3, r1
 80014d4:	70fb      	strb	r3, [r7, #3]
 80014d6:	4613      	mov	r3, r2
 80014d8:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80014da:	883b      	ldrh	r3, [r7, #0]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80014e4:	883b      	ldrh	r3, [r7, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(ina219->ina219_i2c, (ina219->Address<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	b299      	uxth	r1, r3
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001500:	9302      	str	r3, [sp, #8]
 8001502:	2302      	movs	r3, #2
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	2301      	movs	r3, #1
 800150e:	f006 fa7f 	bl	8007a10 <HAL_I2C_Mem_Write>

}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <INA219_ReadBusVoltage>:
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001522:	2102      	movs	r1, #2
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ffaa 	bl	800147e <Read16>
 800152a:	4603      	mov	r3, r0
 800152c:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 800152e:	89fb      	ldrh	r3, [r7, #14]
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	b29b      	uxth	r3, r3
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	b29b      	uxth	r3, r3

}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001548:	2104      	movs	r1, #4
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff97 	bl	800147e <Read16>
 8001550:	4603      	mov	r3, r0
 8001552:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001554:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <INA219_ReadCurrent>:

float INA219_ReadCurrent(INA219_t *ina219)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff ffe9 	bl	8001540 <INA219_ReadCurrent_raw>
 800156e:	4603      	mov	r3, r0
 8001570:	81fb      	strh	r3, [r7, #14]

	return (result / 10);
 8001572:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001576:	4a08      	ldr	r2, [pc, #32]	; (8001598 <INA219_ReadCurrent+0x38>)
 8001578:	fb82 1203 	smull	r1, r2, r2, r3
 800157c:	1092      	asrs	r2, r2, #2
 800157e:	17db      	asrs	r3, r3, #31
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	b21b      	sxth	r3, r3
 8001584:	ee07 3a90 	vmov	s15, r3
 8001588:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800158c:	eeb0 0a67 	vmov.f32	s0, s15
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	66666667 	.word	0x66666667

0800159c <INA219_ReadPower>:
uint16_t INA219_ReadPower(INA219_t *ina219,ina219_calibration *ina219calibration)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	6039      	str	r1, [r7, #0]
	uint16_t result = Read16(ina219, INA219_REG_POWER );
 80015a6:	2103      	movs	r1, #3
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff68 	bl	800147e <Read16>
 80015ae:	4603      	mov	r3, r0
 80015b0:	81fb      	strh	r3, [r7, #14]
	result = result * (ina219calibration->ina219_powerMultiplier_mW); // power is the power register times the power_LSB (power multiplier)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	89fa      	ldrh	r2, [r7, #14]
 80015bc:	fb12 f303 	smulbb	r3, r2, r3
 80015c0:	81fb      	strh	r3, [r7, #14]
	return (result);
 80015c2:	89fb      	ldrh	r3, [r7, #14]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	0000      	movs	r0, r0
	...

080015d0 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 80015d8:	2101      	movs	r1, #1
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ff4f 	bl	800147e <Read16>
 80015e0:	4603      	mov	r3, r0
 80015e2:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 80015e4:	89fb      	ldrh	r3, [r7, #14]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ffa4 	bl	8000534 <__aeabi_i2d>
 80015ec:	a308      	add	r3, pc, #32	; (adr r3, 8001610 <INA219_ReadShuntVolage+0x40>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f809 	bl	8000608 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4610      	mov	r0, r2
 80015fc:	4619      	mov	r1, r3
 80015fe:	f7ff fadb 	bl	8000bb8 <__aeabi_d2uiz>
 8001602:	4603      	mov	r3, r0
 8001604:	b29b      	uxth	r3, r3
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	47ae147b 	.word	0x47ae147b
 8001614:	3f847ae1 	.word	0x3f847ae1

08001618 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001620:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001624:	2100      	movs	r1, #0
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff4f 	bl	80014ca <Write16>
	HAL_Delay(1);
 800162c:	2001      	movs	r0, #1
 800162e:	f005 f96b 	bl	8006908 <HAL_Delay>

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	461a      	mov	r2, r3
 800164a:	2105      	movs	r1, #5
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff3c 	bl	80014ca <Write16>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	461a      	mov	r2, r3
 800166a:	2100      	movs	r1, #0
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff ff2c 	bl	80014ca <Write16>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219,ina219_calibration *ina219calibration)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
 8001682:	6039      	str	r1, [r7, #0]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001684:	f643 139f 	movw	r3, #14751	; 0x399f
 8001688:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219calibration->ina219_calibrationValue = 4096;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001690:	801a      	strh	r2, [r3, #0]
	ina219calibration->ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	220a      	movs	r2, #10
 8001696:	805a      	strh	r2, [r3, #2]
	ina219calibration->ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2202      	movs	r2, #2
 800169c:	809a      	strh	r2, [r3, #4]

	INA219_setCalibration(ina219, ina219calibration->ina219_calibrationValue);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	4619      	mov	r1, r3
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffc8 	bl	800163a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	4619      	mov	r1, r3
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffd3 	bl	800165a <INA219_setConfig>
}
 80016b4:	bf00      	nop
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address,ina219_calibration *ina219calibration)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	79fa      	ldrb	r2, [r7, #7]
 80016d6:	711a      	strb	r2, [r3, #4]

	ina219calibration->ina219_currentDivider_mA = 0;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	2200      	movs	r2, #0
 80016dc:	805a      	strh	r2, [r3, #2]
	ina219calibration->ina219_powerMultiplier_mW = 0;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2200      	movs	r2, #0
 80016e2:	809a      	strh	r2, [r3, #4]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	b299      	uxth	r1, r3
 80016ec:	2302      	movs	r3, #2
 80016ee:	2203      	movs	r2, #3
 80016f0:	68b8      	ldr	r0, [r7, #8]
 80016f2:	f006 fcad 	bl	8008050 <HAL_I2C_IsDeviceReady>
 80016f6:	4603      	mov	r3, r0
 80016f8:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d108      	bne.n	8001712 <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff ff89 	bl	8001618 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219,ina219calibration);
 8001706:	6839      	ldr	r1, [r7, #0]
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f7ff ffb6 	bl	800167a <INA219_setCalibration_32V_2A>

		return 1;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <INA219_Init+0x58>
	}

	else
	{
		return 0;
 8001712:	2300      	movs	r3, #0
	}
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af04      	add	r7, sp, #16
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <SSD1306_Command+0x2c>)
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	2364      	movs	r3, #100	; 0x64
 800172c:	9302      	str	r3, [sp, #8]
 800172e:	2301      	movs	r3, #1
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	2301      	movs	r3, #1
 8001738:	2200      	movs	r2, #0
 800173a:	2178      	movs	r1, #120	; 0x78
 800173c:	f006 f968 	bl	8007a10 <HAL_I2C_Mem_Write>
}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000218 	.word	0x20000218

0800174c <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af04      	add	r7, sp, #16
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <SSD1306_Data+0x30>)
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	2364      	movs	r3, #100	; 0x64
 800175e:	9302      	str	r3, [sp, #8]
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	2301      	movs	r3, #1
 800176a:	2240      	movs	r2, #64	; 0x40
 800176c:	2178      	movs	r1, #120	; 0x78
 800176e:	f006 f94f 	bl	8007a10 <HAL_I2C_Mem_Write>
#endif
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000218 	.word	0x20000218

08001780 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
 800178a:	460b      	mov	r3, r1
 800178c:	80bb      	strh	r3, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db79      	blt.n	800188e <SSD1306_DrawPixel+0x10e>
 800179a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800179e:	2b7f      	cmp	r3, #127	; 0x7f
 80017a0:	dc75      	bgt.n	800188e <SSD1306_DrawPixel+0x10e>
 80017a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	db71      	blt.n	800188e <SSD1306_DrawPixel+0x10e>
 80017aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ae:	2b3f      	cmp	r3, #63	; 0x3f
 80017b0:	dc6d      	bgt.n	800188e <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d049      	beq.n	800184c <SSD1306_DrawPixel+0xcc>
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	dc69      	bgt.n	8001890 <SSD1306_DrawPixel+0x110>
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d022      	beq.n	8001806 <SSD1306_DrawPixel+0x86>
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d165      	bne.n	8001890 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80017c4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da00      	bge.n	80017d2 <SSD1306_DrawPixel+0x52>
 80017d0:	3307      	adds	r3, #7
 80017d2:	10db      	asrs	r3, r3, #3
 80017d4:	b218      	sxth	r0, r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	01db      	lsls	r3, r3, #7
 80017da:	4413      	add	r3, r2
 80017dc:	4a2f      	ldr	r2, [pc, #188]	; (800189c <SSD1306_DrawPixel+0x11c>)
 80017de:	5cd3      	ldrb	r3, [r2, r3]
 80017e0:	b25a      	sxtb	r2, r3
 80017e2:	88bb      	ldrh	r3, [r7, #4]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	2101      	movs	r1, #1
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b259      	sxtb	r1, r3
 80017f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80017f8:	4603      	mov	r3, r0
 80017fa:	01db      	lsls	r3, r3, #7
 80017fc:	4413      	add	r3, r2
 80017fe:	b2c9      	uxtb	r1, r1
 8001800:	4a26      	ldr	r2, [pc, #152]	; (800189c <SSD1306_DrawPixel+0x11c>)
 8001802:	54d1      	strb	r1, [r2, r3]
      break;
 8001804:	e044      	b.n	8001890 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001806:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800180a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	da00      	bge.n	8001814 <SSD1306_DrawPixel+0x94>
 8001812:	3307      	adds	r3, #7
 8001814:	10db      	asrs	r3, r3, #3
 8001816:	b218      	sxth	r0, r3
 8001818:	4603      	mov	r3, r0
 800181a:	01db      	lsls	r3, r3, #7
 800181c:	4413      	add	r3, r2
 800181e:	4a1f      	ldr	r2, [pc, #124]	; (800189c <SSD1306_DrawPixel+0x11c>)
 8001820:	5cd3      	ldrb	r3, [r2, r3]
 8001822:	b25a      	sxtb	r2, r3
 8001824:	88bb      	ldrh	r3, [r7, #4]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	2101      	movs	r1, #1
 800182c:	fa01 f303 	lsl.w	r3, r1, r3
 8001830:	b25b      	sxtb	r3, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	b25b      	sxtb	r3, r3
 8001836:	4013      	ands	r3, r2
 8001838:	b259      	sxtb	r1, r3
 800183a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800183e:	4603      	mov	r3, r0
 8001840:	01db      	lsls	r3, r3, #7
 8001842:	4413      	add	r3, r2
 8001844:	b2c9      	uxtb	r1, r1
 8001846:	4a15      	ldr	r2, [pc, #84]	; (800189c <SSD1306_DrawPixel+0x11c>)
 8001848:	54d1      	strb	r1, [r2, r3]
      break;
 800184a:	e021      	b.n	8001890 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800184c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001850:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	da00      	bge.n	800185a <SSD1306_DrawPixel+0xda>
 8001858:	3307      	adds	r3, #7
 800185a:	10db      	asrs	r3, r3, #3
 800185c:	b218      	sxth	r0, r3
 800185e:	4603      	mov	r3, r0
 8001860:	01db      	lsls	r3, r3, #7
 8001862:	4413      	add	r3, r2
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <SSD1306_DrawPixel+0x11c>)
 8001866:	5cd3      	ldrb	r3, [r2, r3]
 8001868:	b25a      	sxtb	r2, r3
 800186a:	88bb      	ldrh	r3, [r7, #4]
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	b25b      	sxtb	r3, r3
 8001878:	4053      	eors	r3, r2
 800187a:	b259      	sxtb	r1, r3
 800187c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001880:	4603      	mov	r3, r0
 8001882:	01db      	lsls	r3, r3, #7
 8001884:	4413      	add	r3, r2
 8001886:	b2c9      	uxtb	r1, r1
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <SSD1306_DrawPixel+0x11c>)
 800188a:	54d1      	strb	r1, [r2, r3]
      break;
 800188c:	e000      	b.n	8001890 <SSD1306_DrawPixel+0x110>
	  return;
 800188e:	bf00      	nop
    }
}
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	2000021c 	.word	0x2000021c

080018a0 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <SSD1306_Clear+0x22>
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d10d      	bne.n	80018d0 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80018b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018b8:	21ff      	movs	r1, #255	; 0xff
 80018ba:	4807      	ldr	r0, [pc, #28]	; (80018d8 <SSD1306_Clear+0x38>)
 80018bc:	f012 ffd1 	bl	8014862 <memset>
		break;
 80018c0:	e006      	b.n	80018d0 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80018c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018c6:	2100      	movs	r1, #0
 80018c8:	4803      	ldr	r0, [pc, #12]	; (80018d8 <SSD1306_Clear+0x38>)
 80018ca:	f012 ffca 	bl	8014862 <memset>
		break;
 80018ce:	bf00      	nop
	}
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000021c 	.word	0x2000021c

080018dc <SSD1306_Display>:

void SSD1306_Display(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
//	SSD1306_Command(SSD1306_COLUMNADDR);
//	SSD1306_Command(0); // Column start address
//	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
//
//	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
	for (uint8_t i = 0; i < 8 ; i++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	71fb      	strb	r3, [r7, #7]
 80018e6:	e02d      	b.n	8001944 <SSD1306_Display+0x68>
		{
			osMutexAcquire(MutexI2C2Handle, osWaitForever);
 80018e8:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <SSD1306_Display+0x78>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00e f873 	bl	800f9dc <osMutexAcquire>
//	//		printf("TASK OLED I2C MUTEX is taken \n\r");
		    SSD1306_Command(SSD1306_PAGEADDR);
 80018f6:	2022      	movs	r0, #34	; 0x22
 80018f8:	f7ff ff10 	bl	800171c <SSD1306_Command>
		    SSD1306_Command(i);                      // Page start address
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff0c 	bl	800171c <SSD1306_Command>
			SSD1306_Command(i);                   // Page end (not really, but works here)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff08 	bl	800171c <SSD1306_Command>
			SSD1306_Command(SSD1306_COLUMNADDR);
 800190c:	2021      	movs	r0, #33	; 0x21
 800190e:	f7ff ff05 	bl	800171c <SSD1306_Command>
			SSD1306_Command(0); // Column start address
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff ff02 	bl	800171c <SSD1306_Command>
			SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001918:	207f      	movs	r0, #127	; 0x7f
 800191a:	f7ff feff 	bl	800171c <SSD1306_Command>

			SSD1306_Data(buffer+(i * SSD1306_LCDWIDTH), SSD1306_LCDWIDTH);
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	01db      	lsls	r3, r3, #7
 8001922:	461a      	mov	r2, r3
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <SSD1306_Display+0x7c>)
 8001926:	4413      	add	r3, r2
 8001928:	2180      	movs	r1, #128	; 0x80
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff0e 	bl	800174c <SSD1306_Data>
			osMutexRelease(MutexI2C2Handle);
 8001930:	4b08      	ldr	r3, [pc, #32]	; (8001954 <SSD1306_Display+0x78>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f00e f89c 	bl	800fa72 <osMutexRelease>
	//		printf("TASK OLED I2C MUTEX is released \n\r");
			osThreadYield();
 800193a:	f00d fd95 	bl	800f468 <osThreadYield>
	for (uint8_t i = 0; i < 8 ; i++)
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	3301      	adds	r3, #1
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	79fb      	ldrb	r3, [r7, #7]
 8001946:	2b07      	cmp	r3, #7
 8001948:	d9ce      	bls.n	80018e8 <SSD1306_Display+0xc>
		}
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	2000073c 	.word	0x2000073c
 8001958:	2000021c 	.word	0x2000021c

0800195c <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001964:	4a28      	ldr	r2, [pc, #160]	; (8001a08 <SSD1306_Init+0xac>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 800196a:	20ae      	movs	r0, #174	; 0xae
 800196c:	f7ff fed6 	bl	800171c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001970:	20d5      	movs	r0, #213	; 0xd5
 8001972:	f7ff fed3 	bl	800171c <SSD1306_Command>
	SSD1306_Command(0x80);
 8001976:	2080      	movs	r0, #128	; 0x80
 8001978:	f7ff fed0 	bl	800171c <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 800197c:	203f      	movs	r0, #63	; 0x3f
 800197e:	f7ff fecd 	bl	800171c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8001982:	20d3      	movs	r0, #211	; 0xd3
 8001984:	f7ff feca 	bl	800171c <SSD1306_Command>
	SSD1306_Command(0x00);
 8001988:	2000      	movs	r0, #0
 800198a:	f7ff fec7 	bl	800171c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800198e:	2040      	movs	r0, #64	; 0x40
 8001990:	f7ff fec4 	bl	800171c <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001994:	208d      	movs	r0, #141	; 0x8d
 8001996:	f7ff fec1 	bl	800171c <SSD1306_Command>
	SSD1306_Command(0x14);
 800199a:	2014      	movs	r0, #20
 800199c:	f7ff febe 	bl	800171c <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 80019a0:	2020      	movs	r0, #32
 80019a2:	f7ff febb 	bl	800171c <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff feb8 	bl	800171c <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80019ac:	20a1      	movs	r0, #161	; 0xa1
 80019ae:	f7ff feb5 	bl	800171c <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80019b2:	20c8      	movs	r0, #200	; 0xc8
 80019b4:	f7ff feb2 	bl	800171c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80019b8:	20da      	movs	r0, #218	; 0xda
 80019ba:	f7ff feaf 	bl	800171c <SSD1306_Command>
	SSD1306_Command(0x12);
 80019be:	2012      	movs	r0, #18
 80019c0:	f7ff feac 	bl	800171c <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 80019c4:	2081      	movs	r0, #129	; 0x81
 80019c6:	f7ff fea9 	bl	800171c <SSD1306_Command>
	SSD1306_Command(0xFF);
 80019ca:	20ff      	movs	r0, #255	; 0xff
 80019cc:	f7ff fea6 	bl	800171c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80019d0:	20d9      	movs	r0, #217	; 0xd9
 80019d2:	f7ff fea3 	bl	800171c <SSD1306_Command>
	SSD1306_Command(0xF1);
 80019d6:	20f1      	movs	r0, #241	; 0xf1
 80019d8:	f7ff fea0 	bl	800171c <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80019dc:	20db      	movs	r0, #219	; 0xdb
 80019de:	f7ff fe9d 	bl	800171c <SSD1306_Command>
	SSD1306_Command(0x40);
 80019e2:	2040      	movs	r0, #64	; 0x40
 80019e4:	f7ff fe9a 	bl	800171c <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80019e8:	20a4      	movs	r0, #164	; 0xa4
 80019ea:	f7ff fe97 	bl	800171c <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80019ee:	20a6      	movs	r0, #166	; 0xa6
 80019f0:	f7ff fe94 	bl	800171c <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80019f4:	202e      	movs	r0, #46	; 0x2e
 80019f6:	f7ff fe91 	bl	800171c <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80019fa:	20af      	movs	r0, #175	; 0xaf
 80019fc:	f7ff fe8e 	bl	800171c <SSD1306_Command>
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000218 	.word	0x20000218

08001a0c <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <BH1750_Init+0x34>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8001a1a:	f000 f813 	bl	8001a44 <BH1750_Reset>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8001a24:	2045      	movs	r0, #69	; 0x45
 8001a26:	f000 f859 	bl	8001adc <BH1750_SetMtreg>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <BH1750_Init+0x28>
			return BH1750_OK;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e000      	b.n	8001a36 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	2000061c 	.word	0x2000061c

08001a44 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <BH1750_Reset+0x30>)
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	1dfa      	adds	r2, r7, #7
 8001a54:	230a      	movs	r3, #10
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2146      	movs	r1, #70	; 0x46
 8001a5c:	f005 fcb4 	bl	80073c8 <HAL_I2C_Master_Transmit>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <BH1750_Reset+0x26>
		return BH1750_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <BH1750_Reset+0x28>

	return BH1750_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000061c 	.word	0x2000061c

08001a78 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <BH1750_SetMode+0x22>
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <BH1750_SetMode+0x22>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e018      	b.n	8001acc <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <BH1750_SetMode+0x30>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e011      	b.n	8001acc <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8001aa8:	79fa      	ldrb	r2, [r7, #7]
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <BH1750_SetMode+0x5c>)
 8001aac:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <BH1750_SetMode+0x60>)
 8001ab0:	6818      	ldr	r0, [r3, #0]
 8001ab2:	1dfa      	adds	r2, r7, #7
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	2146      	movs	r1, #70	; 0x46
 8001abc:	f005 fc84 	bl	80073c8 <HAL_I2C_Master_Transmit>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d101      	bne.n	8001aca <BH1750_SetMode+0x52>
		return BH1750_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	e000      	b.n	8001acc <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000620 	.word	0x20000620
 8001ad8:	2000061c 	.word	0x2000061c

08001adc <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b1e      	cmp	r3, #30
 8001aea:	d902      	bls.n	8001af2 <BH1750_SetMtreg+0x16>
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2bff      	cmp	r3, #255	; 0xff
 8001af0:	d101      	bne.n	8001af6 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e037      	b.n	8001b66 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8001af6:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <BH1750_SetMtreg+0x94>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b18:	b25b      	sxtb	r3, r3
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <BH1750_SetMtreg+0x98>)
 8001b20:	6818      	ldr	r0, [r3, #0]
 8001b22:	f107 020c 	add.w	r2, r7, #12
 8001b26:	230a      	movs	r3, #10
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	2146      	movs	r1, #70	; 0x46
 8001b2e:	f005 fc4b 	bl	80073c8 <HAL_I2C_Master_Transmit>
 8001b32:	4603      	mov	r3, r0
 8001b34:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e012      	b.n	8001b66 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <BH1750_SetMtreg+0x98>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2146      	movs	r1, #70	; 0x46
 8001b52:	f005 fc39 	bl	80073c8 <HAL_I2C_Master_Transmit>
 8001b56:	4603      	mov	r3, r0
 8001b58:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	e000      	b.n	8001b66 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000621 	.word	0x20000621
 8001b74:	2000061c 	.word	0x2000061c

08001b78 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af02      	add	r7, sp, #8
 8001b7e:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8001b80:	4b25      	ldr	r3, [pc, #148]	; (8001c18 <BH1750_ReadLight+0xa0>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	f107 0208 	add.w	r2, r7, #8
 8001b88:	230a      	movs	r3, #10
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	2146      	movs	r1, #70	; 0x46
 8001b90:	f005 fd18 	bl	80075c4 <HAL_I2C_Master_Receive>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d138      	bne.n	8001c0c <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8001b9a:	7a3b      	ldrb	r3, [r7, #8]
 8001b9c:	021b      	lsls	r3, r3, #8
 8001b9e:	7a7a      	ldrb	r2, [r7, #9]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001baa:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001bae:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <BH1750_ReadLight+0xa4>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	2b45      	cmp	r3, #69	; 0x45
 8001bb4:	d00f      	beq.n	8001bd6 <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8001bb6:	4b19      	ldr	r3, [pc, #100]	; (8001c1c <BH1750_ReadLight+0xa4>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bc2:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001c20 <BH1750_ReadLight+0xa8>
 8001bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bca:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd2:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <BH1750_ReadLight+0xac>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b21      	cmp	r3, #33	; 0x21
 8001bdc:	d003      	beq.n	8001be6 <BH1750_ReadLight+0x6e>
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <BH1750_ReadLight+0xac>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b11      	cmp	r3, #17
 8001be4:	d107      	bne.n	8001bf6 <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 8001be6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf2:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001bf6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bfa:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001c28 <BH1750_ReadLight+0xb0>
 8001bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e000      	b.n	8001c0e <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000061c 	.word	0x2000061c
 8001c1c:	20000621 	.word	0x20000621
 8001c20:	428a0000 	.word	0x428a0000
 8001c24:	20000620 	.word	0x20000620
 8001c28:	3f99999a 	.word	0x3f99999a

08001c2c <BME280_Read8>:
int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9, h2, h4, h5;
uint16_t t1, p1;
int32_t t_fine;

uint8_t BME280_Read8(uint8_t addr)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af04      	add	r7, sp, #16
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp = 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, &tmp, 1, 10);
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <BME280_Read8+0x38>)
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	230a      	movs	r3, #10
 8001c44:	9302      	str	r3, [sp, #8]
 8001c46:	2301      	movs	r3, #1
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	f107 030f 	add.w	r3, r7, #15
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	2301      	movs	r3, #1
 8001c52:	21ec      	movs	r1, #236	; 0xec
 8001c54:	f005 ffd6 	bl	8007c04 <HAL_I2C_Mem_Read>
	return tmp;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000624 	.word	0x20000624

08001c68 <BME280_Read16>:

uint16_t BME280_Read16(uint8_t addr)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b088      	sub	sp, #32
 8001c6c:	af04      	add	r7, sp, #16
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 2, 10);
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <BME280_Read16+0x40>)
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	230a      	movs	r3, #10
 8001c7c:	9302      	str	r3, [sp, #8]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	f107 030c 	add.w	r3, r7, #12
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	2301      	movs	r3, #1
 8001c8a:	21ec      	movs	r1, #236	; 0xec
 8001c8c:	f005 ffba 	bl	8007c04 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001c90:	7b3b      	ldrb	r3, [r7, #12]
 8001c92:	021b      	lsls	r3, r3, #8
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	7b7b      	ldrb	r3, [r7, #13]
 8001c98:	b21b      	sxth	r3, r3
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b21b      	sxth	r3, r3
 8001c9e:	b29b      	uxth	r3, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20000624 	.word	0x20000624

08001cac <BME280_Read16LE>:

uint16_t BME280_Read16LE(uint8_t addr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BME280_Read16(addr);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ffd5 	bl	8001c68 <BME280_Read16>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	b21a      	sxth	r2, r3
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	021b      	lsls	r3, r3, #8
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	b21b      	sxth	r3, r3
 8001cd4:	b29b      	uxth	r3, r3
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <BME280_Write8>:

void BME280_Write8(uint8_t address, uint8_t data)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af04      	add	r7, sp, #16
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	460a      	mov	r2, r1
 8001cea:	71fb      	strb	r3, [r7, #7]
 8001cec:	4613      	mov	r3, r2
 8001cee:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <BME280_Write8+0x34>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	230a      	movs	r3, #10
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	1dbb      	adds	r3, r7, #6
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2301      	movs	r3, #1
 8001d06:	21ec      	movs	r1, #236	; 0xec
 8001d08:	f005 fe82 	bl	8007a10 <HAL_I2C_Mem_Write>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000624 	.word	0x20000624

08001d18 <BME280_Read24>:

uint32_t BME280_Read24(uint8_t addr)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af04      	add	r7, sp, #16
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 3, 10);
 8001d22:	4b0d      	ldr	r3, [pc, #52]	; (8001d58 <BME280_Read24+0x40>)
 8001d24:	6818      	ldr	r0, [r3, #0]
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	9302      	str	r3, [sp, #8]
 8001d2e:	2303      	movs	r3, #3
 8001d30:	9301      	str	r3, [sp, #4]
 8001d32:	f107 030c 	add.w	r3, r7, #12
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	2301      	movs	r3, #1
 8001d3a:	21ec      	movs	r1, #236	; 0xec
 8001d3c:	f005 ff62 	bl	8007c04 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001d40:	7b3b      	ldrb	r3, [r7, #12]
 8001d42:	041a      	lsls	r2, r3, #16
 8001d44:	7b7b      	ldrb	r3, [r7, #13]
 8001d46:	021b      	lsls	r3, r3, #8
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	7bba      	ldrb	r2, [r7, #14]
 8001d4c:	4313      	orrs	r3, r2
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000624 	.word	0x20000624

08001d5c <BME280_IsReadingCalibration>:
uint8_t BME280_IsReadingCalibration(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
	uint8_t Status = BME280_Read8(BME280_STATUS);
 8001d62:	20f3      	movs	r0, #243	; 0xf3
 8001d64:	f7ff ff62 	bl	8001c2c <BME280_Read8>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]

	return ((Status & 1) != 0);
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	bf14      	ite	ne
 8001d76:	2301      	movne	r3, #1
 8001d78:	2300      	moveq	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <BME280_SetConfig>:

void BME280_SetConfig(uint8_t standby_time, uint8_t filter)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	71fb      	strb	r3, [r7, #7]
 8001d90:	4613      	mov	r3, r2
 8001d92:	71bb      	strb	r3, [r7, #6]
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	015b      	lsls	r3, r3, #5
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	79bb      	ldrb	r3, [r7, #6]
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	b25b      	sxtb	r3, r3
 8001da0:	f003 031c 	and.w	r3, r3, #28
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	4313      	orrs	r3, r2
 8001da8:	b25b      	sxtb	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f023 0303 	bic.w	r3, r3, #3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	4619      	mov	r1, r3
 8001db4:	20f5      	movs	r0, #245	; 0xf5
 8001db6:	f7ff ff93 	bl	8001ce0 <BME280_Write8>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <BME280_Init>:


void BME280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t huminidity_oversampling, uint8_t mode)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	4608      	mov	r0, r1
 8001dce:	4611      	mov	r1, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	70fb      	strb	r3, [r7, #3]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	70bb      	strb	r3, [r7, #2]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8001dde:	4a8f      	ldr	r2, [pc, #572]	; (800201c <BME280_Init+0x258>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6013      	str	r3, [r2, #0]
	uint8_t HumReg, i;

		if (mode > BME280_NORMALMODE)
 8001de4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d902      	bls.n	8001df2 <BME280_Init+0x2e>
		    mode = BME280_NORMALMODE;
 8001dec:	2303      	movs	r3, #3
 8001dee:	f887 3020 	strb.w	r3, [r7, #32]
		_mode = mode;
 8001df2:	4a8b      	ldr	r2, [pc, #556]	; (8002020 <BME280_Init+0x25c>)
 8001df4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001df8:	7013      	strb	r3, [r2, #0]
		if(mode == BME280_FORCEDMODE)
 8001dfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d102      	bne.n	8001e08 <BME280_Init+0x44>
			mode = BME280_SLEEPMODE;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f887 3020 	strb.w	r3, [r7, #32]

		if (temperature_resolution > BME280_TEMPERATURE_20BIT)
 8001e08:	78fb      	ldrb	r3, [r7, #3]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d901      	bls.n	8001e12 <BME280_Init+0x4e>
			temperature_resolution = BME280_TEMPERATURE_20BIT;
 8001e0e:	2305      	movs	r3, #5
 8001e10:	70fb      	strb	r3, [r7, #3]
		_temperature_res = temperature_resolution;
 8001e12:	4a84      	ldr	r2, [pc, #528]	; (8002024 <BME280_Init+0x260>)
 8001e14:	78fb      	ldrb	r3, [r7, #3]
 8001e16:	7013      	strb	r3, [r2, #0]

		if (pressure_oversampling > BME280_PRESSURE_ULTRAHIGHRES)
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d901      	bls.n	8001e22 <BME280_Init+0x5e>
			pressure_oversampling = BME280_PRESSURE_ULTRAHIGHRES;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	70bb      	strb	r3, [r7, #2]
		_pressure_oversampling = pressure_oversampling;
 8001e22:	4a81      	ldr	r2, [pc, #516]	; (8002028 <BME280_Init+0x264>)
 8001e24:	78bb      	ldrb	r3, [r7, #2]
 8001e26:	7013      	strb	r3, [r2, #0]

		if (huminidity_oversampling > BME280_HUMINIDITY_ULTRAHIGH)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d901      	bls.n	8001e32 <BME280_Init+0x6e>
			huminidity_oversampling = BME280_HUMINIDITY_ULTRAHIGH;
 8001e2e:	2305      	movs	r3, #5
 8001e30:	707b      	strb	r3, [r7, #1]
		_huminidity_oversampling = huminidity_oversampling;
 8001e32:	4a7e      	ldr	r2, [pc, #504]	; (800202c <BME280_Init+0x268>)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	7013      	strb	r3, [r2, #0]

		while(BME280_Read8(BME280_CHIPID) != 0x60);
 8001e38:	bf00      	nop
 8001e3a:	20d0      	movs	r0, #208	; 0xd0
 8001e3c:	f7ff fef6 	bl	8001c2c <BME280_Read8>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b60      	cmp	r3, #96	; 0x60
 8001e44:	d1f9      	bne.n	8001e3a <BME280_Init+0x76>

		BME280_Write8(BME280_SOFTRESET, 0xB6);
 8001e46:	21b6      	movs	r1, #182	; 0xb6
 8001e48:	20e0      	movs	r0, #224	; 0xe0
 8001e4a:	f7ff ff49 	bl	8001ce0 <BME280_Write8>

		for(i = 0; i<30; i++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e005      	b.n	8001e60 <BME280_Init+0x9c>
			HAL_Delay(10); // Wait  300 msfor wake up
 8001e54:	200a      	movs	r0, #10
 8001e56:	f004 fd57 	bl	8006908 <HAL_Delay>
		for(i = 0; i<30; i++)
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	2b1d      	cmp	r3, #29
 8001e64:	d9f6      	bls.n	8001e54 <BME280_Init+0x90>

		while(BME280_IsReadingCalibration())
 8001e66:	e00b      	b.n	8001e80 <BME280_Init+0xbc>
			for(i = 0; i<10; i++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e005      	b.n	8001e7a <BME280_Init+0xb6>
				HAL_Delay(1);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f004 fd4a 	bl	8006908 <HAL_Delay>
			for(i = 0; i<10; i++)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	3301      	adds	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
 8001e7c:	2b09      	cmp	r3, #9
 8001e7e:	d9f6      	bls.n	8001e6e <BME280_Init+0xaa>
		while(BME280_IsReadingCalibration())
 8001e80:	f7ff ff6c 	bl	8001d5c <BME280_IsReadingCalibration>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1ee      	bne.n	8001e68 <BME280_Init+0xa4>

		/* read calibration data */
		t1 = BME280_Read16LE(BME280_DIG_T1);
 8001e8a:	2088      	movs	r0, #136	; 0x88
 8001e8c:	f7ff ff0e 	bl	8001cac <BME280_Read16LE>
 8001e90:	4603      	mov	r3, r0
 8001e92:	461a      	mov	r2, r3
 8001e94:	4b66      	ldr	r3, [pc, #408]	; (8002030 <BME280_Init+0x26c>)
 8001e96:	801a      	strh	r2, [r3, #0]
		t2 = BME280_Read16LE(BME280_DIG_T2);
 8001e98:	208a      	movs	r0, #138	; 0x8a
 8001e9a:	f7ff ff07 	bl	8001cac <BME280_Read16LE>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	b21a      	sxth	r2, r3
 8001ea2:	4b64      	ldr	r3, [pc, #400]	; (8002034 <BME280_Init+0x270>)
 8001ea4:	801a      	strh	r2, [r3, #0]
		t3 = BME280_Read16LE(BME280_DIG_T3);
 8001ea6:	208c      	movs	r0, #140	; 0x8c
 8001ea8:	f7ff ff00 	bl	8001cac <BME280_Read16LE>
 8001eac:	4603      	mov	r3, r0
 8001eae:	b21a      	sxth	r2, r3
 8001eb0:	4b61      	ldr	r3, [pc, #388]	; (8002038 <BME280_Init+0x274>)
 8001eb2:	801a      	strh	r2, [r3, #0]

		p1 = BME280_Read16LE(BME280_DIG_P1);
 8001eb4:	208e      	movs	r0, #142	; 0x8e
 8001eb6:	f7ff fef9 	bl	8001cac <BME280_Read16LE>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <BME280_Init+0x278>)
 8001ec0:	801a      	strh	r2, [r3, #0]
		p2 = BME280_Read16LE(BME280_DIG_P2);
 8001ec2:	2090      	movs	r0, #144	; 0x90
 8001ec4:	f7ff fef2 	bl	8001cac <BME280_Read16LE>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	b21a      	sxth	r2, r3
 8001ecc:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <BME280_Init+0x27c>)
 8001ece:	801a      	strh	r2, [r3, #0]
		p3 = BME280_Read16LE(BME280_DIG_P3);
 8001ed0:	2092      	movs	r0, #146	; 0x92
 8001ed2:	f7ff feeb 	bl	8001cac <BME280_Read16LE>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	4b5a      	ldr	r3, [pc, #360]	; (8002044 <BME280_Init+0x280>)
 8001edc:	801a      	strh	r2, [r3, #0]
		p4 = BME280_Read16LE(BME280_DIG_P4);
 8001ede:	2094      	movs	r0, #148	; 0x94
 8001ee0:	f7ff fee4 	bl	8001cac <BME280_Read16LE>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	4b57      	ldr	r3, [pc, #348]	; (8002048 <BME280_Init+0x284>)
 8001eea:	801a      	strh	r2, [r3, #0]
		p5 = BME280_Read16LE(BME280_DIG_P5);
 8001eec:	2096      	movs	r0, #150	; 0x96
 8001eee:	f7ff fedd 	bl	8001cac <BME280_Read16LE>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	4b55      	ldr	r3, [pc, #340]	; (800204c <BME280_Init+0x288>)
 8001ef8:	801a      	strh	r2, [r3, #0]
		p6 = BME280_Read16LE(BME280_DIG_P6);
 8001efa:	2098      	movs	r0, #152	; 0x98
 8001efc:	f7ff fed6 	bl	8001cac <BME280_Read16LE>
 8001f00:	4603      	mov	r3, r0
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	4b52      	ldr	r3, [pc, #328]	; (8002050 <BME280_Init+0x28c>)
 8001f06:	801a      	strh	r2, [r3, #0]
		p7 = BME280_Read16LE(BME280_DIG_P7);
 8001f08:	209a      	movs	r0, #154	; 0x9a
 8001f0a:	f7ff fecf 	bl	8001cac <BME280_Read16LE>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	4b50      	ldr	r3, [pc, #320]	; (8002054 <BME280_Init+0x290>)
 8001f14:	801a      	strh	r2, [r3, #0]
		p8 = BME280_Read16LE(BME280_DIG_P8);
 8001f16:	209c      	movs	r0, #156	; 0x9c
 8001f18:	f7ff fec8 	bl	8001cac <BME280_Read16LE>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <BME280_Init+0x294>)
 8001f22:	801a      	strh	r2, [r3, #0]
		p9 = BME280_Read16LE(BME280_DIG_P9);
 8001f24:	209e      	movs	r0, #158	; 0x9e
 8001f26:	f7ff fec1 	bl	8001cac <BME280_Read16LE>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	4b4b      	ldr	r3, [pc, #300]	; (800205c <BME280_Init+0x298>)
 8001f30:	801a      	strh	r2, [r3, #0]

		h1 = BME280_Read8(BME280_DIG_H1);
 8001f32:	20a1      	movs	r0, #161	; 0xa1
 8001f34:	f7ff fe7a 	bl	8001c2c <BME280_Read8>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b48      	ldr	r3, [pc, #288]	; (8002060 <BME280_Init+0x29c>)
 8001f3e:	701a      	strb	r2, [r3, #0]
		h2 = BME280_Read16LE(BME280_DIG_H2);
 8001f40:	20e1      	movs	r0, #225	; 0xe1
 8001f42:	f7ff feb3 	bl	8001cac <BME280_Read16LE>
 8001f46:	4603      	mov	r3, r0
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <BME280_Init+0x2a0>)
 8001f4c:	801a      	strh	r2, [r3, #0]
		h3 = BME280_Read8(BME280_DIG_H3);
 8001f4e:	20e3      	movs	r0, #227	; 0xe3
 8001f50:	f7ff fe6c 	bl	8001c2c <BME280_Read8>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461a      	mov	r2, r3
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <BME280_Init+0x2a4>)
 8001f5a:	701a      	strb	r2, [r3, #0]
		h4 = ((BME280_Read8(BME280_DIG_H4) << 4 ) | (BME280_Read8(BME280_DIG_H4+1) & 0xF));
 8001f5c:	20e4      	movs	r0, #228	; 0xe4
 8001f5e:	f7ff fe65 	bl	8001c2c <BME280_Read8>
 8001f62:	4603      	mov	r3, r0
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	b21c      	sxth	r4, r3
 8001f68:	20e5      	movs	r0, #229	; 0xe5
 8001f6a:	f7ff fe5f 	bl	8001c2c <BME280_Read8>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	b21b      	sxth	r3, r3
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	4323      	orrs	r3, r4
 8001f7a:	b21a      	sxth	r2, r3
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <BME280_Init+0x2a8>)
 8001f7e:	801a      	strh	r2, [r3, #0]
		h5 = ((BME280_Read8(BME280_DIG_H5+1) << 4) | (BME280_Read8(BME280_DIG_H5) >> 4));
 8001f80:	20e6      	movs	r0, #230	; 0xe6
 8001f82:	f7ff fe53 	bl	8001c2c <BME280_Read8>
 8001f86:	4603      	mov	r3, r0
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	b21c      	sxth	r4, r3
 8001f8c:	20e5      	movs	r0, #229	; 0xe5
 8001f8e:	f7ff fe4d 	bl	8001c2c <BME280_Read8>
 8001f92:	4603      	mov	r3, r0
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	b21b      	sxth	r3, r3
 8001f9a:	4323      	orrs	r3, r4
 8001f9c:	b21a      	sxth	r2, r3
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <BME280_Init+0x2ac>)
 8001fa0:	801a      	strh	r2, [r3, #0]
		h6 = (int8_t)BME280_Read8(BME280_DIG_H6);
 8001fa2:	20e7      	movs	r0, #231	; 0xe7
 8001fa4:	f7ff fe42 	bl	8001c2c <BME280_Read8>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b25a      	sxtb	r2, r3
 8001fac:	4b31      	ldr	r3, [pc, #196]	; (8002074 <BME280_Init+0x2b0>)
 8001fae:	701a      	strb	r2, [r3, #0]

		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001fb0:	20f2      	movs	r0, #242	; 0xf2
 8001fb2:	f7ff fe3b 	bl	8001c2c <BME280_Read8>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	73bb      	strb	r3, [r7, #14]
		HumReg &= 0xF8;
 8001fba:	7bbb      	ldrb	r3, [r7, #14]
 8001fbc:	f023 0307 	bic.w	r3, r3, #7
 8001fc0:	73bb      	strb	r3, [r7, #14]
		HumReg |= _huminidity_oversampling;
 8001fc2:	4b1a      	ldr	r3, [pc, #104]	; (800202c <BME280_Init+0x268>)
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_HUM_CONTROL, HumReg);
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	4619      	mov	r1, r3
 8001fd0:	20f2      	movs	r0, #242	; 0xf2
 8001fd2:	f7ff fe85 	bl	8001ce0 <BME280_Write8>
		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001fd6:	20f2      	movs	r0, #242	; 0xf2
 8001fd8:	f7ff fe28 	bl	8001c2c <BME280_Read8>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	015b      	lsls	r3, r3, #5
 8001fe4:	b25a      	sxtb	r2, r3
 8001fe6:	78bb      	ldrb	r3, [r7, #2]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	b25b      	sxtb	r3, r3
 8001fec:	4313      	orrs	r3, r2
 8001fee:	b25a      	sxtb	r2, r3
 8001ff0:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	20f4      	movs	r0, #244	; 0xf4
 8001ffe:	f7ff fe6f 	bl	8001ce0 <BME280_Write8>

		if(mode == BME280_NORMALMODE)
 8002002:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002006:	2b03      	cmp	r3, #3
 8002008:	d103      	bne.n	8002012 <BME280_Init+0x24e>
		{
			BME280_SetConfig(BME280_STANDBY_MS_0_5, BME280_FILTER_OFF);
 800200a:	2100      	movs	r1, #0
 800200c:	2000      	movs	r0, #0
 800200e:	f7ff feb9 	bl	8001d84 <BME280_SetConfig>
		}
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	bf00      	nop
 800201c:	20000624 	.word	0x20000624
 8002020:	2000062b 	.word	0x2000062b
 8002024:	20000628 	.word	0x20000628
 8002028:	20000629 	.word	0x20000629
 800202c:	2000062a 	.word	0x2000062a
 8002030:	2000064a 	.word	0x2000064a
 8002034:	20000630 	.word	0x20000630
 8002038:	20000632 	.word	0x20000632
 800203c:	2000064c 	.word	0x2000064c
 8002040:	20000634 	.word	0x20000634
 8002044:	20000636 	.word	0x20000636
 8002048:	20000638 	.word	0x20000638
 800204c:	2000063a 	.word	0x2000063a
 8002050:	2000063c 	.word	0x2000063c
 8002054:	2000063e 	.word	0x2000063e
 8002058:	20000640 	.word	0x20000640
 800205c:	20000642 	.word	0x20000642
 8002060:	2000062c 	.word	0x2000062c
 8002064:	20000644 	.word	0x20000644
 8002068:	2000062d 	.word	0x2000062d
 800206c:	20000646 	.word	0x20000646
 8002070:	20000648 	.word	0x20000648
 8002074:	2000062e 	.word	0x2000062e

08002078 <BME280_ReadTemperature>:

float BME280_ReadTemperature(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BME280_FORCEDMODE)
 800207e:	4b3f      	ldr	r3, [pc, #252]	; (800217c <BME280_ReadTemperature+0x104>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d12b      	bne.n	80020de <BME280_ReadTemperature+0x66>
  {
	  uint8_t mode;
	  uint8_t ctrl = BME280_Read8(BME280_CONTROL);
 8002086:	20f4      	movs	r0, #244	; 0xf4
 8002088:	f7ff fdd0 	bl	8001c2c <BME280_Read8>
 800208c:	4603      	mov	r3, r0
 800208e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	f023 0303 	bic.w	r3, r3, #3
 8002096:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BME280_FORCEDMODE;
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	f043 0301 	orr.w	r3, r3, #1
 800209e:	75fb      	strb	r3, [r7, #23]
	  BME280_Write8(BME280_CONTROL, ctrl);
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	4619      	mov	r1, r3
 80020a4:	20f4      	movs	r0, #244	; 0xf4
 80020a6:	f7ff fe1b 	bl	8001ce0 <BME280_Write8>

	  mode = BME280_Read8(BME280_CONTROL); 	// Read written mode
 80020aa:	20f4      	movs	r0, #244	; 0xf4
 80020ac:	f7ff fdbe 	bl	8001c2c <BME280_Read8>
 80020b0:	4603      	mov	r3, r0
 80020b2:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80020b4:	7dbb      	ldrb	r3, [r7, #22]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	75bb      	strb	r3, [r7, #22]

	  if(mode == BME280_FORCEDMODE)
 80020bc:	7dbb      	ldrb	r3, [r7, #22]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d10d      	bne.n	80020de <BME280_ReadTemperature+0x66>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BME280_Read8(BME280_CONTROL);
 80020c2:	20f4      	movs	r0, #244	; 0xf4
 80020c4:	f7ff fdb2 	bl	8001c2c <BME280_Read8>
 80020c8:	4603      	mov	r3, r0
 80020ca:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80020cc:	7dbb      	ldrb	r3, [r7, #22]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	75bb      	strb	r3, [r7, #22]
			  if(mode == BME280_SLEEPMODE)
 80020d4:	7dbb      	ldrb	r3, [r7, #22]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d000      	beq.n	80020dc <BME280_ReadTemperature+0x64>
			  mode = BME280_Read8(BME280_CONTROL);
 80020da:	e7f2      	b.n	80020c2 <BME280_ReadTemperature+0x4a>
				  break;
 80020dc:	bf00      	nop
		  }
	  }
  }

  int32_t adc_T = BME280_Read24(BME280_TEMPDATA);
 80020de:	20fa      	movs	r0, #250	; 0xfa
 80020e0:	f7ff fe1a 	bl	8001d18 <BME280_Read24>
 80020e4:	4603      	mov	r3, r0
 80020e6:	613b      	str	r3, [r7, #16]
  if (adc_T == 0x800000)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020ee:	d102      	bne.n	80020f6 <BME280_ReadTemperature+0x7e>
	  return -99;
 80020f0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002180 <BME280_ReadTemperature+0x108>
 80020f4:	e03b      	b.n	800216e <BME280_ReadTemperature+0xf6>

  adc_T >>= 4;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	111b      	asrs	r3, r3, #4
 80020fa:	613b      	str	r3, [r7, #16]

  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	10da      	asrs	r2, r3, #3
 8002100:	4b20      	ldr	r3, [pc, #128]	; (8002184 <BME280_ReadTemperature+0x10c>)
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	1ad3      	subs	r3, r2, r3
		  ((int32_t)t2)) >> 11;
 8002108:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <BME280_ReadTemperature+0x110>)
 800210a:	f9b2 2000 	ldrsh.w	r2, [r2]
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	12db      	asrs	r3, r3, #11
 8002114:	60fb      	str	r3, [r7, #12]

  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	111b      	asrs	r3, r3, #4
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <BME280_ReadTemperature+0x10c>)
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	1a9b      	subs	r3, r3, r2
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8002120:	693a      	ldr	r2, [r7, #16]
 8002122:	1112      	asrs	r2, r2, #4
 8002124:	4917      	ldr	r1, [pc, #92]	; (8002184 <BME280_ReadTemperature+0x10c>)
 8002126:	8809      	ldrh	r1, [r1, #0]
 8002128:	1a52      	subs	r2, r2, r1
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800212a:	fb02 f303 	mul.w	r3, r2, r3
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800212e:	131b      	asrs	r3, r3, #12
		  ((int32_t)t3)) >> 14;
 8002130:	4a16      	ldr	r2, [pc, #88]	; (800218c <BME280_ReadTemperature+0x114>)
 8002132:	f9b2 2000 	ldrsh.w	r2, [r2]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8002136:	fb02 f303 	mul.w	r3, r2, r3
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800213a:	139b      	asrs	r3, r3, #14
 800213c:	60bb      	str	r3, [r7, #8]

  t_fine = var1 + var2;
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4413      	add	r3, r2
 8002144:	4a12      	ldr	r2, [pc, #72]	; (8002190 <BME280_ReadTemperature+0x118>)
 8002146:	6013      	str	r3, [r2, #0]

  float T  = (t_fine * 5 + 128) >> 8;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <BME280_ReadTemperature+0x118>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	3380      	adds	r3, #128	; 0x80
 8002154:	121b      	asrs	r3, r3, #8
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215e:	edc7 7a01 	vstr	s15, [r7, #4]
  return T/100;
 8002162:	edd7 7a01 	vldr	s15, [r7, #4]
 8002166:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002194 <BME280_ReadTemperature+0x11c>
 800216a:	ee87 7aa6 	vdiv.f32	s14, s15, s13

  return -99;
}
 800216e:	eef0 7a47 	vmov.f32	s15, s14
 8002172:	eeb0 0a67 	vmov.f32	s0, s15
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	2000062b 	.word	0x2000062b
 8002180:	c2c60000 	.word	0xc2c60000
 8002184:	2000064a 	.word	0x2000064a
 8002188:	20000630 	.word	0x20000630
 800218c:	20000632 	.word	0x20000632
 8002190:	20000650 	.word	0x20000650
 8002194:	42c80000 	.word	0x42c80000

08002198 <BME280_ReadTemperatureAndPressureAndHuminidity>:
	  float h = (v_x1_u32r>>12);
	  return  h / 1024.0;
}

uint8_t BME280_ReadTemperatureAndPressureAndHuminidity(float *temperature, int32_t *pressure, float *huminidity)
{
 8002198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800219c:	b0d2      	sub	sp, #328	; 0x148
 800219e:	af00      	add	r7, sp, #0
 80021a0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 80021a4:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 80021a8:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	*temperature = BME280_ReadTemperature();
 80021ac:	f7ff ff64 	bl	8002078 <BME280_ReadTemperature>
 80021b0:	eef0 7a40 	vmov.f32	s15, s0
 80021b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021b8:	edc3 7a00 	vstr	s15, [r3]

	if(*temperature == -99)
 80021bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8002494 <BME280_ReadTemperatureAndPressureAndHuminidity+0x2fc>
 80021c8:	eef4 7a47 	vcmp.f32	s15, s14
 80021cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d0:	d101      	bne.n	80021d6 <BME280_ReadTemperatureAndPressureAndHuminidity+0x3e>
	  return -1;
 80021d2:	23ff      	movs	r3, #255	; 0xff
 80021d4:	e33f      	b.n	8002856 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 80021d6:	20f7      	movs	r0, #247	; 0xf7
 80021d8:	f7ff fd9e 	bl	8001d18 <BME280_Read24>
 80021dc:	4603      	mov	r3, r0
 80021de:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	adc_P >>= 4;
 80021e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80021e6:	111b      	asrs	r3, r3, #4
 80021e8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	var1 = ((int64_t)t_fine) - 128000;
 80021ec:	4baa      	ldr	r3, [pc, #680]	; (8002498 <BME280_ReadTemperatureAndPressureAndHuminidity+0x300>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	17da      	asrs	r2, r3, #31
 80021f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021f6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80021fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80021fe:	460b      	mov	r3, r1
 8002200:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8002204:	64bb      	str	r3, [r7, #72]	; 0x48
 8002206:	4613      	mov	r3, r2
 8002208:	f143 33ff 	adc.w	r3, r3, #4294967295
 800220c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800220e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002212:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = var1 * var1 * (int64_t)p6;
 8002216:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800221a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800221e:	fb03 f102 	mul.w	r1, r3, r2
 8002222:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002226:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	18ca      	adds	r2, r1, r3
 8002230:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002234:	fba3 4503 	umull	r4, r5, r3, r3
 8002238:	1953      	adds	r3, r2, r5
 800223a:	461d      	mov	r5, r3
 800223c:	4b97      	ldr	r3, [pc, #604]	; (800249c <BME280_ReadTemperatureAndPressureAndHuminidity+0x304>)
 800223e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002242:	b21b      	sxth	r3, r3
 8002244:	17da      	asrs	r2, r3, #31
 8002246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800224a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800224e:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8002252:	4603      	mov	r3, r0
 8002254:	fb03 f205 	mul.w	r2, r3, r5
 8002258:	460b      	mov	r3, r1
 800225a:	fb04 f303 	mul.w	r3, r4, r3
 800225e:	4413      	add	r3, r2
 8002260:	4602      	mov	r2, r0
 8002262:	fba4 8902 	umull	r8, r9, r4, r2
 8002266:	444b      	add	r3, r9
 8002268:	4699      	mov	r9, r3
 800226a:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800226e:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8002272:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x308>)
 8002274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002278:	b21b      	sxth	r3, r3
 800227a:	17da      	asrs	r2, r3, #31
 800227c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002280:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002284:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002288:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800228c:	462a      	mov	r2, r5
 800228e:	fb02 f203 	mul.w	r2, r2, r3
 8002292:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002296:	4621      	mov	r1, r4
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	441a      	add	r2, r3
 800229e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80022a2:	4621      	mov	r1, r4
 80022a4:	fba3 ab01 	umull	sl, fp, r3, r1
 80022a8:	eb02 030b 	add.w	r3, r2, fp
 80022ac:	469b      	mov	fp, r3
 80022ae:	f04f 0000 	mov.w	r0, #0
 80022b2:	f04f 0100 	mov.w	r1, #0
 80022b6:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80022ba:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80022be:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80022c2:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80022c6:	1814      	adds	r4, r2, r0
 80022c8:	643c      	str	r4, [r7, #64]	; 0x40
 80022ca:	414b      	adcs	r3, r1
 80022cc:	647b      	str	r3, [r7, #68]	; 0x44
 80022ce:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80022d2:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var2 = var2 + (((int64_t)p4)<<35);
 80022d6:	4b73      	ldr	r3, [pc, #460]	; (80024a4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x30c>)
 80022d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022dc:	b21b      	sxth	r3, r3
 80022de:	17da      	asrs	r2, r3, #31
 80022e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022e4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80022e8:	f04f 0000 	mov.w	r0, #0
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80022f4:	00d9      	lsls	r1, r3, #3
 80022f6:	2000      	movs	r0, #0
 80022f8:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80022fc:	1814      	adds	r4, r2, r0
 80022fe:	63bc      	str	r4, [r7, #56]	; 0x38
 8002300:	414b      	adcs	r3, r1
 8002302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002304:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002308:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800230c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8002310:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002314:	fb03 f102 	mul.w	r1, r3, r2
 8002318:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800231c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	18ca      	adds	r2, r1, r3
 8002326:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800232a:	fba3 1303 	umull	r1, r3, r3, r3
 800232e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002332:	460b      	mov	r3, r1
 8002334:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800233c:	18d3      	adds	r3, r2, r3
 800233e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002342:	4b59      	ldr	r3, [pc, #356]	; (80024a8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x310>)
 8002344:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002348:	b21b      	sxth	r3, r3
 800234a:	17da      	asrs	r2, r3, #31
 800234c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002350:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002354:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8002358:	462b      	mov	r3, r5
 800235a:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 800235e:	4642      	mov	r2, r8
 8002360:	fb02 f203 	mul.w	r2, r2, r3
 8002364:	464b      	mov	r3, r9
 8002366:	4621      	mov	r1, r4
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	4622      	mov	r2, r4
 8002370:	4641      	mov	r1, r8
 8002372:	fba2 1201 	umull	r1, r2, r2, r1
 8002376:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800237a:	460a      	mov	r2, r1
 800237c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8002380:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8002384:	4413      	add	r3, r2
 8002386:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800238a:	f04f 0000 	mov.w	r0, #0
 800238e:	f04f 0100 	mov.w	r1, #0
 8002392:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8002396:	4623      	mov	r3, r4
 8002398:	0a18      	lsrs	r0, r3, #8
 800239a:	462b      	mov	r3, r5
 800239c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80023a0:	462b      	mov	r3, r5
 80023a2:	1219      	asrs	r1, r3, #8
			((var1 * (int64_t)p2)<<12);
 80023a4:	4b41      	ldr	r3, [pc, #260]	; (80024ac <BME280_ReadTemperatureAndPressureAndHuminidity+0x314>)
 80023a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	17da      	asrs	r2, r3, #31
 80023ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80023b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80023b6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80023be:	464a      	mov	r2, r9
 80023c0:	fb02 f203 	mul.w	r2, r2, r3
 80023c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80023c8:	4644      	mov	r4, r8
 80023ca:	fb04 f303 	mul.w	r3, r4, r3
 80023ce:	441a      	add	r2, r3
 80023d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80023d4:	4644      	mov	r4, r8
 80023d6:	fba3 4304 	umull	r4, r3, r3, r4
 80023da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80023de:	4623      	mov	r3, r4
 80023e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80023e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023e8:	18d3      	adds	r3, r2, r3
 80023ea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80023fa:	464c      	mov	r4, r9
 80023fc:	0323      	lsls	r3, r4, #12
 80023fe:	4644      	mov	r4, r8
 8002400:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002404:	4644      	mov	r4, r8
 8002406:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8002408:	1884      	adds	r4, r0, r2
 800240a:	633c      	str	r4, [r7, #48]	; 0x30
 800240c:	eb41 0303 	adc.w	r3, r1, r3
 8002410:	637b      	str	r3, [r7, #52]	; 0x34
 8002412:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002416:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800241a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800241e:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8002422:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8002426:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x318>)
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	b29b      	uxth	r3, r3
 8002430:	2200      	movs	r2, #0
 8002432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800243a:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800243e:	462b      	mov	r3, r5
 8002440:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002444:	4642      	mov	r2, r8
 8002446:	fb02 f203 	mul.w	r2, r2, r3
 800244a:	464b      	mov	r3, r9
 800244c:	4621      	mov	r1, r4
 800244e:	fb01 f303 	mul.w	r3, r1, r3
 8002452:	4413      	add	r3, r2
 8002454:	4622      	mov	r2, r4
 8002456:	4641      	mov	r1, r8
 8002458:	fba2 1201 	umull	r1, r2, r2, r1
 800245c:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002460:	460a      	mov	r2, r1
 8002462:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8002466:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800246a:	4413      	add	r3, r2
 800246c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800247c:	4629      	mov	r1, r5
 800247e:	104a      	asrs	r2, r1, #1
 8002480:	4629      	mov	r1, r5
 8002482:	17cb      	asrs	r3, r1, #31
 8002484:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

	if (var1 == 0) {
 8002488:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800248c:	4313      	orrs	r3, r2
 800248e:	d111      	bne.n	80024b4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x31c>
		return 0;  // avoid exception caused by division by zero
 8002490:	2300      	movs	r3, #0
 8002492:	e1e0      	b.n	8002856 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>
 8002494:	c2c60000 	.word	0xc2c60000
 8002498:	20000650 	.word	0x20000650
 800249c:	2000063c 	.word	0x2000063c
 80024a0:	2000063a 	.word	0x2000063a
 80024a4:	20000638 	.word	0x20000638
 80024a8:	20000636 	.word	0x20000636
 80024ac:	20000634 	.word	0x20000634
 80024b0:	2000064c 	.word	0x2000064c
	}
	p = 1048576 - adc_P;
 80024b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80024b8:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80024bc:	17da      	asrs	r2, r3, #31
 80024be:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80024c6:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	p = (((p<<31) - var2)*3125) / var1;
 80024ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024ce:	105b      	asrs	r3, r3, #1
 80024d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80024d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80024d8:	07db      	lsls	r3, r3, #31
 80024da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024de:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80024e2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80024e6:	4621      	mov	r1, r4
 80024e8:	1a89      	subs	r1, r1, r2
 80024ea:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80024ee:	4629      	mov	r1, r5
 80024f0:	eb61 0303 	sbc.w	r3, r1, r3
 80024f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80024f8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80024fc:	4622      	mov	r2, r4
 80024fe:	462b      	mov	r3, r5
 8002500:	1891      	adds	r1, r2, r2
 8002502:	6239      	str	r1, [r7, #32]
 8002504:	415b      	adcs	r3, r3
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
 8002508:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800250c:	4621      	mov	r1, r4
 800250e:	1851      	adds	r1, r2, r1
 8002510:	61b9      	str	r1, [r7, #24]
 8002512:	4629      	mov	r1, r5
 8002514:	414b      	adcs	r3, r1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002524:	4649      	mov	r1, r9
 8002526:	018b      	lsls	r3, r1, #6
 8002528:	4641      	mov	r1, r8
 800252a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800252e:	4641      	mov	r1, r8
 8002530:	018a      	lsls	r2, r1, #6
 8002532:	4641      	mov	r1, r8
 8002534:	1889      	adds	r1, r1, r2
 8002536:	6139      	str	r1, [r7, #16]
 8002538:	4649      	mov	r1, r9
 800253a:	eb43 0101 	adc.w	r1, r3, r1
 800253e:	6179      	str	r1, [r7, #20]
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800254c:	4649      	mov	r1, r9
 800254e:	008b      	lsls	r3, r1, #2
 8002550:	4641      	mov	r1, r8
 8002552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002556:	4641      	mov	r1, r8
 8002558:	008a      	lsls	r2, r1, #2
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	4603      	mov	r3, r0
 8002560:	4622      	mov	r2, r4
 8002562:	189b      	adds	r3, r3, r2
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	460b      	mov	r3, r1
 8002568:	462a      	mov	r2, r5
 800256a:	eb42 0303 	adc.w	r3, r2, r3
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800257c:	4649      	mov	r1, r9
 800257e:	008b      	lsls	r3, r1, #2
 8002580:	4641      	mov	r1, r8
 8002582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002586:	4641      	mov	r1, r8
 8002588:	008a      	lsls	r2, r1, #2
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	4603      	mov	r3, r0
 8002590:	4622      	mov	r2, r4
 8002592:	189b      	adds	r3, r3, r2
 8002594:	67bb      	str	r3, [r7, #120]	; 0x78
 8002596:	462b      	mov	r3, r5
 8002598:	460a      	mov	r2, r1
 800259a:	eb42 0303 	adc.w	r3, r2, r3
 800259e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025a0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80025a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80025a8:	f7fe fb76 	bl	8000c98 <__aeabi_ldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80025b4:	4bab      	ldr	r3, [pc, #684]	; (8002864 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6cc>)
 80025b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ba:	b21b      	sxth	r3, r3
 80025bc:	17da      	asrs	r2, r3, #31
 80025be:	673b      	str	r3, [r7, #112]	; 0x70
 80025c0:	677a      	str	r2, [r7, #116]	; 0x74
 80025c2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80025c6:	f04f 0000 	mov.w	r0, #0
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	0b50      	lsrs	r0, r2, #13
 80025d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80025d4:	1359      	asrs	r1, r3, #13
 80025d6:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80025da:	462b      	mov	r3, r5
 80025dc:	fb00 f203 	mul.w	r2, r0, r3
 80025e0:	4623      	mov	r3, r4
 80025e2:	fb03 f301 	mul.w	r3, r3, r1
 80025e6:	4413      	add	r3, r2
 80025e8:	4622      	mov	r2, r4
 80025ea:	fba2 1200 	umull	r1, r2, r2, r0
 80025ee:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80025f2:	460a      	mov	r2, r1
 80025f4:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80025f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80025fc:	4413      	add	r3, r2
 80025fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002602:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002606:	f04f 0000 	mov.w	r0, #0
 800260a:	f04f 0100 	mov.w	r1, #0
 800260e:	0b50      	lsrs	r0, r2, #13
 8002610:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002614:	1359      	asrs	r1, r3, #13
 8002616:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800261a:	462b      	mov	r3, r5
 800261c:	fb00 f203 	mul.w	r2, r0, r3
 8002620:	4623      	mov	r3, r4
 8002622:	fb03 f301 	mul.w	r3, r3, r1
 8002626:	4413      	add	r3, r2
 8002628:	4622      	mov	r2, r4
 800262a:	fba2 1200 	umull	r1, r2, r2, r0
 800262e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002632:	460a      	mov	r2, r1
 8002634:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002638:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800263c:	4413      	add	r3, r2
 800263e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800264e:	4621      	mov	r1, r4
 8002650:	0e4a      	lsrs	r2, r1, #25
 8002652:	4629      	mov	r1, r5
 8002654:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002658:	4629      	mov	r1, r5
 800265a:	164b      	asrs	r3, r1, #25
 800265c:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = (((int64_t)p8) * p) >> 19;
 8002660:	4b81      	ldr	r3, [pc, #516]	; (8002868 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d0>)
 8002662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002666:	b21b      	sxth	r3, r3
 8002668:	17da      	asrs	r2, r3, #31
 800266a:	66bb      	str	r3, [r7, #104]	; 0x68
 800266c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800266e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002672:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002676:	462a      	mov	r2, r5
 8002678:	fb02 f203 	mul.w	r2, r2, r3
 800267c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002680:	4621      	mov	r1, r4
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800268c:	4621      	mov	r1, r4
 800268e:	fba2 1201 	umull	r1, r2, r2, r1
 8002692:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002696:	460a      	mov	r2, r1
 8002698:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800269c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80026a0:	4413      	add	r3, r2
 80026a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80026b2:	4621      	mov	r1, r4
 80026b4:	0cca      	lsrs	r2, r1, #19
 80026b6:	4629      	mov	r1, r5
 80026b8:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80026bc:	4629      	mov	r1, r5
 80026be:	14cb      	asrs	r3, r1, #19
 80026c0:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80026c4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80026c8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80026cc:	1884      	adds	r4, r0, r2
 80026ce:	663c      	str	r4, [r7, #96]	; 0x60
 80026d0:	eb41 0303 	adc.w	r3, r1, r3
 80026d4:	667b      	str	r3, [r7, #100]	; 0x64
 80026d6:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 80026da:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80026de:	4621      	mov	r1, r4
 80026e0:	1889      	adds	r1, r1, r2
 80026e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80026e4:	4629      	mov	r1, r5
 80026e6:	eb43 0101 	adc.w	r1, r3, r1
 80026ea:	65f9      	str	r1, [r7, #92]	; 0x5c
 80026ec:	f04f 0000 	mov.w	r0, #0
 80026f0:	f04f 0100 	mov.w	r1, #0
 80026f4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80026f8:	4623      	mov	r3, r4
 80026fa:	0a18      	lsrs	r0, r3, #8
 80026fc:	462b      	mov	r3, r5
 80026fe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002702:	462b      	mov	r3, r5
 8002704:	1219      	asrs	r1, r3, #8
 8002706:	4b59      	ldr	r3, [pc, #356]	; (800286c <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d4>)
 8002708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270c:	b21b      	sxth	r3, r3
 800270e:	17da      	asrs	r2, r3, #31
 8002710:	653b      	str	r3, [r7, #80]	; 0x50
 8002712:	657a      	str	r2, [r7, #84]	; 0x54
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002720:	464c      	mov	r4, r9
 8002722:	0123      	lsls	r3, r4, #4
 8002724:	4644      	mov	r4, r8
 8002726:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800272a:	4644      	mov	r4, r8
 800272c:	0122      	lsls	r2, r4, #4
 800272e:	1884      	adds	r4, r0, r2
 8002730:	603c      	str	r4, [r7, #0]
 8002732:	eb41 0303 	adc.w	r3, r1, r3
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	e9d7 3400 	ldrd	r3, r4, [r7]
 800273c:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	*pressure = (int32_t)p/256;
 8002740:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002744:	2b00      	cmp	r3, #0
 8002746:	da00      	bge.n	800274a <BME280_ReadTemperatureAndPressureAndHuminidity+0x5b2>
 8002748:	33ff      	adds	r3, #255	; 0xff
 800274a:	121b      	asrs	r3, r3, #8
 800274c:	461a      	mov	r2, r3
 800274e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002752:	601a      	str	r2, [r3, #0]

	// Pressure section
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 8002754:	20fd      	movs	r0, #253	; 0xfd
 8002756:	f7ff fa87 	bl	8001c68 <BME280_Read16>
 800275a:	4603      	mov	r3, r0
 800275c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (adc_H == 0x8000) // value in case humidity measurement was disabled
 8002760:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002768:	d101      	bne.n	800276e <BME280_ReadTemperatureAndPressureAndHuminidity+0x5d6>
		return -1; //error
 800276a:	23ff      	movs	r3, #255	; 0xff
 800276c:	e073      	b.n	8002856 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t v_x1_u32r;

	v_x1_u32r = (t_fine - ((int32_t)76800));
 800276e:	4b40      	ldr	r3, [pc, #256]	; (8002870 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002776:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 800277a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800277e:	039a      	lsls	r2, r3, #14
 8002780:	4b3c      	ldr	r3, [pc, #240]	; (8002874 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6dc>)
 8002782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002786:	051b      	lsls	r3, r3, #20
 8002788:	1ad2      	subs	r2, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 800278a:	4b3b      	ldr	r3, [pc, #236]	; (8002878 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e0>)
 800278c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002790:	4619      	mov	r1, r3
 8002792:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002796:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 800279a:	1ad3      	subs	r3, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 800279c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80027a0:	13db      	asrs	r3, r3, #15
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 80027a2:	4a36      	ldr	r2, [pc, #216]	; (800287c <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e4>)
 80027a4:	f992 2000 	ldrsb.w	r2, [r2]
 80027a8:	4611      	mov	r1, r2
 80027aa:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80027ae:	fb01 f202 	mul.w	r2, r1, r2
 80027b2:	1292      	asrs	r2, r2, #10
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 80027b4:	4932      	ldr	r1, [pc, #200]	; (8002880 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e8>)
 80027b6:	7809      	ldrb	r1, [r1, #0]
 80027b8:	4608      	mov	r0, r1
 80027ba:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80027be:	fb00 f101 	mul.w	r1, r0, r1
 80027c2:	12c9      	asrs	r1, r1, #11
 80027c4:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 80027c8:	fb01 f202 	mul.w	r2, r1, r2
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 80027cc:	1292      	asrs	r2, r2, #10
 80027ce:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 80027d2:	492c      	ldr	r1, [pc, #176]	; (8002884 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6ec>)
 80027d4:	f9b1 1000 	ldrsh.w	r1, [r1]
 80027d8:	fb01 f202 	mul.w	r2, r1, r2
 80027dc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80027e0:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80027ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027ee:	13db      	asrs	r3, r3, #15
 80027f0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80027f4:	13d2      	asrs	r2, r2, #15
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	11db      	asrs	r3, r3, #7
							 ((int32_t)h1)) >> 4));
 80027fc:	4a22      	ldr	r2, [pc, #136]	; (8002888 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f0>)
 80027fe:	7812      	ldrb	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8002800:	fb02 f303 	mul.w	r3, r2, r3
							 ((int32_t)h1)) >> 4));
 8002804:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8002806:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8002810:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002814:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002818:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 800281c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002820:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002824:	bfa8      	it	ge
 8002826:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800282a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	float h = (v_x1_u32r>>12);
 800282e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002832:	131b      	asrs	r3, r3, #12
 8002834:	ee07 3a90 	vmov	s15, r3
 8002838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800283c:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
	*huminidity = h / 1024.0;
 8002840:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 8002844:	eddf 6a11 	vldr	s13, [pc, #68]	; 800288c <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f4>
 8002848:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800284c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002850:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800285c:	46bd      	mov	sp, r7
 800285e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002862:	bf00      	nop
 8002864:	20000642 	.word	0x20000642
 8002868:	20000640 	.word	0x20000640
 800286c:	2000063e 	.word	0x2000063e
 8002870:	20000650 	.word	0x20000650
 8002874:	20000646 	.word	0x20000646
 8002878:	20000648 	.word	0x20000648
 800287c:	2000062e 	.word	0x2000062e
 8002880:	2000062d 	.word	0x2000062d
 8002884:	20000644 	.word	0x20000644
 8002888:	2000062c 	.word	0x2000062c
 800288c:	44800000 	.word	0x44800000

08002890 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	4b20      	ldr	r3, [pc, #128]	; (800291c <MX_DMA_Init+0x8c>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	4a1f      	ldr	r2, [pc, #124]	; (800291c <MX_DMA_Init+0x8c>)
 80028a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80028a4:	6313      	str	r3, [r2, #48]	; 0x30
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <MX_DMA_Init+0x8c>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <MX_DMA_Init+0x90>)
 80028b4:	4a1b      	ldr	r2, [pc, #108]	; (8002924 <MX_DMA_Init+0x94>)
 80028b6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80028b8:	4b19      	ldr	r3, [pc, #100]	; (8002920 <MX_DMA_Init+0x90>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80028be:	4b18      	ldr	r3, [pc, #96]	; (8002920 <MX_DMA_Init+0x90>)
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80028c4:	4b16      	ldr	r3, [pc, #88]	; (8002920 <MX_DMA_Init+0x90>)
 80028c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ca:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80028cc:	4b14      	ldr	r3, [pc, #80]	; (8002920 <MX_DMA_Init+0x90>)
 80028ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d2:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <MX_DMA_Init+0x90>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_DMA_Init+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <MX_DMA_Init+0x90>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_DMA_Init+0x90>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_DMA_Init+0x90>)
 80028ee:	2204      	movs	r2, #4
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <MX_DMA_Init+0x90>)
 80028f4:	2203      	movs	r2, #3
 80028f6:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_DMA_Init+0x90>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <MX_DMA_Init+0x90>)
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002904:	4806      	ldr	r0, [pc, #24]	; (8002920 <MX_DMA_Init+0x90>)
 8002906:	f004 f905 	bl	8006b14 <HAL_DMA_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_DMA_Init+0x84>
  {
    Error_Handler();
 8002910:	f001 ff08 	bl	8004724 <Error_Handler>
  }

}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40023800 	.word	0x40023800
 8002920:	20000654 	.word	0x20000654
 8002924:	40026410 	.word	0x40026410

08002928 <drv8835_mode_control>:
#include "stm32f4xx_hal_tim.h"



void drv8835_mode_control(DRV8835_Mode mode)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	71fb      	strb	r3, [r7, #7]
	if(mode == Phase_Enable_Mode)
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <drv8835_mode_control+0x1c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, SET);
 8002938:	2201      	movs	r2, #1
 800293a:	2180      	movs	r1, #128	; 0x80
 800293c:	4807      	ldr	r0, [pc, #28]	; (800295c <drv8835_mode_control+0x34>)
 800293e:	f004 fbe5 	bl	800710c <HAL_GPIO_WritePin>
	else if(mode == In_In_Mode)
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
}
 8002942:	e007      	b.n	8002954 <drv8835_mode_control+0x2c>
	else if(mode == In_In_Mode)
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d104      	bne.n	8002954 <drv8835_mode_control+0x2c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 800294a:	2200      	movs	r2, #0
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	4803      	ldr	r0, [pc, #12]	; (800295c <drv8835_mode_control+0x34>)
 8002950:	f004 fbdc 	bl	800710c <HAL_GPIO_WritePin>
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	40020000 	.word	0x40020000

08002960 <drv8835_set_motorA_direction>:

void drv8835_set_motorA_direction(DRV8835_Direction dir)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	if(dir == CW)
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <drv8835_set_motorA_direction+0x1c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, SET);
 8002970:	2201      	movs	r2, #1
 8002972:	2140      	movs	r1, #64	; 0x40
 8002974:	4807      	ldr	r0, [pc, #28]	; (8002994 <drv8835_set_motorA_direction+0x34>)
 8002976:	f004 fbc9 	bl	800710c <HAL_GPIO_WritePin>
	else if(dir == CCW)
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
}
 800297a:	e007      	b.n	800298c <drv8835_set_motorA_direction+0x2c>
	else if(dir == CCW)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d104      	bne.n	800298c <drv8835_set_motorA_direction+0x2c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	2140      	movs	r1, #64	; 0x40
 8002986:	4803      	ldr	r0, [pc, #12]	; (8002994 <drv8835_set_motorA_direction+0x34>)
 8002988:	f004 fbc0 	bl	800710c <HAL_GPIO_WritePin>
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40020400 	.word	0x40020400

08002998 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint8_t speed)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	71fb      	strb	r3, [r7, #7]
	if(speed >= htim3.Instance->ARR)
 80029a2:	79fa      	ldrb	r2, [r7, #7]
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <drv8835_set_motorA_speed+0x34>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d303      	bcc.n	80029b6 <drv8835_set_motorA_speed+0x1e>
		speed = htim3.Instance->ARR;
 80029ae:	4b07      	ldr	r3, [pc, #28]	; (80029cc <drv8835_set_motorA_speed+0x34>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	71fb      	strb	r3, [r7, #7]

	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, speed);
 80029b6:	4b05      	ldr	r3, [pc, #20]	; (80029cc <drv8835_set_motorA_speed+0x34>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	79fa      	ldrb	r2, [r7, #7]
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000880 	.word	0x20000880

080029d0 <drv8835_init>:

void drv8835_init()
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	drv8835_mode_control(Phase_Enable_Mode);
 80029d4:	2001      	movs	r0, #1
 80029d6:	f7ff ffa7 	bl	8002928 <drv8835_mode_control>
	drv8835_set_motorA_direction(CCW);
 80029da:	2001      	movs	r0, #1
 80029dc:	f7ff ffc0 	bl	8002960 <drv8835_set_motorA_direction>
	drv8835_set_motorA_speed(0);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7ff ffd9 	bl	8002998 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80029e6:	2100      	movs	r1, #0
 80029e8:	4802      	ldr	r0, [pc, #8]	; (80029f4 <drv8835_init+0x24>)
 80029ea:	f007 feef 	bl	800a7cc <HAL_TIM_PWM_Start>
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000880 	.word	0x20000880

080029f8 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <DS3231_Init+0x1c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6013      	str	r3, [r2, #0]
//	DS3231_EnableAlarm1(DS3231_DISABLED);
//	DS3231_EnableAlarm2(DS3231_DISABLED);
//	DS3231_ClearAlarm1Flag();
//	DS3231_ClearAlarm2Flag();
//	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
}
 8002a06:	bf00      	nop
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	200006b4 	.word	0x200006b4

08002a18 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <DS3231_GetRegByte+0x40>)
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	1dfa      	adds	r2, r7, #7
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	21d0      	movs	r1, #208	; 0xd0
 8002a32:	f004 fcc9 	bl	80073c8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8002a36:	4b08      	ldr	r3, [pc, #32]	; (8002a58 <DS3231_GetRegByte+0x40>)
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	f107 020f 	add.w	r2, r7, #15
 8002a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a42:	9300      	str	r3, [sp, #0]
 8002a44:	2301      	movs	r3, #1
 8002a46:	21d0      	movs	r1, #208	; 0xd0
 8002a48:	f004 fdbc 	bl	80075c4 <HAL_I2C_Master_Receive>
	return val;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200006b4 	.word	0x200006b4

08002a5c <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 8002a60:	2004      	movs	r0, #4
 8002a62:	f7ff ffd9 	bl	8002a18 <DS3231_GetRegByte>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f85f 	bl	8002b2c <DS3231_DecodeBCD>
 8002a6e:	4603      	mov	r3, r0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8002a78:	2005      	movs	r0, #5
 8002a7a:	f7ff ffcd 	bl	8002a18 <DS3231_GetRegByte>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f850 	bl	8002b2c <DS3231_DecodeBCD>
 8002a8c:	4603      	mov	r3, r0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8002a98:	2006      	movs	r0, #6
 8002a9a:	f7ff ffbd 	bl	8002a18 <DS3231_GetRegByte>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f843 	bl	8002b2c <DS3231_DecodeBCD>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8002aaa:	2005      	movs	r0, #5
 8002aac:	f7ff ffb4 	bl	8002a18 <DS3231_GetRegByte>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	09db      	lsrs	r3, r3, #7
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	461a      	mov	r2, r3
 8002ac0:	0091      	lsls	r1, r2, #2
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002ad0:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	88bb      	ldrh	r3, [r7, #4]
 8002ad8:	4413      	add	r3, r2
 8002ada:	b29b      	uxth	r3, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8002ae8:	2002      	movs	r0, #2
 8002aea:	f7ff ff95 	bl	8002a18 <DS3231_GetRegByte>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f81b 	bl	8002b2c <DS3231_DecodeBCD>
 8002af6:	4603      	mov	r3, r0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	bd80      	pop	{r7, pc}

08002afc <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8002b00:	2001      	movs	r0, #1
 8002b02:	f7ff ff89 	bl	8002a18 <DS3231_GetRegByte>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 f80f 	bl	8002b2c <DS3231_DecodeBCD>
 8002b0e:	4603      	mov	r3, r0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7ff ff7d 	bl	8002a18 <DS3231_GetRegByte>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 f803 	bl	8002b2c <DS3231_DecodeBCD>
 8002b26:	4603      	mov	r3, r0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4413      	add	r3, r2
 8002b50:	b2db      	uxtb	r3, r3
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
	...

08002b60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8002b64:	48ae      	ldr	r0, [pc, #696]	; (8002e20 <MX_FREERTOS_Init+0x2c0>)
 8002b66:	f00c feb3 	bl	800f8d0 <osMutexNew>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4aad      	ldr	r2, [pc, #692]	; (8002e24 <MX_FREERTOS_Init+0x2c4>)
 8002b6e:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 8002b70:	48ad      	ldr	r0, [pc, #692]	; (8002e28 <MX_FREERTOS_Init+0x2c8>)
 8002b72:	f00c fead 	bl	800f8d0 <osMutexNew>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4aac      	ldr	r2, [pc, #688]	; (8002e2c <MX_FREERTOS_Init+0x2cc>)
 8002b7a:	6013      	str	r3, [r2, #0]

  /* creation of MutexRTC */
  MutexRTCHandle = osMutexNew(&MutexRTC_attributes);
 8002b7c:	48ac      	ldr	r0, [pc, #688]	; (8002e30 <MX_FREERTOS_Init+0x2d0>)
 8002b7e:	f00c fea7 	bl	800f8d0 <osMutexNew>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4aab      	ldr	r2, [pc, #684]	; (8002e34 <MX_FREERTOS_Init+0x2d4>)
 8002b86:	6013      	str	r3, [r2, #0]

  /* creation of MutexAlarm */
  MutexAlarmHandle = osMutexNew(&MutexAlarm_attributes);
 8002b88:	48ab      	ldr	r0, [pc, #684]	; (8002e38 <MX_FREERTOS_Init+0x2d8>)
 8002b8a:	f00c fea1 	bl	800f8d0 <osMutexNew>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4aaa      	ldr	r2, [pc, #680]	; (8002e3c <MX_FREERTOS_Init+0x2dc>)
 8002b92:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 8002b94:	48aa      	ldr	r0, [pc, #680]	; (8002e40 <MX_FREERTOS_Init+0x2e0>)
 8002b96:	f00c fe9b 	bl	800f8d0 <osMutexNew>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	4aa9      	ldr	r2, [pc, #676]	; (8002e44 <MX_FREERTOS_Init+0x2e4>)
 8002b9e:	6013      	str	r3, [r2, #0]

  /* creation of MutexSdCard */
  MutexSdCardHandle = osMutexNew(&MutexSdCard_attributes);
 8002ba0:	48a9      	ldr	r0, [pc, #676]	; (8002e48 <MX_FREERTOS_Init+0x2e8>)
 8002ba2:	f00c fe95 	bl	800f8d0 <osMutexNew>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	4aa8      	ldr	r2, [pc, #672]	; (8002e4c <MX_FREERTOS_Init+0x2ec>)
 8002baa:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemBme280 */
  BinarySemBme280Handle = osSemaphoreNew(1, 1, &BinarySemBme280_attributes);
 8002bac:	4aa8      	ldr	r2, [pc, #672]	; (8002e50 <MX_FREERTOS_Init+0x2f0>)
 8002bae:	2101      	movs	r1, #1
 8002bb0:	2001      	movs	r0, #1
 8002bb2:	f00c ffc1 	bl	800fb38 <osSemaphoreNew>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	4aa6      	ldr	r2, [pc, #664]	; (8002e54 <MX_FREERTOS_Init+0x2f4>)
 8002bba:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemBH1750 */
  BinarySemBH1750Handle = osSemaphoreNew(1, 1, &BinarySemBH1750_attributes);
 8002bbc:	4aa6      	ldr	r2, [pc, #664]	; (8002e58 <MX_FREERTOS_Init+0x2f8>)
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f00c ffb9 	bl	800fb38 <osSemaphoreNew>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	4aa4      	ldr	r2, [pc, #656]	; (8002e5c <MX_FREERTOS_Init+0x2fc>)
 8002bca:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemRTC */
  BinarySemRTCHandle = osSemaphoreNew(1, 1, &BinarySemRTC_attributes);
 8002bcc:	4aa4      	ldr	r2, [pc, #656]	; (8002e60 <MX_FREERTOS_Init+0x300>)
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f00c ffb1 	bl	800fb38 <osSemaphoreNew>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4aa2      	ldr	r2, [pc, #648]	; (8002e64 <MX_FREERTOS_Init+0x304>)
 8002bda:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemCounter */
  BinarySemCounterHandle = osSemaphoreNew(1, 1, &BinarySemCounter_attributes);
 8002bdc:	4aa2      	ldr	r2, [pc, #648]	; (8002e68 <MX_FREERTOS_Init+0x308>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	2001      	movs	r0, #1
 8002be2:	f00c ffa9 	bl	800fb38 <osSemaphoreNew>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4aa0      	ldr	r2, [pc, #640]	; (8002e6c <MX_FREERTOS_Init+0x30c>)
 8002bea:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemSetAlarm */
  BinarySemSetAlarmHandle = osSemaphoreNew(1, 1, &BinarySemSetAlarm_attributes);
 8002bec:	4aa0      	ldr	r2, [pc, #640]	; (8002e70 <MX_FREERTOS_Init+0x310>)
 8002bee:	2101      	movs	r1, #1
 8002bf0:	2001      	movs	r0, #1
 8002bf2:	f00c ffa1 	bl	800fb38 <osSemaphoreNew>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4a9e      	ldr	r2, [pc, #632]	; (8002e74 <MX_FREERTOS_Init+0x314>)
 8002bfa:	6013      	str	r3, [r2, #0]

  /* creation of BinarySdCard */
  BinarySdCardHandle = osSemaphoreNew(1, 1, &BinarySdCard_attributes);
 8002bfc:	4a9e      	ldr	r2, [pc, #632]	; (8002e78 <MX_FREERTOS_Init+0x318>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	2001      	movs	r0, #1
 8002c02:	f00c ff99 	bl	800fb38 <osSemaphoreNew>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4a9c      	ldr	r2, [pc, #624]	; (8002e7c <MX_FREERTOS_Init+0x31c>)
 8002c0a:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemINA219 */
  BinarySemINA219Handle = osSemaphoreNew(1, 1, &BinarySemINA219_attributes);
 8002c0c:	4a9c      	ldr	r2, [pc, #624]	; (8002e80 <MX_FREERTOS_Init+0x320>)
 8002c0e:	2101      	movs	r1, #1
 8002c10:	2001      	movs	r0, #1
 8002c12:	f00c ff91 	bl	800fb38 <osSemaphoreNew>
 8002c16:	4603      	mov	r3, r0
 8002c18:	4a9a      	ldr	r2, [pc, #616]	; (8002e84 <MX_FREERTOS_Init+0x324>)
 8002c1a:	6013      	str	r3, [r2, #0]

  /* creation of BinaryDs3231 */
  BinaryDs3231Handle = osSemaphoreNew(1, 1, &BinaryDs3231_attributes);
 8002c1c:	4a9a      	ldr	r2, [pc, #616]	; (8002e88 <MX_FREERTOS_Init+0x328>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	2001      	movs	r0, #1
 8002c22:	f00c ff89 	bl	800fb38 <osSemaphoreNew>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a98      	ldr	r2, [pc, #608]	; (8002e8c <MX_FREERTOS_Init+0x32c>)
 8002c2a:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemIna219Bat */
  BinarySemIna219BatHandle = osSemaphoreNew(1, 1, &BinarySemIna219Bat_attributes);
 8002c2c:	4a98      	ldr	r2, [pc, #608]	; (8002e90 <MX_FREERTOS_Init+0x330>)
 8002c2e:	2101      	movs	r1, #1
 8002c30:	2001      	movs	r0, #1
 8002c32:	f00c ff81 	bl	800fb38 <osSemaphoreNew>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4a96      	ldr	r2, [pc, #600]	; (8002e94 <MX_FREERTOS_Init+0x334>)
 8002c3a:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBmeData */
  TimerBmeDataHandle = osTimerNew(CallbackTimerBmeData, osTimerPeriodic, NULL, &TimerBmeData_attributes);
 8002c3c:	4b96      	ldr	r3, [pc, #600]	; (8002e98 <MX_FREERTOS_Init+0x338>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2101      	movs	r1, #1
 8002c42:	4896      	ldr	r0, [pc, #600]	; (8002e9c <MX_FREERTOS_Init+0x33c>)
 8002c44:	f00c fd9a 	bl	800f77c <osTimerNew>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4a95      	ldr	r2, [pc, #596]	; (8002ea0 <MX_FREERTOS_Init+0x340>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* creation of TimerBh1750Data */
  TimerBh1750DataHandle = osTimerNew(CallbackTimerBh1750Data, osTimerPeriodic, NULL, &TimerBh1750Data_attributes);
 8002c4e:	4b95      	ldr	r3, [pc, #596]	; (8002ea4 <MX_FREERTOS_Init+0x344>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	2101      	movs	r1, #1
 8002c54:	4894      	ldr	r0, [pc, #592]	; (8002ea8 <MX_FREERTOS_Init+0x348>)
 8002c56:	f00c fd91 	bl	800f77c <osTimerNew>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	4a93      	ldr	r2, [pc, #588]	; (8002eac <MX_FREERTOS_Init+0x34c>)
 8002c5e:	6013      	str	r3, [r2, #0]

  /* creation of TimerRTC */
  TimerRTCHandle = osTimerNew(CallbackTimerRTC, osTimerPeriodic, NULL, &TimerRTC_attributes);
 8002c60:	4b93      	ldr	r3, [pc, #588]	; (8002eb0 <MX_FREERTOS_Init+0x350>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	2101      	movs	r1, #1
 8002c66:	4893      	ldr	r0, [pc, #588]	; (8002eb4 <MX_FREERTOS_Init+0x354>)
 8002c68:	f00c fd88 	bl	800f77c <osTimerNew>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a92      	ldr	r2, [pc, #584]	; (8002eb8 <MX_FREERTOS_Init+0x358>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* creation of TimerSDCard */
  TimerSDCardHandle = osTimerNew(CallbackTimerSDCard, osTimerPeriodic, NULL, &TimerSDCard_attributes);
 8002c72:	4b92      	ldr	r3, [pc, #584]	; (8002ebc <MX_FREERTOS_Init+0x35c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	2101      	movs	r1, #1
 8002c78:	4891      	ldr	r0, [pc, #580]	; (8002ec0 <MX_FREERTOS_Init+0x360>)
 8002c7a:	f00c fd7f 	bl	800f77c <osTimerNew>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4a90      	ldr	r2, [pc, #576]	; (8002ec4 <MX_FREERTOS_Init+0x364>)
 8002c82:	6013      	str	r3, [r2, #0]

  /* creation of TimerINA219 */
  TimerINA219Handle = osTimerNew(CallbackTimerINA219, osTimerPeriodic, NULL, &TimerINA219_attributes);
 8002c84:	4b90      	ldr	r3, [pc, #576]	; (8002ec8 <MX_FREERTOS_Init+0x368>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	2101      	movs	r1, #1
 8002c8a:	4890      	ldr	r0, [pc, #576]	; (8002ecc <MX_FREERTOS_Init+0x36c>)
 8002c8c:	f00c fd76 	bl	800f77c <osTimerNew>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4a8f      	ldr	r2, [pc, #572]	; (8002ed0 <MX_FREERTOS_Init+0x370>)
 8002c94:	6013      	str	r3, [r2, #0]

  /* creation of TimerINA219Bat */
  TimerINA219BatHandle = osTimerNew(CallbackTimerINA219Bat, osTimerPeriodic, NULL, &TimerINA219Bat_attributes);
 8002c96:	4b8f      	ldr	r3, [pc, #572]	; (8002ed4 <MX_FREERTOS_Init+0x374>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	488e      	ldr	r0, [pc, #568]	; (8002ed8 <MX_FREERTOS_Init+0x378>)
 8002c9e:	f00c fd6d 	bl	800f77c <osTimerNew>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4a8d      	ldr	r2, [pc, #564]	; (8002edc <MX_FREERTOS_Init+0x37c>)
 8002ca6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueBme */
  QueueBmeHandle = osMessageQueueNew (5, sizeof(BmeData_t), &QueueBme_attributes);
 8002ca8:	4a8d      	ldr	r2, [pc, #564]	; (8002ee0 <MX_FREERTOS_Init+0x380>)
 8002caa:	210c      	movs	r1, #12
 8002cac:	2005      	movs	r0, #5
 8002cae:	f00d f863 	bl	800fd78 <osMessageQueueNew>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4a8b      	ldr	r2, [pc, #556]	; (8002ee4 <MX_FREERTOS_Init+0x384>)
 8002cb6:	6013      	str	r3, [r2, #0]

  /* creation of QueueBh1750 */
  QueueBh1750Handle = osMessageQueueNew (5, sizeof(BHData_t), &QueueBh1750_attributes);
 8002cb8:	4a8b      	ldr	r2, [pc, #556]	; (8002ee8 <MX_FREERTOS_Init+0x388>)
 8002cba:	2104      	movs	r1, #4
 8002cbc:	2005      	movs	r0, #5
 8002cbe:	f00d f85b 	bl	800fd78 <osMessageQueueNew>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	4a89      	ldr	r2, [pc, #548]	; (8002eec <MX_FREERTOS_Init+0x38c>)
 8002cc6:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCData */
  QueueRTCDataHandle = osMessageQueueNew (1, sizeof(RTC_DateTypeDef), &QueueRTCData_attributes);
 8002cc8:	4a89      	ldr	r2, [pc, #548]	; (8002ef0 <MX_FREERTOS_Init+0x390>)
 8002cca:	2104      	movs	r1, #4
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f00d f853 	bl	800fd78 <osMessageQueueNew>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	4a87      	ldr	r2, [pc, #540]	; (8002ef4 <MX_FREERTOS_Init+0x394>)
 8002cd6:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCTime */
  QueueRTCTimeHandle = osMessageQueueNew (1, sizeof(RTC_TimeTypeDef), &QueueRTCTime_attributes);
 8002cd8:	4a87      	ldr	r2, [pc, #540]	; (8002ef8 <MX_FREERTOS_Init+0x398>)
 8002cda:	2114      	movs	r1, #20
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f00d f84b 	bl	800fd78 <osMessageQueueNew>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4a85      	ldr	r2, [pc, #532]	; (8002efc <MX_FREERTOS_Init+0x39c>)
 8002ce6:	6013      	str	r3, [r2, #0]

  /* creation of QueueCounterPump */
  QueueCounterPumpHandle = osMessageQueueNew (1, sizeof(uint8_t), &QueueCounterPump_attributes);
 8002ce8:	4a85      	ldr	r2, [pc, #532]	; (8002f00 <MX_FREERTOS_Init+0x3a0>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	2001      	movs	r0, #1
 8002cee:	f00d f843 	bl	800fd78 <osMessageQueueNew>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4a83      	ldr	r2, [pc, #524]	; (8002f04 <MX_FREERTOS_Init+0x3a4>)
 8002cf6:	6013      	str	r3, [r2, #0]

  /* creation of QueueCounterAlarm */
  QueueCounterAlarmHandle = osMessageQueueNew (1, sizeof(uint8_t), &QueueCounterAlarm_attributes);
 8002cf8:	4a83      	ldr	r2, [pc, #524]	; (8002f08 <MX_FREERTOS_Init+0x3a8>)
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f00d f83b 	bl	800fd78 <osMessageQueueNew>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a81      	ldr	r2, [pc, #516]	; (8002f0c <MX_FREERTOS_Init+0x3ac>)
 8002d06:	6013      	str	r3, [r2, #0]

  /* creation of QueSDCARD */
  QueSDCARDHandle = osMessageQueueNew (1, sizeof(Data_Structure_t), &QueSDCARD_attributes);
 8002d08:	4a81      	ldr	r2, [pc, #516]	; (8002f10 <MX_FREERTOS_Init+0x3b0>)
 8002d0a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f00d f832 	bl	800fd78 <osMessageQueueNew>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4a7f      	ldr	r2, [pc, #508]	; (8002f14 <MX_FREERTOS_Init+0x3b4>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* creation of QuequeBattery */
  QuequeBatteryHandle = osMessageQueueNew (2, sizeof(INA219Data_t), &QuequeBattery_attributes);
 8002d1a:	4a7f      	ldr	r2, [pc, #508]	; (8002f18 <MX_FREERTOS_Init+0x3b8>)
 8002d1c:	2108      	movs	r1, #8
 8002d1e:	2002      	movs	r0, #2
 8002d20:	f00d f82a 	bl	800fd78 <osMessageQueueNew>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a7d      	ldr	r2, [pc, #500]	; (8002f1c <MX_FREERTOS_Init+0x3bc>)
 8002d28:	6013      	str	r3, [r2, #0]

  /* creation of QueDs3231Time */
  QueDs3231TimeHandle = osMessageQueueNew (1, sizeof(RTC_TimeTypeDef), &QueDs3231Time_attributes);
 8002d2a:	4a7d      	ldr	r2, [pc, #500]	; (8002f20 <MX_FREERTOS_Init+0x3c0>)
 8002d2c:	2114      	movs	r1, #20
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f00d f822 	bl	800fd78 <osMessageQueueNew>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4a7b      	ldr	r2, [pc, #492]	; (8002f24 <MX_FREERTOS_Init+0x3c4>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* creation of QueueDs3231Date */
  QueueDs3231DateHandle = osMessageQueueNew (1, sizeof(RTC_DateTypeDef), &QueueDs3231Date_attributes);
 8002d3a:	4a7b      	ldr	r2, [pc, #492]	; (8002f28 <MX_FREERTOS_Init+0x3c8>)
 8002d3c:	2104      	movs	r1, #4
 8002d3e:	2001      	movs	r0, #1
 8002d40:	f00d f81a 	bl	800fd78 <osMessageQueueNew>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a79      	ldr	r2, [pc, #484]	; (8002f2c <MX_FREERTOS_Init+0x3cc>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* creation of QueuePV */
  QueuePVHandle = osMessageQueueNew (1, sizeof(INA219Data_t), &QueuePV_attributes);
 8002d4a:	4a79      	ldr	r2, [pc, #484]	; (8002f30 <MX_FREERTOS_Init+0x3d0>)
 8002d4c:	2108      	movs	r1, #8
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f00d f812 	bl	800fd78 <osMessageQueueNew>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4a77      	ldr	r2, [pc, #476]	; (8002f34 <MX_FREERTOS_Init+0x3d4>)
 8002d58:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskRTC */
  TaskRTCHandle = osThreadNew(StartTaskRTC, NULL, &TaskRTC_attributes);
 8002d5a:	4a77      	ldr	r2, [pc, #476]	; (8002f38 <MX_FREERTOS_Init+0x3d8>)
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	4877      	ldr	r0, [pc, #476]	; (8002f3c <MX_FREERTOS_Init+0x3dc>)
 8002d60:	f00c faf0 	bl	800f344 <osThreadNew>
 8002d64:	4603      	mov	r3, r0
 8002d66:	4a76      	ldr	r2, [pc, #472]	; (8002f40 <MX_FREERTOS_Init+0x3e0>)
 8002d68:	6013      	str	r3, [r2, #0]

  /* creation of TaskBme280 */
  TaskBme280Handle = osThreadNew(StartTaskBme280, NULL, &TaskBme280_attributes);
 8002d6a:	4a76      	ldr	r2, [pc, #472]	; (8002f44 <MX_FREERTOS_Init+0x3e4>)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4876      	ldr	r0, [pc, #472]	; (8002f48 <MX_FREERTOS_Init+0x3e8>)
 8002d70:	f00c fae8 	bl	800f344 <osThreadNew>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4a75      	ldr	r2, [pc, #468]	; (8002f4c <MX_FREERTOS_Init+0x3ec>)
 8002d78:	6013      	str	r3, [r2, #0]

  /* creation of TaskBH1750 */
  TaskBH1750Handle = osThreadNew(StartTaskBH1750, NULL, &TaskBH1750_attributes);
 8002d7a:	4a75      	ldr	r2, [pc, #468]	; (8002f50 <MX_FREERTOS_Init+0x3f0>)
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	4875      	ldr	r0, [pc, #468]	; (8002f54 <MX_FREERTOS_Init+0x3f4>)
 8002d80:	f00c fae0 	bl	800f344 <osThreadNew>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4a74      	ldr	r2, [pc, #464]	; (8002f58 <MX_FREERTOS_Init+0x3f8>)
 8002d88:	6013      	str	r3, [r2, #0]

  /* creation of TaskSSD1306 */
  TaskSSD1306Handle = osThreadNew(StartTaskSSD1306, NULL, &TaskSSD1306_attributes);
 8002d8a:	4a74      	ldr	r2, [pc, #464]	; (8002f5c <MX_FREERTOS_Init+0x3fc>)
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4874      	ldr	r0, [pc, #464]	; (8002f60 <MX_FREERTOS_Init+0x400>)
 8002d90:	f00c fad8 	bl	800f344 <osThreadNew>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4a73      	ldr	r2, [pc, #460]	; (8002f64 <MX_FREERTOS_Init+0x404>)
 8002d98:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpON */
  TaskPumpONHandle = osThreadNew(StartTaskPumpON, NULL, &TaskPumpON_attributes);
 8002d9a:	4a73      	ldr	r2, [pc, #460]	; (8002f68 <MX_FREERTOS_Init+0x408>)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4873      	ldr	r0, [pc, #460]	; (8002f6c <MX_FREERTOS_Init+0x40c>)
 8002da0:	f00c fad0 	bl	800f344 <osThreadNew>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4a72      	ldr	r2, [pc, #456]	; (8002f70 <MX_FREERTOS_Init+0x410>)
 8002da8:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpOFF */
  TaskPumpOFFHandle = osThreadNew(StartTaskPumpOFF, NULL, &TaskPumpOFF_attributes);
 8002daa:	4a72      	ldr	r2, [pc, #456]	; (8002f74 <MX_FREERTOS_Init+0x414>)
 8002dac:	2100      	movs	r1, #0
 8002dae:	4872      	ldr	r0, [pc, #456]	; (8002f78 <MX_FREERTOS_Init+0x418>)
 8002db0:	f00c fac8 	bl	800f344 <osThreadNew>
 8002db4:	4603      	mov	r3, r0
 8002db6:	4a71      	ldr	r2, [pc, #452]	; (8002f7c <MX_FREERTOS_Init+0x41c>)
 8002db8:	6013      	str	r3, [r2, #0]

  /* creation of TaskCounterPump */
  TaskCounterPumpHandle = osThreadNew(StartTaskCounterPump, NULL, &TaskCounterPump_attributes);
 8002dba:	4a71      	ldr	r2, [pc, #452]	; (8002f80 <MX_FREERTOS_Init+0x420>)
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4871      	ldr	r0, [pc, #452]	; (8002f84 <MX_FREERTOS_Init+0x424>)
 8002dc0:	f00c fac0 	bl	800f344 <osThreadNew>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4a70      	ldr	r2, [pc, #448]	; (8002f88 <MX_FREERTOS_Init+0x428>)
 8002dc8:	6013      	str	r3, [r2, #0]

  /* creation of TaskAlarmCounte */
  TaskAlarmCounteHandle = osThreadNew(StartTaskAlarmCounter, NULL, &TaskAlarmCounte_attributes);
 8002dca:	4a70      	ldr	r2, [pc, #448]	; (8002f8c <MX_FREERTOS_Init+0x42c>)
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4870      	ldr	r0, [pc, #448]	; (8002f90 <MX_FREERTOS_Init+0x430>)
 8002dd0:	f00c fab8 	bl	800f344 <osThreadNew>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4a6f      	ldr	r2, [pc, #444]	; (8002f94 <MX_FREERTOS_Init+0x434>)
 8002dd8:	6013      	str	r3, [r2, #0]

  /* creation of TaskSdCard */
  TaskSdCardHandle = osThreadNew(StartTaskSdCard, NULL, &TaskSdCard_attributes);
 8002dda:	4a6f      	ldr	r2, [pc, #444]	; (8002f98 <MX_FREERTOS_Init+0x438>)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	486f      	ldr	r0, [pc, #444]	; (8002f9c <MX_FREERTOS_Init+0x43c>)
 8002de0:	f00c fab0 	bl	800f344 <osThreadNew>
 8002de4:	4603      	mov	r3, r0
 8002de6:	4a6e      	ldr	r2, [pc, #440]	; (8002fa0 <MX_FREERTOS_Init+0x440>)
 8002de8:	6013      	str	r3, [r2, #0]

  /* creation of TaskINA219 */
  TaskINA219Handle = osThreadNew(StartTaskINA219, NULL, &TaskINA219_attributes);
 8002dea:	4a6e      	ldr	r2, [pc, #440]	; (8002fa4 <MX_FREERTOS_Init+0x444>)
 8002dec:	2100      	movs	r1, #0
 8002dee:	486e      	ldr	r0, [pc, #440]	; (8002fa8 <MX_FREERTOS_Init+0x448>)
 8002df0:	f00c faa8 	bl	800f344 <osThreadNew>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4a6d      	ldr	r2, [pc, #436]	; (8002fac <MX_FREERTOS_Init+0x44c>)
 8002df8:	6013      	str	r3, [r2, #0]

  /* creation of TaskINA219PV */
  TaskINA219PVHandle = osThreadNew(StartTaskINA219PV, NULL, &TaskINA219PV_attributes);
 8002dfa:	4a6d      	ldr	r2, [pc, #436]	; (8002fb0 <MX_FREERTOS_Init+0x450>)
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	486d      	ldr	r0, [pc, #436]	; (8002fb4 <MX_FREERTOS_Init+0x454>)
 8002e00:	f00c faa0 	bl	800f344 <osThreadNew>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4a6c      	ldr	r2, [pc, #432]	; (8002fb8 <MX_FREERTOS_Init+0x458>)
 8002e08:	6013      	str	r3, [r2, #0]

  /* creation of TaskDS3231 */
  TaskDS3231Handle = osThreadNew(StartTaskDS3231, NULL, &TaskDS3231_attributes);
 8002e0a:	4a6c      	ldr	r2, [pc, #432]	; (8002fbc <MX_FREERTOS_Init+0x45c>)
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	486c      	ldr	r0, [pc, #432]	; (8002fc0 <MX_FREERTOS_Init+0x460>)
 8002e10:	f00c fa98 	bl	800f344 <osThreadNew>
 8002e14:	4603      	mov	r3, r0
 8002e16:	4a6b      	ldr	r2, [pc, #428]	; (8002fc4 <MX_FREERTOS_Init+0x464>)
 8002e18:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	08018c08 	.word	0x08018c08
 8002e24:	2000072c 	.word	0x2000072c
 8002e28:	08018c18 	.word	0x08018c18
 8002e2c:	20000730 	.word	0x20000730
 8002e30:	08018c28 	.word	0x08018c28
 8002e34:	20000734 	.word	0x20000734
 8002e38:	08018c38 	.word	0x08018c38
 8002e3c:	20000738 	.word	0x20000738
 8002e40:	08018c48 	.word	0x08018c48
 8002e44:	2000073c 	.word	0x2000073c
 8002e48:	08018c58 	.word	0x08018c58
 8002e4c:	20000740 	.word	0x20000740
 8002e50:	08018c68 	.word	0x08018c68
 8002e54:	20000744 	.word	0x20000744
 8002e58:	08018c78 	.word	0x08018c78
 8002e5c:	20000748 	.word	0x20000748
 8002e60:	08018c88 	.word	0x08018c88
 8002e64:	2000074c 	.word	0x2000074c
 8002e68:	08018c98 	.word	0x08018c98
 8002e6c:	20000750 	.word	0x20000750
 8002e70:	08018ca8 	.word	0x08018ca8
 8002e74:	20000754 	.word	0x20000754
 8002e78:	08018cb8 	.word	0x08018cb8
 8002e7c:	20000758 	.word	0x20000758
 8002e80:	08018cc8 	.word	0x08018cc8
 8002e84:	2000075c 	.word	0x2000075c
 8002e88:	08018cd8 	.word	0x08018cd8
 8002e8c:	20000760 	.word	0x20000760
 8002e90:	08018ce8 	.word	0x08018ce8
 8002e94:	20000764 	.word	0x20000764
 8002e98:	08018ba8 	.word	0x08018ba8
 8002e9c:	080042e5 	.word	0x080042e5
 8002ea0:	20000714 	.word	0x20000714
 8002ea4:	08018bb8 	.word	0x08018bb8
 8002ea8:	08004305 	.word	0x08004305
 8002eac:	20000718 	.word	0x20000718
 8002eb0:	08018bc8 	.word	0x08018bc8
 8002eb4:	08004325 	.word	0x08004325
 8002eb8:	2000071c 	.word	0x2000071c
 8002ebc:	08018bd8 	.word	0x08018bd8
 8002ec0:	08004345 	.word	0x08004345
 8002ec4:	20000720 	.word	0x20000720
 8002ec8:	08018be8 	.word	0x08018be8
 8002ecc:	08004365 	.word	0x08004365
 8002ed0:	20000724 	.word	0x20000724
 8002ed4:	08018bf8 	.word	0x08018bf8
 8002ed8:	08004385 	.word	0x08004385
 8002edc:	20000728 	.word	0x20000728
 8002ee0:	08018aa0 	.word	0x08018aa0
 8002ee4:	200006e8 	.word	0x200006e8
 8002ee8:	08018ab8 	.word	0x08018ab8
 8002eec:	200006ec 	.word	0x200006ec
 8002ef0:	08018ad0 	.word	0x08018ad0
 8002ef4:	200006f0 	.word	0x200006f0
 8002ef8:	08018ae8 	.word	0x08018ae8
 8002efc:	200006f4 	.word	0x200006f4
 8002f00:	08018b00 	.word	0x08018b00
 8002f04:	200006f8 	.word	0x200006f8
 8002f08:	08018b18 	.word	0x08018b18
 8002f0c:	200006fc 	.word	0x200006fc
 8002f10:	08018b30 	.word	0x08018b30
 8002f14:	20000700 	.word	0x20000700
 8002f18:	08018b48 	.word	0x08018b48
 8002f1c:	20000704 	.word	0x20000704
 8002f20:	08018b60 	.word	0x08018b60
 8002f24:	20000708 	.word	0x20000708
 8002f28:	08018b78 	.word	0x08018b78
 8002f2c:	2000070c 	.word	0x2000070c
 8002f30:	08018b90 	.word	0x08018b90
 8002f34:	20000710 	.word	0x20000710
 8002f38:	080188f0 	.word	0x080188f0
 8002f3c:	08002fc9 	.word	0x08002fc9
 8002f40:	200006b8 	.word	0x200006b8
 8002f44:	08018914 	.word	0x08018914
 8002f48:	08003359 	.word	0x08003359
 8002f4c:	200006bc 	.word	0x200006bc
 8002f50:	08018938 	.word	0x08018938
 8002f54:	08003451 	.word	0x08003451
 8002f58:	200006c0 	.word	0x200006c0
 8002f5c:	0801895c 	.word	0x0801895c
 8002f60:	08003529 	.word	0x08003529
 8002f64:	200006c4 	.word	0x200006c4
 8002f68:	08018980 	.word	0x08018980
 8002f6c:	08003ac5 	.word	0x08003ac5
 8002f70:	200006c8 	.word	0x200006c8
 8002f74:	080189a4 	.word	0x080189a4
 8002f78:	08003aeb 	.word	0x08003aeb
 8002f7c:	200006cc 	.word	0x200006cc
 8002f80:	080189c8 	.word	0x080189c8
 8002f84:	08003b09 	.word	0x08003b09
 8002f88:	200006d0 	.word	0x200006d0
 8002f8c:	080189ec 	.word	0x080189ec
 8002f90:	08003bb9 	.word	0x08003bb9
 8002f94:	200006d4 	.word	0x200006d4
 8002f98:	08018a10 	.word	0x08018a10
 8002f9c:	08003c6d 	.word	0x08003c6d
 8002fa0:	200006d8 	.word	0x200006d8
 8002fa4:	08018a34 	.word	0x08018a34
 8002fa8:	08003f55 	.word	0x08003f55
 8002fac:	200006dc 	.word	0x200006dc
 8002fb0:	08018a58 	.word	0x08018a58
 8002fb4:	080040a9 	.word	0x080040a9
 8002fb8:	200006e0 	.word	0x200006e0
 8002fbc:	08018a7c 	.word	0x08018a7c
 8002fc0:	08004201 	.word	0x08004201
 8002fc4:	200006e4 	.word	0x200006e4

08002fc8 <StartTaskRTC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskRTC */
void StartTaskRTC(void *argument)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b09e      	sub	sp, #120	; 0x78
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRTC */
		extern RTC_HandleTypeDef hrtc;

	 	 RTC_TimeTypeDef _RTCTime ={0};
 8002fd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]

	 	 RTC_DateTypeDef _RTCDate = {0};
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	65bb      	str	r3, [r7, #88]	; 0x58

	 	 RTC_AlarmTypeDef _AlarmON, _AlarmOFF = {0};
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	2228      	movs	r2, #40	; 0x28
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f011 fc38 	bl	8014862 <memset>


	 	static uint8_t _PumpDispensing = 1;
	 	static uint8_t _AlarmPeriod = 1;
	 	uint8_t SdCard = 1;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73





	 	 _AlarmON.AlarmTime.Hours = 8 ;
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	 	 _AlarmON.AlarmTime.Minutes = 0 ;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	 	_AlarmON.AlarmTime.Seconds = 0 ;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32


		 _AlarmOFF.AlarmTime.Hours = 8 ;
 800300a:	2308      	movs	r3, #8
 800300c:	723b      	strb	r3, [r7, #8]
		 _AlarmOFF.AlarmTime.Minutes = 1 ;
 800300e:	2301      	movs	r3, #1
 8003010:	727b      	strb	r3, [r7, #9]
		_AlarmOFF.AlarmTime.Seconds = 0 ;
 8003012:	2300      	movs	r3, #0
 8003014:	72bb      	strb	r3, [r7, #10]



		osThreadFlagsSet(TaskDS3231Handle, 0x00000100U);
 8003016:	4bbb      	ldr	r3, [pc, #748]	; (8003304 <StartTaskRTC+0x33c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800301e:	4618      	mov	r0, r3
 8003020:	f00c fa42 	bl	800f4a8 <osThreadFlagsSet>
	 	HAL_RTC_Init(&hrtc);
 8003024:	48b8      	ldr	r0, [pc, #736]	; (8003308 <StartTaskRTC+0x340>)
 8003026:	f006 fba7 	bl	8009778 <HAL_RTC_Init>

	// 	_RTCTime.Hours = 0x0;
	//    _RTCTime.Minutes =0x0;
	//	_RTCTime.Seconds =0x0;

		osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 800302a:	4bb8      	ldr	r3, [pc, #736]	; (800330c <StartTaskRTC+0x344>)
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	2200      	movs	r2, #0
 8003034:	49b6      	ldr	r1, [pc, #728]	; (8003310 <StartTaskRTC+0x348>)
 8003036:	f00c ff13 	bl	800fe60 <osMessageQueuePut>
		osMessageQueuePut(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 800303a:	4bb6      	ldr	r3, [pc, #728]	; (8003314 <StartTaskRTC+0x34c>)
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	f04f 33ff 	mov.w	r3, #4294967295
 8003042:	2200      	movs	r2, #0
 8003044:	49b4      	ldr	r1, [pc, #720]	; (8003318 <StartTaskRTC+0x350>)
 8003046:	f00c ff0b 	bl	800fe60 <osMessageQueuePut>
	 	osTimerStart(TimerRTCHandle, 300);
 800304a:	4bb4      	ldr	r3, [pc, #720]	; (800331c <StartTaskRTC+0x354>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8003052:	4618      	mov	r0, r3
 8003054:	f00c fc0e 	bl	800f874 <osTimerStart>
	 	uint32_t tick4 = osKernelGetTickCount();
 8003058:	f00c f956 	bl	800f308 <osKernelGetTickCount>
 800305c:	6778      	str	r0, [r7, #116]	; 0x74
  for(;;)
  {
	  //	  osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, 10);
	  //	  osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod, 0, 10);

	      printf("Task RTC start \n\r ");
 800305e:	48b0      	ldr	r0, [pc, #704]	; (8003320 <StartTaskRTC+0x358>)
 8003060:	f002 ffcc 	bl	8005ffc <printf_>
	      if(osOK== osMessageQueueGet(QueDs3231TimeHandle, &_RTCTime, 0, 50))
 8003064:	4baf      	ldr	r3, [pc, #700]	; (8003324 <StartTaskRTC+0x35c>)
 8003066:	6818      	ldr	r0, [r3, #0]
 8003068:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800306c:	2332      	movs	r3, #50	; 0x32
 800306e:	2200      	movs	r2, #0
 8003070:	f00c ff56 	bl	800ff20 <osMessageQueueGet>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d145      	bne.n	8003106 <StartTaskRTC+0x13e>
	      {
	    	  HAL_RTC_SetTime(&hrtc,&_RTCTime, RTC_FORMAT_BIN);
 800307a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800307e:	2200      	movs	r2, #0
 8003080:	4619      	mov	r1, r3
 8003082:	48a1      	ldr	r0, [pc, #644]	; (8003308 <StartTaskRTC+0x340>)
 8003084:	f006 fbee 	bl	8009864 <HAL_RTC_SetTime>
	    	  if (_RTCTime.Hours +1 <=22)
 8003088:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800308c:	2b15      	cmp	r3, #21
 800308e:	d815      	bhi.n	80030bc <StartTaskRTC+0xf4>
				  {  	  _AlarmON.AlarmTime.Hours = _RTCTime.Hours + 1  ;
 8003090:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8003094:	3301      	adds	r3, #1
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
						 _AlarmON.AlarmTime.Minutes = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
						_AlarmON.AlarmTime.Seconds = 0 ;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

						 _AlarmOFF.AlarmTime.Hours = _RTCTime.Hours + 1 ;
 80030a8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80030ac:	3301      	adds	r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	723b      	strb	r3, [r7, #8]
						 _AlarmOFF.AlarmTime.Minutes = 1 ;
 80030b2:	2301      	movs	r3, #1
 80030b4:	727b      	strb	r3, [r7, #9]
						 _AlarmOFF.AlarmTime.Seconds = 0 ;
 80030b6:	2300      	movs	r3, #0
 80030b8:	72bb      	strb	r3, [r7, #10]
 80030ba:	e00e      	b.n	80030da <StartTaskRTC+0x112>
				  }
	    	  else
				  {
					  _AlarmON.AlarmTime.Hours = 8 	;
 80030bc:	2308      	movs	r3, #8
 80030be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					  _AlarmON.AlarmTime.Minutes = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					  _AlarmON.AlarmTime.Seconds = 0 ;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
					  _AlarmOFF.AlarmTime.Hours = 8 ;
 80030ce:	2308      	movs	r3, #8
 80030d0:	723b      	strb	r3, [r7, #8]
					 _AlarmOFF.AlarmTime.Minutes = 1 ;
 80030d2:	2301      	movs	r3, #1
 80030d4:	727b      	strb	r3, [r7, #9]
					 _AlarmOFF.AlarmTime.Seconds = 0 ;
 80030d6:	2300      	movs	r3, #0
 80030d8:	72bb      	strb	r3, [r7, #10]
				  }
	    	  HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 80030da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030de:	2200      	movs	r2, #0
 80030e0:	4619      	mov	r1, r3
 80030e2:	4889      	ldr	r0, [pc, #548]	; (8003308 <StartTaskRTC+0x340>)
 80030e4:	f006 fd89 	bl	8009bfa <HAL_RTC_SetAlarm>
	    	  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 80030e8:	f107 0308 	add.w	r3, r7, #8
 80030ec:	2200      	movs	r2, #0
 80030ee:	4619      	mov	r1, r3
 80030f0:	4885      	ldr	r0, [pc, #532]	; (8003308 <StartTaskRTC+0x340>)
 80030f2:	f006 fd82 	bl	8009bfa <HAL_RTC_SetAlarm>

	    	  HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 80030f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030fa:	2200      	movs	r2, #0
 80030fc:	4619      	mov	r1, r3
 80030fe:	4882      	ldr	r0, [pc, #520]	; (8003308 <StartTaskRTC+0x340>)
 8003100:	f006 fc4a 	bl	8009998 <HAL_RTC_GetTime>
 8003104:	e027      	b.n	8003156 <StartTaskRTC+0x18e>

	      }
	      else if(osOK == osMessageQueueGet(QueueDs3231DateHandle, &_RTCDate, 0, 50))
 8003106:	4b88      	ldr	r3, [pc, #544]	; (8003328 <StartTaskRTC+0x360>)
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800310e:	2332      	movs	r3, #50	; 0x32
 8003110:	2200      	movs	r2, #0
 8003112:	f00c ff05 	bl	800ff20 <osMessageQueueGet>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10e      	bne.n	800313a <StartTaskRTC+0x172>
	      {
	    	  HAL_RTC_SetDate(&hrtc,&_RTCDate, RTC_FORMAT_BIN);
 800311c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003120:	2200      	movs	r2, #0
 8003122:	4619      	mov	r1, r3
 8003124:	4878      	ldr	r0, [pc, #480]	; (8003308 <StartTaskRTC+0x340>)
 8003126:	f006 fc95 	bl	8009a54 <HAL_RTC_SetDate>
	    	  HAL_RTC_GetDate(&hrtc,&_RTCDate, RTC_FORMAT_BIN);
 800312a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800312e:	2200      	movs	r2, #0
 8003130:	4619      	mov	r1, r3
 8003132:	4875      	ldr	r0, [pc, #468]	; (8003308 <StartTaskRTC+0x340>)
 8003134:	f006 fd12 	bl	8009b5c <HAL_RTC_GetDate>
 8003138:	e00d      	b.n	8003156 <StartTaskRTC+0x18e>
	      }
	      else
	      {
	    	  HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 800313a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800313e:	2200      	movs	r2, #0
 8003140:	4619      	mov	r1, r3
 8003142:	4871      	ldr	r0, [pc, #452]	; (8003308 <StartTaskRTC+0x340>)
 8003144:	f006 fd0a 	bl	8009b5c <HAL_RTC_GetDate>
	    	  HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 8003148:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800314c:	2200      	movs	r2, #0
 800314e:	4619      	mov	r1, r3
 8003150:	486d      	ldr	r0, [pc, #436]	; (8003308 <StartTaskRTC+0x340>)
 8003152:	f006 fc21 	bl	8009998 <HAL_RTC_GetTime>





	  	if (osOK == osSemaphoreAcquire(BinarySemCounterHandle, 0))
 8003156:	4b75      	ldr	r3, [pc, #468]	; (800332c <StartTaskRTC+0x364>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2100      	movs	r1, #0
 800315c:	4618      	mov	r0, r3
 800315e:	f00c fd75 	bl	800fc4c <osSemaphoreAcquire>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <StartTaskRTC+0x1b2>
	  	{
	  		osMessageQueueGet(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 8003168:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <StartTaskRTC+0x34c>)
 800316a:	6818      	ldr	r0, [r3, #0]
 800316c:	f04f 33ff 	mov.w	r3, #4294967295
 8003170:	2200      	movs	r2, #0
 8003172:	4969      	ldr	r1, [pc, #420]	; (8003318 <StartTaskRTC+0x350>)
 8003174:	f00c fed4 	bl	800ff20 <osMessageQueueGet>
 8003178:	e010      	b.n	800319c <StartTaskRTC+0x1d4>
//	  		_AlarmOFF.AlarmTime.Minutes = _PumpDispensing;

	  	}
	  	else if (osOK == osSemaphoreAcquire(BinarySemSetAlarmHandle, 0))
 800317a:	4b6d      	ldr	r3, [pc, #436]	; (8003330 <StartTaskRTC+0x368>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f00c fd63 	bl	800fc4c <osSemaphoreAcquire>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <StartTaskRTC+0x1d4>
	  	{
	  		osMessageQueueGet(QueueCounterAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 800318c:	4b5f      	ldr	r3, [pc, #380]	; (800330c <StartTaskRTC+0x344>)
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	2200      	movs	r2, #0
 8003196:	495e      	ldr	r1, [pc, #376]	; (8003310 <StartTaskRTC+0x348>)
 8003198:	f00c fec2 	bl	800ff20 <osMessageQueueGet>
	  //			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
	  //		}



	  	   if (_AlarmON.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmON.AlarmTime.Minutes ==  _RTCTime.Minutes )
 800319c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80031a0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d137      	bne.n	8003218 <StartTaskRTC+0x250>
 80031a8:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 80031ac:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d131      	bne.n	8003218 <StartTaskRTC+0x250>
	  	  	  {
	  		      osMutexAcquire(MutexAlarmHandle, osWaitForever);
 80031b4:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <StartTaskRTC+0x36c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f04f 31ff 	mov.w	r1, #4294967295
 80031bc:	4618      	mov	r0, r3
 80031be:	f00c fc0d 	bl	800f9dc <osMutexAcquire>
	  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 80031c2:	2201      	movs	r2, #1
 80031c4:	2120      	movs	r1, #32
 80031c6:	485c      	ldr	r0, [pc, #368]	; (8003338 <StartTaskRTC+0x370>)
 80031c8:	f003 ffa0 	bl	800710c <HAL_GPIO_WritePin>
	  			  osThreadFlagsSet(TaskPumpONHandle, 0x00000001U);
 80031cc:	4b5b      	ldr	r3, [pc, #364]	; (800333c <StartTaskRTC+0x374>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	4618      	mov	r0, r3
 80031d4:	f00c f968 	bl	800f4a8 <osThreadFlagsSet>
	  			  _AlarmON.AlarmTime.Hours = _AlarmON.AlarmTime.Hours + _AlarmPeriod;
 80031d8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80031dc:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <StartTaskRTC+0x348>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	4413      	add	r3, r2
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	  			  if(_AlarmON.AlarmTime.Hours >= 22 || _AlarmON.AlarmTime.Hours <= 8)
 80031e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80031ec:	2b15      	cmp	r3, #21
 80031ee:	d803      	bhi.n	80031f8 <StartTaskRTC+0x230>
 80031f0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d802      	bhi.n	80031fe <StartTaskRTC+0x236>
	  				  {
	  					  _AlarmON.AlarmTime.Hours = 8;
 80031f8:	2308      	movs	r3, #8
 80031fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	  				  }
	  			  HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 80031fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003202:	2200      	movs	r2, #0
 8003204:	4619      	mov	r1, r3
 8003206:	4840      	ldr	r0, [pc, #256]	; (8003308 <StartTaskRTC+0x340>)
 8003208:	f006 fcf7 	bl	8009bfa <HAL_RTC_SetAlarm>
	  			  osMutexRelease(MutexAlarmHandle);
 800320c:	4b49      	ldr	r3, [pc, #292]	; (8003334 <StartTaskRTC+0x36c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f00c fc2e 	bl	800fa72 <osMutexRelease>
 8003216:	e045      	b.n	80032a4 <StartTaskRTC+0x2dc>
	  	  	  }
	  	  else if(_AlarmOFF.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmOFF.AlarmTime.Minutes ==  _RTCTime.Minutes )
 8003218:	7a3a      	ldrb	r2, [r7, #8]
 800321a:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800321e:	429a      	cmp	r2, r3
 8003220:	d131      	bne.n	8003286 <StartTaskRTC+0x2be>
 8003222:	7a7a      	ldrb	r2, [r7, #9]
 8003224:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003228:	429a      	cmp	r2, r3
 800322a:	d12c      	bne.n	8003286 <StartTaskRTC+0x2be>
	  	  	  {
	  		  	  osMutexAcquire(MutexAlarmHandle, osWaitForever);
 800322c:	4b41      	ldr	r3, [pc, #260]	; (8003334 <StartTaskRTC+0x36c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	4618      	mov	r0, r3
 8003236:	f00c fbd1 	bl	800f9dc <osMutexAcquire>
	  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 800323a:	2200      	movs	r2, #0
 800323c:	2120      	movs	r1, #32
 800323e:	483e      	ldr	r0, [pc, #248]	; (8003338 <StartTaskRTC+0x370>)
 8003240:	f003 ff64 	bl	800710c <HAL_GPIO_WritePin>
	  			  osThreadFlagsSet(TaskPumpOFFHandle, 0x00000010U);
 8003244:	4b3e      	ldr	r3, [pc, #248]	; (8003340 <StartTaskRTC+0x378>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2110      	movs	r1, #16
 800324a:	4618      	mov	r0, r3
 800324c:	f00c f92c 	bl	800f4a8 <osThreadFlagsSet>

	  			  _AlarmOFF.AlarmTime.Hours = _AlarmOFF.AlarmTime.Hours + _AlarmPeriod;
 8003250:	7a3a      	ldrb	r2, [r7, #8]
 8003252:	4b2f      	ldr	r3, [pc, #188]	; (8003310 <StartTaskRTC+0x348>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	4413      	add	r3, r2
 8003258:	b2db      	uxtb	r3, r3
 800325a:	723b      	strb	r3, [r7, #8]

	  			if(_AlarmOFF.AlarmTime.Hours >= 22 || _AlarmOFF.AlarmTime.Hours <= 8)
 800325c:	7a3b      	ldrb	r3, [r7, #8]
 800325e:	2b15      	cmp	r3, #21
 8003260:	d802      	bhi.n	8003268 <StartTaskRTC+0x2a0>
 8003262:	7a3b      	ldrb	r3, [r7, #8]
 8003264:	2b08      	cmp	r3, #8
 8003266:	d801      	bhi.n	800326c <StartTaskRTC+0x2a4>
	  			  	 {
	  			  		  _AlarmOFF.AlarmTime.Hours = 8;
 8003268:	2308      	movs	r3, #8
 800326a:	723b      	strb	r3, [r7, #8]
	  			  	 }

	  			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 800326c:	f107 0308 	add.w	r3, r7, #8
 8003270:	2200      	movs	r2, #0
 8003272:	4619      	mov	r1, r3
 8003274:	4824      	ldr	r0, [pc, #144]	; (8003308 <StartTaskRTC+0x340>)
 8003276:	f006 fcc0 	bl	8009bfa <HAL_RTC_SetAlarm>
	  			  osMutexRelease(MutexAlarmHandle);
 800327a:	4b2e      	ldr	r3, [pc, #184]	; (8003334 <StartTaskRTC+0x36c>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f00c fbf7 	bl	800fa72 <osMutexRelease>
 8003284:	e00e      	b.n	80032a4 <StartTaskRTC+0x2dc>

	  	  	  }
	  	  else if (_RTCTime.Hours == 23 && _RTCTime.Minutes == 59)
 8003286:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800328a:	2b17      	cmp	r3, #23
 800328c:	d10a      	bne.n	80032a4 <StartTaskRTC+0x2dc>
 800328e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8003292:	2b3b      	cmp	r3, #59	; 0x3b
 8003294:	d106      	bne.n	80032a4 <StartTaskRTC+0x2dc>
	  	  {
	  		osThreadFlagsSet(TaskDS3231Handle, 0x00000100U);
 8003296:	4b1b      	ldr	r3, [pc, #108]	; (8003304 <StartTaskRTC+0x33c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800329e:	4618      	mov	r0, r3
 80032a0:	f00c f902 	bl	800f4a8 <osThreadFlagsSet>
	  //	  {
	  //
	  //
	  //		  CompareSeconds = RTCTime.Seconds;
	  //	  }
	  	  if (osOK == osSemaphoreAcquire(BinarySemRTCHandle, 0)) {
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <StartTaskRTC+0x37c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f00c fcce 	bl	800fc4c <osSemaphoreAcquire>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d111      	bne.n	80032da <StartTaskRTC+0x312>
	  //	  	  			osMessageQueuePut(QueueRTCDataHandle, &_RTCDate, 0, osWaitForever);
	  	  	  			osMessageQueuePut(QueueRTCTimeHandle, &_RTCTime, 0, osWaitForever);
 80032b6:	4b24      	ldr	r3, [pc, #144]	; (8003348 <StartTaskRTC+0x380>)
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	2200      	movs	r2, #0
 80032c4:	f00c fdcc 	bl	800fe60 <osMessageQueuePut>
	  	  	  			osMessageQueuePut(QueueRTCDataHandle, &_RTCDate, 0, osWaitForever);
 80032c8:	4b20      	ldr	r3, [pc, #128]	; (800334c <StartTaskRTC+0x384>)
 80032ca:	6818      	ldr	r0, [r3, #0]
 80032cc:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	2200      	movs	r2, #0
 80032d6:	f00c fdc3 	bl	800fe60 <osMessageQueuePut>
	  	  	  		}



	  	  printf("Task RTC exit \n\r ");
 80032da:	481d      	ldr	r0, [pc, #116]	; (8003350 <StartTaskRTC+0x388>)
 80032dc:	f002 fe8e 	bl	8005ffc <printf_>
	  	  tick4 += ((220 * osKernelGetTickFreq()) / 1000);
 80032e0:	f00c f827 	bl	800f332 <osKernelGetTickFreq>
 80032e4:	4603      	mov	r3, r0
 80032e6:	22dc      	movs	r2, #220	; 0xdc
 80032e8:	fb02 f303 	mul.w	r3, r2, r3
 80032ec:	4a19      	ldr	r2, [pc, #100]	; (8003354 <StartTaskRTC+0x38c>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80032f6:	4413      	add	r3, r2
 80032f8:	677b      	str	r3, [r7, #116]	; 0x74
	  	  osDelayUntil(tick4);
 80032fa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80032fc:	f00c f9fc 	bl	800f6f8 <osDelayUntil>
	      printf("Task RTC start \n\r ");
 8003300:	e6ad      	b.n	800305e <StartTaskRTC+0x96>
 8003302:	bf00      	nop
 8003304:	200006e4 	.word	0x200006e4
 8003308:	200007bc 	.word	0x200007bc
 800330c:	200006fc 	.word	0x200006fc
 8003310:	20000001 	.word	0x20000001
 8003314:	200006f8 	.word	0x200006f8
 8003318:	20000002 	.word	0x20000002
 800331c:	2000071c 	.word	0x2000071c
 8003320:	0801840c 	.word	0x0801840c
 8003324:	20000708 	.word	0x20000708
 8003328:	2000070c 	.word	0x2000070c
 800332c:	20000750 	.word	0x20000750
 8003330:	20000754 	.word	0x20000754
 8003334:	20000738 	.word	0x20000738
 8003338:	40020000 	.word	0x40020000
 800333c:	200006c8 	.word	0x200006c8
 8003340:	200006cc 	.word	0x200006cc
 8003344:	2000074c 	.word	0x2000074c
 8003348:	200006f4 	.word	0x200006f4
 800334c:	200006f0 	.word	0x200006f0
 8003350:	08018420 	.word	0x08018420
 8003354:	10624dd3 	.word	0x10624dd3

08003358 <StartTaskBme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBme280 */
void StartTaskBme280(void *argument)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af02      	add	r7, sp, #8
 800335e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBme280 */
	BmeData_t _BmeData;
		uint32_t tick3;
		osMutexAcquire(MutexI2CHandle, osWaitForever);
 8003360:	4b33      	ldr	r3, [pc, #204]	; (8003430 <StartTaskBme280+0xd8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f04f 31ff 	mov.w	r1, #4294967295
 8003368:	4618      	mov	r0, r3
 800336a:	f00c fb37 	bl	800f9dc <osMutexAcquire>
		BME280_Init(&hi2c1, BME280_TEMPERATURE_16BIT, BME280_PRESSURE_ULTRALOWPOWER,
 800336e:	2303      	movs	r3, #3
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	2303      	movs	r3, #3
 8003374:	2201      	movs	r2, #1
 8003376:	2101      	movs	r1, #1
 8003378:	482e      	ldr	r0, [pc, #184]	; (8003434 <StartTaskBme280+0xdc>)
 800337a:	f7fe fd23 	bl	8001dc4 <BME280_Init>
		BME280_HUMINIDITY_STANDARD, BME280_NORMALMODE);
		osDelay(100);
 800337e:	2064      	movs	r0, #100	; 0x64
 8003380:	f00c f99f 	bl	800f6c2 <osDelay>
		BME280_SetConfig(BME280_STANDBY_MS_10, BME280_FILTER_OFF);
 8003384:	2100      	movs	r1, #0
 8003386:	2006      	movs	r0, #6
 8003388:	f7fe fcfc 	bl	8001d84 <BME280_SetConfig>
		osMutexRelease(MutexI2CHandle);
 800338c:	4b28      	ldr	r3, [pc, #160]	; (8003430 <StartTaskBme280+0xd8>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f00c fb6e 	bl	800fa72 <osMutexRelease>
		osTimerStart(TimerBmeDataHandle, 400);
 8003396:	4b28      	ldr	r3, [pc, #160]	; (8003438 <StartTaskBme280+0xe0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800339e:	4618      	mov	r0, r3
 80033a0:	f00c fa68 	bl	800f874 <osTimerStart>

		tick3 = osKernelGetTickCount();
 80033a4:	f00b ffb0 	bl	800f308 <osKernelGetTickCount>
 80033a8:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {

	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 80033aa:	4b21      	ldr	r3, [pc, #132]	; (8003430 <StartTaskBme280+0xd8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f04f 31ff 	mov.w	r1, #4294967295
 80033b2:	4618      	mov	r0, r3
 80033b4:	f00c fb12 	bl	800f9dc <osMutexAcquire>
	  printf("TASK BME280 start\n\r ");
 80033b8:	4820      	ldr	r0, [pc, #128]	; (800343c <StartTaskBme280+0xe4>)
 80033ba:	f002 fe1f 	bl	8005ffc <printf_>
	  	  BME280_ReadTemperatureAndPressureAndHuminidity(&_BmeData.Temperature,
 80033be:	f107 0208 	add.w	r2, r7, #8
 80033c2:	f107 0308 	add.w	r3, r7, #8
 80033c6:	f103 0108 	add.w	r1, r3, #8
 80033ca:	f107 0308 	add.w	r3, r7, #8
 80033ce:	3304      	adds	r3, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe fee1 	bl	8002198 <BME280_ReadTemperatureAndPressureAndHuminidity>
	  	  				&_BmeData.Pressure, &_BmeData.Humidity);
	  	printf("TASK BME280 exit\n\r ");
 80033d6:	481a      	ldr	r0, [pc, #104]	; (8003440 <StartTaskBme280+0xe8>)
 80033d8:	f002 fe10 	bl	8005ffc <printf_>
	  	  osMutexRelease(MutexI2CHandle);
 80033dc:	4b14      	ldr	r3, [pc, #80]	; (8003430 <StartTaskBme280+0xd8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f00c fb46 	bl	800fa72 <osMutexRelease>

	  	  if (osOK == osSemaphoreAcquire(BinarySemBme280Handle, 0)) {
 80033e6:	4b17      	ldr	r3, [pc, #92]	; (8003444 <StartTaskBme280+0xec>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2100      	movs	r1, #0
 80033ec:	4618      	mov	r0, r3
 80033ee:	f00c fc2d 	bl	800fc4c <osSemaphoreAcquire>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <StartTaskBme280+0xb2>
	  	  			osMessageQueuePut(QueueBmeHandle, &_BmeData, 0, osWaitForever);
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <StartTaskBme280+0xf0>)
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	f107 0108 	add.w	r1, r7, #8
 8003400:	f04f 33ff 	mov.w	r3, #4294967295
 8003404:	2200      	movs	r2, #0
 8003406:	f00c fd2b 	bl	800fe60 <osMessageQueuePut>
	  	  		}

	  //	  printf("Temperature: %.2f, Humidity: %.2f z \n\r", _BmeData.Temperature, _BmeData.Humidity);
	  //////    osDelay(100);
	  		tick3 += (335 * osKernelGetTickFreq()) / 1000;
 800340a:	f00b ff92 	bl	800f332 <osKernelGetTickFreq>
 800340e:	4603      	mov	r3, r0
 8003410:	f240 124f 	movw	r2, #335	; 0x14f
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	4a0c      	ldr	r2, [pc, #48]	; (800344c <StartTaskBme280+0xf4>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4413      	add	r3, r2
 8003424:	617b      	str	r3, [r7, #20]
	  		osDelayUntil(tick3);
 8003426:	6978      	ldr	r0, [r7, #20]
 8003428:	f00c f966 	bl	800f6f8 <osDelayUntil>
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 800342c:	e7bd      	b.n	80033aa <StartTaskBme280+0x52>
 800342e:	bf00      	nop
 8003430:	20000730 	.word	0x20000730
 8003434:	20000768 	.word	0x20000768
 8003438:	20000714 	.word	0x20000714
 800343c:	08018434 	.word	0x08018434
 8003440:	0801844c 	.word	0x0801844c
 8003444:	20000744 	.word	0x20000744
 8003448:	200006e8 	.word	0x200006e8
 800344c:	10624dd3 	.word	0x10624dd3

08003450 <StartTaskBH1750>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBH1750 */
void StartTaskBH1750(void *argument)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
		uint32_t tick4;
		BHData_t _BHData;

		//	float BH1750_lux;

		osMutexAcquire(MutexI2CHandle, osWaitForever);
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <StartTaskBH1750+0xb8>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f04f 31ff 	mov.w	r1, #4294967295
 8003460:	4618      	mov	r0, r3
 8003462:	f00c fabb 	bl	800f9dc <osMutexAcquire>
		BH1750_Init(&hi2c1);
 8003466:	4829      	ldr	r0, [pc, #164]	; (800350c <StartTaskBH1750+0xbc>)
 8003468:	f7fe fad0 	bl	8001a0c <BH1750_Init>
		BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 800346c:	2011      	movs	r0, #17
 800346e:	f7fe fb03 	bl	8001a78 <BH1750_SetMode>
		osMutexRelease(MutexI2CHandle);
 8003472:	4b25      	ldr	r3, [pc, #148]	; (8003508 <StartTaskBH1750+0xb8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f00c fafb 	bl	800fa72 <osMutexRelease>

		osTimerStart(TimerBh1750DataHandle, 500);
 800347c:	4b24      	ldr	r3, [pc, #144]	; (8003510 <StartTaskBH1750+0xc0>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003484:	4618      	mov	r0, r3
 8003486:	f00c f9f5 	bl	800f874 <osTimerStart>
		tick4 = osKernelGetTickCount();
 800348a:	f00b ff3d 	bl	800f308 <osKernelGetTickCount>
 800348e:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <StartTaskBH1750+0xb8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f04f 31ff 	mov.w	r1, #4294967295
 8003498:	4618      	mov	r0, r3
 800349a:	f00c fa9f 	bl	800f9dc <osMutexAcquire>
	  printf("TASK BH1750 start \n\r ");
 800349e:	481d      	ldr	r0, [pc, #116]	; (8003514 <StartTaskBH1750+0xc4>)
 80034a0:	f002 fdac 	bl	8005ffc <printf_>
	 	  		BH1750_ReadLight(&_BHData.LightIntensity);
 80034a4:	f107 0308 	add.w	r3, r7, #8
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe fb65 	bl	8001b78 <BH1750_ReadLight>
	 	  //	  	  printf("Light: %.2f \n\r", _BhData.LightIntensity);
	 	  		printf("TASK BH1750 exit \n\r ");
 80034ae:	481a      	ldr	r0, [pc, #104]	; (8003518 <StartTaskBH1750+0xc8>)
 80034b0:	f002 fda4 	bl	8005ffc <printf_>
	 	  		osMutexRelease(MutexI2CHandle);
 80034b4:	4b14      	ldr	r3, [pc, #80]	; (8003508 <StartTaskBH1750+0xb8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f00c fada 	bl	800fa72 <osMutexRelease>

	 	  		if (osOK == osSemaphoreAcquire(BinarySemBH1750Handle, 0)) {
 80034be:	4b17      	ldr	r3, [pc, #92]	; (800351c <StartTaskBH1750+0xcc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2100      	movs	r1, #0
 80034c4:	4618      	mov	r0, r3
 80034c6:	f00c fbc1 	bl	800fc4c <osSemaphoreAcquire>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d108      	bne.n	80034e2 <StartTaskBH1750+0x92>
	 	  			osMessageQueuePut(QueueBh1750Handle, &_BHData, 0, osWaitForever);
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <StartTaskBH1750+0xd0>)
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	f107 0108 	add.w	r1, r7, #8
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	2200      	movs	r2, #0
 80034de:	f00c fcbf 	bl	800fe60 <osMessageQueuePut>
	 	  //	  	 	  	  {
	 	  //	  	 	  		  size = sprintf(buffer, "BH1750 Lux: %.2f\n\r", BH1750_lux);
	 	  //	  	 	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, size, 100);
	 	  //	  	 	  	  }

	 	  		tick4 += ((325 * osKernelGetTickFreq()) / 1000);
 80034e2:	f00b ff26 	bl	800f332 <osKernelGetTickFreq>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	019a      	lsls	r2, r3, #6
 80034f0:	4413      	add	r3, r2
 80034f2:	4a0c      	ldr	r2, [pc, #48]	; (8003524 <StartTaskBH1750+0xd4>)
 80034f4:	fba2 2303 	umull	r2, r3, r2, r3
 80034f8:	099b      	lsrs	r3, r3, #6
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4413      	add	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
	 	  		osDelayUntil(tick4);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f00c f8f9 	bl	800f6f8 <osDelayUntil>
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8003506:	e7c3      	b.n	8003490 <StartTaskBH1750+0x40>
 8003508:	20000730 	.word	0x20000730
 800350c:	20000768 	.word	0x20000768
 8003510:	20000718 	.word	0x20000718
 8003514:	08018460 	.word	0x08018460
 8003518:	08018478 	.word	0x08018478
 800351c:	20000748 	.word	0x20000748
 8003520:	200006ec 	.word	0x200006ec
 8003524:	10624dd3 	.word	0x10624dd3

08003528 <StartTaskSSD1306>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSSD1306 */
void StartTaskSSD1306(void *argument)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800352e:	af02      	add	r7, sp, #8
 8003530:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003534:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8003538:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTaskSSD1306 */
	Data_Structure_t _DataStructure;
	Data_Structure_t *PointerData =&_DataStructure;
 800353a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800353e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228



	BmeData_t _BmeData;
	BHData_t _BHData;
	INA219Data_t _INA219_Battery ={0};
 8003542:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003546:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800354a:	461a      	mov	r2, r3
 800354c:	2300      	movs	r3, #0
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	6053      	str	r3, [r2, #4]
	INA219Data_t _INA219_PV ={0};
 8003552:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003556:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800355a:	461a      	mov	r2, r3
 800355c:	2300      	movs	r3, #0
 800355e:	6013      	str	r3, [r2, #0]
 8003560:	6053      	str	r3, [r2, #4]

	RTC_TimeTypeDef _RTCTime2 = {0};
 8003562:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003566:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800356a:	461a      	mov	r2, r3
 800356c:	2300      	movs	r3, #0
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	6053      	str	r3, [r2, #4]
 8003572:	6093      	str	r3, [r2, #8]
 8003574:	60d3      	str	r3, [r2, #12]
 8003576:	6113      	str	r3, [r2, #16]
	 _RTCTime2.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003578:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800357c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003580:	2200      	movs	r2, #0
 8003582:	60da      	str	r2, [r3, #12]
	 	 _RTCTime2.StoreOperation = RTC_STOREOPERATION_RESET;
 8003584:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003588:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800358c:	2200      	movs	r2, #0
 800358e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef _RTCData2 = {0};
 8003590:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003594:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
	uint8_t _AlarmPeriod = 1;
 800359c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80035a0:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 80035a4:	2201      	movs	r2, #1
 80035a6:	701a      	strb	r2, [r3, #0]

	uint8_t _PumpDispensing = 1;
 80035a8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80035ac:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80035b0:	2201      	movs	r2, #1
 80035b2:	701a      	strb	r2, [r3, #0]
	uint32_t tick2;




	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 80035b4:	4b42      	ldr	r3, [pc, #264]	; (80036c0 <StartTaskSSD1306+0x198>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f04f 31ff 	mov.w	r1, #4294967295
 80035bc:	4618      	mov	r0, r3
 80035be:	f00c fa0d 	bl	800f9dc <osMutexAcquire>
	SSD1306_Init(&hi2c1);
 80035c2:	4840      	ldr	r0, [pc, #256]	; (80036c4 <StartTaskSSD1306+0x19c>)
 80035c4:	f7fe f9ca 	bl	800195c <SSD1306_Init>
	osMutexRelease(MutexI2C2Handle);
 80035c8:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <StartTaskSSD1306+0x198>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f00c fa50 	bl	800fa72 <osMutexRelease>

	GFX_SetFont(font_8x5);
 80035d2:	483d      	ldr	r0, [pc, #244]	; (80036c8 <StartTaskSSD1306+0x1a0>)
 80035d4:	f7fd fd64 	bl	80010a0 <GFX_SetFont>
	SSD1306_Clear(BLACK);
 80035d8:	2000      	movs	r0, #0
 80035da:	f7fe f961 	bl	80018a0 <SSD1306_Clear>
	SSD1306_Display();
 80035de:	f7fe f97d 	bl	80018dc <SSD1306_Display>

	osTimerStart(TimerSDCardHandle, 300000);
 80035e2:	4b3a      	ldr	r3, [pc, #232]	; (80036cc <StartTaskSSD1306+0x1a4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	493a      	ldr	r1, [pc, #232]	; (80036d0 <StartTaskSSD1306+0x1a8>)
 80035e8:	4618      	mov	r0, r3
 80035ea:	f00c f943 	bl	800f874 <osTimerStart>
	tick2 = osKernelGetTickCount();
 80035ee:	f00b fe8b 	bl	800f308 <osKernelGetTickCount>
 80035f2:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
  /* Infinite loop */
  for(;;)
  {
	  	  SSD1306_Clear(BLACK);
 80035f6:	2000      	movs	r0, #0
 80035f8:	f7fe f952 	bl	80018a0 <SSD1306_Clear>
	  	  osMessageQueueGet(QueueBmeHandle, &_BmeData, 0, 50);
 80035fc:	4b35      	ldr	r3, [pc, #212]	; (80036d4 <StartTaskSSD1306+0x1ac>)
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8003604:	2332      	movs	r3, #50	; 0x32
 8003606:	2200      	movs	r2, #0
 8003608:	f00c fc8a 	bl	800ff20 <osMessageQueueGet>
	  	  printf("1\n\r");
 800360c:	4832      	ldr	r0, [pc, #200]	; (80036d8 <StartTaskSSD1306+0x1b0>)
 800360e:	f002 fcf5 	bl	8005ffc <printf_>
	  	  osMessageQueueGet(QueueBh1750Handle, &_BHData, 0, 50);
 8003612:	4b32      	ldr	r3, [pc, #200]	; (80036dc <StartTaskSSD1306+0x1b4>)
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800361a:	2332      	movs	r3, #50	; 0x32
 800361c:	2200      	movs	r2, #0
 800361e:	f00c fc7f 	bl	800ff20 <osMessageQueueGet>
	  	  printf("2\n\r");
 8003622:	482f      	ldr	r0, [pc, #188]	; (80036e0 <StartTaskSSD1306+0x1b8>)
 8003624:	f002 fcea 	bl	8005ffc <printf_>
	  //	  osMessageQueueGet(QueueRTCDataHandle, &_RTCDate, 0,osWaitForever);


	  	  osMessageQueueGet(QuequeBatteryHandle, &_INA219_Battery, 0, 50);
 8003628:	4b2e      	ldr	r3, [pc, #184]	; (80036e4 <StartTaskSSD1306+0x1bc>)
 800362a:	6818      	ldr	r0, [r3, #0]
 800362c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003630:	2332      	movs	r3, #50	; 0x32
 8003632:	2200      	movs	r2, #0
 8003634:	f00c fc74 	bl	800ff20 <osMessageQueueGet>
	      printf("3\n\r");
 8003638:	482b      	ldr	r0, [pc, #172]	; (80036e8 <StartTaskSSD1306+0x1c0>)
 800363a:	f002 fcdf 	bl	8005ffc <printf_>
	      osMessageQueueGet(QueuePVHandle, &_INA219_PV, 0, 100);
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <StartTaskSSD1306+0x1c4>)
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003646:	2364      	movs	r3, #100	; 0x64
 8003648:	2200      	movs	r2, #0
 800364a:	f00c fc69 	bl	800ff20 <osMessageQueueGet>
	    	  	  printf("4\n\r");
 800364e:	4828      	ldr	r0, [pc, #160]	; (80036f0 <StartTaskSSD1306+0x1c8>)
 8003650:	f002 fcd4 	bl	8005ffc <printf_>
	  	  if (osOK == osMessageQueueGet(QueueRTCTimeHandle, &_RTCTime2, 0, 50))
 8003654:	4b27      	ldr	r3, [pc, #156]	; (80036f4 <StartTaskSSD1306+0x1cc>)
 8003656:	6818      	ldr	r0, [r3, #0]
 8003658:	f107 0114 	add.w	r1, r7, #20
 800365c:	2332      	movs	r3, #50	; 0x32
 800365e:	2200      	movs	r2, #0
 8003660:	f00c fc5e 	bl	800ff20 <osMessageQueueGet>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <StartTaskSSD1306+0x148>
	  	  {


	  		  printf("5\n\r");
 800366a:	4823      	ldr	r0, [pc, #140]	; (80036f8 <StartTaskSSD1306+0x1d0>)
 800366c:	f002 fcc6 	bl	8005ffc <printf_>
	  	  }

	  	  if(osOK == osMessageQueueGet(QueueRTCDataHandle, &_RTCData2, 0, 50))
 8003670:	4b22      	ldr	r3, [pc, #136]	; (80036fc <StartTaskSSD1306+0x1d4>)
 8003672:	6818      	ldr	r0, [r3, #0]
 8003674:	f107 0110 	add.w	r1, r7, #16
 8003678:	2332      	movs	r3, #50	; 0x32
 800367a:	2200      	movs	r2, #0
 800367c:	f00c fc50 	bl	800ff20 <osMessageQueueGet>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <StartTaskSSD1306+0x164>
	  	  {


	  		  printf("6\n\r");
 8003686:	481e      	ldr	r0, [pc, #120]	; (8003700 <StartTaskSSD1306+0x1d8>)
 8003688:	f002 fcb8 	bl	8005ffc <printf_>
	  	  }




	  	  if(osOK== osMessageQueueGet(QueueCounterPumpHandle, &_PumpDispensing, 0, 50))
 800368c:	4b1d      	ldr	r3, [pc, #116]	; (8003704 <StartTaskSSD1306+0x1dc>)
 800368e:	6818      	ldr	r0, [r3, #0]
 8003690:	f107 010e 	add.w	r1, r7, #14
 8003694:	2332      	movs	r3, #50	; 0x32
 8003696:	2200      	movs	r2, #0
 8003698:	f00c fc42 	bl	800ff20 <osMessageQueueGet>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d134      	bne.n	800370c <StartTaskSSD1306+0x1e4>
	  	  {

	  		  osMessageQueuePut(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <StartTaskSSD1306+0x1dc>)
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	f107 010e 	add.w	r1, r7, #14
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	2200      	movs	r2, #0
 80036b0:	f00c fbd6 	bl	800fe60 <osMessageQueuePut>
	  		  osSemaphoreRelease(BinarySemCounterHandle);
 80036b4:	4b14      	ldr	r3, [pc, #80]	; (8003708 <StartTaskSSD1306+0x1e0>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f00c fb19 	bl	800fcf0 <osSemaphoreRelease>
 80036be:	e03e      	b.n	800373e <StartTaskSSD1306+0x216>
 80036c0:	2000073c 	.word	0x2000073c
 80036c4:	20000768 	.word	0x20000768
 80036c8:	08018710 	.word	0x08018710
 80036cc:	20000720 	.word	0x20000720
 80036d0:	000493e0 	.word	0x000493e0
 80036d4:	200006e8 	.word	0x200006e8
 80036d8:	08018490 	.word	0x08018490
 80036dc:	200006ec 	.word	0x200006ec
 80036e0:	08018494 	.word	0x08018494
 80036e4:	20000704 	.word	0x20000704
 80036e8:	08018498 	.word	0x08018498
 80036ec:	20000710 	.word	0x20000710
 80036f0:	0801849c 	.word	0x0801849c
 80036f4:	200006f4 	.word	0x200006f4
 80036f8:	080184a0 	.word	0x080184a0
 80036fc:	200006f0 	.word	0x200006f0
 8003700:	080184a4 	.word	0x080184a4
 8003704:	200006f8 	.word	0x200006f8
 8003708:	20000750 	.word	0x20000750
	  	  }

	  	  else 	if(osOK== osMessageQueueGet(QueueCounterAlarmHandle, &_AlarmPeriod, 0, 50))
 800370c:	4bd8      	ldr	r3, [pc, #864]	; (8003a70 <StartTaskSSD1306+0x548>)
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	f107 010f 	add.w	r1, r7, #15
 8003714:	2332      	movs	r3, #50	; 0x32
 8003716:	2200      	movs	r2, #0
 8003718:	f00c fc02 	bl	800ff20 <osMessageQueueGet>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <StartTaskSSD1306+0x216>
	  	 {

	  		   osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 8003722:	4bd3      	ldr	r3, [pc, #844]	; (8003a70 <StartTaskSSD1306+0x548>)
 8003724:	6818      	ldr	r0, [r3, #0]
 8003726:	f107 010f 	add.w	r1, r7, #15
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	2200      	movs	r2, #0
 8003730:	f00c fb96 	bl	800fe60 <osMessageQueuePut>
	  		   osSemaphoreRelease(BinarySemSetAlarmHandle);
 8003734:	4bcf      	ldr	r3, [pc, #828]	; (8003a74 <StartTaskSSD1306+0x54c>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f00c fad9 	bl	800fcf0 <osSemaphoreRelease>

//	  	   osMessageQueueGet(QueueCounterAlarmHandle, &_AlarmPeriod, 0, 50);


//	  	   osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, osWaitForever);
	  	  sprintf(PointerData->MessageData, "Data: %02d.%02d.%02d;",_RTCData2.Date,_RTCData2.Month,_RTCData2.Year);
 800373e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003742:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8003746:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800374a:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800374e:	789b      	ldrb	r3, [r3, #2]
 8003750:	461a      	mov	r2, r3
 8003752:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003756:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 800375a:	785b      	ldrb	r3, [r3, #1]
 800375c:	4619      	mov	r1, r3
 800375e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003762:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8003766:	78db      	ldrb	r3, [r3, #3]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	460b      	mov	r3, r1
 800376c:	49c2      	ldr	r1, [pc, #776]	; (8003a78 <StartTaskSSD1306+0x550>)
 800376e:	f002 fc61 	bl	8006034 <sprintf_>
	      sprintf(PointerData->MessageTime, "%02d:%02d:%02d;",_RTCTime2.Hours,_RTCTime2.Minutes,_RTCTime2.Seconds);
 8003772:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003776:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800377a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800377e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800378a:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	4619      	mov	r1, r3
 8003792:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003796:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800379a:	789b      	ldrb	r3, [r3, #2]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	460b      	mov	r3, r1
 80037a0:	49b6      	ldr	r1, [pc, #728]	; (8003a7c <StartTaskSSD1306+0x554>)
 80037a2:	f002 fc47 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessageTemp, "T:%.2f C; ", _BmeData.Temperature);
 80037a6:	f8d7 4228 	ldr.w	r4, [r7, #552]	; 0x228
 80037aa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80037ae:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7fc fecf 	bl	8000558 <__aeabi_f2d>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	49b0      	ldr	r1, [pc, #704]	; (8003a80 <StartTaskSSD1306+0x558>)
 80037c0:	4620      	mov	r0, r4
 80037c2:	f002 fc37 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessageHum, "%.2f %;", _BmeData.Humidity);
 80037c6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80037ca:	f103 0420 	add.w	r4, r3, #32
 80037ce:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80037d2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7fc febd 	bl	8000558 <__aeabi_f2d>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	49a8      	ldr	r1, [pc, #672]	; (8003a84 <StartTaskSSD1306+0x55c>)
 80037e4:	4620      	mov	r0, r4
 80037e6:	f002 fc25 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessageInten, "%.2f lx;", _BHData.LightIntensity);
 80037ea:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80037ee:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80037f2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80037f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fc feab 	bl	8000558 <__aeabi_f2d>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	49a0      	ldr	r1, [pc, #640]	; (8003a88 <StartTaskSSD1306+0x560>)
 8003808:	4620      	mov	r0, r4
 800380a:	f002 fc13 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessageBatVoltageBus,"B:%u mV;", _INA219_Battery.VoltageBus);
 800380e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003812:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8003816:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800381a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	499a      	ldr	r1, [pc, #616]	; (8003a8c <StartTaskSSD1306+0x564>)
 8003824:	f002 fc06 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessageBatVoltageShunt,"B s:%u;",_INA219_Battery.VoltageShunt);
 8003828:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800382c:	f503 70b0 	add.w	r0, r3, #352	; 0x160
 8003830:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003834:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003838:	885b      	ldrh	r3, [r3, #2]
 800383a:	461a      	mov	r2, r3
 800383c:	4994      	ldr	r1, [pc, #592]	; (8003a90 <StartTaskSSD1306+0x568>)
 800383e:	f002 fbf9 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessageBatCurrent,"B:%d mA;",_INA219_Battery.Current);
 8003842:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003846:	f503 70c0 	add.w	r0, r3, #384	; 0x180
 800384a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800384e:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003852:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003856:	461a      	mov	r2, r3
 8003858:	498e      	ldr	r1, [pc, #568]	; (8003a94 <StartTaskSSD1306+0x56c>)
 800385a:	f002 fbeb 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessageBatPower,"B:%d mW;",_INA219_Battery.Power);
 800385e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003862:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8003866:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800386a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800386e:	889b      	ldrh	r3, [r3, #4]
 8003870:	461a      	mov	r2, r3
 8003872:	4989      	ldr	r1, [pc, #548]	; (8003a98 <StartTaskSSD1306+0x570>)
 8003874:	f002 fbde 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessagePvVoltageBus,"P:%umV;",_INA219_PV.VoltageBus);
 8003878:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800387c:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8003880:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003884:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4983      	ldr	r1, [pc, #524]	; (8003a9c <StartTaskSSD1306+0x574>)
 800388e:	f002 fbd1 	bl	8006034 <sprintf_>
	      sprintf(PointerData->MessagePVVoltageShunt,"PV Voltage shunt: %u;",_INA219_PV.VoltageShunt);
 8003892:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003896:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 800389a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800389e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80038a2:	885b      	ldrh	r3, [r3, #2]
 80038a4:	461a      	mov	r2, r3
 80038a6:	497e      	ldr	r1, [pc, #504]	; (8003aa0 <StartTaskSSD1306+0x578>)
 80038a8:	f002 fbc4 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessagePVCurrent,"P:%d mA;",_INA219_PV.Current);
 80038ac:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80038b0:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80038b4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80038b8:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80038bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80038c0:	461a      	mov	r2, r3
 80038c2:	4978      	ldr	r1, [pc, #480]	; (8003aa4 <StartTaskSSD1306+0x57c>)
 80038c4:	f002 fbb6 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessagePVPower,"P:%u mW;",_INA219_PV.Power);
 80038c8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80038cc:	f503 7090 	add.w	r0, r3, #288	; 0x120
 80038d0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80038d4:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80038d8:	889b      	ldrh	r3, [r3, #4]
 80038da:	461a      	mov	r2, r3
 80038dc:	4972      	ldr	r1, [pc, #456]	; (8003aa8 <StartTaskSSD1306+0x580>)
 80038de:	f002 fba9 	bl	8006034 <sprintf_>
	  	  //  sprintf(MessageData, "Data: %02d.%02d.20%02d  Time: %02d:%02d:%02d:%02d",_RTCDate.Date,_RTCDate.Month,_RTCDate.Year,_RTCTime.Hours,_RTCTime.Minutes,_RTCTime.Seconds);


	  	  sprintf(PointerData->MessageTimePump, "Pump:%02dMin;",_PumpDispensing);
 80038e2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80038e6:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 80038ea:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80038ee:	f2a3 2322 	subw	r3, r3, #546	; 0x222
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	496d      	ldr	r1, [pc, #436]	; (8003aac <StartTaskSSD1306+0x584>)
 80038f8:	f002 fb9c 	bl	8006034 <sprintf_>
	  	  sprintf(PointerData->MessageFreqAlarm, "Alarm:%02dH;", _AlarmPeriod);
 80038fc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003900:	f503 70e0 	add.w	r0, r3, #448	; 0x1c0
 8003904:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003908:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	4967      	ldr	r1, [pc, #412]	; (8003ab0 <StartTaskSSD1306+0x588>)
 8003912:	f002 fb8f 	bl	8006034 <sprintf_>

	  	if (osOK == osSemaphoreAcquire(BinarySdCardHandle, 0)) {
 8003916:	4b67      	ldr	r3, [pc, #412]	; (8003ab4 <StartTaskSSD1306+0x58c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2100      	movs	r1, #0
 800391c:	4618      	mov	r0, r3
 800391e:	f00c f995 	bl	800fc4c <osSemaphoreAcquire>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <StartTaskSSD1306+0x410>
	  		  	  			osMessageQueuePut(QueSDCARDHandle,PointerData, 0, 50);
 8003928:	4b63      	ldr	r3, [pc, #396]	; (8003ab8 <StartTaskSSD1306+0x590>)
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	2332      	movs	r3, #50	; 0x32
 800392e:	2200      	movs	r2, #0
 8003930:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 8003934:	f00c fa94 	bl	800fe60 <osMessageQueuePut>
	  		  	  		}




	  	  GFX_DrawString(0, 0, PointerData->MessageTime, WHITE, 0);
 8003938:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800393c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8003940:	2300      	movs	r3, #0
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2301      	movs	r3, #1
 8003946:	2100      	movs	r1, #0
 8003948:	2000      	movs	r0, #0
 800394a:	f7fd fc73 	bl	8001234 <GFX_DrawString>
	  	  GFX_DrawString(70,0, PointerData->MessageBatVoltageBus,WHITE,0);
 800394e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003952:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003956:	2300      	movs	r3, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2301      	movs	r3, #1
 800395c:	2100      	movs	r1, #0
 800395e:	2046      	movs	r0, #70	; 0x46
 8003960:	f7fd fc68 	bl	8001234 <GFX_DrawString>
	  	  GFX_DrawString(0, 10, PointerData->MessageTemp, WHITE, 0);
 8003964:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8003968:	2300      	movs	r3, #0
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	2301      	movs	r3, #1
 800396e:	210a      	movs	r1, #10
 8003970:	2000      	movs	r0, #0
 8003972:	f7fd fc5f 	bl	8001234 <GFX_DrawString>
	  	 GFX_DrawString(70,10, PointerData->MessageBatCurrent,WHITE,0);
 8003976:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 800397a:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 800397e:	2300      	movs	r3, #0
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2301      	movs	r3, #1
 8003984:	210a      	movs	r1, #10
 8003986:	2046      	movs	r0, #70	; 0x46
 8003988:	f7fd fc54 	bl	8001234 <GFX_DrawString>
	  	  GFX_DrawString(0, 20, PointerData->MessageHum, WHITE, 0);
 800398c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003990:	f103 0220 	add.w	r2, r3, #32
 8003994:	2300      	movs	r3, #0
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2301      	movs	r3, #1
 800399a:	2114      	movs	r1, #20
 800399c:	2000      	movs	r0, #0
 800399e:	f7fd fc49 	bl	8001234 <GFX_DrawString>
	  	GFX_DrawString(70,20, PointerData->MessageBatPower,WHITE,0);
 80039a2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80039a6:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 80039aa:	2300      	movs	r3, #0
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2301      	movs	r3, #1
 80039b0:	2114      	movs	r1, #20
 80039b2:	2046      	movs	r0, #70	; 0x46
 80039b4:	f7fd fc3e 	bl	8001234 <GFX_DrawString>
	  	  GFX_DrawString(0, 30, PointerData->MessageInten, WHITE, 0);
 80039b8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80039bc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80039c0:	2300      	movs	r3, #0
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2301      	movs	r3, #1
 80039c6:	211e      	movs	r1, #30
 80039c8:	2000      	movs	r0, #0
 80039ca:	f7fd fc33 	bl	8001234 <GFX_DrawString>
	  	 GFX_DrawString(70,30, PointerData->MessagePvVoltageBus,WHITE,0);
 80039ce:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80039d2:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 80039d6:	2300      	movs	r3, #0
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	2301      	movs	r3, #1
 80039dc:	211e      	movs	r1, #30
 80039de:	2046      	movs	r0, #70	; 0x46
 80039e0:	f7fd fc28 	bl	8001234 <GFX_DrawString>
	  	  GFX_DrawString(0, 40, PointerData->MessageTimePump, WHITE, 0);
 80039e4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80039e8:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 80039ec:	2300      	movs	r3, #0
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2301      	movs	r3, #1
 80039f2:	2128      	movs	r1, #40	; 0x28
 80039f4:	2000      	movs	r0, #0
 80039f6:	f7fd fc1d 	bl	8001234 <GFX_DrawString>
	  	GFX_DrawString(70,40, PointerData->MessagePVCurrent,WHITE,0);
 80039fa:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80039fe:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8003a02:	2300      	movs	r3, #0
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	2301      	movs	r3, #1
 8003a08:	2128      	movs	r1, #40	; 0x28
 8003a0a:	2046      	movs	r0, #70	; 0x46
 8003a0c:	f7fd fc12 	bl	8001234 <GFX_DrawString>
	  	  GFX_DrawString(0, 50, PointerData->MessageFreqAlarm, WHITE, 0);
 8003a10:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003a14:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	2132      	movs	r1, #50	; 0x32
 8003a20:	2000      	movs	r0, #0
 8003a22:	f7fd fc07 	bl	8001234 <GFX_DrawString>
	  	GFX_DrawString(70,50, PointerData->MessagePVPower,WHITE,0);
 8003a26:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8003a2a:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8003a2e:	2300      	movs	r3, #0
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	2301      	movs	r3, #1
 8003a34:	2132      	movs	r1, #50	; 0x32
 8003a36:	2046      	movs	r0, #70	; 0x46
 8003a38:	f7fd fbfc 	bl	8001234 <GFX_DrawString>

	  	  SSD1306_Display();
 8003a3c:	f7fd ff4e 	bl	80018dc <SSD1306_Display>

	  	  printf("TASK OLED \n\r");
 8003a40:	481e      	ldr	r0, [pc, #120]	; (8003abc <StartTaskSSD1306+0x594>)
 8003a42:	f002 fadb 	bl	8005ffc <printf_>

	  //		printf("TASK OLED I2C MUTEX is released \n\r");
	        tick2 += (600 * osKernelGetTickFreq()) / 1000;
 8003a46:	f00b fc74 	bl	800f332 <osKernelGetTickFreq>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <StartTaskSSD1306+0x598>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	099b      	lsrs	r3, r3, #6
 8003a5c:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8003a60:	4413      	add	r3, r2
 8003a62:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	  	  osDelayUntil(tick2);
 8003a66:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8003a6a:	f00b fe45 	bl	800f6f8 <osDelayUntil>
	  	  SSD1306_Clear(BLACK);
 8003a6e:	e5c2      	b.n	80035f6 <StartTaskSSD1306+0xce>
 8003a70:	200006fc 	.word	0x200006fc
 8003a74:	20000754 	.word	0x20000754
 8003a78:	080184a8 	.word	0x080184a8
 8003a7c:	080184c0 	.word	0x080184c0
 8003a80:	080184d0 	.word	0x080184d0
 8003a84:	080184dc 	.word	0x080184dc
 8003a88:	080184e4 	.word	0x080184e4
 8003a8c:	080184f0 	.word	0x080184f0
 8003a90:	080184fc 	.word	0x080184fc
 8003a94:	08018504 	.word	0x08018504
 8003a98:	08018510 	.word	0x08018510
 8003a9c:	0801851c 	.word	0x0801851c
 8003aa0:	08018524 	.word	0x08018524
 8003aa4:	0801853c 	.word	0x0801853c
 8003aa8:	08018548 	.word	0x08018548
 8003aac:	08018554 	.word	0x08018554
 8003ab0:	08018564 	.word	0x08018564
 8003ab4:	20000758 	.word	0x20000758
 8003ab8:	20000700 	.word	0x20000700
 8003abc:	08018574 	.word	0x08018574
 8003ac0:	10624dd3 	.word	0x10624dd3

08003ac4 <StartTaskPumpON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpON */
void StartTaskPumpON(void *argument)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPumpON */
	drv8835_init();
 8003acc:	f7fe ff80 	bl	80029d0 <drv8835_init>
  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f00b fd72 	bl	800f5c0 <osThreadFlagsWait>

	  drv8835_set_motorA_speed(99);
 8003adc:	2063      	movs	r0, #99	; 0x63
 8003ade:	f7fe ff5b 	bl	8002998 <drv8835_set_motorA_speed>
	  osThreadFlagsClear(0x00000001U);
 8003ae2:	2001      	movs	r0, #1
 8003ae4:	f00b fd2e 	bl	800f544 <osThreadFlagsClear>
	  osThreadFlagsWait(0x00000001U, osFlagsWaitAll, osWaitForever);
 8003ae8:	e7f2      	b.n	8003ad0 <StartTaskPumpON+0xc>

08003aea <StartTaskPumpOFF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpOFF */
void StartTaskPumpOFF(void *argument)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b082      	sub	sp, #8
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPumpOFF */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x00000010U, osFlagsWaitAll, osWaitForever);
 8003af2:	f04f 32ff 	mov.w	r2, #4294967295
 8003af6:	2101      	movs	r1, #1
 8003af8:	2010      	movs	r0, #16
 8003afa:	f00b fd61 	bl	800f5c0 <osThreadFlagsWait>


	  	  drv8835_set_motorA_speed(0);
 8003afe:	2000      	movs	r0, #0
 8003b00:	f7fe ff4a 	bl	8002998 <drv8835_set_motorA_speed>
	  osThreadFlagsWait(0x00000010U, osFlagsWaitAll, osWaitForever);
 8003b04:	e7f5      	b.n	8003af2 <StartTaskPumpOFF+0x8>
	...

08003b08 <StartTaskCounterPump>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCounterPump */
void StartTaskCounterPump(void *argument)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCounterPump */
	static uint8_t _PumpDipensing = 1;
	uint32_t tick = osKernelGetTickCount();
 8003b10:	f00b fbfa 	bl	800f308 <osKernelGetTickCount>
 8003b14:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 8003b16:	2101      	movs	r1, #1
 8003b18:	4823      	ldr	r0, [pc, #140]	; (8003ba8 <StartTaskCounterPump+0xa0>)
 8003b1a:	f003 fadf 	bl	80070dc <HAL_GPIO_ReadPin>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d114      	bne.n	8003b4e <StartTaskCounterPump+0x46>
	 	  {
	 	  	  _PumpDipensing= _PumpDipensing + 1;
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	4b1f      	ldr	r3, [pc, #124]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b2e:	701a      	strb	r2, [r3, #0]
	 	  		if(_PumpDipensing >=60)
 8003b30:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b3b      	cmp	r3, #59	; 0x3b
 8003b36:	d902      	bls.n	8003b3e <StartTaskCounterPump+0x36>
	 	  		{
	 	  			_PumpDipensing = 1;
 8003b38:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
	 	  		}
	 	  		osMessageQueuePut(QueueCounterPumpHandle, &_PumpDipensing , 0, 50);
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <StartTaskCounterPump+0xa8>)
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	2332      	movs	r3, #50	; 0x32
 8003b44:	2200      	movs	r2, #0
 8003b46:	4919      	ldr	r1, [pc, #100]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b48:	f00c f98a 	bl	800fe60 <osMessageQueuePut>
 8003b4c:	e01a      	b.n	8003b84 <StartTaskCounterPump+0x7c>
	 	  }
	 	  else if(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)== GPIO_PIN_RESET)
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4815      	ldr	r0, [pc, #84]	; (8003ba8 <StartTaskCounterPump+0xa0>)
 8003b52:	f003 fac3 	bl	80070dc <HAL_GPIO_ReadPin>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d113      	bne.n	8003b84 <StartTaskCounterPump+0x7c>
	 	  {
	 		  _PumpDipensing= _PumpDipensing -1;
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b66:	701a      	strb	r2, [r3, #0]
	 		 	  		if(_PumpDipensing <=0)
 8003b68:	4b10      	ldr	r3, [pc, #64]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <StartTaskCounterPump+0x6e>
	 		 	  		{
	 		 	  			_PumpDipensing = 59;
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b72:	223b      	movs	r2, #59	; 0x3b
 8003b74:	701a      	strb	r2, [r3, #0]
	 		 	  		}
	 		   osMessageQueuePut(QueueCounterPumpHandle, &_PumpDipensing , 0, 50);
 8003b76:	4b0e      	ldr	r3, [pc, #56]	; (8003bb0 <StartTaskCounterPump+0xa8>)
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	2332      	movs	r3, #50	; 0x32
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	490b      	ldr	r1, [pc, #44]	; (8003bac <StartTaskCounterPump+0xa4>)
 8003b80:	f00c f96e 	bl	800fe60 <osMessageQueuePut>
	 	  }

	 	  	  	tick += (220 * osKernelGetTickFreq()) / 1000;
 8003b84:	f00b fbd5 	bl	800f332 <osKernelGetTickFreq>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	22dc      	movs	r2, #220	; 0xdc
 8003b8c:	fb02 f303 	mul.w	r3, r2, r3
 8003b90:	4a08      	ldr	r2, [pc, #32]	; (8003bb4 <StartTaskCounterPump+0xac>)
 8003b92:	fba2 2303 	umull	r2, r3, r2, r3
 8003b96:	099b      	lsrs	r3, r3, #6
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
	 	  	  	osDelayUntil(tick);
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f00b fdaa 	bl	800f6f8 <osDelayUntil>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 8003ba4:	e7b7      	b.n	8003b16 <StartTaskCounterPump+0xe>
 8003ba6:	bf00      	nop
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	20000003 	.word	0x20000003
 8003bb0:	200006f8 	.word	0x200006f8
 8003bb4:	10624dd3 	.word	0x10624dd3

08003bb8 <StartTaskAlarmCounter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAlarmCounter */
void StartTaskAlarmCounter(void *argument)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAlarmCounter */
	static uint8_t _AlarmPeriod = 1;
	uint32_t tick = osKernelGetTickCount();
 8003bc0:	f00b fba2 	bl	800f308 <osKernelGetTickCount>
 8003bc4:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	  	  if(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)== GPIO_PIN_RESET)
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4823      	ldr	r0, [pc, #140]	; (8003c58 <StartTaskAlarmCounter+0xa0>)
 8003bca:	f003 fa87 	bl	80070dc <HAL_GPIO_ReadPin>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d114      	bne.n	8003bfe <StartTaskAlarmCounter+0x46>
	 	 	  {
	 	 	  	  _AlarmPeriod= _AlarmPeriod + 1;
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003bde:	701a      	strb	r2, [r3, #0]
	 	 	  		if(_AlarmPeriod >=16)
 8003be0:	4b1e      	ldr	r3, [pc, #120]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b0f      	cmp	r3, #15
 8003be6:	d902      	bls.n	8003bee <StartTaskAlarmCounter+0x36>
	 	 	  		{
	 	 	  			_AlarmPeriod = 1;
 8003be8:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
	 	 	  		}
	 	 	  		osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod , 0, 50);
 8003bee:	4b1c      	ldr	r3, [pc, #112]	; (8003c60 <StartTaskAlarmCounter+0xa8>)
 8003bf0:	6818      	ldr	r0, [r3, #0]
 8003bf2:	2332      	movs	r3, #50	; 0x32
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	4919      	ldr	r1, [pc, #100]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003bf8:	f00c f932 	bl	800fe60 <osMessageQueuePut>
 8003bfc:	e01a      	b.n	8003c34 <StartTaskAlarmCounter+0x7c>
	 	 	  }
	 	 	  else if(HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin)== GPIO_PIN_RESET)
 8003bfe:	2108      	movs	r1, #8
 8003c00:	4818      	ldr	r0, [pc, #96]	; (8003c64 <StartTaskAlarmCounter+0xac>)
 8003c02:	f003 fa6b 	bl	80070dc <HAL_GPIO_ReadPin>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d113      	bne.n	8003c34 <StartTaskAlarmCounter+0x7c>
	 	 	  {
	 	 		  _AlarmPeriod= _AlarmPeriod - 1;
 8003c0c:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003c16:	701a      	strb	r2, [r3, #0]
	 	 		 	  		if(_AlarmPeriod <=0)
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <StartTaskAlarmCounter+0x6e>
	 	 		 	  		{
	 	 		 	  			_AlarmPeriod = 16;
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003c22:	2210      	movs	r2, #16
 8003c24:	701a      	strb	r2, [r3, #0]
	 	 		 	  		}
	 	 		   osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod , 0, 50);
 8003c26:	4b0e      	ldr	r3, [pc, #56]	; (8003c60 <StartTaskAlarmCounter+0xa8>)
 8003c28:	6818      	ldr	r0, [r3, #0]
 8003c2a:	2332      	movs	r3, #50	; 0x32
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	490b      	ldr	r1, [pc, #44]	; (8003c5c <StartTaskAlarmCounter+0xa4>)
 8003c30:	f00c f916 	bl	800fe60 <osMessageQueuePut>
	 	 	  }

	 	 	  	  	tick += (200 * osKernelGetTickFreq()) / 1000;
 8003c34:	f00b fb7d 	bl	800f332 <osKernelGetTickFreq>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	22c8      	movs	r2, #200	; 0xc8
 8003c3c:	fb02 f303 	mul.w	r3, r2, r3
 8003c40:	4a09      	ldr	r2, [pc, #36]	; (8003c68 <StartTaskAlarmCounter+0xb0>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	099b      	lsrs	r3, r3, #6
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	60fb      	str	r3, [r7, #12]
	 	 	  	  	osDelayUntil(tick);
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f00b fd52 	bl	800f6f8 <osDelayUntil>
	  	  	  if(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)== GPIO_PIN_RESET)
 8003c54:	e7b7      	b.n	8003bc6 <StartTaskAlarmCounter+0xe>
 8003c56:	bf00      	nop
 8003c58:	40020400 	.word	0x40020400
 8003c5c:	20000004 	.word	0x20000004
 8003c60:	200006fc 	.word	0x200006fc
 8003c64:	40020800 	.word	0x40020800
 8003c68:	10624dd3 	.word	0x10624dd3

08003c6c <StartTaskSdCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSdCard */
void StartTaskSdCard(void *argument)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	f5ad 6ddb 	sub.w	sp, sp, #1752	; 0x6d8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8003c78:	f2a3 63d4 	subw	r3, r3, #1748	; 0x6d4
 8003c7c:	6018      	str	r0, [r3, #0]
	FIL SdCardFile;

	uint8_t bytes;
	char data[128];

	Data_Structure_t _Data_StructureGet = {0};
 8003c7e:	f507 63db 	add.w	r3, r7, #1752	; 0x6d8
 8003c82:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8003c86:	4618      	mov	r0, r3
 8003c88:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	2100      	movs	r1, #0
 8003c90:	f010 fde7 	bl	8014862 <memset>
	Data_Structure_t *PointerDataZ = &_Data_StructureGet;
 8003c94:	f107 0308 	add.w	r3, r7, #8
 8003c98:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0

	uint32_t tick = osKernelGetTickCount();
 8003c9c:	f00b fb34 	bl	800f308 <osKernelGetTickCount>
 8003ca0:	f8c7 06d4 	str.w	r0, [r7, #1748]	; 0x6d4
  for(;;)
  {



	  	  	 if (osOK == osMessageQueueGet(QueSDCARDHandle, PointerDataZ, 0, osWaitForever))
 8003ca4:	4b9f      	ldr	r3, [pc, #636]	; (8003f24 <StartTaskSdCard+0x2b8>)
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	; 0x6d0
 8003cb2:	f00c f935 	bl	800ff20 <osMessageQueueGet>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f040 811f 	bne.w	8003efc <StartTaskSdCard+0x290>
	  	  	 {


				  FatFsResult = f_mount(&SdFatFs, "", 1);
 8003cbe:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	4998      	ldr	r1, [pc, #608]	; (8003f28 <StartTaskSdCard+0x2bc>)
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f00a fad6 	bl	800e278 <f_mount>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	f887 36cf 	strb.w	r3, [r7, #1743]	; 0x6cf
				  if(FatFsResult != FR_OK)
 8003cd2:	f897 36cf 	ldrb.w	r3, [r7, #1743]	; 0x6cf
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d013      	beq.n	8003d02 <StartTaskSdCard+0x96>
				  {
					  bytes = sprintf(data, "FatFS mount error.\n\r");
 8003cda:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003cde:	4993      	ldr	r1, [pc, #588]	; (8003f2c <StartTaskSdCard+0x2c0>)
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f002 f9a7 	bl	8006034 <sprintf_>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f887 36ce 	strb.w	r3, [r7, #1742]	; 0x6ce
					  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8003cec:	f897 36ce 	ldrb.w	r3, [r7, #1742]	; 0x6ce
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cfa:	488d      	ldr	r0, [pc, #564]	; (8003f30 <StartTaskSdCard+0x2c4>)
 8003cfc:	f007 fc6b 	bl	800b5d6 <HAL_UART_Transmit>
 8003d00:	e0fc      	b.n	8003efc <StartTaskSdCard+0x290>
				  }

				  else
				  {
					  bytes = sprintf(data, "FatFS mounted.\n\r");
 8003d02:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d06:	498b      	ldr	r1, [pc, #556]	; (8003f34 <StartTaskSdCard+0x2c8>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f002 f993 	bl	8006034 <sprintf_>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f887 36ce 	strb.w	r3, [r7, #1742]	; 0x6ce
					  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8003d14:	f897 36ce 	ldrb.w	r3, [r7, #1742]	; 0x6ce
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d22:	4883      	ldr	r0, [pc, #524]	; (8003f30 <StartTaskSdCard+0x2c4>)
 8003d24:	f007 fc57 	bl	800b5d6 <HAL_UART_Transmit>

					  //
					  // Open file on SD for writing
					  //

					  FatFsResult = f_open(&SdCardFile, "badania4.csv", FA_WRITE|FA_OPEN_APPEND);
 8003d28:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003d2c:	2232      	movs	r2, #50	; 0x32
 8003d2e:	4982      	ldr	r1, [pc, #520]	; (8003f38 <StartTaskSdCard+0x2cc>)
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00a fb05 	bl	800e340 <f_open>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 36cf 	strb.w	r3, [r7, #1743]	; 0x6cf

					  //
					  // File open error check
					  //
					  if(FatFsResult != FR_OK)
 8003d3c:	f897 36cf 	ldrb.w	r3, [r7, #1743]	; 0x6cf
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <StartTaskSdCard+0x100>
					  {
						  bytes = sprintf(data, "No badaniam.csv file. Can't create.\n\r");
 8003d44:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d48:	497c      	ldr	r1, [pc, #496]	; (8003f3c <StartTaskSdCard+0x2d0>)
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f002 f972 	bl	8006034 <sprintf_>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 36ce 	strb.w	r3, [r7, #1742]	; 0x6ce
						  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8003d56:	f897 36ce 	ldrb.w	r3, [r7, #1742]	; 0x6ce
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d64:	4872      	ldr	r0, [pc, #456]	; (8003f30 <StartTaskSdCard+0x2c4>)
 8003d66:	f007 fc36 	bl	800b5d6 <HAL_UART_Transmit>
 8003d6a:	e0c7      	b.n	8003efc <StartTaskSdCard+0x290>


					  else
					  {

						  bytes = sprintf(data, "File opened.\n\r");
 8003d6c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003d70:	4973      	ldr	r1, [pc, #460]	; (8003f40 <StartTaskSdCard+0x2d4>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f002 f95e 	bl	8006034 <sprintf_>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 36ce 	strb.w	r3, [r7, #1742]	; 0x6ce
						  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8003d7e:	f897 36ce 	ldrb.w	r3, [r7, #1742]	; 0x6ce
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d8c:	4868      	ldr	r0, [pc, #416]	; (8003f30 <StartTaskSdCard+0x2c4>)
 8003d8e:	f007 fc22 	bl	800b5d6 <HAL_UART_Transmit>

						  //
						  //	Print something to this file
						  //
						  f_printf(&SdCardFile,PointerDataZ->MessageData);
 8003d92:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003d96:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8003d9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f00a ff65 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessageTime);
 8003da6:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003daa:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8003dae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003db2:	4611      	mov	r1, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f00a ff5b 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessageTemp);
 8003dba:	f8d7 26d0 	ldr.w	r2, [r7, #1744]	; 0x6d0
 8003dbe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f00a ff53 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessageHum);
 8003dca:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003dce:	f103 0220 	add.w	r2, r3, #32
 8003dd2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f00a ff49 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessageInten);
 8003dde:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003de2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003de6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f00a ff3f 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessageBatVoltageBus);
 8003df2:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003df6:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003dfa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003dfe:	4611      	mov	r1, r2
 8003e00:	4618      	mov	r0, r3
 8003e02:	f00a ff35 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessageBatVoltageShunt);
 8003e06:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003e0a:	f503 72b0 	add.w	r2, r3, #352	; 0x160
 8003e0e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f00a ff2b 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessageBatCurrent);
 8003e1a:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003e1e:	f503 72c0 	add.w	r2, r3, #384	; 0x180
 8003e22:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f00a ff21 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessageBatPower);
 8003e2e:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003e32:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8003e36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f00a ff17 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessagePvVoltageBus);
 8003e42:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003e46:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8003e4a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f00a ff0d 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessagePVVoltageShunt);
 8003e56:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003e5a:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8003e5e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f00a ff03 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessagePVCurrent);
 8003e6a:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003e6e:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8003e72:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003e76:	4611      	mov	r1, r2
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f00a fef9 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessagePVPower);
 8003e7e:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003e82:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8003e86:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f00a feef 	bl	800ec70 <f_printf>

						  f_printf(&SdCardFile,PointerDataZ->MessageTimePump);
 8003e92:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003e96:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8003e9a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f00a fee5 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,PointerDataZ->MessageFreqAlarm);
 8003ea6:	f8d7 36d0 	ldr.w	r3, [r7, #1744]	; 0x6d0
 8003eaa:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
 8003eae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f00a fedb 	bl	800ec70 <f_printf>
						  f_printf(&SdCardFile,"\n");
 8003eba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003ebe:	4921      	ldr	r1, [pc, #132]	; (8003f44 <StartTaskSdCard+0x2d8>)
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f00a fed5 	bl	800ec70 <f_printf>
			  //  		  }

						  //
						  // Close file
						  //
						  FatFsResult = f_close(&SdCardFile);
 8003ec6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f00a fe2a 	bl	800eb24 <f_close>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f887 36cf 	strb.w	r3, [r7, #1743]	; 0x6cf

						  bytes = sprintf(data, "File closed!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!.\n\r");
 8003ed6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003eda:	491b      	ldr	r1, [pc, #108]	; (8003f48 <StartTaskSdCard+0x2dc>)
 8003edc:	4618      	mov	r0, r3
 8003ede:	f002 f8a9 	bl	8006034 <sprintf_>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f887 36ce 	strb.w	r3, [r7, #1742]	; 0x6ce
						  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8003ee8:	f897 36ce 	ldrb.w	r3, [r7, #1742]	; 0x6ce
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8003ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef6:	480e      	ldr	r0, [pc, #56]	; (8003f30 <StartTaskSdCard+0x2c4>)
 8003ef8:	f007 fb6d 	bl	800b5d6 <HAL_UART_Transmit>

			  }



			tick += (150000 * osKernelGetTickFreq()) / 1000;
 8003efc:	f00b fa19 	bl	800f332 <osKernelGetTickFreq>
 8003f00:	4603      	mov	r3, r0
 8003f02:	4a12      	ldr	r2, [pc, #72]	; (8003f4c <StartTaskSdCard+0x2e0>)
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	4a11      	ldr	r2, [pc, #68]	; (8003f50 <StartTaskSdCard+0x2e4>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	f8d7 26d4 	ldr.w	r2, [r7, #1748]	; 0x6d4
 8003f14:	4413      	add	r3, r2
 8003f16:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
				  	 	 	  	  	osDelayUntil(tick);
 8003f1a:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 8003f1e:	f00b fbeb 	bl	800f6f8 <osDelayUntil>
	  	  	 if (osOK == osMessageQueueGet(QueSDCARDHandle, PointerDataZ, 0, osWaitForever))
 8003f22:	e6bf      	b.n	8003ca4 <StartTaskSdCard+0x38>
 8003f24:	20000700 	.word	0x20000700
 8003f28:	08018584 	.word	0x08018584
 8003f2c:	08018588 	.word	0x08018588
 8003f30:	200008c8 	.word	0x200008c8
 8003f34:	080185a0 	.word	0x080185a0
 8003f38:	080185b4 	.word	0x080185b4
 8003f3c:	080185c4 	.word	0x080185c4
 8003f40:	080185ec 	.word	0x080185ec
 8003f44:	080185fc 	.word	0x080185fc
 8003f48:	08018600 	.word	0x08018600
 8003f4c:	000249f0 	.word	0x000249f0
 8003f50:	10624dd3 	.word	0x10624dd3

08003f54 <StartTaskINA219>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskINA219 */
void StartTaskINA219(void *argument)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	; 0x28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskINA219 */

	INA219_t ina219_2;
	ina219_calibration ina219_calibration;
	ina219_calibration.ina219_calibrationValue = 4096;
 8003f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f60:	823b      	strh	r3, [r7, #16]
	ina219_calibration.ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8003f62:	230a      	movs	r3, #10
 8003f64:	827b      	strh	r3, [r7, #18]
	ina219_calibration.ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8003f66:	2302      	movs	r3, #2
 8003f68:	82bb      	strh	r3, [r7, #20]
//	ina219_calibration.ina219_calibrationValue = 8192;
//		ina219_calibration.ina219_currentDivider_mA = 20; // Current LSB = 100uA per bit (1000/100 = 10)
//		ina219_calibration.ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit (2/1)
	INA219Data_t _ina219;
	INA219Data_t *INA_219_pointer2 = &_ina219;
 8003f6a:	f107 0308 	add.w	r3, r7, #8
 8003f6e:	623b      	str	r3, [r7, #32]





	 osMutexAcquire(MutexI2CHandle, osWaitForever);
 8003f70:	4b44      	ldr	r3, [pc, #272]	; (8004084 <StartTaskINA219+0x130>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f04f 31ff 	mov.w	r1, #4294967295
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f00b fd2f 	bl	800f9dc <osMutexAcquire>
	 INA219_Init(&ina219_2, &hi2c1, INA219_ADDRESS_BAT,&ina219_calibration);
 8003f7e:	f107 0310 	add.w	r3, r7, #16
 8003f82:	f107 0018 	add.w	r0, r7, #24
 8003f86:	2240      	movs	r2, #64	; 0x40
 8003f88:	493f      	ldr	r1, [pc, #252]	; (8004088 <StartTaskINA219+0x134>)
 8003f8a:	f7fd fb97 	bl	80016bc <INA219_Init>
	 INA219_setCalibration_32V_2A(&ina219_2,&ina219_calibration);
 8003f8e:	f107 0210 	add.w	r2, r7, #16
 8003f92:	f107 0318 	add.w	r3, r7, #24
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7fd fb6e 	bl	800167a <INA219_setCalibration_32V_2A>

	 osMutexRelease(MutexI2CHandle);
 8003f9e:	4b39      	ldr	r3, [pc, #228]	; (8004084 <StartTaskINA219+0x130>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f00b fd65 	bl	800fa72 <osMutexRelease>
	osTimerStart(TimerINA219BatHandle, 450);
 8003fa8:	4b38      	ldr	r3, [pc, #224]	; (800408c <StartTaskINA219+0x138>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f00b fc5f 	bl	800f874 <osTimerStart>
	uint32_t tick = osKernelGetTickCount();
 8003fb6:	f00b f9a7 	bl	800f308 <osKernelGetTickCount>
 8003fba:	6278      	str	r0, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {


	  	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8003fbc:	4b31      	ldr	r3, [pc, #196]	; (8004084 <StartTaskINA219+0x130>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f00b fd09 	bl	800f9dc <osMutexAcquire>
	  	  printf("INA219 Mutex Acquire\n\r");
 8003fca:	4831      	ldr	r0, [pc, #196]	; (8004090 <StartTaskINA219+0x13c>)
 8003fcc:	f002 f816 	bl	8005ffc <printf_>
		  INA_219_pointer2->VoltageBus = INA219_ReadBusVoltage(&ina219_2);
 8003fd0:	f107 0318 	add.w	r3, r7, #24
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fd faa0 	bl	800151a <INA219_ReadBusVoltage>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	801a      	strh	r2, [r3, #0]
		  INA_219_pointer2->VoltageShunt = INA219_ReadShuntVolage(&ina219_2);
 8003fe2:	f107 0318 	add.w	r3, r7, #24
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fd faf2 	bl	80015d0 <INA219_ReadShuntVolage>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	805a      	strh	r2, [r3, #2]
		  INA_219_pointer2->Current =  INA219_ReadCurrent(&ina219_2);
 8003ff4:	f107 0318 	add.w	r3, r7, #24
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7fd fab1 	bl	8001560 <INA219_ReadCurrent>
 8003ffe:	eef0 7a40 	vmov.f32	s15, s0
 8004002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004006:	ee17 3a90 	vmov	r3, s15
 800400a:	b21a      	sxth	r2, r3
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	80da      	strh	r2, [r3, #6]
		  INA_219_pointer2->Power = INA219_ReadPower(&ina219_2, &ina219_calibration);
 8004010:	f107 0210 	add.w	r2, r7, #16
 8004014:	f107 0318 	add.w	r3, r7, #24
 8004018:	4611      	mov	r1, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f7fd fabe 	bl	800159c <INA219_ReadPower>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	809a      	strh	r2, [r3, #4]
		 //

//
		  osMutexRelease(MutexI2CHandle);
 8004028:	4b16      	ldr	r3, [pc, #88]	; (8004084 <StartTaskINA219+0x130>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4618      	mov	r0, r3
 800402e:	f00b fd20 	bl	800fa72 <osMutexRelease>
		  printf("INA219 Mutex Released\n\r");
 8004032:	4818      	ldr	r0, [pc, #96]	; (8004094 <StartTaskINA219+0x140>)
 8004034:	f001 ffe2 	bl	8005ffc <printf_>
//
		  if (osOK == osSemaphoreAcquire(BinarySemIna219BatHandle, 0)) {
 8004038:	4b17      	ldr	r3, [pc, #92]	; (8004098 <StartTaskINA219+0x144>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f00b fe04 	bl	800fc4c <osSemaphoreAcquire>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d107      	bne.n	800405a <StartTaskINA219+0x106>
		  	 	  			osMessageQueuePut(QuequeBatteryHandle, INA_219_pointer2, 0, osWaitForever);
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <StartTaskINA219+0x148>)
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	f04f 33ff 	mov.w	r3, #4294967295
 8004052:	2200      	movs	r2, #0
 8004054:	6a39      	ldr	r1, [r7, #32]
 8004056:	f00b ff03 	bl	800fe60 <osMessageQueuePut>
		  	 	  		}
		  printf("INA219 exit \n\r");
 800405a:	4811      	ldr	r0, [pc, #68]	; (80040a0 <StartTaskINA219+0x14c>)
 800405c:	f001 ffce 	bl	8005ffc <printf_>
//


	  tick+=(365*osKernelGetTickFreq())/1000;
 8004060:	f00b f967 	bl	800f332 <osKernelGetTickFreq>
 8004064:	4603      	mov	r3, r0
 8004066:	f240 126d 	movw	r2, #365	; 0x16d
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	4a0d      	ldr	r2, [pc, #52]	; (80040a4 <StartTaskINA219+0x150>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004078:	4413      	add	r3, r2
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
	  osDelayUntil(tick);
 800407c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800407e:	f00b fb3b 	bl	800f6f8 <osDelayUntil>
	  	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8004082:	e79b      	b.n	8003fbc <StartTaskINA219+0x68>
 8004084:	20000730 	.word	0x20000730
 8004088:	20000768 	.word	0x20000768
 800408c:	20000728 	.word	0x20000728
 8004090:	08018634 	.word	0x08018634
 8004094:	0801864c 	.word	0x0801864c
 8004098:	20000764 	.word	0x20000764
 800409c:	20000704 	.word	0x20000704
 80040a0:	08018664 	.word	0x08018664
 80040a4:	10624dd3 	.word	0x10624dd3

080040a8 <StartTaskINA219PV>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskINA219PV */
void StartTaskINA219PV(void *argument)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08a      	sub	sp, #40	; 0x28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskINA219PV */

	INA219_t ina219;
	ina219_calibration ina219_calibration2;
	ina219_calibration2.ina219_calibrationValue = 4096;
 80040b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040b4:	823b      	strh	r3, [r7, #16]
	ina219_calibration2.ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 80040b6:	230a      	movs	r3, #10
 80040b8:	827b      	strh	r3, [r7, #18]
	ina219_calibration2.ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 80040ba:	2302      	movs	r3, #2
 80040bc:	82bb      	strh	r3, [r7, #20]
//	ina219_calibration.ina219_calibrationValue = 8192;
//		ina219_calibration.ina219_currentDivider_mA = 20; // Current LSB = 100uA per bit (1000/100 = 10)
//		ina219_calibration.ina219_powerMultiplier_mW = 1.0f; // Power LSB = 1mW per bit (2/1)
	INA219Data_t _ina219_2;
	INA219Data_t *INA_219_pointer_2 = &_ina219_2;
 80040be:	f107 0308 	add.w	r3, r7, #8
 80040c2:	623b      	str	r3, [r7, #32]





	 osMutexAcquire(MutexI2CHandle, osWaitForever);
 80040c4:	4b45      	ldr	r3, [pc, #276]	; (80041dc <StartTaskINA219PV+0x134>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f04f 31ff 	mov.w	r1, #4294967295
 80040cc:	4618      	mov	r0, r3
 80040ce:	f00b fc85 	bl	800f9dc <osMutexAcquire>
	 INA219_Init(&ina219, &hi2c1, INA219_ADDRESS_PV,&ina219_calibration2);
 80040d2:	f107 0310 	add.w	r3, r7, #16
 80040d6:	f107 0018 	add.w	r0, r7, #24
 80040da:	2241      	movs	r2, #65	; 0x41
 80040dc:	4940      	ldr	r1, [pc, #256]	; (80041e0 <StartTaskINA219PV+0x138>)
 80040de:	f7fd faed 	bl	80016bc <INA219_Init>
	 INA219_setCalibration_32V_2A(&ina219,&ina219_calibration2);
 80040e2:	f107 0210 	add.w	r2, r7, #16
 80040e6:	f107 0318 	add.w	r3, r7, #24
 80040ea:	4611      	mov	r1, r2
 80040ec:	4618      	mov	r0, r3
 80040ee:	f7fd fac4 	bl	800167a <INA219_setCalibration_32V_2A>

	 osMutexRelease(MutexI2CHandle);
 80040f2:	4b3a      	ldr	r3, [pc, #232]	; (80041dc <StartTaskINA219PV+0x134>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f00b fcbb 	bl	800fa72 <osMutexRelease>
	osTimerStart(TimerINA219Handle, 425);
 80040fc:	4b39      	ldr	r3, [pc, #228]	; (80041e4 <StartTaskINA219PV+0x13c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f240 11a9 	movw	r1, #425	; 0x1a9
 8004104:	4618      	mov	r0, r3
 8004106:	f00b fbb5 	bl	800f874 <osTimerStart>
	uint32_t tick = osKernelGetTickCount();
 800410a:	f00b f8fd 	bl	800f308 <osKernelGetTickCount>
 800410e:	6278      	str	r0, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {

  	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8004110:	4b32      	ldr	r3, [pc, #200]	; (80041dc <StartTaskINA219PV+0x134>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f04f 31ff 	mov.w	r1, #4294967295
 8004118:	4618      	mov	r0, r3
 800411a:	f00b fc5f 	bl	800f9dc <osMutexAcquire>
  	  printf("INA219 Mutex Acquire\n\r");
 800411e:	4832      	ldr	r0, [pc, #200]	; (80041e8 <StartTaskINA219PV+0x140>)
 8004120:	f001 ff6c 	bl	8005ffc <printf_>
  	INA_219_pointer_2->VoltageBus = INA219_ReadBusVoltage(&ina219);
 8004124:	f107 0318 	add.w	r3, r7, #24
 8004128:	4618      	mov	r0, r3
 800412a:	f7fd f9f6 	bl	800151a <INA219_ReadBusVoltage>
 800412e:	4603      	mov	r3, r0
 8004130:	461a      	mov	r2, r3
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	801a      	strh	r2, [r3, #0]
  	INA_219_pointer_2->VoltageShunt = INA219_ReadShuntVolage(&ina219);
 8004136:	f107 0318 	add.w	r3, r7, #24
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fa48 	bl	80015d0 <INA219_ReadShuntVolage>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	805a      	strh	r2, [r3, #2]
  	INA_219_pointer_2->Current =  INA219_ReadCurrent(&ina219);
 8004148:	f107 0318 	add.w	r3, r7, #24
 800414c:	4618      	mov	r0, r3
 800414e:	f7fd fa07 	bl	8001560 <INA219_ReadCurrent>
 8004152:	eef0 7a40 	vmov.f32	s15, s0
 8004156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800415a:	ee17 3a90 	vmov	r3, s15
 800415e:	b21a      	sxth	r2, r3
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	80da      	strh	r2, [r3, #6]
  	INA_219_pointer_2->Power = INA219_ReadPower(&ina219, &ina219_calibration2);
 8004164:	f107 0210 	add.w	r2, r7, #16
 8004168:	f107 0318 	add.w	r3, r7, #24
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fa14 	bl	800159c <INA219_ReadPower>
 8004174:	4603      	mov	r3, r0
 8004176:	461a      	mov	r2, r3
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	809a      	strh	r2, [r3, #4]
	 //

//
	  osMutexRelease(MutexI2CHandle);
 800417c:	4b17      	ldr	r3, [pc, #92]	; (80041dc <StartTaskINA219PV+0x134>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f00b fc76 	bl	800fa72 <osMutexRelease>
	  printf("INA219 Mutex Released\n\r");
 8004186:	4819      	ldr	r0, [pc, #100]	; (80041ec <StartTaskINA219PV+0x144>)
 8004188:	f001 ff38 	bl	8005ffc <printf_>
//
	  if (osOK == osSemaphoreAcquire(BinarySemINA219Handle, 0)) {
 800418c:	4b18      	ldr	r3, [pc, #96]	; (80041f0 <StartTaskINA219PV+0x148>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2100      	movs	r1, #0
 8004192:	4618      	mov	r0, r3
 8004194:	f00b fd5a 	bl	800fc4c <osSemaphoreAcquire>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <StartTaskINA219PV+0x106>
	  	 	  			osMessageQueuePut(QueuePVHandle, INA_219_pointer_2, 0, osWaitForever);
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <StartTaskINA219PV+0x14c>)
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	f04f 33ff 	mov.w	r3, #4294967295
 80041a6:	2200      	movs	r2, #0
 80041a8:	6a39      	ldr	r1, [r7, #32]
 80041aa:	f00b fe59 	bl	800fe60 <osMessageQueuePut>
	  	 	  		}
	  printf("INA219 exit \n\r");
 80041ae:	4812      	ldr	r0, [pc, #72]	; (80041f8 <StartTaskINA219PV+0x150>)
 80041b0:	f001 ff24 	bl	8005ffc <printf_>
//

	  tick+=(325*osKernelGetTickFreq())/1000;
 80041b4:	f00b f8bd 	bl	800f332 <osKernelGetTickFreq>
 80041b8:	4602      	mov	r2, r0
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	019a      	lsls	r2, r3, #6
 80041c2:	4413      	add	r3, r2
 80041c4:	4a0d      	ldr	r2, [pc, #52]	; (80041fc <StartTaskINA219PV+0x154>)
 80041c6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ca:	099b      	lsrs	r3, r3, #6
 80041cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ce:	4413      	add	r3, r2
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
	  osDelayUntil(tick);
 80041d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041d4:	f00b fa90 	bl	800f6f8 <osDelayUntil>
  	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 80041d8:	e79a      	b.n	8004110 <StartTaskINA219PV+0x68>
 80041da:	bf00      	nop
 80041dc:	20000730 	.word	0x20000730
 80041e0:	20000768 	.word	0x20000768
 80041e4:	20000724 	.word	0x20000724
 80041e8:	08018634 	.word	0x08018634
 80041ec:	0801864c 	.word	0x0801864c
 80041f0:	2000075c 	.word	0x2000075c
 80041f4:	20000710 	.word	0x20000710
 80041f8:	08018664 	.word	0x08018664
 80041fc:	10624dd3 	.word	0x10624dd3

08004200 <StartTaskDS3231>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDS3231 */
void StartTaskDS3231(void *argument)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDS3231 */

			Ds3231_t _Ds3231;

			RTC_TimeTypeDef _RTCTime1 = {0};
 8004208:	f107 030c 	add.w	r3, r7, #12
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	611a      	str	r2, [r3, #16]
			RTC_DateTypeDef _RTCDate1 = {0};
 8004218:	2300      	movs	r3, #0
 800421a:	60bb      	str	r3, [r7, #8]



			DS3231_Init(&hi2c1);
 800421c:	482b      	ldr	r0, [pc, #172]	; (80042cc <StartTaskDS3231+0xcc>)
 800421e:	f7fe fbeb 	bl	80029f8 <DS3231_Init>


  /* Infinite loop */
  for(;;)
  {
	  	  	  osThreadFlagsWait(0x00000100U, osFlagsWaitAll, osWaitForever);
 8004222:	f04f 32ff 	mov.w	r2, #4294967295
 8004226:	2101      	movs	r1, #1
 8004228:	f44f 7080 	mov.w	r0, #256	; 0x100
 800422c:	f00b f9c8 	bl	800f5c0 <osThreadFlagsWait>

	 	  	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8004230:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <StartTaskDS3231+0xd0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f04f 31ff 	mov.w	r1, #4294967295
 8004238:	4618      	mov	r0, r3
 800423a:	f00b fbcf 	bl	800f9dc <osMutexAcquire>
	 	  	 _RTCDate1.Year = DS3231_GetYear() -2000;
 800423e:	f7fe fc28 	bl	8002a92 <DS3231_GetYear>
 8004242:	4603      	mov	r3, r0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	3330      	adds	r3, #48	; 0x30
 8004248:	b2db      	uxtb	r3, r3
 800424a:	72fb      	strb	r3, [r7, #11]
	 		 _RTCDate1.Month = DS3231_GetMonth();
 800424c:	f7fe fc12 	bl	8002a74 <DS3231_GetMonth>
 8004250:	4603      	mov	r3, r0
 8004252:	727b      	strb	r3, [r7, #9]
	 		 _RTCDate1.Date = DS3231_GetDate();
 8004254:	f7fe fc02 	bl	8002a5c <DS3231_GetDate>
 8004258:	4603      	mov	r3, r0
 800425a:	72bb      	strb	r3, [r7, #10]

	 	  	  _RTCTime1.Hours = DS3231_GetHour();
 800425c:	f7fe fc42 	bl	8002ae4 <DS3231_GetHour>
 8004260:	4603      	mov	r3, r0
 8004262:	733b      	strb	r3, [r7, #12]
	 	  	  _RTCTime1.Minutes = DS3231_GetMinute();
 8004264:	f7fe fc4a 	bl	8002afc <DS3231_GetMinute>
 8004268:	4603      	mov	r3, r0
 800426a:	737b      	strb	r3, [r7, #13]
	 	  	  _RTCTime1.Seconds =  DS3231_GetSecond();
 800426c:	f7fe fc52 	bl	8002b14 <DS3231_GetSecond>
 8004270:	4603      	mov	r3, r0
 8004272:	73bb      	strb	r3, [r7, #14]



	 		  osMutexRelease(MutexI2CHandle);
 8004274:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <StartTaskDS3231+0xd0>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f00b fbfa 	bl	800fa72 <osMutexRelease>


	 		  osMessageQueuePut(QueDs3231TimeHandle, &_RTCTime1, 0, osWaitForever);
 800427e:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <StartTaskDS3231+0xd4>)
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	f107 010c 	add.w	r1, r7, #12
 8004286:	f04f 33ff 	mov.w	r3, #4294967295
 800428a:	2200      	movs	r2, #0
 800428c:	f00b fde8 	bl	800fe60 <osMessageQueuePut>
	 		  osMessageQueuePut(QueueDs3231DateHandle, &_RTCDate1, 0, osWaitForever);
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <StartTaskDS3231+0xd8>)
 8004292:	6818      	ldr	r0, [r3, #0]
 8004294:	f107 0108 	add.w	r1, r7, #8
 8004298:	f04f 33ff 	mov.w	r3, #4294967295
 800429c:	2200      	movs	r2, #0
 800429e:	f00b fddf 	bl	800fe60 <osMessageQueuePut>

	 		  printf(" Date: %d: %d: %d\n\r", _RTCDate1.Year, _RTCDate1.Month, _RTCDate1.Date );
 80042a2:	7afb      	ldrb	r3, [r7, #11]
 80042a4:	4619      	mov	r1, r3
 80042a6:	7a7b      	ldrb	r3, [r7, #9]
 80042a8:	461a      	mov	r2, r3
 80042aa:	7abb      	ldrb	r3, [r7, #10]
 80042ac:	480b      	ldr	r0, [pc, #44]	; (80042dc <StartTaskDS3231+0xdc>)
 80042ae:	f001 fea5 	bl	8005ffc <printf_>
	 		  printf(" time: %d: %d: %d\n\r", _RTCTime1.Hours, _RTCTime1.Minutes, _RTCTime1.Seconds );
 80042b2:	7b3b      	ldrb	r3, [r7, #12]
 80042b4:	4619      	mov	r1, r3
 80042b6:	7b7b      	ldrb	r3, [r7, #13]
 80042b8:	461a      	mov	r2, r3
 80042ba:	7bbb      	ldrb	r3, [r7, #14]
 80042bc:	4808      	ldr	r0, [pc, #32]	; (80042e0 <StartTaskDS3231+0xe0>)
 80042be:	f001 fe9d 	bl	8005ffc <printf_>
	 //		  osThreadFlagsClear(0x00000100U);
	 		  osThreadFlagsClear(0x00000100U);
 80042c2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80042c6:	f00b f93d 	bl	800f544 <osThreadFlagsClear>
	  	  	  osThreadFlagsWait(0x00000100U, osFlagsWaitAll, osWaitForever);
 80042ca:	e7aa      	b.n	8004222 <StartTaskDS3231+0x22>
 80042cc:	20000768 	.word	0x20000768
 80042d0:	20000730 	.word	0x20000730
 80042d4:	20000708 	.word	0x20000708
 80042d8:	2000070c 	.word	0x2000070c
 80042dc:	08018674 	.word	0x08018674
 80042e0:	08018688 	.word	0x08018688

080042e4 <CallbackTimerBmeData>:
  /* USER CODE END StartTaskDS3231 */
}

/* CallbackTimerBmeData function */
void CallbackTimerBmeData(void *argument)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBmeData */
	osSemaphoreRelease(BinarySemBme280Handle);
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <CallbackTimerBmeData+0x1c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f00b fcfd 	bl	800fcf0 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerBmeData */
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000744 	.word	0x20000744

08004304 <CallbackTimerBh1750Data>:

/* CallbackTimerBh1750Data function */
void CallbackTimerBh1750Data(void *argument)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBh1750Data */
	osSemaphoreRelease(BinarySemBH1750Handle);
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <CallbackTimerBh1750Data+0x1c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f00b fced 	bl	800fcf0 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerBh1750Data */
}
 8004316:	bf00      	nop
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000748 	.word	0x20000748

08004324 <CallbackTimerRTC>:

/* CallbackTimerRTC function */
void CallbackTimerRTC(void *argument)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerRTC */
	osSemaphoreRelease(BinarySemRTCHandle);
 800432c:	4b04      	ldr	r3, [pc, #16]	; (8004340 <CallbackTimerRTC+0x1c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f00b fcdd 	bl	800fcf0 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerRTC */
}
 8004336:	bf00      	nop
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	2000074c 	.word	0x2000074c

08004344 <CallbackTimerSDCard>:

/* CallbackTimerSDCard function */
void CallbackTimerSDCard(void *argument)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerSDCard */
	osSemaphoreRelease(BinarySdCardHandle);
 800434c:	4b04      	ldr	r3, [pc, #16]	; (8004360 <CallbackTimerSDCard+0x1c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f00b fccd 	bl	800fcf0 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerSDCard */
}
 8004356:	bf00      	nop
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	20000758 	.word	0x20000758

08004364 <CallbackTimerINA219>:

/* CallbackTimerINA219 function */
void CallbackTimerINA219(void *argument)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerINA219 */
	osSemaphoreRelease(BinarySemINA219Handle);
 800436c:	4b04      	ldr	r3, [pc, #16]	; (8004380 <CallbackTimerINA219+0x1c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f00b fcbd 	bl	800fcf0 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerINA219 */
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	2000075c 	.word	0x2000075c

08004384 <CallbackTimerINA219Bat>:

/* CallbackTimerINA219Bat function */
void CallbackTimerINA219Bat(void *argument)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerINA219Bat */
	osSemaphoreRelease(BinarySemIna219BatHandle);
 800438c:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <CallbackTimerINA219Bat+0x1c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f00b fcad 	bl	800fcf0 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerINA219Bat */
}
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000764 	.word	0x20000764

080043a4 <_putchar>:
//		char *ParsePointer = strtok(NULL,",");
//	}
//}

void _putchar(char character)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4603      	mov	r3, r0
 80043ac:	71fb      	strb	r3, [r7, #7]
	// send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 80043ae:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <_putchar+0x38>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f04f 31ff 	mov.w	r1, #4294967295
 80043b6:	4618      	mov	r0, r3
 80043b8:	f00b fb10 	bl	800f9dc <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 80043bc:	1df9      	adds	r1, r7, #7
 80043be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043c2:	2201      	movs	r2, #1
 80043c4:	4806      	ldr	r0, [pc, #24]	; (80043e0 <_putchar+0x3c>)
 80043c6:	f007 f906 	bl	800b5d6 <HAL_UART_Transmit>

	osMutexRelease(MutexPrintfHandle);
 80043ca:	4b04      	ldr	r3, [pc, #16]	; (80043dc <_putchar+0x38>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f00b fb4f 	bl	800fa72 <osMutexRelease>
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	2000072c 	.word	0x2000072c
 80043e0:	200008c8 	.word	0x200008c8

080043e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08a      	sub	sp, #40	; 0x28
 80043e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	605a      	str	r2, [r3, #4]
 80043f4:	609a      	str	r2, [r3, #8]
 80043f6:	60da      	str	r2, [r3, #12]
 80043f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	4b3d      	ldr	r3, [pc, #244]	; (80044f4 <MX_GPIO_Init+0x110>)
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	4a3c      	ldr	r2, [pc, #240]	; (80044f4 <MX_GPIO_Init+0x110>)
 8004404:	f043 0304 	orr.w	r3, r3, #4
 8004408:	6313      	str	r3, [r2, #48]	; 0x30
 800440a:	4b3a      	ldr	r3, [pc, #232]	; (80044f4 <MX_GPIO_Init+0x110>)
 800440c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	613b      	str	r3, [r7, #16]
 8004414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	4b36      	ldr	r3, [pc, #216]	; (80044f4 <MX_GPIO_Init+0x110>)
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4a35      	ldr	r2, [pc, #212]	; (80044f4 <MX_GPIO_Init+0x110>)
 8004420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004424:	6313      	str	r3, [r2, #48]	; 0x30
 8004426:	4b33      	ldr	r3, [pc, #204]	; (80044f4 <MX_GPIO_Init+0x110>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	60fb      	str	r3, [r7, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]
 8004436:	4b2f      	ldr	r3, [pc, #188]	; (80044f4 <MX_GPIO_Init+0x110>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	4a2e      	ldr	r2, [pc, #184]	; (80044f4 <MX_GPIO_Init+0x110>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	6313      	str	r3, [r2, #48]	; 0x30
 8004442:	4b2c      	ldr	r3, [pc, #176]	; (80044f4 <MX_GPIO_Init+0x110>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	4b28      	ldr	r3, [pc, #160]	; (80044f4 <MX_GPIO_Init+0x110>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	4a27      	ldr	r2, [pc, #156]	; (80044f4 <MX_GPIO_Init+0x110>)
 8004458:	f043 0302 	orr.w	r3, r3, #2
 800445c:	6313      	str	r3, [r2, #48]	; 0x30
 800445e:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <MX_GPIO_Init+0x110>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MODE_Pin, GPIO_PIN_RESET);
 800446a:	2200      	movs	r2, #0
 800446c:	21a0      	movs	r1, #160	; 0xa0
 800446e:	4822      	ldr	r0, [pc, #136]	; (80044f8 <MX_GPIO_Init+0x114>)
 8004470:	f002 fe4c 	bl	800710c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|APHASE_Pin, GPIO_PIN_RESET);
 8004474:	2200      	movs	r2, #0
 8004476:	f44f 6188 	mov.w	r1, #1088	; 0x440
 800447a:	4820      	ldr	r0, [pc, #128]	; (80044fc <MX_GPIO_Init+0x118>)
 800447c:	f002 fe46 	bl	800710c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B4_Pin;
 8004480:	230b      	movs	r3, #11
 8004482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004484:	2300      	movs	r3, #0
 8004486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004488:	2301      	movs	r3, #1
 800448a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	4619      	mov	r1, r3
 8004492:	481b      	ldr	r0, [pc, #108]	; (8004500 <MX_GPIO_Init+0x11c>)
 8004494:	f002 fc9e 	bl	8006dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MODE_Pin;
 8004498:	23a0      	movs	r3, #160	; 0xa0
 800449a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800449c:	2301      	movs	r3, #1
 800449e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044a4:	2300      	movs	r3, #0
 80044a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a8:	f107 0314 	add.w	r3, r7, #20
 80044ac:	4619      	mov	r1, r3
 80044ae:	4812      	ldr	r0, [pc, #72]	; (80044f8 <MX_GPIO_Init+0x114>)
 80044b0:	f002 fc90 	bl	8006dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 80044b4:	2301      	movs	r3, #1
 80044b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044bc:	2301      	movs	r3, #1
 80044be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80044c0:	f107 0314 	add.w	r3, r7, #20
 80044c4:	4619      	mov	r1, r3
 80044c6:	480d      	ldr	r0, [pc, #52]	; (80044fc <MX_GPIO_Init+0x118>)
 80044c8:	f002 fc84 	bl	8006dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|APHASE_Pin;
 80044cc:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80044d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	4619      	mov	r1, r3
 80044e4:	4805      	ldr	r0, [pc, #20]	; (80044fc <MX_GPIO_Init+0x118>)
 80044e6:	f002 fc75 	bl	8006dd4 <HAL_GPIO_Init>

}
 80044ea:	bf00      	nop
 80044ec:	3728      	adds	r7, #40	; 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40023800 	.word	0x40023800
 80044f8:	40020000 	.word	0x40020000
 80044fc:	40020400 	.word	0x40020400
 8004500:	40020800 	.word	0x40020800

08004504 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004508:	4b12      	ldr	r3, [pc, #72]	; (8004554 <MX_I2C1_Init+0x50>)
 800450a:	4a13      	ldr	r2, [pc, #76]	; (8004558 <MX_I2C1_Init+0x54>)
 800450c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800450e:	4b11      	ldr	r3, [pc, #68]	; (8004554 <MX_I2C1_Init+0x50>)
 8004510:	4a12      	ldr	r2, [pc, #72]	; (800455c <MX_I2C1_Init+0x58>)
 8004512:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <MX_I2C1_Init+0x50>)
 8004516:	2200      	movs	r2, #0
 8004518:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800451a:	4b0e      	ldr	r3, [pc, #56]	; (8004554 <MX_I2C1_Init+0x50>)
 800451c:	2200      	movs	r2, #0
 800451e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004520:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <MX_I2C1_Init+0x50>)
 8004522:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004526:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <MX_I2C1_Init+0x50>)
 800452a:	2200      	movs	r2, #0
 800452c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800452e:	4b09      	ldr	r3, [pc, #36]	; (8004554 <MX_I2C1_Init+0x50>)
 8004530:	2200      	movs	r2, #0
 8004532:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004534:	4b07      	ldr	r3, [pc, #28]	; (8004554 <MX_I2C1_Init+0x50>)
 8004536:	2200      	movs	r2, #0
 8004538:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800453a:	4b06      	ldr	r3, [pc, #24]	; (8004554 <MX_I2C1_Init+0x50>)
 800453c:	2200      	movs	r2, #0
 800453e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004540:	4804      	ldr	r0, [pc, #16]	; (8004554 <MX_I2C1_Init+0x50>)
 8004542:	f002 fdfd 	bl	8007140 <HAL_I2C_Init>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800454c:	f000 f8ea 	bl	8004724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004550:	bf00      	nop
 8004552:	bd80      	pop	{r7, pc}
 8004554:	20000768 	.word	0x20000768
 8004558:	40005400 	.word	0x40005400
 800455c:	00061a80 	.word	0x00061a80

08004560 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b08a      	sub	sp, #40	; 0x28
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004568:	f107 0314 	add.w	r3, r7, #20
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	605a      	str	r2, [r3, #4]
 8004572:	609a      	str	r2, [r3, #8]
 8004574:	60da      	str	r2, [r3, #12]
 8004576:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a19      	ldr	r2, [pc, #100]	; (80045e4 <HAL_I2C_MspInit+0x84>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d12c      	bne.n	80045dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	4b18      	ldr	r3, [pc, #96]	; (80045e8 <HAL_I2C_MspInit+0x88>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	4a17      	ldr	r2, [pc, #92]	; (80045e8 <HAL_I2C_MspInit+0x88>)
 800458c:	f043 0302 	orr.w	r3, r3, #2
 8004590:	6313      	str	r3, [r2, #48]	; 0x30
 8004592:	4b15      	ldr	r3, [pc, #84]	; (80045e8 <HAL_I2C_MspInit+0x88>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800459e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045a4:	2312      	movs	r3, #18
 80045a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045ac:	2303      	movs	r3, #3
 80045ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80045b0:	2304      	movs	r3, #4
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	4619      	mov	r1, r3
 80045ba:	480c      	ldr	r0, [pc, #48]	; (80045ec <HAL_I2C_MspInit+0x8c>)
 80045bc:	f002 fc0a 	bl	8006dd4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <HAL_I2C_MspInit+0x88>)
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	4a07      	ldr	r2, [pc, #28]	; (80045e8 <HAL_I2C_MspInit+0x88>)
 80045ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045ce:	6413      	str	r3, [r2, #64]	; 0x40
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_I2C_MspInit+0x88>)
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80045dc:	bf00      	nop
 80045de:	3728      	adds	r7, #40	; 0x28
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40005400 	.word	0x40005400
 80045e8:	40023800 	.word	0x40023800
 80045ec:	40020400 	.word	0x40020400

080045f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045f4:	f002 f946 	bl	8006884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045f8:	f000 f818 	bl	800462c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045fc:	f7ff fef2 	bl	80043e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8004600:	f7fe f946 	bl	8002890 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004604:	f002 f8a2 	bl	800674c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8004608:	f7ff ff7c 	bl	8004504 <MX_I2C1_Init>
  MX_RTC_Init();
 800460c:	f001 fd2e 	bl	800606c <MX_RTC_Init>
  MX_TIM3_Init();
 8004610:	f001 ffca 	bl	80065a8 <MX_TIM3_Init>
  MX_SPI3_Init();
 8004614:	f001 fdb4 	bl	8006180 <MX_SPI3_Init>
  MX_FATFS_Init();
 8004618:	f007 fb52 	bl	800bcc0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800461c:	f00a fe2a 	bl	800f274 <osKernelInitialize>
  MX_FREERTOS_Init();
 8004620:	f7fe fa9e 	bl	8002b60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004624:	f00a fe4a 	bl	800f2bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004628:	e7fe      	b.n	8004628 <main+0x38>
	...

0800462c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b094      	sub	sp, #80	; 0x50
 8004630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004632:	f107 0320 	add.w	r3, r7, #32
 8004636:	2230      	movs	r2, #48	; 0x30
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f010 f911 	bl	8014862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	60da      	str	r2, [r3, #12]
 800464e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004650:	2300      	movs	r3, #0
 8004652:	60bb      	str	r3, [r7, #8]
 8004654:	4b28      	ldr	r3, [pc, #160]	; (80046f8 <SystemClock_Config+0xcc>)
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	4a27      	ldr	r2, [pc, #156]	; (80046f8 <SystemClock_Config+0xcc>)
 800465a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465e:	6413      	str	r3, [r2, #64]	; 0x40
 8004660:	4b25      	ldr	r3, [pc, #148]	; (80046f8 <SystemClock_Config+0xcc>)
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800466c:	2300      	movs	r3, #0
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	4b22      	ldr	r3, [pc, #136]	; (80046fc <SystemClock_Config+0xd0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a21      	ldr	r2, [pc, #132]	; (80046fc <SystemClock_Config+0xd0>)
 8004676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <SystemClock_Config+0xd0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8004688:	2306      	movs	r3, #6
 800468a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800468c:	2301      	movs	r3, #1
 800468e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004690:	2301      	movs	r3, #1
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004694:	2310      	movs	r3, #16
 8004696:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004698:	2302      	movs	r3, #2
 800469a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800469c:	2300      	movs	r3, #0
 800469e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80046a0:	2308      	movs	r3, #8
 80046a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80046a4:	2354      	movs	r3, #84	; 0x54
 80046a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046a8:	2302      	movs	r3, #2
 80046aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80046ac:	2304      	movs	r3, #4
 80046ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046b0:	f107 0320 	add.w	r3, r7, #32
 80046b4:	4618      	mov	r0, r3
 80046b6:	f004 faa5 	bl	8008c04 <HAL_RCC_OscConfig>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80046c0:	f000 f830 	bl	8004724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046c4:	230f      	movs	r3, #15
 80046c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046c8:	2302      	movs	r3, #2
 80046ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80046d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046d6:	2300      	movs	r3, #0
 80046d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80046da:	f107 030c 	add.w	r3, r7, #12
 80046de:	2101      	movs	r1, #1
 80046e0:	4618      	mov	r0, r3
 80046e2:	f004 fd07 	bl	80090f4 <HAL_RCC_ClockConfig>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80046ec:	f000 f81a 	bl	8004724 <Error_Handler>
  }
}
 80046f0:	bf00      	nop
 80046f2:	3750      	adds	r7, #80	; 0x50
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40023800 	.word	0x40023800
 80046fc:	40007000 	.word	0x40007000

08004700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a04      	ldr	r2, [pc, #16]	; (8004720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d101      	bne.n	8004716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004712:	f002 f8d9 	bl	80068c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40014400 	.word	0x40014400

08004724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004728:	b672      	cpsid	i
}
 800472a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800472c:	e7fe      	b.n	800472c <Error_Handler+0x8>

0800472e <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800472e:	b480      	push	{r7}
 8004730:	b085      	sub	sp, #20
 8004732:	af00      	add	r7, sp, #0
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	603b      	str	r3, [r7, #0]
 800473a:	4603      	mov	r3, r0
 800473c:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d204      	bcs.n	8004750 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4413      	add	r3, r2
 800474c:	7bfa      	ldrb	r2, [r7, #15]
 800474e:	701a      	strb	r2, [r3, #0]
  }
}
 8004750:	bf00      	nop
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	60b9      	str	r1, [r7, #8]
 8004764:	607a      	str	r2, [r7, #4]
 8004766:	603b      	str	r3, [r7, #0]
 8004768:	4603      	mov	r3, r0
 800476a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	4603      	mov	r3, r0
 8004786:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <_out_char+0x1e>
    _putchar(character);
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff fe07 	bl	80043a4 <_putchar>
  }
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e002      	b.n	80047b4 <_strnlen_s+0x16>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3301      	adds	r3, #1
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <_strnlen_s+0x28>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1e5a      	subs	r2, r3, #1
 80047c0:	603a      	str	r2, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f3      	bne.n	80047ae <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	1ad3      	subs	r3, r2, r3
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	2b2f      	cmp	r3, #47	; 0x2f
 80047e6:	d904      	bls.n	80047f2 <_is_digit+0x1a>
 80047e8:	79fb      	ldrb	r3, [r7, #7]
 80047ea:	2b39      	cmp	r3, #57	; 0x39
 80047ec:	d801      	bhi.n	80047f2 <_is_digit+0x1a>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <_is_digit+0x1c>
 80047f2:	2300      	movs	r3, #0
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	b2db      	uxtb	r3, r3
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004812:	e00e      	b.n	8004832 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4618      	mov	r0, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	1c59      	adds	r1, r3, #1
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	6011      	str	r1, [r2, #0]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	4403      	add	r3, r0
 800482e:	3b30      	subs	r3, #48	; 0x30
 8004830:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff ffcd 	bl	80047d8 <_is_digit>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e7      	bne.n	8004814 <_atoi+0xe>
  }
  return i;
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800484e:	b590      	push	{r4, r7, lr}
 8004850:	b087      	sub	sp, #28
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d125      	bne.n	80048b6 <_out_rev+0x68>
 800486a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d120      	bne.n	80048b6 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	e00a      	b.n	8004890 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	1c53      	adds	r3, r2, #1
 800487e:	607b      	str	r3, [r7, #4]
 8004880:	68fc      	ldr	r4, [r7, #12]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	2020      	movs	r0, #32
 8004888:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	3301      	adds	r3, #1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	429a      	cmp	r2, r3
 8004896:	d3f0      	bcc.n	800487a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8004898:	e00d      	b.n	80048b6 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	3b01      	subs	r3, #1
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	4413      	add	r3, r2
 80048a6:	7818      	ldrb	r0, [r3, #0]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	1c53      	adds	r3, r2, #1
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	68fc      	ldr	r4, [r7, #12]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	47a0      	blx	r4
  while (len) {
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1ee      	bne.n	800489a <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80048bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00e      	beq.n	80048e4 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80048c6:	e007      	b.n	80048d8 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	1c53      	adds	r3, r2, #1
 80048cc:	607b      	str	r3, [r7, #4]
 80048ce:	68fc      	ldr	r4, [r7, #12]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	2020      	movs	r0, #32
 80048d6:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d8f1      	bhi.n	80048c8 <_out_rev+0x7a>
    }
  }

  return idx;
 80048e4:	687b      	ldr	r3, [r7, #4]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd90      	pop	{r4, r7, pc}

080048ee <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b088      	sub	sp, #32
 80048f2:	af04      	add	r7, sp, #16
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	607a      	str	r2, [r7, #4]
 80048fa:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d136      	bne.n	8004974 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d018      	beq.n	800493e <_ntoa_format+0x50>
 800490c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d013      	beq.n	800493e <_ntoa_format+0x50>
 8004916:	f897 3020 	ldrb.w	r3, [r7, #32]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <_ntoa_format+0x3a>
 800491e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <_ntoa_format+0x50>
      width--;
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	3b01      	subs	r3, #1
 800492c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800492e:	e006      	b.n	800493e <_ntoa_format+0x50>
      buf[len++] = '0';
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	1c5a      	adds	r2, r3, #1
 8004934:	61fa      	str	r2, [r7, #28]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4413      	add	r3, r2
 800493a:	2230      	movs	r2, #48	; 0x30
 800493c:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800493e:	69fa      	ldr	r2, [r7, #28]
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	429a      	cmp	r2, r3
 8004944:	d20a      	bcs.n	800495c <_ntoa_format+0x6e>
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	2b1f      	cmp	r3, #31
 800494a:	d9f1      	bls.n	8004930 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800494c:	e006      	b.n	800495c <_ntoa_format+0x6e>
      buf[len++] = '0';
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	61fa      	str	r2, [r7, #28]
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4413      	add	r3, r2
 8004958:	2230      	movs	r2, #48	; 0x30
 800495a:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <_ntoa_format+0x86>
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	429a      	cmp	r2, r3
 800496c:	d202      	bcs.n	8004974 <_ntoa_format+0x86>
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	2b1f      	cmp	r3, #31
 8004972:	d9ec      	bls.n	800494e <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	f003 0310 	and.w	r3, r3, #16
 800497a:	2b00      	cmp	r3, #0
 800497c:	d058      	beq.n	8004a30 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d116      	bne.n	80049b6 <_ntoa_format+0xc8>
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <_ntoa_format+0xc8>
 800498e:	69fa      	ldr	r2, [r7, #28]
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	429a      	cmp	r2, r3
 8004994:	d003      	beq.n	800499e <_ntoa_format+0xb0>
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	429a      	cmp	r2, r3
 800499c:	d10b      	bne.n	80049b6 <_ntoa_format+0xc8>
      len--;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3b01      	subs	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <_ntoa_format+0xc8>
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d102      	bne.n	80049b6 <_ntoa_format+0xc8>
        len--;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d10f      	bne.n	80049dc <_ntoa_format+0xee>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049be:	f003 0320 	and.w	r3, r3, #32
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10a      	bne.n	80049dc <_ntoa_format+0xee>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2b1f      	cmp	r3, #31
 80049ca:	d807      	bhi.n	80049dc <_ntoa_format+0xee>
      buf[len++] = 'x';
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	61fa      	str	r2, [r7, #28]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4413      	add	r3, r2
 80049d6:	2278      	movs	r2, #120	; 0x78
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e01f      	b.n	8004a1c <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80049dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d10f      	bne.n	8004a02 <_ntoa_format+0x114>
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <_ntoa_format+0x114>
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b1f      	cmp	r3, #31
 80049f0:	d807      	bhi.n	8004a02 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	61fa      	str	r2, [r7, #28]
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	4413      	add	r3, r2
 80049fc:	2258      	movs	r2, #88	; 0x58
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	e00c      	b.n	8004a1c <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d109      	bne.n	8004a1c <_ntoa_format+0x12e>
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	2b1f      	cmp	r3, #31
 8004a0c:	d806      	bhi.n	8004a1c <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	61fa      	str	r2, [r7, #28]
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4413      	add	r3, r2
 8004a18:	2262      	movs	r2, #98	; 0x62
 8004a1a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	2b1f      	cmp	r3, #31
 8004a20:	d806      	bhi.n	8004a30 <_ntoa_format+0x142>
      buf[len++] = '0';
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	61fa      	str	r2, [r7, #28]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	2230      	movs	r2, #48	; 0x30
 8004a2e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b1f      	cmp	r3, #31
 8004a34:	d824      	bhi.n	8004a80 <_ntoa_format+0x192>
    if (negative) {
 8004a36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <_ntoa_format+0x160>
      buf[len++] = '-';
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	61fa      	str	r2, [r7, #28]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4413      	add	r3, r2
 8004a48:	222d      	movs	r2, #45	; 0x2d
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	e018      	b.n	8004a80 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	61fa      	str	r2, [r7, #28]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4413      	add	r3, r2
 8004a62:	222b      	movs	r2, #43	; 0x2b
 8004a64:	701a      	strb	r2, [r3, #0]
 8004a66:	e00b      	b.n	8004a80 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	1c5a      	adds	r2, r3, #1
 8004a76:	61fa      	str	r2, [r7, #28]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a82:	9303      	str	r3, [sp, #12]
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	9302      	str	r3, [sp, #8]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	9301      	str	r3, [sp, #4]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff fed9 	bl	800484e <_out_rev>
 8004a9c:	4603      	mov	r3, r0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b096      	sub	sp, #88	; 0x58
 8004aaa:	af08      	add	r7, sp, #32
 8004aac:	60f8      	str	r0, [r7, #12]
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d103      	bne.n	8004ac6 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac0:	f023 0310 	bic.w	r3, r3, #16
 8004ac4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <_ntoa_long+0x30>
 8004ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d032      	beq.n	8004b3c <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8004ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ada:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ade:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004ae0:	fb01 f202 	mul.w	r2, r1, r2
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004aea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004aee:	2b09      	cmp	r3, #9
 8004af0:	d804      	bhi.n	8004afc <_ntoa_long+0x56>
 8004af2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004af6:	3330      	adds	r3, #48	; 0x30
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	e00d      	b.n	8004b18 <_ntoa_long+0x72>
 8004afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <_ntoa_long+0x64>
 8004b06:	2241      	movs	r2, #65	; 0x41
 8004b08:	e000      	b.n	8004b0c <_ntoa_long+0x66>
 8004b0a:	2261      	movs	r2, #97	; 0x61
 8004b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b10:	4413      	add	r3, r2
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	3b0a      	subs	r3, #10
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	1c59      	adds	r1, r3, #1
 8004b1c:	6379      	str	r1, [r7, #52]	; 0x34
 8004b1e:	3338      	adds	r3, #56	; 0x38
 8004b20:	443b      	add	r3, r7
 8004b22:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <_ntoa_long+0x96>
 8004b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b38:	2b1f      	cmp	r3, #31
 8004b3a:	d9cc      	bls.n	8004ad6 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3e:	9306      	str	r3, [sp, #24]
 8004b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b42:	9305      	str	r3, [sp, #20]
 8004b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b46:	9304      	str	r3, [sp, #16]
 8004b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004b50:	9302      	str	r3, [sp, #8]
 8004b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	f107 0310 	add.w	r3, r7, #16
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f7ff fec3 	bl	80048ee <_ntoa_format>
 8004b68:	4603      	mov	r3, r0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3738      	adds	r7, #56	; 0x38
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b096      	sub	sp, #88	; 0x58
 8004b76:	af08      	add	r7, sp, #32
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004b84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8004b8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004b94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <_ntoa_long_long+0x34>
 8004b9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	d037      	beq.n	8004c16 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8004ba6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004baa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bae:	f7fc f8c3 	bl	8000d38 <__aeabi_uldivmod>
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004bb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bbc:	2b09      	cmp	r3, #9
 8004bbe:	d804      	bhi.n	8004bca <_ntoa_long_long+0x58>
 8004bc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bc4:	3330      	adds	r3, #48	; 0x30
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	e00d      	b.n	8004be6 <_ntoa_long_long+0x74>
 8004bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bcc:	f003 0320 	and.w	r3, r3, #32
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <_ntoa_long_long+0x66>
 8004bd4:	2241      	movs	r2, #65	; 0x41
 8004bd6:	e000      	b.n	8004bda <_ntoa_long_long+0x68>
 8004bd8:	2261      	movs	r2, #97	; 0x61
 8004bda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bde:	4413      	add	r3, r2
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	3b0a      	subs	r3, #10
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be8:	1c59      	adds	r1, r3, #1
 8004bea:	6379      	str	r1, [r7, #52]	; 0x34
 8004bec:	3338      	adds	r3, #56	; 0x38
 8004bee:	443b      	add	r3, r7
 8004bf0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004bf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bf8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004bfc:	f7fc f89c 	bl	8000d38 <__aeabi_uldivmod>
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004c08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	d002      	beq.n	8004c16 <_ntoa_long_long+0xa4>
 8004c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c12:	2b1f      	cmp	r3, #31
 8004c14:	d9c7      	bls.n	8004ba6 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c1a:	9206      	str	r2, [sp, #24]
 8004c1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c1e:	9205      	str	r2, [sp, #20]
 8004c20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c22:	9204      	str	r2, [sp, #16]
 8004c24:	9303      	str	r3, [sp, #12]
 8004c26:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004c2a:	9302      	str	r3, [sp, #8]
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	9301      	str	r3, [sp, #4]
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f7ff fe56 	bl	80048ee <_ntoa_format>
 8004c42:	4603      	mov	r3, r0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3738      	adds	r7, #56	; 0x38
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	0000      	movs	r0, r0
	...

08004c50 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004c50:	b590      	push	{r4, r7, lr}
 8004c52:	b09d      	sub	sp, #116	; 0x74
 8004c54:	af04      	add	r7, sp, #16
 8004c56:	6178      	str	r0, [r7, #20]
 8004c58:	6139      	str	r1, [r7, #16]
 8004c5a:	60fa      	str	r2, [r7, #12]
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8004c72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c7a:	f7fb ff2d 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d10f      	bne.n	8004ca4 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c86:	9303      	str	r3, [sp, #12]
 8004c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8a:	9302      	str	r3, [sp, #8]
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	9301      	str	r3, [sp, #4]
 8004c90:	4ba7      	ldr	r3, [pc, #668]	; (8004f30 <_ftoa+0x2e0>)
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	6939      	ldr	r1, [r7, #16]
 8004c9a:	6978      	ldr	r0, [r7, #20]
 8004c9c:	f7ff fdd7 	bl	800484e <_out_rev>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	e222      	b.n	80050ea <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8004ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ca8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cb0:	f7fb ff1c 	bl	8000aec <__aeabi_dcmplt>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00f      	beq.n	8004cda <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8004cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cbc:	9303      	str	r3, [sp, #12]
 8004cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc0:	9302      	str	r3, [sp, #8]
 8004cc2:	2304      	movs	r3, #4
 8004cc4:	9301      	str	r3, [sp, #4]
 8004cc6:	4b9b      	ldr	r3, [pc, #620]	; (8004f34 <_ftoa+0x2e4>)
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	6939      	ldr	r1, [r7, #16]
 8004cd0:	6978      	ldr	r0, [r7, #20]
 8004cd2:	f7ff fdbc 	bl	800484e <_out_rev>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	e207      	b.n	80050ea <_ftoa+0x49a>
  if (value > DBL_MAX)
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	4b96      	ldr	r3, [pc, #600]	; (8004f38 <_ftoa+0x2e8>)
 8004ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ce4:	f7fb ff20 	bl	8000b28 <__aeabi_dcmpgt>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d01d      	beq.n	8004d2a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8004cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <_ftoa+0xac>
 8004cf8:	4b90      	ldr	r3, [pc, #576]	; (8004f3c <_ftoa+0x2ec>)
 8004cfa:	e000      	b.n	8004cfe <_ftoa+0xae>
 8004cfc:	4b90      	ldr	r3, [pc, #576]	; (8004f40 <_ftoa+0x2f0>)
 8004cfe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d00:	f002 0204 	and.w	r2, r2, #4
 8004d04:	2a00      	cmp	r2, #0
 8004d06:	d001      	beq.n	8004d0c <_ftoa+0xbc>
 8004d08:	2204      	movs	r2, #4
 8004d0a:	e000      	b.n	8004d0e <_ftoa+0xbe>
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004d10:	9103      	str	r1, [sp, #12]
 8004d12:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004d14:	9102      	str	r1, [sp, #8]
 8004d16:	9201      	str	r2, [sp, #4]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	6939      	ldr	r1, [r7, #16]
 8004d20:	6978      	ldr	r0, [r7, #20]
 8004d22:	f7ff fd94 	bl	800484e <_out_rev>
 8004d26:	4603      	mov	r3, r0
 8004d28:	e1df      	b.n	80050ea <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8004d2a:	a37d      	add	r3, pc, #500	; (adr r3, 8004f20 <_ftoa+0x2d0>)
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d34:	f7fb fef8 	bl	8000b28 <__aeabi_dcmpgt>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <_ftoa+0x102>
 8004d3e:	a37a      	add	r3, pc, #488	; (adr r3, 8004f28 <_ftoa+0x2d8>)
 8004d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d48:	f7fb fed0 	bl	8000aec <__aeabi_dcmplt>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00f      	beq.n	8004d72 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d54:	9302      	str	r3, [sp, #8]
 8004d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	ed97 0b00 	vldr	d0, [r7]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	6978      	ldr	r0, [r7, #20]
 8004d6a:	f000 f9c9 	bl	8005100 <_etoa>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	e1bb      	b.n	80050ea <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8004d72:	2300      	movs	r3, #0
 8004d74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d84:	f7fb feb2 	bl	8000aec <__aeabi_dcmplt>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <_ftoa+0x15c>
    negative = true;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8004d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d98:	f04f 0000 	mov.w	r0, #0
 8004d9c:	f04f 0100 	mov.w	r1, #0
 8004da0:	f7fb fa7a 	bl	8000298 <__aeabi_dsub>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8004dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004db6:	2306      	movs	r3, #6
 8004db8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004dba:	e00a      	b.n	8004dd2 <_ftoa+0x182>
    buf[len++] = '0';
 8004dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbe:	1c5a      	adds	r2, r3, #1
 8004dc0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004dc2:	3360      	adds	r3, #96	; 0x60
 8004dc4:	443b      	add	r3, r7
 8004dc6:	2230      	movs	r2, #48	; 0x30
 8004dc8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8004dcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd4:	2b1f      	cmp	r3, #31
 8004dd6:	d802      	bhi.n	8004dde <_ftoa+0x18e>
 8004dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004dda:	2b09      	cmp	r3, #9
 8004ddc:	d8ee      	bhi.n	8004dbc <_ftoa+0x16c>
  }

  int whole = (int)value;
 8004dde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004de2:	f7fb fec1 	bl	8000b68 <__aeabi_d2iz>
 8004de6:	4603      	mov	r3, r0
 8004de8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8004dea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004dec:	f7fb fba2 	bl	8000534 <__aeabi_i2d>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004df8:	f7fb fa4e 	bl	8000298 <__aeabi_dsub>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4610      	mov	r0, r2
 8004e02:	4619      	mov	r1, r3
 8004e04:	4a4f      	ldr	r2, [pc, #316]	; (8004f44 <_ftoa+0x2f4>)
 8004e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	f7fb fbfa 	bl	8000608 <__aeabi_dmul>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8004e1c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004e20:	f7fb feca 	bl	8000bb8 <__aeabi_d2uiz>
 8004e24:	4603      	mov	r3, r0
 8004e26:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8004e28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004e2a:	f7fb fb73 	bl	8000514 <__aeabi_ui2d>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004e36:	f7fb fa2f 	bl	8000298 <__aeabi_dsub>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	4b40      	ldr	r3, [pc, #256]	; (8004f48 <_ftoa+0x2f8>)
 8004e48:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004e4c:	f7fb fe6c 	bl	8000b28 <__aeabi_dcmpgt>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <_ftoa+0x234>
    ++frac;
 8004e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e58:	3301      	adds	r3, #1
 8004e5a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8004e5c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004e5e:	f7fb fb59 	bl	8000514 <__aeabi_ui2d>
 8004e62:	4a38      	ldr	r2, [pc, #224]	; (8004f44 <_ftoa+0x2f4>)
 8004e64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e66:	00db      	lsls	r3, r3, #3
 8004e68:	4413      	add	r3, r2
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fe51 	bl	8000b14 <__aeabi_dcmpge>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01a      	beq.n	8004eae <_ftoa+0x25e>
      frac = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8004e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7e:	3301      	adds	r3, #1
 8004e80:	657b      	str	r3, [r7, #84]	; 0x54
 8004e82:	e014      	b.n	8004eae <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	4b2f      	ldr	r3, [pc, #188]	; (8004f48 <_ftoa+0x2f8>)
 8004e8a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004e8e:	f7fb fe2d 	bl	8000aec <__aeabi_dcmplt>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d10a      	bne.n	8004eae <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d004      	beq.n	8004ea8 <_ftoa+0x258>
 8004e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ea0:	f003 0301 	and.w	r3, r3, #1
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eaa:	3301      	adds	r3, #1
 8004eac:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8004eae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d14b      	bne.n	8004f4c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8004eb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004eb6:	f7fb fb3d 	bl	8000534 <__aeabi_i2d>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ec2:	f7fb f9e9 	bl	8000298 <__aeabi_dsub>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8004ece:	2301      	movs	r3, #1
 8004ed0:	461c      	mov	r4, r3
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <_ftoa+0x2f8>)
 8004ed8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004edc:	f7fb fe06 	bl	8000aec <__aeabi_dcmplt>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <_ftoa+0x29a>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	461c      	mov	r4, r3
 8004eea:	b2e3      	uxtb	r3, r4
 8004eec:	f083 0301 	eor.w	r3, r3, #1
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <_ftoa+0x2ba>
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <_ftoa+0x2f8>)
 8004efc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004f00:	f7fb fe12 	bl	8000b28 <__aeabi_dcmpgt>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d064      	beq.n	8004fd4 <_ftoa+0x384>
 8004f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8081 	beq.w	8005018 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8004f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f18:	3301      	adds	r3, #1
 8004f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f1c:	e07c      	b.n	8005018 <_ftoa+0x3c8>
 8004f1e:	bf00      	nop
 8004f20:	00000000 	.word	0x00000000
 8004f24:	41cdcd65 	.word	0x41cdcd65
 8004f28:	00000000 	.word	0x00000000
 8004f2c:	c1cdcd65 	.word	0xc1cdcd65
 8004f30:	0801869c 	.word	0x0801869c
 8004f34:	080186a0 	.word	0x080186a0
 8004f38:	7fefffff 	.word	0x7fefffff
 8004f3c:	080186a8 	.word	0x080186a8
 8004f40:	080186b0 	.word	0x080186b0
 8004f44:	08018cf8 	.word	0x08018cf8
 8004f48:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8004f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004f50:	e01f      	b.n	8004f92 <_ftoa+0x342>
      --count;
 8004f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f54:	3b01      	subs	r3, #1
 8004f56:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8004f58:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f5a:	4b66      	ldr	r3, [pc, #408]	; (80050f4 <_ftoa+0x4a4>)
 8004f5c:	fba3 2301 	umull	r2, r3, r3, r1
 8004f60:	08da      	lsrs	r2, r3, #3
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	1aca      	subs	r2, r1, r3
 8004f6c:	b2d2      	uxtb	r2, r2
 8004f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f70:	1c59      	adds	r1, r3, #1
 8004f72:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004f74:	3230      	adds	r2, #48	; 0x30
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	3360      	adds	r3, #96	; 0x60
 8004f7a:	443b      	add	r3, r7
 8004f7c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8004f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f82:	4a5c      	ldr	r2, [pc, #368]	; (80050f4 <_ftoa+0x4a4>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	08db      	lsrs	r3, r3, #3
 8004f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004f92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f94:	2b1f      	cmp	r3, #31
 8004f96:	d9dc      	bls.n	8004f52 <_ftoa+0x302>
 8004f98:	e009      	b.n	8004fae <_ftoa+0x35e>
        break;
 8004f9a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004f9c:	e007      	b.n	8004fae <_ftoa+0x35e>
      buf[len++] = '0';
 8004f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa0:	1c5a      	adds	r2, r3, #1
 8004fa2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004fa4:	3360      	adds	r3, #96	; 0x60
 8004fa6:	443b      	add	r3, r7
 8004fa8:	2230      	movs	r2, #48	; 0x30
 8004faa:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fb0:	2b1f      	cmp	r3, #31
 8004fb2:	d804      	bhi.n	8004fbe <_ftoa+0x36e>
 8004fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb6:	1e5a      	subs	r2, r3, #1
 8004fb8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1ef      	bne.n	8004f9e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004fbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc0:	2b1f      	cmp	r3, #31
 8004fc2:	d829      	bhi.n	8005018 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8004fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004fca:	3360      	adds	r3, #96	; 0x60
 8004fcc:	443b      	add	r3, r7
 8004fce:	222e      	movs	r2, #46	; 0x2e
 8004fd0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004fd4:	e020      	b.n	8005018 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8004fd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004fd8:	4b47      	ldr	r3, [pc, #284]	; (80050f8 <_ftoa+0x4a8>)
 8004fda:	fb83 1302 	smull	r1, r3, r3, r2
 8004fde:	1099      	asrs	r1, r3, #2
 8004fe0:	17d3      	asrs	r3, r2, #31
 8004fe2:	1ac9      	subs	r1, r1, r3
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	1ad1      	subs	r1, r2, r3
 8004fee:	b2ca      	uxtb	r2, r1
 8004ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8004ff6:	3230      	adds	r2, #48	; 0x30
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	3360      	adds	r3, #96	; 0x60
 8004ffc:	443b      	add	r3, r7
 8004ffe:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8005002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005004:	4a3c      	ldr	r2, [pc, #240]	; (80050f8 <_ftoa+0x4a8>)
 8005006:	fb82 1203 	smull	r1, r2, r2, r3
 800500a:	1092      	asrs	r2, r2, #2
 800500c:	17db      	asrs	r3, r3, #31
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	657b      	str	r3, [r7, #84]	; 0x54
 8005012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501a:	2b1f      	cmp	r3, #31
 800501c:	d9db      	bls.n	8004fd6 <_ftoa+0x386>
 800501e:	e000      	b.n	8005022 <_ftoa+0x3d2>
      break;
 8005020:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8005022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d123      	bne.n	8005074 <_ftoa+0x424>
 800502c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d01e      	beq.n	8005074 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005036:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005038:	2b00      	cmp	r3, #0
 800503a:	d014      	beq.n	8005066 <_ftoa+0x416>
 800503c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005040:	2b00      	cmp	r3, #0
 8005042:	d104      	bne.n	800504e <_ftoa+0x3fe>
 8005044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005046:	f003 030c 	and.w	r3, r3, #12
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <_ftoa+0x416>
      width--;
 800504e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005050:	3b01      	subs	r3, #1
 8005052:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005054:	e007      	b.n	8005066 <_ftoa+0x416>
      buf[len++] = '0';
 8005056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005058:	1c5a      	adds	r2, r3, #1
 800505a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800505c:	3360      	adds	r3, #96	; 0x60
 800505e:	443b      	add	r3, r7
 8005060:	2230      	movs	r2, #48	; 0x30
 8005062:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005066:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800506a:	429a      	cmp	r2, r3
 800506c:	d202      	bcs.n	8005074 <_ftoa+0x424>
 800506e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005070:	2b1f      	cmp	r3, #31
 8005072:	d9f0      	bls.n	8005056 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005076:	2b1f      	cmp	r3, #31
 8005078:	d827      	bhi.n	80050ca <_ftoa+0x47a>
    if (negative) {
 800507a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <_ftoa+0x444>
      buf[len++] = '-';
 8005082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005084:	1c5a      	adds	r2, r3, #1
 8005086:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005088:	3360      	adds	r3, #96	; 0x60
 800508a:	443b      	add	r3, r7
 800508c:	222d      	movs	r2, #45	; 0x2d
 800508e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8005092:	e01a      	b.n	80050ca <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8005094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005096:	f003 0304 	and.w	r3, r3, #4
 800509a:	2b00      	cmp	r3, #0
 800509c:	d008      	beq.n	80050b0 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800509e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a0:	1c5a      	adds	r2, r3, #1
 80050a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050a4:	3360      	adds	r3, #96	; 0x60
 80050a6:	443b      	add	r3, r7
 80050a8:	222b      	movs	r2, #43	; 0x2b
 80050aa:	f803 2c48 	strb.w	r2, [r3, #-72]
 80050ae:	e00c      	b.n	80050ca <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 80050b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <_ftoa+0x47a>
      buf[len++] = ' ';
 80050ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050c0:	3360      	adds	r3, #96	; 0x60
 80050c2:	443b      	add	r3, r7
 80050c4:	2220      	movs	r2, #32
 80050c6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80050ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050cc:	9303      	str	r3, [sp, #12]
 80050ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050d0:	9302      	str	r3, [sp, #8]
 80050d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	f107 0318 	add.w	r3, r7, #24
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	6939      	ldr	r1, [r7, #16]
 80050e2:	6978      	ldr	r0, [r7, #20]
 80050e4:	f7ff fbb3 	bl	800484e <_out_rev>
 80050e8:	4603      	mov	r3, r0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3764      	adds	r7, #100	; 0x64
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd90      	pop	{r4, r7, pc}
 80050f2:	bf00      	nop
 80050f4:	cccccccd 	.word	0xcccccccd
 80050f8:	66666667 	.word	0x66666667
 80050fc:	00000000 	.word	0x00000000

08005100 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	b09f      	sub	sp, #124	; 0x7c
 8005106:	af06      	add	r7, sp, #24
 8005108:	6278      	str	r0, [r7, #36]	; 0x24
 800510a:	6239      	str	r1, [r7, #32]
 800510c:	61fa      	str	r2, [r7, #28]
 800510e:	61bb      	str	r3, [r7, #24]
 8005110:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8005114:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005118:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800511c:	f7fb fcdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d014      	beq.n	8005150 <_etoa+0x50>
 8005126:	f04f 32ff 	mov.w	r2, #4294967295
 800512a:	4bc1      	ldr	r3, [pc, #772]	; (8005430 <_etoa+0x330>)
 800512c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005130:	f7fb fcfa 	bl	8000b28 <__aeabi_dcmpgt>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <_etoa+0x50>
 800513a:	f04f 32ff 	mov.w	r2, #4294967295
 800513e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005142:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005146:	f7fb fcd1 	bl	8000aec <__aeabi_dcmplt>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d012      	beq.n	8005176 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005150:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005154:	9302      	str	r3, [sp, #8]
 8005156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800515a:	9301      	str	r3, [sp, #4]
 800515c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	ed97 0b04 	vldr	d0, [r7, #16]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	69fa      	ldr	r2, [r7, #28]
 800516a:	6a39      	ldr	r1, [r7, #32]
 800516c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800516e:	f7ff fd6f 	bl	8004c50 <_ftoa>
 8005172:	4603      	mov	r3, r0
 8005174:	e23f      	b.n	80055f6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8005176:	2301      	movs	r3, #1
 8005178:	461e      	mov	r6, r3
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005186:	f7fb fcb1 	bl	8000aec <__aeabi_dcmplt>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d101      	bne.n	8005194 <_etoa+0x94>
 8005190:	2300      	movs	r3, #0
 8005192:	461e      	mov	r6, r3
 8005194:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8005198:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800519c:	2b00      	cmp	r3, #0
 800519e:	d009      	beq.n	80051b4 <_etoa+0xb4>
    value = -value;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80051aa:	607b      	str	r3, [r7, #4]
 80051ac:	ed97 7b00 	vldr	d7, [r7]
 80051b0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80051b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80051c0:	2306      	movs	r3, #6
 80051c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80051c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051ca:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80051ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	0d0a      	lsrs	r2, r1, #20
 80051dc:	2300      	movs	r3, #0
 80051de:	4613      	mov	r3, r2
 80051e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051e4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80051e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80051ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051ee:	4690      	mov	r8, r2
 80051f0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 80051f4:	4644      	mov	r4, r8
 80051f6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 80051fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80051fe:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005202:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005204:	f7fb f996 	bl	8000534 <__aeabi_i2d>
 8005208:	a37d      	add	r3, pc, #500	; (adr r3, 8005400 <_etoa+0x300>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f7fb f9fb 	bl	8000608 <__aeabi_dmul>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4610      	mov	r0, r2
 8005218:	4619      	mov	r1, r3
 800521a:	a37b      	add	r3, pc, #492	; (adr r3, 8005408 <_etoa+0x308>)
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	f7fb f83c 	bl	800029c <__adddf3>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4614      	mov	r4, r2
 800522a:	461d      	mov	r5, r3
 800522c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005230:	f04f 0200 	mov.w	r2, #0
 8005234:	4b7f      	ldr	r3, [pc, #508]	; (8005434 <_etoa+0x334>)
 8005236:	f7fb f82f 	bl	8000298 <__aeabi_dsub>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	a373      	add	r3, pc, #460	; (adr r3, 8005410 <_etoa+0x310>)
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f7fb f9de 	bl	8000608 <__aeabi_dmul>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4620      	mov	r0, r4
 8005252:	4629      	mov	r1, r5
 8005254:	f7fb f822 	bl	800029c <__adddf3>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	f7fb fc82 	bl	8000b68 <__aeabi_d2iz>
 8005264:	4603      	mov	r3, r0
 8005266:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8005268:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800526a:	f7fb f963 	bl	8000534 <__aeabi_i2d>
 800526e:	a36a      	add	r3, pc, #424	; (adr r3, 8005418 <_etoa+0x318>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fb f9c8 	bl	8000608 <__aeabi_dmul>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4610      	mov	r0, r2
 800527e:	4619      	mov	r1, r3
 8005280:	f04f 0200 	mov.w	r2, #0
 8005284:	4b6c      	ldr	r3, [pc, #432]	; (8005438 <_etoa+0x338>)
 8005286:	f7fb f809 	bl	800029c <__adddf3>
 800528a:	4602      	mov	r2, r0
 800528c:	460b      	mov	r3, r1
 800528e:	4610      	mov	r0, r2
 8005290:	4619      	mov	r1, r3
 8005292:	f7fb fc69 	bl	8000b68 <__aeabi_d2iz>
 8005296:	4603      	mov	r3, r0
 8005298:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800529a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800529c:	f7fb f94a 	bl	8000534 <__aeabi_i2d>
 80052a0:	a35f      	add	r3, pc, #380	; (adr r3, 8005420 <_etoa+0x320>)
 80052a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a6:	f7fb f9af 	bl	8000608 <__aeabi_dmul>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4614      	mov	r4, r2
 80052b0:	461d      	mov	r5, r3
 80052b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80052b4:	f7fb f93e 	bl	8000534 <__aeabi_i2d>
 80052b8:	a35b      	add	r3, pc, #364	; (adr r3, 8005428 <_etoa+0x328>)
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	f7fb f9a3 	bl	8000608 <__aeabi_dmul>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4620      	mov	r0, r4
 80052c8:	4629      	mov	r1, r5
 80052ca:	f7fa ffe5 	bl	8000298 <__aeabi_dsub>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 80052d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80052de:	f7fb f993 	bl	8000608 <__aeabi_dmul>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80052ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ec:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80052f0:	17da      	asrs	r2, r3, #31
 80052f2:	469a      	mov	sl, r3
 80052f4:	4693      	mov	fp, r2
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	f04f 0300 	mov.w	r3, #0
 80052fe:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8005302:	2200      	movs	r2, #0
 8005304:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005308:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800530c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005310:	4602      	mov	r2, r0
 8005312:	460b      	mov	r3, r1
 8005314:	f7fa ffc2 	bl	800029c <__adddf3>
 8005318:	4602      	mov	r2, r0
 800531a:	460b      	mov	r3, r1
 800531c:	4690      	mov	r8, r2
 800531e:	4699      	mov	r9, r3
 8005320:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005324:	f04f 0000 	mov.w	r0, #0
 8005328:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800532c:	f7fa ffb4 	bl	8000298 <__aeabi_dsub>
 8005330:	4602      	mov	r2, r0
 8005332:	460b      	mov	r3, r1
 8005334:	4692      	mov	sl, r2
 8005336:	469b      	mov	fp, r3
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	4b3f      	ldr	r3, [pc, #252]	; (800543c <_etoa+0x33c>)
 800533e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005342:	f7fb fa8b 	bl	800085c <__aeabi_ddiv>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <_etoa+0x340>)
 8005354:	f7fa ffa2 	bl	800029c <__adddf3>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005360:	f7fb fa7c 	bl	800085c <__aeabi_ddiv>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4610      	mov	r0, r2
 800536a:	4619      	mov	r1, r3
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	4b34      	ldr	r3, [pc, #208]	; (8005444 <_etoa+0x344>)
 8005372:	f7fa ff93 	bl	800029c <__adddf3>
 8005376:	4602      	mov	r2, r0
 8005378:	460b      	mov	r3, r1
 800537a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800537e:	f7fb fa6d 	bl	800085c <__aeabi_ddiv>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4650      	mov	r0, sl
 8005388:	4659      	mov	r1, fp
 800538a:	f7fa ff87 	bl	800029c <__adddf3>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4640      	mov	r0, r8
 8005394:	4649      	mov	r1, r9
 8005396:	f7fb fa61 	bl	800085c <__aeabi_ddiv>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	f04f 0200 	mov.w	r2, #0
 80053a6:	4b28      	ldr	r3, [pc, #160]	; (8005448 <_etoa+0x348>)
 80053a8:	f7fa ff78 	bl	800029c <__adddf3>
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4620      	mov	r0, r4
 80053b2:	4629      	mov	r1, r5
 80053b4:	f7fb f928 	bl	8000608 <__aeabi_dmul>
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80053c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80053c8:	f7fb fb90 	bl	8000aec <__aeabi_dcmplt>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <_etoa+0x2ee>
    expval--;
 80053d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d4:	3b01      	subs	r3, #1
 80053d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 80053d8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	4b17      	ldr	r3, [pc, #92]	; (8005440 <_etoa+0x340>)
 80053e2:	f7fb fa3b 	bl	800085c <__aeabi_ddiv>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80053ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f0:	2b63      	cmp	r3, #99	; 0x63
 80053f2:	dc2b      	bgt.n	800544c <_etoa+0x34c>
 80053f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80053fa:	db27      	blt.n	800544c <_etoa+0x34c>
 80053fc:	2304      	movs	r3, #4
 80053fe:	e026      	b.n	800544e <_etoa+0x34e>
 8005400:	509f79fb 	.word	0x509f79fb
 8005404:	3fd34413 	.word	0x3fd34413
 8005408:	8b60c8b3 	.word	0x8b60c8b3
 800540c:	3fc68a28 	.word	0x3fc68a28
 8005410:	636f4361 	.word	0x636f4361
 8005414:	3fd287a7 	.word	0x3fd287a7
 8005418:	0979a371 	.word	0x0979a371
 800541c:	400a934f 	.word	0x400a934f
 8005420:	bbb55516 	.word	0xbbb55516
 8005424:	40026bb1 	.word	0x40026bb1
 8005428:	fefa39ef 	.word	0xfefa39ef
 800542c:	3fe62e42 	.word	0x3fe62e42
 8005430:	7fefffff 	.word	0x7fefffff
 8005434:	3ff80000 	.word	0x3ff80000
 8005438:	3fe00000 	.word	0x3fe00000
 800543c:	402c0000 	.word	0x402c0000
 8005440:	40240000 	.word	0x40240000
 8005444:	40180000 	.word	0x40180000
 8005448:	3ff00000 	.word	0x3ff00000
 800544c:	2305      	movs	r3, #5
 800544e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005454:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005458:	2b00      	cmp	r3, #0
 800545a:	d03d      	beq.n	80054d8 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800545c:	a368      	add	r3, pc, #416	; (adr r3, 8005600 <_etoa+0x500>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005466:	f7fb fb55 	bl	8000b14 <__aeabi_dcmpge>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d024      	beq.n	80054ba <_etoa+0x3ba>
 8005470:	a365      	add	r3, pc, #404	; (adr r3, 8005608 <_etoa+0x508>)
 8005472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005476:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800547a:	f7fb fb37 	bl	8000aec <__aeabi_dcmplt>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d01a      	beq.n	80054ba <_etoa+0x3ba>
      if ((int)prec > expval) {
 8005484:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005488:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800548a:	429a      	cmp	r2, r3
 800548c:	da07      	bge.n	800549e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800548e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005492:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	3b01      	subs	r3, #1
 8005498:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800549c:	e002      	b.n	80054a4 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80054a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80054b4:	2300      	movs	r3, #0
 80054b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054b8:	e00e      	b.n	80054d8 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80054ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <_etoa+0x3d8>
 80054c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <_etoa+0x3d8>
        --prec;
 80054ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d2:	3b01      	subs	r3, #1
 80054d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80054d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 80054de:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80054e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d904      	bls.n	80054f2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80054e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80054ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	657b      	str	r3, [r7, #84]	; 0x54
 80054f0:	e001      	b.n	80054f6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80054f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d004      	beq.n	800550c <_etoa+0x40c>
 8005502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800550c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d009      	beq.n	8005526 <_etoa+0x426>
    value /= conv.F;
 8005512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005516:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800551a:	f7fb f99f 	bl	800085c <__aeabi_ddiv>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800552a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <_etoa+0x440>
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800553c:	60fb      	str	r3, [r7, #12]
 800553e:	e003      	b.n	8005548 <_etoa+0x448>
 8005540:	ed97 7b04 	vldr	d7, [r7, #16]
 8005544:	ed87 7b02 	vstr	d7, [r7, #8]
 8005548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800554c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005550:	9302      	str	r3, [sp, #8]
 8005552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005554:	9301      	str	r3, [sp, #4]
 8005556:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800555a:	9300      	str	r3, [sp, #0]
 800555c:	ed97 0b02 	vldr	d0, [r7, #8]
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	6a39      	ldr	r1, [r7, #32]
 8005566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005568:	f7ff fb72 	bl	8004c50 <_ftoa>
 800556c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800556e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005570:	2b00      	cmp	r3, #0
 8005572:	d03f      	beq.n	80055f4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8005574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <_etoa+0x484>
 8005580:	2045      	movs	r0, #69	; 0x45
 8005582:	e000      	b.n	8005586 <_etoa+0x486>
 8005584:	2065      	movs	r0, #101	; 0x65
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	1c53      	adds	r3, r2, #1
 800558a:	61fb      	str	r3, [r7, #28]
 800558c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	6a39      	ldr	r1, [r7, #32]
 8005592:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005596:	2b00      	cmp	r3, #0
 8005598:	bfb8      	it	lt
 800559a:	425b      	neglt	r3, r3
 800559c:	4618      	mov	r0, r3
 800559e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a0:	0fdb      	lsrs	r3, r3, #31
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055a6:	3a01      	subs	r2, #1
 80055a8:	2105      	movs	r1, #5
 80055aa:	9105      	str	r1, [sp, #20]
 80055ac:	9204      	str	r2, [sp, #16]
 80055ae:	2200      	movs	r2, #0
 80055b0:	9203      	str	r2, [sp, #12]
 80055b2:	220a      	movs	r2, #10
 80055b4:	9202      	str	r2, [sp, #8]
 80055b6:	9301      	str	r3, [sp, #4]
 80055b8:	9000      	str	r0, [sp, #0]
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	69fa      	ldr	r2, [r7, #28]
 80055be:	6a39      	ldr	r1, [r7, #32]
 80055c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055c2:	f7ff fa70 	bl	8004aa6 <_ntoa_long>
 80055c6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80055c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00f      	beq.n	80055f4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80055d4:	e007      	b.n	80055e6 <_etoa+0x4e6>
 80055d6:	69fa      	ldr	r2, [r7, #28]
 80055d8:	1c53      	adds	r3, r2, #1
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	6a39      	ldr	r1, [r7, #32]
 80055e2:	2020      	movs	r0, #32
 80055e4:	47a0      	blx	r4
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d8f0      	bhi.n	80055d6 <_etoa+0x4d6>
    }
  }
  return idx;
 80055f4:	69fb      	ldr	r3, [r7, #28]
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3764      	adds	r7, #100	; 0x64
 80055fa:	46bd      	mov	sp, r7
 80055fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005600:	eb1c432d 	.word	0xeb1c432d
 8005604:	3f1a36e2 	.word	0x3f1a36e2
 8005608:	00000000 	.word	0x00000000
 800560c:	412e8480 	.word	0x412e8480

08005610 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	b0a3      	sub	sp, #140	; 0x8c
 8005616:	af0a      	add	r7, sp, #40	; 0x28
 8005618:	6178      	str	r0, [r7, #20]
 800561a:	6139      	str	r1, [r7, #16]
 800561c:	60fa      	str	r2, [r7, #12]
 800561e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 84cf 	bne.w	8005fca <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 800562c:	4ba8      	ldr	r3, [pc, #672]	; (80058d0 <_vsnprintf+0x2c0>)
 800562e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8005630:	f000 bccb 	b.w	8005fca <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b25      	cmp	r3, #37	; 0x25
 800563a:	d00d      	beq.n	8005658 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	7818      	ldrb	r0, [r3, #0]
 8005640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005642:	1c53      	adds	r3, r2, #1
 8005644:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005646:	697c      	ldr	r4, [r7, #20]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6939      	ldr	r1, [r7, #16]
 800564c:	47a0      	blx	r4
      format++;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3301      	adds	r3, #1
 8005652:	60bb      	str	r3, [r7, #8]
      continue;
 8005654:	f000 bcb9 	b.w	8005fca <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	3301      	adds	r3, #1
 800565c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800565e:	2300      	movs	r3, #0
 8005660:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	3b20      	subs	r3, #32
 8005668:	2b10      	cmp	r3, #16
 800566a:	d857      	bhi.n	800571c <_vsnprintf+0x10c>
 800566c:	a201      	add	r2, pc, #4	; (adr r2, 8005674 <_vsnprintf+0x64>)
 800566e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005672:	bf00      	nop
 8005674:	080056f5 	.word	0x080056f5
 8005678:	0800571d 	.word	0x0800571d
 800567c:	0800571d 	.word	0x0800571d
 8005680:	08005709 	.word	0x08005709
 8005684:	0800571d 	.word	0x0800571d
 8005688:	0800571d 	.word	0x0800571d
 800568c:	0800571d 	.word	0x0800571d
 8005690:	0800571d 	.word	0x0800571d
 8005694:	0800571d 	.word	0x0800571d
 8005698:	0800571d 	.word	0x0800571d
 800569c:	0800571d 	.word	0x0800571d
 80056a0:	080056e1 	.word	0x080056e1
 80056a4:	0800571d 	.word	0x0800571d
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	0800571d 	.word	0x0800571d
 80056b0:	0800571d 	.word	0x0800571d
 80056b4:	080056b9 	.word	0x080056b9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80056b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ba:	f043 0301 	orr.w	r3, r3, #1
 80056be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	3301      	adds	r3, #1
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	2301      	movs	r3, #1
 80056c8:	653b      	str	r3, [r7, #80]	; 0x50
 80056ca:	e02a      	b.n	8005722 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80056cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ce:	f043 0302 	orr.w	r3, r3, #2
 80056d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	3301      	adds	r3, #1
 80056d8:	60bb      	str	r3, [r7, #8]
 80056da:	2301      	movs	r3, #1
 80056dc:	653b      	str	r3, [r7, #80]	; 0x50
 80056de:	e020      	b.n	8005722 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80056e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3301      	adds	r3, #1
 80056ec:	60bb      	str	r3, [r7, #8]
 80056ee:	2301      	movs	r3, #1
 80056f0:	653b      	str	r3, [r7, #80]	; 0x50
 80056f2:	e016      	b.n	8005722 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80056f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f6:	f043 0308 	orr.w	r3, r3, #8
 80056fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	3301      	adds	r3, #1
 8005700:	60bb      	str	r3, [r7, #8]
 8005702:	2301      	movs	r3, #1
 8005704:	653b      	str	r3, [r7, #80]	; 0x50
 8005706:	e00c      	b.n	8005722 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570a:	f043 0310 	orr.w	r3, r3, #16
 800570e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	3301      	adds	r3, #1
 8005714:	60bb      	str	r3, [r7, #8]
 8005716:	2301      	movs	r3, #1
 8005718:	653b      	str	r3, [r7, #80]	; 0x50
 800571a:	e002      	b.n	8005722 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800571c:	2300      	movs	r3, #0
 800571e:	653b      	str	r3, [r7, #80]	; 0x50
 8005720:	bf00      	nop
      }
    } while (n);
 8005722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005724:	2b00      	cmp	r3, #0
 8005726:	d19c      	bne.n	8005662 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8005728:	2300      	movs	r3, #0
 800572a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff f851 	bl	80047d8 <_is_digit>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d006      	beq.n	800574a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800573c:	f107 0308 	add.w	r3, r7, #8
 8005740:	4618      	mov	r0, r3
 8005742:	f7ff f860 	bl	8004806 <_atoi>
 8005746:	65b8      	str	r0, [r7, #88]	; 0x58
 8005748:	e01a      	b.n	8005780 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b2a      	cmp	r3, #42	; 0x2a
 8005750:	d116      	bne.n	8005780 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8005752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005756:	1d1a      	adds	r2, r3, #4
 8005758:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	2b00      	cmp	r3, #0
 8005764:	da07      	bge.n	8005776 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8005766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005768:	f043 0302 	orr.w	r3, r3, #2
 800576c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800576e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005770:	425b      	negs	r3, r3
 8005772:	65bb      	str	r3, [r7, #88]	; 0x58
 8005774:	e001      	b.n	800577a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	3301      	adds	r3, #1
 800577e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b2e      	cmp	r3, #46	; 0x2e
 800578a:	d127      	bne.n	80057dc <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800578c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800578e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005792:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	3301      	adds	r3, #1
 8005798:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7ff f81a 	bl	80047d8 <_is_digit>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d006      	beq.n	80057b8 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80057aa:	f107 0308 	add.w	r3, r7, #8
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff f829 	bl	8004806 <_atoi>
 80057b4:	6578      	str	r0, [r7, #84]	; 0x54
 80057b6:	e011      	b.n	80057dc <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	2b2a      	cmp	r3, #42	; 0x2a
 80057be:	d10d      	bne.n	80057dc <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80057c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057c4:	1d1a      	adds	r2, r3, #4
 80057c6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80057d4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3301      	adds	r3, #1
 80057da:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	3b68      	subs	r3, #104	; 0x68
 80057e2:	2b12      	cmp	r3, #18
 80057e4:	d866      	bhi.n	80058b4 <_vsnprintf+0x2a4>
 80057e6:	a201      	add	r2, pc, #4	; (adr r2, 80057ec <_vsnprintf+0x1dc>)
 80057e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ec:	0800585f 	.word	0x0800585f
 80057f0:	080058b5 	.word	0x080058b5
 80057f4:	08005895 	.word	0x08005895
 80057f8:	080058b5 	.word	0x080058b5
 80057fc:	08005839 	.word	0x08005839
 8005800:	080058b5 	.word	0x080058b5
 8005804:	080058b5 	.word	0x080058b5
 8005808:	080058b5 	.word	0x080058b5
 800580c:	080058b5 	.word	0x080058b5
 8005810:	080058b5 	.word	0x080058b5
 8005814:	080058b5 	.word	0x080058b5
 8005818:	080058b5 	.word	0x080058b5
 800581c:	08005885 	.word	0x08005885
 8005820:	080058b5 	.word	0x080058b5
 8005824:	080058b5 	.word	0x080058b5
 8005828:	080058b5 	.word	0x080058b5
 800582c:	080058b5 	.word	0x080058b5
 8005830:	080058b5 	.word	0x080058b5
 8005834:	080058a5 	.word	0x080058a5
      case 'l' :
        flags |= FLAGS_LONG;
 8005838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800583a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	3301      	adds	r3, #1
 8005844:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b6c      	cmp	r3, #108	; 0x6c
 800584c:	d134      	bne.n	80058b8 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800584e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005854:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	3301      	adds	r3, #1
 800585a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800585c:	e02c      	b.n	80058b8 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800585e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005864:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	3301      	adds	r3, #1
 800586a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b68      	cmp	r3, #104	; 0x68
 8005872:	d123      	bne.n	80058bc <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8005874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800587a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	3301      	adds	r3, #1
 8005880:	60bb      	str	r3, [r7, #8]
        }
        break;
 8005882:	e01b      	b.n	80058bc <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	3301      	adds	r3, #1
 8005890:	60bb      	str	r3, [r7, #8]
        break;
 8005892:	e014      	b.n	80058be <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005896:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800589a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	3301      	adds	r3, #1
 80058a0:	60bb      	str	r3, [r7, #8]
        break;
 80058a2:	e00c      	b.n	80058be <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80058a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	3301      	adds	r3, #1
 80058b0:	60bb      	str	r3, [r7, #8]
        break;
 80058b2:	e004      	b.n	80058be <_vsnprintf+0x2ae>
      default :
        break;
 80058b4:	bf00      	nop
 80058b6:	e002      	b.n	80058be <_vsnprintf+0x2ae>
        break;
 80058b8:	bf00      	nop
 80058ba:	e000      	b.n	80058be <_vsnprintf+0x2ae>
        break;
 80058bc:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b67      	cmp	r3, #103	; 0x67
 80058c4:	f300 80b8 	bgt.w	8005a38 <_vsnprintf+0x428>
 80058c8:	2b25      	cmp	r3, #37	; 0x25
 80058ca:	da27      	bge.n	800591c <_vsnprintf+0x30c>
 80058cc:	e370      	b.n	8005fb0 <_vsnprintf+0x9a0>
 80058ce:	bf00      	nop
 80058d0:	0800475d 	.word	0x0800475d
 80058d4:	3b69      	subs	r3, #105	; 0x69
 80058d6:	2201      	movs	r2, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	f249 0241 	movw	r2, #36929	; 0x9041
 80058e0:	401a      	ands	r2, r3
 80058e2:	2a00      	cmp	r2, #0
 80058e4:	bf14      	ite	ne
 80058e6:	2201      	movne	r2, #1
 80058e8:	2200      	moveq	r2, #0
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	2a00      	cmp	r2, #0
 80058ee:	f040 80aa 	bne.w	8005a46 <_vsnprintf+0x436>
 80058f2:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	bf14      	ite	ne
 80058fa:	2201      	movne	r2, #1
 80058fc:	2200      	moveq	r2, #0
 80058fe:	b2d2      	uxtb	r2, r2
 8005900:	2a00      	cmp	r2, #0
 8005902:	f040 82fb 	bne.w	8005efc <_vsnprintf+0x8ec>
 8005906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800590a:	2b00      	cmp	r3, #0
 800590c:	bf14      	ite	ne
 800590e:	2301      	movne	r3, #1
 8005910:	2300      	moveq	r3, #0
 8005912:	b2db      	uxtb	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	f040 828d 	bne.w	8005e34 <_vsnprintf+0x824>
 800591a:	e349      	b.n	8005fb0 <_vsnprintf+0x9a0>
 800591c:	3b25      	subs	r3, #37	; 0x25
 800591e:	2b42      	cmp	r3, #66	; 0x42
 8005920:	f200 8346 	bhi.w	8005fb0 <_vsnprintf+0x9a0>
 8005924:	a201      	add	r2, pc, #4	; (adr r2, 800592c <_vsnprintf+0x31c>)
 8005926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592a:	bf00      	nop
 800592c:	08005f99 	.word	0x08005f99
 8005930:	08005fb1 	.word	0x08005fb1
 8005934:	08005fb1 	.word	0x08005fb1
 8005938:	08005fb1 	.word	0x08005fb1
 800593c:	08005fb1 	.word	0x08005fb1
 8005940:	08005fb1 	.word	0x08005fb1
 8005944:	08005fb1 	.word	0x08005fb1
 8005948:	08005fb1 	.word	0x08005fb1
 800594c:	08005fb1 	.word	0x08005fb1
 8005950:	08005fb1 	.word	0x08005fb1
 8005954:	08005fb1 	.word	0x08005fb1
 8005958:	08005fb1 	.word	0x08005fb1
 800595c:	08005fb1 	.word	0x08005fb1
 8005960:	08005fb1 	.word	0x08005fb1
 8005964:	08005fb1 	.word	0x08005fb1
 8005968:	08005fb1 	.word	0x08005fb1
 800596c:	08005fb1 	.word	0x08005fb1
 8005970:	08005fb1 	.word	0x08005fb1
 8005974:	08005fb1 	.word	0x08005fb1
 8005978:	08005fb1 	.word	0x08005fb1
 800597c:	08005fb1 	.word	0x08005fb1
 8005980:	08005fb1 	.word	0x08005fb1
 8005984:	08005fb1 	.word	0x08005fb1
 8005988:	08005fb1 	.word	0x08005fb1
 800598c:	08005fb1 	.word	0x08005fb1
 8005990:	08005fb1 	.word	0x08005fb1
 8005994:	08005fb1 	.word	0x08005fb1
 8005998:	08005fb1 	.word	0x08005fb1
 800599c:	08005fb1 	.word	0x08005fb1
 80059a0:	08005fb1 	.word	0x08005fb1
 80059a4:	08005fb1 	.word	0x08005fb1
 80059a8:	08005fb1 	.word	0x08005fb1
 80059ac:	08005d4d 	.word	0x08005d4d
 80059b0:	08005cfd 	.word	0x08005cfd
 80059b4:	08005d4d 	.word	0x08005d4d
 80059b8:	08005fb1 	.word	0x08005fb1
 80059bc:	08005fb1 	.word	0x08005fb1
 80059c0:	08005fb1 	.word	0x08005fb1
 80059c4:	08005fb1 	.word	0x08005fb1
 80059c8:	08005fb1 	.word	0x08005fb1
 80059cc:	08005fb1 	.word	0x08005fb1
 80059d0:	08005fb1 	.word	0x08005fb1
 80059d4:	08005fb1 	.word	0x08005fb1
 80059d8:	08005fb1 	.word	0x08005fb1
 80059dc:	08005fb1 	.word	0x08005fb1
 80059e0:	08005fb1 	.word	0x08005fb1
 80059e4:	08005fb1 	.word	0x08005fb1
 80059e8:	08005fb1 	.word	0x08005fb1
 80059ec:	08005fb1 	.word	0x08005fb1
 80059f0:	08005fb1 	.word	0x08005fb1
 80059f4:	08005fb1 	.word	0x08005fb1
 80059f8:	08005a47 	.word	0x08005a47
 80059fc:	08005fb1 	.word	0x08005fb1
 8005a00:	08005fb1 	.word	0x08005fb1
 8005a04:	08005fb1 	.word	0x08005fb1
 8005a08:	08005fb1 	.word	0x08005fb1
 8005a0c:	08005fb1 	.word	0x08005fb1
 8005a10:	08005fb1 	.word	0x08005fb1
 8005a14:	08005fb1 	.word	0x08005fb1
 8005a18:	08005fb1 	.word	0x08005fb1
 8005a1c:	08005fb1 	.word	0x08005fb1
 8005a20:	08005a47 	.word	0x08005a47
 8005a24:	08005dbd 	.word	0x08005dbd
 8005a28:	08005a47 	.word	0x08005a47
 8005a2c:	08005d4d 	.word	0x08005d4d
 8005a30:	08005cfd 	.word	0x08005cfd
 8005a34:	08005d4d 	.word	0x08005d4d
 8005a38:	2b78      	cmp	r3, #120	; 0x78
 8005a3a:	f300 82b9 	bgt.w	8005fb0 <_vsnprintf+0x9a0>
 8005a3e:	2b69      	cmp	r3, #105	; 0x69
 8005a40:	f6bf af48 	bge.w	80058d4 <_vsnprintf+0x2c4>
 8005a44:	e2b4      	b.n	8005fb0 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b78      	cmp	r3, #120	; 0x78
 8005a4c:	d003      	beq.n	8005a56 <_vsnprintf+0x446>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b58      	cmp	r3, #88	; 0x58
 8005a54:	d102      	bne.n	8005a5c <_vsnprintf+0x44c>
          base = 16U;
 8005a56:	2310      	movs	r3, #16
 8005a58:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a5a:	e013      	b.n	8005a84 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b6f      	cmp	r3, #111	; 0x6f
 8005a62:	d102      	bne.n	8005a6a <_vsnprintf+0x45a>
          base =  8U;
 8005a64:	2308      	movs	r3, #8
 8005a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a68:	e00c      	b.n	8005a84 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b62      	cmp	r3, #98	; 0x62
 8005a70:	d102      	bne.n	8005a78 <_vsnprintf+0x468>
          base =  2U;
 8005a72:	2302      	movs	r3, #2
 8005a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a76:	e005      	b.n	8005a84 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8005a78:	230a      	movs	r3, #10
 8005a7a:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a7e:	f023 0310 	bic.w	r3, r3, #16
 8005a82:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	2b58      	cmp	r3, #88	; 0x58
 8005a8a:	d103      	bne.n	8005a94 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8005a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a8e:	f043 0320 	orr.w	r3, r3, #32
 8005a92:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b69      	cmp	r3, #105	; 0x69
 8005a9a:	d007      	beq.n	8005aac <_vsnprintf+0x49c>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b64      	cmp	r3, #100	; 0x64
 8005aa2:	d003      	beq.n	8005aac <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa6:	f023 030c 	bic.w	r3, r3, #12
 8005aaa:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8005aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8005ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab8:	f023 0301 	bic.w	r3, r3, #1
 8005abc:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b69      	cmp	r3, #105	; 0x69
 8005ac4:	d004      	beq.n	8005ad0 <_vsnprintf+0x4c0>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	2b64      	cmp	r3, #100	; 0x64
 8005acc:	f040 8098 	bne.w	8005c00 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8005ad0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d031      	beq.n	8005b3e <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005ada:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ade:	3307      	adds	r3, #7
 8005ae0:	f023 0307 	bic.w	r3, r3, #7
 8005ae4:	f103 0208 	add.w	r2, r3, #8
 8005ae8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	da06      	bge.n	8005b0a <_vsnprintf+0x4fa>
 8005afc:	2100      	movs	r1, #0
 8005afe:	f1d2 0800 	rsbs	r8, r2, #0
 8005b02:	eb61 0903 	sbc.w	r9, r1, r3
 8005b06:	4642      	mov	r2, r8
 8005b08:	464b      	mov	r3, r9
 8005b0a:	69f9      	ldr	r1, [r7, #28]
 8005b0c:	0fc9      	lsrs	r1, r1, #31
 8005b0e:	b2c9      	uxtb	r1, r1
 8005b10:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005b12:	2400      	movs	r4, #0
 8005b14:	4682      	mov	sl, r0
 8005b16:	46a3      	mov	fp, r4
 8005b18:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005b1a:	9008      	str	r0, [sp, #32]
 8005b1c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005b1e:	9007      	str	r0, [sp, #28]
 8005b20:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005b22:	9006      	str	r0, [sp, #24]
 8005b24:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8005b28:	9102      	str	r1, [sp, #8]
 8005b2a:	e9cd 2300 	strd	r2, r3, [sp]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b32:	6939      	ldr	r1, [r7, #16]
 8005b34:	6978      	ldr	r0, [r7, #20]
 8005b36:	f7ff f81c 	bl	8004b72 <_ntoa_long_long>
 8005b3a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005b3c:	e0da      	b.n	8005cf4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d020      	beq.n	8005b8a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8005b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b4c:	1d1a      	adds	r2, r3, #4
 8005b4e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bfb8      	it	lt
 8005b5c:	425b      	neglt	r3, r3
 8005b5e:	4619      	mov	r1, r3
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	0fdb      	lsrs	r3, r3, #31
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b68:	9205      	str	r2, [sp, #20]
 8005b6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b6c:	9204      	str	r2, [sp, #16]
 8005b6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b70:	9203      	str	r2, [sp, #12]
 8005b72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b74:	9202      	str	r2, [sp, #8]
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	9100      	str	r1, [sp, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b7e:	6939      	ldr	r1, [r7, #16]
 8005b80:	6978      	ldr	r0, [r7, #20]
 8005b82:	f7fe ff90 	bl	8004aa6 <_ntoa_long>
 8005b86:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005b88:	e0b4      	b.n	8005cf4 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005b8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <_vsnprintf+0x594>
 8005b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b98:	1d1a      	adds	r2, r3, #4
 8005b9a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	e012      	b.n	8005bca <_vsnprintf+0x5ba>
 8005ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d007      	beq.n	8005bbe <_vsnprintf+0x5ae>
 8005bae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bb2:	1d1a      	adds	r2, r3, #4
 8005bb4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	b21b      	sxth	r3, r3
 8005bbc:	e005      	b.n	8005bca <_vsnprintf+0x5ba>
 8005bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bc2:	1d1a      	adds	r2, r3, #4
 8005bc4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfb8      	it	lt
 8005bd2:	425b      	neglt	r3, r3
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd8:	0fdb      	lsrs	r3, r3, #31
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bde:	9205      	str	r2, [sp, #20]
 8005be0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005be2:	9204      	str	r2, [sp, #16]
 8005be4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005be6:	9203      	str	r2, [sp, #12]
 8005be8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bea:	9202      	str	r2, [sp, #8]
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	9100      	str	r1, [sp, #0]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bf4:	6939      	ldr	r1, [r7, #16]
 8005bf6:	6978      	ldr	r0, [r7, #20]
 8005bf8:	f7fe ff55 	bl	8004aa6 <_ntoa_long>
 8005bfc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005bfe:	e079      	b.n	8005cf4 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005c00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d022      	beq.n	8005c50 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8005c0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c0e:	3307      	adds	r3, #7
 8005c10:	f023 0307 	bic.w	r3, r3, #7
 8005c14:	f103 0208 	add.w	r2, r3, #8
 8005c18:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005c22:	2000      	movs	r0, #0
 8005c24:	460d      	mov	r5, r1
 8005c26:	4606      	mov	r6, r0
 8005c28:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005c2a:	9108      	str	r1, [sp, #32]
 8005c2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c2e:	9107      	str	r1, [sp, #28]
 8005c30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c32:	9106      	str	r1, [sp, #24]
 8005c34:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8005c38:	2100      	movs	r1, #0
 8005c3a:	9102      	str	r1, [sp, #8]
 8005c3c:	e9cd 2300 	strd	r2, r3, [sp]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c44:	6939      	ldr	r1, [r7, #16]
 8005c46:	6978      	ldr	r0, [r7, #20]
 8005c48:	f7fe ff93 	bl	8004b72 <_ntoa_long_long>
 8005c4c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005c4e:	e051      	b.n	8005cf4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d018      	beq.n	8005c8c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005c5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c5e:	1d1a      	adds	r2, r3, #4
 8005c60:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c68:	9205      	str	r2, [sp, #20]
 8005c6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c6c:	9204      	str	r2, [sp, #16]
 8005c6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c70:	9203      	str	r2, [sp, #12]
 8005c72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c74:	9202      	str	r2, [sp, #8]
 8005c76:	2200      	movs	r2, #0
 8005c78:	9201      	str	r2, [sp, #4]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c80:	6939      	ldr	r1, [r7, #16]
 8005c82:	6978      	ldr	r0, [r7, #20]
 8005c84:	f7fe ff0f 	bl	8004aa6 <_ntoa_long>
 8005c88:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005c8a:	e033      	b.n	8005cf4 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8005c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <_vsnprintf+0x696>
 8005c96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c9a:	1d1a      	adds	r2, r3, #4
 8005c9c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	e012      	b.n	8005ccc <_vsnprintf+0x6bc>
 8005ca6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <_vsnprintf+0x6b0>
 8005cb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cb4:	1d1a      	adds	r2, r3, #4
 8005cb6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	e005      	b.n	8005ccc <_vsnprintf+0x6bc>
 8005cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cc4:	1d1a      	adds	r2, r3, #4
 8005cc6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8005cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd0:	9305      	str	r3, [sp, #20]
 8005cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cd4:	9304      	str	r3, [sp, #16]
 8005cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd8:	9303      	str	r3, [sp, #12]
 8005cda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cdc:	9302      	str	r3, [sp, #8]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cea:	6939      	ldr	r1, [r7, #16]
 8005cec:	6978      	ldr	r0, [r7, #20]
 8005cee:	f7fe feda 	bl	8004aa6 <_ntoa_long>
 8005cf2:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60bb      	str	r3, [r7, #8]
        break;
 8005cfa:	e166      	b.n	8005fca <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b46      	cmp	r3, #70	; 0x46
 8005d02:	d103      	bne.n	8005d0c <_vsnprintf+0x6fc>
 8005d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d06:	f043 0320 	orr.w	r3, r3, #32
 8005d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d10:	3307      	adds	r3, #7
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	f103 0208 	add.w	r2, r3, #8
 8005d1a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005d1e:	ed93 7b00 	vldr	d7, [r3]
 8005d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d24:	9302      	str	r3, [sp, #8]
 8005d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	eeb0 0a47 	vmov.f32	s0, s14
 8005d32:	eef0 0a67 	vmov.f32	s1, s15
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d3a:	6939      	ldr	r1, [r7, #16]
 8005d3c:	6978      	ldr	r0, [r7, #20]
 8005d3e:	f7fe ff87 	bl	8004c50 <_ftoa>
 8005d42:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	3301      	adds	r3, #1
 8005d48:	60bb      	str	r3, [r7, #8]
        break;
 8005d4a:	e13e      	b.n	8005fca <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b67      	cmp	r3, #103	; 0x67
 8005d52:	d003      	beq.n	8005d5c <_vsnprintf+0x74c>
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b47      	cmp	r3, #71	; 0x47
 8005d5a:	d103      	bne.n	8005d64 <_vsnprintf+0x754>
 8005d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005d62:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b45      	cmp	r3, #69	; 0x45
 8005d6a:	d003      	beq.n	8005d74 <_vsnprintf+0x764>
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	2b47      	cmp	r3, #71	; 0x47
 8005d72:	d103      	bne.n	8005d7c <_vsnprintf+0x76c>
 8005d74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d76:	f043 0320 	orr.w	r3, r3, #32
 8005d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d80:	3307      	adds	r3, #7
 8005d82:	f023 0307 	bic.w	r3, r3, #7
 8005d86:	f103 0208 	add.w	r2, r3, #8
 8005d8a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005d8e:	ed93 7b00 	vldr	d7, [r3]
 8005d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d94:	9302      	str	r3, [sp, #8]
 8005d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d98:	9301      	str	r3, [sp, #4]
 8005d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d9c:	9300      	str	r3, [sp, #0]
 8005d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8005da2:	eef0 0a67 	vmov.f32	s1, s15
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005daa:	6939      	ldr	r1, [r7, #16]
 8005dac:	6978      	ldr	r0, [r7, #20]
 8005dae:	f7ff f9a7 	bl	8005100 <_etoa>
 8005db2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60bb      	str	r3, [r7, #8]
        break;
 8005dba:	e106      	b.n	8005fca <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8005dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10e      	bne.n	8005de8 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8005dca:	e007      	b.n	8005ddc <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8005dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005dce:	1c53      	adds	r3, r2, #1
 8005dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd2:	697c      	ldr	r4, [r7, #20]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6939      	ldr	r1, [r7, #16]
 8005dd8:	2020      	movs	r0, #32
 8005dda:	47a0      	blx	r4
          while (l++ < width) {
 8005ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	647a      	str	r2, [r7, #68]	; 0x44
 8005de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d8f1      	bhi.n	8005dcc <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dec:	1d1a      	adds	r2, r3, #4
 8005dee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	b2d8      	uxtb	r0, r3
 8005df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005df8:	1c53      	adds	r3, r2, #1
 8005dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dfc:	697c      	ldr	r4, [r7, #20]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6939      	ldr	r1, [r7, #16]
 8005e02:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005e04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00e      	beq.n	8005e2c <_vsnprintf+0x81c>
          while (l++ < width) {
 8005e0e:	e007      	b.n	8005e20 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8005e10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e12:	1c53      	adds	r3, r2, #1
 8005e14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e16:	697c      	ldr	r4, [r7, #20]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6939      	ldr	r1, [r7, #16]
 8005e1c:	2020      	movs	r0, #32
 8005e1e:	47a0      	blx	r4
          while (l++ < width) {
 8005e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	647a      	str	r2, [r7, #68]	; 0x44
 8005e26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d8f1      	bhi.n	8005e10 <_vsnprintf+0x800>
          }
        }
        format++;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	60bb      	str	r3, [r7, #8]
        break;
 8005e32:	e0ca      	b.n	8005fca <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8005e34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e38:	1d1a      	adds	r2, r3, #4
 8005e3a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8005e42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <_vsnprintf+0x83c>
 8005e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e4a:	e001      	b.n	8005e50 <_vsnprintf+0x840>
 8005e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e50:	4619      	mov	r1, r3
 8005e52:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005e54:	f7fe fca3 	bl	800479e <_strnlen_s>
 8005e58:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8005e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8005e64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bf28      	it	cs
 8005e6c:	4613      	movcs	r3, r2
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8005e70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d11a      	bne.n	8005eb0 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8005e7a:	e007      	b.n	8005e8c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8005e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005e7e:	1c53      	adds	r3, r2, #1
 8005e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e82:	697c      	ldr	r4, [r7, #20]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6939      	ldr	r1, [r7, #16]
 8005e88:	2020      	movs	r0, #32
 8005e8a:	47a0      	blx	r4
          while (l++ < width) {
 8005e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e8e:	1c5a      	adds	r2, r3, #1
 8005e90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005e92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d8f1      	bhi.n	8005e7c <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005e98:	e00a      	b.n	8005eb0 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8005e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	643a      	str	r2, [r7, #64]	; 0x40
 8005ea0:	7818      	ldrb	r0, [r3, #0]
 8005ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ea4:	1c53      	adds	r3, r2, #1
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea8:	697c      	ldr	r4, [r7, #20]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6939      	ldr	r1, [r7, #16]
 8005eae:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d009      	beq.n	8005ecc <_vsnprintf+0x8bc>
 8005eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0eb      	beq.n	8005e9a <_vsnprintf+0x88a>
 8005ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec4:	1e5a      	subs	r2, r3, #1
 8005ec6:	657a      	str	r2, [r7, #84]	; 0x54
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e6      	bne.n	8005e9a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8005ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00e      	beq.n	8005ef4 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8005ed6:	e007      	b.n	8005ee8 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8005ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eda:	1c53      	adds	r3, r2, #1
 8005edc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ede:	697c      	ldr	r4, [r7, #20]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6939      	ldr	r1, [r7, #16]
 8005ee4:	2020      	movs	r0, #32
 8005ee6:	47a0      	blx	r4
          while (l++ < width) {
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d8f1      	bhi.n	8005ed8 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	60bb      	str	r3, [r7, #8]
        break;
 8005efa:	e066      	b.n	8005fca <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8005efc:	2308      	movs	r3, #8
 8005efe:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8005f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f02:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8005f06:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8005f0e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d023      	beq.n	8005f5e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8005f16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f1a:	1d1a      	adds	r2, r3, #4
 8005f1c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	461a      	mov	r2, r3
 8005f24:	2300      	movs	r3, #0
 8005f26:	603a      	str	r2, [r7, #0]
 8005f28:	607b      	str	r3, [r7, #4]
 8005f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f2c:	9308      	str	r3, [sp, #32]
 8005f2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f30:	9307      	str	r3, [sp, #28]
 8005f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f34:	9306      	str	r3, [sp, #24]
 8005f36:	f04f 0210 	mov.w	r2, #16
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f42:	2300      	movs	r3, #0
 8005f44:	9302      	str	r3, [sp, #8]
 8005f46:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005f4a:	e9cd 3400 	strd	r3, r4, [sp]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f52:	6939      	ldr	r1, [r7, #16]
 8005f54:	6978      	ldr	r0, [r7, #20]
 8005f56:	f7fe fe0c 	bl	8004b72 <_ntoa_long_long>
 8005f5a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005f5c:	e018      	b.n	8005f90 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8005f5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f62:	1d1a      	adds	r2, r3, #4
 8005f64:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f6e:	9305      	str	r3, [sp, #20]
 8005f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f72:	9304      	str	r3, [sp, #16]
 8005f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	2310      	movs	r3, #16
 8005f7a:	9302      	str	r3, [sp, #8]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9301      	str	r3, [sp, #4]
 8005f80:	9200      	str	r2, [sp, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f86:	6939      	ldr	r1, [r7, #16]
 8005f88:	6978      	ldr	r0, [r7, #20]
 8005f8a:	f7fe fd8c 	bl	8004aa6 <_ntoa_long>
 8005f8e:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60bb      	str	r3, [r7, #8]
        break;
 8005f96:	e018      	b.n	8005fca <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8005f98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f9a:	1c53      	adds	r3, r2, #1
 8005f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f9e:	697c      	ldr	r4, [r7, #20]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6939      	ldr	r1, [r7, #16]
 8005fa4:	2025      	movs	r0, #37	; 0x25
 8005fa6:	47a0      	blx	r4
        format++;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	3301      	adds	r3, #1
 8005fac:	60bb      	str	r3, [r7, #8]
        break;
 8005fae:	e00c      	b.n	8005fca <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	7818      	ldrb	r0, [r3, #0]
 8005fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fb6:	1c53      	adds	r3, r2, #1
 8005fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fba:	697c      	ldr	r4, [r7, #20]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6939      	ldr	r1, [r7, #16]
 8005fc0:	47a0      	blx	r4
        format++;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	60bb      	str	r3, [r7, #8]
        break;
 8005fc8:	bf00      	nop
  while (*format)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f47f ab30 	bne.w	8005634 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8005fd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d302      	bcc.n	8005fe2 <_vsnprintf+0x9d2>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1e5a      	subs	r2, r3, #1
 8005fe0:	e000      	b.n	8005fe4 <_vsnprintf+0x9d4>
 8005fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fe4:	697c      	ldr	r4, [r7, #20]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6939      	ldr	r1, [r7, #16]
 8005fea:	2000      	movs	r0, #0
 8005fec:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8005fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3764      	adds	r7, #100	; 0x64
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	bf00      	nop

08005ffc <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8005ffc:	b40f      	push	{r0, r1, r2, r3}
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b086      	sub	sp, #24
 8006002:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8006004:	f107 031c 	add.w	r3, r7, #28
 8006008:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800600a:	1d39      	adds	r1, r7, #4
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	f04f 32ff 	mov.w	r2, #4294967295
 8006016:	4806      	ldr	r0, [pc, #24]	; (8006030 <printf_+0x34>)
 8006018:	f7ff fafa 	bl	8005610 <_vsnprintf>
 800601c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800602a:	b004      	add	sp, #16
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	08004779 	.word	0x08004779

08006034 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8006034:	b40e      	push	{r1, r2, r3}
 8006036:	b580      	push	{r7, lr}
 8006038:	b087      	sub	sp, #28
 800603a:	af02      	add	r7, sp, #8
 800603c:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 800603e:	f107 0320 	add.w	r3, r7, #32
 8006042:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f04f 32ff 	mov.w	r2, #4294967295
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4805      	ldr	r0, [pc, #20]	; (8006068 <sprintf_+0x34>)
 8006052:	f7ff fadd 	bl	8005610 <_vsnprintf>
 8006056:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8006058:	68fb      	ldr	r3, [r7, #12]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006064:	b003      	add	sp, #12
 8006066:	4770      	bx	lr
 8006068:	0800472f 	.word	0x0800472f

0800606c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8006072:	1d3b      	adds	r3, r7, #4
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	609a      	str	r2, [r3, #8]
 800607c:	60da      	str	r2, [r3, #12]
 800607e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8006080:	2300      	movs	r3, #0
 8006082:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006084:	4b26      	ldr	r3, [pc, #152]	; (8006120 <MX_RTC_Init+0xb4>)
 8006086:	4a27      	ldr	r2, [pc, #156]	; (8006124 <MX_RTC_Init+0xb8>)
 8006088:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800608a:	4b25      	ldr	r3, [pc, #148]	; (8006120 <MX_RTC_Init+0xb4>)
 800608c:	2200      	movs	r2, #0
 800608e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006090:	4b23      	ldr	r3, [pc, #140]	; (8006120 <MX_RTC_Init+0xb4>)
 8006092:	227f      	movs	r2, #127	; 0x7f
 8006094:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006096:	4b22      	ldr	r3, [pc, #136]	; (8006120 <MX_RTC_Init+0xb4>)
 8006098:	22ff      	movs	r2, #255	; 0xff
 800609a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800609c:	4b20      	ldr	r3, [pc, #128]	; (8006120 <MX_RTC_Init+0xb4>)
 800609e:	2200      	movs	r2, #0
 80060a0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80060a2:	4b1f      	ldr	r3, [pc, #124]	; (8006120 <MX_RTC_Init+0xb4>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80060a8:	4b1d      	ldr	r3, [pc, #116]	; (8006120 <MX_RTC_Init+0xb4>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80060ae:	481c      	ldr	r0, [pc, #112]	; (8006120 <MX_RTC_Init+0xb4>)
 80060b0:	f003 fb62 	bl	8009778 <HAL_RTC_Init>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d001      	beq.n	80060be <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80060ba:	f7fe fb33 	bl	8004724 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80060be:	2300      	movs	r3, #0
 80060c0:	613b      	str	r3, [r7, #16]
   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
//  return;
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 80060c6:	2307      	movs	r3, #7
 80060c8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 80060ca:	233b      	movs	r3, #59	; 0x3b
 80060cc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 80060ce:	231e      	movs	r3, #30
 80060d0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80060da:	1d3b      	adds	r3, r7, #4
 80060dc:	2200      	movs	r2, #0
 80060de:	4619      	mov	r1, r3
 80060e0:	480f      	ldr	r0, [pc, #60]	; (8006120 <MX_RTC_Init+0xb4>)
 80060e2:	f003 fbbf 	bl	8009864 <HAL_RTC_SetTime>
 80060e6:	4603      	mov	r3, r0
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80060ec:	f7fe fb1a 	bl	8004724 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80060f0:	2302      	movs	r3, #2
 80060f2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80060f4:	2307      	movs	r3, #7
 80060f6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 30;
 80060f8:	231e      	movs	r3, #30
 80060fa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 80060fc:	2318      	movs	r3, #24
 80060fe:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8006100:	463b      	mov	r3, r7
 8006102:	2200      	movs	r2, #0
 8006104:	4619      	mov	r1, r3
 8006106:	4806      	ldr	r0, [pc, #24]	; (8006120 <MX_RTC_Init+0xb4>)
 8006108:	f003 fca4 	bl	8009a54 <HAL_RTC_SetDate>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8006112:	f7fe fb07 	bl	8004724 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006116:	bf00      	nop
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	200007bc 	.word	0x200007bc
 8006124:	40002800 	.word	0x40002800

08006128 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006130:	f107 0308 	add.w	r3, r7, #8
 8006134:	2200      	movs	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	605a      	str	r2, [r3, #4]
 800613a:	609a      	str	r2, [r3, #8]
 800613c:	60da      	str	r2, [r3, #12]
 800613e:	611a      	str	r2, [r3, #16]
 8006140:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a0c      	ldr	r2, [pc, #48]	; (8006178 <HAL_RTC_MspInit+0x50>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d111      	bne.n	8006170 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800614c:	2302      	movs	r3, #2
 800614e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006150:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006154:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006156:	f107 0308 	add.w	r3, r7, #8
 800615a:	4618      	mov	r0, r3
 800615c:	f003 fa1c 	bl	8009598 <HAL_RCCEx_PeriphCLKConfig>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8006166:	f7fe fadd 	bl	8004724 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800616a:	4b04      	ldr	r3, [pc, #16]	; (800617c <HAL_RTC_MspInit+0x54>)
 800616c:	2201      	movs	r2, #1
 800616e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8006170:	bf00      	nop
 8006172:	3720      	adds	r7, #32
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	40002800 	.word	0x40002800
 800617c:	42470e3c 	.word	0x42470e3c

08006180 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8006184:	4b17      	ldr	r3, [pc, #92]	; (80061e4 <MX_SPI3_Init+0x64>)
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <MX_SPI3_Init+0x68>)
 8006188:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800618a:	4b16      	ldr	r3, [pc, #88]	; (80061e4 <MX_SPI3_Init+0x64>)
 800618c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006190:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006192:	4b14      	ldr	r3, [pc, #80]	; (80061e4 <MX_SPI3_Init+0x64>)
 8006194:	2200      	movs	r2, #0
 8006196:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006198:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <MX_SPI3_Init+0x64>)
 800619a:	2200      	movs	r2, #0
 800619c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <MX_SPI3_Init+0x64>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061a4:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <MX_SPI3_Init+0x64>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80061aa:	4b0e      	ldr	r3, [pc, #56]	; (80061e4 <MX_SPI3_Init+0x64>)
 80061ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <MX_SPI3_Init+0x64>)
 80061b4:	2238      	movs	r2, #56	; 0x38
 80061b6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <MX_SPI3_Init+0x64>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80061be:	4b09      	ldr	r3, [pc, #36]	; (80061e4 <MX_SPI3_Init+0x64>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061c4:	4b07      	ldr	r3, [pc, #28]	; (80061e4 <MX_SPI3_Init+0x64>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80061ca:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <MX_SPI3_Init+0x64>)
 80061cc:	220a      	movs	r2, #10
 80061ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80061d0:	4804      	ldr	r0, [pc, #16]	; (80061e4 <MX_SPI3_Init+0x64>)
 80061d2:	f003 fef9 	bl	8009fc8 <HAL_SPI_Init>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80061dc:	f7fe faa2 	bl	8004724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80061e0:	bf00      	nop
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	200007dc 	.word	0x200007dc
 80061e8:	40003c00 	.word	0x40003c00

080061ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f4:	f107 0314 	add.w	r3, r7, #20
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a19      	ldr	r2, [pc, #100]	; (8006270 <HAL_SPI_MspInit+0x84>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d12c      	bne.n	8006268 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	4b18      	ldr	r3, [pc, #96]	; (8006274 <HAL_SPI_MspInit+0x88>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	4a17      	ldr	r2, [pc, #92]	; (8006274 <HAL_SPI_MspInit+0x88>)
 8006218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800621c:	6413      	str	r3, [r2, #64]	; 0x40
 800621e:	4b15      	ldr	r3, [pc, #84]	; (8006274 <HAL_SPI_MspInit+0x88>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	4b11      	ldr	r3, [pc, #68]	; (8006274 <HAL_SPI_MspInit+0x88>)
 8006230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006232:	4a10      	ldr	r2, [pc, #64]	; (8006274 <HAL_SPI_MspInit+0x88>)
 8006234:	f043 0304 	orr.w	r3, r3, #4
 8006238:	6313      	str	r3, [r2, #48]	; 0x30
 800623a:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <HAL_SPI_MspInit+0x88>)
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006246:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800624a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624c:	2302      	movs	r3, #2
 800624e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006250:	2300      	movs	r3, #0
 8006252:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006254:	2303      	movs	r3, #3
 8006256:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006258:	2306      	movs	r3, #6
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800625c:	f107 0314 	add.w	r3, r7, #20
 8006260:	4619      	mov	r1, r3
 8006262:	4805      	ldr	r0, [pc, #20]	; (8006278 <HAL_SPI_MspInit+0x8c>)
 8006264:	f000 fdb6 	bl	8006dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006268:	bf00      	nop
 800626a:	3728      	adds	r7, #40	; 0x28
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40003c00 	.word	0x40003c00
 8006274:	40023800 	.word	0x40023800
 8006278:	40020800 	.word	0x40020800

0800627c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <HAL_MspInit+0x54>)
 8006288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628a:	4a11      	ldr	r2, [pc, #68]	; (80062d0 <HAL_MspInit+0x54>)
 800628c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006290:	6453      	str	r3, [r2, #68]	; 0x44
 8006292:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <HAL_MspInit+0x54>)
 8006294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800629a:	607b      	str	r3, [r7, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800629e:	2300      	movs	r3, #0
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	4b0b      	ldr	r3, [pc, #44]	; (80062d0 <HAL_MspInit+0x54>)
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	4a0a      	ldr	r2, [pc, #40]	; (80062d0 <HAL_MspInit+0x54>)
 80062a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062ac:	6413      	str	r3, [r2, #64]	; 0x40
 80062ae:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <HAL_MspInit+0x54>)
 80062b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80062ba:	2200      	movs	r2, #0
 80062bc:	210f      	movs	r1, #15
 80062be:	f06f 0001 	mvn.w	r0, #1
 80062c2:	f000 fbfd 	bl	8006ac0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	40023800 	.word	0x40023800

080062d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08c      	sub	sp, #48	; 0x30
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80062e4:	2300      	movs	r3, #0
 80062e6:	60bb      	str	r3, [r7, #8]
 80062e8:	4b2e      	ldr	r3, [pc, #184]	; (80063a4 <HAL_InitTick+0xd0>)
 80062ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ec:	4a2d      	ldr	r2, [pc, #180]	; (80063a4 <HAL_InitTick+0xd0>)
 80062ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062f2:	6453      	str	r3, [r2, #68]	; 0x44
 80062f4:	4b2b      	ldr	r3, [pc, #172]	; (80063a4 <HAL_InitTick+0xd0>)
 80062f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fc:	60bb      	str	r3, [r7, #8]
 80062fe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006300:	f107 020c 	add.w	r2, r7, #12
 8006304:	f107 0310 	add.w	r3, r7, #16
 8006308:	4611      	mov	r1, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f003 f912 	bl	8009534 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8006310:	f003 f8fc 	bl	800950c <HAL_RCC_GetPCLK2Freq>
 8006314:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	4a23      	ldr	r2, [pc, #140]	; (80063a8 <HAL_InitTick+0xd4>)
 800631a:	fba2 2303 	umull	r2, r3, r2, r3
 800631e:	0c9b      	lsrs	r3, r3, #18
 8006320:	3b01      	subs	r3, #1
 8006322:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8006324:	4b21      	ldr	r3, [pc, #132]	; (80063ac <HAL_InitTick+0xd8>)
 8006326:	4a22      	ldr	r2, [pc, #136]	; (80063b0 <HAL_InitTick+0xdc>)
 8006328:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 800632a:	4b20      	ldr	r3, [pc, #128]	; (80063ac <HAL_InitTick+0xd8>)
 800632c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006330:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8006332:	4a1e      	ldr	r2, [pc, #120]	; (80063ac <HAL_InitTick+0xd8>)
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8006338:	4b1c      	ldr	r3, [pc, #112]	; (80063ac <HAL_InitTick+0xd8>)
 800633a:	2200      	movs	r2, #0
 800633c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800633e:	4b1b      	ldr	r3, [pc, #108]	; (80063ac <HAL_InitTick+0xd8>)
 8006340:	2200      	movs	r2, #0
 8006342:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006344:	4b19      	ldr	r3, [pc, #100]	; (80063ac <HAL_InitTick+0xd8>)
 8006346:	2200      	movs	r2, #0
 8006348:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 800634a:	4818      	ldr	r0, [pc, #96]	; (80063ac <HAL_InitTick+0xd8>)
 800634c:	f004 f932 	bl	800a5b4 <HAL_TIM_Base_Init>
 8006350:	4603      	mov	r3, r0
 8006352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8006356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800635a:	2b00      	cmp	r3, #0
 800635c:	d11b      	bne.n	8006396 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800635e:	4813      	ldr	r0, [pc, #76]	; (80063ac <HAL_InitTick+0xd8>)
 8006360:	f004 f978 	bl	800a654 <HAL_TIM_Base_Start_IT>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800636a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800636e:	2b00      	cmp	r3, #0
 8006370:	d111      	bne.n	8006396 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8006372:	2019      	movs	r0, #25
 8006374:	f000 fbc0 	bl	8006af8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b0f      	cmp	r3, #15
 800637c:	d808      	bhi.n	8006390 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800637e:	2200      	movs	r2, #0
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	2019      	movs	r0, #25
 8006384:	f000 fb9c 	bl	8006ac0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006388:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <HAL_InitTick+0xe0>)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e002      	b.n	8006396 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8006396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800639a:	4618      	mov	r0, r3
 800639c:	3730      	adds	r7, #48	; 0x30
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	40023800 	.word	0x40023800
 80063a8:	431bde83 	.word	0x431bde83
 80063ac:	20000834 	.word	0x20000834
 80063b0:	40014400 	.word	0x40014400
 80063b4:	2000000c 	.word	0x2000000c

080063b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063bc:	e7fe      	b.n	80063bc <NMI_Handler+0x4>

080063be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063be:	b480      	push	{r7}
 80063c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063c2:	e7fe      	b.n	80063c2 <HardFault_Handler+0x4>

080063c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063c8:	e7fe      	b.n	80063c8 <MemManage_Handler+0x4>

080063ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063ca:	b480      	push	{r7}
 80063cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063ce:	e7fe      	b.n	80063ce <BusFault_Handler+0x4>

080063d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063d0:	b480      	push	{r7}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063d4:	e7fe      	b.n	80063d4 <UsageFault_Handler+0x4>

080063d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063d6:	b480      	push	{r7}
 80063d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063da:	bf00      	nop
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80063e8:	4802      	ldr	r0, [pc, #8]	; (80063f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80063ea:	f004 fa9f 	bl	800a92c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80063ee:	bf00      	nop
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000834 	.word	0x20000834

080063f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  return 1;
 80063fc:	2301      	movs	r3, #1
}
 80063fe:	4618      	mov	r0, r3
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <_kill>:

int _kill(int pid, int sig)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006412:	f00e facf 	bl	80149b4 <__errno>
 8006416:	4603      	mov	r3, r0
 8006418:	2216      	movs	r2, #22
 800641a:	601a      	str	r2, [r3, #0]
  return -1;
 800641c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <_exit>:

void _exit (int status)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006430:	f04f 31ff 	mov.w	r1, #4294967295
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f7ff ffe7 	bl	8006408 <_kill>
  while (1) {}    /* Make sure we hang here */
 800643a:	e7fe      	b.n	800643a <_exit+0x12>

0800643c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
 800644c:	e00a      	b.n	8006464 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800644e:	f3af 8000 	nop.w
 8006452:	4601      	mov	r1, r0
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	60ba      	str	r2, [r7, #8]
 800645a:	b2ca      	uxtb	r2, r1
 800645c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	3301      	adds	r3, #1
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	dbf0      	blt.n	800644e <_read+0x12>
  }

  return len;
 800646c:	687b      	ldr	r3, [r7, #4]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b086      	sub	sp, #24
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
 8006486:	e009      	b.n	800649c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	1c5a      	adds	r2, r3, #1
 800648c:	60ba      	str	r2, [r7, #8]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	3301      	adds	r3, #1
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	dbf1      	blt.n	8006488 <_write+0x12>
  }
  return len;
 80064a4:	687b      	ldr	r3, [r7, #4]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <_close>:

int _close(int file)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80064b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr

080064c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80064c6:	b480      	push	{r7}
 80064c8:	b083      	sub	sp, #12
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
 80064ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064d6:	605a      	str	r2, [r3, #4]
  return 0;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr

080064e6 <_isatty>:

int _isatty(int file)
{
 80064e6:	b480      	push	{r7}
 80064e8:	b083      	sub	sp, #12
 80064ea:	af00      	add	r7, sp, #0
 80064ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80064ee:	2301      	movs	r3, #1
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006520:	4a14      	ldr	r2, [pc, #80]	; (8006574 <_sbrk+0x5c>)
 8006522:	4b15      	ldr	r3, [pc, #84]	; (8006578 <_sbrk+0x60>)
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800652c:	4b13      	ldr	r3, [pc, #76]	; (800657c <_sbrk+0x64>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006534:	4b11      	ldr	r3, [pc, #68]	; (800657c <_sbrk+0x64>)
 8006536:	4a12      	ldr	r2, [pc, #72]	; (8006580 <_sbrk+0x68>)
 8006538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800653a:	4b10      	ldr	r3, [pc, #64]	; (800657c <_sbrk+0x64>)
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4413      	add	r3, r2
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	429a      	cmp	r2, r3
 8006546:	d207      	bcs.n	8006558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006548:	f00e fa34 	bl	80149b4 <__errno>
 800654c:	4603      	mov	r3, r0
 800654e:	220c      	movs	r2, #12
 8006550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006552:	f04f 33ff 	mov.w	r3, #4294967295
 8006556:	e009      	b.n	800656c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006558:	4b08      	ldr	r3, [pc, #32]	; (800657c <_sbrk+0x64>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800655e:	4b07      	ldr	r3, [pc, #28]	; (800657c <_sbrk+0x64>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4413      	add	r3, r2
 8006566:	4a05      	ldr	r2, [pc, #20]	; (800657c <_sbrk+0x64>)
 8006568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800656a:	68fb      	ldr	r3, [r7, #12]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3718      	adds	r7, #24
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	20020000 	.word	0x20020000
 8006578:	00000800 	.word	0x00000800
 800657c:	2000087c 	.word	0x2000087c
 8006580:	20012238 	.word	0x20012238

08006584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006584:	b480      	push	{r7}
 8006586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006588:	4b06      	ldr	r3, [pc, #24]	; (80065a4 <SystemInit+0x20>)
 800658a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800658e:	4a05      	ldr	r2, [pc, #20]	; (80065a4 <SystemInit+0x20>)
 8006590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006598:	bf00      	nop
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	e000ed00 	.word	0xe000ed00

080065a8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08e      	sub	sp, #56	; 0x38
 80065ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80065ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	605a      	str	r2, [r3, #4]
 80065b8:	609a      	str	r2, [r3, #8]
 80065ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065bc:	f107 0320 	add.w	r3, r7, #32
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065c6:	1d3b      	adds	r3, r7, #4
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
 80065cc:	605a      	str	r2, [r3, #4]
 80065ce:	609a      	str	r2, [r3, #8]
 80065d0:	60da      	str	r2, [r3, #12]
 80065d2:	611a      	str	r2, [r3, #16]
 80065d4:	615a      	str	r2, [r3, #20]
 80065d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80065d8:	4b2c      	ldr	r3, [pc, #176]	; (800668c <MX_TIM3_Init+0xe4>)
 80065da:	4a2d      	ldr	r2, [pc, #180]	; (8006690 <MX_TIM3_Init+0xe8>)
 80065dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 80065de:	4b2b      	ldr	r3, [pc, #172]	; (800668c <MX_TIM3_Init+0xe4>)
 80065e0:	2253      	movs	r2, #83	; 0x53
 80065e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065e4:	4b29      	ldr	r3, [pc, #164]	; (800668c <MX_TIM3_Init+0xe4>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80065ea:	4b28      	ldr	r3, [pc, #160]	; (800668c <MX_TIM3_Init+0xe4>)
 80065ec:	2263      	movs	r2, #99	; 0x63
 80065ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065f0:	4b26      	ldr	r3, [pc, #152]	; (800668c <MX_TIM3_Init+0xe4>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065f6:	4b25      	ldr	r3, [pc, #148]	; (800668c <MX_TIM3_Init+0xe4>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80065fc:	4823      	ldr	r0, [pc, #140]	; (800668c <MX_TIM3_Init+0xe4>)
 80065fe:	f003 ffd9 	bl	800a5b4 <HAL_TIM_Base_Init>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8006608:	f7fe f88c 	bl	8004724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800660c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006616:	4619      	mov	r1, r3
 8006618:	481c      	ldr	r0, [pc, #112]	; (800668c <MX_TIM3_Init+0xe4>)
 800661a:	f004 fb51 	bl	800acc0 <HAL_TIM_ConfigClockSource>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8006624:	f7fe f87e 	bl	8004724 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006628:	4818      	ldr	r0, [pc, #96]	; (800668c <MX_TIM3_Init+0xe4>)
 800662a:	f004 f875 	bl	800a718 <HAL_TIM_PWM_Init>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8006634:	f7fe f876 	bl	8004724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006638:	2320      	movs	r3, #32
 800663a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800663c:	2300      	movs	r3, #0
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006640:	f107 0320 	add.w	r3, r7, #32
 8006644:	4619      	mov	r1, r3
 8006646:	4811      	ldr	r0, [pc, #68]	; (800668c <MX_TIM3_Init+0xe4>)
 8006648:	f004 fef6 	bl	800b438 <HAL_TIMEx_MasterConfigSynchronization>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8006652:	f7fe f867 	bl	8004724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006656:	2360      	movs	r3, #96	; 0x60
 8006658:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800665e:	2300      	movs	r3, #0
 8006660:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006662:	2300      	movs	r3, #0
 8006664:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006666:	1d3b      	adds	r3, r7, #4
 8006668:	2200      	movs	r2, #0
 800666a:	4619      	mov	r1, r3
 800666c:	4807      	ldr	r0, [pc, #28]	; (800668c <MX_TIM3_Init+0xe4>)
 800666e:	f004 fa65 	bl	800ab3c <HAL_TIM_PWM_ConfigChannel>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8006678:	f7fe f854 	bl	8004724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800667c:	4803      	ldr	r0, [pc, #12]	; (800668c <MX_TIM3_Init+0xe4>)
 800667e:	f000 f82b 	bl	80066d8 <HAL_TIM_MspPostInit>

}
 8006682:	bf00      	nop
 8006684:	3738      	adds	r7, #56	; 0x38
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	20000880 	.word	0x20000880
 8006690:	40000400 	.word	0x40000400

08006694 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a0b      	ldr	r2, [pc, #44]	; (80066d0 <HAL_TIM_Base_MspInit+0x3c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d10d      	bne.n	80066c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80066a6:	2300      	movs	r3, #0
 80066a8:	60fb      	str	r3, [r7, #12]
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <HAL_TIM_Base_MspInit+0x40>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	4a09      	ldr	r2, [pc, #36]	; (80066d4 <HAL_TIM_Base_MspInit+0x40>)
 80066b0:	f043 0302 	orr.w	r3, r3, #2
 80066b4:	6413      	str	r3, [r2, #64]	; 0x40
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <HAL_TIM_Base_MspInit+0x40>)
 80066b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ba:	f003 0302 	and.w	r3, r3, #2
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80066c2:	bf00      	nop
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40000400 	.word	0x40000400
 80066d4:	40023800 	.word	0x40023800

080066d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066e0:	f107 030c 	add.w	r3, r7, #12
 80066e4:	2200      	movs	r2, #0
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	609a      	str	r2, [r3, #8]
 80066ec:	60da      	str	r2, [r3, #12]
 80066ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a12      	ldr	r2, [pc, #72]	; (8006740 <HAL_TIM_MspPostInit+0x68>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d11d      	bne.n	8006736 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066fa:	2300      	movs	r3, #0
 80066fc:	60bb      	str	r3, [r7, #8]
 80066fe:	4b11      	ldr	r3, [pc, #68]	; (8006744 <HAL_TIM_MspPostInit+0x6c>)
 8006700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006702:	4a10      	ldr	r2, [pc, #64]	; (8006744 <HAL_TIM_MspPostInit+0x6c>)
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	6313      	str	r3, [r2, #48]	; 0x30
 800670a:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <HAL_TIM_MspPostInit+0x6c>)
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	60bb      	str	r3, [r7, #8]
 8006714:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = AENABLE_Pin;
 8006716:	2340      	movs	r3, #64	; 0x40
 8006718:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800671a:	2302      	movs	r3, #2
 800671c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006722:	2300      	movs	r3, #0
 8006724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006726:	2302      	movs	r3, #2
 8006728:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AENABLE_GPIO_Port, &GPIO_InitStruct);
 800672a:	f107 030c 	add.w	r3, r7, #12
 800672e:	4619      	mov	r1, r3
 8006730:	4805      	ldr	r0, [pc, #20]	; (8006748 <HAL_TIM_MspPostInit+0x70>)
 8006732:	f000 fb4f 	bl	8006dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8006736:	bf00      	nop
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	40000400 	.word	0x40000400
 8006744:	40023800 	.word	0x40023800
 8006748:	40020000 	.word	0x40020000

0800674c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006750:	4b11      	ldr	r3, [pc, #68]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006752:	4a12      	ldr	r2, [pc, #72]	; (800679c <MX_USART2_UART_Init+0x50>)
 8006754:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006756:	4b10      	ldr	r3, [pc, #64]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800675c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800675e:	4b0e      	ldr	r3, [pc, #56]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006760:	2200      	movs	r2, #0
 8006762:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006766:	2200      	movs	r2, #0
 8006768:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800676a:	4b0b      	ldr	r3, [pc, #44]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 800676c:	2200      	movs	r2, #0
 800676e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006770:	4b09      	ldr	r3, [pc, #36]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006772:	220c      	movs	r2, #12
 8006774:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006776:	4b08      	ldr	r3, [pc, #32]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006778:	2200      	movs	r2, #0
 800677a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800677c:	4b06      	ldr	r3, [pc, #24]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 800677e:	2200      	movs	r2, #0
 8006780:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <MX_USART2_UART_Init+0x4c>)
 8006784:	f004 feda 	bl	800b53c <HAL_UART_Init>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800678e:	f7fd ffc9 	bl	8004724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006792:	bf00      	nop
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop
 8006798:	200008c8 	.word	0x200008c8
 800679c:	40004400 	.word	0x40004400

080067a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	; 0x28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a8:	f107 0314 	add.w	r3, r7, #20
 80067ac:	2200      	movs	r2, #0
 80067ae:	601a      	str	r2, [r3, #0]
 80067b0:	605a      	str	r2, [r3, #4]
 80067b2:	609a      	str	r2, [r3, #8]
 80067b4:	60da      	str	r2, [r3, #12]
 80067b6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <HAL_UART_MspInit+0x84>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d12b      	bne.n	800681a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80067c2:	2300      	movs	r3, #0
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	4b18      	ldr	r3, [pc, #96]	; (8006828 <HAL_UART_MspInit+0x88>)
 80067c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <HAL_UART_MspInit+0x88>)
 80067cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d0:	6413      	str	r3, [r2, #64]	; 0x40
 80067d2:	4b15      	ldr	r3, [pc, #84]	; (8006828 <HAL_UART_MspInit+0x88>)
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067da:	613b      	str	r3, [r7, #16]
 80067dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
 80067e2:	4b11      	ldr	r3, [pc, #68]	; (8006828 <HAL_UART_MspInit+0x88>)
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	4a10      	ldr	r2, [pc, #64]	; (8006828 <HAL_UART_MspInit+0x88>)
 80067e8:	f043 0301 	orr.w	r3, r3, #1
 80067ec:	6313      	str	r3, [r2, #48]	; 0x30
 80067ee:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <HAL_UART_MspInit+0x88>)
 80067f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80067fa:	230c      	movs	r3, #12
 80067fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067fe:	2302      	movs	r3, #2
 8006800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006806:	2303      	movs	r3, #3
 8006808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800680a:	2307      	movs	r3, #7
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800680e:	f107 0314 	add.w	r3, r7, #20
 8006812:	4619      	mov	r1, r3
 8006814:	4805      	ldr	r0, [pc, #20]	; (800682c <HAL_UART_MspInit+0x8c>)
 8006816:	f000 fadd 	bl	8006dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800681a:	bf00      	nop
 800681c:	3728      	adds	r7, #40	; 0x28
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	40004400 	.word	0x40004400
 8006828:	40023800 	.word	0x40023800
 800682c:	40020000 	.word	0x40020000

08006830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8006830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006834:	480d      	ldr	r0, [pc, #52]	; (800686c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006836:	490e      	ldr	r1, [pc, #56]	; (8006870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006838:	4a0e      	ldr	r2, [pc, #56]	; (8006874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800683a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800683c:	e002      	b.n	8006844 <LoopCopyDataInit>

0800683e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800683e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006842:	3304      	adds	r3, #4

08006844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006848:	d3f9      	bcc.n	800683e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800684a:	4a0b      	ldr	r2, [pc, #44]	; (8006878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800684c:	4c0b      	ldr	r4, [pc, #44]	; (800687c <LoopFillZerobss+0x26>)
  movs r3, #0
 800684e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006850:	e001      	b.n	8006856 <LoopFillZerobss>

08006852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006854:	3204      	adds	r2, #4

08006856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006858:	d3fb      	bcc.n	8006852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800685a:	f7ff fe93 	bl	8006584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800685e:	f00e f8af 	bl	80149c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006862:	f7fd fec5 	bl	80045f0 <main>
  bx  lr    
 8006866:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006868:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800686c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006870:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8006874:	08019220 	.word	0x08019220
  ldr r2, =_sbss
 8006878:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800687c:	20012234 	.word	0x20012234

08006880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006880:	e7fe      	b.n	8006880 <ADC_IRQHandler>
	...

08006884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006888:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <HAL_Init+0x40>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a0d      	ldr	r2, [pc, #52]	; (80068c4 <HAL_Init+0x40>)
 800688e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006894:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <HAL_Init+0x40>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a0a      	ldr	r2, [pc, #40]	; (80068c4 <HAL_Init+0x40>)
 800689a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800689e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <HAL_Init+0x40>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a07      	ldr	r2, [pc, #28]	; (80068c4 <HAL_Init+0x40>)
 80068a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068ac:	2003      	movs	r0, #3
 80068ae:	f000 f8fc 	bl	8006aaa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068b2:	2005      	movs	r0, #5
 80068b4:	f7ff fd0e 	bl	80062d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068b8:	f7ff fce0 	bl	800627c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	40023c00 	.word	0x40023c00

080068c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <HAL_IncTick+0x20>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	461a      	mov	r2, r3
 80068d2:	4b06      	ldr	r3, [pc, #24]	; (80068ec <HAL_IncTick+0x24>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4413      	add	r3, r2
 80068d8:	4a04      	ldr	r2, [pc, #16]	; (80068ec <HAL_IncTick+0x24>)
 80068da:	6013      	str	r3, [r2, #0]
}
 80068dc:	bf00      	nop
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
 80068e6:	bf00      	nop
 80068e8:	20000010 	.word	0x20000010
 80068ec:	2000090c 	.word	0x2000090c

080068f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068f0:	b480      	push	{r7}
 80068f2:	af00      	add	r7, sp, #0
  return uwTick;
 80068f4:	4b03      	ldr	r3, [pc, #12]	; (8006904 <HAL_GetTick+0x14>)
 80068f6:	681b      	ldr	r3, [r3, #0]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	2000090c 	.word	0x2000090c

08006908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006910:	f7ff ffee 	bl	80068f0 <HAL_GetTick>
 8006914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d005      	beq.n	800692e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006922:	4b0a      	ldr	r3, [pc, #40]	; (800694c <HAL_Delay+0x44>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800692e:	bf00      	nop
 8006930:	f7ff ffde 	bl	80068f0 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	429a      	cmp	r2, r3
 800693e:	d8f7      	bhi.n	8006930 <HAL_Delay+0x28>
  {
  }
}
 8006940:	bf00      	nop
 8006942:	bf00      	nop
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000010 	.word	0x20000010

08006950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006960:	4b0c      	ldr	r3, [pc, #48]	; (8006994 <__NVIC_SetPriorityGrouping+0x44>)
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800696c:	4013      	ands	r3, r2
 800696e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800697c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006982:	4a04      	ldr	r2, [pc, #16]	; (8006994 <__NVIC_SetPriorityGrouping+0x44>)
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	60d3      	str	r3, [r2, #12]
}
 8006988:	bf00      	nop
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	e000ed00 	.word	0xe000ed00

08006998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800699c:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <__NVIC_GetPriorityGrouping+0x18>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	0a1b      	lsrs	r3, r3, #8
 80069a2:	f003 0307 	and.w	r3, r3, #7
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	e000ed00 	.word	0xe000ed00

080069b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b083      	sub	sp, #12
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	db0b      	blt.n	80069de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069c6:	79fb      	ldrb	r3, [r7, #7]
 80069c8:	f003 021f 	and.w	r2, r3, #31
 80069cc:	4907      	ldr	r1, [pc, #28]	; (80069ec <__NVIC_EnableIRQ+0x38>)
 80069ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069d2:	095b      	lsrs	r3, r3, #5
 80069d4:	2001      	movs	r0, #1
 80069d6:	fa00 f202 	lsl.w	r2, r0, r2
 80069da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80069de:	bf00      	nop
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	e000e100 	.word	0xe000e100

080069f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	4603      	mov	r3, r0
 80069f8:	6039      	str	r1, [r7, #0]
 80069fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	db0a      	blt.n	8006a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	490c      	ldr	r1, [pc, #48]	; (8006a3c <__NVIC_SetPriority+0x4c>)
 8006a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a0e:	0112      	lsls	r2, r2, #4
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	440b      	add	r3, r1
 8006a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a18:	e00a      	b.n	8006a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	4908      	ldr	r1, [pc, #32]	; (8006a40 <__NVIC_SetPriority+0x50>)
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	f003 030f 	and.w	r3, r3, #15
 8006a26:	3b04      	subs	r3, #4
 8006a28:	0112      	lsls	r2, r2, #4
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	761a      	strb	r2, [r3, #24]
}
 8006a30:	bf00      	nop
 8006a32:	370c      	adds	r7, #12
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	e000e100 	.word	0xe000e100
 8006a40:	e000ed00 	.word	0xe000ed00

08006a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b089      	sub	sp, #36	; 0x24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	f1c3 0307 	rsb	r3, r3, #7
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	bf28      	it	cs
 8006a62:	2304      	movcs	r3, #4
 8006a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	3304      	adds	r3, #4
 8006a6a:	2b06      	cmp	r3, #6
 8006a6c:	d902      	bls.n	8006a74 <NVIC_EncodePriority+0x30>
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	3b03      	subs	r3, #3
 8006a72:	e000      	b.n	8006a76 <NVIC_EncodePriority+0x32>
 8006a74:	2300      	movs	r3, #0
 8006a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a78:	f04f 32ff 	mov.w	r2, #4294967295
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	43da      	mvns	r2, r3
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	401a      	ands	r2, r3
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	fa01 f303 	lsl.w	r3, r1, r3
 8006a96:	43d9      	mvns	r1, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a9c:	4313      	orrs	r3, r2
         );
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3724      	adds	r7, #36	; 0x24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7ff ff4c 	bl	8006950 <__NVIC_SetPriorityGrouping>
}
 8006ab8:	bf00      	nop
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006ad2:	f7ff ff61 	bl	8006998 <__NVIC_GetPriorityGrouping>
 8006ad6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	68b9      	ldr	r1, [r7, #8]
 8006adc:	6978      	ldr	r0, [r7, #20]
 8006ade:	f7ff ffb1 	bl	8006a44 <NVIC_EncodePriority>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ae8:	4611      	mov	r1, r2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7ff ff80 	bl	80069f0 <__NVIC_SetPriority>
}
 8006af0:	bf00      	nop
 8006af2:	3718      	adds	r7, #24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff ff54 	bl	80069b4 <__NVIC_EnableIRQ>
}
 8006b0c:	bf00      	nop
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006b20:	f7ff fee6 	bl	80068f0 <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e099      	b.n	8006c64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 0201 	bic.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b50:	e00f      	b.n	8006b72 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b52:	f7ff fecd 	bl	80068f0 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b05      	cmp	r3, #5
 8006b5e:	d908      	bls.n	8006b72 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2203      	movs	r2, #3
 8006b6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e078      	b.n	8006c64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e8      	bne.n	8006b52 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4b38      	ldr	r3, [pc, #224]	; (8006c6c <HAL_DMA_Init+0x158>)
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006baa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	2b04      	cmp	r3, #4
 8006bca:	d107      	bne.n	8006bdc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f023 0307 	bic.w	r3, r3, #7
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d117      	bne.n	8006c36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00e      	beq.n	8006c36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 f85f 	bl	8006cdc <DMA_CheckFifoParam>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d008      	beq.n	8006c36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2240      	movs	r2, #64	; 0x40
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006c32:	2301      	movs	r3, #1
 8006c34:	e016      	b.n	8006c64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f816 	bl	8006c70 <DMA_CalcBaseAndBitshift>
 8006c44:	4603      	mov	r3, r0
 8006c46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4c:	223f      	movs	r2, #63	; 0x3f
 8006c4e:	409a      	lsls	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c62:	2300      	movs	r3, #0
}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3718      	adds	r7, #24
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	f010803f 	.word	0xf010803f

08006c70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	3b10      	subs	r3, #16
 8006c80:	4a14      	ldr	r2, [pc, #80]	; (8006cd4 <DMA_CalcBaseAndBitshift+0x64>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	091b      	lsrs	r3, r3, #4
 8006c88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c8a:	4a13      	ldr	r2, [pc, #76]	; (8006cd8 <DMA_CalcBaseAndBitshift+0x68>)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4413      	add	r3, r2
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d909      	bls.n	8006cb2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ca6:	f023 0303 	bic.w	r3, r3, #3
 8006caa:	1d1a      	adds	r2, r3, #4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	659a      	str	r2, [r3, #88]	; 0x58
 8006cb0:	e007      	b.n	8006cc2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006cba:	f023 0303 	bic.w	r3, r3, #3
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	aaaaaaab 	.word	0xaaaaaaab
 8006cd8:	08018d60 	.word	0x08018d60

08006cdc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d11f      	bne.n	8006d36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d856      	bhi.n	8006daa <DMA_CheckFifoParam+0xce>
 8006cfc:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <DMA_CheckFifoParam+0x28>)
 8006cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d02:	bf00      	nop
 8006d04:	08006d15 	.word	0x08006d15
 8006d08:	08006d27 	.word	0x08006d27
 8006d0c:	08006d15 	.word	0x08006d15
 8006d10:	08006dab 	.word	0x08006dab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d046      	beq.n	8006dae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d24:	e043      	b.n	8006dae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d2e:	d140      	bne.n	8006db2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d34:	e03d      	b.n	8006db2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d3e:	d121      	bne.n	8006d84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b03      	cmp	r3, #3
 8006d44:	d837      	bhi.n	8006db6 <DMA_CheckFifoParam+0xda>
 8006d46:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <DMA_CheckFifoParam+0x70>)
 8006d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4c:	08006d5d 	.word	0x08006d5d
 8006d50:	08006d63 	.word	0x08006d63
 8006d54:	08006d5d 	.word	0x08006d5d
 8006d58:	08006d75 	.word	0x08006d75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d60:	e030      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d025      	beq.n	8006dba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d72:	e022      	b.n	8006dba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006d7c:	d11f      	bne.n	8006dbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006d82:	e01c      	b.n	8006dbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d903      	bls.n	8006d92 <DMA_CheckFifoParam+0xb6>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d003      	beq.n	8006d98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d90:	e018      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	73fb      	strb	r3, [r7, #15]
      break;
 8006d96:	e015      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00e      	beq.n	8006dc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	73fb      	strb	r3, [r7, #15]
      break;
 8006da8:	e00b      	b.n	8006dc2 <DMA_CheckFifoParam+0xe6>
      break;
 8006daa:	bf00      	nop
 8006dac:	e00a      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8006dae:	bf00      	nop
 8006db0:	e008      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8006db2:	bf00      	nop
 8006db4:	e006      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8006db6:	bf00      	nop
 8006db8:	e004      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8006dba:	bf00      	nop
 8006dbc:	e002      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8006dbe:	bf00      	nop
 8006dc0:	e000      	b.n	8006dc4 <DMA_CheckFifoParam+0xe8>
      break;
 8006dc2:	bf00      	nop
    }
  } 
  
  return status; 
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop

08006dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b089      	sub	sp, #36	; 0x24
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006dea:	2300      	movs	r3, #0
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	e159      	b.n	80070a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006df0:	2201      	movs	r2, #1
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4013      	ands	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	f040 8148 	bne.w	800709e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f003 0303 	and.w	r3, r3, #3
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d005      	beq.n	8006e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	d130      	bne.n	8006e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	2203      	movs	r2, #3
 8006e32:	fa02 f303 	lsl.w	r3, r2, r3
 8006e36:	43db      	mvns	r3, r3
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	69fb      	ldr	r3, [r7, #28]
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	43db      	mvns	r3, r3
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	4013      	ands	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	091b      	lsrs	r3, r3, #4
 8006e72:	f003 0201 	and.w	r2, r3, #1
 8006e76:	69fb      	ldr	r3, [r7, #28]
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69ba      	ldr	r2, [r7, #24]
 8006e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f003 0303 	and.w	r3, r3, #3
 8006e90:	2b03      	cmp	r3, #3
 8006e92:	d017      	beq.n	8006ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	2203      	movs	r2, #3
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	005b      	lsls	r3, r3, #1
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	f003 0303 	and.w	r3, r3, #3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d123      	bne.n	8006f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	08da      	lsrs	r2, r3, #3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3208      	adds	r2, #8
 8006ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	220f      	movs	r2, #15
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	fa02 f303 	lsl.w	r3, r2, r3
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	08da      	lsrs	r2, r3, #3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3208      	adds	r2, #8
 8006f12:	69b9      	ldr	r1, [r7, #24]
 8006f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	005b      	lsls	r3, r3, #1
 8006f22:	2203      	movs	r2, #3
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	69ba      	ldr	r2, [r7, #24]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f003 0203 	and.w	r2, r3, #3
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f000 80a2 	beq.w	800709e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	4b57      	ldr	r3, [pc, #348]	; (80070bc <HAL_GPIO_Init+0x2e8>)
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	4a56      	ldr	r2, [pc, #344]	; (80070bc <HAL_GPIO_Init+0x2e8>)
 8006f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f68:	6453      	str	r3, [r2, #68]	; 0x44
 8006f6a:	4b54      	ldr	r3, [pc, #336]	; (80070bc <HAL_GPIO_Init+0x2e8>)
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f76:	4a52      	ldr	r2, [pc, #328]	; (80070c0 <HAL_GPIO_Init+0x2ec>)
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	089b      	lsrs	r3, r3, #2
 8006f7c:	3302      	adds	r3, #2
 8006f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f003 0303 	and.w	r3, r3, #3
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	220f      	movs	r2, #15
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	43db      	mvns	r3, r3
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	4013      	ands	r3, r2
 8006f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a49      	ldr	r2, [pc, #292]	; (80070c4 <HAL_GPIO_Init+0x2f0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d019      	beq.n	8006fd6 <HAL_GPIO_Init+0x202>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a48      	ldr	r2, [pc, #288]	; (80070c8 <HAL_GPIO_Init+0x2f4>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d013      	beq.n	8006fd2 <HAL_GPIO_Init+0x1fe>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a47      	ldr	r2, [pc, #284]	; (80070cc <HAL_GPIO_Init+0x2f8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d00d      	beq.n	8006fce <HAL_GPIO_Init+0x1fa>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	4a46      	ldr	r2, [pc, #280]	; (80070d0 <HAL_GPIO_Init+0x2fc>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d007      	beq.n	8006fca <HAL_GPIO_Init+0x1f6>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a45      	ldr	r2, [pc, #276]	; (80070d4 <HAL_GPIO_Init+0x300>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d101      	bne.n	8006fc6 <HAL_GPIO_Init+0x1f2>
 8006fc2:	2304      	movs	r3, #4
 8006fc4:	e008      	b.n	8006fd8 <HAL_GPIO_Init+0x204>
 8006fc6:	2307      	movs	r3, #7
 8006fc8:	e006      	b.n	8006fd8 <HAL_GPIO_Init+0x204>
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e004      	b.n	8006fd8 <HAL_GPIO_Init+0x204>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e002      	b.n	8006fd8 <HAL_GPIO_Init+0x204>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e000      	b.n	8006fd8 <HAL_GPIO_Init+0x204>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	69fa      	ldr	r2, [r7, #28]
 8006fda:	f002 0203 	and.w	r2, r2, #3
 8006fde:	0092      	lsls	r2, r2, #2
 8006fe0:	4093      	lsls	r3, r2
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006fe8:	4935      	ldr	r1, [pc, #212]	; (80070c0 <HAL_GPIO_Init+0x2ec>)
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	089b      	lsrs	r3, r3, #2
 8006fee:	3302      	adds	r3, #2
 8006ff0:	69ba      	ldr	r2, [r7, #24]
 8006ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006ff6:	4b38      	ldr	r3, [pc, #224]	; (80070d8 <HAL_GPIO_Init+0x304>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	43db      	mvns	r3, r3
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	4013      	ands	r3, r2
 8007004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	4313      	orrs	r3, r2
 8007018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800701a:	4a2f      	ldr	r2, [pc, #188]	; (80070d8 <HAL_GPIO_Init+0x304>)
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007020:	4b2d      	ldr	r3, [pc, #180]	; (80070d8 <HAL_GPIO_Init+0x304>)
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	43db      	mvns	r3, r3
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	4013      	ands	r3, r2
 800702e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d003      	beq.n	8007044 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007044:	4a24      	ldr	r2, [pc, #144]	; (80070d8 <HAL_GPIO_Init+0x304>)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800704a:	4b23      	ldr	r3, [pc, #140]	; (80070d8 <HAL_GPIO_Init+0x304>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	43db      	mvns	r3, r3
 8007054:	69ba      	ldr	r2, [r7, #24]
 8007056:	4013      	ands	r3, r2
 8007058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	4313      	orrs	r3, r2
 800706c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800706e:	4a1a      	ldr	r2, [pc, #104]	; (80070d8 <HAL_GPIO_Init+0x304>)
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007074:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <HAL_GPIO_Init+0x304>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	43db      	mvns	r3, r3
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	4013      	ands	r3, r2
 8007082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d003      	beq.n	8007098 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007090:	69ba      	ldr	r2, [r7, #24]
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007098:	4a0f      	ldr	r2, [pc, #60]	; (80070d8 <HAL_GPIO_Init+0x304>)
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	3301      	adds	r3, #1
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	f67f aea2 	bls.w	8006df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	3724      	adds	r7, #36	; 0x24
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	40023800 	.word	0x40023800
 80070c0:	40013800 	.word	0x40013800
 80070c4:	40020000 	.word	0x40020000
 80070c8:	40020400 	.word	0x40020400
 80070cc:	40020800 	.word	0x40020800
 80070d0:	40020c00 	.word	0x40020c00
 80070d4:	40021000 	.word	0x40021000
 80070d8:	40013c00 	.word	0x40013c00

080070dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	887b      	ldrh	r3, [r7, #2]
 80070ee:	4013      	ands	r3, r2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d002      	beq.n	80070fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070f4:	2301      	movs	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
 80070f8:	e001      	b.n	80070fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	460b      	mov	r3, r1
 8007116:	807b      	strh	r3, [r7, #2]
 8007118:	4613      	mov	r3, r2
 800711a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800711c:	787b      	ldrb	r3, [r7, #1]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007122:	887a      	ldrh	r2, [r7, #2]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007128:	e003      	b.n	8007132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800712a:	887b      	ldrh	r3, [r7, #2]
 800712c:	041a      	lsls	r2, r3, #16
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	619a      	str	r2, [r3, #24]
}
 8007132:	bf00      	nop
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
	...

08007140 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e12b      	b.n	80073aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fd f9fa 	bl	8004560 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2224      	movs	r2, #36	; 0x24
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0201 	bic.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80071a4:	f002 f99e 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 80071a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	4a81      	ldr	r2, [pc, #516]	; (80073b4 <HAL_I2C_Init+0x274>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d807      	bhi.n	80071c4 <HAL_I2C_Init+0x84>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4a80      	ldr	r2, [pc, #512]	; (80073b8 <HAL_I2C_Init+0x278>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	bf94      	ite	ls
 80071bc:	2301      	movls	r3, #1
 80071be:	2300      	movhi	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	e006      	b.n	80071d2 <HAL_I2C_Init+0x92>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	4a7d      	ldr	r2, [pc, #500]	; (80073bc <HAL_I2C_Init+0x27c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	bf94      	ite	ls
 80071cc:	2301      	movls	r3, #1
 80071ce:	2300      	movhi	r3, #0
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e0e7      	b.n	80073aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	4a78      	ldr	r2, [pc, #480]	; (80073c0 <HAL_I2C_Init+0x280>)
 80071de:	fba2 2303 	umull	r2, r3, r2, r3
 80071e2:	0c9b      	lsrs	r3, r3, #18
 80071e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	4a6a      	ldr	r2, [pc, #424]	; (80073b4 <HAL_I2C_Init+0x274>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d802      	bhi.n	8007214 <HAL_I2C_Init+0xd4>
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	3301      	adds	r3, #1
 8007212:	e009      	b.n	8007228 <HAL_I2C_Init+0xe8>
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800721a:	fb02 f303 	mul.w	r3, r2, r3
 800721e:	4a69      	ldr	r2, [pc, #420]	; (80073c4 <HAL_I2C_Init+0x284>)
 8007220:	fba2 2303 	umull	r2, r3, r2, r3
 8007224:	099b      	lsrs	r3, r3, #6
 8007226:	3301      	adds	r3, #1
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	6812      	ldr	r2, [r2, #0]
 800722c:	430b      	orrs	r3, r1
 800722e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800723a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	495c      	ldr	r1, [pc, #368]	; (80073b4 <HAL_I2C_Init+0x274>)
 8007244:	428b      	cmp	r3, r1
 8007246:	d819      	bhi.n	800727c <HAL_I2C_Init+0x13c>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	1e59      	subs	r1, r3, #1
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	005b      	lsls	r3, r3, #1
 8007252:	fbb1 f3f3 	udiv	r3, r1, r3
 8007256:	1c59      	adds	r1, r3, #1
 8007258:	f640 73fc 	movw	r3, #4092	; 0xffc
 800725c:	400b      	ands	r3, r1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <HAL_I2C_Init+0x138>
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	1e59      	subs	r1, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007270:	3301      	adds	r3, #1
 8007272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007276:	e051      	b.n	800731c <HAL_I2C_Init+0x1dc>
 8007278:	2304      	movs	r3, #4
 800727a:	e04f      	b.n	800731c <HAL_I2C_Init+0x1dc>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d111      	bne.n	80072a8 <HAL_I2C_Init+0x168>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	1e58      	subs	r0, r3, #1
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6859      	ldr	r1, [r3, #4]
 800728c:	460b      	mov	r3, r1
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	440b      	add	r3, r1
 8007292:	fbb0 f3f3 	udiv	r3, r0, r3
 8007296:	3301      	adds	r3, #1
 8007298:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800729c:	2b00      	cmp	r3, #0
 800729e:	bf0c      	ite	eq
 80072a0:	2301      	moveq	r3, #1
 80072a2:	2300      	movne	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	e012      	b.n	80072ce <HAL_I2C_Init+0x18e>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	1e58      	subs	r0, r3, #1
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6859      	ldr	r1, [r3, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	440b      	add	r3, r1
 80072b6:	0099      	lsls	r1, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80072be:	3301      	adds	r3, #1
 80072c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bf0c      	ite	eq
 80072c8:	2301      	moveq	r3, #1
 80072ca:	2300      	movne	r3, #0
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_I2C_Init+0x196>
 80072d2:	2301      	movs	r3, #1
 80072d4:	e022      	b.n	800731c <HAL_I2C_Init+0x1dc>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d10e      	bne.n	80072fc <HAL_I2C_Init+0x1bc>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	1e58      	subs	r0, r3, #1
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6859      	ldr	r1, [r3, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	440b      	add	r3, r1
 80072ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80072f0:	3301      	adds	r3, #1
 80072f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fa:	e00f      	b.n	800731c <HAL_I2C_Init+0x1dc>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	1e58      	subs	r0, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6859      	ldr	r1, [r3, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	440b      	add	r3, r1
 800730a:	0099      	lsls	r1, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007312:	3301      	adds	r3, #1
 8007314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800731c:	6879      	ldr	r1, [r7, #4]
 800731e:	6809      	ldr	r1, [r1, #0]
 8007320:	4313      	orrs	r3, r2
 8007322:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69da      	ldr	r2, [r3, #28]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a1b      	ldr	r3, [r3, #32]
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800734a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6911      	ldr	r1, [r2, #16]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	68d2      	ldr	r2, [r2, #12]
 8007356:	4311      	orrs	r1, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6812      	ldr	r2, [r2, #0]
 800735c:	430b      	orrs	r3, r1
 800735e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	695a      	ldr	r2, [r3, #20]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	431a      	orrs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f042 0201 	orr.w	r2, r2, #1
 800738a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2220      	movs	r2, #32
 8007396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	000186a0 	.word	0x000186a0
 80073b8:	001e847f 	.word	0x001e847f
 80073bc:	003d08ff 	.word	0x003d08ff
 80073c0:	431bde83 	.word	0x431bde83
 80073c4:	10624dd3 	.word	0x10624dd3

080073c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af02      	add	r7, sp, #8
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	607a      	str	r2, [r7, #4]
 80073d2:	461a      	mov	r2, r3
 80073d4:	460b      	mov	r3, r1
 80073d6:	817b      	strh	r3, [r7, #10]
 80073d8:	4613      	mov	r3, r2
 80073da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80073dc:	f7ff fa88 	bl	80068f0 <HAL_GetTick>
 80073e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	f040 80e0 	bne.w	80075b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	2319      	movs	r3, #25
 80073f6:	2201      	movs	r2, #1
 80073f8:	4970      	ldr	r1, [pc, #448]	; (80075bc <HAL_I2C_Master_Transmit+0x1f4>)
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f001 fa24 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d001      	beq.n	800740a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007406:	2302      	movs	r3, #2
 8007408:	e0d3      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007410:	2b01      	cmp	r3, #1
 8007412:	d101      	bne.n	8007418 <HAL_I2C_Master_Transmit+0x50>
 8007414:	2302      	movs	r3, #2
 8007416:	e0cc      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	2b01      	cmp	r3, #1
 800742c:	d007      	beq.n	800743e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800744c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2221      	movs	r2, #33	; 0x21
 8007452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2210      	movs	r2, #16
 800745a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	893a      	ldrh	r2, [r7, #8]
 800746e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a50      	ldr	r2, [pc, #320]	; (80075c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800747e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007480:	8979      	ldrh	r1, [r7, #10]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	6a3a      	ldr	r2, [r7, #32]
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 ff10 	bl	80082ac <I2C_MasterRequestWrite>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e08d      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007496:	2300      	movs	r3, #0
 8007498:	613b      	str	r3, [r7, #16]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80074ac:	e066      	b.n	800757c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	6a39      	ldr	r1, [r7, #32]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f001 fa9e 	bl	80089f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00d      	beq.n	80074da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d107      	bne.n	80074d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e06b      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074de:	781a      	ldrb	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	f003 0304 	and.w	r3, r3, #4
 8007514:	2b04      	cmp	r3, #4
 8007516:	d11b      	bne.n	8007550 <HAL_I2C_Master_Transmit+0x188>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d017      	beq.n	8007550 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	6a39      	ldr	r1, [r7, #32]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f001 fa8e 	bl	8008a76 <I2C_WaitOnBTFFlagUntilTimeout>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00d      	beq.n	800757c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	2b04      	cmp	r3, #4
 8007566:	d107      	bne.n	8007578 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007576:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	e01a      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007580:	2b00      	cmp	r3, #0
 8007582:	d194      	bne.n	80074ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2220      	movs	r2, #32
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	e000      	b.n	80075b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80075b0:	2302      	movs	r3, #2
  }
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	00100002 	.word	0x00100002
 80075c0:	ffff0000 	.word	0xffff0000

080075c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08c      	sub	sp, #48	; 0x30
 80075c8:	af02      	add	r7, sp, #8
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	607a      	str	r2, [r7, #4]
 80075ce:	461a      	mov	r2, r3
 80075d0:	460b      	mov	r3, r1
 80075d2:	817b      	strh	r3, [r7, #10]
 80075d4:	4613      	mov	r3, r2
 80075d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80075d8:	f7ff f98a 	bl	80068f0 <HAL_GetTick>
 80075dc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b20      	cmp	r3, #32
 80075e8:	f040 820b 	bne.w	8007a02 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	2319      	movs	r3, #25
 80075f2:	2201      	movs	r2, #1
 80075f4:	497c      	ldr	r1, [pc, #496]	; (80077e8 <HAL_I2C_Master_Receive+0x224>)
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 f926 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007602:	2302      	movs	r3, #2
 8007604:	e1fe      	b.n	8007a04 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_I2C_Master_Receive+0x50>
 8007610:	2302      	movs	r3, #2
 8007612:	e1f7      	b.n	8007a04 <HAL_I2C_Master_Receive+0x440>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	2b01      	cmp	r3, #1
 8007628:	d007      	beq.n	800763a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0201 	orr.w	r2, r2, #1
 8007638:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007648:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2222      	movs	r2, #34	; 0x22
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2210      	movs	r2, #16
 8007656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	893a      	ldrh	r2, [r7, #8]
 800766a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007670:	b29a      	uxth	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4a5c      	ldr	r2, [pc, #368]	; (80077ec <HAL_I2C_Master_Receive+0x228>)
 800767a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800767c:	8979      	ldrh	r1, [r7, #10]
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007682:	68f8      	ldr	r0, [r7, #12]
 8007684:	f000 fe94 	bl	80083b0 <I2C_MasterRequestRead>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e1b8      	b.n	8007a04 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007696:	2b00      	cmp	r3, #0
 8007698:	d113      	bne.n	80076c2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800769a:	2300      	movs	r3, #0
 800769c:	623b      	str	r3, [r7, #32]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	623b      	str	r3, [r7, #32]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	699b      	ldr	r3, [r3, #24]
 80076ac:	623b      	str	r3, [r7, #32]
 80076ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076be:	601a      	str	r2, [r3, #0]
 80076c0:	e18c      	b.n	80079dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d11b      	bne.n	8007702 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076da:	2300      	movs	r3, #0
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	61fb      	str	r3, [r7, #28]
 80076ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e16c      	b.n	80079dc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007706:	2b02      	cmp	r3, #2
 8007708:	d11b      	bne.n	8007742 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007718:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800772a:	2300      	movs	r3, #0
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	61bb      	str	r3, [r7, #24]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	61bb      	str	r3, [r7, #24]
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	e14c      	b.n	80079dc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007750:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007752:	2300      	movs	r3, #0
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	617b      	str	r3, [r7, #20]
 8007766:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007768:	e138      	b.n	80079dc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776e:	2b03      	cmp	r3, #3
 8007770:	f200 80f1 	bhi.w	8007956 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007778:	2b01      	cmp	r3, #1
 800777a:	d123      	bne.n	80077c4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800777c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	f001 f9b9 	bl	8008af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e139      	b.n	8007a04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691a      	ldr	r2, [r3, #16]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779a:	b2d2      	uxtb	r2, r2
 800779c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ac:	3b01      	subs	r3, #1
 80077ae:	b29a      	uxth	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	3b01      	subs	r3, #1
 80077bc:	b29a      	uxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80077c2:	e10b      	b.n	80079dc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d14e      	bne.n	800786a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	2200      	movs	r2, #0
 80077d4:	4906      	ldr	r1, [pc, #24]	; (80077f0 <HAL_I2C_Master_Receive+0x22c>)
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f001 f836 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e10e      	b.n	8007a04 <HAL_I2C_Master_Receive+0x440>
 80077e6:	bf00      	nop
 80077e8:	00100002 	.word	0x00100002
 80077ec:	ffff0000 	.word	0xffff0000
 80077f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007802:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	691a      	ldr	r2, [r3, #16]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	b2d2      	uxtb	r2, r2
 8007810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007820:	3b01      	subs	r3, #1
 8007822:	b29a      	uxth	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691a      	ldr	r2, [r3, #16]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007852:	3b01      	subs	r3, #1
 8007854:	b29a      	uxth	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785e:	b29b      	uxth	r3, r3
 8007860:	3b01      	subs	r3, #1
 8007862:	b29a      	uxth	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007868:	e0b8      	b.n	80079dc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	9300      	str	r3, [sp, #0]
 800786e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007870:	2200      	movs	r2, #0
 8007872:	4966      	ldr	r1, [pc, #408]	; (8007a0c <HAL_I2C_Master_Receive+0x448>)
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 ffe7 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0bf      	b.n	8007a04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007892:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	b2d2      	uxtb	r2, r2
 80078a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	3b01      	subs	r3, #1
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	2200      	movs	r2, #0
 80078ce:	494f      	ldr	r1, [pc, #316]	; (8007a0c <HAL_I2C_Master_Receive+0x448>)
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 ffb9 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80078dc:	2301      	movs	r3, #1
 80078de:	e091      	b.n	8007a04 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	691a      	ldr	r2, [r3, #16]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800793e:	3b01      	subs	r3, #1
 8007940:	b29a      	uxth	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007954:	e042      	b.n	80079dc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007958:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f001 f8cc 	bl	8008af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e04c      	b.n	8007a04 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	691a      	ldr	r2, [r3, #16]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	b2d2      	uxtb	r2, r2
 8007976:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007986:	3b01      	subs	r3, #1
 8007988:	b29a      	uxth	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007992:	b29b      	uxth	r3, r3
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0304 	and.w	r3, r3, #4
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d118      	bne.n	80079dc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079c6:	3b01      	subs	r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	3b01      	subs	r3, #1
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f47f aec2 	bne.w	800776a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e000      	b.n	8007a04 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007a02:	2302      	movs	r3, #2
  }
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3728      	adds	r7, #40	; 0x28
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}
 8007a0c:	00010004 	.word	0x00010004

08007a10 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b088      	sub	sp, #32
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	60f8      	str	r0, [r7, #12]
 8007a18:	4608      	mov	r0, r1
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4603      	mov	r3, r0
 8007a20:	817b      	strh	r3, [r7, #10]
 8007a22:	460b      	mov	r3, r1
 8007a24:	813b      	strh	r3, [r7, #8]
 8007a26:	4613      	mov	r3, r2
 8007a28:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007a2a:	f7fe ff61 	bl	80068f0 <HAL_GetTick>
 8007a2e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	f040 80d9 	bne.w	8007bf0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	2319      	movs	r3, #25
 8007a44:	2201      	movs	r2, #1
 8007a46:	496d      	ldr	r1, [pc, #436]	; (8007bfc <HAL_I2C_Mem_Write+0x1ec>)
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 fefd 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007a54:	2302      	movs	r3, #2
 8007a56:	e0cc      	b.n	8007bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d101      	bne.n	8007a66 <HAL_I2C_Mem_Write+0x56>
 8007a62:	2302      	movs	r3, #2
 8007a64:	e0c5      	b.n	8007bf2 <HAL_I2C_Mem_Write+0x1e2>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d007      	beq.n	8007a8c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a9a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2221      	movs	r2, #33	; 0x21
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2240      	movs	r2, #64	; 0x40
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a3a      	ldr	r2, [r7, #32]
 8007ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007abc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4a4d      	ldr	r2, [pc, #308]	; (8007c00 <HAL_I2C_Mem_Write+0x1f0>)
 8007acc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ace:	88f8      	ldrh	r0, [r7, #6]
 8007ad0:	893a      	ldrh	r2, [r7, #8]
 8007ad2:	8979      	ldrh	r1, [r7, #10]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	9301      	str	r3, [sp, #4]
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	4603      	mov	r3, r0
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 fd34 	bl	800854c <I2C_RequestMemoryWrite>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d052      	beq.n	8007b90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e081      	b.n	8007bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 ff7e 	bl	80089f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00d      	beq.n	8007b1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d107      	bne.n	8007b16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e06b      	b.n	8007bf2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	781a      	ldrb	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2a:	1c5a      	adds	r2, r3, #1
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b34:	3b01      	subs	r3, #1
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	3b01      	subs	r3, #1
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	f003 0304 	and.w	r3, r3, #4
 8007b54:	2b04      	cmp	r3, #4
 8007b56:	d11b      	bne.n	8007b90 <HAL_I2C_Mem_Write+0x180>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d017      	beq.n	8007b90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1aa      	bne.n	8007aee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 ff6a 	bl	8008a76 <I2C_WaitOnBTFFlagUntilTimeout>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00d      	beq.n	8007bc4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d107      	bne.n	8007bc0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bbe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e016      	b.n	8007bf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2200      	movs	r2, #0
 8007be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	e000      	b.n	8007bf2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007bf0:	2302      	movs	r3, #2
  }
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	00100002 	.word	0x00100002
 8007c00:	ffff0000 	.word	0xffff0000

08007c04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b08c      	sub	sp, #48	; 0x30
 8007c08:	af02      	add	r7, sp, #8
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	4608      	mov	r0, r1
 8007c0e:	4611      	mov	r1, r2
 8007c10:	461a      	mov	r2, r3
 8007c12:	4603      	mov	r3, r0
 8007c14:	817b      	strh	r3, [r7, #10]
 8007c16:	460b      	mov	r3, r1
 8007c18:	813b      	strh	r3, [r7, #8]
 8007c1a:	4613      	mov	r3, r2
 8007c1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c1e:	f7fe fe67 	bl	80068f0 <HAL_GetTick>
 8007c22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b20      	cmp	r3, #32
 8007c2e:	f040 8208 	bne.w	8008042 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	2319      	movs	r3, #25
 8007c38:	2201      	movs	r2, #1
 8007c3a:	497b      	ldr	r1, [pc, #492]	; (8007e28 <HAL_I2C_Mem_Read+0x224>)
 8007c3c:	68f8      	ldr	r0, [r7, #12]
 8007c3e:	f000 fe03 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e1fb      	b.n	8008044 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d101      	bne.n	8007c5a <HAL_I2C_Mem_Read+0x56>
 8007c56:	2302      	movs	r3, #2
 8007c58:	e1f4      	b.n	8008044 <HAL_I2C_Mem_Read+0x440>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d007      	beq.n	8007c80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f042 0201 	orr.w	r2, r2, #1
 8007c7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2222      	movs	r2, #34	; 0x22
 8007c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2240      	movs	r2, #64	; 0x40
 8007c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4a5b      	ldr	r2, [pc, #364]	; (8007e2c <HAL_I2C_Mem_Read+0x228>)
 8007cc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007cc2:	88f8      	ldrh	r0, [r7, #6]
 8007cc4:	893a      	ldrh	r2, [r7, #8]
 8007cc6:	8979      	ldrh	r1, [r7, #10]
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	9301      	str	r3, [sp, #4]
 8007ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cce:	9300      	str	r3, [sp, #0]
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fcd0 	bl	8008678 <I2C_RequestMemoryRead>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e1b0      	b.n	8008044 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d113      	bne.n	8007d12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cea:	2300      	movs	r3, #0
 8007cec:	623b      	str	r3, [r7, #32]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	695b      	ldr	r3, [r3, #20]
 8007cf4:	623b      	str	r3, [r7, #32]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	623b      	str	r3, [r7, #32]
 8007cfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	e184      	b.n	800801c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d11b      	bne.n	8007d52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	695b      	ldr	r3, [r3, #20]
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	699b      	ldr	r3, [r3, #24]
 8007d3c:	61fb      	str	r3, [r7, #28]
 8007d3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	e164      	b.n	800801c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d11b      	bne.n	8007d92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	61bb      	str	r3, [r7, #24]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	695b      	ldr	r3, [r3, #20]
 8007d84:	61bb      	str	r3, [r7, #24]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	61bb      	str	r3, [r7, #24]
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	e144      	b.n	800801c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	695b      	ldr	r3, [r3, #20]
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	617b      	str	r3, [r7, #20]
 8007da6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007da8:	e138      	b.n	800801c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	f200 80f1 	bhi.w	8007f96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d123      	bne.n	8007e04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 fe99 	bl	8008af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e139      	b.n	8008044 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	691a      	ldr	r2, [r3, #16]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dda:	b2d2      	uxtb	r2, r2
 8007ddc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dec:	3b01      	subs	r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e02:	e10b      	b.n	800801c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d14e      	bne.n	8007eaa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	2200      	movs	r2, #0
 8007e14:	4906      	ldr	r1, [pc, #24]	; (8007e30 <HAL_I2C_Mem_Read+0x22c>)
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fd16 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d008      	beq.n	8007e34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e10e      	b.n	8008044 <HAL_I2C_Mem_Read+0x440>
 8007e26:	bf00      	nop
 8007e28:	00100002 	.word	0x00100002
 8007e2c:	ffff0000 	.word	0xffff0000
 8007e30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	691a      	ldr	r2, [r3, #16]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	b2d2      	uxtb	r2, r2
 8007e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	1c5a      	adds	r2, r3, #1
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	b2d2      	uxtb	r2, r2
 8007e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e88:	1c5a      	adds	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e92:	3b01      	subs	r3, #1
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007ea8:	e0b8      	b.n	800801c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	4966      	ldr	r1, [pc, #408]	; (800804c <HAL_I2C_Mem_Read+0x448>)
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fcc7 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d001      	beq.n	8007ec4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e0bf      	b.n	8008044 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	691a      	ldr	r2, [r3, #16]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	b2d2      	uxtb	r2, r2
 8007ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef0:	3b01      	subs	r3, #1
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	3b01      	subs	r3, #1
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	494f      	ldr	r1, [pc, #316]	; (800804c <HAL_I2C_Mem_Read+0x448>)
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 fc99 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d001      	beq.n	8007f20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e091      	b.n	8008044 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	691a      	ldr	r2, [r3, #16]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3a:	b2d2      	uxtb	r2, r2
 8007f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	1c5a      	adds	r2, r3, #1
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	b29a      	uxth	r2, r3
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	691a      	ldr	r2, [r3, #16]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	b2d2      	uxtb	r2, r2
 8007f6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	3b01      	subs	r3, #1
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f94:	e042      	b.n	800801c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f000 fdac 	bl	8008af8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e04c      	b.n	8008044 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	695b      	ldr	r3, [r3, #20]
 8007fe2:	f003 0304 	and.w	r3, r3, #4
 8007fe6:	2b04      	cmp	r3, #4
 8007fe8:	d118      	bne.n	800801c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	691a      	ldr	r2, [r3, #16]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff4:	b2d2      	uxtb	r2, r2
 8007ff6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffc:	1c5a      	adds	r2, r3, #1
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008012:	b29b      	uxth	r3, r3
 8008014:	3b01      	subs	r3, #1
 8008016:	b29a      	uxth	r2, r3
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008020:	2b00      	cmp	r3, #0
 8008022:	f47f aec2 	bne.w	8007daa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2220      	movs	r2, #32
 800802a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800803e:	2300      	movs	r3, #0
 8008040:	e000      	b.n	8008044 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008042:	2302      	movs	r3, #2
  }
}
 8008044:	4618      	mov	r0, r3
 8008046:	3728      	adds	r7, #40	; 0x28
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	00010004 	.word	0x00010004

08008050 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08a      	sub	sp, #40	; 0x28
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	607a      	str	r2, [r7, #4]
 800805a:	603b      	str	r3, [r7, #0]
 800805c:	460b      	mov	r3, r1
 800805e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008060:	f7fe fc46 	bl	80068f0 <HAL_GetTick>
 8008064:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b20      	cmp	r3, #32
 8008074:	f040 8111 	bne.w	800829a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	2319      	movs	r3, #25
 800807e:	2201      	movs	r2, #1
 8008080:	4988      	ldr	r1, [pc, #544]	; (80082a4 <HAL_I2C_IsDeviceReady+0x254>)
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f000 fbe0 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800808e:	2302      	movs	r3, #2
 8008090:	e104      	b.n	800829c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008098:	2b01      	cmp	r3, #1
 800809a:	d101      	bne.n	80080a0 <HAL_I2C_IsDeviceReady+0x50>
 800809c:	2302      	movs	r3, #2
 800809e:	e0fd      	b.n	800829c <HAL_I2C_IsDeviceReady+0x24c>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d007      	beq.n	80080c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f042 0201 	orr.w	r2, r2, #1
 80080c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2224      	movs	r2, #36	; 0x24
 80080da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4a70      	ldr	r2, [pc, #448]	; (80082a8 <HAL_I2C_IsDeviceReady+0x258>)
 80080e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2200      	movs	r2, #0
 8008102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fb9e 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00d      	beq.n	800812e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800811c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008120:	d103      	bne.n	800812a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008128:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e0b6      	b.n	800829c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800812e:	897b      	ldrh	r3, [r7, #10]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	461a      	mov	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800813c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800813e:	f7fe fbd7 	bl	80068f0 <HAL_GetTick>
 8008142:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	695b      	ldr	r3, [r3, #20]
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	2b02      	cmp	r3, #2
 8008150:	bf0c      	ite	eq
 8008152:	2301      	moveq	r3, #1
 8008154:	2300      	movne	r3, #0
 8008156:	b2db      	uxtb	r3, r3
 8008158:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008168:	bf0c      	ite	eq
 800816a:	2301      	moveq	r3, #1
 800816c:	2300      	movne	r3, #0
 800816e:	b2db      	uxtb	r3, r3
 8008170:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008172:	e025      	b.n	80081c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008174:	f7fe fbbc 	bl	80068f0 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	429a      	cmp	r2, r3
 8008182:	d302      	bcc.n	800818a <HAL_I2C_IsDeviceReady+0x13a>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d103      	bne.n	8008192 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	22a0      	movs	r2, #160	; 0xa0
 800818e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	695b      	ldr	r3, [r3, #20]
 8008198:	f003 0302 	and.w	r3, r3, #2
 800819c:	2b02      	cmp	r3, #2
 800819e:	bf0c      	ite	eq
 80081a0:	2301      	moveq	r3, #1
 80081a2:	2300      	movne	r3, #0
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081b6:	bf0c      	ite	eq
 80081b8:	2301      	moveq	r3, #1
 80081ba:	2300      	movne	r3, #0
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2ba0      	cmp	r3, #160	; 0xa0
 80081ca:	d005      	beq.n	80081d8 <HAL_I2C_IsDeviceReady+0x188>
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d102      	bne.n	80081d8 <HAL_I2C_IsDeviceReady+0x188>
 80081d2:	7dbb      	ldrb	r3, [r7, #22]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d0cd      	beq.n	8008174 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	695b      	ldr	r3, [r3, #20]
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d129      	bne.n	8008242 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081fe:	2300      	movs	r3, #0
 8008200:	613b      	str	r3, [r7, #16]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	613b      	str	r3, [r7, #16]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	613b      	str	r3, [r7, #16]
 8008212:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	2319      	movs	r3, #25
 800821a:	2201      	movs	r2, #1
 800821c:	4921      	ldr	r1, [pc, #132]	; (80082a4 <HAL_I2C_IsDeviceReady+0x254>)
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fb12 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e036      	b.n	800829c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2220      	movs	r2, #32
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800823e:	2300      	movs	r3, #0
 8008240:	e02c      	b.n	800829c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008250:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800825a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	9300      	str	r3, [sp, #0]
 8008260:	2319      	movs	r3, #25
 8008262:	2201      	movs	r2, #1
 8008264:	490f      	ldr	r1, [pc, #60]	; (80082a4 <HAL_I2C_IsDeviceReady+0x254>)
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 faee 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e012      	b.n	800829c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	3301      	adds	r3, #1
 800827a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	429a      	cmp	r2, r3
 8008282:	f4ff af32 	bcc.w	80080ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e000      	b.n	800829c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800829a:	2302      	movs	r3, #2
  }
}
 800829c:	4618      	mov	r0, r3
 800829e:	3720      	adds	r7, #32
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	00100002 	.word	0x00100002
 80082a8:	ffff0000 	.word	0xffff0000

080082ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	607a      	str	r2, [r7, #4]
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	460b      	mov	r3, r1
 80082ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d006      	beq.n	80082d6 <I2C_MasterRequestWrite+0x2a>
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d003      	beq.n	80082d6 <I2C_MasterRequestWrite+0x2a>
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082d4:	d108      	bne.n	80082e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	e00b      	b.n	8008300 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ec:	2b12      	cmp	r3, #18
 80082ee:	d107      	bne.n	8008300 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 fa9b 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00d      	beq.n	8008334 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008326:	d103      	bne.n	8008330 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800832e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e035      	b.n	80083a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800833c:	d108      	bne.n	8008350 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800833e:	897b      	ldrh	r3, [r7, #10]
 8008340:	b2db      	uxtb	r3, r3
 8008342:	461a      	mov	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800834c:	611a      	str	r2, [r3, #16]
 800834e:	e01b      	b.n	8008388 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008350:	897b      	ldrh	r3, [r7, #10]
 8008352:	11db      	asrs	r3, r3, #7
 8008354:	b2db      	uxtb	r3, r3
 8008356:	f003 0306 	and.w	r3, r3, #6
 800835a:	b2db      	uxtb	r3, r3
 800835c:	f063 030f 	orn	r3, r3, #15
 8008360:	b2da      	uxtb	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	490e      	ldr	r1, [pc, #56]	; (80083a8 <I2C_MasterRequestWrite+0xfc>)
 800836e:	68f8      	ldr	r0, [r7, #12]
 8008370:	f000 fac1 	bl	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e010      	b.n	80083a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800837e:	897b      	ldrh	r3, [r7, #10]
 8008380:	b2da      	uxtb	r2, r3
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	4907      	ldr	r1, [pc, #28]	; (80083ac <I2C_MasterRequestWrite+0x100>)
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fab1 	bl	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e000      	b.n	80083a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	00010008 	.word	0x00010008
 80083ac:	00010002 	.word	0x00010002

080083b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b088      	sub	sp, #32
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	607a      	str	r2, [r7, #4]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	460b      	mov	r3, r1
 80083be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d006      	beq.n	80083ea <I2C_MasterRequestRead+0x3a>
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d003      	beq.n	80083ea <I2C_MasterRequestRead+0x3a>
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083e8:	d108      	bne.n	80083fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	e00b      	b.n	8008414 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	2b11      	cmp	r3, #17
 8008402:	d107      	bne.n	8008414 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008412:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	9300      	str	r3, [sp, #0]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 fa11 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d00d      	beq.n	8008448 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008436:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800843a:	d103      	bne.n	8008444 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008442:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e079      	b.n	800853c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008450:	d108      	bne.n	8008464 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008452:	897b      	ldrh	r3, [r7, #10]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	b2da      	uxtb	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	611a      	str	r2, [r3, #16]
 8008462:	e05f      	b.n	8008524 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008464:	897b      	ldrh	r3, [r7, #10]
 8008466:	11db      	asrs	r3, r3, #7
 8008468:	b2db      	uxtb	r3, r3
 800846a:	f003 0306 	and.w	r3, r3, #6
 800846e:	b2db      	uxtb	r3, r3
 8008470:	f063 030f 	orn	r3, r3, #15
 8008474:	b2da      	uxtb	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	4930      	ldr	r1, [pc, #192]	; (8008544 <I2C_MasterRequestRead+0x194>)
 8008482:	68f8      	ldr	r0, [r7, #12]
 8008484:	f000 fa37 	bl	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	e054      	b.n	800853c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008492:	897b      	ldrh	r3, [r7, #10]
 8008494:	b2da      	uxtb	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	4929      	ldr	r1, [pc, #164]	; (8008548 <I2C_MasterRequestRead+0x198>)
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fa27 	bl	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e044      	b.n	800853c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084b2:	2300      	movs	r3, #0
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	613b      	str	r3, [r7, #16]
 80084c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	9300      	str	r3, [sp, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f000 f9af 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00d      	beq.n	800850c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084fe:	d103      	bne.n	8008508 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008506:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e017      	b.n	800853c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800850c:	897b      	ldrh	r3, [r7, #10]
 800850e:	11db      	asrs	r3, r3, #7
 8008510:	b2db      	uxtb	r3, r3
 8008512:	f003 0306 	and.w	r3, r3, #6
 8008516:	b2db      	uxtb	r3, r3
 8008518:	f063 030e 	orn	r3, r3, #14
 800851c:	b2da      	uxtb	r2, r3
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	4907      	ldr	r1, [pc, #28]	; (8008548 <I2C_MasterRequestRead+0x198>)
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f000 f9e3 	bl	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e000      	b.n	800853c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	00010008 	.word	0x00010008
 8008548:	00010002 	.word	0x00010002

0800854c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af02      	add	r7, sp, #8
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	4608      	mov	r0, r1
 8008556:	4611      	mov	r1, r2
 8008558:	461a      	mov	r2, r3
 800855a:	4603      	mov	r3, r0
 800855c:	817b      	strh	r3, [r7, #10]
 800855e:	460b      	mov	r3, r1
 8008560:	813b      	strh	r3, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008574:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	2200      	movs	r2, #0
 800857e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f000 f960 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d00d      	beq.n	80085aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859c:	d103      	bne.n	80085a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e05f      	b.n	800866a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085aa:	897b      	ldrh	r3, [r7, #10]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80085b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	6a3a      	ldr	r2, [r7, #32]
 80085be:	492d      	ldr	r1, [pc, #180]	; (8008674 <I2C_RequestMemoryWrite+0x128>)
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f998 	bl	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	e04c      	b.n	800866a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80085d0:	2300      	movs	r3, #0
 80085d2:	617b      	str	r3, [r7, #20]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	617b      	str	r3, [r7, #20]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	617b      	str	r3, [r7, #20]
 80085e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085e8:	6a39      	ldr	r1, [r7, #32]
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 fa02 	bl	80089f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00d      	beq.n	8008612 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d107      	bne.n	800860e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800860c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e02b      	b.n	800866a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008612:	88fb      	ldrh	r3, [r7, #6]
 8008614:	2b01      	cmp	r3, #1
 8008616:	d105      	bne.n	8008624 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008618:	893b      	ldrh	r3, [r7, #8]
 800861a:	b2da      	uxtb	r2, r3
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	611a      	str	r2, [r3, #16]
 8008622:	e021      	b.n	8008668 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008624:	893b      	ldrh	r3, [r7, #8]
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b29b      	uxth	r3, r3
 800862a:	b2da      	uxtb	r2, r3
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008634:	6a39      	ldr	r1, [r7, #32]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f9dc 	bl	80089f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00d      	beq.n	800865e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	2b04      	cmp	r3, #4
 8008648:	d107      	bne.n	800865a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008658:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e005      	b.n	800866a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800865e:	893b      	ldrh	r3, [r7, #8]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	00010002 	.word	0x00010002

08008678 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af02      	add	r7, sp, #8
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	4608      	mov	r0, r1
 8008682:	4611      	mov	r1, r2
 8008684:	461a      	mov	r2, r3
 8008686:	4603      	mov	r3, r0
 8008688:	817b      	strh	r3, [r7, #10]
 800868a:	460b      	mov	r3, r1
 800868c:	813b      	strh	r3, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086a0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f000 f8c2 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00d      	beq.n	80086e6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d8:	d103      	bne.n	80086e2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e0aa      	b.n	800883c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80086e6:	897b      	ldrh	r3, [r7, #10]
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	461a      	mov	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	6a3a      	ldr	r2, [r7, #32]
 80086fa:	4952      	ldr	r1, [pc, #328]	; (8008844 <I2C_RequestMemoryRead+0x1cc>)
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f8fa 	bl	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e097      	b.n	800883c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800870c:	2300      	movs	r3, #0
 800870e:	617b      	str	r3, [r7, #20]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	699b      	ldr	r3, [r3, #24]
 800871e:	617b      	str	r3, [r7, #20]
 8008720:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008724:	6a39      	ldr	r1, [r7, #32]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 f964 	bl	80089f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800872c:	4603      	mov	r3, r0
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00d      	beq.n	800874e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	2b04      	cmp	r3, #4
 8008738:	d107      	bne.n	800874a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008748:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e076      	b.n	800883c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800874e:	88fb      	ldrh	r3, [r7, #6]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d105      	bne.n	8008760 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008754:	893b      	ldrh	r3, [r7, #8]
 8008756:	b2da      	uxtb	r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	611a      	str	r2, [r3, #16]
 800875e:	e021      	b.n	80087a4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008760:	893b      	ldrh	r3, [r7, #8]
 8008762:	0a1b      	lsrs	r3, r3, #8
 8008764:	b29b      	uxth	r3, r3
 8008766:	b2da      	uxtb	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800876e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008770:	6a39      	ldr	r1, [r7, #32]
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f000 f93e 	bl	80089f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00d      	beq.n	800879a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008782:	2b04      	cmp	r3, #4
 8008784:	d107      	bne.n	8008796 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008794:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e050      	b.n	800883c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800879a:	893b      	ldrh	r3, [r7, #8]
 800879c:	b2da      	uxtb	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80087a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a6:	6a39      	ldr	r1, [r7, #32]
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 f923 	bl	80089f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00d      	beq.n	80087d0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d107      	bne.n	80087cc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e035      	b.n	800883c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087de:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 f82b 	bl	8008848 <I2C_WaitOnFlagUntilTimeout>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00d      	beq.n	8008814 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008806:	d103      	bne.n	8008810 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800880e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e013      	b.n	800883c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008814:	897b      	ldrh	r3, [r7, #10]
 8008816:	b2db      	uxtb	r3, r3
 8008818:	f043 0301 	orr.w	r3, r3, #1
 800881c:	b2da      	uxtb	r2, r3
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	6a3a      	ldr	r2, [r7, #32]
 8008828:	4906      	ldr	r1, [pc, #24]	; (8008844 <I2C_RequestMemoryRead+0x1cc>)
 800882a:	68f8      	ldr	r0, [r7, #12]
 800882c:	f000 f863 	bl	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e000      	b.n	800883c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3718      	adds	r7, #24
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	00010002 	.word	0x00010002

08008848 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	603b      	str	r3, [r7, #0]
 8008854:	4613      	mov	r3, r2
 8008856:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008858:	e025      	b.n	80088a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008860:	d021      	beq.n	80088a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008862:	f7fe f845 	bl	80068f0 <HAL_GetTick>
 8008866:	4602      	mov	r2, r0
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	1ad3      	subs	r3, r2, r3
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d302      	bcc.n	8008878 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d116      	bne.n	80088a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2220      	movs	r2, #32
 8008882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008892:	f043 0220 	orr.w	r2, r3, #32
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e023      	b.n	80088ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	0c1b      	lsrs	r3, r3, #16
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d10d      	bne.n	80088cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	43da      	mvns	r2, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4013      	ands	r3, r2
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bf0c      	ite	eq
 80088c2:	2301      	moveq	r3, #1
 80088c4:	2300      	movne	r3, #0
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	461a      	mov	r2, r3
 80088ca:	e00c      	b.n	80088e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	43da      	mvns	r2, r3
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4013      	ands	r3, r2
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	bf0c      	ite	eq
 80088de:	2301      	moveq	r3, #1
 80088e0:	2300      	movne	r3, #0
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	461a      	mov	r2, r3
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d0b6      	beq.n	800885a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
 8008902:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008904:	e051      	b.n	80089aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008914:	d123      	bne.n	800895e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008924:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800892e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2200      	movs	r2, #0
 8008934:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2220      	movs	r2, #32
 800893a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894a:	f043 0204 	orr.w	r2, r3, #4
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e046      	b.n	80089ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008964:	d021      	beq.n	80089aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008966:	f7fd ffc3 	bl	80068f0 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	429a      	cmp	r2, r3
 8008974:	d302      	bcc.n	800897c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d116      	bne.n	80089aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2220      	movs	r2, #32
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	f043 0220 	orr.w	r2, r3, #32
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e020      	b.n	80089ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	0c1b      	lsrs	r3, r3, #16
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d10c      	bne.n	80089ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	43da      	mvns	r2, r3
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	4013      	ands	r3, r2
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bf14      	ite	ne
 80089c6:	2301      	movne	r3, #1
 80089c8:	2300      	moveq	r3, #0
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	e00b      	b.n	80089e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	43da      	mvns	r2, r3
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	4013      	ands	r3, r2
 80089da:	b29b      	uxth	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	bf14      	ite	ne
 80089e0:	2301      	movne	r3, #1
 80089e2:	2300      	moveq	r3, #0
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d18d      	bne.n	8008906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3710      	adds	r7, #16
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a00:	e02d      	b.n	8008a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f000 f8ce 	bl	8008ba4 <I2C_IsAcknowledgeFailed>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d001      	beq.n	8008a12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e02d      	b.n	8008a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a18:	d021      	beq.n	8008a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1a:	f7fd ff69 	bl	80068f0 <HAL_GetTick>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	1ad3      	subs	r3, r2, r3
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d302      	bcc.n	8008a30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d116      	bne.n	8008a5e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2220      	movs	r2, #32
 8008a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a4a:	f043 0220 	orr.w	r2, r3, #32
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e007      	b.n	8008a6e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a68:	2b80      	cmp	r3, #128	; 0x80
 8008a6a:	d1ca      	bne.n	8008a02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b084      	sub	sp, #16
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a82:	e02d      	b.n	8008ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 f88d 	bl	8008ba4 <I2C_IsAcknowledgeFailed>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d001      	beq.n	8008a94 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e02d      	b.n	8008af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	d021      	beq.n	8008ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9c:	f7fd ff28 	bl	80068f0 <HAL_GetTick>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	1ad3      	subs	r3, r2, r3
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d302      	bcc.n	8008ab2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d116      	bne.n	8008ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2220      	movs	r2, #32
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008acc:	f043 0220 	orr.w	r2, r3, #32
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e007      	b.n	8008af0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	f003 0304 	and.w	r3, r3, #4
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	d1ca      	bne.n	8008a84 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b04:	e042      	b.n	8008b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	f003 0310 	and.w	r3, r3, #16
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	d119      	bne.n	8008b48 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f06f 0210 	mvn.w	r2, #16
 8008b1c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2220      	movs	r2, #32
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e029      	b.n	8008b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b48:	f7fd fed2 	bl	80068f0 <HAL_GetTick>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	1ad3      	subs	r3, r2, r3
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d302      	bcc.n	8008b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d116      	bne.n	8008b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2200      	movs	r2, #0
 8008b62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2220      	movs	r2, #32
 8008b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b78:	f043 0220 	orr.w	r2, r3, #32
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e007      	b.n	8008b9c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695b      	ldr	r3, [r3, #20]
 8008b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b96:	2b40      	cmp	r3, #64	; 0x40
 8008b98:	d1b5      	bne.n	8008b06 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3710      	adds	r7, #16
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bba:	d11b      	bne.n	8008bf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008bc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be0:	f043 0204 	orr.w	r2, r3, #4
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e000      	b.n	8008bf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
	...

08008c04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e267      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0301 	and.w	r3, r3, #1
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d075      	beq.n	8008d0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c22:	4b88      	ldr	r3, [pc, #544]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 030c 	and.w	r3, r3, #12
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d00c      	beq.n	8008c48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c2e:	4b85      	ldr	r3, [pc, #532]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c36:	2b08      	cmp	r3, #8
 8008c38:	d112      	bne.n	8008c60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c3a:	4b82      	ldr	r3, [pc, #520]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c46:	d10b      	bne.n	8008c60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c48:	4b7e      	ldr	r3, [pc, #504]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d05b      	beq.n	8008d0c <HAL_RCC_OscConfig+0x108>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d157      	bne.n	8008d0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e242      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c68:	d106      	bne.n	8008c78 <HAL_RCC_OscConfig+0x74>
 8008c6a:	4b76      	ldr	r3, [pc, #472]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a75      	ldr	r2, [pc, #468]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c74:	6013      	str	r3, [r2, #0]
 8008c76:	e01d      	b.n	8008cb4 <HAL_RCC_OscConfig+0xb0>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c80:	d10c      	bne.n	8008c9c <HAL_RCC_OscConfig+0x98>
 8008c82:	4b70      	ldr	r3, [pc, #448]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a6f      	ldr	r2, [pc, #444]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	4b6d      	ldr	r3, [pc, #436]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a6c      	ldr	r2, [pc, #432]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c98:	6013      	str	r3, [r2, #0]
 8008c9a:	e00b      	b.n	8008cb4 <HAL_RCC_OscConfig+0xb0>
 8008c9c:	4b69      	ldr	r3, [pc, #420]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a68      	ldr	r2, [pc, #416]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	4b66      	ldr	r3, [pc, #408]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4a65      	ldr	r2, [pc, #404]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d013      	beq.n	8008ce4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cbc:	f7fd fe18 	bl	80068f0 <HAL_GetTick>
 8008cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cc2:	e008      	b.n	8008cd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cc4:	f7fd fe14 	bl	80068f0 <HAL_GetTick>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b64      	cmp	r3, #100	; 0x64
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e207      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cd6:	4b5b      	ldr	r3, [pc, #364]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0f0      	beq.n	8008cc4 <HAL_RCC_OscConfig+0xc0>
 8008ce2:	e014      	b.n	8008d0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ce4:	f7fd fe04 	bl	80068f0 <HAL_GetTick>
 8008ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cea:	e008      	b.n	8008cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cec:	f7fd fe00 	bl	80068f0 <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	2b64      	cmp	r3, #100	; 0x64
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e1f3      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cfe:	4b51      	ldr	r3, [pc, #324]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1f0      	bne.n	8008cec <HAL_RCC_OscConfig+0xe8>
 8008d0a:	e000      	b.n	8008d0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0302 	and.w	r3, r3, #2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d063      	beq.n	8008de2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d1a:	4b4a      	ldr	r3, [pc, #296]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	f003 030c 	and.w	r3, r3, #12
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00b      	beq.n	8008d3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d26:	4b47      	ldr	r3, [pc, #284]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d2e:	2b08      	cmp	r3, #8
 8008d30:	d11c      	bne.n	8008d6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d32:	4b44      	ldr	r3, [pc, #272]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d116      	bne.n	8008d6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d3e:	4b41      	ldr	r3, [pc, #260]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0302 	and.w	r3, r3, #2
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d005      	beq.n	8008d56 <HAL_RCC_OscConfig+0x152>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d001      	beq.n	8008d56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	e1c7      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d56:	4b3b      	ldr	r3, [pc, #236]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4937      	ldr	r1, [pc, #220]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d66:	4313      	orrs	r3, r2
 8008d68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d6a:	e03a      	b.n	8008de2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d020      	beq.n	8008db6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d74:	4b34      	ldr	r3, [pc, #208]	; (8008e48 <HAL_RCC_OscConfig+0x244>)
 8008d76:	2201      	movs	r2, #1
 8008d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d7a:	f7fd fdb9 	bl	80068f0 <HAL_GetTick>
 8008d7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d80:	e008      	b.n	8008d94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d82:	f7fd fdb5 	bl	80068f0 <HAL_GetTick>
 8008d86:	4602      	mov	r2, r0
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	1ad3      	subs	r3, r2, r3
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d901      	bls.n	8008d94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d90:	2303      	movs	r3, #3
 8008d92:	e1a8      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d94:	4b2b      	ldr	r3, [pc, #172]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0302 	and.w	r3, r3, #2
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0f0      	beq.n	8008d82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008da0:	4b28      	ldr	r3, [pc, #160]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	691b      	ldr	r3, [r3, #16]
 8008dac:	00db      	lsls	r3, r3, #3
 8008dae:	4925      	ldr	r1, [pc, #148]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008db0:	4313      	orrs	r3, r2
 8008db2:	600b      	str	r3, [r1, #0]
 8008db4:	e015      	b.n	8008de2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008db6:	4b24      	ldr	r3, [pc, #144]	; (8008e48 <HAL_RCC_OscConfig+0x244>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dbc:	f7fd fd98 	bl	80068f0 <HAL_GetTick>
 8008dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dc2:	e008      	b.n	8008dd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dc4:	f7fd fd94 	bl	80068f0 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d901      	bls.n	8008dd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e187      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008dd6:	4b1b      	ldr	r3, [pc, #108]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f0      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0308 	and.w	r3, r3, #8
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d036      	beq.n	8008e5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d016      	beq.n	8008e24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008df6:	4b15      	ldr	r3, [pc, #84]	; (8008e4c <HAL_RCC_OscConfig+0x248>)
 8008df8:	2201      	movs	r2, #1
 8008dfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dfc:	f7fd fd78 	bl	80068f0 <HAL_GetTick>
 8008e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e02:	e008      	b.n	8008e16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e04:	f7fd fd74 	bl	80068f0 <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d901      	bls.n	8008e16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e12:	2303      	movs	r3, #3
 8008e14:	e167      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e16:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <HAL_RCC_OscConfig+0x240>)
 8008e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e1a:	f003 0302 	and.w	r3, r3, #2
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d0f0      	beq.n	8008e04 <HAL_RCC_OscConfig+0x200>
 8008e22:	e01b      	b.n	8008e5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e24:	4b09      	ldr	r3, [pc, #36]	; (8008e4c <HAL_RCC_OscConfig+0x248>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e2a:	f7fd fd61 	bl	80068f0 <HAL_GetTick>
 8008e2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e30:	e00e      	b.n	8008e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e32:	f7fd fd5d 	bl	80068f0 <HAL_GetTick>
 8008e36:	4602      	mov	r2, r0
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	1ad3      	subs	r3, r2, r3
 8008e3c:	2b02      	cmp	r3, #2
 8008e3e:	d907      	bls.n	8008e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008e40:	2303      	movs	r3, #3
 8008e42:	e150      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
 8008e44:	40023800 	.word	0x40023800
 8008e48:	42470000 	.word	0x42470000
 8008e4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e50:	4b88      	ldr	r3, [pc, #544]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e54:	f003 0302 	and.w	r3, r3, #2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1ea      	bne.n	8008e32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	f000 8097 	beq.w	8008f98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e6e:	4b81      	ldr	r3, [pc, #516]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10f      	bne.n	8008e9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	60bb      	str	r3, [r7, #8]
 8008e7e:	4b7d      	ldr	r3, [pc, #500]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	4a7c      	ldr	r2, [pc, #496]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e88:	6413      	str	r3, [r2, #64]	; 0x40
 8008e8a:	4b7a      	ldr	r3, [pc, #488]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e92:	60bb      	str	r3, [r7, #8]
 8008e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e96:	2301      	movs	r3, #1
 8008e98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e9a:	4b77      	ldr	r3, [pc, #476]	; (8009078 <HAL_RCC_OscConfig+0x474>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d118      	bne.n	8008ed8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008ea6:	4b74      	ldr	r3, [pc, #464]	; (8009078 <HAL_RCC_OscConfig+0x474>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a73      	ldr	r2, [pc, #460]	; (8009078 <HAL_RCC_OscConfig+0x474>)
 8008eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008eb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008eb2:	f7fd fd1d 	bl	80068f0 <HAL_GetTick>
 8008eb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008eb8:	e008      	b.n	8008ecc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008eba:	f7fd fd19 	bl	80068f0 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d901      	bls.n	8008ecc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e10c      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008ecc:	4b6a      	ldr	r3, [pc, #424]	; (8009078 <HAL_RCC_OscConfig+0x474>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d0f0      	beq.n	8008eba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d106      	bne.n	8008eee <HAL_RCC_OscConfig+0x2ea>
 8008ee0:	4b64      	ldr	r3, [pc, #400]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee4:	4a63      	ldr	r2, [pc, #396]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008ee6:	f043 0301 	orr.w	r3, r3, #1
 8008eea:	6713      	str	r3, [r2, #112]	; 0x70
 8008eec:	e01c      	b.n	8008f28 <HAL_RCC_OscConfig+0x324>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	2b05      	cmp	r3, #5
 8008ef4:	d10c      	bne.n	8008f10 <HAL_RCC_OscConfig+0x30c>
 8008ef6:	4b5f      	ldr	r3, [pc, #380]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efa:	4a5e      	ldr	r2, [pc, #376]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008efc:	f043 0304 	orr.w	r3, r3, #4
 8008f00:	6713      	str	r3, [r2, #112]	; 0x70
 8008f02:	4b5c      	ldr	r3, [pc, #368]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	4a5b      	ldr	r2, [pc, #364]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f08:	f043 0301 	orr.w	r3, r3, #1
 8008f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f0e:	e00b      	b.n	8008f28 <HAL_RCC_OscConfig+0x324>
 8008f10:	4b58      	ldr	r3, [pc, #352]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f14:	4a57      	ldr	r2, [pc, #348]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f16:	f023 0301 	bic.w	r3, r3, #1
 8008f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8008f1c:	4b55      	ldr	r3, [pc, #340]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f20:	4a54      	ldr	r2, [pc, #336]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f22:	f023 0304 	bic.w	r3, r3, #4
 8008f26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d015      	beq.n	8008f5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f30:	f7fd fcde 	bl	80068f0 <HAL_GetTick>
 8008f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f36:	e00a      	b.n	8008f4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f38:	f7fd fcda 	bl	80068f0 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e0cb      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f4e:	4b49      	ldr	r3, [pc, #292]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f52:	f003 0302 	and.w	r3, r3, #2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0ee      	beq.n	8008f38 <HAL_RCC_OscConfig+0x334>
 8008f5a:	e014      	b.n	8008f86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f5c:	f7fd fcc8 	bl	80068f0 <HAL_GetTick>
 8008f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f62:	e00a      	b.n	8008f7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f64:	f7fd fcc4 	bl	80068f0 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d901      	bls.n	8008f7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e0b5      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f7a:	4b3e      	ldr	r3, [pc, #248]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7e:	f003 0302 	and.w	r3, r3, #2
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d1ee      	bne.n	8008f64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d105      	bne.n	8008f98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f8c:	4b39      	ldr	r3, [pc, #228]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f90:	4a38      	ldr	r2, [pc, #224]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008f92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f000 80a1 	beq.w	80090e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008fa2:	4b34      	ldr	r3, [pc, #208]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	f003 030c 	and.w	r3, r3, #12
 8008faa:	2b08      	cmp	r3, #8
 8008fac:	d05c      	beq.n	8009068 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d141      	bne.n	800903a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fb6:	4b31      	ldr	r3, [pc, #196]	; (800907c <HAL_RCC_OscConfig+0x478>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fbc:	f7fd fc98 	bl	80068f0 <HAL_GetTick>
 8008fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fc2:	e008      	b.n	8008fd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fc4:	f7fd fc94 	bl	80068f0 <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d901      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e087      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fd6:	4b27      	ldr	r3, [pc, #156]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d1f0      	bne.n	8008fc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69da      	ldr	r2, [r3, #28]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	431a      	orrs	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	019b      	lsls	r3, r3, #6
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	085b      	lsrs	r3, r3, #1
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	041b      	lsls	r3, r3, #16
 8008ffe:	431a      	orrs	r2, r3
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009004:	061b      	lsls	r3, r3, #24
 8009006:	491b      	ldr	r1, [pc, #108]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 8009008:	4313      	orrs	r3, r2
 800900a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800900c:	4b1b      	ldr	r3, [pc, #108]	; (800907c <HAL_RCC_OscConfig+0x478>)
 800900e:	2201      	movs	r2, #1
 8009010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009012:	f7fd fc6d 	bl	80068f0 <HAL_GetTick>
 8009016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009018:	e008      	b.n	800902c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800901a:	f7fd fc69 	bl	80068f0 <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	2b02      	cmp	r3, #2
 8009026:	d901      	bls.n	800902c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e05c      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800902c:	4b11      	ldr	r3, [pc, #68]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0f0      	beq.n	800901a <HAL_RCC_OscConfig+0x416>
 8009038:	e054      	b.n	80090e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800903a:	4b10      	ldr	r3, [pc, #64]	; (800907c <HAL_RCC_OscConfig+0x478>)
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009040:	f7fd fc56 	bl	80068f0 <HAL_GetTick>
 8009044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009046:	e008      	b.n	800905a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009048:	f7fd fc52 	bl	80068f0 <HAL_GetTick>
 800904c:	4602      	mov	r2, r0
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	1ad3      	subs	r3, r2, r3
 8009052:	2b02      	cmp	r3, #2
 8009054:	d901      	bls.n	800905a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009056:	2303      	movs	r3, #3
 8009058:	e045      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <HAL_RCC_OscConfig+0x470>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1f0      	bne.n	8009048 <HAL_RCC_OscConfig+0x444>
 8009066:	e03d      	b.n	80090e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d107      	bne.n	8009080 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e038      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
 8009074:	40023800 	.word	0x40023800
 8009078:	40007000 	.word	0x40007000
 800907c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009080:	4b1b      	ldr	r3, [pc, #108]	; (80090f0 <HAL_RCC_OscConfig+0x4ec>)
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	699b      	ldr	r3, [r3, #24]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d028      	beq.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009098:	429a      	cmp	r2, r3
 800909a:	d121      	bne.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d11a      	bne.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80090b0:	4013      	ands	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d111      	bne.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c6:	085b      	lsrs	r3, r3, #1
 80090c8:	3b01      	subs	r3, #1
 80090ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d107      	bne.n	80090e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80090dc:	429a      	cmp	r2, r3
 80090de:	d001      	beq.n	80090e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	40023800 	.word	0x40023800

080090f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d101      	bne.n	8009108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e0cc      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009108:	4b68      	ldr	r3, [pc, #416]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0307 	and.w	r3, r3, #7
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d90c      	bls.n	8009130 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009116:	4b65      	ldr	r3, [pc, #404]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 8009118:	683a      	ldr	r2, [r7, #0]
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800911e:	4b63      	ldr	r3, [pc, #396]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d001      	beq.n	8009130 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e0b8      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 0302 	and.w	r3, r3, #2
 8009138:	2b00      	cmp	r3, #0
 800913a:	d020      	beq.n	800917e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009148:	4b59      	ldr	r3, [pc, #356]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	4a58      	ldr	r2, [pc, #352]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800914e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009152:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0308 	and.w	r3, r3, #8
 800915c:	2b00      	cmp	r3, #0
 800915e:	d005      	beq.n	800916c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009160:	4b53      	ldr	r3, [pc, #332]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	4a52      	ldr	r2, [pc, #328]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009166:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800916a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800916c:	4b50      	ldr	r3, [pc, #320]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	689b      	ldr	r3, [r3, #8]
 8009178:	494d      	ldr	r1, [pc, #308]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800917a:	4313      	orrs	r3, r2
 800917c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0301 	and.w	r3, r3, #1
 8009186:	2b00      	cmp	r3, #0
 8009188:	d044      	beq.n	8009214 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	2b01      	cmp	r3, #1
 8009190:	d107      	bne.n	80091a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009192:	4b47      	ldr	r3, [pc, #284]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d119      	bne.n	80091d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e07f      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d003      	beq.n	80091b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80091ae:	2b03      	cmp	r3, #3
 80091b0:	d107      	bne.n	80091c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091b2:	4b3f      	ldr	r3, [pc, #252]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d109      	bne.n	80091d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091be:	2301      	movs	r3, #1
 80091c0:	e06f      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80091c2:	4b3b      	ldr	r3, [pc, #236]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d101      	bne.n	80091d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	e067      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80091d2:	4b37      	ldr	r3, [pc, #220]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	f023 0203 	bic.w	r2, r3, #3
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	4934      	ldr	r1, [pc, #208]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 80091e0:	4313      	orrs	r3, r2
 80091e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091e4:	f7fd fb84 	bl	80068f0 <HAL_GetTick>
 80091e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ea:	e00a      	b.n	8009202 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091ec:	f7fd fb80 	bl	80068f0 <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d901      	bls.n	8009202 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091fe:	2303      	movs	r3, #3
 8009200:	e04f      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009202:	4b2b      	ldr	r3, [pc, #172]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	f003 020c 	and.w	r2, r3, #12
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	429a      	cmp	r2, r3
 8009212:	d1eb      	bne.n	80091ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009214:	4b25      	ldr	r3, [pc, #148]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0307 	and.w	r3, r3, #7
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d20c      	bcs.n	800923c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009222:	4b22      	ldr	r3, [pc, #136]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	b2d2      	uxtb	r2, r2
 8009228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800922a:	4b20      	ldr	r3, [pc, #128]	; (80092ac <HAL_RCC_ClockConfig+0x1b8>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0307 	and.w	r3, r3, #7
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	429a      	cmp	r2, r3
 8009236:	d001      	beq.n	800923c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e032      	b.n	80092a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d008      	beq.n	800925a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009248:	4b19      	ldr	r3, [pc, #100]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	4916      	ldr	r1, [pc, #88]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009256:	4313      	orrs	r3, r2
 8009258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0308 	and.w	r3, r3, #8
 8009262:	2b00      	cmp	r3, #0
 8009264:	d009      	beq.n	800927a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009266:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	490e      	ldr	r1, [pc, #56]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009276:	4313      	orrs	r3, r2
 8009278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800927a:	f000 f821 	bl	80092c0 <HAL_RCC_GetSysClockFreq>
 800927e:	4602      	mov	r2, r0
 8009280:	4b0b      	ldr	r3, [pc, #44]	; (80092b0 <HAL_RCC_ClockConfig+0x1bc>)
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	091b      	lsrs	r3, r3, #4
 8009286:	f003 030f 	and.w	r3, r3, #15
 800928a:	490a      	ldr	r1, [pc, #40]	; (80092b4 <HAL_RCC_ClockConfig+0x1c0>)
 800928c:	5ccb      	ldrb	r3, [r1, r3]
 800928e:	fa22 f303 	lsr.w	r3, r2, r3
 8009292:	4a09      	ldr	r2, [pc, #36]	; (80092b8 <HAL_RCC_ClockConfig+0x1c4>)
 8009294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009296:	4b09      	ldr	r3, [pc, #36]	; (80092bc <HAL_RCC_ClockConfig+0x1c8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd f81a 	bl	80062d4 <HAL_InitTick>

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	40023c00 	.word	0x40023c00
 80092b0:	40023800 	.word	0x40023800
 80092b4:	08018d48 	.word	0x08018d48
 80092b8:	20000008 	.word	0x20000008
 80092bc:	2000000c 	.word	0x2000000c

080092c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092c4:	b094      	sub	sp, #80	; 0x50
 80092c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	647b      	str	r3, [r7, #68]	; 0x44
 80092cc:	2300      	movs	r3, #0
 80092ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092d0:	2300      	movs	r3, #0
 80092d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80092d4:	2300      	movs	r3, #0
 80092d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80092d8:	4b79      	ldr	r3, [pc, #484]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	f003 030c 	and.w	r3, r3, #12
 80092e0:	2b08      	cmp	r3, #8
 80092e2:	d00d      	beq.n	8009300 <HAL_RCC_GetSysClockFreq+0x40>
 80092e4:	2b08      	cmp	r3, #8
 80092e6:	f200 80e1 	bhi.w	80094ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d002      	beq.n	80092f4 <HAL_RCC_GetSysClockFreq+0x34>
 80092ee:	2b04      	cmp	r3, #4
 80092f0:	d003      	beq.n	80092fa <HAL_RCC_GetSysClockFreq+0x3a>
 80092f2:	e0db      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092f4:	4b73      	ldr	r3, [pc, #460]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80092f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80092f8:	e0db      	b.n	80094b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092fa:	4b73      	ldr	r3, [pc, #460]	; (80094c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80092fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80092fe:	e0d8      	b.n	80094b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009300:	4b6f      	ldr	r3, [pc, #444]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009308:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800930a:	4b6d      	ldr	r3, [pc, #436]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d063      	beq.n	80093de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009316:	4b6a      	ldr	r3, [pc, #424]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	099b      	lsrs	r3, r3, #6
 800931c:	2200      	movs	r2, #0
 800931e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009320:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009328:	633b      	str	r3, [r7, #48]	; 0x30
 800932a:	2300      	movs	r3, #0
 800932c:	637b      	str	r3, [r7, #52]	; 0x34
 800932e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009332:	4622      	mov	r2, r4
 8009334:	462b      	mov	r3, r5
 8009336:	f04f 0000 	mov.w	r0, #0
 800933a:	f04f 0100 	mov.w	r1, #0
 800933e:	0159      	lsls	r1, r3, #5
 8009340:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009344:	0150      	lsls	r0, r2, #5
 8009346:	4602      	mov	r2, r0
 8009348:	460b      	mov	r3, r1
 800934a:	4621      	mov	r1, r4
 800934c:	1a51      	subs	r1, r2, r1
 800934e:	6139      	str	r1, [r7, #16]
 8009350:	4629      	mov	r1, r5
 8009352:	eb63 0301 	sbc.w	r3, r3, r1
 8009356:	617b      	str	r3, [r7, #20]
 8009358:	f04f 0200 	mov.w	r2, #0
 800935c:	f04f 0300 	mov.w	r3, #0
 8009360:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009364:	4659      	mov	r1, fp
 8009366:	018b      	lsls	r3, r1, #6
 8009368:	4651      	mov	r1, sl
 800936a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800936e:	4651      	mov	r1, sl
 8009370:	018a      	lsls	r2, r1, #6
 8009372:	4651      	mov	r1, sl
 8009374:	ebb2 0801 	subs.w	r8, r2, r1
 8009378:	4659      	mov	r1, fp
 800937a:	eb63 0901 	sbc.w	r9, r3, r1
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	f04f 0300 	mov.w	r3, #0
 8009386:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800938a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800938e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009392:	4690      	mov	r8, r2
 8009394:	4699      	mov	r9, r3
 8009396:	4623      	mov	r3, r4
 8009398:	eb18 0303 	adds.w	r3, r8, r3
 800939c:	60bb      	str	r3, [r7, #8]
 800939e:	462b      	mov	r3, r5
 80093a0:	eb49 0303 	adc.w	r3, r9, r3
 80093a4:	60fb      	str	r3, [r7, #12]
 80093a6:	f04f 0200 	mov.w	r2, #0
 80093aa:	f04f 0300 	mov.w	r3, #0
 80093ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80093b2:	4629      	mov	r1, r5
 80093b4:	024b      	lsls	r3, r1, #9
 80093b6:	4621      	mov	r1, r4
 80093b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80093bc:	4621      	mov	r1, r4
 80093be:	024a      	lsls	r2, r1, #9
 80093c0:	4610      	mov	r0, r2
 80093c2:	4619      	mov	r1, r3
 80093c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c6:	2200      	movs	r2, #0
 80093c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80093ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093d0:	f7f7 fcb2 	bl	8000d38 <__aeabi_uldivmod>
 80093d4:	4602      	mov	r2, r0
 80093d6:	460b      	mov	r3, r1
 80093d8:	4613      	mov	r3, r2
 80093da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093dc:	e058      	b.n	8009490 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093de:	4b38      	ldr	r3, [pc, #224]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	099b      	lsrs	r3, r3, #6
 80093e4:	2200      	movs	r2, #0
 80093e6:	4618      	mov	r0, r3
 80093e8:	4611      	mov	r1, r2
 80093ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80093ee:	623b      	str	r3, [r7, #32]
 80093f0:	2300      	movs	r3, #0
 80093f2:	627b      	str	r3, [r7, #36]	; 0x24
 80093f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80093f8:	4642      	mov	r2, r8
 80093fa:	464b      	mov	r3, r9
 80093fc:	f04f 0000 	mov.w	r0, #0
 8009400:	f04f 0100 	mov.w	r1, #0
 8009404:	0159      	lsls	r1, r3, #5
 8009406:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800940a:	0150      	lsls	r0, r2, #5
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4641      	mov	r1, r8
 8009412:	ebb2 0a01 	subs.w	sl, r2, r1
 8009416:	4649      	mov	r1, r9
 8009418:	eb63 0b01 	sbc.w	fp, r3, r1
 800941c:	f04f 0200 	mov.w	r2, #0
 8009420:	f04f 0300 	mov.w	r3, #0
 8009424:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8009428:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800942c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009430:	ebb2 040a 	subs.w	r4, r2, sl
 8009434:	eb63 050b 	sbc.w	r5, r3, fp
 8009438:	f04f 0200 	mov.w	r2, #0
 800943c:	f04f 0300 	mov.w	r3, #0
 8009440:	00eb      	lsls	r3, r5, #3
 8009442:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009446:	00e2      	lsls	r2, r4, #3
 8009448:	4614      	mov	r4, r2
 800944a:	461d      	mov	r5, r3
 800944c:	4643      	mov	r3, r8
 800944e:	18e3      	adds	r3, r4, r3
 8009450:	603b      	str	r3, [r7, #0]
 8009452:	464b      	mov	r3, r9
 8009454:	eb45 0303 	adc.w	r3, r5, r3
 8009458:	607b      	str	r3, [r7, #4]
 800945a:	f04f 0200 	mov.w	r2, #0
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009466:	4629      	mov	r1, r5
 8009468:	028b      	lsls	r3, r1, #10
 800946a:	4621      	mov	r1, r4
 800946c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009470:	4621      	mov	r1, r4
 8009472:	028a      	lsls	r2, r1, #10
 8009474:	4610      	mov	r0, r2
 8009476:	4619      	mov	r1, r3
 8009478:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800947a:	2200      	movs	r2, #0
 800947c:	61bb      	str	r3, [r7, #24]
 800947e:	61fa      	str	r2, [r7, #28]
 8009480:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009484:	f7f7 fc58 	bl	8000d38 <__aeabi_uldivmod>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4613      	mov	r3, r2
 800948e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009490:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	0c1b      	lsrs	r3, r3, #16
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	3301      	adds	r3, #1
 800949c:	005b      	lsls	r3, r3, #1
 800949e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80094a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80094aa:	e002      	b.n	80094b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80094ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80094b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80094b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3750      	adds	r7, #80	; 0x50
 80094b8:	46bd      	mov	sp, r7
 80094ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80094be:	bf00      	nop
 80094c0:	40023800 	.word	0x40023800
 80094c4:	00f42400 	.word	0x00f42400
 80094c8:	007a1200 	.word	0x007a1200

080094cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80094cc:	b480      	push	{r7}
 80094ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80094d0:	4b03      	ldr	r3, [pc, #12]	; (80094e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80094d2:	681b      	ldr	r3, [r3, #0]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	20000008 	.word	0x20000008

080094e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80094e8:	f7ff fff0 	bl	80094cc <HAL_RCC_GetHCLKFreq>
 80094ec:	4602      	mov	r2, r0
 80094ee:	4b05      	ldr	r3, [pc, #20]	; (8009504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	0a9b      	lsrs	r3, r3, #10
 80094f4:	f003 0307 	and.w	r3, r3, #7
 80094f8:	4903      	ldr	r1, [pc, #12]	; (8009508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094fa:	5ccb      	ldrb	r3, [r1, r3]
 80094fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009500:	4618      	mov	r0, r3
 8009502:	bd80      	pop	{r7, pc}
 8009504:	40023800 	.word	0x40023800
 8009508:	08018d58 	.word	0x08018d58

0800950c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009510:	f7ff ffdc 	bl	80094cc <HAL_RCC_GetHCLKFreq>
 8009514:	4602      	mov	r2, r0
 8009516:	4b05      	ldr	r3, [pc, #20]	; (800952c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	0b5b      	lsrs	r3, r3, #13
 800951c:	f003 0307 	and.w	r3, r3, #7
 8009520:	4903      	ldr	r1, [pc, #12]	; (8009530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009522:	5ccb      	ldrb	r3, [r1, r3]
 8009524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009528:	4618      	mov	r0, r3
 800952a:	bd80      	pop	{r7, pc}
 800952c:	40023800 	.word	0x40023800
 8009530:	08018d58 	.word	0x08018d58

08009534 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	220f      	movs	r2, #15
 8009542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009544:	4b12      	ldr	r3, [pc, #72]	; (8009590 <HAL_RCC_GetClockConfig+0x5c>)
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f003 0203 	and.w	r2, r3, #3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009550:	4b0f      	ldr	r3, [pc, #60]	; (8009590 <HAL_RCC_GetClockConfig+0x5c>)
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800955c:	4b0c      	ldr	r3, [pc, #48]	; (8009590 <HAL_RCC_GetClockConfig+0x5c>)
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009568:	4b09      	ldr	r3, [pc, #36]	; (8009590 <HAL_RCC_GetClockConfig+0x5c>)
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	08db      	lsrs	r3, r3, #3
 800956e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009576:	4b07      	ldr	r3, [pc, #28]	; (8009594 <HAL_RCC_GetClockConfig+0x60>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 0207 	and.w	r2, r3, #7
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	601a      	str	r2, [r3, #0]
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	40023800 	.word	0x40023800
 8009594:	40023c00 	.word	0x40023c00

08009598 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095a0:	2300      	movs	r3, #0
 80095a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0301 	and.w	r3, r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d105      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d038      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80095c0:	4b68      	ldr	r3, [pc, #416]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80095c2:	2200      	movs	r2, #0
 80095c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095c6:	f7fd f993 	bl	80068f0 <HAL_GetTick>
 80095ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095cc:	e008      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80095ce:	f7fd f98f 	bl	80068f0 <HAL_GetTick>
 80095d2:	4602      	mov	r2, r0
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	1ad3      	subs	r3, r2, r3
 80095d8:	2b02      	cmp	r3, #2
 80095da:	d901      	bls.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	e0bd      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80095e0:	4b61      	ldr	r3, [pc, #388]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d1f0      	bne.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685a      	ldr	r2, [r3, #4]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	019b      	lsls	r3, r3, #6
 80095f6:	431a      	orrs	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	071b      	lsls	r3, r3, #28
 80095fe:	495a      	ldr	r1, [pc, #360]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009600:	4313      	orrs	r3, r2
 8009602:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009606:	4b57      	ldr	r3, [pc, #348]	; (8009764 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8009608:	2201      	movs	r2, #1
 800960a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800960c:	f7fd f970 	bl	80068f0 <HAL_GetTick>
 8009610:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009612:	e008      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009614:	f7fd f96c 	bl	80068f0 <HAL_GetTick>
 8009618:	4602      	mov	r2, r0
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	2b02      	cmp	r3, #2
 8009620:	d901      	bls.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e09a      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009626:	4b50      	ldr	r3, [pc, #320]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962e:	2b00      	cmp	r3, #0
 8009630:	d0f0      	beq.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0302 	and.w	r3, r3, #2
 800963a:	2b00      	cmp	r3, #0
 800963c:	f000 8083 	beq.w	8009746 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009640:	2300      	movs	r3, #0
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	4b48      	ldr	r3, [pc, #288]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009648:	4a47      	ldr	r2, [pc, #284]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800964a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800964e:	6413      	str	r3, [r2, #64]	; 0x40
 8009650:	4b45      	ldr	r3, [pc, #276]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800965c:	4b43      	ldr	r3, [pc, #268]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a42      	ldr	r2, [pc, #264]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009666:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009668:	f7fd f942 	bl	80068f0 <HAL_GetTick>
 800966c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800966e:	e008      	b.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009670:	f7fd f93e 	bl	80068f0 <HAL_GetTick>
 8009674:	4602      	mov	r2, r0
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	2b02      	cmp	r3, #2
 800967c:	d901      	bls.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800967e:	2303      	movs	r3, #3
 8009680:	e06c      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009682:	4b3a      	ldr	r3, [pc, #232]	; (800976c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968a:	2b00      	cmp	r3, #0
 800968c:	d0f0      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800968e:	4b36      	ldr	r3, [pc, #216]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009696:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d02f      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x166>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d028      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096ac:	4b2e      	ldr	r3, [pc, #184]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096b4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096b6:	4b2e      	ldr	r3, [pc, #184]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096b8:	2201      	movs	r2, #1
 80096ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096bc:	4b2c      	ldr	r3, [pc, #176]	; (8009770 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80096c2:	4a29      	ldr	r2, [pc, #164]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80096c8:	4b27      	ldr	r3, [pc, #156]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d114      	bne.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80096d4:	f7fd f90c 	bl	80068f0 <HAL_GetTick>
 80096d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096da:	e00a      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096dc:	f7fd f908 	bl	80068f0 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d901      	bls.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e034      	b.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096f2:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	f003 0302 	and.w	r3, r3, #2
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d0ee      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800970a:	d10d      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800970c:	4b16      	ldr	r3, [pc, #88]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800971c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009720:	4911      	ldr	r1, [pc, #68]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009722:	4313      	orrs	r3, r2
 8009724:	608b      	str	r3, [r1, #8]
 8009726:	e005      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8009728:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	4a0e      	ldr	r2, [pc, #56]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800972e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009732:	6093      	str	r3, [r2, #8]
 8009734:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009740:	4909      	ldr	r1, [pc, #36]	; (8009768 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009742:	4313      	orrs	r3, r2
 8009744:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d003      	beq.n	800975a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7d1a      	ldrb	r2, [r3, #20]
 8009756:	4b07      	ldr	r3, [pc, #28]	; (8009774 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8009758:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3718      	adds	r7, #24
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	42470068 	.word	0x42470068
 8009768:	40023800 	.word	0x40023800
 800976c:	40007000 	.word	0x40007000
 8009770:	42470e40 	.word	0x42470e40
 8009774:	424711e0 	.word	0x424711e0

08009778 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e066      	b.n	800985c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	7f5b      	ldrb	r3, [r3, #29]
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d105      	bne.n	80097a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7fc fcc2 	bl	8006128 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	22ca      	movs	r2, #202	; 0xca
 80097b0:	625a      	str	r2, [r3, #36]	; 0x24
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2253      	movs	r2, #83	; 0x53
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fb6f 	bl	8009e9e <RTC_EnterInitMode>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d12c      	bne.n	8009824 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	6812      	ldr	r2, [r2, #0]
 80097d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097dc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6899      	ldr	r1, [r3, #8]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	431a      	orrs	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	695b      	ldr	r3, [r3, #20]
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	430a      	orrs	r2, r1
 80097fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	68d2      	ldr	r2, [r2, #12]
 8009804:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	6919      	ldr	r1, [r3, #16]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	041a      	lsls	r2, r3, #16
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	430a      	orrs	r2, r1
 8009818:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f000 fb76 	bl	8009f0c <RTC_ExitInitMode>
 8009820:	4603      	mov	r3, r0
 8009822:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009824:	7bfb      	ldrb	r3, [r7, #15]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d113      	bne.n	8009852 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009838:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	699a      	ldr	r2, [r3, #24]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	430a      	orrs	r2, r1
 800984a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2201      	movs	r2, #1
 8009850:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	22ff      	movs	r2, #255	; 0xff
 8009858:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800985a:	7bfb      	ldrb	r3, [r7, #15]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3710      	adds	r7, #16
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009864:	b590      	push	{r4, r7, lr}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009870:	2300      	movs	r3, #0
 8009872:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	7f1b      	ldrb	r3, [r3, #28]
 8009878:	2b01      	cmp	r3, #1
 800987a:	d101      	bne.n	8009880 <HAL_RTC_SetTime+0x1c>
 800987c:	2302      	movs	r3, #2
 800987e:	e087      	b.n	8009990 <HAL_RTC_SetTime+0x12c>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2201      	movs	r2, #1
 8009884:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2202      	movs	r2, #2
 800988a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d126      	bne.n	80098e0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800989c:	2b00      	cmp	r3, #0
 800989e:	d102      	bne.n	80098a6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	2200      	movs	r2, #0
 80098a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f000 fb53 	bl	8009f56 <RTC_ByteToBcd2>
 80098b0:	4603      	mov	r3, r0
 80098b2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	785b      	ldrb	r3, [r3, #1]
 80098b8:	4618      	mov	r0, r3
 80098ba:	f000 fb4c 	bl	8009f56 <RTC_ByteToBcd2>
 80098be:	4603      	mov	r3, r0
 80098c0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098c2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	789b      	ldrb	r3, [r3, #2]
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 fb44 	bl	8009f56 <RTC_ByteToBcd2>
 80098ce:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098d0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	78db      	ldrb	r3, [r3, #3]
 80098d8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	e018      	b.n	8009912 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d102      	bne.n	80098f4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2200      	movs	r2, #0
 80098f2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	785b      	ldrb	r3, [r3, #1]
 80098fe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009900:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009902:	68ba      	ldr	r2, [r7, #8]
 8009904:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009906:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	78db      	ldrb	r3, [r3, #3]
 800990c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800990e:	4313      	orrs	r3, r2
 8009910:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	22ca      	movs	r2, #202	; 0xca
 8009918:	625a      	str	r2, [r3, #36]	; 0x24
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2253      	movs	r2, #83	; 0x53
 8009920:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 fabb 	bl	8009e9e <RTC_EnterInitMode>
 8009928:	4603      	mov	r3, r0
 800992a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800992c:	7cfb      	ldrb	r3, [r7, #19]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d120      	bne.n	8009974 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800993c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009940:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689a      	ldr	r2, [r3, #8]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009950:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6899      	ldr	r1, [r3, #8]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	68da      	ldr	r2, [r3, #12]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	431a      	orrs	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	430a      	orrs	r2, r1
 8009968:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 face 	bl	8009f0c <RTC_ExitInitMode>
 8009970:	4603      	mov	r3, r0
 8009972:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009974:	7cfb      	ldrb	r3, [r7, #19]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2201      	movs	r2, #1
 800997e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	22ff      	movs	r2, #255	; 0xff
 8009986:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	771a      	strb	r2, [r3, #28]

  return status;
 800998e:	7cfb      	ldrb	r3, [r7, #19]
}
 8009990:	4618      	mov	r0, r3
 8009992:	371c      	adds	r7, #28
 8009994:	46bd      	mov	sp, r7
 8009996:	bd90      	pop	{r4, r7, pc}

08009998 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80099a4:	2300      	movs	r3, #0
 80099a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80099ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80099ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	0c1b      	lsrs	r3, r3, #16
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099da:	b2da      	uxtb	r2, r3
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	0a1b      	lsrs	r3, r3, #8
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ea:	b2da      	uxtb	r2, r3
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	0d9b      	lsrs	r3, r3, #22
 8009a02:	b2db      	uxtb	r3, r3
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	b2da      	uxtb	r2, r3
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d11a      	bne.n	8009a4a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 fab9 	bl	8009f90 <RTC_Bcd2ToByte>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	461a      	mov	r2, r3
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	785b      	ldrb	r3, [r3, #1]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fab0 	bl	8009f90 <RTC_Bcd2ToByte>
 8009a30:	4603      	mov	r3, r0
 8009a32:	461a      	mov	r2, r3
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	789b      	ldrb	r3, [r3, #2]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f000 faa7 	bl	8009f90 <RTC_Bcd2ToByte>
 8009a42:	4603      	mov	r3, r0
 8009a44:	461a      	mov	r2, r3
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b087      	sub	sp, #28
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	7f1b      	ldrb	r3, [r3, #28]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d101      	bne.n	8009a70 <HAL_RTC_SetDate+0x1c>
 8009a6c:	2302      	movs	r3, #2
 8009a6e:	e071      	b.n	8009b54 <HAL_RTC_SetDate+0x100>
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2201      	movs	r2, #1
 8009a74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10e      	bne.n	8009aa0 <HAL_RTC_SetDate+0x4c>
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	785b      	ldrb	r3, [r3, #1]
 8009a86:	f003 0310 	and.w	r3, r3, #16
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d008      	beq.n	8009aa0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	785b      	ldrb	r3, [r3, #1]
 8009a92:	f023 0310 	bic.w	r3, r3, #16
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	330a      	adds	r3, #10
 8009a9a:	b2da      	uxtb	r2, r3
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d11c      	bne.n	8009ae0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	78db      	ldrb	r3, [r3, #3]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f000 fa53 	bl	8009f56 <RTC_ByteToBcd2>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	785b      	ldrb	r3, [r3, #1]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f000 fa4c 	bl	8009f56 <RTC_ByteToBcd2>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ac2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	789b      	ldrb	r3, [r3, #2]
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f000 fa44 	bl	8009f56 <RTC_ByteToBcd2>
 8009ace:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009ad0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009ada:	4313      	orrs	r3, r2
 8009adc:	617b      	str	r3, [r7, #20]
 8009ade:	e00e      	b.n	8009afe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	78db      	ldrb	r3, [r3, #3]
 8009ae4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	785b      	ldrb	r3, [r3, #1]
 8009aea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009aec:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009af2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	22ca      	movs	r2, #202	; 0xca
 8009b04:	625a      	str	r2, [r3, #36]	; 0x24
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	2253      	movs	r2, #83	; 0x53
 8009b0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 f9c5 	bl	8009e9e <RTC_EnterInitMode>
 8009b14:	4603      	mov	r3, r0
 8009b16:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009b18:	7cfb      	ldrb	r3, [r7, #19]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10c      	bne.n	8009b38 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b28:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b2c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b2e:	68f8      	ldr	r0, [r7, #12]
 8009b30:	f000 f9ec 	bl	8009f0c <RTC_ExitInitMode>
 8009b34:	4603      	mov	r3, r0
 8009b36:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b38:	7cfb      	ldrb	r3, [r7, #19]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d102      	bne.n	8009b44 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2201      	movs	r2, #1
 8009b42:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	22ff      	movs	r2, #255	; 0xff
 8009b4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	771a      	strb	r2, [r3, #28]

  return status;
 8009b52:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	371c      	adds	r7, #28
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd90      	pop	{r4, r7, pc}

08009b5c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b7a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	0c1b      	lsrs	r3, r3, #16
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	0a1b      	lsrs	r3, r3, #8
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f003 031f 	and.w	r3, r3, #31
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b9e:	b2da      	uxtb	r2, r3
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009ba4:	697b      	ldr	r3, [r7, #20]
 8009ba6:	0b5b      	lsrs	r3, r3, #13
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d11a      	bne.n	8009bf0 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	78db      	ldrb	r3, [r3, #3]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 f9e6 	bl	8009f90 <RTC_Bcd2ToByte>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	785b      	ldrb	r3, [r3, #1]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 f9dd 	bl	8009f90 <RTC_Bcd2ToByte>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	461a      	mov	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	789b      	ldrb	r3, [r3, #2]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f000 f9d4 	bl	8009f90 <RTC_Bcd2ToByte>
 8009be8:	4603      	mov	r3, r0
 8009bea:	461a      	mov	r2, r3
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3718      	adds	r7, #24
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}

08009bfa <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009bfa:	b590      	push	{r4, r7, lr}
 8009bfc:	b089      	sub	sp, #36	; 0x24
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	60f8      	str	r0, [r7, #12]
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009c06:	2300      	movs	r3, #0
 8009c08:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	7f1b      	ldrb	r3, [r3, #28]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d101      	bne.n	8009c1e <HAL_RTC_SetAlarm+0x24>
 8009c1a:	2302      	movs	r3, #2
 8009c1c:	e113      	b.n	8009e46 <HAL_RTC_SetAlarm+0x24c>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2202      	movs	r2, #2
 8009c28:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d137      	bne.n	8009ca0 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d102      	bne.n	8009c44 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2200      	movs	r2, #0
 8009c42:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 f984 	bl	8009f56 <RTC_ByteToBcd2>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	785b      	ldrb	r3, [r3, #1]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 f97d 	bl	8009f56 <RTC_ByteToBcd2>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c60:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	789b      	ldrb	r3, [r3, #2]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 f975 	bl	8009f56 <RTC_ByteToBcd2>
 8009c6c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c6e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	78db      	ldrb	r3, [r3, #3]
 8009c76:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009c78:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c82:	4618      	mov	r0, r3
 8009c84:	f000 f967 	bl	8009f56 <RTC_ByteToBcd2>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009c8c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009c94:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	61fb      	str	r3, [r7, #28]
 8009c9e:	e023      	b.n	8009ce8 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d102      	bne.n	8009cb4 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	785b      	ldrb	r3, [r3, #1]
 8009cbe:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009cc0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009cc6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	78db      	ldrb	r3, [r3, #3]
 8009ccc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009cce:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cd6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8009cd8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009cde:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	22ca      	movs	r2, #202	; 0xca
 8009cfa:	625a      	str	r2, [r3, #36]	; 0x24
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	2253      	movs	r2, #83	; 0x53
 8009d02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d0c:	d148      	bne.n	8009da0 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689a      	ldr	r2, [r3, #8]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d1c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689a      	ldr	r2, [r3, #8]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d2c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	b2da      	uxtb	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8009d3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009d40:	f7fc fdd6 	bl	80068f0 <HAL_GetTick>
 8009d44:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009d46:	e013      	b.n	8009d70 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009d48:	f7fc fdd2 	bl	80068f0 <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d56:	d90b      	bls.n	8009d70 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	22ff      	movs	r2, #255	; 0xff
 8009d5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2203      	movs	r2, #3
 8009d64:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009d6c:	2303      	movs	r3, #3
 8009d6e:	e06a      	b.n	8009e46 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d0e4      	beq.n	8009d48 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	69fa      	ldr	r2, [r7, #28]
 8009d84:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d9c:	609a      	str	r2, [r3, #8]
 8009d9e:	e047      	b.n	8009e30 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	689a      	ldr	r2, [r3, #8]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009dae:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689a      	ldr	r2, [r3, #8]
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009dbe:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	68db      	ldr	r3, [r3, #12]
 8009dc6:	b2da      	uxtb	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009dd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009dd2:	f7fc fd8d 	bl	80068f0 <HAL_GetTick>
 8009dd6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009dd8:	e013      	b.n	8009e02 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009dda:	f7fc fd89 	bl	80068f0 <HAL_GetTick>
 8009dde:	4602      	mov	r2, r0
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	1ad3      	subs	r3, r2, r3
 8009de4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009de8:	d90b      	bls.n	8009e02 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	22ff      	movs	r2, #255	; 0xff
 8009df0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2203      	movs	r2, #3
 8009df6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009dfe:	2303      	movs	r3, #3
 8009e00:	e021      	b.n	8009e46 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0e4      	beq.n	8009dda <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	689a      	ldr	r2, [r3, #8]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e2e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	22ff      	movs	r2, #255	; 0xff
 8009e36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2200      	movs	r2, #0
 8009e42:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009e44:	2300      	movs	r3, #0
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3724      	adds	r7, #36	; 0x24
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd90      	pop	{r4, r7, pc}

08009e4e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e4e:	b580      	push	{r7, lr}
 8009e50:	b084      	sub	sp, #16
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009e56:	2300      	movs	r3, #0
 8009e58:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68da      	ldr	r2, [r3, #12]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009e68:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e6a:	f7fc fd41 	bl	80068f0 <HAL_GetTick>
 8009e6e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e70:	e009      	b.n	8009e86 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e72:	f7fc fd3d 	bl	80068f0 <HAL_GetTick>
 8009e76:	4602      	mov	r2, r0
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	1ad3      	subs	r3, r2, r3
 8009e7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e80:	d901      	bls.n	8009e86 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e007      	b.n	8009e96 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f003 0320 	and.w	r3, r3, #32
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d0ee      	beq.n	8009e72 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d122      	bne.n	8009f02 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009eca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ecc:	f7fc fd10 	bl	80068f0 <HAL_GetTick>
 8009ed0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ed2:	e00c      	b.n	8009eee <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009ed4:	f7fc fd0c 	bl	80068f0 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ee2:	d904      	bls.n	8009eee <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009eea:	2301      	movs	r3, #1
 8009eec:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <RTC_EnterInitMode+0x64>
 8009efc:	7bfb      	ldrb	r3, [r7, #15]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d1e8      	bne.n	8009ed4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68da      	ldr	r2, [r3, #12]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f26:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f003 0320 	and.w	r3, r3, #32
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10a      	bne.n	8009f4c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff ff89 	bl	8009e4e <HAL_RTC_WaitForSynchro>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d004      	beq.n	8009f4c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2204      	movs	r2, #4
 8009f46:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009f56:	b480      	push	{r7}
 8009f58:	b085      	sub	sp, #20
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009f64:	e005      	b.n	8009f72 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009f6c:	79fb      	ldrb	r3, [r7, #7]
 8009f6e:	3b0a      	subs	r3, #10
 8009f70:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	2b09      	cmp	r3, #9
 8009f76:	d8f6      	bhi.n	8009f66 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009f78:	7bfb      	ldrb	r3, [r7, #15]
 8009f7a:	011b      	lsls	r3, r3, #4
 8009f7c:	b2da      	uxtb	r2, r3
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	b2db      	uxtb	r3, r3
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	4603      	mov	r3, r0
 8009f98:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009f9e:	79fb      	ldrb	r3, [r7, #7]
 8009fa0:	091b      	lsrs	r3, r3, #4
 8009fa2:	b2db      	uxtb	r3, r3
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	0092      	lsls	r2, r2, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	f003 030f 	and.w	r3, r3, #15
 8009fb4:	b2da      	uxtb	r2, r3
 8009fb6:	7bfb      	ldrb	r3, [r7, #15]
 8009fb8:	4413      	add	r3, r2
 8009fba:	b2db      	uxtb	r3, r3
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3714      	adds	r7, #20
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d101      	bne.n	8009fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e07b      	b.n	800a0d2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d108      	bne.n	8009ff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009fea:	d009      	beq.n	800a000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	61da      	str	r2, [r3, #28]
 8009ff2:	e005      	b.n	800a000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d106      	bne.n	800a020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f7fc f8e6 	bl	80061ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2202      	movs	r2, #2
 800a024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a036:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a052:	431a      	orrs	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	f003 0302 	and.w	r3, r3, #2
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	699b      	ldr	r3, [r3, #24]
 800a06c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a070:	431a      	orrs	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a07a:	431a      	orrs	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a1b      	ldr	r3, [r3, #32]
 800a080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a084:	ea42 0103 	orr.w	r1, r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	430a      	orrs	r2, r1
 800a096:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	699b      	ldr	r3, [r3, #24]
 800a09c:	0c1b      	lsrs	r3, r3, #16
 800a09e:	f003 0104 	and.w	r1, r3, #4
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a6:	f003 0210 	and.w	r2, r3, #16
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	69da      	ldr	r2, [r3, #28]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0c0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3708      	adds	r7, #8
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b08c      	sub	sp, #48	; 0x30
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	60b9      	str	r1, [r7, #8]
 800a0e4:	607a      	str	r2, [r7, #4]
 800a0e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d101      	bne.n	800a100 <HAL_SPI_TransmitReceive+0x26>
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	e18a      	b.n	800a416 <HAL_SPI_TransmitReceive+0x33c>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2201      	movs	r2, #1
 800a104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a108:	f7fc fbf2 	bl	80068f0 <HAL_GetTick>
 800a10c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a11e:	887b      	ldrh	r3, [r7, #2]
 800a120:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a122:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a126:	2b01      	cmp	r3, #1
 800a128:	d00f      	beq.n	800a14a <HAL_SPI_TransmitReceive+0x70>
 800a12a:	69fb      	ldr	r3, [r7, #28]
 800a12c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a130:	d107      	bne.n	800a142 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d103      	bne.n	800a142 <HAL_SPI_TransmitReceive+0x68>
 800a13a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a13e:	2b04      	cmp	r3, #4
 800a140:	d003      	beq.n	800a14a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a142:	2302      	movs	r3, #2
 800a144:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a148:	e15b      	b.n	800a402 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d005      	beq.n	800a15c <HAL_SPI_TransmitReceive+0x82>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d002      	beq.n	800a15c <HAL_SPI_TransmitReceive+0x82>
 800a156:	887b      	ldrh	r3, [r7, #2]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d103      	bne.n	800a164 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a162:	e14e      	b.n	800a402 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	d003      	beq.n	800a178 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2205      	movs	r2, #5
 800a174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	887a      	ldrh	r2, [r7, #2]
 800a188:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	887a      	ldrh	r2, [r7, #2]
 800a18e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	887a      	ldrh	r2, [r7, #2]
 800a19a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	887a      	ldrh	r2, [r7, #2]
 800a1a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b8:	2b40      	cmp	r3, #64	; 0x40
 800a1ba:	d007      	beq.n	800a1cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	68db      	ldr	r3, [r3, #12]
 800a1d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1d4:	d178      	bne.n	800a2c8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <HAL_SPI_TransmitReceive+0x10a>
 800a1de:	8b7b      	ldrh	r3, [r7, #26]
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d166      	bne.n	800a2b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e8:	881a      	ldrh	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f4:	1c9a      	adds	r2, r3, #2
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1fe:	b29b      	uxth	r3, r3
 800a200:	3b01      	subs	r3, #1
 800a202:	b29a      	uxth	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a208:	e053      	b.n	800a2b2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	f003 0302 	and.w	r3, r3, #2
 800a214:	2b02      	cmp	r3, #2
 800a216:	d11b      	bne.n	800a250 <HAL_SPI_TransmitReceive+0x176>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d016      	beq.n	800a250 <HAL_SPI_TransmitReceive+0x176>
 800a222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a224:	2b01      	cmp	r3, #1
 800a226:	d113      	bne.n	800a250 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a22c:	881a      	ldrh	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a238:	1c9a      	adds	r2, r3, #2
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a242:	b29b      	uxth	r3, r3
 800a244:	3b01      	subs	r3, #1
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a24c:	2300      	movs	r3, #0
 800a24e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d119      	bne.n	800a292 <HAL_SPI_TransmitReceive+0x1b8>
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a262:	b29b      	uxth	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d014      	beq.n	800a292 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68da      	ldr	r2, [r3, #12]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a272:	b292      	uxth	r2, r2
 800a274:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27a:	1c9a      	adds	r2, r3, #2
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a284:	b29b      	uxth	r3, r3
 800a286:	3b01      	subs	r3, #1
 800a288:	b29a      	uxth	r2, r3
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a28e:	2301      	movs	r3, #1
 800a290:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a292:	f7fc fb2d 	bl	80068f0 <HAL_GetTick>
 800a296:	4602      	mov	r2, r0
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	1ad3      	subs	r3, r2, r3
 800a29c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d807      	bhi.n	800a2b2 <HAL_SPI_TransmitReceive+0x1d8>
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2a8:	d003      	beq.n	800a2b2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a2b0:	e0a7      	b.n	800a402 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1a6      	bne.n	800a20a <HAL_SPI_TransmitReceive+0x130>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1a1      	bne.n	800a20a <HAL_SPI_TransmitReceive+0x130>
 800a2c6:	e07c      	b.n	800a3c2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	685b      	ldr	r3, [r3, #4]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d002      	beq.n	800a2d6 <HAL_SPI_TransmitReceive+0x1fc>
 800a2d0:	8b7b      	ldrh	r3, [r7, #26]
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d16b      	bne.n	800a3ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	330c      	adds	r3, #12
 800a2e0:	7812      	ldrb	r2, [r2, #0]
 800a2e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e8:	1c5a      	adds	r2, r3, #1
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a2fc:	e057      	b.n	800a3ae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d11c      	bne.n	800a346 <HAL_SPI_TransmitReceive+0x26c>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a310:	b29b      	uxth	r3, r3
 800a312:	2b00      	cmp	r3, #0
 800a314:	d017      	beq.n	800a346 <HAL_SPI_TransmitReceive+0x26c>
 800a316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d114      	bne.n	800a346 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	330c      	adds	r3, #12
 800a326:	7812      	ldrb	r2, [r2, #0]
 800a328:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a32e:	1c5a      	adds	r2, r3, #1
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a338:	b29b      	uxth	r3, r3
 800a33a:	3b01      	subs	r3, #1
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	f003 0301 	and.w	r3, r3, #1
 800a350:	2b01      	cmp	r3, #1
 800a352:	d119      	bne.n	800a388 <HAL_SPI_TransmitReceive+0x2ae>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a358:	b29b      	uxth	r3, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d014      	beq.n	800a388 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	68da      	ldr	r2, [r3, #12]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a368:	b2d2      	uxtb	r2, r2
 800a36a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a370:	1c5a      	adds	r2, r3, #1
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	3b01      	subs	r3, #1
 800a37e:	b29a      	uxth	r2, r3
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a384:	2301      	movs	r3, #1
 800a386:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a388:	f7fc fab2 	bl	80068f0 <HAL_GetTick>
 800a38c:	4602      	mov	r2, r0
 800a38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a394:	429a      	cmp	r2, r3
 800a396:	d803      	bhi.n	800a3a0 <HAL_SPI_TransmitReceive+0x2c6>
 800a398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a39e:	d102      	bne.n	800a3a6 <HAL_SPI_TransmitReceive+0x2cc>
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d103      	bne.n	800a3ae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a3ac:	e029      	b.n	800a402 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1a2      	bne.n	800a2fe <HAL_SPI_TransmitReceive+0x224>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d19d      	bne.n	800a2fe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 f8b2 	bl	800a530 <SPI_EndRxTxTransaction>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a3de:	e010      	b.n	800a402 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d10b      	bne.n	800a400 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68db      	ldr	r3, [r3, #12]
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	617b      	str	r3, [r7, #20]
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	e000      	b.n	800a402 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a400:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a412:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a416:	4618      	mov	r0, r3
 800a418:	3730      	adds	r7, #48	; 0x30
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b088      	sub	sp, #32
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	4613      	mov	r3, r2
 800a42e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a430:	f7fc fa5e 	bl	80068f0 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	4413      	add	r3, r2
 800a43e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a440:	f7fc fa56 	bl	80068f0 <HAL_GetTick>
 800a444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a446:	4b39      	ldr	r3, [pc, #228]	; (800a52c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	015b      	lsls	r3, r3, #5
 800a44c:	0d1b      	lsrs	r3, r3, #20
 800a44e:	69fa      	ldr	r2, [r7, #28]
 800a450:	fb02 f303 	mul.w	r3, r2, r3
 800a454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a456:	e054      	b.n	800a502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45e:	d050      	beq.n	800a502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a460:	f7fc fa46 	bl	80068f0 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d902      	bls.n	800a476 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d13d      	bne.n	800a4f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a48e:	d111      	bne.n	800a4b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a498:	d004      	beq.n	800a4a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4a2:	d107      	bne.n	800a4b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4bc:	d10f      	bne.n	800a4de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e017      	b.n	800a522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	4013      	ands	r3, r2
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	429a      	cmp	r2, r3
 800a510:	bf0c      	ite	eq
 800a512:	2301      	moveq	r3, #1
 800a514:	2300      	movne	r3, #0
 800a516:	b2db      	uxtb	r3, r3
 800a518:	461a      	mov	r2, r3
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d19b      	bne.n	800a458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3720      	adds	r7, #32
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20000008 	.word	0x20000008

0800a530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b088      	sub	sp, #32
 800a534:	af02      	add	r7, sp, #8
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a53c:	4b1b      	ldr	r3, [pc, #108]	; (800a5ac <SPI_EndRxTxTransaction+0x7c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a1b      	ldr	r2, [pc, #108]	; (800a5b0 <SPI_EndRxTxTransaction+0x80>)
 800a542:	fba2 2303 	umull	r2, r3, r2, r3
 800a546:	0d5b      	lsrs	r3, r3, #21
 800a548:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a54c:	fb02 f303 	mul.w	r3, r2, r3
 800a550:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	685b      	ldr	r3, [r3, #4]
 800a556:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a55a:	d112      	bne.n	800a582 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2200      	movs	r2, #0
 800a564:	2180      	movs	r1, #128	; 0x80
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f7ff ff5a 	bl	800a420 <SPI_WaitFlagStateUntilTimeout>
 800a56c:	4603      	mov	r3, r0
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d016      	beq.n	800a5a0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a576:	f043 0220 	orr.w	r2, r3, #32
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e00f      	b.n	800a5a2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00a      	beq.n	800a59e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	3b01      	subs	r3, #1
 800a58c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a598:	2b80      	cmp	r3, #128	; 0x80
 800a59a:	d0f2      	beq.n	800a582 <SPI_EndRxTxTransaction+0x52>
 800a59c:	e000      	b.n	800a5a0 <SPI_EndRxTxTransaction+0x70>
        break;
 800a59e:	bf00      	nop
  }

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3718      	adds	r7, #24
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20000008 	.word	0x20000008
 800a5b0:	165e9f81 	.word	0x165e9f81

0800a5b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e041      	b.n	800a64a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5cc:	b2db      	uxtb	r3, r3
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f7fc f85a 	bl	8006694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2202      	movs	r2, #2
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	3304      	adds	r3, #4
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	f000 fc54 	bl	800aea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2201      	movs	r2, #1
 800a604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
	...

0800a654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a662:	b2db      	uxtb	r3, r3
 800a664:	2b01      	cmp	r3, #1
 800a666:	d001      	beq.n	800a66c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a668:	2301      	movs	r3, #1
 800a66a:	e044      	b.n	800a6f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2202      	movs	r2, #2
 800a670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f042 0201 	orr.w	r2, r2, #1
 800a682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a1e      	ldr	r2, [pc, #120]	; (800a704 <HAL_TIM_Base_Start_IT+0xb0>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d018      	beq.n	800a6c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a696:	d013      	beq.n	800a6c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a1a      	ldr	r2, [pc, #104]	; (800a708 <HAL_TIM_Base_Start_IT+0xb4>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d00e      	beq.n	800a6c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a19      	ldr	r2, [pc, #100]	; (800a70c <HAL_TIM_Base_Start_IT+0xb8>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d009      	beq.n	800a6c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a17      	ldr	r2, [pc, #92]	; (800a710 <HAL_TIM_Base_Start_IT+0xbc>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d004      	beq.n	800a6c0 <HAL_TIM_Base_Start_IT+0x6c>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a16      	ldr	r2, [pc, #88]	; (800a714 <HAL_TIM_Base_Start_IT+0xc0>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d111      	bne.n	800a6e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b06      	cmp	r3, #6
 800a6d0:	d010      	beq.n	800a6f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f042 0201 	orr.w	r2, r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e2:	e007      	b.n	800a6f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f042 0201 	orr.w	r2, r2, #1
 800a6f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3714      	adds	r7, #20
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr
 800a702:	bf00      	nop
 800a704:	40010000 	.word	0x40010000
 800a708:	40000400 	.word	0x40000400
 800a70c:	40000800 	.word	0x40000800
 800a710:	40000c00 	.word	0x40000c00
 800a714:	40014000 	.word	0x40014000

0800a718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b082      	sub	sp, #8
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e041      	b.n	800a7ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a730:	b2db      	uxtb	r3, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d106      	bne.n	800a744 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 f839 	bl	800a7b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2202      	movs	r2, #2
 800a748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3304      	adds	r3, #4
 800a754:	4619      	mov	r1, r3
 800a756:	4610      	mov	r0, r2
 800a758:	f000 fba2 	bl	800aea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2201      	movs	r2, #1
 800a790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3708      	adds	r7, #8
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a7be:	bf00      	nop
 800a7c0:	370c      	adds	r7, #12
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
	...

0800a7cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d109      	bne.n	800a7f0 <HAL_TIM_PWM_Start+0x24>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	bf14      	ite	ne
 800a7e8:	2301      	movne	r3, #1
 800a7ea:	2300      	moveq	r3, #0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	e022      	b.n	800a836 <HAL_TIM_PWM_Start+0x6a>
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	2b04      	cmp	r3, #4
 800a7f4:	d109      	bne.n	800a80a <HAL_TIM_PWM_Start+0x3e>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	bf14      	ite	ne
 800a802:	2301      	movne	r3, #1
 800a804:	2300      	moveq	r3, #0
 800a806:	b2db      	uxtb	r3, r3
 800a808:	e015      	b.n	800a836 <HAL_TIM_PWM_Start+0x6a>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b08      	cmp	r3, #8
 800a80e:	d109      	bne.n	800a824 <HAL_TIM_PWM_Start+0x58>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b01      	cmp	r3, #1
 800a81a:	bf14      	ite	ne
 800a81c:	2301      	movne	r3, #1
 800a81e:	2300      	moveq	r3, #0
 800a820:	b2db      	uxtb	r3, r3
 800a822:	e008      	b.n	800a836 <HAL_TIM_PWM_Start+0x6a>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a82a:	b2db      	uxtb	r3, r3
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	bf14      	ite	ne
 800a830:	2301      	movne	r3, #1
 800a832:	2300      	moveq	r3, #0
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e068      	b.n	800a910 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d104      	bne.n	800a84e <HAL_TIM_PWM_Start+0x82>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2202      	movs	r2, #2
 800a848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a84c:	e013      	b.n	800a876 <HAL_TIM_PWM_Start+0xaa>
 800a84e:	683b      	ldr	r3, [r7, #0]
 800a850:	2b04      	cmp	r3, #4
 800a852:	d104      	bne.n	800a85e <HAL_TIM_PWM_Start+0x92>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2202      	movs	r2, #2
 800a858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a85c:	e00b      	b.n	800a876 <HAL_TIM_PWM_Start+0xaa>
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	2b08      	cmp	r3, #8
 800a862:	d104      	bne.n	800a86e <HAL_TIM_PWM_Start+0xa2>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2202      	movs	r2, #2
 800a868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a86c:	e003      	b.n	800a876 <HAL_TIM_PWM_Start+0xaa>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2202      	movs	r2, #2
 800a872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2201      	movs	r2, #1
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 fdb4 	bl	800b3ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a23      	ldr	r2, [pc, #140]	; (800a918 <HAL_TIM_PWM_Start+0x14c>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d107      	bne.n	800a89e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a89c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a1d      	ldr	r2, [pc, #116]	; (800a918 <HAL_TIM_PWM_Start+0x14c>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d018      	beq.n	800a8da <HAL_TIM_PWM_Start+0x10e>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8b0:	d013      	beq.n	800a8da <HAL_TIM_PWM_Start+0x10e>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a19      	ldr	r2, [pc, #100]	; (800a91c <HAL_TIM_PWM_Start+0x150>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d00e      	beq.n	800a8da <HAL_TIM_PWM_Start+0x10e>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a17      	ldr	r2, [pc, #92]	; (800a920 <HAL_TIM_PWM_Start+0x154>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d009      	beq.n	800a8da <HAL_TIM_PWM_Start+0x10e>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	4a16      	ldr	r2, [pc, #88]	; (800a924 <HAL_TIM_PWM_Start+0x158>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d004      	beq.n	800a8da <HAL_TIM_PWM_Start+0x10e>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a14      	ldr	r2, [pc, #80]	; (800a928 <HAL_TIM_PWM_Start+0x15c>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d111      	bne.n	800a8fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	f003 0307 	and.w	r3, r3, #7
 800a8e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b06      	cmp	r3, #6
 800a8ea:	d010      	beq.n	800a90e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0201 	orr.w	r2, r2, #1
 800a8fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8fc:	e007      	b.n	800a90e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f042 0201 	orr.w	r2, r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3710      	adds	r7, #16
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	40010000 	.word	0x40010000
 800a91c:	40000400 	.word	0x40000400
 800a920:	40000800 	.word	0x40000800
 800a924:	40000c00 	.word	0x40000c00
 800a928:	40014000 	.word	0x40014000

0800a92c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	f003 0302 	and.w	r3, r3, #2
 800a93e:	2b02      	cmp	r3, #2
 800a940:	d122      	bne.n	800a988 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	f003 0302 	and.w	r3, r3, #2
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d11b      	bne.n	800a988 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f06f 0202 	mvn.w	r2, #2
 800a958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	699b      	ldr	r3, [r3, #24]
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fa77 	bl	800ae62 <HAL_TIM_IC_CaptureCallback>
 800a974:	e005      	b.n	800a982 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fa69 	bl	800ae4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f000 fa7a 	bl	800ae76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0304 	and.w	r3, r3, #4
 800a992:	2b04      	cmp	r3, #4
 800a994:	d122      	bne.n	800a9dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f003 0304 	and.w	r3, r3, #4
 800a9a0:	2b04      	cmp	r3, #4
 800a9a2:	d11b      	bne.n	800a9dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f06f 0204 	mvn.w	r2, #4
 800a9ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2202      	movs	r2, #2
 800a9b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fa4d 	bl	800ae62 <HAL_TIM_IC_CaptureCallback>
 800a9c8:	e005      	b.n	800a9d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fa3f 	bl	800ae4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 fa50 	bl	800ae76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	f003 0308 	and.w	r3, r3, #8
 800a9e6:	2b08      	cmp	r3, #8
 800a9e8:	d122      	bne.n	800aa30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	f003 0308 	and.w	r3, r3, #8
 800a9f4:	2b08      	cmp	r3, #8
 800a9f6:	d11b      	bne.n	800aa30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f06f 0208 	mvn.w	r2, #8
 800aa00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2204      	movs	r2, #4
 800aa06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	69db      	ldr	r3, [r3, #28]
 800aa0e:	f003 0303 	and.w	r3, r3, #3
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fa23 	bl	800ae62 <HAL_TIM_IC_CaptureCallback>
 800aa1c:	e005      	b.n	800aa2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 fa15 	bl	800ae4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fa26 	bl	800ae76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	f003 0310 	and.w	r3, r3, #16
 800aa3a:	2b10      	cmp	r3, #16
 800aa3c:	d122      	bne.n	800aa84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	f003 0310 	and.w	r3, r3, #16
 800aa48:	2b10      	cmp	r3, #16
 800aa4a:	d11b      	bne.n	800aa84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f06f 0210 	mvn.w	r2, #16
 800aa54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2208      	movs	r2, #8
 800aa5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d003      	beq.n	800aa72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f000 f9f9 	bl	800ae62 <HAL_TIM_IC_CaptureCallback>
 800aa70:	e005      	b.n	800aa7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 f9eb 	bl	800ae4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f9fc 	bl	800ae76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d10e      	bne.n	800aab0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	f003 0301 	and.w	r3, r3, #1
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d107      	bne.n	800aab0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f06f 0201 	mvn.w	r2, #1
 800aaa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7f9 fe28 	bl	8004700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaba:	2b80      	cmp	r3, #128	; 0x80
 800aabc:	d10e      	bne.n	800aadc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac8:	2b80      	cmp	r3, #128	; 0x80
 800aaca:	d107      	bne.n	800aadc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f000 fd26 	bl	800b528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aae6:	2b40      	cmp	r3, #64	; 0x40
 800aae8:	d10e      	bne.n	800ab08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf4:	2b40      	cmp	r3, #64	; 0x40
 800aaf6:	d107      	bne.n	800ab08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 f9c1 	bl	800ae8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	f003 0320 	and.w	r3, r3, #32
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	d10e      	bne.n	800ab34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	f003 0320 	and.w	r3, r3, #32
 800ab20:	2b20      	cmp	r3, #32
 800ab22:	d107      	bne.n	800ab34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f06f 0220 	mvn.w	r2, #32
 800ab2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fcf0 	bl	800b514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab34:	bf00      	nop
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b086      	sub	sp, #24
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab52:	2b01      	cmp	r3, #1
 800ab54:	d101      	bne.n	800ab5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ab56:	2302      	movs	r3, #2
 800ab58:	e0ae      	b.n	800acb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b0c      	cmp	r3, #12
 800ab66:	f200 809f 	bhi.w	800aca8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ab6a:	a201      	add	r2, pc, #4	; (adr r2, 800ab70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ab6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab70:	0800aba5 	.word	0x0800aba5
 800ab74:	0800aca9 	.word	0x0800aca9
 800ab78:	0800aca9 	.word	0x0800aca9
 800ab7c:	0800aca9 	.word	0x0800aca9
 800ab80:	0800abe5 	.word	0x0800abe5
 800ab84:	0800aca9 	.word	0x0800aca9
 800ab88:	0800aca9 	.word	0x0800aca9
 800ab8c:	0800aca9 	.word	0x0800aca9
 800ab90:	0800ac27 	.word	0x0800ac27
 800ab94:	0800aca9 	.word	0x0800aca9
 800ab98:	0800aca9 	.word	0x0800aca9
 800ab9c:	0800aca9 	.word	0x0800aca9
 800aba0:	0800ac67 	.word	0x0800ac67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	68b9      	ldr	r1, [r7, #8]
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 f9f8 	bl	800afa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	699a      	ldr	r2, [r3, #24]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f042 0208 	orr.w	r2, r2, #8
 800abbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	699a      	ldr	r2, [r3, #24]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 0204 	bic.w	r2, r2, #4
 800abce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	6999      	ldr	r1, [r3, #24]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	691a      	ldr	r2, [r3, #16]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	619a      	str	r2, [r3, #24]
      break;
 800abe2:	e064      	b.n	800acae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	68b9      	ldr	r1, [r7, #8]
 800abea:	4618      	mov	r0, r3
 800abec:	f000 fa3e 	bl	800b06c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	699a      	ldr	r2, [r3, #24]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800abfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	699a      	ldr	r2, [r3, #24]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	6999      	ldr	r1, [r3, #24]
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	021a      	lsls	r2, r3, #8
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	619a      	str	r2, [r3, #24]
      break;
 800ac24:	e043      	b.n	800acae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fa89 	bl	800b144 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	69da      	ldr	r2, [r3, #28]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f042 0208 	orr.w	r2, r2, #8
 800ac40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69da      	ldr	r2, [r3, #28]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f022 0204 	bic.w	r2, r2, #4
 800ac50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	69d9      	ldr	r1, [r3, #28]
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	691a      	ldr	r2, [r3, #16]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	430a      	orrs	r2, r1
 800ac62:	61da      	str	r2, [r3, #28]
      break;
 800ac64:	e023      	b.n	800acae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68b9      	ldr	r1, [r7, #8]
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 fad3 	bl	800b218 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	69da      	ldr	r2, [r3, #28]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	69da      	ldr	r2, [r3, #28]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69d9      	ldr	r1, [r3, #28]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	021a      	lsls	r2, r3, #8
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	430a      	orrs	r2, r1
 800aca4:	61da      	str	r2, [r3, #28]
      break;
 800aca6:	e002      	b.n	800acae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aca8:	2301      	movs	r3, #1
 800acaa:	75fb      	strb	r3, [r7, #23]
      break;
 800acac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800acb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3718      	adds	r7, #24
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800acca:	2300      	movs	r3, #0
 800accc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <HAL_TIM_ConfigClockSource+0x1c>
 800acd8:	2302      	movs	r3, #2
 800acda:	e0b4      	b.n	800ae46 <HAL_TIM_ConfigClockSource+0x186>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2202      	movs	r2, #2
 800ace8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800acfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad14:	d03e      	beq.n	800ad94 <HAL_TIM_ConfigClockSource+0xd4>
 800ad16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad1a:	f200 8087 	bhi.w	800ae2c <HAL_TIM_ConfigClockSource+0x16c>
 800ad1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad22:	f000 8086 	beq.w	800ae32 <HAL_TIM_ConfigClockSource+0x172>
 800ad26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad2a:	d87f      	bhi.n	800ae2c <HAL_TIM_ConfigClockSource+0x16c>
 800ad2c:	2b70      	cmp	r3, #112	; 0x70
 800ad2e:	d01a      	beq.n	800ad66 <HAL_TIM_ConfigClockSource+0xa6>
 800ad30:	2b70      	cmp	r3, #112	; 0x70
 800ad32:	d87b      	bhi.n	800ae2c <HAL_TIM_ConfigClockSource+0x16c>
 800ad34:	2b60      	cmp	r3, #96	; 0x60
 800ad36:	d050      	beq.n	800adda <HAL_TIM_ConfigClockSource+0x11a>
 800ad38:	2b60      	cmp	r3, #96	; 0x60
 800ad3a:	d877      	bhi.n	800ae2c <HAL_TIM_ConfigClockSource+0x16c>
 800ad3c:	2b50      	cmp	r3, #80	; 0x50
 800ad3e:	d03c      	beq.n	800adba <HAL_TIM_ConfigClockSource+0xfa>
 800ad40:	2b50      	cmp	r3, #80	; 0x50
 800ad42:	d873      	bhi.n	800ae2c <HAL_TIM_ConfigClockSource+0x16c>
 800ad44:	2b40      	cmp	r3, #64	; 0x40
 800ad46:	d058      	beq.n	800adfa <HAL_TIM_ConfigClockSource+0x13a>
 800ad48:	2b40      	cmp	r3, #64	; 0x40
 800ad4a:	d86f      	bhi.n	800ae2c <HAL_TIM_ConfigClockSource+0x16c>
 800ad4c:	2b30      	cmp	r3, #48	; 0x30
 800ad4e:	d064      	beq.n	800ae1a <HAL_TIM_ConfigClockSource+0x15a>
 800ad50:	2b30      	cmp	r3, #48	; 0x30
 800ad52:	d86b      	bhi.n	800ae2c <HAL_TIM_ConfigClockSource+0x16c>
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	d060      	beq.n	800ae1a <HAL_TIM_ConfigClockSource+0x15a>
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d867      	bhi.n	800ae2c <HAL_TIM_ConfigClockSource+0x16c>
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d05c      	beq.n	800ae1a <HAL_TIM_ConfigClockSource+0x15a>
 800ad60:	2b10      	cmp	r3, #16
 800ad62:	d05a      	beq.n	800ae1a <HAL_TIM_ConfigClockSource+0x15a>
 800ad64:	e062      	b.n	800ae2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	6899      	ldr	r1, [r3, #8]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	f000 fb19 	bl	800b3ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68ba      	ldr	r2, [r7, #8]
 800ad90:	609a      	str	r2, [r3, #8]
      break;
 800ad92:	e04f      	b.n	800ae34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	6899      	ldr	r1, [r3, #8]
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	f000 fb02 	bl	800b3ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	689a      	ldr	r2, [r3, #8]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adb6:	609a      	str	r2, [r3, #8]
      break;
 800adb8:	e03c      	b.n	800ae34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6818      	ldr	r0, [r3, #0]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	6859      	ldr	r1, [r3, #4]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	68db      	ldr	r3, [r3, #12]
 800adc6:	461a      	mov	r2, r3
 800adc8:	f000 fa76 	bl	800b2b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2150      	movs	r1, #80	; 0x50
 800add2:	4618      	mov	r0, r3
 800add4:	f000 facf 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800add8:	e02c      	b.n	800ae34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6818      	ldr	r0, [r3, #0]
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	6859      	ldr	r1, [r3, #4]
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	461a      	mov	r2, r3
 800ade8:	f000 fa95 	bl	800b316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	2160      	movs	r1, #96	; 0x60
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 fabf 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800adf8:	e01c      	b.n	800ae34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6818      	ldr	r0, [r3, #0]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	6859      	ldr	r1, [r3, #4]
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	68db      	ldr	r3, [r3, #12]
 800ae06:	461a      	mov	r2, r3
 800ae08:	f000 fa56 	bl	800b2b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2140      	movs	r1, #64	; 0x40
 800ae12:	4618      	mov	r0, r3
 800ae14:	f000 faaf 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800ae18:	e00c      	b.n	800ae34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4619      	mov	r1, r3
 800ae24:	4610      	mov	r0, r2
 800ae26:	f000 faa6 	bl	800b376 <TIM_ITRx_SetConfig>
      break;
 800ae2a:	e003      	b.n	800ae34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae30:	e000      	b.n	800ae34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ae32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2201      	movs	r2, #1
 800ae38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae56:	bf00      	nop
 800ae58:	370c      	adds	r7, #12
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae6a:	bf00      	nop
 800ae6c:	370c      	adds	r7, #12
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr

0800ae76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae76:	b480      	push	{r7}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae7e:	bf00      	nop
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae8a:	b480      	push	{r7}
 800ae8c:	b083      	sub	sp, #12
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae92:	bf00      	nop
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
	...

0800aea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a34      	ldr	r2, [pc, #208]	; (800af84 <TIM_Base_SetConfig+0xe4>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d00f      	beq.n	800aed8 <TIM_Base_SetConfig+0x38>
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aebe:	d00b      	beq.n	800aed8 <TIM_Base_SetConfig+0x38>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	4a31      	ldr	r2, [pc, #196]	; (800af88 <TIM_Base_SetConfig+0xe8>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d007      	beq.n	800aed8 <TIM_Base_SetConfig+0x38>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4a30      	ldr	r2, [pc, #192]	; (800af8c <TIM_Base_SetConfig+0xec>)
 800aecc:	4293      	cmp	r3, r2
 800aece:	d003      	beq.n	800aed8 <TIM_Base_SetConfig+0x38>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	4a2f      	ldr	r2, [pc, #188]	; (800af90 <TIM_Base_SetConfig+0xf0>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d108      	bne.n	800aeea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	68fa      	ldr	r2, [r7, #12]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a25      	ldr	r2, [pc, #148]	; (800af84 <TIM_Base_SetConfig+0xe4>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d01b      	beq.n	800af2a <TIM_Base_SetConfig+0x8a>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aef8:	d017      	beq.n	800af2a <TIM_Base_SetConfig+0x8a>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a22      	ldr	r2, [pc, #136]	; (800af88 <TIM_Base_SetConfig+0xe8>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d013      	beq.n	800af2a <TIM_Base_SetConfig+0x8a>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a21      	ldr	r2, [pc, #132]	; (800af8c <TIM_Base_SetConfig+0xec>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d00f      	beq.n	800af2a <TIM_Base_SetConfig+0x8a>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a20      	ldr	r2, [pc, #128]	; (800af90 <TIM_Base_SetConfig+0xf0>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d00b      	beq.n	800af2a <TIM_Base_SetConfig+0x8a>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a1f      	ldr	r2, [pc, #124]	; (800af94 <TIM_Base_SetConfig+0xf4>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d007      	beq.n	800af2a <TIM_Base_SetConfig+0x8a>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a1e      	ldr	r2, [pc, #120]	; (800af98 <TIM_Base_SetConfig+0xf8>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d003      	beq.n	800af2a <TIM_Base_SetConfig+0x8a>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	4a1d      	ldr	r2, [pc, #116]	; (800af9c <TIM_Base_SetConfig+0xfc>)
 800af26:	4293      	cmp	r3, r2
 800af28:	d108      	bne.n	800af3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	4313      	orrs	r3, r2
 800af48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	689a      	ldr	r2, [r3, #8]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a08      	ldr	r2, [pc, #32]	; (800af84 <TIM_Base_SetConfig+0xe4>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d103      	bne.n	800af70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	691a      	ldr	r2, [r3, #16]
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	615a      	str	r2, [r3, #20]
}
 800af76:	bf00      	nop
 800af78:	3714      	adds	r7, #20
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
 800af82:	bf00      	nop
 800af84:	40010000 	.word	0x40010000
 800af88:	40000400 	.word	0x40000400
 800af8c:	40000800 	.word	0x40000800
 800af90:	40000c00 	.word	0x40000c00
 800af94:	40014000 	.word	0x40014000
 800af98:	40014400 	.word	0x40014400
 800af9c:	40014800 	.word	0x40014800

0800afa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b087      	sub	sp, #28
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	f023 0201 	bic.w	r2, r3, #1
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	699b      	ldr	r3, [r3, #24]
 800afc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f023 0303 	bic.w	r3, r3, #3
 800afd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	68fa      	ldr	r2, [r7, #12]
 800afde:	4313      	orrs	r3, r2
 800afe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	f023 0302 	bic.w	r3, r3, #2
 800afe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a1c      	ldr	r2, [pc, #112]	; (800b068 <TIM_OC1_SetConfig+0xc8>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d10c      	bne.n	800b016 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	f023 0308 	bic.w	r3, r3, #8
 800b002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	697a      	ldr	r2, [r7, #20]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f023 0304 	bic.w	r3, r3, #4
 800b014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	4a13      	ldr	r2, [pc, #76]	; (800b068 <TIM_OC1_SetConfig+0xc8>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d111      	bne.n	800b042 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b02c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	4313      	orrs	r3, r2
 800b036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	693a      	ldr	r2, [r7, #16]
 800b03e:	4313      	orrs	r3, r2
 800b040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	693a      	ldr	r2, [r7, #16]
 800b046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68fa      	ldr	r2, [r7, #12]
 800b04c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	621a      	str	r2, [r3, #32]
}
 800b05c:	bf00      	nop
 800b05e:	371c      	adds	r7, #28
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr
 800b068:	40010000 	.word	0x40010000

0800b06c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b087      	sub	sp, #28
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	f023 0210 	bic.w	r2, r3, #16
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a1b      	ldr	r3, [r3, #32]
 800b086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	685b      	ldr	r3, [r3, #4]
 800b08c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b09a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	021b      	lsls	r3, r3, #8
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f023 0320 	bic.w	r3, r3, #32
 800b0b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	011b      	lsls	r3, r3, #4
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	4a1e      	ldr	r2, [pc, #120]	; (800b140 <TIM_OC2_SetConfig+0xd4>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d10d      	bne.n	800b0e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b0d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	68db      	ldr	r3, [r3, #12]
 800b0d8:	011b      	lsls	r3, r3, #4
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	4a15      	ldr	r2, [pc, #84]	; (800b140 <TIM_OC2_SetConfig+0xd4>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d113      	bne.n	800b118 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b0f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	4313      	orrs	r3, r2
 800b10a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	693a      	ldr	r2, [r7, #16]
 800b114:	4313      	orrs	r3, r2
 800b116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	693a      	ldr	r2, [r7, #16]
 800b11c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	697a      	ldr	r2, [r7, #20]
 800b130:	621a      	str	r2, [r3, #32]
}
 800b132:	bf00      	nop
 800b134:	371c      	adds	r7, #28
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop
 800b140:	40010000 	.word	0x40010000

0800b144 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b144:	b480      	push	{r7}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6a1b      	ldr	r3, [r3, #32]
 800b152:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a1b      	ldr	r3, [r3, #32]
 800b15e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	69db      	ldr	r3, [r3, #28]
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b18c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	021b      	lsls	r3, r3, #8
 800b194:	697a      	ldr	r2, [r7, #20]
 800b196:	4313      	orrs	r3, r2
 800b198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4a1d      	ldr	r2, [pc, #116]	; (800b214 <TIM_OC3_SetConfig+0xd0>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d10d      	bne.n	800b1be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	021b      	lsls	r3, r3, #8
 800b1b0:	697a      	ldr	r2, [r7, #20]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a14      	ldr	r2, [pc, #80]	; (800b214 <TIM_OC3_SetConfig+0xd0>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d113      	bne.n	800b1ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b1cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	011b      	lsls	r3, r3, #4
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	699b      	ldr	r3, [r3, #24]
 800b1e6:	011b      	lsls	r3, r3, #4
 800b1e8:	693a      	ldr	r2, [r7, #16]
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	693a      	ldr	r2, [r7, #16]
 800b1f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	68fa      	ldr	r2, [r7, #12]
 800b1f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	685a      	ldr	r2, [r3, #4]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	697a      	ldr	r2, [r7, #20]
 800b206:	621a      	str	r2, [r3, #32]
}
 800b208:	bf00      	nop
 800b20a:	371c      	adds	r7, #28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr
 800b214:	40010000 	.word	0x40010000

0800b218 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b218:	b480      	push	{r7}
 800b21a:	b087      	sub	sp, #28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a1b      	ldr	r3, [r3, #32]
 800b226:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	69db      	ldr	r3, [r3, #28]
 800b23e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b24e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	021b      	lsls	r3, r3, #8
 800b256:	68fa      	ldr	r2, [r7, #12]
 800b258:	4313      	orrs	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	031b      	lsls	r3, r3, #12
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	4313      	orrs	r3, r2
 800b26e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a10      	ldr	r2, [pc, #64]	; (800b2b4 <TIM_OC4_SetConfig+0x9c>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d109      	bne.n	800b28c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b27e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	695b      	ldr	r3, [r3, #20]
 800b284:	019b      	lsls	r3, r3, #6
 800b286:	697a      	ldr	r2, [r7, #20]
 800b288:	4313      	orrs	r3, r2
 800b28a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	697a      	ldr	r2, [r7, #20]
 800b290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	693a      	ldr	r2, [r7, #16]
 800b2a4:	621a      	str	r2, [r3, #32]
}
 800b2a6:	bf00      	nop
 800b2a8:	371c      	adds	r7, #28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	40010000 	.word	0x40010000

0800b2b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	f023 0201 	bic.w	r2, r3, #1
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b2e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	011b      	lsls	r3, r3, #4
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	f023 030a 	bic.w	r3, r3, #10
 800b2f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2f6:	697a      	ldr	r2, [r7, #20]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	621a      	str	r2, [r3, #32]
}
 800b30a:	bf00      	nop
 800b30c:	371c      	adds	r7, #28
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b316:	b480      	push	{r7}
 800b318:	b087      	sub	sp, #28
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	f023 0210 	bic.w	r2, r3, #16
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	6a1b      	ldr	r3, [r3, #32]
 800b338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	031b      	lsls	r3, r3, #12
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4313      	orrs	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	011b      	lsls	r3, r3, #4
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	697a      	ldr	r2, [r7, #20]
 800b362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	621a      	str	r2, [r3, #32]
}
 800b36a:	bf00      	nop
 800b36c:	371c      	adds	r7, #28
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr

0800b376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b376:	b480      	push	{r7}
 800b378:	b085      	sub	sp, #20
 800b37a:	af00      	add	r7, sp, #0
 800b37c:	6078      	str	r0, [r7, #4]
 800b37e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b38c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4313      	orrs	r3, r2
 800b394:	f043 0307 	orr.w	r3, r3, #7
 800b398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	609a      	str	r2, [r3, #8]
}
 800b3a0:	bf00      	nop
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b087      	sub	sp, #28
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	607a      	str	r2, [r7, #4]
 800b3b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b3c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	021a      	lsls	r2, r3, #8
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	431a      	orrs	r2, r3
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	697a      	ldr	r2, [r7, #20]
 800b3de:	609a      	str	r2, [r3, #8]
}
 800b3e0:	bf00      	nop
 800b3e2:	371c      	adds	r7, #28
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	60f8      	str	r0, [r7, #12]
 800b3f4:	60b9      	str	r1, [r7, #8]
 800b3f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f003 031f 	and.w	r3, r3, #31
 800b3fe:	2201      	movs	r2, #1
 800b400:	fa02 f303 	lsl.w	r3, r2, r3
 800b404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	6a1a      	ldr	r2, [r3, #32]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	43db      	mvns	r3, r3
 800b40e:	401a      	ands	r2, r3
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a1a      	ldr	r2, [r3, #32]
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	f003 031f 	and.w	r3, r3, #31
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	fa01 f303 	lsl.w	r3, r1, r3
 800b424:	431a      	orrs	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	621a      	str	r2, [r3, #32]
}
 800b42a:	bf00      	nop
 800b42c:	371c      	adds	r7, #28
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
	...

0800b438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d101      	bne.n	800b450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b44c:	2302      	movs	r3, #2
 800b44e:	e050      	b.n	800b4f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	4313      	orrs	r3, r2
 800b480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68fa      	ldr	r2, [r7, #12]
 800b488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4a1c      	ldr	r2, [pc, #112]	; (800b500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b490:	4293      	cmp	r3, r2
 800b492:	d018      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b49c:	d013      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a18      	ldr	r2, [pc, #96]	; (800b504 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d00e      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a16      	ldr	r2, [pc, #88]	; (800b508 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d009      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a15      	ldr	r2, [pc, #84]	; (800b50c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d004      	beq.n	800b4c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a13      	ldr	r2, [pc, #76]	; (800b510 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d10c      	bne.n	800b4e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b4cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	68ba      	ldr	r2, [r7, #8]
 800b4de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3714      	adds	r7, #20
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr
 800b4fe:	bf00      	nop
 800b500:	40010000 	.word	0x40010000
 800b504:	40000400 	.word	0x40000400
 800b508:	40000800 	.word	0x40000800
 800b50c:	40000c00 	.word	0x40000c00
 800b510:	40014000 	.word	0x40014000

0800b514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b51c:	bf00      	nop
 800b51e:	370c      	adds	r7, #12
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b530:	bf00      	nop
 800b532:	370c      	adds	r7, #12
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b54a:	2301      	movs	r3, #1
 800b54c:	e03f      	b.n	800b5ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d106      	bne.n	800b568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7fb f91c 	bl	80067a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2224      	movs	r2, #36	; 0x24
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68da      	ldr	r2, [r3, #12]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b57e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 f929 	bl	800b7d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	691a      	ldr	r2, [r3, #16]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	695a      	ldr	r2, [r3, #20]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b5a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68da      	ldr	r2, [r3, #12]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b5b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2220      	movs	r2, #32
 800b5c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2220      	movs	r2, #32
 800b5c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b5cc:	2300      	movs	r3, #0
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}

0800b5d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b08a      	sub	sp, #40	; 0x28
 800b5da:	af02      	add	r7, sp, #8
 800b5dc:	60f8      	str	r0, [r7, #12]
 800b5de:	60b9      	str	r1, [r7, #8]
 800b5e0:	603b      	str	r3, [r7, #0]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b20      	cmp	r3, #32
 800b5f4:	d17c      	bne.n	800b6f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <HAL_UART_Transmit+0x2c>
 800b5fc:	88fb      	ldrh	r3, [r7, #6]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d101      	bne.n	800b606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e075      	b.n	800b6f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d101      	bne.n	800b614 <HAL_UART_Transmit+0x3e>
 800b610:	2302      	movs	r3, #2
 800b612:	e06e      	b.n	800b6f2 <HAL_UART_Transmit+0x11c>
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2200      	movs	r2, #0
 800b620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2221      	movs	r2, #33	; 0x21
 800b626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b62a:	f7fb f961 	bl	80068f0 <HAL_GetTick>
 800b62e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	88fa      	ldrh	r2, [r7, #6]
 800b634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	88fa      	ldrh	r2, [r7, #6]
 800b63a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b644:	d108      	bne.n	800b658 <HAL_UART_Transmit+0x82>
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d104      	bne.n	800b658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	61bb      	str	r3, [r7, #24]
 800b656:	e003      	b.n	800b660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b65c:	2300      	movs	r3, #0
 800b65e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b668:	e02a      	b.n	800b6c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	9300      	str	r3, [sp, #0]
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2200      	movs	r2, #0
 800b672:	2180      	movs	r1, #128	; 0x80
 800b674:	68f8      	ldr	r0, [r7, #12]
 800b676:	f000 f840 	bl	800b6fa <UART_WaitOnFlagUntilTimeout>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d001      	beq.n	800b684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e036      	b.n	800b6f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10b      	bne.n	800b6a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	881b      	ldrh	r3, [r3, #0]
 800b68e:	461a      	mov	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	3302      	adds	r3, #2
 800b69e:	61bb      	str	r3, [r7, #24]
 800b6a0:	e007      	b.n	800b6b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	781a      	ldrb	r2, [r3, #0]
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	3301      	adds	r3, #1
 800b6b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1cf      	bne.n	800b66a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2140      	movs	r1, #64	; 0x40
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f000 f810 	bl	800b6fa <UART_WaitOnFlagUntilTimeout>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	e006      	b.n	800b6f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2220      	movs	r2, #32
 800b6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	e000      	b.n	800b6f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b6f0:	2302      	movs	r3, #2
  }
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3720      	adds	r7, #32
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b090      	sub	sp, #64	; 0x40
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	60f8      	str	r0, [r7, #12]
 800b702:	60b9      	str	r1, [r7, #8]
 800b704:	603b      	str	r3, [r7, #0]
 800b706:	4613      	mov	r3, r2
 800b708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b70a:	e050      	b.n	800b7ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b70c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b712:	d04c      	beq.n	800b7ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b716:	2b00      	cmp	r3, #0
 800b718:	d007      	beq.n	800b72a <UART_WaitOnFlagUntilTimeout+0x30>
 800b71a:	f7fb f8e9 	bl	80068f0 <HAL_GetTick>
 800b71e:	4602      	mov	r2, r0
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	1ad3      	subs	r3, r2, r3
 800b724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b726:	429a      	cmp	r2, r3
 800b728:	d241      	bcs.n	800b7ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	330c      	adds	r3, #12
 800b730:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	e853 3f00 	ldrex	r3, [r3]
 800b738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b740:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	330c      	adds	r3, #12
 800b748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b74a:	637a      	str	r2, [r7, #52]	; 0x34
 800b74c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b74e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b752:	e841 2300 	strex	r3, r2, [r1]
 800b756:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1e5      	bne.n	800b72a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3314      	adds	r3, #20
 800b764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	e853 3f00 	ldrex	r3, [r3]
 800b76c:	613b      	str	r3, [r7, #16]
   return(result);
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	f023 0301 	bic.w	r3, r3, #1
 800b774:	63bb      	str	r3, [r7, #56]	; 0x38
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	3314      	adds	r3, #20
 800b77c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b77e:	623a      	str	r2, [r7, #32]
 800b780:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b782:	69f9      	ldr	r1, [r7, #28]
 800b784:	6a3a      	ldr	r2, [r7, #32]
 800b786:	e841 2300 	strex	r3, r2, [r1]
 800b78a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1e5      	bne.n	800b75e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2220      	movs	r2, #32
 800b796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2220      	movs	r2, #32
 800b79e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e00f      	b.n	800b7ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	68ba      	ldr	r2, [r7, #8]
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	bf0c      	ite	eq
 800b7be:	2301      	moveq	r3, #1
 800b7c0:	2300      	movne	r3, #0
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	79fb      	ldrb	r3, [r7, #7]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d09f      	beq.n	800b70c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3740      	adds	r7, #64	; 0x40
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
	...

0800b7d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b7dc:	b0c0      	sub	sp, #256	; 0x100
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f4:	68d9      	ldr	r1, [r3, #12]
 800b7f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	ea40 0301 	orr.w	r3, r0, r1
 800b800:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b806:	689a      	ldr	r2, [r3, #8]
 800b808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	431a      	orrs	r2, r3
 800b810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b814:	695b      	ldr	r3, [r3, #20]
 800b816:	431a      	orrs	r2, r3
 800b818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	4313      	orrs	r3, r2
 800b820:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b830:	f021 010c 	bic.w	r1, r1, #12
 800b834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b83e:	430b      	orrs	r3, r1
 800b840:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b84e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b852:	6999      	ldr	r1, [r3, #24]
 800b854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	ea40 0301 	orr.w	r3, r0, r1
 800b85e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	4b8f      	ldr	r3, [pc, #572]	; (800baa4 <UART_SetConfig+0x2cc>)
 800b868:	429a      	cmp	r2, r3
 800b86a:	d005      	beq.n	800b878 <UART_SetConfig+0xa0>
 800b86c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	4b8d      	ldr	r3, [pc, #564]	; (800baa8 <UART_SetConfig+0x2d0>)
 800b874:	429a      	cmp	r2, r3
 800b876:	d104      	bne.n	800b882 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b878:	f7fd fe48 	bl	800950c <HAL_RCC_GetPCLK2Freq>
 800b87c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b880:	e003      	b.n	800b88a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b882:	f7fd fe2f 	bl	80094e4 <HAL_RCC_GetPCLK1Freq>
 800b886:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b88e:	69db      	ldr	r3, [r3, #28]
 800b890:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b894:	f040 810c 	bne.w	800bab0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b89c:	2200      	movs	r2, #0
 800b89e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b8a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b8a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b8aa:	4622      	mov	r2, r4
 800b8ac:	462b      	mov	r3, r5
 800b8ae:	1891      	adds	r1, r2, r2
 800b8b0:	65b9      	str	r1, [r7, #88]	; 0x58
 800b8b2:	415b      	adcs	r3, r3
 800b8b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	eb12 0801 	adds.w	r8, r2, r1
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	eb43 0901 	adc.w	r9, r3, r1
 800b8c6:	f04f 0200 	mov.w	r2, #0
 800b8ca:	f04f 0300 	mov.w	r3, #0
 800b8ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b8d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b8d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b8da:	4690      	mov	r8, r2
 800b8dc:	4699      	mov	r9, r3
 800b8de:	4623      	mov	r3, r4
 800b8e0:	eb18 0303 	adds.w	r3, r8, r3
 800b8e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b8e8:	462b      	mov	r3, r5
 800b8ea:	eb49 0303 	adc.w	r3, r9, r3
 800b8ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b8f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b8fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b902:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b906:	460b      	mov	r3, r1
 800b908:	18db      	adds	r3, r3, r3
 800b90a:	653b      	str	r3, [r7, #80]	; 0x50
 800b90c:	4613      	mov	r3, r2
 800b90e:	eb42 0303 	adc.w	r3, r2, r3
 800b912:	657b      	str	r3, [r7, #84]	; 0x54
 800b914:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b918:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b91c:	f7f5 fa0c 	bl	8000d38 <__aeabi_uldivmod>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	4b61      	ldr	r3, [pc, #388]	; (800baac <UART_SetConfig+0x2d4>)
 800b926:	fba3 2302 	umull	r2, r3, r3, r2
 800b92a:	095b      	lsrs	r3, r3, #5
 800b92c:	011c      	lsls	r4, r3, #4
 800b92e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b932:	2200      	movs	r2, #0
 800b934:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b938:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b93c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b940:	4642      	mov	r2, r8
 800b942:	464b      	mov	r3, r9
 800b944:	1891      	adds	r1, r2, r2
 800b946:	64b9      	str	r1, [r7, #72]	; 0x48
 800b948:	415b      	adcs	r3, r3
 800b94a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b94c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b950:	4641      	mov	r1, r8
 800b952:	eb12 0a01 	adds.w	sl, r2, r1
 800b956:	4649      	mov	r1, r9
 800b958:	eb43 0b01 	adc.w	fp, r3, r1
 800b95c:	f04f 0200 	mov.w	r2, #0
 800b960:	f04f 0300 	mov.w	r3, #0
 800b964:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b968:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b96c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b970:	4692      	mov	sl, r2
 800b972:	469b      	mov	fp, r3
 800b974:	4643      	mov	r3, r8
 800b976:	eb1a 0303 	adds.w	r3, sl, r3
 800b97a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b97e:	464b      	mov	r3, r9
 800b980:	eb4b 0303 	adc.w	r3, fp, r3
 800b984:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	2200      	movs	r2, #0
 800b990:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b994:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b998:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b99c:	460b      	mov	r3, r1
 800b99e:	18db      	adds	r3, r3, r3
 800b9a0:	643b      	str	r3, [r7, #64]	; 0x40
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	eb42 0303 	adc.w	r3, r2, r3
 800b9a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b9aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b9ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b9b2:	f7f5 f9c1 	bl	8000d38 <__aeabi_uldivmod>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	4b3b      	ldr	r3, [pc, #236]	; (800baac <UART_SetConfig+0x2d4>)
 800b9be:	fba3 2301 	umull	r2, r3, r3, r1
 800b9c2:	095b      	lsrs	r3, r3, #5
 800b9c4:	2264      	movs	r2, #100	; 0x64
 800b9c6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ca:	1acb      	subs	r3, r1, r3
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b9d2:	4b36      	ldr	r3, [pc, #216]	; (800baac <UART_SetConfig+0x2d4>)
 800b9d4:	fba3 2302 	umull	r2, r3, r3, r2
 800b9d8:	095b      	lsrs	r3, r3, #5
 800b9da:	005b      	lsls	r3, r3, #1
 800b9dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b9e0:	441c      	add	r4, r3
 800b9e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b9f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b9f4:	4642      	mov	r2, r8
 800b9f6:	464b      	mov	r3, r9
 800b9f8:	1891      	adds	r1, r2, r2
 800b9fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800b9fc:	415b      	adcs	r3, r3
 800b9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba00:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba04:	4641      	mov	r1, r8
 800ba06:	1851      	adds	r1, r2, r1
 800ba08:	6339      	str	r1, [r7, #48]	; 0x30
 800ba0a:	4649      	mov	r1, r9
 800ba0c:	414b      	adcs	r3, r1
 800ba0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ba10:	f04f 0200 	mov.w	r2, #0
 800ba14:	f04f 0300 	mov.w	r3, #0
 800ba18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800ba1c:	4659      	mov	r1, fp
 800ba1e:	00cb      	lsls	r3, r1, #3
 800ba20:	4651      	mov	r1, sl
 800ba22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ba26:	4651      	mov	r1, sl
 800ba28:	00ca      	lsls	r2, r1, #3
 800ba2a:	4610      	mov	r0, r2
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4603      	mov	r3, r0
 800ba30:	4642      	mov	r2, r8
 800ba32:	189b      	adds	r3, r3, r2
 800ba34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ba38:	464b      	mov	r3, r9
 800ba3a:	460a      	mov	r2, r1
 800ba3c:	eb42 0303 	adc.w	r3, r2, r3
 800ba40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ba44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba50:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ba54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba58:	460b      	mov	r3, r1
 800ba5a:	18db      	adds	r3, r3, r3
 800ba5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba5e:	4613      	mov	r3, r2
 800ba60:	eb42 0303 	adc.w	r3, r2, r3
 800ba64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ba6a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ba6e:	f7f5 f963 	bl	8000d38 <__aeabi_uldivmod>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4b0d      	ldr	r3, [pc, #52]	; (800baac <UART_SetConfig+0x2d4>)
 800ba78:	fba3 1302 	umull	r1, r3, r3, r2
 800ba7c:	095b      	lsrs	r3, r3, #5
 800ba7e:	2164      	movs	r1, #100	; 0x64
 800ba80:	fb01 f303 	mul.w	r3, r1, r3
 800ba84:	1ad3      	subs	r3, r2, r3
 800ba86:	00db      	lsls	r3, r3, #3
 800ba88:	3332      	adds	r3, #50	; 0x32
 800ba8a:	4a08      	ldr	r2, [pc, #32]	; (800baac <UART_SetConfig+0x2d4>)
 800ba8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ba90:	095b      	lsrs	r3, r3, #5
 800ba92:	f003 0207 	and.w	r2, r3, #7
 800ba96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4422      	add	r2, r4
 800ba9e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800baa0:	e106      	b.n	800bcb0 <UART_SetConfig+0x4d8>
 800baa2:	bf00      	nop
 800baa4:	40011000 	.word	0x40011000
 800baa8:	40011400 	.word	0x40011400
 800baac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bab4:	2200      	movs	r2, #0
 800bab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800baba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800babe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bac2:	4642      	mov	r2, r8
 800bac4:	464b      	mov	r3, r9
 800bac6:	1891      	adds	r1, r2, r2
 800bac8:	6239      	str	r1, [r7, #32]
 800baca:	415b      	adcs	r3, r3
 800bacc:	627b      	str	r3, [r7, #36]	; 0x24
 800bace:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bad2:	4641      	mov	r1, r8
 800bad4:	1854      	adds	r4, r2, r1
 800bad6:	4649      	mov	r1, r9
 800bad8:	eb43 0501 	adc.w	r5, r3, r1
 800badc:	f04f 0200 	mov.w	r2, #0
 800bae0:	f04f 0300 	mov.w	r3, #0
 800bae4:	00eb      	lsls	r3, r5, #3
 800bae6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800baea:	00e2      	lsls	r2, r4, #3
 800baec:	4614      	mov	r4, r2
 800baee:	461d      	mov	r5, r3
 800baf0:	4643      	mov	r3, r8
 800baf2:	18e3      	adds	r3, r4, r3
 800baf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800baf8:	464b      	mov	r3, r9
 800bafa:	eb45 0303 	adc.w	r3, r5, r3
 800bafe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bb12:	f04f 0200 	mov.w	r2, #0
 800bb16:	f04f 0300 	mov.w	r3, #0
 800bb1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bb1e:	4629      	mov	r1, r5
 800bb20:	008b      	lsls	r3, r1, #2
 800bb22:	4621      	mov	r1, r4
 800bb24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bb28:	4621      	mov	r1, r4
 800bb2a:	008a      	lsls	r2, r1, #2
 800bb2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bb30:	f7f5 f902 	bl	8000d38 <__aeabi_uldivmod>
 800bb34:	4602      	mov	r2, r0
 800bb36:	460b      	mov	r3, r1
 800bb38:	4b60      	ldr	r3, [pc, #384]	; (800bcbc <UART_SetConfig+0x4e4>)
 800bb3a:	fba3 2302 	umull	r2, r3, r3, r2
 800bb3e:	095b      	lsrs	r3, r3, #5
 800bb40:	011c      	lsls	r4, r3, #4
 800bb42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb46:	2200      	movs	r2, #0
 800bb48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bb50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bb54:	4642      	mov	r2, r8
 800bb56:	464b      	mov	r3, r9
 800bb58:	1891      	adds	r1, r2, r2
 800bb5a:	61b9      	str	r1, [r7, #24]
 800bb5c:	415b      	adcs	r3, r3
 800bb5e:	61fb      	str	r3, [r7, #28]
 800bb60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bb64:	4641      	mov	r1, r8
 800bb66:	1851      	adds	r1, r2, r1
 800bb68:	6139      	str	r1, [r7, #16]
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	414b      	adcs	r3, r1
 800bb6e:	617b      	str	r3, [r7, #20]
 800bb70:	f04f 0200 	mov.w	r2, #0
 800bb74:	f04f 0300 	mov.w	r3, #0
 800bb78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bb7c:	4659      	mov	r1, fp
 800bb7e:	00cb      	lsls	r3, r1, #3
 800bb80:	4651      	mov	r1, sl
 800bb82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb86:	4651      	mov	r1, sl
 800bb88:	00ca      	lsls	r2, r1, #3
 800bb8a:	4610      	mov	r0, r2
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	4603      	mov	r3, r0
 800bb90:	4642      	mov	r2, r8
 800bb92:	189b      	adds	r3, r3, r2
 800bb94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bb98:	464b      	mov	r3, r9
 800bb9a:	460a      	mov	r2, r1
 800bb9c:	eb42 0303 	adc.w	r3, r2, r3
 800bba0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bba8:	685b      	ldr	r3, [r3, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbae:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bbb0:	f04f 0200 	mov.w	r2, #0
 800bbb4:	f04f 0300 	mov.w	r3, #0
 800bbb8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	008b      	lsls	r3, r1, #2
 800bbc0:	4641      	mov	r1, r8
 800bbc2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbc6:	4641      	mov	r1, r8
 800bbc8:	008a      	lsls	r2, r1, #2
 800bbca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bbce:	f7f5 f8b3 	bl	8000d38 <__aeabi_uldivmod>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4611      	mov	r1, r2
 800bbd8:	4b38      	ldr	r3, [pc, #224]	; (800bcbc <UART_SetConfig+0x4e4>)
 800bbda:	fba3 2301 	umull	r2, r3, r3, r1
 800bbde:	095b      	lsrs	r3, r3, #5
 800bbe0:	2264      	movs	r2, #100	; 0x64
 800bbe2:	fb02 f303 	mul.w	r3, r2, r3
 800bbe6:	1acb      	subs	r3, r1, r3
 800bbe8:	011b      	lsls	r3, r3, #4
 800bbea:	3332      	adds	r3, #50	; 0x32
 800bbec:	4a33      	ldr	r2, [pc, #204]	; (800bcbc <UART_SetConfig+0x4e4>)
 800bbee:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf2:	095b      	lsrs	r3, r3, #5
 800bbf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bbf8:	441c      	add	r4, r3
 800bbfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbfe:	2200      	movs	r2, #0
 800bc00:	673b      	str	r3, [r7, #112]	; 0x70
 800bc02:	677a      	str	r2, [r7, #116]	; 0x74
 800bc04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bc08:	4642      	mov	r2, r8
 800bc0a:	464b      	mov	r3, r9
 800bc0c:	1891      	adds	r1, r2, r2
 800bc0e:	60b9      	str	r1, [r7, #8]
 800bc10:	415b      	adcs	r3, r3
 800bc12:	60fb      	str	r3, [r7, #12]
 800bc14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bc18:	4641      	mov	r1, r8
 800bc1a:	1851      	adds	r1, r2, r1
 800bc1c:	6039      	str	r1, [r7, #0]
 800bc1e:	4649      	mov	r1, r9
 800bc20:	414b      	adcs	r3, r1
 800bc22:	607b      	str	r3, [r7, #4]
 800bc24:	f04f 0200 	mov.w	r2, #0
 800bc28:	f04f 0300 	mov.w	r3, #0
 800bc2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bc30:	4659      	mov	r1, fp
 800bc32:	00cb      	lsls	r3, r1, #3
 800bc34:	4651      	mov	r1, sl
 800bc36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc3a:	4651      	mov	r1, sl
 800bc3c:	00ca      	lsls	r2, r1, #3
 800bc3e:	4610      	mov	r0, r2
 800bc40:	4619      	mov	r1, r3
 800bc42:	4603      	mov	r3, r0
 800bc44:	4642      	mov	r2, r8
 800bc46:	189b      	adds	r3, r3, r2
 800bc48:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc4a:	464b      	mov	r3, r9
 800bc4c:	460a      	mov	r2, r1
 800bc4e:	eb42 0303 	adc.w	r3, r2, r3
 800bc52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	663b      	str	r3, [r7, #96]	; 0x60
 800bc5e:	667a      	str	r2, [r7, #100]	; 0x64
 800bc60:	f04f 0200 	mov.w	r2, #0
 800bc64:	f04f 0300 	mov.w	r3, #0
 800bc68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bc6c:	4649      	mov	r1, r9
 800bc6e:	008b      	lsls	r3, r1, #2
 800bc70:	4641      	mov	r1, r8
 800bc72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc76:	4641      	mov	r1, r8
 800bc78:	008a      	lsls	r2, r1, #2
 800bc7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bc7e:	f7f5 f85b 	bl	8000d38 <__aeabi_uldivmod>
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	4b0d      	ldr	r3, [pc, #52]	; (800bcbc <UART_SetConfig+0x4e4>)
 800bc88:	fba3 1302 	umull	r1, r3, r3, r2
 800bc8c:	095b      	lsrs	r3, r3, #5
 800bc8e:	2164      	movs	r1, #100	; 0x64
 800bc90:	fb01 f303 	mul.w	r3, r1, r3
 800bc94:	1ad3      	subs	r3, r2, r3
 800bc96:	011b      	lsls	r3, r3, #4
 800bc98:	3332      	adds	r3, #50	; 0x32
 800bc9a:	4a08      	ldr	r2, [pc, #32]	; (800bcbc <UART_SetConfig+0x4e4>)
 800bc9c:	fba2 2303 	umull	r2, r3, r2, r3
 800bca0:	095b      	lsrs	r3, r3, #5
 800bca2:	f003 020f 	and.w	r2, r3, #15
 800bca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4422      	add	r2, r4
 800bcae:	609a      	str	r2, [r3, #8]
}
 800bcb0:	bf00      	nop
 800bcb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bcbc:	51eb851f 	.word	0x51eb851f

0800bcc0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800bcc4:	4904      	ldr	r1, [pc, #16]	; (800bcd8 <MX_FATFS_Init+0x18>)
 800bcc6:	4805      	ldr	r0, [pc, #20]	; (800bcdc <MX_FATFS_Init+0x1c>)
 800bcc8:	f003 fa3c 	bl	800f144 <FATFS_LinkDriver>
 800bccc:	4603      	mov	r3, r0
 800bcce:	461a      	mov	r2, r3
 800bcd0:	4b03      	ldr	r3, [pc, #12]	; (800bce0 <MX_FATFS_Init+0x20>)
 800bcd2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bcd4:	bf00      	nop
 800bcd6:	bd80      	pop	{r7, pc}
 800bcd8:	20000914 	.word	0x20000914
 800bcdc:	20000014 	.word	0x20000014
 800bce0:	20000910 	.word	0x20000910

0800bce4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bce4:	b480      	push	{r7}
 800bce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bce8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b082      	sub	sp, #8
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800bcfe:	79fb      	ldrb	r3, [r7, #7]
 800bd00:	4618      	mov	r0, r3
 800bd02:	f000 f9dd 	bl	800c0c0 <USER_SPI_initialize>
 800bd06:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	4603      	mov	r3, r0
 800bd18:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800bd1a:	79fb      	ldrb	r3, [r7, #7]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f000 fabb 	bl	800c298 <USER_SPI_status>
 800bd22:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	60b9      	str	r1, [r7, #8]
 800bd34:	607a      	str	r2, [r7, #4]
 800bd36:	603b      	str	r3, [r7, #0]
 800bd38:	4603      	mov	r3, r0
 800bd3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800bd3c:	7bf8      	ldrb	r0, [r7, #15]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	687a      	ldr	r2, [r7, #4]
 800bd42:	68b9      	ldr	r1, [r7, #8]
 800bd44:	f000 fabe 	bl	800c2c4 <USER_SPI_read>
 800bd48:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}

0800bd52 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b084      	sub	sp, #16
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
 800bd5c:	603b      	str	r3, [r7, #0]
 800bd5e:	4603      	mov	r3, r0
 800bd60:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800bd62:	7bf8      	ldrb	r0, [r7, #15]
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	68b9      	ldr	r1, [r7, #8]
 800bd6a:	f000 fb11 	bl	800c390 <USER_SPI_write>
 800bd6e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	4603      	mov	r3, r0
 800bd80:	603a      	str	r2, [r7, #0]
 800bd82:	71fb      	strb	r3, [r7, #7]
 800bd84:	460b      	mov	r3, r1
 800bd86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800bd88:	79b9      	ldrb	r1, [r7, #6]
 800bd8a:	79fb      	ldrb	r3, [r7, #7]
 800bd8c:	683a      	ldr	r2, [r7, #0]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 fb7a 	bl	800c488 <USER_SPI_ioctl>
 800bd94:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800bd96:	4618      	mov	r0, r3
 800bd98:	3708      	adds	r7, #8
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	bd80      	pop	{r7, pc}
	...

0800bda0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800bda8:	f7fa fda2 	bl	80068f0 <HAL_GetTick>
 800bdac:	4603      	mov	r3, r0
 800bdae:	4a04      	ldr	r2, [pc, #16]	; (800bdc0 <SPI_Timer_On+0x20>)
 800bdb0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800bdb2:	4a04      	ldr	r2, [pc, #16]	; (800bdc4 <SPI_Timer_On+0x24>)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6013      	str	r3, [r2, #0]
}
 800bdb8:	bf00      	nop
 800bdba:	3708      	adds	r7, #8
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	2000091c 	.word	0x2000091c
 800bdc4:	20000920 	.word	0x20000920

0800bdc8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800bdcc:	f7fa fd90 	bl	80068f0 <HAL_GetTick>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	4b06      	ldr	r3, [pc, #24]	; (800bdec <SPI_Timer_Status+0x24>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	1ad2      	subs	r2, r2, r3
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <SPI_Timer_Status+0x28>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	bf34      	ite	cc
 800bde0:	2301      	movcc	r3, #1
 800bde2:	2300      	movcs	r3, #0
 800bde4:	b2db      	uxtb	r3, r3
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	2000091c 	.word	0x2000091c
 800bdf0:	20000920 	.word	0x20000920

0800bdf4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b086      	sub	sp, #24
 800bdf8:	af02      	add	r7, sp, #8
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 800bdfe:	f107 020f 	add.w	r2, r7, #15
 800be02:	1df9      	adds	r1, r7, #7
 800be04:	2332      	movs	r3, #50	; 0x32
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	2301      	movs	r3, #1
 800be0a:	4804      	ldr	r0, [pc, #16]	; (800be1c <xchg_spi+0x28>)
 800be0c:	f7fe f965 	bl	800a0da <HAL_SPI_TransmitReceive>
    return rxDat;
 800be10:	7bfb      	ldrb	r3, [r7, #15]
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	200007dc 	.word	0x200007dc

0800be20 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800be20:	b590      	push	{r4, r7, lr}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800be2a:	2300      	movs	r3, #0
 800be2c:	60fb      	str	r3, [r7, #12]
 800be2e:	e00a      	b.n	800be46 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	18d4      	adds	r4, r2, r3
 800be36:	20ff      	movs	r0, #255	; 0xff
 800be38:	f7ff ffdc 	bl	800bdf4 <xchg_spi>
 800be3c:	4603      	mov	r3, r0
 800be3e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	3301      	adds	r3, #1
 800be44:	60fb      	str	r3, [r7, #12]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d3f0      	bcc.n	800be30 <rcvr_spi_multi+0x10>
	}
}
 800be4e:	bf00      	nop
 800be50:	bf00      	nop
 800be52:	3714      	adds	r7, #20
 800be54:	46bd      	mov	sp, r7
 800be56:	bd90      	pop	{r4, r7, pc}

0800be58 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800be62:	2300      	movs	r3, #0
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	e009      	b.n	800be7c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	4413      	add	r3, r2
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	4618      	mov	r0, r3
 800be72:	f7ff ffbf 	bl	800bdf4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	3301      	adds	r3, #1
 800be7a:	60fb      	str	r3, [r7, #12]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d3f1      	bcc.n	800be68 <xmit_spi_multi+0x10>
	}
}
 800be84:	bf00      	nop
 800be86:	bf00      	nop
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}

0800be8e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b086      	sub	sp, #24
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800be96:	f7fa fd2b 	bl	80068f0 <HAL_GetTick>
 800be9a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800bea0:	20ff      	movs	r0, #255	; 0xff
 800bea2:	f7ff ffa7 	bl	800bdf4 <xchg_spi>
 800bea6:	4603      	mov	r3, r0
 800bea8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800beaa:	7bfb      	ldrb	r3, [r7, #15]
 800beac:	2bff      	cmp	r3, #255	; 0xff
 800beae:	d007      	beq.n	800bec0 <wait_ready+0x32>
 800beb0:	f7fa fd1e 	bl	80068f0 <HAL_GetTick>
 800beb4:	4602      	mov	r2, r0
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d8ef      	bhi.n	800bea0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800bec0:	7bfb      	ldrb	r3, [r7, #15]
 800bec2:	2bff      	cmp	r3, #255	; 0xff
 800bec4:	bf0c      	ite	eq
 800bec6:	2301      	moveq	r3, #1
 800bec8:	2300      	movne	r3, #0
 800beca:	b2db      	uxtb	r3, r3
}
 800becc:	4618      	mov	r0, r3
 800bece:	3718      	adds	r7, #24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800bed8:	2201      	movs	r2, #1
 800beda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bede:	4804      	ldr	r0, [pc, #16]	; (800bef0 <despiselect+0x1c>)
 800bee0:	f7fb f914 	bl	800710c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800bee4:	20ff      	movs	r0, #255	; 0xff
 800bee6:	f7ff ff85 	bl	800bdf4 <xchg_spi>

}
 800beea:	bf00      	nop
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	40020400 	.word	0x40020400

0800bef4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800bef8:	2200      	movs	r2, #0
 800befa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800befe:	480a      	ldr	r0, [pc, #40]	; (800bf28 <spiselect+0x34>)
 800bf00:	f7fb f904 	bl	800710c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800bf04:	20ff      	movs	r0, #255	; 0xff
 800bf06:	f7ff ff75 	bl	800bdf4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800bf0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf0e:	f7ff ffbe 	bl	800be8e <wait_ready>
 800bf12:	4603      	mov	r3, r0
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <spiselect+0x28>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	e002      	b.n	800bf22 <spiselect+0x2e>

	despiselect();
 800bf1c:	f7ff ffda 	bl	800bed4 <despiselect>
	return 0;	/* Timeout */
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	40020400 	.word	0x40020400

0800bf2c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b084      	sub	sp, #16
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800bf36:	20c8      	movs	r0, #200	; 0xc8
 800bf38:	f7ff ff32 	bl	800bda0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800bf3c:	20ff      	movs	r0, #255	; 0xff
 800bf3e:	f7ff ff59 	bl	800bdf4 <xchg_spi>
 800bf42:	4603      	mov	r3, r0
 800bf44:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
 800bf48:	2bff      	cmp	r3, #255	; 0xff
 800bf4a:	d104      	bne.n	800bf56 <rcvr_datablock+0x2a>
 800bf4c:	f7ff ff3c 	bl	800bdc8 <SPI_Timer_Status>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1f2      	bne.n	800bf3c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800bf56:	7bfb      	ldrb	r3, [r7, #15]
 800bf58:	2bfe      	cmp	r3, #254	; 0xfe
 800bf5a:	d001      	beq.n	800bf60 <rcvr_datablock+0x34>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	e00a      	b.n	800bf76 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7ff ff5c 	bl	800be20 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800bf68:	20ff      	movs	r0, #255	; 0xff
 800bf6a:	f7ff ff43 	bl	800bdf4 <xchg_spi>
 800bf6e:	20ff      	movs	r0, #255	; 0xff
 800bf70:	f7ff ff40 	bl	800bdf4 <xchg_spi>

	return 1;						/* Function succeeded */
 800bf74:	2301      	movs	r3, #1
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	460b      	mov	r3, r1
 800bf88:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800bf8a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bf8e:	f7ff ff7e 	bl	800be8e <wait_ready>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d101      	bne.n	800bf9c <xmit_datablock+0x1e>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e01e      	b.n	800bfda <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800bf9c:	78fb      	ldrb	r3, [r7, #3]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7ff ff28 	bl	800bdf4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800bfa4:	78fb      	ldrb	r3, [r7, #3]
 800bfa6:	2bfd      	cmp	r3, #253	; 0xfd
 800bfa8:	d016      	beq.n	800bfd8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800bfaa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff ff52 	bl	800be58 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800bfb4:	20ff      	movs	r0, #255	; 0xff
 800bfb6:	f7ff ff1d 	bl	800bdf4 <xchg_spi>
 800bfba:	20ff      	movs	r0, #255	; 0xff
 800bfbc:	f7ff ff1a 	bl	800bdf4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800bfc0:	20ff      	movs	r0, #255	; 0xff
 800bfc2:	f7ff ff17 	bl	800bdf4 <xchg_spi>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800bfca:	7bfb      	ldrb	r3, [r7, #15]
 800bfcc:	f003 031f 	and.w	r3, r3, #31
 800bfd0:	2b05      	cmp	r3, #5
 800bfd2:	d001      	beq.n	800bfd8 <xmit_datablock+0x5a>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	e000      	b.n	800bfda <xmit_datablock+0x5c>
	}
	return 1;
 800bfd8:	2301      	movs	r3, #1
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b084      	sub	sp, #16
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	4603      	mov	r3, r0
 800bfea:	6039      	str	r1, [r7, #0]
 800bfec:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800bfee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	da0e      	bge.n	800c014 <send_cmd+0x32>
		cmd &= 0x7F;
 800bff6:	79fb      	ldrb	r3, [r7, #7]
 800bff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bffc:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800bffe:	2100      	movs	r1, #0
 800c000:	2037      	movs	r0, #55	; 0x37
 800c002:	f7ff ffee 	bl	800bfe2 <send_cmd>
 800c006:	4603      	mov	r3, r0
 800c008:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c00a:	7bbb      	ldrb	r3, [r7, #14]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d901      	bls.n	800c014 <send_cmd+0x32>
 800c010:	7bbb      	ldrb	r3, [r7, #14]
 800c012:	e051      	b.n	800c0b8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c014:	79fb      	ldrb	r3, [r7, #7]
 800c016:	2b0c      	cmp	r3, #12
 800c018:	d008      	beq.n	800c02c <send_cmd+0x4a>
		despiselect();
 800c01a:	f7ff ff5b 	bl	800bed4 <despiselect>
		if (!spiselect()) return 0xFF;
 800c01e:	f7ff ff69 	bl	800bef4 <spiselect>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d101      	bne.n	800c02c <send_cmd+0x4a>
 800c028:	23ff      	movs	r3, #255	; 0xff
 800c02a:	e045      	b.n	800c0b8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c02c:	79fb      	ldrb	r3, [r7, #7]
 800c02e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c032:	b2db      	uxtb	r3, r3
 800c034:	4618      	mov	r0, r3
 800c036:	f7ff fedd 	bl	800bdf4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	0e1b      	lsrs	r3, r3, #24
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	4618      	mov	r0, r3
 800c042:	f7ff fed7 	bl	800bdf4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	0c1b      	lsrs	r3, r3, #16
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff fed1 	bl	800bdf4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	0a1b      	lsrs	r3, r3, #8
 800c056:	b2db      	uxtb	r3, r3
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff fecb 	bl	800bdf4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c05e:	683b      	ldr	r3, [r7, #0]
 800c060:	b2db      	uxtb	r3, r3
 800c062:	4618      	mov	r0, r3
 800c064:	f7ff fec6 	bl	800bdf4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800c068:	2301      	movs	r3, #1
 800c06a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800c06c:	79fb      	ldrb	r3, [r7, #7]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <send_cmd+0x94>
 800c072:	2395      	movs	r3, #149	; 0x95
 800c074:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800c076:	79fb      	ldrb	r3, [r7, #7]
 800c078:	2b08      	cmp	r3, #8
 800c07a:	d101      	bne.n	800c080 <send_cmd+0x9e>
 800c07c:	2387      	movs	r3, #135	; 0x87
 800c07e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800c080:	7bfb      	ldrb	r3, [r7, #15]
 800c082:	4618      	mov	r0, r3
 800c084:	f7ff feb6 	bl	800bdf4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800c088:	79fb      	ldrb	r3, [r7, #7]
 800c08a:	2b0c      	cmp	r3, #12
 800c08c:	d102      	bne.n	800c094 <send_cmd+0xb2>
 800c08e:	20ff      	movs	r0, #255	; 0xff
 800c090:	f7ff feb0 	bl	800bdf4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800c094:	230a      	movs	r3, #10
 800c096:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800c098:	20ff      	movs	r0, #255	; 0xff
 800c09a:	f7ff feab 	bl	800bdf4 <xchg_spi>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800c0a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	da05      	bge.n	800c0b6 <send_cmd+0xd4>
 800c0aa:	7bfb      	ldrb	r3, [r7, #15]
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	73fb      	strb	r3, [r7, #15]
 800c0b0:	7bfb      	ldrb	r3, [r7, #15]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d1f0      	bne.n	800c098 <send_cmd+0xb6>

	return res;							/* Return received response */
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c0c0:	b590      	push	{r4, r7, lr}
 800c0c2:	b085      	sub	sp, #20
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800c0ca:	79fb      	ldrb	r3, [r7, #7]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d001      	beq.n	800c0d4 <USER_SPI_initialize+0x14>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e0d6      	b.n	800c282 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800c0d4:	4b6d      	ldr	r3, [pc, #436]	; (800c28c <USER_SPI_initialize+0x1cc>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	f003 0302 	and.w	r3, r3, #2
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d003      	beq.n	800c0ea <USER_SPI_initialize+0x2a>
 800c0e2:	4b6a      	ldr	r3, [pc, #424]	; (800c28c <USER_SPI_initialize+0x1cc>)
 800c0e4:	781b      	ldrb	r3, [r3, #0]
 800c0e6:	b2db      	uxtb	r3, r3
 800c0e8:	e0cb      	b.n	800c282 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800c0ea:	4b69      	ldr	r3, [pc, #420]	; (800c290 <USER_SPI_initialize+0x1d0>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c0f4:	4b66      	ldr	r3, [pc, #408]	; (800c290 <USER_SPI_initialize+0x1d0>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800c0fc:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800c0fe:	230a      	movs	r3, #10
 800c100:	73fb      	strb	r3, [r7, #15]
 800c102:	e005      	b.n	800c110 <USER_SPI_initialize+0x50>
 800c104:	20ff      	movs	r0, #255	; 0xff
 800c106:	f7ff fe75 	bl	800bdf4 <xchg_spi>
 800c10a:	7bfb      	ldrb	r3, [r7, #15]
 800c10c:	3b01      	subs	r3, #1
 800c10e:	73fb      	strb	r3, [r7, #15]
 800c110:	7bfb      	ldrb	r3, [r7, #15]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d1f6      	bne.n	800c104 <USER_SPI_initialize+0x44>

	ty = 0;
 800c116:	2300      	movs	r3, #0
 800c118:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800c11a:	2100      	movs	r1, #0
 800c11c:	2000      	movs	r0, #0
 800c11e:	f7ff ff60 	bl	800bfe2 <send_cmd>
 800c122:	4603      	mov	r3, r0
 800c124:	2b01      	cmp	r3, #1
 800c126:	f040 808b 	bne.w	800c240 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800c12a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c12e:	f7ff fe37 	bl	800bda0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800c132:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c136:	2008      	movs	r0, #8
 800c138:	f7ff ff53 	bl	800bfe2 <send_cmd>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b01      	cmp	r3, #1
 800c140:	d151      	bne.n	800c1e6 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800c142:	2300      	movs	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]
 800c146:	e00d      	b.n	800c164 <USER_SPI_initialize+0xa4>
 800c148:	7bfc      	ldrb	r4, [r7, #15]
 800c14a:	20ff      	movs	r0, #255	; 0xff
 800c14c:	f7ff fe52 	bl	800bdf4 <xchg_spi>
 800c150:	4603      	mov	r3, r0
 800c152:	461a      	mov	r2, r3
 800c154:	f104 0310 	add.w	r3, r4, #16
 800c158:	443b      	add	r3, r7
 800c15a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
 800c160:	3301      	adds	r3, #1
 800c162:	73fb      	strb	r3, [r7, #15]
 800c164:	7bfb      	ldrb	r3, [r7, #15]
 800c166:	2b03      	cmp	r3, #3
 800c168:	d9ee      	bls.n	800c148 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800c16a:	7abb      	ldrb	r3, [r7, #10]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d167      	bne.n	800c240 <USER_SPI_initialize+0x180>
 800c170:	7afb      	ldrb	r3, [r7, #11]
 800c172:	2baa      	cmp	r3, #170	; 0xaa
 800c174:	d164      	bne.n	800c240 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800c176:	bf00      	nop
 800c178:	f7ff fe26 	bl	800bdc8 <SPI_Timer_Status>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d007      	beq.n	800c192 <USER_SPI_initialize+0xd2>
 800c182:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c186:	20a9      	movs	r0, #169	; 0xa9
 800c188:	f7ff ff2b 	bl	800bfe2 <send_cmd>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d1f2      	bne.n	800c178 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800c192:	f7ff fe19 	bl	800bdc8 <SPI_Timer_Status>
 800c196:	4603      	mov	r3, r0
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d051      	beq.n	800c240 <USER_SPI_initialize+0x180>
 800c19c:	2100      	movs	r1, #0
 800c19e:	203a      	movs	r0, #58	; 0x3a
 800c1a0:	f7ff ff1f 	bl	800bfe2 <send_cmd>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d14a      	bne.n	800c240 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	73fb      	strb	r3, [r7, #15]
 800c1ae:	e00d      	b.n	800c1cc <USER_SPI_initialize+0x10c>
 800c1b0:	7bfc      	ldrb	r4, [r7, #15]
 800c1b2:	20ff      	movs	r0, #255	; 0xff
 800c1b4:	f7ff fe1e 	bl	800bdf4 <xchg_spi>
 800c1b8:	4603      	mov	r3, r0
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f104 0310 	add.w	r3, r4, #16
 800c1c0:	443b      	add	r3, r7
 800c1c2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	73fb      	strb	r3, [r7, #15]
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d9ee      	bls.n	800c1b0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800c1d2:	7a3b      	ldrb	r3, [r7, #8]
 800c1d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d001      	beq.n	800c1e0 <USER_SPI_initialize+0x120>
 800c1dc:	230c      	movs	r3, #12
 800c1de:	e000      	b.n	800c1e2 <USER_SPI_initialize+0x122>
 800c1e0:	2304      	movs	r3, #4
 800c1e2:	737b      	strb	r3, [r7, #13]
 800c1e4:	e02c      	b.n	800c240 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	20a9      	movs	r0, #169	; 0xa9
 800c1ea:	f7ff fefa 	bl	800bfe2 <send_cmd>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d804      	bhi.n	800c1fe <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c1f4:	2302      	movs	r3, #2
 800c1f6:	737b      	strb	r3, [r7, #13]
 800c1f8:	23a9      	movs	r3, #169	; 0xa9
 800c1fa:	73bb      	strb	r3, [r7, #14]
 800c1fc:	e003      	b.n	800c206 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c1fe:	2301      	movs	r3, #1
 800c200:	737b      	strb	r3, [r7, #13]
 800c202:	2301      	movs	r3, #1
 800c204:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c206:	bf00      	nop
 800c208:	f7ff fdde 	bl	800bdc8 <SPI_Timer_Status>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d007      	beq.n	800c222 <USER_SPI_initialize+0x162>
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	2100      	movs	r1, #0
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff fee3 	bl	800bfe2 <send_cmd>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1f2      	bne.n	800c208 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c222:	f7ff fdd1 	bl	800bdc8 <SPI_Timer_Status>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d007      	beq.n	800c23c <USER_SPI_initialize+0x17c>
 800c22c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c230:	2010      	movs	r0, #16
 800c232:	f7ff fed6 	bl	800bfe2 <send_cmd>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d001      	beq.n	800c240 <USER_SPI_initialize+0x180>
				ty = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800c240:	4a14      	ldr	r2, [pc, #80]	; (800c294 <USER_SPI_initialize+0x1d4>)
 800c242:	7b7b      	ldrb	r3, [r7, #13]
 800c244:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c246:	f7ff fe45 	bl	800bed4 <despiselect>

	if (ty) {			/* OK */
 800c24a:	7b7b      	ldrb	r3, [r7, #13]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d012      	beq.n	800c276 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800c250:	4b0f      	ldr	r3, [pc, #60]	; (800c290 <USER_SPI_initialize+0x1d0>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c25a:	4b0d      	ldr	r3, [pc, #52]	; (800c290 <USER_SPI_initialize+0x1d0>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f042 0210 	orr.w	r2, r2, #16
 800c262:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c264:	4b09      	ldr	r3, [pc, #36]	; (800c28c <USER_SPI_initialize+0x1cc>)
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	f023 0301 	bic.w	r3, r3, #1
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	4b06      	ldr	r3, [pc, #24]	; (800c28c <USER_SPI_initialize+0x1cc>)
 800c272:	701a      	strb	r2, [r3, #0]
 800c274:	e002      	b.n	800c27c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c276:	4b05      	ldr	r3, [pc, #20]	; (800c28c <USER_SPI_initialize+0x1cc>)
 800c278:	2201      	movs	r2, #1
 800c27a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c27c:	4b03      	ldr	r3, [pc, #12]	; (800c28c <USER_SPI_initialize+0x1cc>)
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	b2db      	uxtb	r3, r3
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	bd90      	pop	{r4, r7, pc}
 800c28a:	bf00      	nop
 800c28c:	20000028 	.word	0x20000028
 800c290:	200007dc 	.word	0x200007dc
 800c294:	20000918 	.word	0x20000918

0800c298 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c298:	b480      	push	{r7}
 800c29a:	b083      	sub	sp, #12
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	4603      	mov	r3, r0
 800c2a0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c2a2:	79fb      	ldrb	r3, [r7, #7]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <USER_SPI_status+0x14>
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e002      	b.n	800c2b2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c2ac:	4b04      	ldr	r3, [pc, #16]	; (800c2c0 <USER_SPI_status+0x28>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	b2db      	uxtb	r3, r3
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	370c      	adds	r7, #12
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2bc:	4770      	bx	lr
 800c2be:	bf00      	nop
 800c2c0:	20000028 	.word	0x20000028

0800c2c4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	60b9      	str	r1, [r7, #8]
 800c2cc:	607a      	str	r2, [r7, #4]
 800c2ce:	603b      	str	r3, [r7, #0]
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c2d4:	7bfb      	ldrb	r3, [r7, #15]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d102      	bne.n	800c2e0 <USER_SPI_read+0x1c>
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d101      	bne.n	800c2e4 <USER_SPI_read+0x20>
 800c2e0:	2304      	movs	r3, #4
 800c2e2:	e04d      	b.n	800c380 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c2e4:	4b28      	ldr	r3, [pc, #160]	; (800c388 <USER_SPI_read+0xc4>)
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	f003 0301 	and.w	r3, r3, #1
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d001      	beq.n	800c2f6 <USER_SPI_read+0x32>
 800c2f2:	2303      	movs	r3, #3
 800c2f4:	e044      	b.n	800c380 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800c2f6:	4b25      	ldr	r3, [pc, #148]	; (800c38c <USER_SPI_read+0xc8>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	f003 0308 	and.w	r3, r3, #8
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d102      	bne.n	800c308 <USER_SPI_read+0x44>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	025b      	lsls	r3, r3, #9
 800c306:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d111      	bne.n	800c332 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800c30e:	6879      	ldr	r1, [r7, #4]
 800c310:	2011      	movs	r0, #17
 800c312:	f7ff fe66 	bl	800bfe2 <send_cmd>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d129      	bne.n	800c370 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800c31c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c320:	68b8      	ldr	r0, [r7, #8]
 800c322:	f7ff fe03 	bl	800bf2c <rcvr_datablock>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d021      	beq.n	800c370 <USER_SPI_read+0xac>
			count = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	603b      	str	r3, [r7, #0]
 800c330:	e01e      	b.n	800c370 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800c332:	6879      	ldr	r1, [r7, #4]
 800c334:	2012      	movs	r0, #18
 800c336:	f7ff fe54 	bl	800bfe2 <send_cmd>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d117      	bne.n	800c370 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800c340:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c344:	68b8      	ldr	r0, [r7, #8]
 800c346:	f7ff fdf1 	bl	800bf2c <rcvr_datablock>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00a      	beq.n	800c366 <USER_SPI_read+0xa2>
				buff += 512;
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c356:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	603b      	str	r3, [r7, #0]
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1ed      	bne.n	800c340 <USER_SPI_read+0x7c>
 800c364:	e000      	b.n	800c368 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800c366:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800c368:	2100      	movs	r1, #0
 800c36a:	200c      	movs	r0, #12
 800c36c:	f7ff fe39 	bl	800bfe2 <send_cmd>
		}
	}
	despiselect();
 800c370:	f7ff fdb0 	bl	800bed4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	bf14      	ite	ne
 800c37a:	2301      	movne	r3, #1
 800c37c:	2300      	moveq	r3, #0
 800c37e:	b2db      	uxtb	r3, r3
}
 800c380:	4618      	mov	r0, r3
 800c382:	3710      	adds	r7, #16
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	20000028 	.word	0x20000028
 800c38c:	20000918 	.word	0x20000918

0800c390 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	60b9      	str	r1, [r7, #8]
 800c398:	607a      	str	r2, [r7, #4]
 800c39a:	603b      	str	r3, [r7, #0]
 800c39c:	4603      	mov	r3, r0
 800c39e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c3a0:	7bfb      	ldrb	r3, [r7, #15]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d102      	bne.n	800c3ac <USER_SPI_write+0x1c>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d101      	bne.n	800c3b0 <USER_SPI_write+0x20>
 800c3ac:	2304      	movs	r3, #4
 800c3ae:	e063      	b.n	800c478 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800c3b0:	4b33      	ldr	r3, [pc, #204]	; (800c480 <USER_SPI_write+0xf0>)
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d001      	beq.n	800c3c2 <USER_SPI_write+0x32>
 800c3be:	2303      	movs	r3, #3
 800c3c0:	e05a      	b.n	800c478 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800c3c2:	4b2f      	ldr	r3, [pc, #188]	; (800c480 <USER_SPI_write+0xf0>)
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	f003 0304 	and.w	r3, r3, #4
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <USER_SPI_write+0x44>
 800c3d0:	2302      	movs	r3, #2
 800c3d2:	e051      	b.n	800c478 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c3d4:	4b2b      	ldr	r3, [pc, #172]	; (800c484 <USER_SPI_write+0xf4>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	f003 0308 	and.w	r3, r3, #8
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d102      	bne.n	800c3e6 <USER_SPI_write+0x56>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	025b      	lsls	r3, r3, #9
 800c3e4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	2b01      	cmp	r3, #1
 800c3ea:	d110      	bne.n	800c40e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c3ec:	6879      	ldr	r1, [r7, #4]
 800c3ee:	2018      	movs	r0, #24
 800c3f0:	f7ff fdf7 	bl	800bfe2 <send_cmd>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d136      	bne.n	800c468 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c3fa:	21fe      	movs	r1, #254	; 0xfe
 800c3fc:	68b8      	ldr	r0, [r7, #8]
 800c3fe:	f7ff fdbe 	bl	800bf7e <xmit_datablock>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d02f      	beq.n	800c468 <USER_SPI_write+0xd8>
			count = 0;
 800c408:	2300      	movs	r3, #0
 800c40a:	603b      	str	r3, [r7, #0]
 800c40c:	e02c      	b.n	800c468 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c40e:	4b1d      	ldr	r3, [pc, #116]	; (800c484 <USER_SPI_write+0xf4>)
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	f003 0306 	and.w	r3, r3, #6
 800c416:	2b00      	cmp	r3, #0
 800c418:	d003      	beq.n	800c422 <USER_SPI_write+0x92>
 800c41a:	6839      	ldr	r1, [r7, #0]
 800c41c:	2097      	movs	r0, #151	; 0x97
 800c41e:	f7ff fde0 	bl	800bfe2 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c422:	6879      	ldr	r1, [r7, #4]
 800c424:	2019      	movs	r0, #25
 800c426:	f7ff fddc 	bl	800bfe2 <send_cmd>
 800c42a:	4603      	mov	r3, r0
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d11b      	bne.n	800c468 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c430:	21fc      	movs	r1, #252	; 0xfc
 800c432:	68b8      	ldr	r0, [r7, #8]
 800c434:	f7ff fda3 	bl	800bf7e <xmit_datablock>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d00a      	beq.n	800c454 <USER_SPI_write+0xc4>
				buff += 512;
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c444:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	3b01      	subs	r3, #1
 800c44a:	603b      	str	r3, [r7, #0]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d1ee      	bne.n	800c430 <USER_SPI_write+0xa0>
 800c452:	e000      	b.n	800c456 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c454:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c456:	21fd      	movs	r1, #253	; 0xfd
 800c458:	2000      	movs	r0, #0
 800c45a:	f7ff fd90 	bl	800bf7e <xmit_datablock>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d101      	bne.n	800c468 <USER_SPI_write+0xd8>
 800c464:	2301      	movs	r3, #1
 800c466:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c468:	f7ff fd34 	bl	800bed4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	bf14      	ite	ne
 800c472:	2301      	movne	r3, #1
 800c474:	2300      	moveq	r3, #0
 800c476:	b2db      	uxtb	r3, r3
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	20000028 	.word	0x20000028
 800c484:	20000918 	.word	0x20000918

0800c488 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08c      	sub	sp, #48	; 0x30
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	4603      	mov	r3, r0
 800c490:	603a      	str	r2, [r7, #0]
 800c492:	71fb      	strb	r3, [r7, #7]
 800c494:	460b      	mov	r3, r1
 800c496:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c498:	79fb      	ldrb	r3, [r7, #7]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d001      	beq.n	800c4a2 <USER_SPI_ioctl+0x1a>
 800c49e:	2304      	movs	r3, #4
 800c4a0:	e15a      	b.n	800c758 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c4a2:	4baf      	ldr	r3, [pc, #700]	; (800c760 <USER_SPI_ioctl+0x2d8>)
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	f003 0301 	and.w	r3, r3, #1
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <USER_SPI_ioctl+0x2c>
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	e151      	b.n	800c758 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800c4ba:	79bb      	ldrb	r3, [r7, #6]
 800c4bc:	2b04      	cmp	r3, #4
 800c4be:	f200 8136 	bhi.w	800c72e <USER_SPI_ioctl+0x2a6>
 800c4c2:	a201      	add	r2, pc, #4	; (adr r2, 800c4c8 <USER_SPI_ioctl+0x40>)
 800c4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c8:	0800c4dd 	.word	0x0800c4dd
 800c4cc:	0800c4f1 	.word	0x0800c4f1
 800c4d0:	0800c72f 	.word	0x0800c72f
 800c4d4:	0800c59d 	.word	0x0800c59d
 800c4d8:	0800c693 	.word	0x0800c693
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c4dc:	f7ff fd0a 	bl	800bef4 <spiselect>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	f000 8127 	beq.w	800c736 <USER_SPI_ioctl+0x2ae>
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c4ee:	e122      	b.n	800c736 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c4f0:	2100      	movs	r1, #0
 800c4f2:	2009      	movs	r0, #9
 800c4f4:	f7ff fd75 	bl	800bfe2 <send_cmd>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f040 811d 	bne.w	800c73a <USER_SPI_ioctl+0x2b2>
 800c500:	f107 030c 	add.w	r3, r7, #12
 800c504:	2110      	movs	r1, #16
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff fd10 	bl	800bf2c <rcvr_datablock>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 8113 	beq.w	800c73a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800c514:	7b3b      	ldrb	r3, [r7, #12]
 800c516:	099b      	lsrs	r3, r3, #6
 800c518:	b2db      	uxtb	r3, r3
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d111      	bne.n	800c542 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800c51e:	7d7b      	ldrb	r3, [r7, #21]
 800c520:	461a      	mov	r2, r3
 800c522:	7d3b      	ldrb	r3, [r7, #20]
 800c524:	021b      	lsls	r3, r3, #8
 800c526:	4413      	add	r3, r2
 800c528:	461a      	mov	r2, r3
 800c52a:	7cfb      	ldrb	r3, [r7, #19]
 800c52c:	041b      	lsls	r3, r3, #16
 800c52e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800c532:	4413      	add	r3, r2
 800c534:	3301      	adds	r3, #1
 800c536:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	029a      	lsls	r2, r3, #10
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	e028      	b.n	800c594 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800c542:	7c7b      	ldrb	r3, [r7, #17]
 800c544:	f003 030f 	and.w	r3, r3, #15
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	7dbb      	ldrb	r3, [r7, #22]
 800c54c:	09db      	lsrs	r3, r3, #7
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	4413      	add	r3, r2
 800c552:	b2da      	uxtb	r2, r3
 800c554:	7d7b      	ldrb	r3, [r7, #21]
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	b2db      	uxtb	r3, r3
 800c55a:	f003 0306 	and.w	r3, r3, #6
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	4413      	add	r3, r2
 800c562:	b2db      	uxtb	r3, r3
 800c564:	3302      	adds	r3, #2
 800c566:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800c56a:	7d3b      	ldrb	r3, [r7, #20]
 800c56c:	099b      	lsrs	r3, r3, #6
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	461a      	mov	r2, r3
 800c572:	7cfb      	ldrb	r3, [r7, #19]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	441a      	add	r2, r3
 800c578:	7cbb      	ldrb	r3, [r7, #18]
 800c57a:	029b      	lsls	r3, r3, #10
 800c57c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c580:	4413      	add	r3, r2
 800c582:	3301      	adds	r3, #1
 800c584:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800c586:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c58a:	3b09      	subs	r3, #9
 800c58c:	69fa      	ldr	r2, [r7, #28]
 800c58e:	409a      	lsls	r2, r3
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800c594:	2300      	movs	r3, #0
 800c596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800c59a:	e0ce      	b.n	800c73a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800c59c:	4b71      	ldr	r3, [pc, #452]	; (800c764 <USER_SPI_ioctl+0x2dc>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	f003 0304 	and.w	r3, r3, #4
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d031      	beq.n	800c60c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800c5a8:	2100      	movs	r1, #0
 800c5aa:	208d      	movs	r0, #141	; 0x8d
 800c5ac:	f7ff fd19 	bl	800bfe2 <send_cmd>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f040 80c3 	bne.w	800c73e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800c5b8:	20ff      	movs	r0, #255	; 0xff
 800c5ba:	f7ff fc1b 	bl	800bdf4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800c5be:	f107 030c 	add.w	r3, r7, #12
 800c5c2:	2110      	movs	r1, #16
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f7ff fcb1 	bl	800bf2c <rcvr_datablock>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 80b6 	beq.w	800c73e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800c5d2:	2330      	movs	r3, #48	; 0x30
 800c5d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c5d8:	e007      	b.n	800c5ea <USER_SPI_ioctl+0x162>
 800c5da:	20ff      	movs	r0, #255	; 0xff
 800c5dc:	f7ff fc0a 	bl	800bdf4 <xchg_spi>
 800c5e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c5ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f3      	bne.n	800c5da <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800c5f2:	7dbb      	ldrb	r3, [r7, #22]
 800c5f4:	091b      	lsrs	r3, r3, #4
 800c5f6:	b2db      	uxtb	r3, r3
 800c5f8:	461a      	mov	r2, r3
 800c5fa:	2310      	movs	r3, #16
 800c5fc:	fa03 f202 	lsl.w	r2, r3, r2
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c60a:	e098      	b.n	800c73e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c60c:	2100      	movs	r1, #0
 800c60e:	2009      	movs	r0, #9
 800c610:	f7ff fce7 	bl	800bfe2 <send_cmd>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	f040 8091 	bne.w	800c73e <USER_SPI_ioctl+0x2b6>
 800c61c:	f107 030c 	add.w	r3, r7, #12
 800c620:	2110      	movs	r1, #16
 800c622:	4618      	mov	r0, r3
 800c624:	f7ff fc82 	bl	800bf2c <rcvr_datablock>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 8087 	beq.w	800c73e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c630:	4b4c      	ldr	r3, [pc, #304]	; (800c764 <USER_SPI_ioctl+0x2dc>)
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	f003 0302 	and.w	r3, r3, #2
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d012      	beq.n	800c662 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c63c:	7dbb      	ldrb	r3, [r7, #22]
 800c63e:	005b      	lsls	r3, r3, #1
 800c640:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800c644:	7dfa      	ldrb	r2, [r7, #23]
 800c646:	09d2      	lsrs	r2, r2, #7
 800c648:	b2d2      	uxtb	r2, r2
 800c64a:	4413      	add	r3, r2
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	7e7b      	ldrb	r3, [r7, #25]
 800c650:	099b      	lsrs	r3, r3, #6
 800c652:	b2db      	uxtb	r3, r3
 800c654:	3b01      	subs	r3, #1
 800c656:	fa02 f303 	lsl.w	r3, r2, r3
 800c65a:	461a      	mov	r2, r3
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	601a      	str	r2, [r3, #0]
 800c660:	e013      	b.n	800c68a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c662:	7dbb      	ldrb	r3, [r7, #22]
 800c664:	109b      	asrs	r3, r3, #2
 800c666:	b29b      	uxth	r3, r3
 800c668:	f003 031f 	and.w	r3, r3, #31
 800c66c:	3301      	adds	r3, #1
 800c66e:	7dfa      	ldrb	r2, [r7, #23]
 800c670:	00d2      	lsls	r2, r2, #3
 800c672:	f002 0218 	and.w	r2, r2, #24
 800c676:	7df9      	ldrb	r1, [r7, #23]
 800c678:	0949      	lsrs	r1, r1, #5
 800c67a:	b2c9      	uxtb	r1, r1
 800c67c:	440a      	add	r2, r1
 800c67e:	3201      	adds	r2, #1
 800c680:	fb02 f303 	mul.w	r3, r2, r3
 800c684:	461a      	mov	r2, r3
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c690:	e055      	b.n	800c73e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c692:	4b34      	ldr	r3, [pc, #208]	; (800c764 <USER_SPI_ioctl+0x2dc>)
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	f003 0306 	and.w	r3, r3, #6
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d051      	beq.n	800c742 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c69e:	f107 020c 	add.w	r2, r7, #12
 800c6a2:	79fb      	ldrb	r3, [r7, #7]
 800c6a4:	210b      	movs	r1, #11
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7ff feee 	bl	800c488 <USER_SPI_ioctl>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d149      	bne.n	800c746 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c6b2:	7b3b      	ldrb	r3, [r7, #12]
 800c6b4:	099b      	lsrs	r3, r3, #6
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d104      	bne.n	800c6c6 <USER_SPI_ioctl+0x23e>
 800c6bc:	7dbb      	ldrb	r3, [r7, #22]
 800c6be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d041      	beq.n	800c74a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	623b      	str	r3, [r7, #32]
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6d0:	6a3b      	ldr	r3, [r7, #32]
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800c6d6:	4b23      	ldr	r3, [pc, #140]	; (800c764 <USER_SPI_ioctl+0x2dc>)
 800c6d8:	781b      	ldrb	r3, [r3, #0]
 800c6da:	f003 0308 	and.w	r3, r3, #8
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d105      	bne.n	800c6ee <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6e4:	025b      	lsls	r3, r3, #9
 800c6e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ea:	025b      	lsls	r3, r3, #9
 800c6ec:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c6ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6f0:	2020      	movs	r0, #32
 800c6f2:	f7ff fc76 	bl	800bfe2 <send_cmd>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d128      	bne.n	800c74e <USER_SPI_ioctl+0x2c6>
 800c6fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c6fe:	2021      	movs	r0, #33	; 0x21
 800c700:	f7ff fc6f 	bl	800bfe2 <send_cmd>
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d121      	bne.n	800c74e <USER_SPI_ioctl+0x2c6>
 800c70a:	2100      	movs	r1, #0
 800c70c:	2026      	movs	r0, #38	; 0x26
 800c70e:	f7ff fc68 	bl	800bfe2 <send_cmd>
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d11a      	bne.n	800c74e <USER_SPI_ioctl+0x2c6>
 800c718:	f247 5030 	movw	r0, #30000	; 0x7530
 800c71c:	f7ff fbb7 	bl	800be8e <wait_ready>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d013      	beq.n	800c74e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c726:	2300      	movs	r3, #0
 800c728:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800c72c:	e00f      	b.n	800c74e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c72e:	2304      	movs	r3, #4
 800c730:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c734:	e00c      	b.n	800c750 <USER_SPI_ioctl+0x2c8>
		break;
 800c736:	bf00      	nop
 800c738:	e00a      	b.n	800c750 <USER_SPI_ioctl+0x2c8>
		break;
 800c73a:	bf00      	nop
 800c73c:	e008      	b.n	800c750 <USER_SPI_ioctl+0x2c8>
		break;
 800c73e:	bf00      	nop
 800c740:	e006      	b.n	800c750 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c742:	bf00      	nop
 800c744:	e004      	b.n	800c750 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c746:	bf00      	nop
 800c748:	e002      	b.n	800c750 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c74a:	bf00      	nop
 800c74c:	e000      	b.n	800c750 <USER_SPI_ioctl+0x2c8>
		break;
 800c74e:	bf00      	nop
	}

	despiselect();
 800c750:	f7ff fbc0 	bl	800bed4 <despiselect>

	return res;
 800c754:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3730      	adds	r7, #48	; 0x30
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}
 800c760:	20000028 	.word	0x20000028
 800c764:	20000918 	.word	0x20000918

0800c768 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	4603      	mov	r3, r0
 800c770:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c772:	79fb      	ldrb	r3, [r7, #7]
 800c774:	4a08      	ldr	r2, [pc, #32]	; (800c798 <disk_status+0x30>)
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	4413      	add	r3, r2
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	79fa      	ldrb	r2, [r7, #7]
 800c780:	4905      	ldr	r1, [pc, #20]	; (800c798 <disk_status+0x30>)
 800c782:	440a      	add	r2, r1
 800c784:	7a12      	ldrb	r2, [r2, #8]
 800c786:	4610      	mov	r0, r2
 800c788:	4798      	blx	r3
 800c78a:	4603      	mov	r3, r0
 800c78c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c78e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3710      	adds	r7, #16
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}
 800c798:	2000094c 	.word	0x2000094c

0800c79c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b084      	sub	sp, #16
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c7aa:	79fb      	ldrb	r3, [r7, #7]
 800c7ac:	4a0d      	ldr	r2, [pc, #52]	; (800c7e4 <disk_initialize+0x48>)
 800c7ae:	5cd3      	ldrb	r3, [r2, r3]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d111      	bne.n	800c7d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c7b4:	79fb      	ldrb	r3, [r7, #7]
 800c7b6:	4a0b      	ldr	r2, [pc, #44]	; (800c7e4 <disk_initialize+0x48>)
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c7bc:	79fb      	ldrb	r3, [r7, #7]
 800c7be:	4a09      	ldr	r2, [pc, #36]	; (800c7e4 <disk_initialize+0x48>)
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4413      	add	r3, r2
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	79fa      	ldrb	r2, [r7, #7]
 800c7ca:	4906      	ldr	r1, [pc, #24]	; (800c7e4 <disk_initialize+0x48>)
 800c7cc:	440a      	add	r2, r1
 800c7ce:	7a12      	ldrb	r2, [r2, #8]
 800c7d0:	4610      	mov	r0, r2
 800c7d2:	4798      	blx	r3
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	2000094c 	.word	0x2000094c

0800c7e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c7e8:	b590      	push	{r4, r7, lr}
 800c7ea:	b087      	sub	sp, #28
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60b9      	str	r1, [r7, #8]
 800c7f0:	607a      	str	r2, [r7, #4]
 800c7f2:	603b      	str	r3, [r7, #0]
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
 800c7fa:	4a0a      	ldr	r2, [pc, #40]	; (800c824 <disk_read+0x3c>)
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	689c      	ldr	r4, [r3, #8]
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	4a07      	ldr	r2, [pc, #28]	; (800c824 <disk_read+0x3c>)
 800c808:	4413      	add	r3, r2
 800c80a:	7a18      	ldrb	r0, [r3, #8]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	68b9      	ldr	r1, [r7, #8]
 800c812:	47a0      	blx	r4
 800c814:	4603      	mov	r3, r0
 800c816:	75fb      	strb	r3, [r7, #23]
  return res;
 800c818:	7dfb      	ldrb	r3, [r7, #23]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd90      	pop	{r4, r7, pc}
 800c822:	bf00      	nop
 800c824:	2000094c 	.word	0x2000094c

0800c828 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c828:	b590      	push	{r4, r7, lr}
 800c82a:	b087      	sub	sp, #28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	60b9      	str	r1, [r7, #8]
 800c830:	607a      	str	r2, [r7, #4]
 800c832:	603b      	str	r3, [r7, #0]
 800c834:	4603      	mov	r3, r0
 800c836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c838:	7bfb      	ldrb	r3, [r7, #15]
 800c83a:	4a0a      	ldr	r2, [pc, #40]	; (800c864 <disk_write+0x3c>)
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	4413      	add	r3, r2
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	68dc      	ldr	r4, [r3, #12]
 800c844:	7bfb      	ldrb	r3, [r7, #15]
 800c846:	4a07      	ldr	r2, [pc, #28]	; (800c864 <disk_write+0x3c>)
 800c848:	4413      	add	r3, r2
 800c84a:	7a18      	ldrb	r0, [r3, #8]
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	68b9      	ldr	r1, [r7, #8]
 800c852:	47a0      	blx	r4
 800c854:	4603      	mov	r3, r0
 800c856:	75fb      	strb	r3, [r7, #23]
  return res;
 800c858:	7dfb      	ldrb	r3, [r7, #23]
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	371c      	adds	r7, #28
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd90      	pop	{r4, r7, pc}
 800c862:	bf00      	nop
 800c864:	2000094c 	.word	0x2000094c

0800c868 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	4603      	mov	r3, r0
 800c870:	603a      	str	r2, [r7, #0]
 800c872:	71fb      	strb	r3, [r7, #7]
 800c874:	460b      	mov	r3, r1
 800c876:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c878:	79fb      	ldrb	r3, [r7, #7]
 800c87a:	4a09      	ldr	r2, [pc, #36]	; (800c8a0 <disk_ioctl+0x38>)
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4413      	add	r3, r2
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	691b      	ldr	r3, [r3, #16]
 800c884:	79fa      	ldrb	r2, [r7, #7]
 800c886:	4906      	ldr	r1, [pc, #24]	; (800c8a0 <disk_ioctl+0x38>)
 800c888:	440a      	add	r2, r1
 800c88a:	7a10      	ldrb	r0, [r2, #8]
 800c88c:	79b9      	ldrb	r1, [r7, #6]
 800c88e:	683a      	ldr	r2, [r7, #0]
 800c890:	4798      	blx	r3
 800c892:	4603      	mov	r3, r0
 800c894:	73fb      	strb	r3, [r7, #15]
  return res;
 800c896:	7bfb      	ldrb	r3, [r7, #15]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	2000094c 	.word	0x2000094c

0800c8a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c8b4:	89fb      	ldrh	r3, [r7, #14]
 800c8b6:	021b      	lsls	r3, r3, #8
 800c8b8:	b21a      	sxth	r2, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	b21b      	sxth	r3, r3
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	b21b      	sxth	r3, r3
 800c8c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c8c6:	89fb      	ldrh	r3, [r7, #14]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3714      	adds	r7, #20
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	3303      	adds	r3, #3
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	021b      	lsls	r3, r3, #8
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	3202      	adds	r2, #2
 800c8ec:	7812      	ldrb	r2, [r2, #0]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	021b      	lsls	r3, r3, #8
 800c8f6:	687a      	ldr	r2, [r7, #4]
 800c8f8:	3201      	adds	r2, #1
 800c8fa:	7812      	ldrb	r2, [r2, #0]
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	021b      	lsls	r3, r3, #8
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	7812      	ldrb	r2, [r2, #0]
 800c908:	4313      	orrs	r3, r2
 800c90a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c90c:	68fb      	ldr	r3, [r7, #12]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c91a:	b480      	push	{r7}
 800c91c:	b083      	sub	sp, #12
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	460b      	mov	r3, r1
 800c924:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	1c5a      	adds	r2, r3, #1
 800c92a:	607a      	str	r2, [r7, #4]
 800c92c:	887a      	ldrh	r2, [r7, #2]
 800c92e:	b2d2      	uxtb	r2, r2
 800c930:	701a      	strb	r2, [r3, #0]
 800c932:	887b      	ldrh	r3, [r7, #2]
 800c934:	0a1b      	lsrs	r3, r3, #8
 800c936:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	607a      	str	r2, [r7, #4]
 800c93e:	887a      	ldrh	r2, [r7, #2]
 800c940:	b2d2      	uxtb	r2, r2
 800c942:	701a      	strb	r2, [r3, #0]
}
 800c944:	bf00      	nop
 800c946:	370c      	adds	r7, #12
 800c948:	46bd      	mov	sp, r7
 800c94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94e:	4770      	bx	lr

0800c950 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	1c5a      	adds	r2, r3, #1
 800c95e:	607a      	str	r2, [r7, #4]
 800c960:	683a      	ldr	r2, [r7, #0]
 800c962:	b2d2      	uxtb	r2, r2
 800c964:	701a      	strb	r2, [r3, #0]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	0a1b      	lsrs	r3, r3, #8
 800c96a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	1c5a      	adds	r2, r3, #1
 800c970:	607a      	str	r2, [r7, #4]
 800c972:	683a      	ldr	r2, [r7, #0]
 800c974:	b2d2      	uxtb	r2, r2
 800c976:	701a      	strb	r2, [r3, #0]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	0a1b      	lsrs	r3, r3, #8
 800c97c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	1c5a      	adds	r2, r3, #1
 800c982:	607a      	str	r2, [r7, #4]
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	b2d2      	uxtb	r2, r2
 800c988:	701a      	strb	r2, [r3, #0]
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	0a1b      	lsrs	r3, r3, #8
 800c98e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	1c5a      	adds	r2, r3, #1
 800c994:	607a      	str	r2, [r7, #4]
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	b2d2      	uxtb	r2, r2
 800c99a:	701a      	strb	r2, [r3, #0]
}
 800c99c:	bf00      	nop
 800c99e:	370c      	adds	r7, #12
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c9a8:	b480      	push	{r7}
 800c9aa:	b087      	sub	sp, #28
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00d      	beq.n	800c9de <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c9c2:	693a      	ldr	r2, [r7, #16]
 800c9c4:	1c53      	adds	r3, r2, #1
 800c9c6:	613b      	str	r3, [r7, #16]
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	1c59      	adds	r1, r3, #1
 800c9cc:	6179      	str	r1, [r7, #20]
 800c9ce:	7812      	ldrb	r2, [r2, #0]
 800c9d0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	607b      	str	r3, [r7, #4]
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1f1      	bne.n	800c9c2 <mem_cpy+0x1a>
	}
}
 800c9de:	bf00      	nop
 800c9e0:	371c      	adds	r7, #28
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e8:	4770      	bx	lr

0800c9ea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c9ea:	b480      	push	{r7}
 800c9ec:	b087      	sub	sp, #28
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	60f8      	str	r0, [r7, #12]
 800c9f2:	60b9      	str	r1, [r7, #8]
 800c9f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	1c5a      	adds	r2, r3, #1
 800c9fe:	617a      	str	r2, [r7, #20]
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	b2d2      	uxtb	r2, r2
 800ca04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	3b01      	subs	r3, #1
 800ca0a:	607b      	str	r3, [r7, #4]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1f3      	bne.n	800c9fa <mem_set+0x10>
}
 800ca12:	bf00      	nop
 800ca14:	bf00      	nop
 800ca16:	371c      	adds	r7, #28
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ca20:	b480      	push	{r7}
 800ca22:	b089      	sub	sp, #36	; 0x24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	61fb      	str	r3, [r7, #28]
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	1c5a      	adds	r2, r3, #1
 800ca3c:	61fa      	str	r2, [r7, #28]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	4619      	mov	r1, r3
 800ca42:	69bb      	ldr	r3, [r7, #24]
 800ca44:	1c5a      	adds	r2, r3, #1
 800ca46:	61ba      	str	r2, [r7, #24]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	1acb      	subs	r3, r1, r3
 800ca4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3b01      	subs	r3, #1
 800ca52:	607b      	str	r3, [r7, #4]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <mem_cmp+0x40>
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d0eb      	beq.n	800ca38 <mem_cmp+0x18>

	return r;
 800ca60:	697b      	ldr	r3, [r7, #20]
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3724      	adds	r7, #36	; 0x24
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ca78:	e002      	b.n	800ca80 <chk_chr+0x12>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	607b      	str	r3, [r7, #4]
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d005      	beq.n	800ca94 <chk_chr+0x26>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d1f2      	bne.n	800ca7a <chk_chr+0xc>
	return *str;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	781b      	ldrb	r3, [r3, #0]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d009      	beq.n	800cac6 <lock_fs+0x22>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	68db      	ldr	r3, [r3, #12]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f002 fb78 	bl	800f1ac <ff_req_grant>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <lock_fs+0x22>
 800cac2:	2301      	movs	r3, #1
 800cac4:	e000      	b.n	800cac8 <lock_fs+0x24>
 800cac6:	2300      	movs	r3, #0
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	460b      	mov	r3, r1
 800cada:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d00d      	beq.n	800cafe <unlock_fs+0x2e>
 800cae2:	78fb      	ldrb	r3, [r7, #3]
 800cae4:	2b0c      	cmp	r3, #12
 800cae6:	d00a      	beq.n	800cafe <unlock_fs+0x2e>
 800cae8:	78fb      	ldrb	r3, [r7, #3]
 800caea:	2b0b      	cmp	r3, #11
 800caec:	d007      	beq.n	800cafe <unlock_fs+0x2e>
 800caee:	78fb      	ldrb	r3, [r7, #3]
 800caf0:	2b0f      	cmp	r3, #15
 800caf2:	d004      	beq.n	800cafe <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	4618      	mov	r0, r3
 800cafa:	f002 fb6c 	bl	800f1d6 <ff_rel_grant>
	}
}
 800cafe:	bf00      	nop
 800cb00:	3708      	adds	r7, #8
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
	...

0800cb08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cb12:	2300      	movs	r3, #0
 800cb14:	60bb      	str	r3, [r7, #8]
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	e029      	b.n	800cb70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cb1c:	4a27      	ldr	r2, [pc, #156]	; (800cbbc <chk_lock+0xb4>)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	011b      	lsls	r3, r3, #4
 800cb22:	4413      	add	r3, r2
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d01d      	beq.n	800cb66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cb2a:	4a24      	ldr	r2, [pc, #144]	; (800cbbc <chk_lock+0xb4>)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	011b      	lsls	r3, r3, #4
 800cb30:	4413      	add	r3, r2
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d116      	bne.n	800cb6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cb3c:	4a1f      	ldr	r2, [pc, #124]	; (800cbbc <chk_lock+0xb4>)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	011b      	lsls	r3, r3, #4
 800cb42:	4413      	add	r3, r2
 800cb44:	3304      	adds	r3, #4
 800cb46:	681a      	ldr	r2, [r3, #0]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d10c      	bne.n	800cb6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cb50:	4a1a      	ldr	r2, [pc, #104]	; (800cbbc <chk_lock+0xb4>)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	011b      	lsls	r3, r3, #4
 800cb56:	4413      	add	r3, r2
 800cb58:	3308      	adds	r3, #8
 800cb5a:	681a      	ldr	r2, [r3, #0]
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d102      	bne.n	800cb6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cb64:	e007      	b.n	800cb76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cb66:	2301      	movs	r3, #1
 800cb68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	60fb      	str	r3, [r7, #12]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2b01      	cmp	r3, #1
 800cb74:	d9d2      	bls.n	800cb1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b02      	cmp	r3, #2
 800cb7a:	d109      	bne.n	800cb90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d102      	bne.n	800cb88 <chk_lock+0x80>
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	2b02      	cmp	r3, #2
 800cb86:	d101      	bne.n	800cb8c <chk_lock+0x84>
 800cb88:	2300      	movs	r3, #0
 800cb8a:	e010      	b.n	800cbae <chk_lock+0xa6>
 800cb8c:	2312      	movs	r3, #18
 800cb8e:	e00e      	b.n	800cbae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d108      	bne.n	800cba8 <chk_lock+0xa0>
 800cb96:	4a09      	ldr	r2, [pc, #36]	; (800cbbc <chk_lock+0xb4>)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	011b      	lsls	r3, r3, #4
 800cb9c:	4413      	add	r3, r2
 800cb9e:	330c      	adds	r3, #12
 800cba0:	881b      	ldrh	r3, [r3, #0]
 800cba2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cba6:	d101      	bne.n	800cbac <chk_lock+0xa4>
 800cba8:	2310      	movs	r3, #16
 800cbaa:	e000      	b.n	800cbae <chk_lock+0xa6>
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3714      	adds	r7, #20
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	2000092c 	.word	0x2000092c

0800cbc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	607b      	str	r3, [r7, #4]
 800cbca:	e002      	b.n	800cbd2 <enq_lock+0x12>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3301      	adds	r3, #1
 800cbd0:	607b      	str	r3, [r7, #4]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2b01      	cmp	r3, #1
 800cbd6:	d806      	bhi.n	800cbe6 <enq_lock+0x26>
 800cbd8:	4a09      	ldr	r2, [pc, #36]	; (800cc00 <enq_lock+0x40>)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	011b      	lsls	r3, r3, #4
 800cbde:	4413      	add	r3, r2
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d1f2      	bne.n	800cbcc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b02      	cmp	r3, #2
 800cbea:	bf14      	ite	ne
 800cbec:	2301      	movne	r3, #1
 800cbee:	2300      	moveq	r3, #0
 800cbf0:	b2db      	uxtb	r3, r3
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	370c      	adds	r7, #12
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	2000092c 	.word	0x2000092c

0800cc04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b085      	sub	sp, #20
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60fb      	str	r3, [r7, #12]
 800cc12:	e01f      	b.n	800cc54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cc14:	4a41      	ldr	r2, [pc, #260]	; (800cd1c <inc_lock+0x118>)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	011b      	lsls	r3, r3, #4
 800cc1a:	4413      	add	r3, r2
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d113      	bne.n	800cc4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cc26:	4a3d      	ldr	r2, [pc, #244]	; (800cd1c <inc_lock+0x118>)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	011b      	lsls	r3, r3, #4
 800cc2c:	4413      	add	r3, r2
 800cc2e:	3304      	adds	r3, #4
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d109      	bne.n	800cc4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cc3a:	4a38      	ldr	r2, [pc, #224]	; (800cd1c <inc_lock+0x118>)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	011b      	lsls	r3, r3, #4
 800cc40:	4413      	add	r3, r2
 800cc42:	3308      	adds	r3, #8
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d006      	beq.n	800cc5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	3301      	adds	r3, #1
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2b01      	cmp	r3, #1
 800cc58:	d9dc      	bls.n	800cc14 <inc_lock+0x10>
 800cc5a:	e000      	b.n	800cc5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cc5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d132      	bne.n	800ccca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc64:	2300      	movs	r3, #0
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	e002      	b.n	800cc70 <inc_lock+0x6c>
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d806      	bhi.n	800cc84 <inc_lock+0x80>
 800cc76:	4a29      	ldr	r2, [pc, #164]	; (800cd1c <inc_lock+0x118>)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	011b      	lsls	r3, r3, #4
 800cc7c:	4413      	add	r3, r2
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d1f2      	bne.n	800cc6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	d101      	bne.n	800cc8e <inc_lock+0x8a>
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	e040      	b.n	800cd10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	4922      	ldr	r1, [pc, #136]	; (800cd1c <inc_lock+0x118>)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	011b      	lsls	r3, r3, #4
 800cc98:	440b      	add	r3, r1
 800cc9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	689a      	ldr	r2, [r3, #8]
 800cca0:	491e      	ldr	r1, [pc, #120]	; (800cd1c <inc_lock+0x118>)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	011b      	lsls	r3, r3, #4
 800cca6:	440b      	add	r3, r1
 800cca8:	3304      	adds	r3, #4
 800ccaa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	695a      	ldr	r2, [r3, #20]
 800ccb0:	491a      	ldr	r1, [pc, #104]	; (800cd1c <inc_lock+0x118>)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	011b      	lsls	r3, r3, #4
 800ccb6:	440b      	add	r3, r1
 800ccb8:	3308      	adds	r3, #8
 800ccba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ccbc:	4a17      	ldr	r2, [pc, #92]	; (800cd1c <inc_lock+0x118>)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	011b      	lsls	r3, r3, #4
 800ccc2:	4413      	add	r3, r2
 800ccc4:	330c      	adds	r3, #12
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d009      	beq.n	800cce4 <inc_lock+0xe0>
 800ccd0:	4a12      	ldr	r2, [pc, #72]	; (800cd1c <inc_lock+0x118>)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	011b      	lsls	r3, r3, #4
 800ccd6:	4413      	add	r3, r2
 800ccd8:	330c      	adds	r3, #12
 800ccda:	881b      	ldrh	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d001      	beq.n	800cce4 <inc_lock+0xe0>
 800cce0:	2300      	movs	r3, #0
 800cce2:	e015      	b.n	800cd10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d108      	bne.n	800ccfc <inc_lock+0xf8>
 800ccea:	4a0c      	ldr	r2, [pc, #48]	; (800cd1c <inc_lock+0x118>)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	011b      	lsls	r3, r3, #4
 800ccf0:	4413      	add	r3, r2
 800ccf2:	330c      	adds	r3, #12
 800ccf4:	881b      	ldrh	r3, [r3, #0]
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	e001      	b.n	800cd00 <inc_lock+0xfc>
 800ccfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd00:	4906      	ldr	r1, [pc, #24]	; (800cd1c <inc_lock+0x118>)
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	011b      	lsls	r3, r3, #4
 800cd06:	440b      	add	r3, r1
 800cd08:	330c      	adds	r3, #12
 800cd0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	3301      	adds	r3, #1
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3714      	adds	r7, #20
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	2000092c 	.word	0x2000092c

0800cd20 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	3b01      	subs	r3, #1
 800cd2c:	607b      	str	r3, [r7, #4]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d825      	bhi.n	800cd80 <dec_lock+0x60>
		n = Files[i].ctr;
 800cd34:	4a17      	ldr	r2, [pc, #92]	; (800cd94 <dec_lock+0x74>)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	011b      	lsls	r3, r3, #4
 800cd3a:	4413      	add	r3, r2
 800cd3c:	330c      	adds	r3, #12
 800cd3e:	881b      	ldrh	r3, [r3, #0]
 800cd40:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cd42:	89fb      	ldrh	r3, [r7, #14]
 800cd44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd48:	d101      	bne.n	800cd4e <dec_lock+0x2e>
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cd4e:	89fb      	ldrh	r3, [r7, #14]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d002      	beq.n	800cd5a <dec_lock+0x3a>
 800cd54:	89fb      	ldrh	r3, [r7, #14]
 800cd56:	3b01      	subs	r3, #1
 800cd58:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cd5a:	4a0e      	ldr	r2, [pc, #56]	; (800cd94 <dec_lock+0x74>)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	011b      	lsls	r3, r3, #4
 800cd60:	4413      	add	r3, r2
 800cd62:	330c      	adds	r3, #12
 800cd64:	89fa      	ldrh	r2, [r7, #14]
 800cd66:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cd68:	89fb      	ldrh	r3, [r7, #14]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d105      	bne.n	800cd7a <dec_lock+0x5a>
 800cd6e:	4a09      	ldr	r2, [pc, #36]	; (800cd94 <dec_lock+0x74>)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	011b      	lsls	r3, r3, #4
 800cd74:	4413      	add	r3, r2
 800cd76:	2200      	movs	r2, #0
 800cd78:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	737b      	strb	r3, [r7, #13]
 800cd7e:	e001      	b.n	800cd84 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cd80:	2302      	movs	r3, #2
 800cd82:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cd84:	7b7b      	ldrb	r3, [r7, #13]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	2000092c 	.word	0x2000092c

0800cd98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cda0:	2300      	movs	r3, #0
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	e010      	b.n	800cdc8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cda6:	4a0d      	ldr	r2, [pc, #52]	; (800cddc <clear_lock+0x44>)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	011b      	lsls	r3, r3, #4
 800cdac:	4413      	add	r3, r2
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d105      	bne.n	800cdc2 <clear_lock+0x2a>
 800cdb6:	4a09      	ldr	r2, [pc, #36]	; (800cddc <clear_lock+0x44>)
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	011b      	lsls	r3, r3, #4
 800cdbc:	4413      	add	r3, r2
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	60fb      	str	r3, [r7, #12]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2b01      	cmp	r3, #1
 800cdcc:	d9eb      	bls.n	800cda6 <clear_lock+0xe>
	}
}
 800cdce:	bf00      	nop
 800cdd0:	bf00      	nop
 800cdd2:	3714      	adds	r7, #20
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr
 800cddc:	2000092c 	.word	0x2000092c

0800cde0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b086      	sub	sp, #24
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	78db      	ldrb	r3, [r3, #3]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d034      	beq.n	800ce5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdf8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	7858      	ldrb	r0, [r3, #1]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ce04:	2301      	movs	r3, #1
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	f7ff fd0e 	bl	800c828 <disk_write>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d002      	beq.n	800ce18 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	73fb      	strb	r3, [r7, #15]
 800ce16:	e022      	b.n	800ce5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce22:	697a      	ldr	r2, [r7, #20]
 800ce24:	1ad2      	subs	r2, r2, r3
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	69db      	ldr	r3, [r3, #28]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d217      	bcs.n	800ce5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	789b      	ldrb	r3, [r3, #2]
 800ce32:	613b      	str	r3, [r7, #16]
 800ce34:	e010      	b.n	800ce58 <sync_window+0x78>
					wsect += fs->fsize;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	69db      	ldr	r3, [r3, #28]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	7858      	ldrb	r0, [r3, #1]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	697a      	ldr	r2, [r7, #20]
 800ce4e:	f7ff fceb 	bl	800c828 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	3b01      	subs	r3, #1
 800ce56:	613b      	str	r3, [r7, #16]
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d8eb      	bhi.n	800ce36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ce5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3718      	adds	r7, #24
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce7a:	683a      	ldr	r2, [r7, #0]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d01b      	beq.n	800ceb8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7ff ffad 	bl	800cde0 <sync_window>
 800ce86:	4603      	mov	r3, r0
 800ce88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ce8a:	7bfb      	ldrb	r3, [r7, #15]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d113      	bne.n	800ceb8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	7858      	ldrb	r0, [r3, #1]
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	683a      	ldr	r2, [r7, #0]
 800ce9e:	f7ff fca3 	bl	800c7e8 <disk_read>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d004      	beq.n	800ceb2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cea8:	f04f 33ff 	mov.w	r3, #4294967295
 800ceac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ceb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
	...

0800cec4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b084      	sub	sp, #16
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff ff87 	bl	800cde0 <sync_window>
 800ced2:	4603      	mov	r3, r0
 800ced4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ced6:	7bfb      	ldrb	r3, [r7, #15]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d158      	bne.n	800cf8e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	2b03      	cmp	r3, #3
 800cee2:	d148      	bne.n	800cf76 <sync_fs+0xb2>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	791b      	ldrb	r3, [r3, #4]
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d144      	bne.n	800cf76 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	3334      	adds	r3, #52	; 0x34
 800cef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cef4:	2100      	movs	r1, #0
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7ff fd77 	bl	800c9ea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	3334      	adds	r3, #52	; 0x34
 800cf00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cf04:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7ff fd06 	bl	800c91a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	3334      	adds	r3, #52	; 0x34
 800cf12:	4921      	ldr	r1, [pc, #132]	; (800cf98 <sync_fs+0xd4>)
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7ff fd1b 	bl	800c950 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	3334      	adds	r3, #52	; 0x34
 800cf1e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cf22:	491e      	ldr	r1, [pc, #120]	; (800cf9c <sync_fs+0xd8>)
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7ff fd13 	bl	800c950 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	3334      	adds	r3, #52	; 0x34
 800cf2e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	4619      	mov	r1, r3
 800cf38:	4610      	mov	r0, r2
 800cf3a:	f7ff fd09 	bl	800c950 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	3334      	adds	r3, #52	; 0x34
 800cf42:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	691b      	ldr	r3, [r3, #16]
 800cf4a:	4619      	mov	r1, r3
 800cf4c:	4610      	mov	r0, r2
 800cf4e:	f7ff fcff 	bl	800c950 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a1b      	ldr	r3, [r3, #32]
 800cf56:	1c5a      	adds	r2, r3, #1
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	7858      	ldrb	r0, [r3, #1]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	f7ff fc5c 	bl	800c828 <disk_write>
			fs->fsi_flag = 0;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2200      	movs	r2, #0
 800cf74:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	785b      	ldrb	r3, [r3, #1]
 800cf7a:	2200      	movs	r2, #0
 800cf7c:	2100      	movs	r1, #0
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f7ff fc72 	bl	800c868 <disk_ioctl>
 800cf84:	4603      	mov	r3, r0
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d001      	beq.n	800cf8e <sync_fs+0xca>
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cf8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}
 800cf98:	41615252 	.word	0x41615252
 800cf9c:	61417272 	.word	0x61417272

0800cfa0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	3b02      	subs	r3, #2
 800cfae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	3b02      	subs	r3, #2
 800cfb6:	683a      	ldr	r2, [r7, #0]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d301      	bcc.n	800cfc0 <clust2sect+0x20>
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	e008      	b.n	800cfd2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	895b      	ldrh	r3, [r3, #10]
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	fb03 f202 	mul.w	r2, r3, r2
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd0:	4413      	add	r3, r2
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	370c      	adds	r7, #12
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cfde:	b580      	push	{r7, lr}
 800cfe0:	b086      	sub	sp, #24
 800cfe2:	af00      	add	r7, sp, #0
 800cfe4:	6078      	str	r0, [r7, #4]
 800cfe6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d904      	bls.n	800cffe <get_fat+0x20>
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	699b      	ldr	r3, [r3, #24]
 800cff8:	683a      	ldr	r2, [r7, #0]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d302      	bcc.n	800d004 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cffe:	2301      	movs	r3, #1
 800d000:	617b      	str	r3, [r7, #20]
 800d002:	e08f      	b.n	800d124 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d004:	f04f 33ff 	mov.w	r3, #4294967295
 800d008:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d062      	beq.n	800d0d8 <get_fat+0xfa>
 800d012:	2b03      	cmp	r3, #3
 800d014:	dc7c      	bgt.n	800d110 <get_fat+0x132>
 800d016:	2b01      	cmp	r3, #1
 800d018:	d002      	beq.n	800d020 <get_fat+0x42>
 800d01a:	2b02      	cmp	r3, #2
 800d01c:	d042      	beq.n	800d0a4 <get_fat+0xc6>
 800d01e:	e077      	b.n	800d110 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	60fb      	str	r3, [r7, #12]
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	085b      	lsrs	r3, r3, #1
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	4413      	add	r3, r2
 800d02c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	0a5b      	lsrs	r3, r3, #9
 800d036:	4413      	add	r3, r2
 800d038:	4619      	mov	r1, r3
 800d03a:	6938      	ldr	r0, [r7, #16]
 800d03c:	f7ff ff14 	bl	800ce68 <move_window>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d167      	bne.n	800d116 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	1c5a      	adds	r2, r3, #1
 800d04a:	60fa      	str	r2, [r7, #12]
 800d04c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	4413      	add	r3, r2
 800d054:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d058:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	0a5b      	lsrs	r3, r3, #9
 800d062:	4413      	add	r3, r2
 800d064:	4619      	mov	r1, r3
 800d066:	6938      	ldr	r0, [r7, #16]
 800d068:	f7ff fefe 	bl	800ce68 <move_window>
 800d06c:	4603      	mov	r3, r0
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d153      	bne.n	800d11a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d078:	693a      	ldr	r2, [r7, #16]
 800d07a:	4413      	add	r3, r2
 800d07c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d080:	021b      	lsls	r3, r3, #8
 800d082:	461a      	mov	r2, r3
 800d084:	68bb      	ldr	r3, [r7, #8]
 800d086:	4313      	orrs	r3, r2
 800d088:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	2b00      	cmp	r3, #0
 800d092:	d002      	beq.n	800d09a <get_fat+0xbc>
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	091b      	lsrs	r3, r3, #4
 800d098:	e002      	b.n	800d0a0 <get_fat+0xc2>
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d0a0:	617b      	str	r3, [r7, #20]
			break;
 800d0a2:	e03f      	b.n	800d124 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	0a1b      	lsrs	r3, r3, #8
 800d0ac:	4413      	add	r3, r2
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6938      	ldr	r0, [r7, #16]
 800d0b2:	f7ff fed9 	bl	800ce68 <move_window>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d130      	bne.n	800d11e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	005b      	lsls	r3, r3, #1
 800d0c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d0ca:	4413      	add	r3, r2
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7ff fbe9 	bl	800c8a4 <ld_word>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	617b      	str	r3, [r7, #20]
			break;
 800d0d6:	e025      	b.n	800d124 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	09db      	lsrs	r3, r3, #7
 800d0e0:	4413      	add	r3, r2
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	6938      	ldr	r0, [r7, #16]
 800d0e6:	f7ff febf 	bl	800ce68 <move_window>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d118      	bne.n	800d122 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	009b      	lsls	r3, r3, #2
 800d0fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d0fe:	4413      	add	r3, r2
 800d100:	4618      	mov	r0, r3
 800d102:	f7ff fbe7 	bl	800c8d4 <ld_dword>
 800d106:	4603      	mov	r3, r0
 800d108:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d10c:	617b      	str	r3, [r7, #20]
			break;
 800d10e:	e009      	b.n	800d124 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d110:	2301      	movs	r3, #1
 800d112:	617b      	str	r3, [r7, #20]
 800d114:	e006      	b.n	800d124 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d116:	bf00      	nop
 800d118:	e004      	b.n	800d124 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d11a:	bf00      	nop
 800d11c:	e002      	b.n	800d124 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d11e:	bf00      	nop
 800d120:	e000      	b.n	800d124 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d122:	bf00      	nop
		}
	}

	return val;
 800d124:	697b      	ldr	r3, [r7, #20]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3718      	adds	r7, #24
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}

0800d12e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d12e:	b590      	push	{r4, r7, lr}
 800d130:	b089      	sub	sp, #36	; 0x24
 800d132:	af00      	add	r7, sp, #0
 800d134:	60f8      	str	r0, [r7, #12]
 800d136:	60b9      	str	r1, [r7, #8]
 800d138:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d13a:	2302      	movs	r3, #2
 800d13c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	2b01      	cmp	r3, #1
 800d142:	f240 80d9 	bls.w	800d2f8 <put_fat+0x1ca>
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	699b      	ldr	r3, [r3, #24]
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	f080 80d3 	bcs.w	800d2f8 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	2b03      	cmp	r3, #3
 800d158:	f000 8096 	beq.w	800d288 <put_fat+0x15a>
 800d15c:	2b03      	cmp	r3, #3
 800d15e:	f300 80cb 	bgt.w	800d2f8 <put_fat+0x1ca>
 800d162:	2b01      	cmp	r3, #1
 800d164:	d002      	beq.n	800d16c <put_fat+0x3e>
 800d166:	2b02      	cmp	r3, #2
 800d168:	d06e      	beq.n	800d248 <put_fat+0x11a>
 800d16a:	e0c5      	b.n	800d2f8 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	61bb      	str	r3, [r7, #24]
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	085b      	lsrs	r3, r3, #1
 800d174:	69ba      	ldr	r2, [r7, #24]
 800d176:	4413      	add	r3, r2
 800d178:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d17e:	69bb      	ldr	r3, [r7, #24]
 800d180:	0a5b      	lsrs	r3, r3, #9
 800d182:	4413      	add	r3, r2
 800d184:	4619      	mov	r1, r3
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f7ff fe6e 	bl	800ce68 <move_window>
 800d18c:	4603      	mov	r3, r0
 800d18e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d190:	7ffb      	ldrb	r3, [r7, #31]
 800d192:	2b00      	cmp	r3, #0
 800d194:	f040 80a9 	bne.w	800d2ea <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d19e:	69bb      	ldr	r3, [r7, #24]
 800d1a0:	1c59      	adds	r1, r3, #1
 800d1a2:	61b9      	str	r1, [r7, #24]
 800d1a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1a8:	4413      	add	r3, r2
 800d1aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d1ac:	68bb      	ldr	r3, [r7, #8]
 800d1ae:	f003 0301 	and.w	r3, r3, #1
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d00d      	beq.n	800d1d2 <put_fat+0xa4>
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	b25b      	sxtb	r3, r3
 800d1bc:	f003 030f 	and.w	r3, r3, #15
 800d1c0:	b25a      	sxtb	r2, r3
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	b2db      	uxtb	r3, r3
 800d1c6:	011b      	lsls	r3, r3, #4
 800d1c8:	b25b      	sxtb	r3, r3
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	b25b      	sxtb	r3, r3
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	e001      	b.n	800d1d6 <put_fat+0xa8>
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	697a      	ldr	r2, [r7, #20]
 800d1d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	0a5b      	lsrs	r3, r3, #9
 800d1e8:	4413      	add	r3, r2
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	68f8      	ldr	r0, [r7, #12]
 800d1ee:	f7ff fe3b 	bl	800ce68 <move_window>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1f6:	7ffb      	ldrb	r3, [r7, #31]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d178      	bne.n	800d2ee <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d208:	4413      	add	r3, r2
 800d20a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b00      	cmp	r3, #0
 800d214:	d003      	beq.n	800d21e <put_fat+0xf0>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	091b      	lsrs	r3, r3, #4
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	e00e      	b.n	800d23c <put_fat+0x10e>
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	b25b      	sxtb	r3, r3
 800d224:	f023 030f 	bic.w	r3, r3, #15
 800d228:	b25a      	sxtb	r2, r3
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	0a1b      	lsrs	r3, r3, #8
 800d22e:	b25b      	sxtb	r3, r3
 800d230:	f003 030f 	and.w	r3, r3, #15
 800d234:	b25b      	sxtb	r3, r3
 800d236:	4313      	orrs	r3, r2
 800d238:	b25b      	sxtb	r3, r3
 800d23a:	b2db      	uxtb	r3, r3
 800d23c:	697a      	ldr	r2, [r7, #20]
 800d23e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2201      	movs	r2, #1
 800d244:	70da      	strb	r2, [r3, #3]
			break;
 800d246:	e057      	b.n	800d2f8 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	0a1b      	lsrs	r3, r3, #8
 800d250:	4413      	add	r3, r2
 800d252:	4619      	mov	r1, r3
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f7ff fe07 	bl	800ce68 <move_window>
 800d25a:	4603      	mov	r3, r0
 800d25c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d25e:	7ffb      	ldrb	r3, [r7, #31]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d146      	bne.n	800d2f2 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	005b      	lsls	r3, r3, #1
 800d26e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d272:	4413      	add	r3, r2
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	b292      	uxth	r2, r2
 800d278:	4611      	mov	r1, r2
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7ff fb4d 	bl	800c91a <st_word>
			fs->wflag = 1;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2201      	movs	r2, #1
 800d284:	70da      	strb	r2, [r3, #3]
			break;
 800d286:	e037      	b.n	800d2f8 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	09db      	lsrs	r3, r3, #7
 800d290:	4413      	add	r3, r2
 800d292:	4619      	mov	r1, r3
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f7ff fde7 	bl	800ce68 <move_window>
 800d29a:	4603      	mov	r3, r0
 800d29c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d29e:	7ffb      	ldrb	r3, [r7, #31]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d128      	bne.n	800d2f6 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d2b8:	4413      	add	r3, r2
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7ff fb0a 	bl	800c8d4 <ld_dword>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d2c6:	4323      	orrs	r3, r4
 800d2c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d2d8:	4413      	add	r3, r2
 800d2da:	6879      	ldr	r1, [r7, #4]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f7ff fb37 	bl	800c950 <st_dword>
			fs->wflag = 1;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	70da      	strb	r2, [r3, #3]
			break;
 800d2e8:	e006      	b.n	800d2f8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d2ea:	bf00      	nop
 800d2ec:	e004      	b.n	800d2f8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d2ee:	bf00      	nop
 800d2f0:	e002      	b.n	800d2f8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d2f2:	bf00      	nop
 800d2f4:	e000      	b.n	800d2f8 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d2f6:	bf00      	nop
		}
	}
	return res;
 800d2f8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3724      	adds	r7, #36	; 0x24
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd90      	pop	{r4, r7, pc}

0800d302 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b088      	sub	sp, #32
 800d306:	af00      	add	r7, sp, #0
 800d308:	60f8      	str	r0, [r7, #12]
 800d30a:	60b9      	str	r1, [r7, #8]
 800d30c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d904      	bls.n	800d328 <remove_chain+0x26>
 800d31e:	69bb      	ldr	r3, [r7, #24]
 800d320:	699b      	ldr	r3, [r3, #24]
 800d322:	68ba      	ldr	r2, [r7, #8]
 800d324:	429a      	cmp	r2, r3
 800d326:	d301      	bcc.n	800d32c <remove_chain+0x2a>
 800d328:	2302      	movs	r3, #2
 800d32a:	e04b      	b.n	800d3c4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d00c      	beq.n	800d34c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d332:	f04f 32ff 	mov.w	r2, #4294967295
 800d336:	6879      	ldr	r1, [r7, #4]
 800d338:	69b8      	ldr	r0, [r7, #24]
 800d33a:	f7ff fef8 	bl	800d12e <put_fat>
 800d33e:	4603      	mov	r3, r0
 800d340:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d342:	7ffb      	ldrb	r3, [r7, #31]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <remove_chain+0x4a>
 800d348:	7ffb      	ldrb	r3, [r7, #31]
 800d34a:	e03b      	b.n	800d3c4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d34c:	68b9      	ldr	r1, [r7, #8]
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	f7ff fe45 	bl	800cfde <get_fat>
 800d354:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d031      	beq.n	800d3c0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	2b01      	cmp	r3, #1
 800d360:	d101      	bne.n	800d366 <remove_chain+0x64>
 800d362:	2302      	movs	r3, #2
 800d364:	e02e      	b.n	800d3c4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d36c:	d101      	bne.n	800d372 <remove_chain+0x70>
 800d36e:	2301      	movs	r3, #1
 800d370:	e028      	b.n	800d3c4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d372:	2200      	movs	r2, #0
 800d374:	68b9      	ldr	r1, [r7, #8]
 800d376:	69b8      	ldr	r0, [r7, #24]
 800d378:	f7ff fed9 	bl	800d12e <put_fat>
 800d37c:	4603      	mov	r3, r0
 800d37e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d380:	7ffb      	ldrb	r3, [r7, #31]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d001      	beq.n	800d38a <remove_chain+0x88>
 800d386:	7ffb      	ldrb	r3, [r7, #31]
 800d388:	e01c      	b.n	800d3c4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	695a      	ldr	r2, [r3, #20]
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	3b02      	subs	r3, #2
 800d394:	429a      	cmp	r2, r3
 800d396:	d20b      	bcs.n	800d3b0 <remove_chain+0xae>
			fs->free_clst++;
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	695b      	ldr	r3, [r3, #20]
 800d39c:	1c5a      	adds	r2, r3, #1
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800d3a2:	69bb      	ldr	r3, [r7, #24]
 800d3a4:	791b      	ldrb	r3, [r3, #4]
 800d3a6:	f043 0301 	orr.w	r3, r3, #1
 800d3aa:	b2da      	uxtb	r2, r3
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	699b      	ldr	r3, [r3, #24]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d3c6      	bcc.n	800d34c <remove_chain+0x4a>
 800d3be:	e000      	b.n	800d3c2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d3c0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3720      	adds	r7, #32
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b088      	sub	sp, #32
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d10d      	bne.n	800d3fe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d3e8:	69bb      	ldr	r3, [r7, #24]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d004      	beq.n	800d3f8 <create_chain+0x2c>
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	699b      	ldr	r3, [r3, #24]
 800d3f2:	69ba      	ldr	r2, [r7, #24]
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d31b      	bcc.n	800d430 <create_chain+0x64>
 800d3f8:	2301      	movs	r3, #1
 800d3fa:	61bb      	str	r3, [r7, #24]
 800d3fc:	e018      	b.n	800d430 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f7ff fdec 	bl	800cfde <get_fat>
 800d406:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b01      	cmp	r3, #1
 800d40c:	d801      	bhi.n	800d412 <create_chain+0x46>
 800d40e:	2301      	movs	r3, #1
 800d410:	e070      	b.n	800d4f4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d418:	d101      	bne.n	800d41e <create_chain+0x52>
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	e06a      	b.n	800d4f4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	699b      	ldr	r3, [r3, #24]
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	429a      	cmp	r2, r3
 800d426:	d201      	bcs.n	800d42c <create_chain+0x60>
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	e063      	b.n	800d4f4 <create_chain+0x128>
		scl = clst;
 800d42c:	683b      	ldr	r3, [r7, #0]
 800d42e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	3301      	adds	r3, #1
 800d438:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	699b      	ldr	r3, [r3, #24]
 800d43e:	69fa      	ldr	r2, [r7, #28]
 800d440:	429a      	cmp	r2, r3
 800d442:	d307      	bcc.n	800d454 <create_chain+0x88>
				ncl = 2;
 800d444:	2302      	movs	r3, #2
 800d446:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d448:	69fa      	ldr	r2, [r7, #28]
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	429a      	cmp	r2, r3
 800d44e:	d901      	bls.n	800d454 <create_chain+0x88>
 800d450:	2300      	movs	r3, #0
 800d452:	e04f      	b.n	800d4f4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d454:	69f9      	ldr	r1, [r7, #28]
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7ff fdc1 	bl	800cfde <get_fat>
 800d45c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00e      	beq.n	800d482 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d003      	beq.n	800d472 <create_chain+0xa6>
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d470:	d101      	bne.n	800d476 <create_chain+0xaa>
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	e03e      	b.n	800d4f4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d476:	69fa      	ldr	r2, [r7, #28]
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d1da      	bne.n	800d434 <create_chain+0x68>
 800d47e:	2300      	movs	r3, #0
 800d480:	e038      	b.n	800d4f4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d482:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d484:	f04f 32ff 	mov.w	r2, #4294967295
 800d488:	69f9      	ldr	r1, [r7, #28]
 800d48a:	6938      	ldr	r0, [r7, #16]
 800d48c:	f7ff fe4f 	bl	800d12e <put_fat>
 800d490:	4603      	mov	r3, r0
 800d492:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d494:	7dfb      	ldrb	r3, [r7, #23]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d109      	bne.n	800d4ae <create_chain+0xe2>
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d006      	beq.n	800d4ae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d4a0:	69fa      	ldr	r2, [r7, #28]
 800d4a2:	6839      	ldr	r1, [r7, #0]
 800d4a4:	6938      	ldr	r0, [r7, #16]
 800d4a6:	f7ff fe42 	bl	800d12e <put_fat>
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d4ae:	7dfb      	ldrb	r3, [r7, #23]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d116      	bne.n	800d4e2 <create_chain+0x116>
		fs->last_clst = ncl;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	69fa      	ldr	r2, [r7, #28]
 800d4b8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	695a      	ldr	r2, [r3, #20]
 800d4be:	693b      	ldr	r3, [r7, #16]
 800d4c0:	699b      	ldr	r3, [r3, #24]
 800d4c2:	3b02      	subs	r3, #2
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d804      	bhi.n	800d4d2 <create_chain+0x106>
 800d4c8:	693b      	ldr	r3, [r7, #16]
 800d4ca:	695b      	ldr	r3, [r3, #20]
 800d4cc:	1e5a      	subs	r2, r3, #1
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	791b      	ldrb	r3, [r3, #4]
 800d4d6:	f043 0301 	orr.w	r3, r3, #1
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	711a      	strb	r2, [r3, #4]
 800d4e0:	e007      	b.n	800d4f2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d4e2:	7dfb      	ldrb	r3, [r7, #23]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d102      	bne.n	800d4ee <create_chain+0x122>
 800d4e8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ec:	e000      	b.n	800d4f0 <create_chain+0x124>
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d4f2:	69fb      	ldr	r3, [r7, #28]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3720      	adds	r7, #32
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d4fc:	b480      	push	{r7}
 800d4fe:	b087      	sub	sp, #28
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d510:	3304      	adds	r3, #4
 800d512:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	0a5b      	lsrs	r3, r3, #9
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	8952      	ldrh	r2, [r2, #10]
 800d51c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d520:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	1d1a      	adds	r2, r3, #4
 800d526:	613a      	str	r2, [r7, #16]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d101      	bne.n	800d536 <clmt_clust+0x3a>
 800d532:	2300      	movs	r3, #0
 800d534:	e010      	b.n	800d558 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d536:	697a      	ldr	r2, [r7, #20]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d307      	bcc.n	800d54e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d53e:	697a      	ldr	r2, [r7, #20]
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	1ad3      	subs	r3, r2, r3
 800d544:	617b      	str	r3, [r7, #20]
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	3304      	adds	r3, #4
 800d54a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d54c:	e7e9      	b.n	800d522 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d54e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d550:	693b      	ldr	r3, [r7, #16]
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	4413      	add	r3, r2
}
 800d558:	4618      	mov	r0, r3
 800d55a:	371c      	adds	r7, #28
 800d55c:	46bd      	mov	sp, r7
 800d55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d562:	4770      	bx	lr

0800d564 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b086      	sub	sp, #24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d57a:	d204      	bcs.n	800d586 <dir_sdi+0x22>
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	f003 031f 	and.w	r3, r3, #31
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <dir_sdi+0x26>
		return FR_INT_ERR;
 800d586:	2302      	movs	r3, #2
 800d588:	e063      	b.n	800d652 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	683a      	ldr	r2, [r7, #0]
 800d58e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	689b      	ldr	r3, [r3, #8]
 800d594:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d106      	bne.n	800d5aa <dir_sdi+0x46>
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	781b      	ldrb	r3, [r3, #0]
 800d5a0:	2b02      	cmp	r3, #2
 800d5a2:	d902      	bls.n	800d5aa <dir_sdi+0x46>
		clst = fs->dirbase;
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5a8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d10c      	bne.n	800d5ca <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	095b      	lsrs	r3, r3, #5
 800d5b4:	693a      	ldr	r2, [r7, #16]
 800d5b6:	8912      	ldrh	r2, [r2, #8]
 800d5b8:	4293      	cmp	r3, r2
 800d5ba:	d301      	bcc.n	800d5c0 <dir_sdi+0x5c>
 800d5bc:	2302      	movs	r3, #2
 800d5be:	e048      	b.n	800d652 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	61da      	str	r2, [r3, #28]
 800d5c8:	e029      	b.n	800d61e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	895b      	ldrh	r3, [r3, #10]
 800d5ce:	025b      	lsls	r3, r3, #9
 800d5d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d5d2:	e019      	b.n	800d608 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6979      	ldr	r1, [r7, #20]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff fd00 	bl	800cfde <get_fat>
 800d5de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d5e0:	697b      	ldr	r3, [r7, #20]
 800d5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e6:	d101      	bne.n	800d5ec <dir_sdi+0x88>
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e032      	b.n	800d652 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d904      	bls.n	800d5fc <dir_sdi+0x98>
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	699b      	ldr	r3, [r3, #24]
 800d5f6:	697a      	ldr	r2, [r7, #20]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d301      	bcc.n	800d600 <dir_sdi+0x9c>
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	e028      	b.n	800d652 <dir_sdi+0xee>
			ofs -= csz;
 800d600:	683a      	ldr	r2, [r7, #0]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d2e1      	bcs.n	800d5d4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d610:	6979      	ldr	r1, [r7, #20]
 800d612:	6938      	ldr	r0, [r7, #16]
 800d614:	f7ff fcc4 	bl	800cfa0 <clust2sect>
 800d618:	4602      	mov	r2, r0
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	697a      	ldr	r2, [r7, #20]
 800d622:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	69db      	ldr	r3, [r3, #28]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d101      	bne.n	800d630 <dir_sdi+0xcc>
 800d62c:	2302      	movs	r3, #2
 800d62e:	e010      	b.n	800d652 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	69da      	ldr	r2, [r3, #28]
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	0a5b      	lsrs	r3, r3, #9
 800d638:	441a      	add	r2, r3
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d64a:	441a      	add	r2, r3
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3718      	adds	r7, #24
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b086      	sub	sp, #24
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
 800d662:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	3320      	adds	r3, #32
 800d670:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	69db      	ldr	r3, [r3, #28]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d003      	beq.n	800d682 <dir_next+0x28>
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d680:	d301      	bcc.n	800d686 <dir_next+0x2c>
 800d682:	2304      	movs	r3, #4
 800d684:	e0aa      	b.n	800d7dc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	f040 8098 	bne.w	800d7c2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	69db      	ldr	r3, [r3, #28]
 800d696:	1c5a      	adds	r2, r3, #1
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	699b      	ldr	r3, [r3, #24]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d10b      	bne.n	800d6bc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	095b      	lsrs	r3, r3, #5
 800d6a8:	68fa      	ldr	r2, [r7, #12]
 800d6aa:	8912      	ldrh	r2, [r2, #8]
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	f0c0 8088 	bcc.w	800d7c2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	61da      	str	r2, [r3, #28]
 800d6b8:	2304      	movs	r3, #4
 800d6ba:	e08f      	b.n	800d7dc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	0a5b      	lsrs	r3, r3, #9
 800d6c0:	68fa      	ldr	r2, [r7, #12]
 800d6c2:	8952      	ldrh	r2, [r2, #10]
 800d6c4:	3a01      	subs	r2, #1
 800d6c6:	4013      	ands	r3, r2
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d17a      	bne.n	800d7c2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	f7ff fc82 	bl	800cfde <get_fat>
 800d6da:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d801      	bhi.n	800d6e6 <dir_next+0x8c>
 800d6e2:	2302      	movs	r3, #2
 800d6e4:	e07a      	b.n	800d7dc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ec:	d101      	bne.n	800d6f2 <dir_next+0x98>
 800d6ee:	2301      	movs	r3, #1
 800d6f0:	e074      	b.n	800d7dc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	699b      	ldr	r3, [r3, #24]
 800d6f6:	697a      	ldr	r2, [r7, #20]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d358      	bcc.n	800d7ae <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d104      	bne.n	800d70c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	61da      	str	r2, [r3, #28]
 800d708:	2304      	movs	r3, #4
 800d70a:	e067      	b.n	800d7dc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	699b      	ldr	r3, [r3, #24]
 800d712:	4619      	mov	r1, r3
 800d714:	4610      	mov	r0, r2
 800d716:	f7ff fe59 	bl	800d3cc <create_chain>
 800d71a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d101      	bne.n	800d726 <dir_next+0xcc>
 800d722:	2307      	movs	r3, #7
 800d724:	e05a      	b.n	800d7dc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d101      	bne.n	800d730 <dir_next+0xd6>
 800d72c:	2302      	movs	r3, #2
 800d72e:	e055      	b.n	800d7dc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d736:	d101      	bne.n	800d73c <dir_next+0xe2>
 800d738:	2301      	movs	r3, #1
 800d73a:	e04f      	b.n	800d7dc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f7ff fb4f 	bl	800cde0 <sync_window>
 800d742:	4603      	mov	r3, r0
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <dir_next+0xf2>
 800d748:	2301      	movs	r3, #1
 800d74a:	e047      	b.n	800d7dc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	3334      	adds	r3, #52	; 0x34
 800d750:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d754:	2100      	movs	r1, #0
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff f947 	bl	800c9ea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d75c:	2300      	movs	r3, #0
 800d75e:	613b      	str	r3, [r7, #16]
 800d760:	6979      	ldr	r1, [r7, #20]
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f7ff fc1c 	bl	800cfa0 <clust2sect>
 800d768:	4602      	mov	r2, r0
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	631a      	str	r2, [r3, #48]	; 0x30
 800d76e:	e012      	b.n	800d796 <dir_next+0x13c>
						fs->wflag = 1;
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2201      	movs	r2, #1
 800d774:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	f7ff fb32 	bl	800cde0 <sync_window>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <dir_next+0x12c>
 800d782:	2301      	movs	r3, #1
 800d784:	e02a      	b.n	800d7dc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	3301      	adds	r3, #1
 800d78a:	613b      	str	r3, [r7, #16]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d790:	1c5a      	adds	r2, r3, #1
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	631a      	str	r2, [r3, #48]	; 0x30
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	895b      	ldrh	r3, [r3, #10]
 800d79a:	461a      	mov	r2, r3
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d3e6      	bcc.n	800d770 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	1ad2      	subs	r2, r2, r3
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	697a      	ldr	r2, [r7, #20]
 800d7b2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d7b4:	6979      	ldr	r1, [r7, #20]
 800d7b6:	68f8      	ldr	r0, [r7, #12]
 800d7b8:	f7ff fbf2 	bl	800cfa0 <clust2sect>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	68ba      	ldr	r2, [r7, #8]
 800d7c6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d4:	441a      	add	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b086      	sub	sp, #24
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f7ff feb4 	bl	800d564 <dir_sdi>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d800:	7dfb      	ldrb	r3, [r7, #23]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d12b      	bne.n	800d85e <dir_alloc+0x7a>
		n = 0;
 800d806:	2300      	movs	r3, #0
 800d808:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	69db      	ldr	r3, [r3, #28]
 800d80e:	4619      	mov	r1, r3
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f7ff fb29 	bl	800ce68 <move_window>
 800d816:	4603      	mov	r3, r0
 800d818:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d81a:	7dfb      	ldrb	r3, [r7, #23]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d11d      	bne.n	800d85c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6a1b      	ldr	r3, [r3, #32]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	2be5      	cmp	r3, #229	; 0xe5
 800d828:	d004      	beq.n	800d834 <dir_alloc+0x50>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	6a1b      	ldr	r3, [r3, #32]
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d107      	bne.n	800d844 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	3301      	adds	r3, #1
 800d838:	613b      	str	r3, [r7, #16]
 800d83a:	693a      	ldr	r2, [r7, #16]
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	429a      	cmp	r2, r3
 800d840:	d102      	bne.n	800d848 <dir_alloc+0x64>
 800d842:	e00c      	b.n	800d85e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d844:	2300      	movs	r3, #0
 800d846:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d848:	2101      	movs	r1, #1
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f7ff ff05 	bl	800d65a <dir_next>
 800d850:	4603      	mov	r3, r0
 800d852:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d854:	7dfb      	ldrb	r3, [r7, #23]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d0d7      	beq.n	800d80a <dir_alloc+0x26>
 800d85a:	e000      	b.n	800d85e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d85c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d85e:	7dfb      	ldrb	r3, [r7, #23]
 800d860:	2b04      	cmp	r3, #4
 800d862:	d101      	bne.n	800d868 <dir_alloc+0x84>
 800d864:	2307      	movs	r3, #7
 800d866:	75fb      	strb	r3, [r7, #23]
	return res;
 800d868:	7dfb      	ldrb	r3, [r7, #23]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b084      	sub	sp, #16
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	331a      	adds	r3, #26
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff f80f 	bl	800c8a4 <ld_word>
 800d886:	4603      	mov	r3, r0
 800d888:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	2b03      	cmp	r3, #3
 800d890:	d109      	bne.n	800d8a6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	3314      	adds	r3, #20
 800d896:	4618      	mov	r0, r3
 800d898:	f7ff f804 	bl	800c8a4 <ld_word>
 800d89c:	4603      	mov	r3, r0
 800d89e:	041b      	lsls	r3, r3, #16
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	60f8      	str	r0, [r7, #12]
 800d8b8:	60b9      	str	r1, [r7, #8]
 800d8ba:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	331a      	adds	r3, #26
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	b292      	uxth	r2, r2
 800d8c4:	4611      	mov	r1, r2
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff f827 	bl	800c91a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	2b03      	cmp	r3, #3
 800d8d2:	d109      	bne.n	800d8e8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	f103 0214 	add.w	r2, r3, #20
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	0c1b      	lsrs	r3, r3, #16
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4619      	mov	r1, r3
 800d8e2:	4610      	mov	r0, r2
 800d8e4:	f7ff f819 	bl	800c91a <st_word>
	}
}
 800d8e8:	bf00      	nop
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d8fe:	2100      	movs	r1, #0
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f7ff fe2f 	bl	800d564 <dir_sdi>
 800d906:	4603      	mov	r3, r0
 800d908:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d90a:	7dfb      	ldrb	r3, [r7, #23]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d001      	beq.n	800d914 <dir_find+0x24>
 800d910:	7dfb      	ldrb	r3, [r7, #23]
 800d912:	e03e      	b.n	800d992 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	69db      	ldr	r3, [r3, #28]
 800d918:	4619      	mov	r1, r3
 800d91a:	6938      	ldr	r0, [r7, #16]
 800d91c:	f7ff faa4 	bl	800ce68 <move_window>
 800d920:	4603      	mov	r3, r0
 800d922:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d924:	7dfb      	ldrb	r3, [r7, #23]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d12f      	bne.n	800d98a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6a1b      	ldr	r3, [r3, #32]
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d102      	bne.n	800d93e <dir_find+0x4e>
 800d938:	2304      	movs	r3, #4
 800d93a:	75fb      	strb	r3, [r7, #23]
 800d93c:	e028      	b.n	800d990 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a1b      	ldr	r3, [r3, #32]
 800d942:	330b      	adds	r3, #11
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d94a:	b2da      	uxtb	r2, r3
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6a1b      	ldr	r3, [r3, #32]
 800d954:	330b      	adds	r3, #11
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	f003 0308 	and.w	r3, r3, #8
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d10a      	bne.n	800d976 <dir_find+0x86>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a18      	ldr	r0, [r3, #32]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	3324      	adds	r3, #36	; 0x24
 800d968:	220b      	movs	r2, #11
 800d96a:	4619      	mov	r1, r3
 800d96c:	f7ff f858 	bl	800ca20 <mem_cmp>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00b      	beq.n	800d98e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d976:	2100      	movs	r1, #0
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff fe6e 	bl	800d65a <dir_next>
 800d97e:	4603      	mov	r3, r0
 800d980:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d982:	7dfb      	ldrb	r3, [r7, #23]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d0c5      	beq.n	800d914 <dir_find+0x24>
 800d988:	e002      	b.n	800d990 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d98a:	bf00      	nop
 800d98c:	e000      	b.n	800d990 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d98e:	bf00      	nop

	return res;
 800d990:	7dfb      	ldrb	r3, [r7, #23]
}
 800d992:	4618      	mov	r0, r3
 800d994:	3718      	adds	r7, #24
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}

0800d99a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d99a:	b580      	push	{r7, lr}
 800d99c:	b084      	sub	sp, #16
 800d99e:	af00      	add	r7, sp, #0
 800d9a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7ff ff1a 	bl	800d7e4 <dir_alloc>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d9b4:	7bfb      	ldrb	r3, [r7, #15]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d11c      	bne.n	800d9f4 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	69db      	ldr	r3, [r3, #28]
 800d9be:	4619      	mov	r1, r3
 800d9c0:	68b8      	ldr	r0, [r7, #8]
 800d9c2:	f7ff fa51 	bl	800ce68 <move_window>
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d9ca:	7bfb      	ldrb	r3, [r7, #15]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d111      	bne.n	800d9f4 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6a1b      	ldr	r3, [r3, #32]
 800d9d4:	2220      	movs	r2, #32
 800d9d6:	2100      	movs	r1, #0
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7ff f806 	bl	800c9ea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6a18      	ldr	r0, [r3, #32]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	3324      	adds	r3, #36	; 0x24
 800d9e6:	220b      	movs	r2, #11
 800d9e8:	4619      	mov	r1, r3
 800d9ea:	f7fe ffdd 	bl	800c9a8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	2201      	movs	r2, #1
 800d9f2:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
	...

0800da00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800da00:	b580      	push	{r7, lr}
 800da02:	b088      	sub	sp, #32
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	60fb      	str	r3, [r7, #12]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3324      	adds	r3, #36	; 0x24
 800da14:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800da16:	220b      	movs	r2, #11
 800da18:	2120      	movs	r1, #32
 800da1a:	68b8      	ldr	r0, [r7, #8]
 800da1c:	f7fe ffe5 	bl	800c9ea <mem_set>
	si = i = 0; ni = 8;
 800da20:	2300      	movs	r3, #0
 800da22:	613b      	str	r3, [r7, #16]
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	61fb      	str	r3, [r7, #28]
 800da28:	2308      	movs	r3, #8
 800da2a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800da2c:	69fb      	ldr	r3, [r7, #28]
 800da2e:	1c5a      	adds	r2, r3, #1
 800da30:	61fa      	str	r2, [r7, #28]
 800da32:	68fa      	ldr	r2, [r7, #12]
 800da34:	4413      	add	r3, r2
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800da3a:	7efb      	ldrb	r3, [r7, #27]
 800da3c:	2b20      	cmp	r3, #32
 800da3e:	d94e      	bls.n	800dade <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800da40:	7efb      	ldrb	r3, [r7, #27]
 800da42:	2b2f      	cmp	r3, #47	; 0x2f
 800da44:	d006      	beq.n	800da54 <create_name+0x54>
 800da46:	7efb      	ldrb	r3, [r7, #27]
 800da48:	2b5c      	cmp	r3, #92	; 0x5c
 800da4a:	d110      	bne.n	800da6e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800da4c:	e002      	b.n	800da54 <create_name+0x54>
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	3301      	adds	r3, #1
 800da52:	61fb      	str	r3, [r7, #28]
 800da54:	68fa      	ldr	r2, [r7, #12]
 800da56:	69fb      	ldr	r3, [r7, #28]
 800da58:	4413      	add	r3, r2
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b2f      	cmp	r3, #47	; 0x2f
 800da5e:	d0f6      	beq.n	800da4e <create_name+0x4e>
 800da60:	68fa      	ldr	r2, [r7, #12]
 800da62:	69fb      	ldr	r3, [r7, #28]
 800da64:	4413      	add	r3, r2
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	2b5c      	cmp	r3, #92	; 0x5c
 800da6a:	d0f0      	beq.n	800da4e <create_name+0x4e>
			break;
 800da6c:	e038      	b.n	800dae0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800da6e:	7efb      	ldrb	r3, [r7, #27]
 800da70:	2b2e      	cmp	r3, #46	; 0x2e
 800da72:	d003      	beq.n	800da7c <create_name+0x7c>
 800da74:	693a      	ldr	r2, [r7, #16]
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d30c      	bcc.n	800da96 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	2b0b      	cmp	r3, #11
 800da80:	d002      	beq.n	800da88 <create_name+0x88>
 800da82:	7efb      	ldrb	r3, [r7, #27]
 800da84:	2b2e      	cmp	r3, #46	; 0x2e
 800da86:	d001      	beq.n	800da8c <create_name+0x8c>
 800da88:	2306      	movs	r3, #6
 800da8a:	e044      	b.n	800db16 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800da8c:	2308      	movs	r3, #8
 800da8e:	613b      	str	r3, [r7, #16]
 800da90:	230b      	movs	r3, #11
 800da92:	617b      	str	r3, [r7, #20]
			continue;
 800da94:	e022      	b.n	800dadc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800da96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	da04      	bge.n	800daa8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800da9e:	7efb      	ldrb	r3, [r7, #27]
 800daa0:	3b80      	subs	r3, #128	; 0x80
 800daa2:	4a1f      	ldr	r2, [pc, #124]	; (800db20 <create_name+0x120>)
 800daa4:	5cd3      	ldrb	r3, [r2, r3]
 800daa6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800daa8:	7efb      	ldrb	r3, [r7, #27]
 800daaa:	4619      	mov	r1, r3
 800daac:	481d      	ldr	r0, [pc, #116]	; (800db24 <create_name+0x124>)
 800daae:	f7fe ffde 	bl	800ca6e <chk_chr>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d001      	beq.n	800dabc <create_name+0xbc>
 800dab8:	2306      	movs	r3, #6
 800daba:	e02c      	b.n	800db16 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dabc:	7efb      	ldrb	r3, [r7, #27]
 800dabe:	2b60      	cmp	r3, #96	; 0x60
 800dac0:	d905      	bls.n	800dace <create_name+0xce>
 800dac2:	7efb      	ldrb	r3, [r7, #27]
 800dac4:	2b7a      	cmp	r3, #122	; 0x7a
 800dac6:	d802      	bhi.n	800dace <create_name+0xce>
 800dac8:	7efb      	ldrb	r3, [r7, #27]
 800daca:	3b20      	subs	r3, #32
 800dacc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	613a      	str	r2, [r7, #16]
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	4413      	add	r3, r2
 800dad8:	7efa      	ldrb	r2, [r7, #27]
 800dada:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dadc:	e7a6      	b.n	800da2c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dade:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	441a      	add	r2, r3
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d101      	bne.n	800daf4 <create_name+0xf4>
 800daf0:	2306      	movs	r3, #6
 800daf2:	e010      	b.n	800db16 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	2be5      	cmp	r3, #229	; 0xe5
 800dafa:	d102      	bne.n	800db02 <create_name+0x102>
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	2205      	movs	r2, #5
 800db00:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800db02:	7efb      	ldrb	r3, [r7, #27]
 800db04:	2b20      	cmp	r3, #32
 800db06:	d801      	bhi.n	800db0c <create_name+0x10c>
 800db08:	2204      	movs	r2, #4
 800db0a:	e000      	b.n	800db0e <create_name+0x10e>
 800db0c:	2200      	movs	r2, #0
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	330b      	adds	r3, #11
 800db12:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800db14:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800db16:	4618      	mov	r0, r3
 800db18:	3720      	adds	r7, #32
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	08018d68 	.word	0x08018d68
 800db24:	080186b4 	.word	0x080186b4

0800db28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b086      	sub	sp, #24
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
 800db30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800db3c:	e002      	b.n	800db44 <follow_path+0x1c>
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	3301      	adds	r3, #1
 800db42:	603b      	str	r3, [r7, #0]
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b2f      	cmp	r3, #47	; 0x2f
 800db4a:	d0f8      	beq.n	800db3e <follow_path+0x16>
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	2b5c      	cmp	r3, #92	; 0x5c
 800db52:	d0f4      	beq.n	800db3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	2200      	movs	r2, #0
 800db58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	2b1f      	cmp	r3, #31
 800db60:	d80a      	bhi.n	800db78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2280      	movs	r2, #128	; 0x80
 800db66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800db6a:	2100      	movs	r1, #0
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f7ff fcf9 	bl	800d564 <dir_sdi>
 800db72:	4603      	mov	r3, r0
 800db74:	75fb      	strb	r3, [r7, #23]
 800db76:	e043      	b.n	800dc00 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db78:	463b      	mov	r3, r7
 800db7a:	4619      	mov	r1, r3
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7ff ff3f 	bl	800da00 <create_name>
 800db82:	4603      	mov	r3, r0
 800db84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800db86:	7dfb      	ldrb	r3, [r7, #23]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d134      	bne.n	800dbf6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7ff feaf 	bl	800d8f0 <dir_find>
 800db92:	4603      	mov	r3, r0
 800db94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d00a      	beq.n	800dbba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dba4:	7dfb      	ldrb	r3, [r7, #23]
 800dba6:	2b04      	cmp	r3, #4
 800dba8:	d127      	bne.n	800dbfa <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800dbaa:	7afb      	ldrb	r3, [r7, #11]
 800dbac:	f003 0304 	and.w	r3, r3, #4
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d122      	bne.n	800dbfa <follow_path+0xd2>
 800dbb4:	2305      	movs	r3, #5
 800dbb6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800dbb8:	e01f      	b.n	800dbfa <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dbba:	7afb      	ldrb	r3, [r7, #11]
 800dbbc:	f003 0304 	and.w	r3, r3, #4
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d11c      	bne.n	800dbfe <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	799b      	ldrb	r3, [r3, #6]
 800dbc8:	f003 0310 	and.w	r3, r3, #16
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d102      	bne.n	800dbd6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800dbd0:	2305      	movs	r3, #5
 800dbd2:	75fb      	strb	r3, [r7, #23]
 800dbd4:	e014      	b.n	800dc00 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbe4:	4413      	add	r3, r2
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	68f8      	ldr	r0, [r7, #12]
 800dbea:	f7ff fe42 	bl	800d872 <ld_clust>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dbf4:	e7c0      	b.n	800db78 <follow_path+0x50>
			if (res != FR_OK) break;
 800dbf6:	bf00      	nop
 800dbf8:	e002      	b.n	800dc00 <follow_path+0xd8>
				break;
 800dbfa:	bf00      	nop
 800dbfc:	e000      	b.n	800dc00 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800dbfe:	bf00      	nop
			}
		}
	}

	return res;
 800dc00:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3718      	adds	r7, #24
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800dc0a:	b480      	push	{r7}
 800dc0c:	b087      	sub	sp, #28
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800dc12:	f04f 33ff 	mov.w	r3, #4294967295
 800dc16:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d031      	beq.n	800dc84 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	617b      	str	r3, [r7, #20]
 800dc26:	e002      	b.n	800dc2e <get_ldnumber+0x24>
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	617b      	str	r3, [r7, #20]
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	d903      	bls.n	800dc3e <get_ldnumber+0x34>
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	2b3a      	cmp	r3, #58	; 0x3a
 800dc3c:	d1f4      	bne.n	800dc28 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	2b3a      	cmp	r3, #58	; 0x3a
 800dc44:	d11c      	bne.n	800dc80 <get_ldnumber+0x76>
			tp = *path;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	1c5a      	adds	r2, r3, #1
 800dc50:	60fa      	str	r2, [r7, #12]
 800dc52:	781b      	ldrb	r3, [r3, #0]
 800dc54:	3b30      	subs	r3, #48	; 0x30
 800dc56:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b09      	cmp	r3, #9
 800dc5c:	d80e      	bhi.n	800dc7c <get_ldnumber+0x72>
 800dc5e:	68fa      	ldr	r2, [r7, #12]
 800dc60:	697b      	ldr	r3, [r7, #20]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d10a      	bne.n	800dc7c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d107      	bne.n	800dc7c <get_ldnumber+0x72>
					vol = (int)i;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	3301      	adds	r3, #1
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	e002      	b.n	800dc86 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dc80:	2300      	movs	r3, #0
 800dc82:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dc84:	693b      	ldr	r3, [r7, #16]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	371c      	adds	r7, #28
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr
	...

0800dc94 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	70da      	strb	r2, [r3, #3]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcaa:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7ff f8da 	bl	800ce68 <move_window>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <check_fs+0x2a>
 800dcba:	2304      	movs	r3, #4
 800dcbc:	e038      	b.n	800dd30 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	3334      	adds	r3, #52	; 0x34
 800dcc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7fe fdec 	bl	800c8a4 <ld_word>
 800dccc:	4603      	mov	r3, r0
 800dcce:	461a      	mov	r2, r3
 800dcd0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d001      	beq.n	800dcdc <check_fs+0x48>
 800dcd8:	2303      	movs	r3, #3
 800dcda:	e029      	b.n	800dd30 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dce2:	2be9      	cmp	r3, #233	; 0xe9
 800dce4:	d009      	beq.n	800dcfa <check_fs+0x66>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dcec:	2beb      	cmp	r3, #235	; 0xeb
 800dcee:	d11e      	bne.n	800dd2e <check_fs+0x9a>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800dcf6:	2b90      	cmp	r3, #144	; 0x90
 800dcf8:	d119      	bne.n	800dd2e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	3334      	adds	r3, #52	; 0x34
 800dcfe:	3336      	adds	r3, #54	; 0x36
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7fe fde7 	bl	800c8d4 <ld_dword>
 800dd06:	4603      	mov	r3, r0
 800dd08:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dd0c:	4a0a      	ldr	r2, [pc, #40]	; (800dd38 <check_fs+0xa4>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d101      	bne.n	800dd16 <check_fs+0x82>
 800dd12:	2300      	movs	r3, #0
 800dd14:	e00c      	b.n	800dd30 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	3334      	adds	r3, #52	; 0x34
 800dd1a:	3352      	adds	r3, #82	; 0x52
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fe fdd9 	bl	800c8d4 <ld_dword>
 800dd22:	4603      	mov	r3, r0
 800dd24:	4a05      	ldr	r2, [pc, #20]	; (800dd3c <check_fs+0xa8>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d101      	bne.n	800dd2e <check_fs+0x9a>
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e000      	b.n	800dd30 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dd2e:	2302      	movs	r3, #2
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}
 800dd38:	00544146 	.word	0x00544146
 800dd3c:	33544146 	.word	0x33544146

0800dd40 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b096      	sub	sp, #88	; 0x58
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	2200      	movs	r2, #0
 800dd52:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f7ff ff58 	bl	800dc0a <get_ldnumber>
 800dd5a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dd5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	da01      	bge.n	800dd66 <find_volume+0x26>
 800dd62:	230b      	movs	r3, #11
 800dd64:	e235      	b.n	800e1d2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dd66:	4aa5      	ldr	r2, [pc, #660]	; (800dffc <find_volume+0x2bc>)
 800dd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd6e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d101      	bne.n	800dd7a <find_volume+0x3a>
 800dd76:	230c      	movs	r3, #12
 800dd78:	e22b      	b.n	800e1d2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800dd7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd7c:	f7fe fe92 	bl	800caa4 <lock_fs>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <find_volume+0x4a>
 800dd86:	230f      	movs	r3, #15
 800dd88:	e223      	b.n	800e1d2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd8e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dd90:	79fb      	ldrb	r3, [r7, #7]
 800dd92:	f023 0301 	bic.w	r3, r3, #1
 800dd96:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d01a      	beq.n	800ddd6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800dda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda2:	785b      	ldrb	r3, [r3, #1]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fe fcdf 	bl	800c768 <disk_status>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ddb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10c      	bne.n	800ddd6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d007      	beq.n	800ddd2 <find_volume+0x92>
 800ddc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddc6:	f003 0304 	and.w	r3, r3, #4
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d001      	beq.n	800ddd2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ddce:	230a      	movs	r3, #10
 800ddd0:	e1ff      	b.n	800e1d2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	e1fd      	b.n	800e1d2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ddd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd8:	2200      	movs	r2, #0
 800ddda:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddde:	b2da      	uxtb	r2, r3
 800dde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde6:	785b      	ldrb	r3, [r3, #1]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fe fcd7 	bl	800c79c <disk_initialize>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ddf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ddf8:	f003 0301 	and.w	r3, r3, #1
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d001      	beq.n	800de04 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800de00:	2303      	movs	r3, #3
 800de02:	e1e6      	b.n	800e1d2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800de04:	79fb      	ldrb	r3, [r7, #7]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d007      	beq.n	800de1a <find_volume+0xda>
 800de0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de0e:	f003 0304 	and.w	r3, r3, #4
 800de12:	2b00      	cmp	r3, #0
 800de14:	d001      	beq.n	800de1a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800de16:	230a      	movs	r3, #10
 800de18:	e1db      	b.n	800e1d2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800de1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de22:	f7ff ff37 	bl	800dc94 <check_fs>
 800de26:	4603      	mov	r3, r0
 800de28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800de2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de30:	2b02      	cmp	r3, #2
 800de32:	d149      	bne.n	800dec8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de34:	2300      	movs	r3, #0
 800de36:	643b      	str	r3, [r7, #64]	; 0x40
 800de38:	e01e      	b.n	800de78 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800de3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800de40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de42:	011b      	lsls	r3, r3, #4
 800de44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800de48:	4413      	add	r3, r2
 800de4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800de4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4e:	3304      	adds	r3, #4
 800de50:	781b      	ldrb	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d006      	beq.n	800de64 <find_volume+0x124>
 800de56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de58:	3308      	adds	r3, #8
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe fd3a 	bl	800c8d4 <ld_dword>
 800de60:	4602      	mov	r2, r0
 800de62:	e000      	b.n	800de66 <find_volume+0x126>
 800de64:	2200      	movs	r2, #0
 800de66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de68:	009b      	lsls	r3, r3, #2
 800de6a:	3358      	adds	r3, #88	; 0x58
 800de6c:	443b      	add	r3, r7
 800de6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800de72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de74:	3301      	adds	r3, #1
 800de76:	643b      	str	r3, [r7, #64]	; 0x40
 800de78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de7a:	2b03      	cmp	r3, #3
 800de7c:	d9dd      	bls.n	800de3a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800de7e:	2300      	movs	r3, #0
 800de80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800de82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <find_volume+0x14e>
 800de88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de8a:	3b01      	subs	r3, #1
 800de8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800de8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	3358      	adds	r3, #88	; 0x58
 800de94:	443b      	add	r3, r7
 800de96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800de9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800de9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d005      	beq.n	800deae <find_volume+0x16e>
 800dea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dea6:	f7ff fef5 	bl	800dc94 <check_fs>
 800deaa:	4603      	mov	r3, r0
 800deac:	e000      	b.n	800deb0 <find_volume+0x170>
 800deae:	2303      	movs	r3, #3
 800deb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800deb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800deb8:	2b01      	cmp	r3, #1
 800deba:	d905      	bls.n	800dec8 <find_volume+0x188>
 800debc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800debe:	3301      	adds	r3, #1
 800dec0:	643b      	str	r3, [r7, #64]	; 0x40
 800dec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d9e2      	bls.n	800de8e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800decc:	2b04      	cmp	r3, #4
 800dece:	d101      	bne.n	800ded4 <find_volume+0x194>
 800ded0:	2301      	movs	r3, #1
 800ded2:	e17e      	b.n	800e1d2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ded4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d901      	bls.n	800dee0 <find_volume+0x1a0>
 800dedc:	230d      	movs	r3, #13
 800dede:	e178      	b.n	800e1d2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee2:	3334      	adds	r3, #52	; 0x34
 800dee4:	330b      	adds	r3, #11
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fe fcdc 	bl	800c8a4 <ld_word>
 800deec:	4603      	mov	r3, r0
 800deee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800def2:	d001      	beq.n	800def8 <find_volume+0x1b8>
 800def4:	230d      	movs	r3, #13
 800def6:	e16c      	b.n	800e1d2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800def8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defa:	3334      	adds	r3, #52	; 0x34
 800defc:	3316      	adds	r3, #22
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe fcd0 	bl	800c8a4 <ld_word>
 800df04:	4603      	mov	r3, r0
 800df06:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800df08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d106      	bne.n	800df1c <find_volume+0x1dc>
 800df0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df10:	3334      	adds	r3, #52	; 0x34
 800df12:	3324      	adds	r3, #36	; 0x24
 800df14:	4618      	mov	r0, r3
 800df16:	f7fe fcdd 	bl	800c8d4 <ld_dword>
 800df1a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800df1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800df20:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800df28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	789b      	ldrb	r3, [r3, #2]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d005      	beq.n	800df40 <find_volume+0x200>
 800df34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df36:	789b      	ldrb	r3, [r3, #2]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d001      	beq.n	800df40 <find_volume+0x200>
 800df3c:	230d      	movs	r3, #13
 800df3e:	e148      	b.n	800e1d2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800df40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df42:	789b      	ldrb	r3, [r3, #2]
 800df44:	461a      	mov	r2, r3
 800df46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df48:	fb02 f303 	mul.w	r3, r2, r3
 800df4c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800df4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800df54:	b29a      	uxth	r2, r3
 800df56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800df5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df5c:	895b      	ldrh	r3, [r3, #10]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d008      	beq.n	800df74 <find_volume+0x234>
 800df62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df64:	895b      	ldrh	r3, [r3, #10]
 800df66:	461a      	mov	r2, r3
 800df68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df6a:	895b      	ldrh	r3, [r3, #10]
 800df6c:	3b01      	subs	r3, #1
 800df6e:	4013      	ands	r3, r2
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <find_volume+0x238>
 800df74:	230d      	movs	r3, #13
 800df76:	e12c      	b.n	800e1d2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800df78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7a:	3334      	adds	r3, #52	; 0x34
 800df7c:	3311      	adds	r3, #17
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fe fc90 	bl	800c8a4 <ld_word>
 800df84:	4603      	mov	r3, r0
 800df86:	461a      	mov	r2, r3
 800df88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800df8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df8e:	891b      	ldrh	r3, [r3, #8]
 800df90:	f003 030f 	and.w	r3, r3, #15
 800df94:	b29b      	uxth	r3, r3
 800df96:	2b00      	cmp	r3, #0
 800df98:	d001      	beq.n	800df9e <find_volume+0x25e>
 800df9a:	230d      	movs	r3, #13
 800df9c:	e119      	b.n	800e1d2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800df9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa0:	3334      	adds	r3, #52	; 0x34
 800dfa2:	3313      	adds	r3, #19
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7fe fc7d 	bl	800c8a4 <ld_word>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dfae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d106      	bne.n	800dfc2 <find_volume+0x282>
 800dfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb6:	3334      	adds	r3, #52	; 0x34
 800dfb8:	3320      	adds	r3, #32
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f7fe fc8a 	bl	800c8d4 <ld_dword>
 800dfc0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc4:	3334      	adds	r3, #52	; 0x34
 800dfc6:	330e      	adds	r3, #14
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fe fc6b 	bl	800c8a4 <ld_word>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dfd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <find_volume+0x29c>
 800dfd8:	230d      	movs	r3, #13
 800dfda:	e0fa      	b.n	800e1d2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dfdc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dfde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfe0:	4413      	add	r3, r2
 800dfe2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfe4:	8912      	ldrh	r2, [r2, #8]
 800dfe6:	0912      	lsrs	r2, r2, #4
 800dfe8:	b292      	uxth	r2, r2
 800dfea:	4413      	add	r3, r2
 800dfec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dfee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d204      	bcs.n	800e000 <find_volume+0x2c0>
 800dff6:	230d      	movs	r3, #13
 800dff8:	e0eb      	b.n	800e1d2 <find_volume+0x492>
 800dffa:	bf00      	nop
 800dffc:	20000924 	.word	0x20000924
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e008:	8952      	ldrh	r2, [r2, #10]
 800e00a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e00e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e012:	2b00      	cmp	r3, #0
 800e014:	d101      	bne.n	800e01a <find_volume+0x2da>
 800e016:	230d      	movs	r3, #13
 800e018:	e0db      	b.n	800e1d2 <find_volume+0x492>
		fmt = FS_FAT32;
 800e01a:	2303      	movs	r3, #3
 800e01c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800e026:	4293      	cmp	r3, r2
 800e028:	d802      	bhi.n	800e030 <find_volume+0x2f0>
 800e02a:	2302      	movs	r3, #2
 800e02c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e032:	f640 72f5 	movw	r2, #4085	; 0xff5
 800e036:	4293      	cmp	r3, r2
 800e038:	d802      	bhi.n	800e040 <find_volume+0x300>
 800e03a:	2301      	movs	r3, #1
 800e03c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	1c9a      	adds	r2, r3, #2
 800e044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e046:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e04c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e04e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e052:	441a      	add	r2, r3
 800e054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e056:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e058:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05c:	441a      	add	r2, r3
 800e05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e060:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800e062:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e066:	2b03      	cmp	r3, #3
 800e068:	d11e      	bne.n	800e0a8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e06c:	3334      	adds	r3, #52	; 0x34
 800e06e:	332a      	adds	r3, #42	; 0x2a
 800e070:	4618      	mov	r0, r3
 800e072:	f7fe fc17 	bl	800c8a4 <ld_word>
 800e076:	4603      	mov	r3, r0
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <find_volume+0x340>
 800e07c:	230d      	movs	r3, #13
 800e07e:	e0a8      	b.n	800e1d2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e082:	891b      	ldrh	r3, [r3, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d001      	beq.n	800e08c <find_volume+0x34c>
 800e088:	230d      	movs	r3, #13
 800e08a:	e0a2      	b.n	800e1d2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08e:	3334      	adds	r3, #52	; 0x34
 800e090:	332c      	adds	r3, #44	; 0x2c
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe fc1e 	bl	800c8d4 <ld_dword>
 800e098:	4602      	mov	r2, r0
 800e09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a0:	699b      	ldr	r3, [r3, #24]
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	647b      	str	r3, [r7, #68]	; 0x44
 800e0a6:	e01f      	b.n	800e0e8 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	891b      	ldrh	r3, [r3, #8]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d101      	bne.n	800e0b4 <find_volume+0x374>
 800e0b0:	230d      	movs	r3, #13
 800e0b2:	e08e      	b.n	800e1d2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0ba:	441a      	add	r2, r3
 800e0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0be:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e0c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d103      	bne.n	800e0d0 <find_volume+0x390>
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ca:	699b      	ldr	r3, [r3, #24]
 800e0cc:	005b      	lsls	r3, r3, #1
 800e0ce:	e00a      	b.n	800e0e6 <find_volume+0x3a6>
 800e0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d2:	699a      	ldr	r2, [r3, #24]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	4413      	add	r3, r2
 800e0da:	085a      	lsrs	r2, r3, #1
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0de:	699b      	ldr	r3, [r3, #24]
 800e0e0:	f003 0301 	and.w	r3, r3, #1
 800e0e4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e0e6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ea:	69da      	ldr	r2, [r3, #28]
 800e0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0ee:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e0f2:	0a5b      	lsrs	r3, r3, #9
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d201      	bcs.n	800e0fc <find_volume+0x3bc>
 800e0f8:	230d      	movs	r3, #13
 800e0fa:	e06a      	b.n	800e1d2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e102:	615a      	str	r2, [r3, #20]
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	695a      	ldr	r2, [r3, #20]
 800e108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10e:	2280      	movs	r2, #128	; 0x80
 800e110:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e112:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e116:	2b03      	cmp	r3, #3
 800e118:	d149      	bne.n	800e1ae <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11c:	3334      	adds	r3, #52	; 0x34
 800e11e:	3330      	adds	r3, #48	; 0x30
 800e120:	4618      	mov	r0, r3
 800e122:	f7fe fbbf 	bl	800c8a4 <ld_word>
 800e126:	4603      	mov	r3, r0
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d140      	bne.n	800e1ae <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e12c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e12e:	3301      	adds	r3, #1
 800e130:	4619      	mov	r1, r3
 800e132:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e134:	f7fe fe98 	bl	800ce68 <move_window>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d137      	bne.n	800e1ae <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800e13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e140:	2200      	movs	r2, #0
 800e142:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e146:	3334      	adds	r3, #52	; 0x34
 800e148:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e14c:	4618      	mov	r0, r3
 800e14e:	f7fe fba9 	bl	800c8a4 <ld_word>
 800e152:	4603      	mov	r3, r0
 800e154:	461a      	mov	r2, r3
 800e156:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d127      	bne.n	800e1ae <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e160:	3334      	adds	r3, #52	; 0x34
 800e162:	4618      	mov	r0, r3
 800e164:	f7fe fbb6 	bl	800c8d4 <ld_dword>
 800e168:	4603      	mov	r3, r0
 800e16a:	4a1c      	ldr	r2, [pc, #112]	; (800e1dc <find_volume+0x49c>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d11e      	bne.n	800e1ae <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e172:	3334      	adds	r3, #52	; 0x34
 800e174:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fe fbab 	bl	800c8d4 <ld_dword>
 800e17e:	4603      	mov	r3, r0
 800e180:	4a17      	ldr	r2, [pc, #92]	; (800e1e0 <find_volume+0x4a0>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d113      	bne.n	800e1ae <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e188:	3334      	adds	r3, #52	; 0x34
 800e18a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e18e:	4618      	mov	r0, r3
 800e190:	f7fe fba0 	bl	800c8d4 <ld_dword>
 800e194:	4602      	mov	r2, r0
 800e196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e198:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19c:	3334      	adds	r3, #52	; 0x34
 800e19e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe fb96 	bl	800c8d4 <ld_dword>
 800e1a8:	4602      	mov	r2, r0
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e1b4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e1b6:	4b0b      	ldr	r3, [pc, #44]	; (800e1e4 <find_volume+0x4a4>)
 800e1b8:	881b      	ldrh	r3, [r3, #0]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	4b09      	ldr	r3, [pc, #36]	; (800e1e4 <find_volume+0x4a4>)
 800e1c0:	801a      	strh	r2, [r3, #0]
 800e1c2:	4b08      	ldr	r3, [pc, #32]	; (800e1e4 <find_volume+0x4a4>)
 800e1c4:	881a      	ldrh	r2, [r3, #0]
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e1ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e1cc:	f7fe fde4 	bl	800cd98 <clear_lock>
#endif
	return FR_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3758      	adds	r7, #88	; 0x58
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	41615252 	.word	0x41615252
 800e1e0:	61417272 	.word	0x61417272
 800e1e4:	20000928 	.word	0x20000928

0800e1e8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e1f2:	2309      	movs	r3, #9
 800e1f4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d02e      	beq.n	800e25a <validate+0x72>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d02a      	beq.n	800e25a <validate+0x72>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d025      	beq.n	800e25a <validate+0x72>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	889a      	ldrh	r2, [r3, #4]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	88db      	ldrh	r3, [r3, #6]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d11e      	bne.n	800e25a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe fc3f 	bl	800caa4 <lock_fs>
 800e226:	4603      	mov	r3, r0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d014      	beq.n	800e256 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	785b      	ldrb	r3, [r3, #1]
 800e232:	4618      	mov	r0, r3
 800e234:	f7fe fa98 	bl	800c768 <disk_status>
 800e238:	4603      	mov	r3, r0
 800e23a:	f003 0301 	and.w	r3, r3, #1
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d102      	bne.n	800e248 <validate+0x60>
				res = FR_OK;
 800e242:	2300      	movs	r3, #0
 800e244:	73fb      	strb	r3, [r7, #15]
 800e246:	e008      	b.n	800e25a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2100      	movs	r1, #0
 800e24e:	4618      	mov	r0, r3
 800e250:	f7fe fc3e 	bl	800cad0 <unlock_fs>
 800e254:	e001      	b.n	800e25a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e256:	230f      	movs	r3, #15
 800e258:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e25a:	7bfb      	ldrb	r3, [r7, #15]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d102      	bne.n	800e266 <validate+0x7e>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	e000      	b.n	800e268 <validate+0x80>
 800e266:	2300      	movs	r3, #0
 800e268:	683a      	ldr	r2, [r7, #0]
 800e26a:	6013      	str	r3, [r2, #0]
	return res;
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
	...

0800e278 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b088      	sub	sp, #32
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	60f8      	str	r0, [r7, #12]
 800e280:	60b9      	str	r1, [r7, #8]
 800e282:	4613      	mov	r3, r2
 800e284:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e28a:	f107 0310 	add.w	r3, r7, #16
 800e28e:	4618      	mov	r0, r3
 800e290:	f7ff fcbb 	bl	800dc0a <get_ldnumber>
 800e294:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	da01      	bge.n	800e2a0 <f_mount+0x28>
 800e29c:	230b      	movs	r3, #11
 800e29e:	e048      	b.n	800e332 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e2a0:	4a26      	ldr	r2, [pc, #152]	; (800e33c <f_mount+0xc4>)
 800e2a2:	69fb      	ldr	r3, [r7, #28]
 800e2a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e2aa:	69bb      	ldr	r3, [r7, #24]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00f      	beq.n	800e2d0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e2b0:	69b8      	ldr	r0, [r7, #24]
 800e2b2:	f7fe fd71 	bl	800cd98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	68db      	ldr	r3, [r3, #12]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f000 ff6a 	bl	800f194 <ff_del_syncobj>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d101      	bne.n	800e2ca <f_mount+0x52>
 800e2c6:	2302      	movs	r3, #2
 800e2c8:	e033      	b.n	800e332 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00f      	beq.n	800e2f6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	330c      	adds	r3, #12
 800e2e4:	4619      	mov	r1, r3
 800e2e6:	4610      	mov	r0, r2
 800e2e8:	f000 ff3b 	bl	800f162 <ff_cre_syncobj>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d101      	bne.n	800e2f6 <f_mount+0x7e>
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	e01d      	b.n	800e332 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e2f6:	68fa      	ldr	r2, [r7, #12]
 800e2f8:	4910      	ldr	r1, [pc, #64]	; (800e33c <f_mount+0xc4>)
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d002      	beq.n	800e30c <f_mount+0x94>
 800e306:	79fb      	ldrb	r3, [r7, #7]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d001      	beq.n	800e310 <f_mount+0x98>
 800e30c:	2300      	movs	r3, #0
 800e30e:	e010      	b.n	800e332 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e310:	f107 010c 	add.w	r1, r7, #12
 800e314:	f107 0308 	add.w	r3, r7, #8
 800e318:	2200      	movs	r2, #0
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7ff fd10 	bl	800dd40 <find_volume>
 800e320:	4603      	mov	r3, r0
 800e322:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	7dfa      	ldrb	r2, [r7, #23]
 800e328:	4611      	mov	r1, r2
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fe fbd0 	bl	800cad0 <unlock_fs>
 800e330:	7dfb      	ldrb	r3, [r7, #23]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3720      	adds	r7, #32
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	20000924 	.word	0x20000924

0800e340 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b098      	sub	sp, #96	; 0x60
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	4613      	mov	r3, r2
 800e34c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d101      	bne.n	800e358 <f_open+0x18>
 800e354:	2309      	movs	r3, #9
 800e356:	e1b4      	b.n	800e6c2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e358:	79fb      	ldrb	r3, [r7, #7]
 800e35a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e35e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e360:	79fa      	ldrb	r2, [r7, #7]
 800e362:	f107 0110 	add.w	r1, r7, #16
 800e366:	f107 0308 	add.w	r3, r7, #8
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7ff fce8 	bl	800dd40 <find_volume>
 800e370:	4603      	mov	r3, r0
 800e372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	f040 8191 	bne.w	800e6a2 <f_open+0x362>
		dj.obj.fs = fs;
 800e380:	693b      	ldr	r3, [r7, #16]
 800e382:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e384:	68ba      	ldr	r2, [r7, #8]
 800e386:	f107 0314 	add.w	r3, r7, #20
 800e38a:	4611      	mov	r1, r2
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7ff fbcb 	bl	800db28 <follow_path>
 800e392:	4603      	mov	r3, r0
 800e394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d11a      	bne.n	800e3d6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e3a0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e3a4:	b25b      	sxtb	r3, r3
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	da03      	bge.n	800e3b2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e3aa:	2306      	movs	r3, #6
 800e3ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e3b0:	e011      	b.n	800e3d6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e3b2:	79fb      	ldrb	r3, [r7, #7]
 800e3b4:	f023 0301 	bic.w	r3, r3, #1
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	bf14      	ite	ne
 800e3bc:	2301      	movne	r3, #1
 800e3be:	2300      	moveq	r3, #0
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	f107 0314 	add.w	r3, r7, #20
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f7fe fb9c 	bl	800cb08 <chk_lock>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	f003 031c 	and.w	r3, r3, #28
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d07f      	beq.n	800e4e0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e3e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d017      	beq.n	800e418 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e3e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3ec:	2b04      	cmp	r3, #4
 800e3ee:	d10e      	bne.n	800e40e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e3f0:	f7fe fbe6 	bl	800cbc0 <enq_lock>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d006      	beq.n	800e408 <f_open+0xc8>
 800e3fa:	f107 0314 	add.w	r3, r7, #20
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7ff facb 	bl	800d99a <dir_register>
 800e404:	4603      	mov	r3, r0
 800e406:	e000      	b.n	800e40a <f_open+0xca>
 800e408:	2312      	movs	r3, #18
 800e40a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e40e:	79fb      	ldrb	r3, [r7, #7]
 800e410:	f043 0308 	orr.w	r3, r3, #8
 800e414:	71fb      	strb	r3, [r7, #7]
 800e416:	e010      	b.n	800e43a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e418:	7ebb      	ldrb	r3, [r7, #26]
 800e41a:	f003 0311 	and.w	r3, r3, #17
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <f_open+0xea>
					res = FR_DENIED;
 800e422:	2307      	movs	r3, #7
 800e424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e428:	e007      	b.n	800e43a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e42a:	79fb      	ldrb	r3, [r7, #7]
 800e42c:	f003 0304 	and.w	r3, r3, #4
 800e430:	2b00      	cmp	r3, #0
 800e432:	d002      	beq.n	800e43a <f_open+0xfa>
 800e434:	2308      	movs	r3, #8
 800e436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e43a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d168      	bne.n	800e514 <f_open+0x1d4>
 800e442:	79fb      	ldrb	r3, [r7, #7]
 800e444:	f003 0308 	and.w	r3, r3, #8
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d063      	beq.n	800e514 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e44c:	f7fd fc4a 	bl	800bce4 <get_fattime>
 800e450:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e454:	330e      	adds	r3, #14
 800e456:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e458:	4618      	mov	r0, r3
 800e45a:	f7fe fa79 	bl	800c950 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e45e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e460:	3316      	adds	r3, #22
 800e462:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e464:	4618      	mov	r0, r3
 800e466:	f7fe fa73 	bl	800c950 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e46c:	330b      	adds	r3, #11
 800e46e:	2220      	movs	r2, #32
 800e470:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e476:	4611      	mov	r1, r2
 800e478:	4618      	mov	r0, r3
 800e47a:	f7ff f9fa 	bl	800d872 <ld_clust>
 800e47e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e484:	2200      	movs	r2, #0
 800e486:	4618      	mov	r0, r3
 800e488:	f7ff fa12 	bl	800d8b0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e48e:	331c      	adds	r3, #28
 800e490:	2100      	movs	r1, #0
 800e492:	4618      	mov	r0, r3
 800e494:	f7fe fa5c 	bl	800c950 <st_dword>
					fs->wflag = 1;
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	2201      	movs	r2, #1
 800e49c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e49e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d037      	beq.n	800e514 <f_open+0x1d4>
						dw = fs->winsect;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e4aa:	f107 0314 	add.w	r3, r7, #20
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7fe ff25 	bl	800d302 <remove_chain>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e4be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d126      	bne.n	800e514 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fe fccc 	bl	800ce68 <move_window>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e4da:	3a01      	subs	r2, #1
 800e4dc:	611a      	str	r2, [r3, #16]
 800e4de:	e019      	b.n	800e514 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e4e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d115      	bne.n	800e514 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e4e8:	7ebb      	ldrb	r3, [r7, #26]
 800e4ea:	f003 0310 	and.w	r3, r3, #16
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d003      	beq.n	800e4fa <f_open+0x1ba>
					res = FR_NO_FILE;
 800e4f2:	2304      	movs	r3, #4
 800e4f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e4f8:	e00c      	b.n	800e514 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	f003 0302 	and.w	r3, r3, #2
 800e500:	2b00      	cmp	r3, #0
 800e502:	d007      	beq.n	800e514 <f_open+0x1d4>
 800e504:	7ebb      	ldrb	r3, [r7, #26]
 800e506:	f003 0301 	and.w	r3, r3, #1
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d002      	beq.n	800e514 <f_open+0x1d4>
						res = FR_DENIED;
 800e50e:	2307      	movs	r3, #7
 800e510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d128      	bne.n	800e56e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e51c:	79fb      	ldrb	r3, [r7, #7]
 800e51e:	f003 0308 	and.w	r3, r3, #8
 800e522:	2b00      	cmp	r3, #0
 800e524:	d003      	beq.n	800e52e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e526:	79fb      	ldrb	r3, [r7, #7]
 800e528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e52c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e53c:	79fb      	ldrb	r3, [r7, #7]
 800e53e:	f023 0301 	bic.w	r3, r3, #1
 800e542:	2b00      	cmp	r3, #0
 800e544:	bf14      	ite	ne
 800e546:	2301      	movne	r3, #1
 800e548:	2300      	moveq	r3, #0
 800e54a:	b2db      	uxtb	r3, r3
 800e54c:	461a      	mov	r2, r3
 800e54e:	f107 0314 	add.w	r3, r7, #20
 800e552:	4611      	mov	r1, r2
 800e554:	4618      	mov	r0, r3
 800e556:	f7fe fb55 	bl	800cc04 <inc_lock>
 800e55a:	4602      	mov	r2, r0
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	691b      	ldr	r3, [r3, #16]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d102      	bne.n	800e56e <f_open+0x22e>
 800e568:	2302      	movs	r3, #2
 800e56a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e56e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e572:	2b00      	cmp	r3, #0
 800e574:	f040 8095 	bne.w	800e6a2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e57c:	4611      	mov	r1, r2
 800e57e:	4618      	mov	r0, r3
 800e580:	f7ff f977 	bl	800d872 <ld_clust>
 800e584:	4602      	mov	r2, r0
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e58c:	331c      	adds	r3, #28
 800e58e:	4618      	mov	r0, r3
 800e590:	f7fe f9a0 	bl	800c8d4 <ld_dword>
 800e594:	4602      	mov	r2, r0
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2200      	movs	r2, #0
 800e59e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e5a0:	693a      	ldr	r2, [r7, #16]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	88da      	ldrh	r2, [r3, #6]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	79fa      	ldrb	r2, [r7, #7]
 800e5b2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	3330      	adds	r3, #48	; 0x30
 800e5ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7fe fa0a 	bl	800c9ea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e5d6:	79fb      	ldrb	r3, [r7, #7]
 800e5d8:	f003 0320 	and.w	r3, r3, #32
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d060      	beq.n	800e6a2 <f_open+0x362>
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d05c      	beq.n	800e6a2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	68da      	ldr	r2, [r3, #12]
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	895b      	ldrh	r3, [r3, #10]
 800e5f4:	025b      	lsls	r3, r3, #9
 800e5f6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	68db      	ldr	r3, [r3, #12]
 800e602:	657b      	str	r3, [r7, #84]	; 0x54
 800e604:	e016      	b.n	800e634 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7fe fce7 	bl	800cfde <get_fat>
 800e610:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e614:	2b01      	cmp	r3, #1
 800e616:	d802      	bhi.n	800e61e <f_open+0x2de>
 800e618:	2302      	movs	r3, #2
 800e61a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e61e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e624:	d102      	bne.n	800e62c <f_open+0x2ec>
 800e626:	2301      	movs	r3, #1
 800e628:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e62c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e62e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	657b      	str	r3, [r7, #84]	; 0x54
 800e634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d103      	bne.n	800e644 <f_open+0x304>
 800e63c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e63e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e640:	429a      	cmp	r2, r3
 800e642:	d8e0      	bhi.n	800e606 <f_open+0x2c6>
				}
				fp->clust = clst;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e648:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e64a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d127      	bne.n	800e6a2 <f_open+0x362>
 800e652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d022      	beq.n	800e6a2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e660:	4618      	mov	r0, r3
 800e662:	f7fe fc9d 	bl	800cfa0 <clust2sect>
 800e666:	6478      	str	r0, [r7, #68]	; 0x44
 800e668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d103      	bne.n	800e676 <f_open+0x336>
						res = FR_INT_ERR;
 800e66e:	2302      	movs	r3, #2
 800e670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e674:	e015      	b.n	800e6a2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e678:	0a5a      	lsrs	r2, r3, #9
 800e67a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e67c:	441a      	add	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	7858      	ldrb	r0, [r3, #1]
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6a1a      	ldr	r2, [r3, #32]
 800e690:	2301      	movs	r3, #1
 800e692:	f7fe f8a9 	bl	800c7e8 <disk_read>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d002      	beq.n	800e6a2 <f_open+0x362>
 800e69c:	2301      	movs	r3, #1
 800e69e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e6a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d002      	beq.n	800e6b0 <f_open+0x370>
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fe fa09 	bl	800cad0 <unlock_fs>
 800e6be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3760      	adds	r7, #96	; 0x60
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}

0800e6ca <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e6ca:	b580      	push	{r7, lr}
 800e6cc:	b08c      	sub	sp, #48	; 0x30
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	60f8      	str	r0, [r7, #12]
 800e6d2:	60b9      	str	r1, [r7, #8]
 800e6d4:	607a      	str	r2, [r7, #4]
 800e6d6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f107 0210 	add.w	r2, r7, #16
 800e6e8:	4611      	mov	r1, r2
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f7ff fd7c 	bl	800e1e8 <validate>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e6f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d107      	bne.n	800e70e <f_write+0x44>
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	7d5b      	ldrb	r3, [r3, #21]
 800e702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e706:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d009      	beq.n	800e722 <f_write+0x58>
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e714:	4611      	mov	r1, r2
 800e716:	4618      	mov	r0, r3
 800e718:	f7fe f9da 	bl	800cad0 <unlock_fs>
 800e71c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e720:	e173      	b.n	800ea0a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	7d1b      	ldrb	r3, [r3, #20]
 800e726:	f003 0302 	and.w	r3, r3, #2
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d106      	bne.n	800e73c <f_write+0x72>
 800e72e:	693b      	ldr	r3, [r7, #16]
 800e730:	2107      	movs	r1, #7
 800e732:	4618      	mov	r0, r3
 800e734:	f7fe f9cc 	bl	800cad0 <unlock_fs>
 800e738:	2307      	movs	r3, #7
 800e73a:	e166      	b.n	800ea0a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	699a      	ldr	r2, [r3, #24]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	441a      	add	r2, r3
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	699b      	ldr	r3, [r3, #24]
 800e748:	429a      	cmp	r2, r3
 800e74a:	f080 814b 	bcs.w	800e9e4 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	699b      	ldr	r3, [r3, #24]
 800e752:	43db      	mvns	r3, r3
 800e754:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e756:	e145      	b.n	800e9e4 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	699b      	ldr	r3, [r3, #24]
 800e75c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e760:	2b00      	cmp	r3, #0
 800e762:	f040 8101 	bne.w	800e968 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	699b      	ldr	r3, [r3, #24]
 800e76a:	0a5b      	lsrs	r3, r3, #9
 800e76c:	693a      	ldr	r2, [r7, #16]
 800e76e:	8952      	ldrh	r2, [r2, #10]
 800e770:	3a01      	subs	r2, #1
 800e772:	4013      	ands	r3, r2
 800e774:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d14d      	bne.n	800e818 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	699b      	ldr	r3, [r3, #24]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d10c      	bne.n	800e79e <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d11a      	bne.n	800e7c6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	2100      	movs	r1, #0
 800e794:	4618      	mov	r0, r3
 800e796:	f7fe fe19 	bl	800d3cc <create_chain>
 800e79a:	62b8      	str	r0, [r7, #40]	; 0x28
 800e79c:	e013      	b.n	800e7c6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d007      	beq.n	800e7b6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	4619      	mov	r1, r3
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	f7fe fea5 	bl	800d4fc <clmt_clust>
 800e7b2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e7b4:	e007      	b.n	800e7c6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e7b6:	68fa      	ldr	r2, [r7, #12]
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	69db      	ldr	r3, [r3, #28]
 800e7bc:	4619      	mov	r1, r3
 800e7be:	4610      	mov	r0, r2
 800e7c0:	f7fe fe04 	bl	800d3cc <create_chain>
 800e7c4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f000 8110 	beq.w	800e9ee <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d0:	2b01      	cmp	r3, #1
 800e7d2:	d109      	bne.n	800e7e8 <f_write+0x11e>
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2202      	movs	r2, #2
 800e7d8:	755a      	strb	r2, [r3, #21]
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	2102      	movs	r1, #2
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fe f976 	bl	800cad0 <unlock_fs>
 800e7e4:	2302      	movs	r3, #2
 800e7e6:	e110      	b.n	800ea0a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ee:	d109      	bne.n	800e804 <f_write+0x13a>
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	755a      	strb	r2, [r3, #21]
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	2101      	movs	r1, #1
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fe f968 	bl	800cad0 <unlock_fs>
 800e800:	2301      	movs	r3, #1
 800e802:	e102      	b.n	800ea0a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e808:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	689b      	ldr	r3, [r3, #8]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d102      	bne.n	800e818 <f_write+0x14e>
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e816:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	7d1b      	ldrb	r3, [r3, #20]
 800e81c:	b25b      	sxtb	r3, r3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	da1d      	bge.n	800e85e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	7858      	ldrb	r0, [r3, #1]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	6a1a      	ldr	r2, [r3, #32]
 800e830:	2301      	movs	r3, #1
 800e832:	f7fd fff9 	bl	800c828 <disk_write>
 800e836:	4603      	mov	r3, r0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d009      	beq.n	800e850 <f_write+0x186>
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	2201      	movs	r2, #1
 800e840:	755a      	strb	r2, [r3, #21]
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	2101      	movs	r1, #1
 800e846:	4618      	mov	r0, r3
 800e848:	f7fe f942 	bl	800cad0 <unlock_fs>
 800e84c:	2301      	movs	r3, #1
 800e84e:	e0dc      	b.n	800ea0a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	7d1b      	ldrb	r3, [r3, #20]
 800e854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e858:	b2da      	uxtb	r2, r3
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	69db      	ldr	r3, [r3, #28]
 800e864:	4619      	mov	r1, r3
 800e866:	4610      	mov	r0, r2
 800e868:	f7fe fb9a 	bl	800cfa0 <clust2sect>
 800e86c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d109      	bne.n	800e888 <f_write+0x1be>
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2202      	movs	r2, #2
 800e878:	755a      	strb	r2, [r3, #21]
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	2102      	movs	r1, #2
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fe f926 	bl	800cad0 <unlock_fs>
 800e884:	2302      	movs	r3, #2
 800e886:	e0c0      	b.n	800ea0a <f_write+0x340>
			sect += csect;
 800e888:	697a      	ldr	r2, [r7, #20]
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	4413      	add	r3, r2
 800e88e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	0a5b      	lsrs	r3, r3, #9
 800e894:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e896:	6a3b      	ldr	r3, [r7, #32]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d041      	beq.n	800e920 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e89c:	69ba      	ldr	r2, [r7, #24]
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	4413      	add	r3, r2
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	8952      	ldrh	r2, [r2, #10]
 800e8a6:	4293      	cmp	r3, r2
 800e8a8:	d905      	bls.n	800e8b6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	895b      	ldrh	r3, [r3, #10]
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	1ad3      	subs	r3, r2, r3
 800e8b4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	7858      	ldrb	r0, [r3, #1]
 800e8ba:	6a3b      	ldr	r3, [r7, #32]
 800e8bc:	697a      	ldr	r2, [r7, #20]
 800e8be:	69f9      	ldr	r1, [r7, #28]
 800e8c0:	f7fd ffb2 	bl	800c828 <disk_write>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d009      	beq.n	800e8de <f_write+0x214>
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	755a      	strb	r2, [r3, #21]
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	2101      	movs	r1, #1
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fe f8fb 	bl	800cad0 <unlock_fs>
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e095      	b.n	800ea0a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	6a1a      	ldr	r2, [r3, #32]
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	1ad3      	subs	r3, r2, r3
 800e8e6:	6a3a      	ldr	r2, [r7, #32]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d915      	bls.n	800e918 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6a1a      	ldr	r2, [r3, #32]
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	025b      	lsls	r3, r3, #9
 800e8fc:	69fa      	ldr	r2, [r7, #28]
 800e8fe:	4413      	add	r3, r2
 800e900:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e904:	4619      	mov	r1, r3
 800e906:	f7fe f84f 	bl	800c9a8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	7d1b      	ldrb	r3, [r3, #20]
 800e90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e912:	b2da      	uxtb	r2, r3
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e918:	6a3b      	ldr	r3, [r7, #32]
 800e91a:	025b      	lsls	r3, r3, #9
 800e91c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e91e:	e044      	b.n	800e9aa <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6a1b      	ldr	r3, [r3, #32]
 800e924:	697a      	ldr	r2, [r7, #20]
 800e926:	429a      	cmp	r2, r3
 800e928:	d01b      	beq.n	800e962 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	699a      	ldr	r2, [r3, #24]
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e932:	429a      	cmp	r2, r3
 800e934:	d215      	bcs.n	800e962 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	7858      	ldrb	r0, [r3, #1]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e940:	2301      	movs	r3, #1
 800e942:	697a      	ldr	r2, [r7, #20]
 800e944:	f7fd ff50 	bl	800c7e8 <disk_read>
 800e948:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d009      	beq.n	800e962 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2201      	movs	r2, #1
 800e952:	755a      	strb	r2, [r3, #21]
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	2101      	movs	r1, #1
 800e958:	4618      	mov	r0, r3
 800e95a:	f7fe f8b9 	bl	800cad0 <unlock_fs>
 800e95e:	2301      	movs	r3, #1
 800e960:	e053      	b.n	800ea0a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	697a      	ldr	r2, [r7, #20]
 800e966:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e970:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e974:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	429a      	cmp	r2, r3
 800e97c:	d901      	bls.n	800e982 <f_write+0x2b8>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	699b      	ldr	r3, [r3, #24]
 800e98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e990:	4413      	add	r3, r2
 800e992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e994:	69f9      	ldr	r1, [r7, #28]
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe f806 	bl	800c9a8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	7d1b      	ldrb	r3, [r3, #20]
 800e9a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e9a4:	b2da      	uxtb	r2, r3
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e9aa:	69fa      	ldr	r2, [r7, #28]
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ae:	4413      	add	r3, r2
 800e9b0:	61fb      	str	r3, [r7, #28]
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	699a      	ldr	r2, [r3, #24]
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b8:	441a      	add	r2, r3
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	619a      	str	r2, [r3, #24]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	68da      	ldr	r2, [r3, #12]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	bf38      	it	cc
 800e9ca:	461a      	movcc	r2, r3
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	60da      	str	r2, [r3, #12]
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	681a      	ldr	r2, [r3, #0]
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	441a      	add	r2, r3
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	601a      	str	r2, [r3, #0]
 800e9dc:	687a      	ldr	r2, [r7, #4]
 800e9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	f47f aeb6 	bne.w	800e758 <f_write+0x8e>
 800e9ec:	e000      	b.n	800e9f0 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e9ee:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	7d1b      	ldrb	r3, [r3, #20]
 800e9f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9f8:	b2da      	uxtb	r2, r3
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	2100      	movs	r1, #0
 800ea02:	4618      	mov	r0, r3
 800ea04:	f7fe f864 	bl	800cad0 <unlock_fs>
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3730      	adds	r7, #48	; 0x30
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b086      	sub	sp, #24
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f107 0208 	add.w	r2, r7, #8
 800ea20:	4611      	mov	r1, r2
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7ff fbe0 	bl	800e1e8 <validate>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea2c:	7dfb      	ldrb	r3, [r7, #23]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d16d      	bne.n	800eb0e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	7d1b      	ldrb	r3, [r3, #20]
 800ea36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d067      	beq.n	800eb0e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	7d1b      	ldrb	r3, [r3, #20]
 800ea42:	b25b      	sxtb	r3, r3
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	da1a      	bge.n	800ea7e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	7858      	ldrb	r0, [r3, #1]
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a1a      	ldr	r2, [r3, #32]
 800ea56:	2301      	movs	r3, #1
 800ea58:	f7fd fee6 	bl	800c828 <disk_write>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d006      	beq.n	800ea70 <f_sync+0x5e>
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	2101      	movs	r1, #1
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7fe f832 	bl	800cad0 <unlock_fs>
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	e055      	b.n	800eb1c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	7d1b      	ldrb	r3, [r3, #20]
 800ea74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ea7e:	f7fd f931 	bl	800bce4 <get_fattime>
 800ea82:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ea84:	68ba      	ldr	r2, [r7, #8]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	4610      	mov	r0, r2
 800ea8e:	f7fe f9eb 	bl	800ce68 <move_window>
 800ea92:	4603      	mov	r3, r0
 800ea94:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ea96:	7dfb      	ldrb	r3, [r7, #23]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d138      	bne.n	800eb0e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	330b      	adds	r3, #11
 800eaa6:	781a      	ldrb	r2, [r3, #0]
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	330b      	adds	r3, #11
 800eaac:	f042 0220 	orr.w	r2, r2, #32
 800eab0:	b2d2      	uxtb	r2, r2
 800eab2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6818      	ldr	r0, [r3, #0]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	461a      	mov	r2, r3
 800eabe:	68f9      	ldr	r1, [r7, #12]
 800eac0:	f7fe fef6 	bl	800d8b0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f103 021c 	add.w	r2, r3, #28
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	4619      	mov	r1, r3
 800ead0:	4610      	mov	r0, r2
 800ead2:	f7fd ff3d 	bl	800c950 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	3316      	adds	r3, #22
 800eada:	6939      	ldr	r1, [r7, #16]
 800eadc:	4618      	mov	r0, r3
 800eade:	f7fd ff37 	bl	800c950 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	3312      	adds	r3, #18
 800eae6:	2100      	movs	r1, #0
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fd ff16 	bl	800c91a <st_word>
					fs->wflag = 1;
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fe f9e4 	bl	800cec4 <sync_fs>
 800eafc:	4603      	mov	r3, r0
 800eafe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7d1b      	ldrb	r3, [r3, #20]
 800eb04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eb08:	b2da      	uxtb	r2, r3
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	7dfa      	ldrb	r2, [r7, #23]
 800eb12:	4611      	mov	r1, r2
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7fd ffdb 	bl	800cad0 <unlock_fs>
 800eb1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b084      	sub	sp, #16
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f7ff ff70 	bl	800ea12 <f_sync>
 800eb32:	4603      	mov	r3, r0
 800eb34:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800eb36:	7bfb      	ldrb	r3, [r7, #15]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d11d      	bne.n	800eb78 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f107 0208 	add.w	r2, r7, #8
 800eb42:	4611      	mov	r1, r2
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff fb4f 	bl	800e1e8 <validate>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eb4e:	7bfb      	ldrb	r3, [r7, #15]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d111      	bne.n	800eb78 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fe f8e1 	bl	800cd20 <dec_lock>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800eb62:	7bfb      	ldrb	r3, [r7, #15]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d102      	bne.n	800eb6e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800eb6e:	68bb      	ldr	r3, [r7, #8]
 800eb70:	2100      	movs	r1, #0
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7fd ffac 	bl	800cad0 <unlock_fs>
#endif
		}
	}
	return res;
 800eb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b084      	sub	sp, #16
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
 800eb8a:	460b      	mov	r3, r1
 800eb8c:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800eb8e:	78fb      	ldrb	r3, [r7, #3]
 800eb90:	2b0a      	cmp	r3, #10
 800eb92:	d103      	bne.n	800eb9c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800eb94:	210d      	movs	r1, #13
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f7ff fff3 	bl	800eb82 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	db25      	blt.n	800ebf4 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	1c5a      	adds	r2, r3, #1
 800ebac:	60fa      	str	r2, [r7, #12]
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	4413      	add	r3, r2
 800ebb2:	78fa      	ldrb	r2, [r7, #3]
 800ebb4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2b3c      	cmp	r3, #60	; 0x3c
 800ebba:	dd12      	ble.n	800ebe2 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	6818      	ldr	r0, [r3, #0]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	f103 010c 	add.w	r1, r3, #12
 800ebc6:	68fa      	ldr	r2, [r7, #12]
 800ebc8:	f107 0308 	add.w	r3, r7, #8
 800ebcc:	f7ff fd7d 	bl	800e6ca <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ebd0:	68ba      	ldr	r2, [r7, #8]
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	429a      	cmp	r2, r3
 800ebd6:	d101      	bne.n	800ebdc <putc_bfd+0x5a>
 800ebd8:	2300      	movs	r3, #0
 800ebda:	e001      	b.n	800ebe0 <putc_bfd+0x5e>
 800ebdc:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe0:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	68fa      	ldr	r2, [r7, #12]
 800ebe6:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	1c5a      	adds	r2, r3, #1
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	609a      	str	r2, [r3, #8]
 800ebf2:	e000      	b.n	800ebf6 <putc_bfd+0x74>
	if (i < 0) return;
 800ebf4:	bf00      	nop
}
 800ebf6:	3710      	adds	r7, #16
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}

0800ebfc <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	db16      	blt.n	800ec3a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	6818      	ldr	r0, [r3, #0]
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f103 010c 	add.w	r1, r3, #12
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	f107 030c 	add.w	r3, r7, #12
 800ec20:	f7ff fd53 	bl	800e6ca <f_write>
 800ec24:	4603      	mov	r3, r0
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d107      	bne.n	800ec3a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	4293      	cmp	r3, r2
 800ec32:	d102      	bne.n	800ec3a <putc_flush+0x3e>
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	e001      	b.n	800ec3e <putc_flush+0x42>
	return EOF;
 800ec3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ec3e:	4618      	mov	r0, r3
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800ec46:	b480      	push	{r7}
 800ec48:	b083      	sub	sp, #12
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
 800ec4e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	605a      	str	r2, [r3, #4]
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	685a      	ldr	r2, [r3, #4]
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	609a      	str	r2, [r3, #8]
}
 800ec64:	bf00      	nop
 800ec66:	370c      	adds	r7, #12
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6e:	4770      	bx	lr

0800ec70 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800ec70:	b40e      	push	{r1, r2, r3}
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b0a7      	sub	sp, #156	; 0x9c
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800ec7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ec7e:	6879      	ldr	r1, [r7, #4]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7ff ffe0 	bl	800ec46 <putc_init>

	va_start(arp, fmt);
 800ec86:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ec8a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800ec8c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ec90:	1c5a      	adds	r2, r3, #1
 800ec92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ec96:	781b      	ldrb	r3, [r3, #0]
 800ec98:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800ec9c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f000 81f2 	beq.w	800f08a <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800eca6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ecaa:	2b25      	cmp	r3, #37	; 0x25
 800ecac:	d008      	beq.n	800ecc0 <f_printf+0x50>
			putc_bfd(&pb, c);
 800ecae:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800ecb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ecb6:	4611      	mov	r1, r2
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f7ff ff62 	bl	800eb82 <putc_bfd>
			continue;
 800ecbe:	e1e3      	b.n	800f088 <f_printf+0x418>
		}
		w = f = 0;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800eccc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ecd0:	1c5a      	adds	r2, r3, #1
 800ecd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800ecdc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ece0:	2b30      	cmp	r3, #48	; 0x30
 800ece2:	d10b      	bne.n	800ecfc <f_printf+0x8c>
			f = 1; c = *fmt++;
 800ece4:	2301      	movs	r3, #1
 800ece6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ecea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800ecfa:	e024      	b.n	800ed46 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800ecfc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ed00:	2b2d      	cmp	r3, #45	; 0x2d
 800ed02:	d120      	bne.n	800ed46 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800ed04:	2302      	movs	r3, #2
 800ed06:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ed0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ed0e:	1c5a      	adds	r2, r3, #1
 800ed10:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800ed1a:	e014      	b.n	800ed46 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800ed1c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ed20:	4613      	mov	r3, r2
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	4413      	add	r3, r2
 800ed26:	005b      	lsls	r3, r3, #1
 800ed28:	461a      	mov	r2, r3
 800ed2a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ed2e:	4413      	add	r3, r2
 800ed30:	3b30      	subs	r3, #48	; 0x30
 800ed32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800ed36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ed3a:	1c5a      	adds	r2, r3, #1
 800ed3c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ed40:	781b      	ldrb	r3, [r3, #0]
 800ed42:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800ed46:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ed4a:	2b2f      	cmp	r3, #47	; 0x2f
 800ed4c:	d903      	bls.n	800ed56 <f_printf+0xe6>
 800ed4e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ed52:	2b39      	cmp	r3, #57	; 0x39
 800ed54:	d9e2      	bls.n	800ed1c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800ed56:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ed5a:	2b6c      	cmp	r3, #108	; 0x6c
 800ed5c:	d003      	beq.n	800ed66 <f_printf+0xf6>
 800ed5e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ed62:	2b4c      	cmp	r3, #76	; 0x4c
 800ed64:	d10d      	bne.n	800ed82 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800ed66:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ed6a:	f043 0304 	orr.w	r3, r3, #4
 800ed6e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800ed72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800ed82:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f000 8181 	beq.w	800f08e <f_printf+0x41e>
		d = c;
 800ed8c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ed90:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800ed94:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ed98:	2b60      	cmp	r3, #96	; 0x60
 800ed9a:	d908      	bls.n	800edae <f_printf+0x13e>
 800ed9c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800eda0:	2b7a      	cmp	r3, #122	; 0x7a
 800eda2:	d804      	bhi.n	800edae <f_printf+0x13e>
 800eda4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800eda8:	3b20      	subs	r3, #32
 800edaa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800edae:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800edb2:	3b42      	subs	r3, #66	; 0x42
 800edb4:	2b16      	cmp	r3, #22
 800edb6:	f200 8098 	bhi.w	800eeea <f_printf+0x27a>
 800edba:	a201      	add	r2, pc, #4	; (adr r2, 800edc0 <f_printf+0x150>)
 800edbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc0:	0800eecb 	.word	0x0800eecb
 800edc4:	0800eeb3 	.word	0x0800eeb3
 800edc8:	0800eedb 	.word	0x0800eedb
 800edcc:	0800eeeb 	.word	0x0800eeeb
 800edd0:	0800eeeb 	.word	0x0800eeeb
 800edd4:	0800eeeb 	.word	0x0800eeeb
 800edd8:	0800eeeb 	.word	0x0800eeeb
 800eddc:	0800eeeb 	.word	0x0800eeeb
 800ede0:	0800eeeb 	.word	0x0800eeeb
 800ede4:	0800eeeb 	.word	0x0800eeeb
 800ede8:	0800eeeb 	.word	0x0800eeeb
 800edec:	0800eeeb 	.word	0x0800eeeb
 800edf0:	0800eeeb 	.word	0x0800eeeb
 800edf4:	0800eed3 	.word	0x0800eed3
 800edf8:	0800eeeb 	.word	0x0800eeeb
 800edfc:	0800eeeb 	.word	0x0800eeeb
 800ee00:	0800eeeb 	.word	0x0800eeeb
 800ee04:	0800ee1d 	.word	0x0800ee1d
 800ee08:	0800eeeb 	.word	0x0800eeeb
 800ee0c:	0800eedb 	.word	0x0800eedb
 800ee10:	0800eeeb 	.word	0x0800eeeb
 800ee14:	0800eeeb 	.word	0x0800eeeb
 800ee18:	0800eee3 	.word	0x0800eee3
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800ee1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ee1e:	1d1a      	adds	r2, r3, #4
 800ee20:	67ba      	str	r2, [r7, #120]	; 0x78
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800ee26:	2300      	movs	r3, #0
 800ee28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ee2c:	e004      	b.n	800ee38 <f_printf+0x1c8>
 800ee2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee32:	3301      	adds	r3, #1
 800ee34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ee38:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ee3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee3e:	4413      	add	r3, r2
 800ee40:	781b      	ldrb	r3, [r3, #0]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d1f3      	bne.n	800ee2e <f_printf+0x1be>
			if (!(f & 2)) {
 800ee46:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ee4a:	f003 0302 	and.w	r3, r3, #2
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d11a      	bne.n	800ee88 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800ee52:	e005      	b.n	800ee60 <f_printf+0x1f0>
 800ee54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee58:	2120      	movs	r1, #32
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff fe91 	bl	800eb82 <putc_bfd>
 800ee60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ee6a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d8f0      	bhi.n	800ee54 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800ee72:	e009      	b.n	800ee88 <f_printf+0x218>
 800ee74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee76:	1c5a      	adds	r2, r3, #1
 800ee78:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ee7a:	781a      	ldrb	r2, [r3, #0]
 800ee7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee80:	4611      	mov	r1, r2
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7ff fe7d 	bl	800eb82 <putc_bfd>
 800ee88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1f1      	bne.n	800ee74 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800ee90:	e005      	b.n	800ee9e <f_printf+0x22e>
 800ee92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ee96:	2120      	movs	r1, #32
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7ff fe72 	bl	800eb82 <putc_bfd>
 800ee9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800eea2:	1c5a      	adds	r2, r3, #1
 800eea4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800eea8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d8f0      	bhi.n	800ee92 <f_printf+0x222>
			continue;
 800eeb0:	e0ea      	b.n	800f088 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800eeb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eeb4:	1d1a      	adds	r2, r3, #4
 800eeb6:	67ba      	str	r2, [r7, #120]	; 0x78
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	b2da      	uxtb	r2, r3
 800eebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eec0:	4611      	mov	r1, r2
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff fe5d 	bl	800eb82 <putc_bfd>
 800eec8:	e0de      	b.n	800f088 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800eeca:	2302      	movs	r3, #2
 800eecc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800eed0:	e014      	b.n	800eefc <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800eed2:	2308      	movs	r3, #8
 800eed4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800eed8:	e010      	b.n	800eefc <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800eeda:	230a      	movs	r3, #10
 800eedc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800eee0:	e00c      	b.n	800eefc <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800eee2:	2310      	movs	r3, #16
 800eee4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800eee8:	e008      	b.n	800eefc <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800eeea:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800eeee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800eef2:	4611      	mov	r1, r2
 800eef4:	4618      	mov	r0, r3
 800eef6:	f7ff fe44 	bl	800eb82 <putc_bfd>
 800eefa:	e0c5      	b.n	800f088 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800eefc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ef00:	f003 0304 	and.w	r3, r3, #4
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d004      	beq.n	800ef12 <f_printf+0x2a2>
 800ef08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef0a:	1d1a      	adds	r2, r3, #4
 800ef0c:	67ba      	str	r2, [r7, #120]	; 0x78
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	e00c      	b.n	800ef2c <f_printf+0x2bc>
 800ef12:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef16:	2b44      	cmp	r3, #68	; 0x44
 800ef18:	d104      	bne.n	800ef24 <f_printf+0x2b4>
 800ef1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef1c:	1d1a      	adds	r2, r3, #4
 800ef1e:	67ba      	str	r2, [r7, #120]	; 0x78
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	e003      	b.n	800ef2c <f_printf+0x2bc>
 800ef24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef26:	1d1a      	adds	r2, r3, #4
 800ef28:	67ba      	str	r2, [r7, #120]	; 0x78
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800ef30:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef34:	2b44      	cmp	r3, #68	; 0x44
 800ef36:	d10e      	bne.n	800ef56 <f_printf+0x2e6>
 800ef38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	da0a      	bge.n	800ef56 <f_printf+0x2e6>
			v = 0 - v;
 800ef40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef44:	425b      	negs	r3, r3
 800ef46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800ef4a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ef4e:	f043 0308 	orr.w	r3, r3, #8
 800ef52:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800ef56:	2300      	movs	r3, #0
 800ef58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800ef5c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800ef60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ef64:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef68:	fb01 f202 	mul.w	r2, r1, r2
 800ef6c:	1a9b      	subs	r3, r3, r2
 800ef6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800ef72:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800ef76:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800ef7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800ef82:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef86:	2b09      	cmp	r3, #9
 800ef88:	d90b      	bls.n	800efa2 <f_printf+0x332>
 800ef8a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800ef8e:	2b78      	cmp	r3, #120	; 0x78
 800ef90:	d101      	bne.n	800ef96 <f_printf+0x326>
 800ef92:	2227      	movs	r2, #39	; 0x27
 800ef94:	e000      	b.n	800ef98 <f_printf+0x328>
 800ef96:	2207      	movs	r2, #7
 800ef98:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800ef9c:	4413      	add	r3, r2
 800ef9e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800efa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800efa6:	1c5a      	adds	r2, r3, #1
 800efa8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800efac:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800efb0:	3230      	adds	r2, #48	; 0x30
 800efb2:	b2d2      	uxtb	r2, r2
 800efb4:	3398      	adds	r3, #152	; 0x98
 800efb6:	443b      	add	r3, r7
 800efb8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800efbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d003      	beq.n	800efcc <f_printf+0x35c>
 800efc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800efc8:	2b1f      	cmp	r3, #31
 800efca:	d9c7      	bls.n	800ef5c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800efcc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800efd0:	f003 0308 	and.w	r3, r3, #8
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d009      	beq.n	800efec <f_printf+0x37c>
 800efd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800efdc:	1c5a      	adds	r2, r3, #1
 800efde:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800efe2:	3398      	adds	r3, #152	; 0x98
 800efe4:	443b      	add	r3, r7
 800efe6:	222d      	movs	r2, #45	; 0x2d
 800efe8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800efec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800eff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800eff4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800eff8:	f003 0301 	and.w	r3, r3, #1
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <f_printf+0x394>
 800f000:	2330      	movs	r3, #48	; 0x30
 800f002:	e000      	b.n	800f006 <f_printf+0x396>
 800f004:	2320      	movs	r3, #32
 800f006:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800f00a:	e007      	b.n	800f01c <f_printf+0x3ac>
 800f00c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800f010:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f014:	4611      	mov	r1, r2
 800f016:	4618      	mov	r0, r3
 800f018:	f7ff fdb3 	bl	800eb82 <putc_bfd>
 800f01c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f020:	f003 0302 	and.w	r3, r3, #2
 800f024:	2b00      	cmp	r3, #0
 800f026:	d108      	bne.n	800f03a <f_printf+0x3ca>
 800f028:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f02c:	1c5a      	adds	r2, r3, #1
 800f02e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f032:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f036:	429a      	cmp	r2, r3
 800f038:	d8e8      	bhi.n	800f00c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800f03a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f03e:	3b01      	subs	r3, #1
 800f040:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f044:	f107 020c 	add.w	r2, r7, #12
 800f048:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f04c:	4413      	add	r3, r2
 800f04e:	781a      	ldrb	r2, [r3, #0]
 800f050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f7ff fd93 	bl	800eb82 <putc_bfd>
		} while (i);
 800f05c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f060:	2b00      	cmp	r3, #0
 800f062:	d1ea      	bne.n	800f03a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800f064:	e007      	b.n	800f076 <f_printf+0x406>
 800f066:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800f06a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f06e:	4611      	mov	r1, r2
 800f070:	4618      	mov	r0, r3
 800f072:	f7ff fd86 	bl	800eb82 <putc_bfd>
 800f076:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f07a:	1c5a      	adds	r2, r3, #1
 800f07c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800f080:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f084:	429a      	cmp	r2, r3
 800f086:	d8ee      	bhi.n	800f066 <f_printf+0x3f6>
		c = *fmt++;
 800f088:	e600      	b.n	800ec8c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800f08a:	bf00      	nop
 800f08c:	e000      	b.n	800f090 <f_printf+0x420>
		if (!c) break;
 800f08e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800f090:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f094:	4618      	mov	r0, r3
 800f096:	f7ff fdb1 	bl	800ebfc <putc_flush>
 800f09a:	4603      	mov	r3, r0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	379c      	adds	r7, #156	; 0x9c
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f0a6:	b003      	add	sp, #12
 800f0a8:	4770      	bx	lr
 800f0aa:	bf00      	nop

0800f0ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b087      	sub	sp, #28
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f0c2:	4b1f      	ldr	r3, [pc, #124]	; (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0c4:	7a5b      	ldrb	r3, [r3, #9]
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d131      	bne.n	800f130 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f0cc:	4b1c      	ldr	r3, [pc, #112]	; (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0ce:	7a5b      	ldrb	r3, [r3, #9]
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	4b1a      	ldr	r3, [pc, #104]	; (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f0da:	4b19      	ldr	r3, [pc, #100]	; (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0dc:	7a5b      	ldrb	r3, [r3, #9]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	4a17      	ldr	r2, [pc, #92]	; (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	4413      	add	r3, r2
 800f0e6:	68fa      	ldr	r2, [r7, #12]
 800f0e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f0ea:	4b15      	ldr	r3, [pc, #84]	; (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0ec:	7a5b      	ldrb	r3, [r3, #9]
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	4b13      	ldr	r3, [pc, #76]	; (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0f4:	4413      	add	r3, r2
 800f0f6:	79fa      	ldrb	r2, [r7, #7]
 800f0f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f0fa:	4b11      	ldr	r3, [pc, #68]	; (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0fc:	7a5b      	ldrb	r3, [r3, #9]
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	1c5a      	adds	r2, r3, #1
 800f102:	b2d1      	uxtb	r1, r2
 800f104:	4a0e      	ldr	r2, [pc, #56]	; (800f140 <FATFS_LinkDriverEx+0x94>)
 800f106:	7251      	strb	r1, [r2, #9]
 800f108:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f10a:	7dbb      	ldrb	r3, [r7, #22]
 800f10c:	3330      	adds	r3, #48	; 0x30
 800f10e:	b2da      	uxtb	r2, r3
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	3301      	adds	r3, #1
 800f118:	223a      	movs	r2, #58	; 0x3a
 800f11a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	3302      	adds	r3, #2
 800f120:	222f      	movs	r2, #47	; 0x2f
 800f122:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	3303      	adds	r3, #3
 800f128:	2200      	movs	r2, #0
 800f12a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f12c:	2300      	movs	r3, #0
 800f12e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f130:	7dfb      	ldrb	r3, [r7, #23]
}
 800f132:	4618      	mov	r0, r3
 800f134:	371c      	adds	r7, #28
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop
 800f140:	2000094c 	.word	0x2000094c

0800f144 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f14e:	2200      	movs	r2, #0
 800f150:	6839      	ldr	r1, [r7, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f7ff ffaa 	bl	800f0ac <FATFS_LinkDriverEx>
 800f158:	4603      	mov	r3, r0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3708      	adds	r7, #8
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}

0800f162 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f162:	b580      	push	{r7, lr}
 800f164:	b084      	sub	sp, #16
 800f166:	af00      	add	r7, sp, #0
 800f168:	4603      	mov	r3, r0
 800f16a:	6039      	str	r1, [r7, #0]
 800f16c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800f16e:	2000      	movs	r0, #0
 800f170:	f000 fbae 	bl	800f8d0 <osMutexNew>
 800f174:	4602      	mov	r2, r0
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	bf14      	ite	ne
 800f182:	2301      	movne	r3, #1
 800f184:	2300      	moveq	r3, #0
 800f186:	b2db      	uxtb	r3, r3
 800f188:	60fb      	str	r3, [r7, #12]

    return ret;
 800f18a:	68fb      	ldr	r3, [r7, #12]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3710      	adds	r7, #16
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800f19c:	6878      	ldr	r0, [r7, #4]
 800f19e:	f000 fca5 	bl	800faec <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800f1a2:	2301      	movs	r3, #1
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b084      	sub	sp, #16
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f1b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 fc0d 	bl	800f9dc <osMutexAcquire>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d101      	bne.n	800f1cc <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b082      	sub	sp, #8
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 fc47 	bl	800fa72 <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800f1e4:	bf00      	nop
 800f1e6:	3708      	adds	r7, #8
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <__NVIC_SetPriority>:
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	6039      	str	r1, [r7, #0]
 800f1f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f1f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	db0a      	blt.n	800f216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	b2da      	uxtb	r2, r3
 800f204:	490c      	ldr	r1, [pc, #48]	; (800f238 <__NVIC_SetPriority+0x4c>)
 800f206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f20a:	0112      	lsls	r2, r2, #4
 800f20c:	b2d2      	uxtb	r2, r2
 800f20e:	440b      	add	r3, r1
 800f210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f214:	e00a      	b.n	800f22c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	b2da      	uxtb	r2, r3
 800f21a:	4908      	ldr	r1, [pc, #32]	; (800f23c <__NVIC_SetPriority+0x50>)
 800f21c:	79fb      	ldrb	r3, [r7, #7]
 800f21e:	f003 030f 	and.w	r3, r3, #15
 800f222:	3b04      	subs	r3, #4
 800f224:	0112      	lsls	r2, r2, #4
 800f226:	b2d2      	uxtb	r2, r2
 800f228:	440b      	add	r3, r1
 800f22a:	761a      	strb	r2, [r3, #24]
}
 800f22c:	bf00      	nop
 800f22e:	370c      	adds	r7, #12
 800f230:	46bd      	mov	sp, r7
 800f232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f236:	4770      	bx	lr
 800f238:	e000e100 	.word	0xe000e100
 800f23c:	e000ed00 	.word	0xe000ed00

0800f240 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f244:	4b05      	ldr	r3, [pc, #20]	; (800f25c <SysTick_Handler+0x1c>)
 800f246:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f248:	f002 ff5c 	bl	8012104 <xTaskGetSchedulerState>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d001      	beq.n	800f256 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f252:	f004 f901 	bl	8013458 <xPortSysTickHandler>
  }
}
 800f256:	bf00      	nop
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	e000e010 	.word	0xe000e010

0800f260 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f260:	b580      	push	{r7, lr}
 800f262:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f264:	2100      	movs	r1, #0
 800f266:	f06f 0004 	mvn.w	r0, #4
 800f26a:	f7ff ffbf 	bl	800f1ec <__NVIC_SetPriority>
#endif
}
 800f26e:	bf00      	nop
 800f270:	bd80      	pop	{r7, pc}
	...

0800f274 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f27a:	f3ef 8305 	mrs	r3, IPSR
 800f27e:	603b      	str	r3, [r7, #0]
  return(result);
 800f280:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f282:	2b00      	cmp	r3, #0
 800f284:	d003      	beq.n	800f28e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f286:	f06f 0305 	mvn.w	r3, #5
 800f28a:	607b      	str	r3, [r7, #4]
 800f28c:	e00c      	b.n	800f2a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f28e:	4b0a      	ldr	r3, [pc, #40]	; (800f2b8 <osKernelInitialize+0x44>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d105      	bne.n	800f2a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f296:	4b08      	ldr	r3, [pc, #32]	; (800f2b8 <osKernelInitialize+0x44>)
 800f298:	2201      	movs	r2, #1
 800f29a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f29c:	2300      	movs	r3, #0
 800f29e:	607b      	str	r3, [r7, #4]
 800f2a0:	e002      	b.n	800f2a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f2a8:	687b      	ldr	r3, [r7, #4]
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	370c      	adds	r7, #12
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr
 800f2b6:	bf00      	nop
 800f2b8:	20000958 	.word	0x20000958

0800f2bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2c2:	f3ef 8305 	mrs	r3, IPSR
 800f2c6:	603b      	str	r3, [r7, #0]
  return(result);
 800f2c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d003      	beq.n	800f2d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800f2ce:	f06f 0305 	mvn.w	r3, #5
 800f2d2:	607b      	str	r3, [r7, #4]
 800f2d4:	e010      	b.n	800f2f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f2d6:	4b0b      	ldr	r3, [pc, #44]	; (800f304 <osKernelStart+0x48>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d109      	bne.n	800f2f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f2de:	f7ff ffbf 	bl	800f260 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f2e2:	4b08      	ldr	r3, [pc, #32]	; (800f304 <osKernelStart+0x48>)
 800f2e4:	2202      	movs	r2, #2
 800f2e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f2e8:	f002 fa8e 	bl	8011808 <vTaskStartScheduler>
      stat = osOK;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	607b      	str	r3, [r7, #4]
 800f2f0:	e002      	b.n	800f2f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f2f8:	687b      	ldr	r3, [r7, #4]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3708      	adds	r7, #8
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	20000958 	.word	0x20000958

0800f308 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800f308:	b580      	push	{r7, lr}
 800f30a:	b082      	sub	sp, #8
 800f30c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f30e:	f3ef 8305 	mrs	r3, IPSR
 800f312:	603b      	str	r3, [r7, #0]
  return(result);
 800f314:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800f316:	2b00      	cmp	r3, #0
 800f318:	d003      	beq.n	800f322 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800f31a:	f002 fba1 	bl	8011a60 <xTaskGetTickCountFromISR>
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	e002      	b.n	800f328 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800f322:	f002 fb8d 	bl	8011a40 <xTaskGetTickCount>
 800f326:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800f328:	687b      	ldr	r3, [r7, #4]
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3708      	adds	r7, #8
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}

0800f332 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800f332:	b480      	push	{r7}
 800f334:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800f336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f344:	b580      	push	{r7, lr}
 800f346:	b08e      	sub	sp, #56	; 0x38
 800f348:	af04      	add	r7, sp, #16
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f350:	2300      	movs	r3, #0
 800f352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f354:	f3ef 8305 	mrs	r3, IPSR
 800f358:	617b      	str	r3, [r7, #20]
  return(result);
 800f35a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d17e      	bne.n	800f45e <osThreadNew+0x11a>
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d07b      	beq.n	800f45e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f366:	2380      	movs	r3, #128	; 0x80
 800f368:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f36a:	2318      	movs	r3, #24
 800f36c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f36e:	2300      	movs	r3, #0
 800f370:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800f372:	f04f 33ff 	mov.w	r3, #4294967295
 800f376:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d045      	beq.n	800f40a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d002      	beq.n	800f38c <osThreadNew+0x48>
        name = attr->name;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	699b      	ldr	r3, [r3, #24]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d002      	beq.n	800f39a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	699b      	ldr	r3, [r3, #24]
 800f398:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d008      	beq.n	800f3b2 <osThreadNew+0x6e>
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	2b38      	cmp	r3, #56	; 0x38
 800f3a4:	d805      	bhi.n	800f3b2 <osThreadNew+0x6e>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	f003 0301 	and.w	r3, r3, #1
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d001      	beq.n	800f3b6 <osThreadNew+0x72>
        return (NULL);
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	e054      	b.n	800f460 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	695b      	ldr	r3, [r3, #20]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d003      	beq.n	800f3c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	695b      	ldr	r3, [r3, #20]
 800f3c2:	089b      	lsrs	r3, r3, #2
 800f3c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	689b      	ldr	r3, [r3, #8]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d00e      	beq.n	800f3ec <osThreadNew+0xa8>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	2bab      	cmp	r3, #171	; 0xab
 800f3d4:	d90a      	bls.n	800f3ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d006      	beq.n	800f3ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	695b      	ldr	r3, [r3, #20]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d002      	beq.n	800f3ec <osThreadNew+0xa8>
        mem = 1;
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	61bb      	str	r3, [r7, #24]
 800f3ea:	e010      	b.n	800f40e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	689b      	ldr	r3, [r3, #8]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10c      	bne.n	800f40e <osThreadNew+0xca>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d108      	bne.n	800f40e <osThreadNew+0xca>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	691b      	ldr	r3, [r3, #16]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d104      	bne.n	800f40e <osThreadNew+0xca>
          mem = 0;
 800f404:	2300      	movs	r3, #0
 800f406:	61bb      	str	r3, [r7, #24]
 800f408:	e001      	b.n	800f40e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f40a:	2300      	movs	r3, #0
 800f40c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	2b01      	cmp	r3, #1
 800f412:	d110      	bne.n	800f436 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f418:	687a      	ldr	r2, [r7, #4]
 800f41a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f41c:	9202      	str	r2, [sp, #8]
 800f41e:	9301      	str	r3, [sp, #4]
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	9300      	str	r3, [sp, #0]
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	6a3a      	ldr	r2, [r7, #32]
 800f428:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f42a:	68f8      	ldr	r0, [r7, #12]
 800f42c:	f001 ff82 	bl	8011334 <xTaskCreateStatic>
 800f430:	4603      	mov	r3, r0
 800f432:	613b      	str	r3, [r7, #16]
 800f434:	e013      	b.n	800f45e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f436:	69bb      	ldr	r3, [r7, #24]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d110      	bne.n	800f45e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f43c:	6a3b      	ldr	r3, [r7, #32]
 800f43e:	b29a      	uxth	r2, r3
 800f440:	f107 0310 	add.w	r3, r7, #16
 800f444:	9301      	str	r3, [sp, #4]
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f001 ffcd 	bl	80113ee <xTaskCreate>
 800f454:	4603      	mov	r3, r0
 800f456:	2b01      	cmp	r3, #1
 800f458:	d001      	beq.n	800f45e <osThreadNew+0x11a>
            hTask = NULL;
 800f45a:	2300      	movs	r3, #0
 800f45c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f45e:	693b      	ldr	r3, [r7, #16]
}
 800f460:	4618      	mov	r0, r3
 800f462:	3728      	adds	r7, #40	; 0x28
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}

0800f468 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f46e:	f3ef 8305 	mrs	r3, IPSR
 800f472:	603b      	str	r3, [r7, #0]
  return(result);
 800f474:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f476:	2b00      	cmp	r3, #0
 800f478:	d003      	beq.n	800f482 <osThreadYield+0x1a>
    stat = osErrorISR;
 800f47a:	f06f 0305 	mvn.w	r3, #5
 800f47e:	607b      	str	r3, [r7, #4]
 800f480:	e009      	b.n	800f496 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800f482:	2300      	movs	r3, #0
 800f484:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800f486:	4b07      	ldr	r3, [pc, #28]	; (800f4a4 <osThreadYield+0x3c>)
 800f488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f48c:	601a      	str	r2, [r3, #0]
 800f48e:	f3bf 8f4f 	dsb	sy
 800f492:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800f496:	687b      	ldr	r3, [r7, #4]
}
 800f498:	4618      	mov	r0, r3
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr
 800f4a4:	e000ed04 	.word	0xe000ed04

0800f4a8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b088      	sub	sp, #32
 800f4ac:	af02      	add	r7, sp, #8
 800f4ae:	6078      	str	r0, [r7, #4]
 800f4b0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800f4b6:	697b      	ldr	r3, [r7, #20]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d002      	beq.n	800f4c2 <osThreadFlagsSet+0x1a>
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	da03      	bge.n	800f4ca <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800f4c2:	f06f 0303 	mvn.w	r3, #3
 800f4c6:	60fb      	str	r3, [r7, #12]
 800f4c8:	e035      	b.n	800f536 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800f4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4d0:	f3ef 8305 	mrs	r3, IPSR
 800f4d4:	613b      	str	r3, [r7, #16]
  return(result);
 800f4d6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d01f      	beq.n	800f51c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800f4e0:	f107 0308 	add.w	r3, r7, #8
 800f4e4:	9300      	str	r3, [sp, #0]
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	2201      	movs	r2, #1
 800f4ea:	6839      	ldr	r1, [r7, #0]
 800f4ec:	6978      	ldr	r0, [r7, #20]
 800f4ee:	f003 f8b1 	bl	8012654 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800f4f2:	f107 030c 	add.w	r3, r7, #12
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	9200      	str	r2, [sp, #0]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	6978      	ldr	r0, [r7, #20]
 800f500:	f003 f8a8 	bl	8012654 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d015      	beq.n	800f536 <osThreadFlagsSet+0x8e>
 800f50a:	4b0d      	ldr	r3, [pc, #52]	; (800f540 <osThreadFlagsSet+0x98>)
 800f50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f510:	601a      	str	r2, [r3, #0]
 800f512:	f3bf 8f4f 	dsb	sy
 800f516:	f3bf 8f6f 	isb	sy
 800f51a:	e00c      	b.n	800f536 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800f51c:	2300      	movs	r3, #0
 800f51e:	2201      	movs	r2, #1
 800f520:	6839      	ldr	r1, [r7, #0]
 800f522:	6978      	ldr	r0, [r7, #20]
 800f524:	f002 ffd8 	bl	80124d8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800f528:	f107 030c 	add.w	r3, r7, #12
 800f52c:	2200      	movs	r2, #0
 800f52e:	2100      	movs	r1, #0
 800f530:	6978      	ldr	r0, [r7, #20]
 800f532:	f002 ffd1 	bl	80124d8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800f536:	68fb      	ldr	r3, [r7, #12]
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3718      	adds	r7, #24
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	e000ed04 	.word	0xe000ed04

0800f544 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f54c:	f3ef 8305 	mrs	r3, IPSR
 800f550:	60fb      	str	r3, [r7, #12]
  return(result);
 800f552:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800f554:	2b00      	cmp	r3, #0
 800f556:	d003      	beq.n	800f560 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 800f558:	f06f 0305 	mvn.w	r3, #5
 800f55c:	617b      	str	r3, [r7, #20]
 800f55e:	e02a      	b.n	800f5b6 <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	da03      	bge.n	800f56e <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800f566:	f06f 0303 	mvn.w	r3, #3
 800f56a:	617b      	str	r3, [r7, #20]
 800f56c:	e023      	b.n	800f5b6 <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800f56e:	f002 fdb9 	bl	80120e4 <xTaskGetCurrentTaskHandle>
 800f572:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800f574:	f107 0308 	add.w	r3, r7, #8
 800f578:	2200      	movs	r2, #0
 800f57a:	2100      	movs	r1, #0
 800f57c:	6938      	ldr	r0, [r7, #16]
 800f57e:	f002 ffab 	bl	80124d8 <xTaskGenericNotify>
 800f582:	4603      	mov	r3, r0
 800f584:	2b01      	cmp	r3, #1
 800f586:	d113      	bne.n	800f5b0 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	43da      	mvns	r2, r3
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	4013      	ands	r3, r2
 800f594:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800f596:	68b9      	ldr	r1, [r7, #8]
 800f598:	2300      	movs	r3, #0
 800f59a:	2203      	movs	r2, #3
 800f59c:	6938      	ldr	r0, [r7, #16]
 800f59e:	f002 ff9b 	bl	80124d8 <xTaskGenericNotify>
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d006      	beq.n	800f5b6 <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 800f5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ac:	617b      	str	r3, [r7, #20]
 800f5ae:	e002      	b.n	800f5b6 <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800f5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b4:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800f5b6:	697b      	ldr	r3, [r7, #20]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3718      	adds	r7, #24
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b08c      	sub	sp, #48	; 0x30
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5cc:	f3ef 8305 	mrs	r3, IPSR
 800f5d0:	617b      	str	r3, [r7, #20]
  return(result);
 800f5d2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d003      	beq.n	800f5e0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800f5d8:	f06f 0305 	mvn.w	r3, #5
 800f5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5de:	e06b      	b.n	800f6b8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	da03      	bge.n	800f5ee <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800f5e6:	f06f 0303 	mvn.w	r3, #3
 800f5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f5ec:	e064      	b.n	800f6b8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	f003 0302 	and.w	r3, r3, #2
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d002      	beq.n	800f5fe <osThreadFlagsWait+0x3e>
      clear = 0U;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800f5fc:	e001      	b.n	800f602 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800f602:	2300      	movs	r3, #0
 800f604:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800f60a:	f002 fa19 	bl	8011a40 <xTaskGetTickCount>
 800f60e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800f610:	f107 0210 	add.w	r2, r7, #16
 800f614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f618:	2000      	movs	r0, #0
 800f61a:	f002 fefd 	bl	8012418 <xTaskNotifyWait>
 800f61e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800f620:	69fb      	ldr	r3, [r7, #28]
 800f622:	2b01      	cmp	r3, #1
 800f624:	d137      	bne.n	800f696 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800f626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	4013      	ands	r3, r2
 800f62c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f632:	4313      	orrs	r3, r2
 800f634:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	f003 0301 	and.w	r3, r3, #1
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d00c      	beq.n	800f65a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800f640:	68fa      	ldr	r2, [r7, #12]
 800f642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f644:	4013      	ands	r3, r2
 800f646:	68fa      	ldr	r2, [r7, #12]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d032      	beq.n	800f6b2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d10f      	bne.n	800f672 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f652:	f06f 0302 	mvn.w	r3, #2
 800f656:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f658:	e02e      	b.n	800f6b8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f65e:	4013      	ands	r3, r2
 800f660:	2b00      	cmp	r3, #0
 800f662:	d128      	bne.n	800f6b6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d103      	bne.n	800f672 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800f66a:	f06f 0302 	mvn.w	r3, #2
 800f66e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800f670:	e022      	b.n	800f6b8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800f672:	f002 f9e5 	bl	8011a40 <xTaskGetTickCount>
 800f676:	4602      	mov	r2, r0
 800f678:	6a3b      	ldr	r3, [r7, #32]
 800f67a:	1ad3      	subs	r3, r2, r3
 800f67c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800f67e:	69ba      	ldr	r2, [r7, #24]
 800f680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f682:	429a      	cmp	r2, r3
 800f684:	d902      	bls.n	800f68c <osThreadFlagsWait+0xcc>
          tout  = 0;
 800f686:	2300      	movs	r3, #0
 800f688:	627b      	str	r3, [r7, #36]	; 0x24
 800f68a:	e00e      	b.n	800f6aa <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800f68c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f68e:	69bb      	ldr	r3, [r7, #24]
 800f690:	1ad3      	subs	r3, r2, r3
 800f692:	627b      	str	r3, [r7, #36]	; 0x24
 800f694:	e009      	b.n	800f6aa <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d103      	bne.n	800f6a4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800f69c:	f06f 0302 	mvn.w	r3, #2
 800f6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f6a2:	e002      	b.n	800f6aa <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800f6a4:	f06f 0301 	mvn.w	r3, #1
 800f6a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1af      	bne.n	800f610 <osThreadFlagsWait+0x50>
 800f6b0:	e002      	b.n	800f6b8 <osThreadFlagsWait+0xf8>
            break;
 800f6b2:	bf00      	nop
 800f6b4:	e000      	b.n	800f6b8 <osThreadFlagsWait+0xf8>
            break;
 800f6b6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800f6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3730      	adds	r7, #48	; 0x30
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b084      	sub	sp, #16
 800f6c6:	af00      	add	r7, sp, #0
 800f6c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6ca:	f3ef 8305 	mrs	r3, IPSR
 800f6ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800f6d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d003      	beq.n	800f6de <osDelay+0x1c>
    stat = osErrorISR;
 800f6d6:	f06f 0305 	mvn.w	r3, #5
 800f6da:	60fb      	str	r3, [r7, #12]
 800f6dc:	e007      	b.n	800f6ee <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d002      	beq.n	800f6ee <osDelay+0x2c>
      vTaskDelay(ticks);
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f002 f859 	bl	80117a0 <vTaskDelay>
    }
  }

  return (stat);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f700:	f3ef 8305 	mrs	r3, IPSR
 800f704:	60fb      	str	r3, [r7, #12]
  return(result);
 800f706:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d003      	beq.n	800f714 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800f70c:	f06f 0305 	mvn.w	r3, #5
 800f710:	617b      	str	r3, [r7, #20]
 800f712:	e019      	b.n	800f748 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800f714:	2300      	movs	r3, #0
 800f716:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800f718:	f002 f992 	bl	8011a40 <xTaskGetTickCount>
 800f71c:	4603      	mov	r3, r0
 800f71e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	1ad3      	subs	r3, r2, r3
 800f726:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d009      	beq.n	800f742 <osDelayUntil+0x4a>
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	2b00      	cmp	r3, #0
 800f732:	db06      	blt.n	800f742 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800f734:	f107 0308 	add.w	r3, r7, #8
 800f738:	6939      	ldr	r1, [r7, #16]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f001 ffb2 	bl	80116a4 <vTaskDelayUntil>
 800f740:	e002      	b.n	800f748 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800f742:	f06f 0303 	mvn.w	r3, #3
 800f746:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f748:	697b      	ldr	r3, [r7, #20]
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3718      	adds	r7, #24
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800f752:	b580      	push	{r7, lr}
 800f754:	b084      	sub	sp, #16
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800f75a:	6878      	ldr	r0, [r7, #4]
 800f75c:	f003 fc9a 	bl	8013094 <pvTimerGetTimerID>
 800f760:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d005      	beq.n	800f774 <TimerCallback+0x22>
    callb->func (callb->arg);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	68fa      	ldr	r2, [r7, #12]
 800f76e:	6852      	ldr	r2, [r2, #4]
 800f770:	4610      	mov	r0, r2
 800f772:	4798      	blx	r3
  }
}
 800f774:	bf00      	nop
 800f776:	3710      	adds	r7, #16
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b08c      	sub	sp, #48	; 0x30
 800f780:	af02      	add	r7, sp, #8
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	607a      	str	r2, [r7, #4]
 800f786:	603b      	str	r3, [r7, #0]
 800f788:	460b      	mov	r3, r1
 800f78a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800f78c:	2300      	movs	r3, #0
 800f78e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f790:	f3ef 8305 	mrs	r3, IPSR
 800f794:	613b      	str	r3, [r7, #16]
  return(result);
 800f796:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d163      	bne.n	800f864 <osTimerNew+0xe8>
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d060      	beq.n	800f864 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800f7a2:	2008      	movs	r0, #8
 800f7a4:	f003 fee8 	bl	8013578 <pvPortMalloc>
 800f7a8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d059      	beq.n	800f864 <osTimerNew+0xe8>
      callb->func = func;
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	68fa      	ldr	r2, [r7, #12]
 800f7b4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800f7bc:	7afb      	ldrb	r3, [r7, #11]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d102      	bne.n	800f7c8 <osTimerNew+0x4c>
        reload = pdFALSE;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	61fb      	str	r3, [r7, #28]
 800f7c6:	e001      	b.n	800f7cc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800f7cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f7d0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d01c      	beq.n	800f816 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d002      	beq.n	800f7ea <osTimerNew+0x6e>
          name = attr->name;
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	689b      	ldr	r3, [r3, #8]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d006      	beq.n	800f800 <osTimerNew+0x84>
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	2b2b      	cmp	r3, #43	; 0x2b
 800f7f8:	d902      	bls.n	800f800 <osTimerNew+0x84>
          mem = 1;
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	61bb      	str	r3, [r7, #24]
 800f7fe:	e00c      	b.n	800f81a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d108      	bne.n	800f81a <osTimerNew+0x9e>
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d104      	bne.n	800f81a <osTimerNew+0x9e>
            mem = 0;
 800f810:	2300      	movs	r3, #0
 800f812:	61bb      	str	r3, [r7, #24]
 800f814:	e001      	b.n	800f81a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800f816:	2300      	movs	r3, #0
 800f818:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f81a:	69bb      	ldr	r3, [r7, #24]
 800f81c:	2b01      	cmp	r3, #1
 800f81e:	d10c      	bne.n	800f83a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800f820:	683b      	ldr	r3, [r7, #0]
 800f822:	689b      	ldr	r3, [r3, #8]
 800f824:	9301      	str	r3, [sp, #4]
 800f826:	4b12      	ldr	r3, [pc, #72]	; (800f870 <osTimerNew+0xf4>)
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	69fa      	ldr	r2, [r7, #28]
 800f82e:	2101      	movs	r1, #1
 800f830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f832:	f003 f8b0 	bl	8012996 <xTimerCreateStatic>
 800f836:	6238      	str	r0, [r7, #32]
 800f838:	e00b      	b.n	800f852 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d108      	bne.n	800f852 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800f840:	4b0b      	ldr	r3, [pc, #44]	; (800f870 <osTimerNew+0xf4>)
 800f842:	9300      	str	r3, [sp, #0]
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	69fa      	ldr	r2, [r7, #28]
 800f848:	2101      	movs	r1, #1
 800f84a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f84c:	f003 f882 	bl	8012954 <xTimerCreate>
 800f850:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800f852:	6a3b      	ldr	r3, [r7, #32]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d105      	bne.n	800f864 <osTimerNew+0xe8>
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d002      	beq.n	800f864 <osTimerNew+0xe8>
        vPortFree (callb);
 800f85e:	6978      	ldr	r0, [r7, #20]
 800f860:	f003 ff56 	bl	8013710 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800f864:	6a3b      	ldr	r3, [r7, #32]
}
 800f866:	4618      	mov	r0, r3
 800f868:	3728      	adds	r7, #40	; 0x28
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}
 800f86e:	bf00      	nop
 800f870:	0800f753 	.word	0x0800f753

0800f874 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800f874:	b580      	push	{r7, lr}
 800f876:	b088      	sub	sp, #32
 800f878:	af02      	add	r7, sp, #8
 800f87a:	6078      	str	r0, [r7, #4]
 800f87c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f882:	f3ef 8305 	mrs	r3, IPSR
 800f886:	60fb      	str	r3, [r7, #12]
  return(result);
 800f888:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d003      	beq.n	800f896 <osTimerStart+0x22>
    stat = osErrorISR;
 800f88e:	f06f 0305 	mvn.w	r3, #5
 800f892:	617b      	str	r3, [r7, #20]
 800f894:	e017      	b.n	800f8c6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d103      	bne.n	800f8a4 <osTimerStart+0x30>
    stat = osErrorParameter;
 800f89c:	f06f 0303 	mvn.w	r3, #3
 800f8a0:	617b      	str	r3, [r7, #20]
 800f8a2:	e010      	b.n	800f8c6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	683a      	ldr	r2, [r7, #0]
 800f8ac:	2104      	movs	r1, #4
 800f8ae:	6938      	ldr	r0, [r7, #16]
 800f8b0:	f003 f8ea 	bl	8012a88 <xTimerGenericCommand>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d102      	bne.n	800f8c0 <osTimerStart+0x4c>
      stat = osOK;
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	617b      	str	r3, [r7, #20]
 800f8be:	e002      	b.n	800f8c6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800f8c0:	f06f 0302 	mvn.w	r3, #2
 800f8c4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f8c6:	697b      	ldr	r3, [r7, #20]
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3718      	adds	r7, #24
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}

0800f8d0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b088      	sub	sp, #32
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8dc:	f3ef 8305 	mrs	r3, IPSR
 800f8e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800f8e2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d174      	bne.n	800f9d2 <osMutexNew+0x102>
    if (attr != NULL) {
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d003      	beq.n	800f8f6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	61bb      	str	r3, [r7, #24]
 800f8f4:	e001      	b.n	800f8fa <osMutexNew+0x2a>
    } else {
      type = 0U;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f8fa:	69bb      	ldr	r3, [r7, #24]
 800f8fc:	f003 0301 	and.w	r3, r3, #1
 800f900:	2b00      	cmp	r3, #0
 800f902:	d002      	beq.n	800f90a <osMutexNew+0x3a>
      rmtx = 1U;
 800f904:	2301      	movs	r3, #1
 800f906:	617b      	str	r3, [r7, #20]
 800f908:	e001      	b.n	800f90e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800f90a:	2300      	movs	r3, #0
 800f90c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f90e:	69bb      	ldr	r3, [r7, #24]
 800f910:	f003 0308 	and.w	r3, r3, #8
 800f914:	2b00      	cmp	r3, #0
 800f916:	d15c      	bne.n	800f9d2 <osMutexNew+0x102>
      mem = -1;
 800f918:	f04f 33ff 	mov.w	r3, #4294967295
 800f91c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d015      	beq.n	800f950 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	689b      	ldr	r3, [r3, #8]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d006      	beq.n	800f93a <osMutexNew+0x6a>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	2b4f      	cmp	r3, #79	; 0x4f
 800f932:	d902      	bls.n	800f93a <osMutexNew+0x6a>
          mem = 1;
 800f934:	2301      	movs	r3, #1
 800f936:	613b      	str	r3, [r7, #16]
 800f938:	e00c      	b.n	800f954 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d108      	bne.n	800f954 <osMutexNew+0x84>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	68db      	ldr	r3, [r3, #12]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d104      	bne.n	800f954 <osMutexNew+0x84>
            mem = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	613b      	str	r3, [r7, #16]
 800f94e:	e001      	b.n	800f954 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	2b01      	cmp	r3, #1
 800f958:	d112      	bne.n	800f980 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d007      	beq.n	800f970 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	689b      	ldr	r3, [r3, #8]
 800f964:	4619      	mov	r1, r3
 800f966:	2004      	movs	r0, #4
 800f968:	f000 fd8f 	bl	801048a <xQueueCreateMutexStatic>
 800f96c:	61f8      	str	r0, [r7, #28]
 800f96e:	e016      	b.n	800f99e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	4619      	mov	r1, r3
 800f976:	2001      	movs	r0, #1
 800f978:	f000 fd87 	bl	801048a <xQueueCreateMutexStatic>
 800f97c:	61f8      	str	r0, [r7, #28]
 800f97e:	e00e      	b.n	800f99e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d10b      	bne.n	800f99e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d004      	beq.n	800f996 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f98c:	2004      	movs	r0, #4
 800f98e:	f000 fd64 	bl	801045a <xQueueCreateMutex>
 800f992:	61f8      	str	r0, [r7, #28]
 800f994:	e003      	b.n	800f99e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f996:	2001      	movs	r0, #1
 800f998:	f000 fd5f 	bl	801045a <xQueueCreateMutex>
 800f99c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00c      	beq.n	800f9be <osMutexNew+0xee>
        if (attr != NULL) {
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d003      	beq.n	800f9b2 <osMutexNew+0xe2>
          name = attr->name;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	60fb      	str	r3, [r7, #12]
 800f9b0:	e001      	b.n	800f9b6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f9b6:	68f9      	ldr	r1, [r7, #12]
 800f9b8:	69f8      	ldr	r0, [r7, #28]
 800f9ba:	f001 fc33 	bl	8011224 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d006      	beq.n	800f9d2 <osMutexNew+0x102>
 800f9c4:	697b      	ldr	r3, [r7, #20]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d003      	beq.n	800f9d2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	f043 0301 	orr.w	r3, r3, #1
 800f9d0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f9d2:	69fb      	ldr	r3, [r7, #28]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3720      	adds	r7, #32
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b086      	sub	sp, #24
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f023 0301 	bic.w	r3, r3, #1
 800f9ec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f003 0301 	and.w	r3, r3, #1
 800f9f4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9fa:	f3ef 8305 	mrs	r3, IPSR
 800f9fe:	60bb      	str	r3, [r7, #8]
  return(result);
 800fa00:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d003      	beq.n	800fa0e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800fa06:	f06f 0305 	mvn.w	r3, #5
 800fa0a:	617b      	str	r3, [r7, #20]
 800fa0c:	e02c      	b.n	800fa68 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d103      	bne.n	800fa1c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800fa14:	f06f 0303 	mvn.w	r3, #3
 800fa18:	617b      	str	r3, [r7, #20]
 800fa1a:	e025      	b.n	800fa68 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d011      	beq.n	800fa46 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800fa22:	6839      	ldr	r1, [r7, #0]
 800fa24:	6938      	ldr	r0, [r7, #16]
 800fa26:	f000 fd7f 	bl	8010528 <xQueueTakeMutexRecursive>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	d01b      	beq.n	800fa68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d003      	beq.n	800fa3e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800fa36:	f06f 0301 	mvn.w	r3, #1
 800fa3a:	617b      	str	r3, [r7, #20]
 800fa3c:	e014      	b.n	800fa68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800fa3e:	f06f 0302 	mvn.w	r3, #2
 800fa42:	617b      	str	r3, [r7, #20]
 800fa44:	e010      	b.n	800fa68 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800fa46:	6839      	ldr	r1, [r7, #0]
 800fa48:	6938      	ldr	r0, [r7, #16]
 800fa4a:	f001 f913 	bl	8010c74 <xQueueSemaphoreTake>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2b01      	cmp	r3, #1
 800fa52:	d009      	beq.n	800fa68 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d003      	beq.n	800fa62 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800fa5a:	f06f 0301 	mvn.w	r3, #1
 800fa5e:	617b      	str	r3, [r7, #20]
 800fa60:	e002      	b.n	800fa68 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800fa62:	f06f 0302 	mvn.w	r3, #2
 800fa66:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800fa68:	697b      	ldr	r3, [r7, #20]
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3718      	adds	r7, #24
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}

0800fa72 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800fa72:	b580      	push	{r7, lr}
 800fa74:	b086      	sub	sp, #24
 800fa76:	af00      	add	r7, sp, #0
 800fa78:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f023 0301 	bic.w	r3, r3, #1
 800fa80:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	f003 0301 	and.w	r3, r3, #1
 800fa88:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa8e:	f3ef 8305 	mrs	r3, IPSR
 800fa92:	60bb      	str	r3, [r7, #8]
  return(result);
 800fa94:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d003      	beq.n	800faa2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800fa9a:	f06f 0305 	mvn.w	r3, #5
 800fa9e:	617b      	str	r3, [r7, #20]
 800faa0:	e01f      	b.n	800fae2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d103      	bne.n	800fab0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800faa8:	f06f 0303 	mvn.w	r3, #3
 800faac:	617b      	str	r3, [r7, #20]
 800faae:	e018      	b.n	800fae2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d009      	beq.n	800faca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800fab6:	6938      	ldr	r0, [r7, #16]
 800fab8:	f000 fd02 	bl	80104c0 <xQueueGiveMutexRecursive>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d00f      	beq.n	800fae2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800fac2:	f06f 0302 	mvn.w	r3, #2
 800fac6:	617b      	str	r3, [r7, #20]
 800fac8:	e00b      	b.n	800fae2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800faca:	2300      	movs	r3, #0
 800facc:	2200      	movs	r2, #0
 800face:	2100      	movs	r1, #0
 800fad0:	6938      	ldr	r0, [r7, #16]
 800fad2:	f000 fdc9 	bl	8010668 <xQueueGenericSend>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b01      	cmp	r3, #1
 800fada:	d002      	beq.n	800fae2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800fadc:	f06f 0302 	mvn.w	r3, #2
 800fae0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800fae2:	697b      	ldr	r3, [r7, #20]
}
 800fae4:	4618      	mov	r0, r3
 800fae6:	3718      	adds	r7, #24
 800fae8:	46bd      	mov	sp, r7
 800faea:	bd80      	pop	{r7, pc}

0800faec <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800faec:	b580      	push	{r7, lr}
 800faee:	b086      	sub	sp, #24
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f023 0301 	bic.w	r3, r3, #1
 800fafa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fafc:	f3ef 8305 	mrs	r3, IPSR
 800fb00:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb02:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d003      	beq.n	800fb10 <osMutexDelete+0x24>
    stat = osErrorISR;
 800fb08:	f06f 0305 	mvn.w	r3, #5
 800fb0c:	617b      	str	r3, [r7, #20]
 800fb0e:	e00e      	b.n	800fb2e <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d103      	bne.n	800fb1e <osMutexDelete+0x32>
    stat = osErrorParameter;
 800fb16:	f06f 0303 	mvn.w	r3, #3
 800fb1a:	617b      	str	r3, [r7, #20]
 800fb1c:	e007      	b.n	800fb2e <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800fb1e:	6938      	ldr	r0, [r7, #16]
 800fb20:	f001 fbaa 	bl	8011278 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800fb24:	2300      	movs	r3, #0
 800fb26:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800fb28:	6938      	ldr	r0, [r7, #16]
 800fb2a:	f001 fa2f 	bl	8010f8c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800fb2e:	697b      	ldr	r3, [r7, #20]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3718      	adds	r7, #24
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b08a      	sub	sp, #40	; 0x28
 800fb3c:	af02      	add	r7, sp, #8
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800fb44:	2300      	movs	r3, #0
 800fb46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb48:	f3ef 8305 	mrs	r3, IPSR
 800fb4c:	613b      	str	r3, [r7, #16]
  return(result);
 800fb4e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d175      	bne.n	800fc40 <osSemaphoreNew+0x108>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d072      	beq.n	800fc40 <osSemaphoreNew+0x108>
 800fb5a:	68ba      	ldr	r2, [r7, #8]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d86e      	bhi.n	800fc40 <osSemaphoreNew+0x108>
    mem = -1;
 800fb62:	f04f 33ff 	mov.w	r3, #4294967295
 800fb66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d015      	beq.n	800fb9a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	689b      	ldr	r3, [r3, #8]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d006      	beq.n	800fb84 <osSemaphoreNew+0x4c>
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68db      	ldr	r3, [r3, #12]
 800fb7a:	2b4f      	cmp	r3, #79	; 0x4f
 800fb7c:	d902      	bls.n	800fb84 <osSemaphoreNew+0x4c>
        mem = 1;
 800fb7e:	2301      	movs	r3, #1
 800fb80:	61bb      	str	r3, [r7, #24]
 800fb82:	e00c      	b.n	800fb9e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	689b      	ldr	r3, [r3, #8]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d108      	bne.n	800fb9e <osSemaphoreNew+0x66>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d104      	bne.n	800fb9e <osSemaphoreNew+0x66>
          mem = 0;
 800fb94:	2300      	movs	r3, #0
 800fb96:	61bb      	str	r3, [r7, #24]
 800fb98:	e001      	b.n	800fb9e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fba4:	d04c      	beq.n	800fc40 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2b01      	cmp	r3, #1
 800fbaa:	d128      	bne.n	800fbfe <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fbac:	69bb      	ldr	r3, [r7, #24]
 800fbae:	2b01      	cmp	r3, #1
 800fbb0:	d10a      	bne.n	800fbc8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	2203      	movs	r2, #3
 800fbb8:	9200      	str	r2, [sp, #0]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	2100      	movs	r1, #0
 800fbbe:	2001      	movs	r0, #1
 800fbc0:	f000 fb5c 	bl	801027c <xQueueGenericCreateStatic>
 800fbc4:	61f8      	str	r0, [r7, #28]
 800fbc6:	e005      	b.n	800fbd4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800fbc8:	2203      	movs	r2, #3
 800fbca:	2100      	movs	r1, #0
 800fbcc:	2001      	movs	r0, #1
 800fbce:	f000 fbcd 	bl	801036c <xQueueGenericCreate>
 800fbd2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d022      	beq.n	800fc20 <osSemaphoreNew+0xe8>
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d01f      	beq.n	800fc20 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	2100      	movs	r1, #0
 800fbe6:	69f8      	ldr	r0, [r7, #28]
 800fbe8:	f000 fd3e 	bl	8010668 <xQueueGenericSend>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d016      	beq.n	800fc20 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800fbf2:	69f8      	ldr	r0, [r7, #28]
 800fbf4:	f001 f9ca 	bl	8010f8c <vQueueDelete>
            hSemaphore = NULL;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	61fb      	str	r3, [r7, #28]
 800fbfc:	e010      	b.n	800fc20 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800fbfe:	69bb      	ldr	r3, [r7, #24]
 800fc00:	2b01      	cmp	r3, #1
 800fc02:	d108      	bne.n	800fc16 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	689b      	ldr	r3, [r3, #8]
 800fc08:	461a      	mov	r2, r3
 800fc0a:	68b9      	ldr	r1, [r7, #8]
 800fc0c:	68f8      	ldr	r0, [r7, #12]
 800fc0e:	f000 fcc1 	bl	8010594 <xQueueCreateCountingSemaphoreStatic>
 800fc12:	61f8      	str	r0, [r7, #28]
 800fc14:	e004      	b.n	800fc20 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800fc16:	68b9      	ldr	r1, [r7, #8]
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f000 fcf2 	bl	8010602 <xQueueCreateCountingSemaphore>
 800fc1e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d00c      	beq.n	800fc40 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d003      	beq.n	800fc34 <osSemaphoreNew+0xfc>
          name = attr->name;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	617b      	str	r3, [r7, #20]
 800fc32:	e001      	b.n	800fc38 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800fc34:	2300      	movs	r3, #0
 800fc36:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800fc38:	6979      	ldr	r1, [r7, #20]
 800fc3a:	69f8      	ldr	r0, [r7, #28]
 800fc3c:	f001 faf2 	bl	8011224 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800fc40:	69fb      	ldr	r3, [r7, #28]
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3720      	adds	r7, #32
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
	...

0800fc4c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b086      	sub	sp, #24
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
 800fc54:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d103      	bne.n	800fc6c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800fc64:	f06f 0303 	mvn.w	r3, #3
 800fc68:	617b      	str	r3, [r7, #20]
 800fc6a:	e039      	b.n	800fce0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fc6c:	f3ef 8305 	mrs	r3, IPSR
 800fc70:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc72:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d022      	beq.n	800fcbe <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d003      	beq.n	800fc86 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800fc7e:	f06f 0303 	mvn.w	r3, #3
 800fc82:	617b      	str	r3, [r7, #20]
 800fc84:	e02c      	b.n	800fce0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800fc86:	2300      	movs	r3, #0
 800fc88:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800fc8a:	f107 0308 	add.w	r3, r7, #8
 800fc8e:	461a      	mov	r2, r3
 800fc90:	2100      	movs	r1, #0
 800fc92:	6938      	ldr	r0, [r7, #16]
 800fc94:	f001 f8fa 	bl	8010e8c <xQueueReceiveFromISR>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	2b01      	cmp	r3, #1
 800fc9c:	d003      	beq.n	800fca6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800fc9e:	f06f 0302 	mvn.w	r3, #2
 800fca2:	617b      	str	r3, [r7, #20]
 800fca4:	e01c      	b.n	800fce0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d019      	beq.n	800fce0 <osSemaphoreAcquire+0x94>
 800fcac:	4b0f      	ldr	r3, [pc, #60]	; (800fcec <osSemaphoreAcquire+0xa0>)
 800fcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcb2:	601a      	str	r2, [r3, #0]
 800fcb4:	f3bf 8f4f 	dsb	sy
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	e010      	b.n	800fce0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800fcbe:	6839      	ldr	r1, [r7, #0]
 800fcc0:	6938      	ldr	r0, [r7, #16]
 800fcc2:	f000 ffd7 	bl	8010c74 <xQueueSemaphoreTake>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b01      	cmp	r3, #1
 800fcca:	d009      	beq.n	800fce0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d003      	beq.n	800fcda <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800fcd2:	f06f 0301 	mvn.w	r3, #1
 800fcd6:	617b      	str	r3, [r7, #20]
 800fcd8:	e002      	b.n	800fce0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800fcda:	f06f 0302 	mvn.w	r3, #2
 800fcde:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800fce0:	697b      	ldr	r3, [r7, #20]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	3718      	adds	r7, #24
 800fce6:	46bd      	mov	sp, r7
 800fce8:	bd80      	pop	{r7, pc}
 800fcea:	bf00      	nop
 800fcec:	e000ed04 	.word	0xe000ed04

0800fcf0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b086      	sub	sp, #24
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d103      	bne.n	800fd0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800fd06:	f06f 0303 	mvn.w	r3, #3
 800fd0a:	617b      	str	r3, [r7, #20]
 800fd0c:	e02c      	b.n	800fd68 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd0e:	f3ef 8305 	mrs	r3, IPSR
 800fd12:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd14:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d01a      	beq.n	800fd50 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800fd1e:	f107 0308 	add.w	r3, r7, #8
 800fd22:	4619      	mov	r1, r3
 800fd24:	6938      	ldr	r0, [r7, #16]
 800fd26:	f000 fe38 	bl	801099a <xQueueGiveFromISR>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d003      	beq.n	800fd38 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800fd30:	f06f 0302 	mvn.w	r3, #2
 800fd34:	617b      	str	r3, [r7, #20]
 800fd36:	e017      	b.n	800fd68 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d014      	beq.n	800fd68 <osSemaphoreRelease+0x78>
 800fd3e:	4b0d      	ldr	r3, [pc, #52]	; (800fd74 <osSemaphoreRelease+0x84>)
 800fd40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd44:	601a      	str	r2, [r3, #0]
 800fd46:	f3bf 8f4f 	dsb	sy
 800fd4a:	f3bf 8f6f 	isb	sy
 800fd4e:	e00b      	b.n	800fd68 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800fd50:	2300      	movs	r3, #0
 800fd52:	2200      	movs	r2, #0
 800fd54:	2100      	movs	r1, #0
 800fd56:	6938      	ldr	r0, [r7, #16]
 800fd58:	f000 fc86 	bl	8010668 <xQueueGenericSend>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d002      	beq.n	800fd68 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800fd62:	f06f 0302 	mvn.w	r3, #2
 800fd66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800fd68:	697b      	ldr	r3, [r7, #20]
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	3718      	adds	r7, #24
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	e000ed04 	.word	0xe000ed04

0800fd78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b08a      	sub	sp, #40	; 0x28
 800fd7c:	af02      	add	r7, sp, #8
 800fd7e:	60f8      	str	r0, [r7, #12]
 800fd80:	60b9      	str	r1, [r7, #8]
 800fd82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800fd84:	2300      	movs	r3, #0
 800fd86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd88:	f3ef 8305 	mrs	r3, IPSR
 800fd8c:	613b      	str	r3, [r7, #16]
  return(result);
 800fd8e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d15f      	bne.n	800fe54 <osMessageQueueNew+0xdc>
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d05c      	beq.n	800fe54 <osMessageQueueNew+0xdc>
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d059      	beq.n	800fe54 <osMessageQueueNew+0xdc>
    mem = -1;
 800fda0:	f04f 33ff 	mov.w	r3, #4294967295
 800fda4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d029      	beq.n	800fe00 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	689b      	ldr	r3, [r3, #8]
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d012      	beq.n	800fdda <osMessageQueueNew+0x62>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	68db      	ldr	r3, [r3, #12]
 800fdb8:	2b4f      	cmp	r3, #79	; 0x4f
 800fdba:	d90e      	bls.n	800fdda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d00a      	beq.n	800fdda <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	695a      	ldr	r2, [r3, #20]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	68b9      	ldr	r1, [r7, #8]
 800fdcc:	fb01 f303 	mul.w	r3, r1, r3
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d302      	bcc.n	800fdda <osMessageQueueNew+0x62>
        mem = 1;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	61bb      	str	r3, [r7, #24]
 800fdd8:	e014      	b.n	800fe04 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	689b      	ldr	r3, [r3, #8]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d110      	bne.n	800fe04 <osMessageQueueNew+0x8c>
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d10c      	bne.n	800fe04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d108      	bne.n	800fe04 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	695b      	ldr	r3, [r3, #20]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d104      	bne.n	800fe04 <osMessageQueueNew+0x8c>
          mem = 0;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	61bb      	str	r3, [r7, #24]
 800fdfe:	e001      	b.n	800fe04 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800fe00:	2300      	movs	r3, #0
 800fe02:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fe04:	69bb      	ldr	r3, [r7, #24]
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d10b      	bne.n	800fe22 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	691a      	ldr	r2, [r3, #16]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	689b      	ldr	r3, [r3, #8]
 800fe12:	2100      	movs	r1, #0
 800fe14:	9100      	str	r1, [sp, #0]
 800fe16:	68b9      	ldr	r1, [r7, #8]
 800fe18:	68f8      	ldr	r0, [r7, #12]
 800fe1a:	f000 fa2f 	bl	801027c <xQueueGenericCreateStatic>
 800fe1e:	61f8      	str	r0, [r7, #28]
 800fe20:	e008      	b.n	800fe34 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800fe22:	69bb      	ldr	r3, [r7, #24]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d105      	bne.n	800fe34 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800fe28:	2200      	movs	r2, #0
 800fe2a:	68b9      	ldr	r1, [r7, #8]
 800fe2c:	68f8      	ldr	r0, [r7, #12]
 800fe2e:	f000 fa9d 	bl	801036c <xQueueGenericCreate>
 800fe32:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800fe34:	69fb      	ldr	r3, [r7, #28]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d00c      	beq.n	800fe54 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d003      	beq.n	800fe48 <osMessageQueueNew+0xd0>
        name = attr->name;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	617b      	str	r3, [r7, #20]
 800fe46:	e001      	b.n	800fe4c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800fe48:	2300      	movs	r3, #0
 800fe4a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800fe4c:	6979      	ldr	r1, [r7, #20]
 800fe4e:	69f8      	ldr	r0, [r7, #28]
 800fe50:	f001 f9e8 	bl	8011224 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800fe54:	69fb      	ldr	r3, [r7, #28]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3720      	adds	r7, #32
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
	...

0800fe60 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b088      	sub	sp, #32
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	60f8      	str	r0, [r7, #12]
 800fe68:	60b9      	str	r1, [r7, #8]
 800fe6a:	603b      	str	r3, [r7, #0]
 800fe6c:	4613      	mov	r3, r2
 800fe6e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fe74:	2300      	movs	r3, #0
 800fe76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fe78:	f3ef 8305 	mrs	r3, IPSR
 800fe7c:	617b      	str	r3, [r7, #20]
  return(result);
 800fe7e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d028      	beq.n	800fed6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d005      	beq.n	800fe96 <osMessageQueuePut+0x36>
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d002      	beq.n	800fe96 <osMessageQueuePut+0x36>
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d003      	beq.n	800fe9e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800fe96:	f06f 0303 	mvn.w	r3, #3
 800fe9a:	61fb      	str	r3, [r7, #28]
 800fe9c:	e038      	b.n	800ff10 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800fea2:	f107 0210 	add.w	r2, r7, #16
 800fea6:	2300      	movs	r3, #0
 800fea8:	68b9      	ldr	r1, [r7, #8]
 800feaa:	69b8      	ldr	r0, [r7, #24]
 800feac:	f000 fcda 	bl	8010864 <xQueueGenericSendFromISR>
 800feb0:	4603      	mov	r3, r0
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d003      	beq.n	800febe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800feb6:	f06f 0302 	mvn.w	r3, #2
 800feba:	61fb      	str	r3, [r7, #28]
 800febc:	e028      	b.n	800ff10 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800febe:	693b      	ldr	r3, [r7, #16]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d025      	beq.n	800ff10 <osMessageQueuePut+0xb0>
 800fec4:	4b15      	ldr	r3, [pc, #84]	; (800ff1c <osMessageQueuePut+0xbc>)
 800fec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feca:	601a      	str	r2, [r3, #0]
 800fecc:	f3bf 8f4f 	dsb	sy
 800fed0:	f3bf 8f6f 	isb	sy
 800fed4:	e01c      	b.n	800ff10 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d002      	beq.n	800fee2 <osMessageQueuePut+0x82>
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d103      	bne.n	800feea <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800fee2:	f06f 0303 	mvn.w	r3, #3
 800fee6:	61fb      	str	r3, [r7, #28]
 800fee8:	e012      	b.n	800ff10 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800feea:	2300      	movs	r3, #0
 800feec:	683a      	ldr	r2, [r7, #0]
 800feee:	68b9      	ldr	r1, [r7, #8]
 800fef0:	69b8      	ldr	r0, [r7, #24]
 800fef2:	f000 fbb9 	bl	8010668 <xQueueGenericSend>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d009      	beq.n	800ff10 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d003      	beq.n	800ff0a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ff02:	f06f 0301 	mvn.w	r3, #1
 800ff06:	61fb      	str	r3, [r7, #28]
 800ff08:	e002      	b.n	800ff10 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ff0a:	f06f 0302 	mvn.w	r3, #2
 800ff0e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ff10:	69fb      	ldr	r3, [r7, #28]
}
 800ff12:	4618      	mov	r0, r3
 800ff14:	3720      	adds	r7, #32
 800ff16:	46bd      	mov	sp, r7
 800ff18:	bd80      	pop	{r7, pc}
 800ff1a:	bf00      	nop
 800ff1c:	e000ed04 	.word	0xe000ed04

0800ff20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b088      	sub	sp, #32
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	60f8      	str	r0, [r7, #12]
 800ff28:	60b9      	str	r1, [r7, #8]
 800ff2a:	607a      	str	r2, [r7, #4]
 800ff2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ff32:	2300      	movs	r3, #0
 800ff34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff36:	f3ef 8305 	mrs	r3, IPSR
 800ff3a:	617b      	str	r3, [r7, #20]
  return(result);
 800ff3c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d028      	beq.n	800ff94 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d005      	beq.n	800ff54 <osMessageQueueGet+0x34>
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d002      	beq.n	800ff54 <osMessageQueueGet+0x34>
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d003      	beq.n	800ff5c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ff54:	f06f 0303 	mvn.w	r3, #3
 800ff58:	61fb      	str	r3, [r7, #28]
 800ff5a:	e037      	b.n	800ffcc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ff60:	f107 0310 	add.w	r3, r7, #16
 800ff64:	461a      	mov	r2, r3
 800ff66:	68b9      	ldr	r1, [r7, #8]
 800ff68:	69b8      	ldr	r0, [r7, #24]
 800ff6a:	f000 ff8f 	bl	8010e8c <xQueueReceiveFromISR>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b01      	cmp	r3, #1
 800ff72:	d003      	beq.n	800ff7c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ff74:	f06f 0302 	mvn.w	r3, #2
 800ff78:	61fb      	str	r3, [r7, #28]
 800ff7a:	e027      	b.n	800ffcc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d024      	beq.n	800ffcc <osMessageQueueGet+0xac>
 800ff82:	4b15      	ldr	r3, [pc, #84]	; (800ffd8 <osMessageQueueGet+0xb8>)
 800ff84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff88:	601a      	str	r2, [r3, #0]
 800ff8a:	f3bf 8f4f 	dsb	sy
 800ff8e:	f3bf 8f6f 	isb	sy
 800ff92:	e01b      	b.n	800ffcc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ff94:	69bb      	ldr	r3, [r7, #24]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d002      	beq.n	800ffa0 <osMessageQueueGet+0x80>
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d103      	bne.n	800ffa8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ffa0:	f06f 0303 	mvn.w	r3, #3
 800ffa4:	61fb      	str	r3, [r7, #28]
 800ffa6:	e011      	b.n	800ffcc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ffa8:	683a      	ldr	r2, [r7, #0]
 800ffaa:	68b9      	ldr	r1, [r7, #8]
 800ffac:	69b8      	ldr	r0, [r7, #24]
 800ffae:	f000 fd81 	bl	8010ab4 <xQueueReceive>
 800ffb2:	4603      	mov	r3, r0
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	d009      	beq.n	800ffcc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d003      	beq.n	800ffc6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ffbe:	f06f 0301 	mvn.w	r3, #1
 800ffc2:	61fb      	str	r3, [r7, #28]
 800ffc4:	e002      	b.n	800ffcc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ffc6:	f06f 0302 	mvn.w	r3, #2
 800ffca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ffcc:	69fb      	ldr	r3, [r7, #28]
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3720      	adds	r7, #32
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	e000ed04 	.word	0xe000ed04

0800ffdc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ffdc:	b480      	push	{r7}
 800ffde:	b085      	sub	sp, #20
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	4a07      	ldr	r2, [pc, #28]	; (8010008 <vApplicationGetIdleTaskMemory+0x2c>)
 800ffec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ffee:	68bb      	ldr	r3, [r7, #8]
 800fff0:	4a06      	ldr	r2, [pc, #24]	; (801000c <vApplicationGetIdleTaskMemory+0x30>)
 800fff2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	2280      	movs	r2, #128	; 0x80
 800fff8:	601a      	str	r2, [r3, #0]
}
 800fffa:	bf00      	nop
 800fffc:	3714      	adds	r7, #20
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr
 8010006:	bf00      	nop
 8010008:	2000095c 	.word	0x2000095c
 801000c:	20000a08 	.word	0x20000a08

08010010 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8010010:	b480      	push	{r7}
 8010012:	b085      	sub	sp, #20
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	4a07      	ldr	r2, [pc, #28]	; (801003c <vApplicationGetTimerTaskMemory+0x2c>)
 8010020:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	4a06      	ldr	r2, [pc, #24]	; (8010040 <vApplicationGetTimerTaskMemory+0x30>)
 8010026:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801002e:	601a      	str	r2, [r3, #0]
}
 8010030:	bf00      	nop
 8010032:	3714      	adds	r7, #20
 8010034:	46bd      	mov	sp, r7
 8010036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003a:	4770      	bx	lr
 801003c:	20000c08 	.word	0x20000c08
 8010040:	20000cb4 	.word	0x20000cb4

08010044 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f103 0208 	add.w	r2, r3, #8
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	f04f 32ff 	mov.w	r2, #4294967295
 801005c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f103 0208 	add.w	r2, r3, #8
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f103 0208 	add.w	r2, r3, #8
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010078:	bf00      	nop
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr

08010084 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	2200      	movs	r2, #0
 8010090:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010092:	bf00      	nop
 8010094:	370c      	adds	r7, #12
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr

0801009e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801009e:	b480      	push	{r7}
 80100a0:	b085      	sub	sp, #20
 80100a2:	af00      	add	r7, sp, #0
 80100a4:	6078      	str	r0, [r7, #4]
 80100a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	689a      	ldr	r2, [r3, #8]
 80100b8:	683b      	ldr	r3, [r7, #0]
 80100ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	683a      	ldr	r2, [r7, #0]
 80100c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	683a      	ldr	r2, [r7, #0]
 80100c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	1c5a      	adds	r2, r3, #1
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	601a      	str	r2, [r3, #0]
}
 80100da:	bf00      	nop
 80100dc:	3714      	adds	r7, #20
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr

080100e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80100e6:	b480      	push	{r7}
 80100e8:	b085      	sub	sp, #20
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100fc:	d103      	bne.n	8010106 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	691b      	ldr	r3, [r3, #16]
 8010102:	60fb      	str	r3, [r7, #12]
 8010104:	e00c      	b.n	8010120 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	3308      	adds	r3, #8
 801010a:	60fb      	str	r3, [r7, #12]
 801010c:	e002      	b.n	8010114 <vListInsert+0x2e>
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	685b      	ldr	r3, [r3, #4]
 8010112:	60fb      	str	r3, [r7, #12]
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	685b      	ldr	r3, [r3, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	68ba      	ldr	r2, [r7, #8]
 801011c:	429a      	cmp	r2, r3
 801011e:	d2f6      	bcs.n	801010e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	685a      	ldr	r2, [r3, #4]
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	683a      	ldr	r2, [r7, #0]
 801012e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010130:	683b      	ldr	r3, [r7, #0]
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	683a      	ldr	r2, [r7, #0]
 801013a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	1c5a      	adds	r2, r3, #1
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	601a      	str	r2, [r3, #0]
}
 801014c:	bf00      	nop
 801014e:	3714      	adds	r7, #20
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010158:	b480      	push	{r7}
 801015a:	b085      	sub	sp, #20
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	691b      	ldr	r3, [r3, #16]
 8010164:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	6892      	ldr	r2, [r2, #8]
 801016e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	689b      	ldr	r3, [r3, #8]
 8010174:	687a      	ldr	r2, [r7, #4]
 8010176:	6852      	ldr	r2, [r2, #4]
 8010178:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	685b      	ldr	r3, [r3, #4]
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	429a      	cmp	r2, r3
 8010182:	d103      	bne.n	801018c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	689a      	ldr	r2, [r3, #8]
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	2200      	movs	r2, #0
 8010190:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	1e5a      	subs	r2, r3, #1
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3714      	adds	r7, #20
 80101a4:	46bd      	mov	sp, r7
 80101a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101aa:	4770      	bx	lr

080101ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d10a      	bne.n	80101d6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80101c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c4:	f383 8811 	msr	BASEPRI, r3
 80101c8:	f3bf 8f6f 	isb	sy
 80101cc:	f3bf 8f4f 	dsb	sy
 80101d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80101d2:	bf00      	nop
 80101d4:	e7fe      	b.n	80101d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80101d6:	f003 f8ad 	bl	8013334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	681a      	ldr	r2, [r3, #0]
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101e2:	68f9      	ldr	r1, [r7, #12]
 80101e4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80101e6:	fb01 f303 	mul.w	r3, r1, r3
 80101ea:	441a      	add	r2, r3
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2200      	movs	r2, #0
 80101f4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	68fb      	ldr	r3, [r7, #12]
 8010204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010206:	3b01      	subs	r3, #1
 8010208:	68f9      	ldr	r1, [r7, #12]
 801020a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801020c:	fb01 f303 	mul.w	r3, r1, r3
 8010210:	441a      	add	r2, r3
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	22ff      	movs	r2, #255	; 0xff
 801021a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	22ff      	movs	r2, #255	; 0xff
 8010222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d114      	bne.n	8010256 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	691b      	ldr	r3, [r3, #16]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d01a      	beq.n	801026a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	3310      	adds	r3, #16
 8010238:	4618      	mov	r0, r3
 801023a:	f001 fd91 	bl	8011d60 <xTaskRemoveFromEventList>
 801023e:	4603      	mov	r3, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	d012      	beq.n	801026a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010244:	4b0c      	ldr	r3, [pc, #48]	; (8010278 <xQueueGenericReset+0xcc>)
 8010246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801024a:	601a      	str	r2, [r3, #0]
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	f3bf 8f6f 	isb	sy
 8010254:	e009      	b.n	801026a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	3310      	adds	r3, #16
 801025a:	4618      	mov	r0, r3
 801025c:	f7ff fef2 	bl	8010044 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	3324      	adds	r3, #36	; 0x24
 8010264:	4618      	mov	r0, r3
 8010266:	f7ff feed 	bl	8010044 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801026a:	f003 f893 	bl	8013394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801026e:	2301      	movs	r3, #1
}
 8010270:	4618      	mov	r0, r3
 8010272:	3710      	adds	r7, #16
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}
 8010278:	e000ed04 	.word	0xe000ed04

0801027c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801027c:	b580      	push	{r7, lr}
 801027e:	b08e      	sub	sp, #56	; 0x38
 8010280:	af02      	add	r7, sp, #8
 8010282:	60f8      	str	r0, [r7, #12]
 8010284:	60b9      	str	r1, [r7, #8]
 8010286:	607a      	str	r2, [r7, #4]
 8010288:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d10a      	bne.n	80102a6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010294:	f383 8811 	msr	BASEPRI, r3
 8010298:	f3bf 8f6f 	isb	sy
 801029c:	f3bf 8f4f 	dsb	sy
 80102a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80102a2:	bf00      	nop
 80102a4:	e7fe      	b.n	80102a4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d10a      	bne.n	80102c2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80102ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102b0:	f383 8811 	msr	BASEPRI, r3
 80102b4:	f3bf 8f6f 	isb	sy
 80102b8:	f3bf 8f4f 	dsb	sy
 80102bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80102be:	bf00      	nop
 80102c0:	e7fe      	b.n	80102c0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d002      	beq.n	80102ce <xQueueGenericCreateStatic+0x52>
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d001      	beq.n	80102d2 <xQueueGenericCreateStatic+0x56>
 80102ce:	2301      	movs	r3, #1
 80102d0:	e000      	b.n	80102d4 <xQueueGenericCreateStatic+0x58>
 80102d2:	2300      	movs	r3, #0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d10a      	bne.n	80102ee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80102d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102dc:	f383 8811 	msr	BASEPRI, r3
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	f3bf 8f4f 	dsb	sy
 80102e8:	623b      	str	r3, [r7, #32]
}
 80102ea:	bf00      	nop
 80102ec:	e7fe      	b.n	80102ec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d102      	bne.n	80102fa <xQueueGenericCreateStatic+0x7e>
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d101      	bne.n	80102fe <xQueueGenericCreateStatic+0x82>
 80102fa:	2301      	movs	r3, #1
 80102fc:	e000      	b.n	8010300 <xQueueGenericCreateStatic+0x84>
 80102fe:	2300      	movs	r3, #0
 8010300:	2b00      	cmp	r3, #0
 8010302:	d10a      	bne.n	801031a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	61fb      	str	r3, [r7, #28]
}
 8010316:	bf00      	nop
 8010318:	e7fe      	b.n	8010318 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801031a:	2350      	movs	r3, #80	; 0x50
 801031c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	2b50      	cmp	r3, #80	; 0x50
 8010322:	d00a      	beq.n	801033a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8010324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010328:	f383 8811 	msr	BASEPRI, r3
 801032c:	f3bf 8f6f 	isb	sy
 8010330:	f3bf 8f4f 	dsb	sy
 8010334:	61bb      	str	r3, [r7, #24]
}
 8010336:	bf00      	nop
 8010338:	e7fe      	b.n	8010338 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801033a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00d      	beq.n	8010362 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010348:	2201      	movs	r2, #1
 801034a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801034e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010354:	9300      	str	r3, [sp, #0]
 8010356:	4613      	mov	r3, r2
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	68b9      	ldr	r1, [r7, #8]
 801035c:	68f8      	ldr	r0, [r7, #12]
 801035e:	f000 f83f 	bl	80103e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010364:	4618      	mov	r0, r3
 8010366:	3730      	adds	r7, #48	; 0x30
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801036c:	b580      	push	{r7, lr}
 801036e:	b08a      	sub	sp, #40	; 0x28
 8010370:	af02      	add	r7, sp, #8
 8010372:	60f8      	str	r0, [r7, #12]
 8010374:	60b9      	str	r1, [r7, #8]
 8010376:	4613      	mov	r3, r2
 8010378:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d10a      	bne.n	8010396 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010384:	f383 8811 	msr	BASEPRI, r3
 8010388:	f3bf 8f6f 	isb	sy
 801038c:	f3bf 8f4f 	dsb	sy
 8010390:	613b      	str	r3, [r7, #16]
}
 8010392:	bf00      	nop
 8010394:	e7fe      	b.n	8010394 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	fb02 f303 	mul.w	r3, r2, r3
 801039e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	3350      	adds	r3, #80	; 0x50
 80103a4:	4618      	mov	r0, r3
 80103a6:	f003 f8e7 	bl	8013578 <pvPortMalloc>
 80103aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80103ac:	69bb      	ldr	r3, [r7, #24]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d011      	beq.n	80103d6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	3350      	adds	r3, #80	; 0x50
 80103ba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80103bc:	69bb      	ldr	r3, [r7, #24]
 80103be:	2200      	movs	r2, #0
 80103c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80103c4:	79fa      	ldrb	r2, [r7, #7]
 80103c6:	69bb      	ldr	r3, [r7, #24]
 80103c8:	9300      	str	r3, [sp, #0]
 80103ca:	4613      	mov	r3, r2
 80103cc:	697a      	ldr	r2, [r7, #20]
 80103ce:	68b9      	ldr	r1, [r7, #8]
 80103d0:	68f8      	ldr	r0, [r7, #12]
 80103d2:	f000 f805 	bl	80103e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80103d6:	69bb      	ldr	r3, [r7, #24]
	}
 80103d8:	4618      	mov	r0, r3
 80103da:	3720      	adds	r7, #32
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	60f8      	str	r0, [r7, #12]
 80103e8:	60b9      	str	r1, [r7, #8]
 80103ea:	607a      	str	r2, [r7, #4]
 80103ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d103      	bne.n	80103fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80103f4:	69bb      	ldr	r3, [r7, #24]
 80103f6:	69ba      	ldr	r2, [r7, #24]
 80103f8:	601a      	str	r2, [r3, #0]
 80103fa:	e002      	b.n	8010402 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	687a      	ldr	r2, [r7, #4]
 8010400:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	68ba      	ldr	r2, [r7, #8]
 801040c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801040e:	2101      	movs	r1, #1
 8010410:	69b8      	ldr	r0, [r7, #24]
 8010412:	f7ff fecb 	bl	80101ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8010416:	69bb      	ldr	r3, [r7, #24]
 8010418:	78fa      	ldrb	r2, [r7, #3]
 801041a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801041e:	bf00      	nop
 8010420:	3710      	adds	r7, #16
 8010422:	46bd      	mov	sp, r7
 8010424:	bd80      	pop	{r7, pc}

08010426 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010426:	b580      	push	{r7, lr}
 8010428:	b082      	sub	sp, #8
 801042a:	af00      	add	r7, sp, #0
 801042c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d00e      	beq.n	8010452 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2200      	movs	r2, #0
 801043e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	2200      	movs	r2, #0
 8010444:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010446:	2300      	movs	r3, #0
 8010448:	2200      	movs	r2, #0
 801044a:	2100      	movs	r1, #0
 801044c:	6878      	ldr	r0, [r7, #4]
 801044e:	f000 f90b 	bl	8010668 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010452:	bf00      	nop
 8010454:	3708      	adds	r7, #8
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}

0801045a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801045a:	b580      	push	{r7, lr}
 801045c:	b086      	sub	sp, #24
 801045e:	af00      	add	r7, sp, #0
 8010460:	4603      	mov	r3, r0
 8010462:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010464:	2301      	movs	r3, #1
 8010466:	617b      	str	r3, [r7, #20]
 8010468:	2300      	movs	r3, #0
 801046a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 801046c:	79fb      	ldrb	r3, [r7, #7]
 801046e:	461a      	mov	r2, r3
 8010470:	6939      	ldr	r1, [r7, #16]
 8010472:	6978      	ldr	r0, [r7, #20]
 8010474:	f7ff ff7a 	bl	801036c <xQueueGenericCreate>
 8010478:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801047a:	68f8      	ldr	r0, [r7, #12]
 801047c:	f7ff ffd3 	bl	8010426 <prvInitialiseMutex>

		return xNewQueue;
 8010480:	68fb      	ldr	r3, [r7, #12]
	}
 8010482:	4618      	mov	r0, r3
 8010484:	3718      	adds	r7, #24
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}

0801048a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 801048a:	b580      	push	{r7, lr}
 801048c:	b088      	sub	sp, #32
 801048e:	af02      	add	r7, sp, #8
 8010490:	4603      	mov	r3, r0
 8010492:	6039      	str	r1, [r7, #0]
 8010494:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010496:	2301      	movs	r3, #1
 8010498:	617b      	str	r3, [r7, #20]
 801049a:	2300      	movs	r3, #0
 801049c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801049e:	79fb      	ldrb	r3, [r7, #7]
 80104a0:	9300      	str	r3, [sp, #0]
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	2200      	movs	r2, #0
 80104a6:	6939      	ldr	r1, [r7, #16]
 80104a8:	6978      	ldr	r0, [r7, #20]
 80104aa:	f7ff fee7 	bl	801027c <xQueueGenericCreateStatic>
 80104ae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f7ff ffb8 	bl	8010426 <prvInitialiseMutex>

		return xNewQueue;
 80104b6:	68fb      	ldr	r3, [r7, #12]
	}
 80104b8:	4618      	mov	r0, r3
 80104ba:	3718      	adds	r7, #24
 80104bc:	46bd      	mov	sp, r7
 80104be:	bd80      	pop	{r7, pc}

080104c0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80104c0:	b590      	push	{r4, r7, lr}
 80104c2:	b087      	sub	sp, #28
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d10a      	bne.n	80104e8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80104d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d6:	f383 8811 	msr	BASEPRI, r3
 80104da:	f3bf 8f6f 	isb	sy
 80104de:	f3bf 8f4f 	dsb	sy
 80104e2:	60fb      	str	r3, [r7, #12]
}
 80104e4:	bf00      	nop
 80104e6:	e7fe      	b.n	80104e6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	689c      	ldr	r4, [r3, #8]
 80104ec:	f001 fdfa 	bl	80120e4 <xTaskGetCurrentTaskHandle>
 80104f0:	4603      	mov	r3, r0
 80104f2:	429c      	cmp	r4, r3
 80104f4:	d111      	bne.n	801051a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80104f6:	693b      	ldr	r3, [r7, #16]
 80104f8:	68db      	ldr	r3, [r3, #12]
 80104fa:	1e5a      	subs	r2, r3, #1
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	68db      	ldr	r3, [r3, #12]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d105      	bne.n	8010514 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8010508:	2300      	movs	r3, #0
 801050a:	2200      	movs	r2, #0
 801050c:	2100      	movs	r1, #0
 801050e:	6938      	ldr	r0, [r7, #16]
 8010510:	f000 f8aa 	bl	8010668 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8010514:	2301      	movs	r3, #1
 8010516:	617b      	str	r3, [r7, #20]
 8010518:	e001      	b.n	801051e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 801051a:	2300      	movs	r3, #0
 801051c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 801051e:	697b      	ldr	r3, [r7, #20]
	}
 8010520:	4618      	mov	r0, r3
 8010522:	371c      	adds	r7, #28
 8010524:	46bd      	mov	sp, r7
 8010526:	bd90      	pop	{r4, r7, pc}

08010528 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8010528:	b590      	push	{r4, r7, lr}
 801052a:	b087      	sub	sp, #28
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
 8010530:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8010536:	693b      	ldr	r3, [r7, #16]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d10a      	bne.n	8010552 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 801053c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	60fb      	str	r3, [r7, #12]
}
 801054e:	bf00      	nop
 8010550:	e7fe      	b.n	8010550 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	689c      	ldr	r4, [r3, #8]
 8010556:	f001 fdc5 	bl	80120e4 <xTaskGetCurrentTaskHandle>
 801055a:	4603      	mov	r3, r0
 801055c:	429c      	cmp	r4, r3
 801055e:	d107      	bne.n	8010570 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010560:	693b      	ldr	r3, [r7, #16]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	1c5a      	adds	r2, r3, #1
 8010566:	693b      	ldr	r3, [r7, #16]
 8010568:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 801056a:	2301      	movs	r3, #1
 801056c:	617b      	str	r3, [r7, #20]
 801056e:	e00c      	b.n	801058a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8010570:	6839      	ldr	r1, [r7, #0]
 8010572:	6938      	ldr	r0, [r7, #16]
 8010574:	f000 fb7e 	bl	8010c74 <xQueueSemaphoreTake>
 8010578:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 801057a:	697b      	ldr	r3, [r7, #20]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d004      	beq.n	801058a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	1c5a      	adds	r2, r3, #1
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 801058a:	697b      	ldr	r3, [r7, #20]
	}
 801058c:	4618      	mov	r0, r3
 801058e:	371c      	adds	r7, #28
 8010590:	46bd      	mov	sp, r7
 8010592:	bd90      	pop	{r4, r7, pc}

08010594 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8010594:	b580      	push	{r7, lr}
 8010596:	b08a      	sub	sp, #40	; 0x28
 8010598:	af02      	add	r7, sp, #8
 801059a:	60f8      	str	r0, [r7, #12]
 801059c:	60b9      	str	r1, [r7, #8]
 801059e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d10a      	bne.n	80105bc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80105a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105aa:	f383 8811 	msr	BASEPRI, r3
 80105ae:	f3bf 8f6f 	isb	sy
 80105b2:	f3bf 8f4f 	dsb	sy
 80105b6:	61bb      	str	r3, [r7, #24]
}
 80105b8:	bf00      	nop
 80105ba:	e7fe      	b.n	80105ba <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80105bc:	68ba      	ldr	r2, [r7, #8]
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d90a      	bls.n	80105da <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80105c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c8:	f383 8811 	msr	BASEPRI, r3
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	617b      	str	r3, [r7, #20]
}
 80105d6:	bf00      	nop
 80105d8:	e7fe      	b.n	80105d8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80105da:	2302      	movs	r3, #2
 80105dc:	9300      	str	r3, [sp, #0]
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2200      	movs	r2, #0
 80105e2:	2100      	movs	r1, #0
 80105e4:	68f8      	ldr	r0, [r7, #12]
 80105e6:	f7ff fe49 	bl	801027c <xQueueGenericCreateStatic>
 80105ea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80105ec:	69fb      	ldr	r3, [r7, #28]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d002      	beq.n	80105f8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80105f2:	69fb      	ldr	r3, [r7, #28]
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80105f8:	69fb      	ldr	r3, [r7, #28]
	}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3720      	adds	r7, #32
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010602:	b580      	push	{r7, lr}
 8010604:	b086      	sub	sp, #24
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
 801060a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d10a      	bne.n	8010628 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010616:	f383 8811 	msr	BASEPRI, r3
 801061a:	f3bf 8f6f 	isb	sy
 801061e:	f3bf 8f4f 	dsb	sy
 8010622:	613b      	str	r3, [r7, #16]
}
 8010624:	bf00      	nop
 8010626:	e7fe      	b.n	8010626 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8010628:	683a      	ldr	r2, [r7, #0]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	429a      	cmp	r2, r3
 801062e:	d90a      	bls.n	8010646 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010634:	f383 8811 	msr	BASEPRI, r3
 8010638:	f3bf 8f6f 	isb	sy
 801063c:	f3bf 8f4f 	dsb	sy
 8010640:	60fb      	str	r3, [r7, #12]
}
 8010642:	bf00      	nop
 8010644:	e7fe      	b.n	8010644 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010646:	2202      	movs	r2, #2
 8010648:	2100      	movs	r1, #0
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f7ff fe8e 	bl	801036c <xQueueGenericCreate>
 8010650:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010652:	697b      	ldr	r3, [r7, #20]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d002      	beq.n	801065e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801065e:	697b      	ldr	r3, [r7, #20]
	}
 8010660:	4618      	mov	r0, r3
 8010662:	3718      	adds	r7, #24
 8010664:	46bd      	mov	sp, r7
 8010666:	bd80      	pop	{r7, pc}

08010668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b08e      	sub	sp, #56	; 0x38
 801066c:	af00      	add	r7, sp, #0
 801066e:	60f8      	str	r0, [r7, #12]
 8010670:	60b9      	str	r1, [r7, #8]
 8010672:	607a      	str	r2, [r7, #4]
 8010674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010676:	2300      	movs	r3, #0
 8010678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801067e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010680:	2b00      	cmp	r3, #0
 8010682:	d10a      	bne.n	801069a <xQueueGenericSend+0x32>
	__asm volatile
 8010684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010688:	f383 8811 	msr	BASEPRI, r3
 801068c:	f3bf 8f6f 	isb	sy
 8010690:	f3bf 8f4f 	dsb	sy
 8010694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010696:	bf00      	nop
 8010698:	e7fe      	b.n	8010698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d103      	bne.n	80106a8 <xQueueGenericSend+0x40>
 80106a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d101      	bne.n	80106ac <xQueueGenericSend+0x44>
 80106a8:	2301      	movs	r3, #1
 80106aa:	e000      	b.n	80106ae <xQueueGenericSend+0x46>
 80106ac:	2300      	movs	r3, #0
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d10a      	bne.n	80106c8 <xQueueGenericSend+0x60>
	__asm volatile
 80106b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106b6:	f383 8811 	msr	BASEPRI, r3
 80106ba:	f3bf 8f6f 	isb	sy
 80106be:	f3bf 8f4f 	dsb	sy
 80106c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80106c4:	bf00      	nop
 80106c6:	e7fe      	b.n	80106c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	2b02      	cmp	r3, #2
 80106cc:	d103      	bne.n	80106d6 <xQueueGenericSend+0x6e>
 80106ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106d2:	2b01      	cmp	r3, #1
 80106d4:	d101      	bne.n	80106da <xQueueGenericSend+0x72>
 80106d6:	2301      	movs	r3, #1
 80106d8:	e000      	b.n	80106dc <xQueueGenericSend+0x74>
 80106da:	2300      	movs	r3, #0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d10a      	bne.n	80106f6 <xQueueGenericSend+0x8e>
	__asm volatile
 80106e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e4:	f383 8811 	msr	BASEPRI, r3
 80106e8:	f3bf 8f6f 	isb	sy
 80106ec:	f3bf 8f4f 	dsb	sy
 80106f0:	623b      	str	r3, [r7, #32]
}
 80106f2:	bf00      	nop
 80106f4:	e7fe      	b.n	80106f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80106f6:	f001 fd05 	bl	8012104 <xTaskGetSchedulerState>
 80106fa:	4603      	mov	r3, r0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d102      	bne.n	8010706 <xQueueGenericSend+0x9e>
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d101      	bne.n	801070a <xQueueGenericSend+0xa2>
 8010706:	2301      	movs	r3, #1
 8010708:	e000      	b.n	801070c <xQueueGenericSend+0xa4>
 801070a:	2300      	movs	r3, #0
 801070c:	2b00      	cmp	r3, #0
 801070e:	d10a      	bne.n	8010726 <xQueueGenericSend+0xbe>
	__asm volatile
 8010710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010714:	f383 8811 	msr	BASEPRI, r3
 8010718:	f3bf 8f6f 	isb	sy
 801071c:	f3bf 8f4f 	dsb	sy
 8010720:	61fb      	str	r3, [r7, #28]
}
 8010722:	bf00      	nop
 8010724:	e7fe      	b.n	8010724 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010726:	f002 fe05 	bl	8013334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801072a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801072c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801072e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010732:	429a      	cmp	r2, r3
 8010734:	d302      	bcc.n	801073c <xQueueGenericSend+0xd4>
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	2b02      	cmp	r3, #2
 801073a:	d129      	bne.n	8010790 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801073c:	683a      	ldr	r2, [r7, #0]
 801073e:	68b9      	ldr	r1, [r7, #8]
 8010740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010742:	f000 fc5e 	bl	8011002 <prvCopyDataToQueue>
 8010746:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801074c:	2b00      	cmp	r3, #0
 801074e:	d010      	beq.n	8010772 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010752:	3324      	adds	r3, #36	; 0x24
 8010754:	4618      	mov	r0, r3
 8010756:	f001 fb03 	bl	8011d60 <xTaskRemoveFromEventList>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d013      	beq.n	8010788 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010760:	4b3f      	ldr	r3, [pc, #252]	; (8010860 <xQueueGenericSend+0x1f8>)
 8010762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010766:	601a      	str	r2, [r3, #0]
 8010768:	f3bf 8f4f 	dsb	sy
 801076c:	f3bf 8f6f 	isb	sy
 8010770:	e00a      	b.n	8010788 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010774:	2b00      	cmp	r3, #0
 8010776:	d007      	beq.n	8010788 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010778:	4b39      	ldr	r3, [pc, #228]	; (8010860 <xQueueGenericSend+0x1f8>)
 801077a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801077e:	601a      	str	r2, [r3, #0]
 8010780:	f3bf 8f4f 	dsb	sy
 8010784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010788:	f002 fe04 	bl	8013394 <vPortExitCritical>
				return pdPASS;
 801078c:	2301      	movs	r3, #1
 801078e:	e063      	b.n	8010858 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d103      	bne.n	801079e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010796:	f002 fdfd 	bl	8013394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801079a:	2300      	movs	r3, #0
 801079c:	e05c      	b.n	8010858 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801079e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d106      	bne.n	80107b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80107a4:	f107 0314 	add.w	r3, r7, #20
 80107a8:	4618      	mov	r0, r3
 80107aa:	f001 fb3d 	bl	8011e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80107ae:	2301      	movs	r3, #1
 80107b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80107b2:	f002 fdef 	bl	8013394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80107b6:	f001 f897 	bl	80118e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80107ba:	f002 fdbb 	bl	8013334 <vPortEnterCritical>
 80107be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80107c4:	b25b      	sxtb	r3, r3
 80107c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ca:	d103      	bne.n	80107d4 <xQueueGenericSend+0x16c>
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	2200      	movs	r2, #0
 80107d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80107d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80107da:	b25b      	sxtb	r3, r3
 80107dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107e0:	d103      	bne.n	80107ea <xQueueGenericSend+0x182>
 80107e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107e4:	2200      	movs	r2, #0
 80107e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80107ea:	f002 fdd3 	bl	8013394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80107ee:	1d3a      	adds	r2, r7, #4
 80107f0:	f107 0314 	add.w	r3, r7, #20
 80107f4:	4611      	mov	r1, r2
 80107f6:	4618      	mov	r0, r3
 80107f8:	f001 fb2c 	bl	8011e54 <xTaskCheckForTimeOut>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d124      	bne.n	801084c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010804:	f000 fcf5 	bl	80111f2 <prvIsQueueFull>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d018      	beq.n	8010840 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801080e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010810:	3310      	adds	r3, #16
 8010812:	687a      	ldr	r2, [r7, #4]
 8010814:	4611      	mov	r1, r2
 8010816:	4618      	mov	r0, r3
 8010818:	f001 fa52 	bl	8011cc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801081c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801081e:	f000 fc80 	bl	8011122 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010822:	f001 f86f 	bl	8011904 <xTaskResumeAll>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	f47f af7c 	bne.w	8010726 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801082e:	4b0c      	ldr	r3, [pc, #48]	; (8010860 <xQueueGenericSend+0x1f8>)
 8010830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010834:	601a      	str	r2, [r3, #0]
 8010836:	f3bf 8f4f 	dsb	sy
 801083a:	f3bf 8f6f 	isb	sy
 801083e:	e772      	b.n	8010726 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010842:	f000 fc6e 	bl	8011122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010846:	f001 f85d 	bl	8011904 <xTaskResumeAll>
 801084a:	e76c      	b.n	8010726 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801084c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801084e:	f000 fc68 	bl	8011122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010852:	f001 f857 	bl	8011904 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010858:	4618      	mov	r0, r3
 801085a:	3738      	adds	r7, #56	; 0x38
 801085c:	46bd      	mov	sp, r7
 801085e:	bd80      	pop	{r7, pc}
 8010860:	e000ed04 	.word	0xe000ed04

08010864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010864:	b580      	push	{r7, lr}
 8010866:	b090      	sub	sp, #64	; 0x40
 8010868:	af00      	add	r7, sp, #0
 801086a:	60f8      	str	r0, [r7, #12]
 801086c:	60b9      	str	r1, [r7, #8]
 801086e:	607a      	str	r2, [r7, #4]
 8010870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010878:	2b00      	cmp	r3, #0
 801087a:	d10a      	bne.n	8010892 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801087c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010880:	f383 8811 	msr	BASEPRI, r3
 8010884:	f3bf 8f6f 	isb	sy
 8010888:	f3bf 8f4f 	dsb	sy
 801088c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801088e:	bf00      	nop
 8010890:	e7fe      	b.n	8010890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d103      	bne.n	80108a0 <xQueueGenericSendFromISR+0x3c>
 8010898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801089a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801089c:	2b00      	cmp	r3, #0
 801089e:	d101      	bne.n	80108a4 <xQueueGenericSendFromISR+0x40>
 80108a0:	2301      	movs	r3, #1
 80108a2:	e000      	b.n	80108a6 <xQueueGenericSendFromISR+0x42>
 80108a4:	2300      	movs	r3, #0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d10a      	bne.n	80108c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80108aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ae:	f383 8811 	msr	BASEPRI, r3
 80108b2:	f3bf 8f6f 	isb	sy
 80108b6:	f3bf 8f4f 	dsb	sy
 80108ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80108bc:	bf00      	nop
 80108be:	e7fe      	b.n	80108be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	2b02      	cmp	r3, #2
 80108c4:	d103      	bne.n	80108ce <xQueueGenericSendFromISR+0x6a>
 80108c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108ca:	2b01      	cmp	r3, #1
 80108cc:	d101      	bne.n	80108d2 <xQueueGenericSendFromISR+0x6e>
 80108ce:	2301      	movs	r3, #1
 80108d0:	e000      	b.n	80108d4 <xQueueGenericSendFromISR+0x70>
 80108d2:	2300      	movs	r3, #0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d10a      	bne.n	80108ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80108d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108dc:	f383 8811 	msr	BASEPRI, r3
 80108e0:	f3bf 8f6f 	isb	sy
 80108e4:	f3bf 8f4f 	dsb	sy
 80108e8:	623b      	str	r3, [r7, #32]
}
 80108ea:	bf00      	nop
 80108ec:	e7fe      	b.n	80108ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80108ee:	f002 fe03 	bl	80134f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80108f2:	f3ef 8211 	mrs	r2, BASEPRI
 80108f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108fa:	f383 8811 	msr	BASEPRI, r3
 80108fe:	f3bf 8f6f 	isb	sy
 8010902:	f3bf 8f4f 	dsb	sy
 8010906:	61fa      	str	r2, [r7, #28]
 8010908:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801090a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801090c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801090e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010916:	429a      	cmp	r2, r3
 8010918:	d302      	bcc.n	8010920 <xQueueGenericSendFromISR+0xbc>
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b02      	cmp	r3, #2
 801091e:	d12f      	bne.n	8010980 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801092a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801092e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	68b9      	ldr	r1, [r7, #8]
 8010934:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010936:	f000 fb64 	bl	8011002 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801093a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801093e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010942:	d112      	bne.n	801096a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010948:	2b00      	cmp	r3, #0
 801094a:	d016      	beq.n	801097a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801094c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094e:	3324      	adds	r3, #36	; 0x24
 8010950:	4618      	mov	r0, r3
 8010952:	f001 fa05 	bl	8011d60 <xTaskRemoveFromEventList>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d00e      	beq.n	801097a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d00b      	beq.n	801097a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	2201      	movs	r2, #1
 8010966:	601a      	str	r2, [r3, #0]
 8010968:	e007      	b.n	801097a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801096a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801096e:	3301      	adds	r3, #1
 8010970:	b2db      	uxtb	r3, r3
 8010972:	b25a      	sxtb	r2, r3
 8010974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801097a:	2301      	movs	r3, #1
 801097c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801097e:	e001      	b.n	8010984 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010980:	2300      	movs	r3, #0
 8010982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010986:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801098e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010992:	4618      	mov	r0, r3
 8010994:	3740      	adds	r7, #64	; 0x40
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801099a:	b580      	push	{r7, lr}
 801099c:	b08e      	sub	sp, #56	; 0x38
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
 80109a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80109a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d10a      	bne.n	80109c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80109ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b2:	f383 8811 	msr	BASEPRI, r3
 80109b6:	f3bf 8f6f 	isb	sy
 80109ba:	f3bf 8f4f 	dsb	sy
 80109be:	623b      	str	r3, [r7, #32]
}
 80109c0:	bf00      	nop
 80109c2:	e7fe      	b.n	80109c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80109c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d00a      	beq.n	80109e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80109cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109d0:	f383 8811 	msr	BASEPRI, r3
 80109d4:	f3bf 8f6f 	isb	sy
 80109d8:	f3bf 8f4f 	dsb	sy
 80109dc:	61fb      	str	r3, [r7, #28]
}
 80109de:	bf00      	nop
 80109e0:	e7fe      	b.n	80109e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80109e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d103      	bne.n	80109f2 <xQueueGiveFromISR+0x58>
 80109ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ec:	689b      	ldr	r3, [r3, #8]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d101      	bne.n	80109f6 <xQueueGiveFromISR+0x5c>
 80109f2:	2301      	movs	r3, #1
 80109f4:	e000      	b.n	80109f8 <xQueueGiveFromISR+0x5e>
 80109f6:	2300      	movs	r3, #0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d10a      	bne.n	8010a12 <xQueueGiveFromISR+0x78>
	__asm volatile
 80109fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a00:	f383 8811 	msr	BASEPRI, r3
 8010a04:	f3bf 8f6f 	isb	sy
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	61bb      	str	r3, [r7, #24]
}
 8010a0e:	bf00      	nop
 8010a10:	e7fe      	b.n	8010a10 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010a12:	f002 fd71 	bl	80134f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010a16:	f3ef 8211 	mrs	r2, BASEPRI
 8010a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1e:	f383 8811 	msr	BASEPRI, r3
 8010a22:	f3bf 8f6f 	isb	sy
 8010a26:	f3bf 8f4f 	dsb	sy
 8010a2a:	617a      	str	r2, [r7, #20]
 8010a2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010a2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010a30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010a3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d22b      	bcs.n	8010a9a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a4e:	1c5a      	adds	r2, r3, #1
 8010a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010a54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5c:	d112      	bne.n	8010a84 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d016      	beq.n	8010a94 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a68:	3324      	adds	r3, #36	; 0x24
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f001 f978 	bl	8011d60 <xTaskRemoveFromEventList>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d00e      	beq.n	8010a94 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d00b      	beq.n	8010a94 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	2201      	movs	r2, #1
 8010a80:	601a      	str	r2, [r3, #0]
 8010a82:	e007      	b.n	8010a94 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010a84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a88:	3301      	adds	r3, #1
 8010a8a:	b2db      	uxtb	r3, r3
 8010a8c:	b25a      	sxtb	r2, r3
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010a94:	2301      	movs	r3, #1
 8010a96:	637b      	str	r3, [r7, #52]	; 0x34
 8010a98:	e001      	b.n	8010a9e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8010a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aa0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	f383 8811 	msr	BASEPRI, r3
}
 8010aa8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3738      	adds	r7, #56	; 0x38
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}

08010ab4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b08c      	sub	sp, #48	; 0x30
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	60f8      	str	r0, [r7, #12]
 8010abc:	60b9      	str	r1, [r7, #8]
 8010abe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d10a      	bne.n	8010ae4 <xQueueReceive+0x30>
	__asm volatile
 8010ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad2:	f383 8811 	msr	BASEPRI, r3
 8010ad6:	f3bf 8f6f 	isb	sy
 8010ada:	f3bf 8f4f 	dsb	sy
 8010ade:	623b      	str	r3, [r7, #32]
}
 8010ae0:	bf00      	nop
 8010ae2:	e7fe      	b.n	8010ae2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d103      	bne.n	8010af2 <xQueueReceive+0x3e>
 8010aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d101      	bne.n	8010af6 <xQueueReceive+0x42>
 8010af2:	2301      	movs	r3, #1
 8010af4:	e000      	b.n	8010af8 <xQueueReceive+0x44>
 8010af6:	2300      	movs	r3, #0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d10a      	bne.n	8010b12 <xQueueReceive+0x5e>
	__asm volatile
 8010afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b00:	f383 8811 	msr	BASEPRI, r3
 8010b04:	f3bf 8f6f 	isb	sy
 8010b08:	f3bf 8f4f 	dsb	sy
 8010b0c:	61fb      	str	r3, [r7, #28]
}
 8010b0e:	bf00      	nop
 8010b10:	e7fe      	b.n	8010b10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b12:	f001 faf7 	bl	8012104 <xTaskGetSchedulerState>
 8010b16:	4603      	mov	r3, r0
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d102      	bne.n	8010b22 <xQueueReceive+0x6e>
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d101      	bne.n	8010b26 <xQueueReceive+0x72>
 8010b22:	2301      	movs	r3, #1
 8010b24:	e000      	b.n	8010b28 <xQueueReceive+0x74>
 8010b26:	2300      	movs	r3, #0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d10a      	bne.n	8010b42 <xQueueReceive+0x8e>
	__asm volatile
 8010b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b30:	f383 8811 	msr	BASEPRI, r3
 8010b34:	f3bf 8f6f 	isb	sy
 8010b38:	f3bf 8f4f 	dsb	sy
 8010b3c:	61bb      	str	r3, [r7, #24]
}
 8010b3e:	bf00      	nop
 8010b40:	e7fe      	b.n	8010b40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010b42:	f002 fbf7 	bl	8013334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d01f      	beq.n	8010b92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010b52:	68b9      	ldr	r1, [r7, #8]
 8010b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b56:	f000 fabe 	bl	80110d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5c:	1e5a      	subs	r2, r3, #1
 8010b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b64:	691b      	ldr	r3, [r3, #16]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d00f      	beq.n	8010b8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b6c:	3310      	adds	r3, #16
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f001 f8f6 	bl	8011d60 <xTaskRemoveFromEventList>
 8010b74:	4603      	mov	r3, r0
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d007      	beq.n	8010b8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010b7a:	4b3d      	ldr	r3, [pc, #244]	; (8010c70 <xQueueReceive+0x1bc>)
 8010b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b80:	601a      	str	r2, [r3, #0]
 8010b82:	f3bf 8f4f 	dsb	sy
 8010b86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010b8a:	f002 fc03 	bl	8013394 <vPortExitCritical>
				return pdPASS;
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e069      	b.n	8010c66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d103      	bne.n	8010ba0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010b98:	f002 fbfc 	bl	8013394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	e062      	b.n	8010c66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d106      	bne.n	8010bb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010ba6:	f107 0310 	add.w	r3, r7, #16
 8010baa:	4618      	mov	r0, r3
 8010bac:	f001 f93c 	bl	8011e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010bb0:	2301      	movs	r3, #1
 8010bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010bb4:	f002 fbee 	bl	8013394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010bb8:	f000 fe96 	bl	80118e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010bbc:	f002 fbba 	bl	8013334 <vPortEnterCritical>
 8010bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010bc6:	b25b      	sxtb	r3, r3
 8010bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bcc:	d103      	bne.n	8010bd6 <xQueueReceive+0x122>
 8010bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd0:	2200      	movs	r2, #0
 8010bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010bdc:	b25b      	sxtb	r3, r3
 8010bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010be2:	d103      	bne.n	8010bec <xQueueReceive+0x138>
 8010be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010be6:	2200      	movs	r2, #0
 8010be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010bec:	f002 fbd2 	bl	8013394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010bf0:	1d3a      	adds	r2, r7, #4
 8010bf2:	f107 0310 	add.w	r3, r7, #16
 8010bf6:	4611      	mov	r1, r2
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f001 f92b 	bl	8011e54 <xTaskCheckForTimeOut>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d123      	bne.n	8010c4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c06:	f000 fade 	bl	80111c6 <prvIsQueueEmpty>
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d017      	beq.n	8010c40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c12:	3324      	adds	r3, #36	; 0x24
 8010c14:	687a      	ldr	r2, [r7, #4]
 8010c16:	4611      	mov	r1, r2
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f001 f851 	bl	8011cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010c1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c20:	f000 fa7f 	bl	8011122 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010c24:	f000 fe6e 	bl	8011904 <xTaskResumeAll>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d189      	bne.n	8010b42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010c2e:	4b10      	ldr	r3, [pc, #64]	; (8010c70 <xQueueReceive+0x1bc>)
 8010c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c34:	601a      	str	r2, [r3, #0]
 8010c36:	f3bf 8f4f 	dsb	sy
 8010c3a:	f3bf 8f6f 	isb	sy
 8010c3e:	e780      	b.n	8010b42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c42:	f000 fa6e 	bl	8011122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010c46:	f000 fe5d 	bl	8011904 <xTaskResumeAll>
 8010c4a:	e77a      	b.n	8010b42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c4e:	f000 fa68 	bl	8011122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010c52:	f000 fe57 	bl	8011904 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c58:	f000 fab5 	bl	80111c6 <prvIsQueueEmpty>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	f43f af6f 	beq.w	8010b42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010c64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3730      	adds	r7, #48	; 0x30
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	e000ed04 	.word	0xe000ed04

08010c74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b08e      	sub	sp, #56	; 0x38
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010c7e:	2300      	movs	r3, #0
 8010c80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010c86:	2300      	movs	r3, #0
 8010c88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d10a      	bne.n	8010ca6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c94:	f383 8811 	msr	BASEPRI, r3
 8010c98:	f3bf 8f6f 	isb	sy
 8010c9c:	f3bf 8f4f 	dsb	sy
 8010ca0:	623b      	str	r3, [r7, #32]
}
 8010ca2:	bf00      	nop
 8010ca4:	e7fe      	b.n	8010ca4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d00a      	beq.n	8010cc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8010cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cb2:	f383 8811 	msr	BASEPRI, r3
 8010cb6:	f3bf 8f6f 	isb	sy
 8010cba:	f3bf 8f4f 	dsb	sy
 8010cbe:	61fb      	str	r3, [r7, #28]
}
 8010cc0:	bf00      	nop
 8010cc2:	e7fe      	b.n	8010cc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010cc4:	f001 fa1e 	bl	8012104 <xTaskGetSchedulerState>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d102      	bne.n	8010cd4 <xQueueSemaphoreTake+0x60>
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d101      	bne.n	8010cd8 <xQueueSemaphoreTake+0x64>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e000      	b.n	8010cda <xQueueSemaphoreTake+0x66>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d10a      	bne.n	8010cf4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8010cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce2:	f383 8811 	msr	BASEPRI, r3
 8010ce6:	f3bf 8f6f 	isb	sy
 8010cea:	f3bf 8f4f 	dsb	sy
 8010cee:	61bb      	str	r3, [r7, #24]
}
 8010cf0:	bf00      	nop
 8010cf2:	e7fe      	b.n	8010cf2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010cf4:	f002 fb1e 	bl	8013334 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d024      	beq.n	8010d4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d06:	1e5a      	subs	r2, r3, #1
 8010d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d104      	bne.n	8010d1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010d14:	f001 fb6c 	bl	80123f0 <pvTaskIncrementMutexHeldCount>
 8010d18:	4602      	mov	r2, r0
 8010d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d20:	691b      	ldr	r3, [r3, #16]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00f      	beq.n	8010d46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d28:	3310      	adds	r3, #16
 8010d2a:	4618      	mov	r0, r3
 8010d2c:	f001 f818 	bl	8011d60 <xTaskRemoveFromEventList>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d007      	beq.n	8010d46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010d36:	4b54      	ldr	r3, [pc, #336]	; (8010e88 <xQueueSemaphoreTake+0x214>)
 8010d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d3c:	601a      	str	r2, [r3, #0]
 8010d3e:	f3bf 8f4f 	dsb	sy
 8010d42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010d46:	f002 fb25 	bl	8013394 <vPortExitCritical>
				return pdPASS;
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	e097      	b.n	8010e7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d111      	bne.n	8010d78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d00a      	beq.n	8010d70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5e:	f383 8811 	msr	BASEPRI, r3
 8010d62:	f3bf 8f6f 	isb	sy
 8010d66:	f3bf 8f4f 	dsb	sy
 8010d6a:	617b      	str	r3, [r7, #20]
}
 8010d6c:	bf00      	nop
 8010d6e:	e7fe      	b.n	8010d6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010d70:	f002 fb10 	bl	8013394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010d74:	2300      	movs	r3, #0
 8010d76:	e082      	b.n	8010e7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d106      	bne.n	8010d8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010d7e:	f107 030c 	add.w	r3, r7, #12
 8010d82:	4618      	mov	r0, r3
 8010d84:	f001 f850 	bl	8011e28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010d8c:	f002 fb02 	bl	8013394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010d90:	f000 fdaa 	bl	80118e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010d94:	f002 face 	bl	8013334 <vPortEnterCritical>
 8010d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010d9e:	b25b      	sxtb	r3, r3
 8010da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010da4:	d103      	bne.n	8010dae <xQueueSemaphoreTake+0x13a>
 8010da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010da8:	2200      	movs	r2, #0
 8010daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010db4:	b25b      	sxtb	r3, r3
 8010db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dba:	d103      	bne.n	8010dc4 <xQueueSemaphoreTake+0x150>
 8010dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010dc4:	f002 fae6 	bl	8013394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010dc8:	463a      	mov	r2, r7
 8010dca:	f107 030c 	add.w	r3, r7, #12
 8010dce:	4611      	mov	r1, r2
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f001 f83f 	bl	8011e54 <xTaskCheckForTimeOut>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d132      	bne.n	8010e42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010dde:	f000 f9f2 	bl	80111c6 <prvIsQueueEmpty>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d026      	beq.n	8010e36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d109      	bne.n	8010e04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010df0:	f002 faa0 	bl	8013334 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df6:	689b      	ldr	r3, [r3, #8]
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f001 f9a1 	bl	8012140 <xTaskPriorityInherit>
 8010dfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8010e00:	f002 fac8 	bl	8013394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e06:	3324      	adds	r3, #36	; 0x24
 8010e08:	683a      	ldr	r2, [r7, #0]
 8010e0a:	4611      	mov	r1, r2
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f000 ff57 	bl	8011cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e14:	f000 f985 	bl	8011122 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e18:	f000 fd74 	bl	8011904 <xTaskResumeAll>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f47f af68 	bne.w	8010cf4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010e24:	4b18      	ldr	r3, [pc, #96]	; (8010e88 <xQueueSemaphoreTake+0x214>)
 8010e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e2a:	601a      	str	r2, [r3, #0]
 8010e2c:	f3bf 8f4f 	dsb	sy
 8010e30:	f3bf 8f6f 	isb	sy
 8010e34:	e75e      	b.n	8010cf4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e38:	f000 f973 	bl	8011122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e3c:	f000 fd62 	bl	8011904 <xTaskResumeAll>
 8010e40:	e758      	b.n	8010cf4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010e42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e44:	f000 f96d 	bl	8011122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e48:	f000 fd5c 	bl	8011904 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e4e:	f000 f9ba 	bl	80111c6 <prvIsQueueEmpty>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	f43f af4d 	beq.w	8010cf4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00d      	beq.n	8010e7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010e60:	f002 fa68 	bl	8013334 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010e66:	f000 f8b4 	bl	8010fd2 <prvGetDisinheritPriorityAfterTimeout>
 8010e6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e6e:	689b      	ldr	r3, [r3, #8]
 8010e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e72:	4618      	mov	r0, r3
 8010e74:	f001 fa3a 	bl	80122ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010e78:	f002 fa8c 	bl	8013394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3738      	adds	r7, #56	; 0x38
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	e000ed04 	.word	0xe000ed04

08010e8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b08e      	sub	sp, #56	; 0x38
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	60f8      	str	r0, [r7, #12]
 8010e94:	60b9      	str	r1, [r7, #8]
 8010e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d10a      	bne.n	8010eb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ea6:	f383 8811 	msr	BASEPRI, r3
 8010eaa:	f3bf 8f6f 	isb	sy
 8010eae:	f3bf 8f4f 	dsb	sy
 8010eb2:	623b      	str	r3, [r7, #32]
}
 8010eb4:	bf00      	nop
 8010eb6:	e7fe      	b.n	8010eb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d103      	bne.n	8010ec6 <xQueueReceiveFromISR+0x3a>
 8010ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d101      	bne.n	8010eca <xQueueReceiveFromISR+0x3e>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	e000      	b.n	8010ecc <xQueueReceiveFromISR+0x40>
 8010eca:	2300      	movs	r3, #0
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d10a      	bne.n	8010ee6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed4:	f383 8811 	msr	BASEPRI, r3
 8010ed8:	f3bf 8f6f 	isb	sy
 8010edc:	f3bf 8f4f 	dsb	sy
 8010ee0:	61fb      	str	r3, [r7, #28]
}
 8010ee2:	bf00      	nop
 8010ee4:	e7fe      	b.n	8010ee4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ee6:	f002 fb07 	bl	80134f8 <vPortValidateInterruptPriority>
	__asm volatile
 8010eea:	f3ef 8211 	mrs	r2, BASEPRI
 8010eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef2:	f383 8811 	msr	BASEPRI, r3
 8010ef6:	f3bf 8f6f 	isb	sy
 8010efa:	f3bf 8f4f 	dsb	sy
 8010efe:	61ba      	str	r2, [r7, #24]
 8010f00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010f02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d02f      	beq.n	8010f72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f1c:	68b9      	ldr	r1, [r7, #8]
 8010f1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f20:	f000 f8d9 	bl	80110d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f26:	1e5a      	subs	r2, r3, #1
 8010f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f34:	d112      	bne.n	8010f5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f38:	691b      	ldr	r3, [r3, #16]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d016      	beq.n	8010f6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f40:	3310      	adds	r3, #16
 8010f42:	4618      	mov	r0, r3
 8010f44:	f000 ff0c 	bl	8011d60 <xTaskRemoveFromEventList>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d00e      	beq.n	8010f6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d00b      	beq.n	8010f6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	2201      	movs	r2, #1
 8010f58:	601a      	str	r2, [r3, #0]
 8010f5a:	e007      	b.n	8010f6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f60:	3301      	adds	r3, #1
 8010f62:	b2db      	uxtb	r3, r3
 8010f64:	b25a      	sxtb	r2, r3
 8010f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8010f70:	e001      	b.n	8010f76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010f72:	2300      	movs	r3, #0
 8010f74:	637b      	str	r3, [r7, #52]	; 0x34
 8010f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	f383 8811 	msr	BASEPRI, r3
}
 8010f80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3738      	adds	r7, #56	; 0x38
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd80      	pop	{r7, pc}

08010f8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b084      	sub	sp, #16
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d10a      	bne.n	8010fb4 <vQueueDelete+0x28>
	__asm volatile
 8010f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	60bb      	str	r3, [r7, #8]
}
 8010fb0:	bf00      	nop
 8010fb2:	e7fe      	b.n	8010fb2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010fb4:	68f8      	ldr	r0, [r7, #12]
 8010fb6:	f000 f95f 	bl	8011278 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d102      	bne.n	8010fca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010fc4:	68f8      	ldr	r0, [r7, #12]
 8010fc6:	f002 fba3 	bl	8013710 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010fca:	bf00      	nop
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010fd2:	b480      	push	{r7}
 8010fd4:	b085      	sub	sp, #20
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d006      	beq.n	8010ff0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010fec:	60fb      	str	r3, [r7, #12]
 8010fee:	e001      	b.n	8010ff4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
	}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	3714      	adds	r7, #20
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011000:	4770      	bx	lr

08011002 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011002:	b580      	push	{r7, lr}
 8011004:	b086      	sub	sp, #24
 8011006:	af00      	add	r7, sp, #0
 8011008:	60f8      	str	r0, [r7, #12]
 801100a:	60b9      	str	r1, [r7, #8]
 801100c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801100e:	2300      	movs	r3, #0
 8011010:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011016:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801101c:	2b00      	cmp	r3, #0
 801101e:	d10d      	bne.n	801103c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d14d      	bne.n	80110c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	689b      	ldr	r3, [r3, #8]
 801102c:	4618      	mov	r0, r3
 801102e:	f001 f8ef 	bl	8012210 <xTaskPriorityDisinherit>
 8011032:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2200      	movs	r2, #0
 8011038:	609a      	str	r2, [r3, #8]
 801103a:	e043      	b.n	80110c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d119      	bne.n	8011076 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	6858      	ldr	r0, [r3, #4]
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801104a:	461a      	mov	r2, r3
 801104c:	68b9      	ldr	r1, [r7, #8]
 801104e:	f003 fcdd 	bl	8014a0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	685a      	ldr	r2, [r3, #4]
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801105a:	441a      	add	r2, r3
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	685a      	ldr	r2, [r3, #4]
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	689b      	ldr	r3, [r3, #8]
 8011068:	429a      	cmp	r2, r3
 801106a:	d32b      	bcc.n	80110c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681a      	ldr	r2, [r3, #0]
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	605a      	str	r2, [r3, #4]
 8011074:	e026      	b.n	80110c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	68d8      	ldr	r0, [r3, #12]
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801107e:	461a      	mov	r2, r3
 8011080:	68b9      	ldr	r1, [r7, #8]
 8011082:	f003 fcc3 	bl	8014a0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	68da      	ldr	r2, [r3, #12]
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108e:	425b      	negs	r3, r3
 8011090:	441a      	add	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	68da      	ldr	r2, [r3, #12]
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	429a      	cmp	r2, r3
 80110a0:	d207      	bcs.n	80110b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	689a      	ldr	r2, [r3, #8]
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110aa:	425b      	negs	r3, r3
 80110ac:	441a      	add	r2, r3
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2b02      	cmp	r3, #2
 80110b6:	d105      	bne.n	80110c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d002      	beq.n	80110c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	3b01      	subs	r3, #1
 80110c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	1c5a      	adds	r2, r3, #1
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80110cc:	697b      	ldr	r3, [r7, #20]
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	3718      	adds	r7, #24
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}

080110d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80110d6:	b580      	push	{r7, lr}
 80110d8:	b082      	sub	sp, #8
 80110da:	af00      	add	r7, sp, #0
 80110dc:	6078      	str	r0, [r7, #4]
 80110de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d018      	beq.n	801111a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	68da      	ldr	r2, [r3, #12]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110f0:	441a      	add	r2, r3
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	68da      	ldr	r2, [r3, #12]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	689b      	ldr	r3, [r3, #8]
 80110fe:	429a      	cmp	r2, r3
 8011100:	d303      	bcc.n	801110a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	68d9      	ldr	r1, [r3, #12]
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011112:	461a      	mov	r2, r3
 8011114:	6838      	ldr	r0, [r7, #0]
 8011116:	f003 fc79 	bl	8014a0c <memcpy>
	}
}
 801111a:	bf00      	nop
 801111c:	3708      	adds	r7, #8
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}

08011122 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b084      	sub	sp, #16
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801112a:	f002 f903 	bl	8013334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011134:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011136:	e011      	b.n	801115c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801113c:	2b00      	cmp	r3, #0
 801113e:	d012      	beq.n	8011166 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	3324      	adds	r3, #36	; 0x24
 8011144:	4618      	mov	r0, r3
 8011146:	f000 fe0b 	bl	8011d60 <xTaskRemoveFromEventList>
 801114a:	4603      	mov	r3, r0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d001      	beq.n	8011154 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011150:	f000 fee2 	bl	8011f18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011154:	7bfb      	ldrb	r3, [r7, #15]
 8011156:	3b01      	subs	r3, #1
 8011158:	b2db      	uxtb	r3, r3
 801115a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801115c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011160:	2b00      	cmp	r3, #0
 8011162:	dce9      	bgt.n	8011138 <prvUnlockQueue+0x16>
 8011164:	e000      	b.n	8011168 <prvUnlockQueue+0x46>
					break;
 8011166:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	22ff      	movs	r2, #255	; 0xff
 801116c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011170:	f002 f910 	bl	8013394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011174:	f002 f8de 	bl	8013334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801117e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011180:	e011      	b.n	80111a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	691b      	ldr	r3, [r3, #16]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d012      	beq.n	80111b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	3310      	adds	r3, #16
 801118e:	4618      	mov	r0, r3
 8011190:	f000 fde6 	bl	8011d60 <xTaskRemoveFromEventList>
 8011194:	4603      	mov	r3, r0
 8011196:	2b00      	cmp	r3, #0
 8011198:	d001      	beq.n	801119e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801119a:	f000 febd 	bl	8011f18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801119e:	7bbb      	ldrb	r3, [r7, #14]
 80111a0:	3b01      	subs	r3, #1
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80111a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	dce9      	bgt.n	8011182 <prvUnlockQueue+0x60>
 80111ae:	e000      	b.n	80111b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80111b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	22ff      	movs	r2, #255	; 0xff
 80111b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80111ba:	f002 f8eb 	bl	8013394 <vPortExitCritical>
}
 80111be:	bf00      	nop
 80111c0:	3710      	adds	r7, #16
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}

080111c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80111c6:	b580      	push	{r7, lr}
 80111c8:	b084      	sub	sp, #16
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111ce:	f002 f8b1 	bl	8013334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d102      	bne.n	80111e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80111da:	2301      	movs	r3, #1
 80111dc:	60fb      	str	r3, [r7, #12]
 80111de:	e001      	b.n	80111e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80111e0:	2300      	movs	r3, #0
 80111e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80111e4:	f002 f8d6 	bl	8013394 <vPortExitCritical>

	return xReturn;
 80111e8:	68fb      	ldr	r3, [r7, #12]
}
 80111ea:	4618      	mov	r0, r3
 80111ec:	3710      	adds	r7, #16
 80111ee:	46bd      	mov	sp, r7
 80111f0:	bd80      	pop	{r7, pc}

080111f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80111f2:	b580      	push	{r7, lr}
 80111f4:	b084      	sub	sp, #16
 80111f6:	af00      	add	r7, sp, #0
 80111f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111fa:	f002 f89b 	bl	8013334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011206:	429a      	cmp	r2, r3
 8011208:	d102      	bne.n	8011210 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801120a:	2301      	movs	r3, #1
 801120c:	60fb      	str	r3, [r7, #12]
 801120e:	e001      	b.n	8011214 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011210:	2300      	movs	r3, #0
 8011212:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011214:	f002 f8be 	bl	8013394 <vPortExitCritical>

	return xReturn;
 8011218:	68fb      	ldr	r3, [r7, #12]
}
 801121a:	4618      	mov	r0, r3
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
	...

08011224 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011224:	b480      	push	{r7}
 8011226:	b085      	sub	sp, #20
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801122e:	2300      	movs	r3, #0
 8011230:	60fb      	str	r3, [r7, #12]
 8011232:	e014      	b.n	801125e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011234:	4a0f      	ldr	r2, [pc, #60]	; (8011274 <vQueueAddToRegistry+0x50>)
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d10b      	bne.n	8011258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011240:	490c      	ldr	r1, [pc, #48]	; (8011274 <vQueueAddToRegistry+0x50>)
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	683a      	ldr	r2, [r7, #0]
 8011246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801124a:	4a0a      	ldr	r2, [pc, #40]	; (8011274 <vQueueAddToRegistry+0x50>)
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	00db      	lsls	r3, r3, #3
 8011250:	4413      	add	r3, r2
 8011252:	687a      	ldr	r2, [r7, #4]
 8011254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011256:	e006      	b.n	8011266 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	3301      	adds	r3, #1
 801125c:	60fb      	str	r3, [r7, #12]
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	2b07      	cmp	r3, #7
 8011262:	d9e7      	bls.n	8011234 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011264:	bf00      	nop
 8011266:	bf00      	nop
 8011268:	3714      	adds	r7, #20
 801126a:	46bd      	mov	sp, r7
 801126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011270:	4770      	bx	lr
 8011272:	bf00      	nop
 8011274:	200010b4 	.word	0x200010b4

08011278 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011278:	b480      	push	{r7}
 801127a:	b085      	sub	sp, #20
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011280:	2300      	movs	r3, #0
 8011282:	60fb      	str	r3, [r7, #12]
 8011284:	e016      	b.n	80112b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011286:	4a10      	ldr	r2, [pc, #64]	; (80112c8 <vQueueUnregisterQueue+0x50>)
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	00db      	lsls	r3, r3, #3
 801128c:	4413      	add	r3, r2
 801128e:	685b      	ldr	r3, [r3, #4]
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	429a      	cmp	r2, r3
 8011294:	d10b      	bne.n	80112ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011296:	4a0c      	ldr	r2, [pc, #48]	; (80112c8 <vQueueUnregisterQueue+0x50>)
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	2100      	movs	r1, #0
 801129c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80112a0:	4a09      	ldr	r2, [pc, #36]	; (80112c8 <vQueueUnregisterQueue+0x50>)
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	00db      	lsls	r3, r3, #3
 80112a6:	4413      	add	r3, r2
 80112a8:	2200      	movs	r2, #0
 80112aa:	605a      	str	r2, [r3, #4]
				break;
 80112ac:	e006      	b.n	80112bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	3301      	adds	r3, #1
 80112b2:	60fb      	str	r3, [r7, #12]
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2b07      	cmp	r3, #7
 80112b8:	d9e5      	bls.n	8011286 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80112ba:	bf00      	nop
 80112bc:	bf00      	nop
 80112be:	3714      	adds	r7, #20
 80112c0:	46bd      	mov	sp, r7
 80112c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c6:	4770      	bx	lr
 80112c8:	200010b4 	.word	0x200010b4

080112cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b086      	sub	sp, #24
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	60f8      	str	r0, [r7, #12]
 80112d4:	60b9      	str	r1, [r7, #8]
 80112d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80112dc:	f002 f82a 	bl	8013334 <vPortEnterCritical>
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112e6:	b25b      	sxtb	r3, r3
 80112e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ec:	d103      	bne.n	80112f6 <vQueueWaitForMessageRestricted+0x2a>
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	2200      	movs	r2, #0
 80112f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112fc:	b25b      	sxtb	r3, r3
 80112fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011302:	d103      	bne.n	801130c <vQueueWaitForMessageRestricted+0x40>
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	2200      	movs	r2, #0
 8011308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801130c:	f002 f842 	bl	8013394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8011310:	697b      	ldr	r3, [r7, #20]
 8011312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011314:	2b00      	cmp	r3, #0
 8011316:	d106      	bne.n	8011326 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	3324      	adds	r3, #36	; 0x24
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	68b9      	ldr	r1, [r7, #8]
 8011320:	4618      	mov	r0, r3
 8011322:	f000 fcf1 	bl	8011d08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011326:	6978      	ldr	r0, [r7, #20]
 8011328:	f7ff fefb 	bl	8011122 <prvUnlockQueue>
	}
 801132c:	bf00      	nop
 801132e:	3718      	adds	r7, #24
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}

08011334 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011334:	b580      	push	{r7, lr}
 8011336:	b08e      	sub	sp, #56	; 0x38
 8011338:	af04      	add	r7, sp, #16
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]
 8011340:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011344:	2b00      	cmp	r3, #0
 8011346:	d10a      	bne.n	801135e <xTaskCreateStatic+0x2a>
	__asm volatile
 8011348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801134c:	f383 8811 	msr	BASEPRI, r3
 8011350:	f3bf 8f6f 	isb	sy
 8011354:	f3bf 8f4f 	dsb	sy
 8011358:	623b      	str	r3, [r7, #32]
}
 801135a:	bf00      	nop
 801135c:	e7fe      	b.n	801135c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011360:	2b00      	cmp	r3, #0
 8011362:	d10a      	bne.n	801137a <xTaskCreateStatic+0x46>
	__asm volatile
 8011364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011368:	f383 8811 	msr	BASEPRI, r3
 801136c:	f3bf 8f6f 	isb	sy
 8011370:	f3bf 8f4f 	dsb	sy
 8011374:	61fb      	str	r3, [r7, #28]
}
 8011376:	bf00      	nop
 8011378:	e7fe      	b.n	8011378 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801137a:	23ac      	movs	r3, #172	; 0xac
 801137c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801137e:	693b      	ldr	r3, [r7, #16]
 8011380:	2bac      	cmp	r3, #172	; 0xac
 8011382:	d00a      	beq.n	801139a <xTaskCreateStatic+0x66>
	__asm volatile
 8011384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011388:	f383 8811 	msr	BASEPRI, r3
 801138c:	f3bf 8f6f 	isb	sy
 8011390:	f3bf 8f4f 	dsb	sy
 8011394:	61bb      	str	r3, [r7, #24]
}
 8011396:	bf00      	nop
 8011398:	e7fe      	b.n	8011398 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801139a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801139c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d01e      	beq.n	80113e0 <xTaskCreateStatic+0xac>
 80113a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d01b      	beq.n	80113e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80113a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80113ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80113b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80113b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113b4:	2202      	movs	r2, #2
 80113b6:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80113ba:	2300      	movs	r3, #0
 80113bc:	9303      	str	r3, [sp, #12]
 80113be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c0:	9302      	str	r3, [sp, #8]
 80113c2:	f107 0314 	add.w	r3, r7, #20
 80113c6:	9301      	str	r3, [sp, #4]
 80113c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ca:	9300      	str	r3, [sp, #0]
 80113cc:	683b      	ldr	r3, [r7, #0]
 80113ce:	687a      	ldr	r2, [r7, #4]
 80113d0:	68b9      	ldr	r1, [r7, #8]
 80113d2:	68f8      	ldr	r0, [r7, #12]
 80113d4:	f000 f850 	bl	8011478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113da:	f000 f8f3 	bl	80115c4 <prvAddNewTaskToReadyList>
 80113de:	e001      	b.n	80113e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80113e0:	2300      	movs	r3, #0
 80113e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80113e4:	697b      	ldr	r3, [r7, #20]
	}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3728      	adds	r7, #40	; 0x28
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}

080113ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b08c      	sub	sp, #48	; 0x30
 80113f2:	af04      	add	r7, sp, #16
 80113f4:	60f8      	str	r0, [r7, #12]
 80113f6:	60b9      	str	r1, [r7, #8]
 80113f8:	603b      	str	r3, [r7, #0]
 80113fa:	4613      	mov	r3, r2
 80113fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80113fe:	88fb      	ldrh	r3, [r7, #6]
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	4618      	mov	r0, r3
 8011404:	f002 f8b8 	bl	8013578 <pvPortMalloc>
 8011408:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d00e      	beq.n	801142e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011410:	20ac      	movs	r0, #172	; 0xac
 8011412:	f002 f8b1 	bl	8013578 <pvPortMalloc>
 8011416:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d003      	beq.n	8011426 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	697a      	ldr	r2, [r7, #20]
 8011422:	631a      	str	r2, [r3, #48]	; 0x30
 8011424:	e005      	b.n	8011432 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011426:	6978      	ldr	r0, [r7, #20]
 8011428:	f002 f972 	bl	8013710 <vPortFree>
 801142c:	e001      	b.n	8011432 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801142e:	2300      	movs	r3, #0
 8011430:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d017      	beq.n	8011468 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	2200      	movs	r2, #0
 801143c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011440:	88fa      	ldrh	r2, [r7, #6]
 8011442:	2300      	movs	r3, #0
 8011444:	9303      	str	r3, [sp, #12]
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	9302      	str	r3, [sp, #8]
 801144a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801144c:	9301      	str	r3, [sp, #4]
 801144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011450:	9300      	str	r3, [sp, #0]
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	68b9      	ldr	r1, [r7, #8]
 8011456:	68f8      	ldr	r0, [r7, #12]
 8011458:	f000 f80e 	bl	8011478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801145c:	69f8      	ldr	r0, [r7, #28]
 801145e:	f000 f8b1 	bl	80115c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011462:	2301      	movs	r3, #1
 8011464:	61bb      	str	r3, [r7, #24]
 8011466:	e002      	b.n	801146e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011468:	f04f 33ff 	mov.w	r3, #4294967295
 801146c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801146e:	69bb      	ldr	r3, [r7, #24]
	}
 8011470:	4618      	mov	r0, r3
 8011472:	3720      	adds	r7, #32
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b088      	sub	sp, #32
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	60b9      	str	r1, [r7, #8]
 8011482:	607a      	str	r2, [r7, #4]
 8011484:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011488:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	009b      	lsls	r3, r3, #2
 801148e:	461a      	mov	r2, r3
 8011490:	21a5      	movs	r1, #165	; 0xa5
 8011492:	f003 f9e6 	bl	8014862 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80114a0:	3b01      	subs	r3, #1
 80114a2:	009b      	lsls	r3, r3, #2
 80114a4:	4413      	add	r3, r2
 80114a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80114a8:	69bb      	ldr	r3, [r7, #24]
 80114aa:	f023 0307 	bic.w	r3, r3, #7
 80114ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80114b0:	69bb      	ldr	r3, [r7, #24]
 80114b2:	f003 0307 	and.w	r3, r3, #7
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00a      	beq.n	80114d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80114ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114be:	f383 8811 	msr	BASEPRI, r3
 80114c2:	f3bf 8f6f 	isb	sy
 80114c6:	f3bf 8f4f 	dsb	sy
 80114ca:	617b      	str	r3, [r7, #20]
}
 80114cc:	bf00      	nop
 80114ce:	e7fe      	b.n	80114ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d01f      	beq.n	8011516 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114d6:	2300      	movs	r3, #0
 80114d8:	61fb      	str	r3, [r7, #28]
 80114da:	e012      	b.n	8011502 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80114dc:	68ba      	ldr	r2, [r7, #8]
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	4413      	add	r3, r2
 80114e2:	7819      	ldrb	r1, [r3, #0]
 80114e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	4413      	add	r3, r2
 80114ea:	3334      	adds	r3, #52	; 0x34
 80114ec:	460a      	mov	r2, r1
 80114ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80114f0:	68ba      	ldr	r2, [r7, #8]
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	4413      	add	r3, r2
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d006      	beq.n	801150a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	3301      	adds	r3, #1
 8011500:	61fb      	str	r3, [r7, #28]
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	2b13      	cmp	r3, #19
 8011506:	d9e9      	bls.n	80114dc <prvInitialiseNewTask+0x64>
 8011508:	e000      	b.n	801150c <prvInitialiseNewTask+0x94>
			{
				break;
 801150a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801150c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801150e:	2200      	movs	r2, #0
 8011510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8011514:	e003      	b.n	801151e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011518:	2200      	movs	r2, #0
 801151a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011520:	2b37      	cmp	r3, #55	; 0x37
 8011522:	d901      	bls.n	8011528 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011524:	2337      	movs	r3, #55	; 0x37
 8011526:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801152c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801152e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011532:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8011534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011536:	2200      	movs	r2, #0
 8011538:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801153c:	3304      	adds	r3, #4
 801153e:	4618      	mov	r0, r3
 8011540:	f7fe fda0 	bl	8010084 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011546:	3318      	adds	r3, #24
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe fd9b 	bl	8010084 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801154e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011552:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801155a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801155e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011562:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011566:	2200      	movs	r2, #0
 8011568:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801156c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801156e:	2200      	movs	r2, #0
 8011570:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011576:	3358      	adds	r3, #88	; 0x58
 8011578:	224c      	movs	r2, #76	; 0x4c
 801157a:	2100      	movs	r1, #0
 801157c:	4618      	mov	r0, r3
 801157e:	f003 f970 	bl	8014862 <memset>
 8011582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011584:	4a0c      	ldr	r2, [pc, #48]	; (80115b8 <prvInitialiseNewTask+0x140>)
 8011586:	65da      	str	r2, [r3, #92]	; 0x5c
 8011588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158a:	4a0c      	ldr	r2, [pc, #48]	; (80115bc <prvInitialiseNewTask+0x144>)
 801158c:	661a      	str	r2, [r3, #96]	; 0x60
 801158e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011590:	4a0b      	ldr	r2, [pc, #44]	; (80115c0 <prvInitialiseNewTask+0x148>)
 8011592:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011594:	683a      	ldr	r2, [r7, #0]
 8011596:	68f9      	ldr	r1, [r7, #12]
 8011598:	69b8      	ldr	r0, [r7, #24]
 801159a:	f001 fd9b 	bl	80130d4 <pxPortInitialiseStack>
 801159e:	4602      	mov	r2, r0
 80115a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80115a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d002      	beq.n	80115b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80115aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80115b0:	bf00      	nop
 80115b2:	3720      	adds	r7, #32
 80115b4:	46bd      	mov	sp, r7
 80115b6:	bd80      	pop	{r7, pc}
 80115b8:	200120e8 	.word	0x200120e8
 80115bc:	20012150 	.word	0x20012150
 80115c0:	200121b8 	.word	0x200121b8

080115c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80115cc:	f001 feb2 	bl	8013334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80115d0:	4b2d      	ldr	r3, [pc, #180]	; (8011688 <prvAddNewTaskToReadyList+0xc4>)
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	3301      	adds	r3, #1
 80115d6:	4a2c      	ldr	r2, [pc, #176]	; (8011688 <prvAddNewTaskToReadyList+0xc4>)
 80115d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80115da:	4b2c      	ldr	r3, [pc, #176]	; (801168c <prvAddNewTaskToReadyList+0xc8>)
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d109      	bne.n	80115f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80115e2:	4a2a      	ldr	r2, [pc, #168]	; (801168c <prvAddNewTaskToReadyList+0xc8>)
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80115e8:	4b27      	ldr	r3, [pc, #156]	; (8011688 <prvAddNewTaskToReadyList+0xc4>)
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	2b01      	cmp	r3, #1
 80115ee:	d110      	bne.n	8011612 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80115f0:	f000 fcb6 	bl	8011f60 <prvInitialiseTaskLists>
 80115f4:	e00d      	b.n	8011612 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80115f6:	4b26      	ldr	r3, [pc, #152]	; (8011690 <prvAddNewTaskToReadyList+0xcc>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d109      	bne.n	8011612 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80115fe:	4b23      	ldr	r3, [pc, #140]	; (801168c <prvAddNewTaskToReadyList+0xc8>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011608:	429a      	cmp	r2, r3
 801160a:	d802      	bhi.n	8011612 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801160c:	4a1f      	ldr	r2, [pc, #124]	; (801168c <prvAddNewTaskToReadyList+0xc8>)
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011612:	4b20      	ldr	r3, [pc, #128]	; (8011694 <prvAddNewTaskToReadyList+0xd0>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	3301      	adds	r3, #1
 8011618:	4a1e      	ldr	r2, [pc, #120]	; (8011694 <prvAddNewTaskToReadyList+0xd0>)
 801161a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801161c:	4b1d      	ldr	r3, [pc, #116]	; (8011694 <prvAddNewTaskToReadyList+0xd0>)
 801161e:	681a      	ldr	r2, [r3, #0]
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011628:	4b1b      	ldr	r3, [pc, #108]	; (8011698 <prvAddNewTaskToReadyList+0xd4>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	429a      	cmp	r2, r3
 801162e:	d903      	bls.n	8011638 <prvAddNewTaskToReadyList+0x74>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011634:	4a18      	ldr	r2, [pc, #96]	; (8011698 <prvAddNewTaskToReadyList+0xd4>)
 8011636:	6013      	str	r3, [r2, #0]
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801163c:	4613      	mov	r3, r2
 801163e:	009b      	lsls	r3, r3, #2
 8011640:	4413      	add	r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	4a15      	ldr	r2, [pc, #84]	; (801169c <prvAddNewTaskToReadyList+0xd8>)
 8011646:	441a      	add	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	3304      	adds	r3, #4
 801164c:	4619      	mov	r1, r3
 801164e:	4610      	mov	r0, r2
 8011650:	f7fe fd25 	bl	801009e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011654:	f001 fe9e 	bl	8013394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011658:	4b0d      	ldr	r3, [pc, #52]	; (8011690 <prvAddNewTaskToReadyList+0xcc>)
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d00e      	beq.n	801167e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011660:	4b0a      	ldr	r3, [pc, #40]	; (801168c <prvAddNewTaskToReadyList+0xc8>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801166a:	429a      	cmp	r2, r3
 801166c:	d207      	bcs.n	801167e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801166e:	4b0c      	ldr	r3, [pc, #48]	; (80116a0 <prvAddNewTaskToReadyList+0xdc>)
 8011670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011674:	601a      	str	r2, [r3, #0]
 8011676:	f3bf 8f4f 	dsb	sy
 801167a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801167e:	bf00      	nop
 8011680:	3708      	adds	r7, #8
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	200015c8 	.word	0x200015c8
 801168c:	200010f4 	.word	0x200010f4
 8011690:	200015d4 	.word	0x200015d4
 8011694:	200015e4 	.word	0x200015e4
 8011698:	200015d0 	.word	0x200015d0
 801169c:	200010f8 	.word	0x200010f8
 80116a0:	e000ed04 	.word	0xe000ed04

080116a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b08a      	sub	sp, #40	; 0x28
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80116ae:	2300      	movs	r3, #0
 80116b0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d10a      	bne.n	80116ce <vTaskDelayUntil+0x2a>
	__asm volatile
 80116b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116bc:	f383 8811 	msr	BASEPRI, r3
 80116c0:	f3bf 8f6f 	isb	sy
 80116c4:	f3bf 8f4f 	dsb	sy
 80116c8:	617b      	str	r3, [r7, #20]
}
 80116ca:	bf00      	nop
 80116cc:	e7fe      	b.n	80116cc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d10a      	bne.n	80116ea <vTaskDelayUntil+0x46>
	__asm volatile
 80116d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d8:	f383 8811 	msr	BASEPRI, r3
 80116dc:	f3bf 8f6f 	isb	sy
 80116e0:	f3bf 8f4f 	dsb	sy
 80116e4:	613b      	str	r3, [r7, #16]
}
 80116e6:	bf00      	nop
 80116e8:	e7fe      	b.n	80116e8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80116ea:	4b2a      	ldr	r3, [pc, #168]	; (8011794 <vTaskDelayUntil+0xf0>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00a      	beq.n	8011708 <vTaskDelayUntil+0x64>
	__asm volatile
 80116f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116f6:	f383 8811 	msr	BASEPRI, r3
 80116fa:	f3bf 8f6f 	isb	sy
 80116fe:	f3bf 8f4f 	dsb	sy
 8011702:	60fb      	str	r3, [r7, #12]
}
 8011704:	bf00      	nop
 8011706:	e7fe      	b.n	8011706 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8011708:	f000 f8ee 	bl	80118e8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 801170c:	4b22      	ldr	r3, [pc, #136]	; (8011798 <vTaskDelayUntil+0xf4>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	683a      	ldr	r2, [r7, #0]
 8011718:	4413      	add	r3, r2
 801171a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	6a3a      	ldr	r2, [r7, #32]
 8011722:	429a      	cmp	r2, r3
 8011724:	d20b      	bcs.n	801173e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	69fa      	ldr	r2, [r7, #28]
 801172c:	429a      	cmp	r2, r3
 801172e:	d211      	bcs.n	8011754 <vTaskDelayUntil+0xb0>
 8011730:	69fa      	ldr	r2, [r7, #28]
 8011732:	6a3b      	ldr	r3, [r7, #32]
 8011734:	429a      	cmp	r2, r3
 8011736:	d90d      	bls.n	8011754 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011738:	2301      	movs	r3, #1
 801173a:	627b      	str	r3, [r7, #36]	; 0x24
 801173c:	e00a      	b.n	8011754 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	69fa      	ldr	r2, [r7, #28]
 8011744:	429a      	cmp	r2, r3
 8011746:	d303      	bcc.n	8011750 <vTaskDelayUntil+0xac>
 8011748:	69fa      	ldr	r2, [r7, #28]
 801174a:	6a3b      	ldr	r3, [r7, #32]
 801174c:	429a      	cmp	r2, r3
 801174e:	d901      	bls.n	8011754 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011750:	2301      	movs	r3, #1
 8011752:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	69fa      	ldr	r2, [r7, #28]
 8011758:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 801175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801175c:	2b00      	cmp	r3, #0
 801175e:	d006      	beq.n	801176e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8011760:	69fa      	ldr	r2, [r7, #28]
 8011762:	6a3b      	ldr	r3, [r7, #32]
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	2100      	movs	r1, #0
 8011768:	4618      	mov	r0, r3
 801176a:	f001 f857 	bl	801281c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801176e:	f000 f8c9 	bl	8011904 <xTaskResumeAll>
 8011772:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011774:	69bb      	ldr	r3, [r7, #24]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d107      	bne.n	801178a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 801177a:	4b08      	ldr	r3, [pc, #32]	; (801179c <vTaskDelayUntil+0xf8>)
 801177c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011780:	601a      	str	r2, [r3, #0]
 8011782:	f3bf 8f4f 	dsb	sy
 8011786:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801178a:	bf00      	nop
 801178c:	3728      	adds	r7, #40	; 0x28
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	200015f0 	.word	0x200015f0
 8011798:	200015cc 	.word	0x200015cc
 801179c:	e000ed04 	.word	0xe000ed04

080117a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b084      	sub	sp, #16
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80117a8:	2300      	movs	r3, #0
 80117aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d017      	beq.n	80117e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80117b2:	4b13      	ldr	r3, [pc, #76]	; (8011800 <vTaskDelay+0x60>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00a      	beq.n	80117d0 <vTaskDelay+0x30>
	__asm volatile
 80117ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117be:	f383 8811 	msr	BASEPRI, r3
 80117c2:	f3bf 8f6f 	isb	sy
 80117c6:	f3bf 8f4f 	dsb	sy
 80117ca:	60bb      	str	r3, [r7, #8]
}
 80117cc:	bf00      	nop
 80117ce:	e7fe      	b.n	80117ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80117d0:	f000 f88a 	bl	80118e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80117d4:	2100      	movs	r1, #0
 80117d6:	6878      	ldr	r0, [r7, #4]
 80117d8:	f001 f820 	bl	801281c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80117dc:	f000 f892 	bl	8011904 <xTaskResumeAll>
 80117e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d107      	bne.n	80117f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80117e8:	4b06      	ldr	r3, [pc, #24]	; (8011804 <vTaskDelay+0x64>)
 80117ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117ee:	601a      	str	r2, [r3, #0]
 80117f0:	f3bf 8f4f 	dsb	sy
 80117f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80117f8:	bf00      	nop
 80117fa:	3710      	adds	r7, #16
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}
 8011800:	200015f0 	.word	0x200015f0
 8011804:	e000ed04 	.word	0xe000ed04

08011808 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b08a      	sub	sp, #40	; 0x28
 801180c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801180e:	2300      	movs	r3, #0
 8011810:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011812:	2300      	movs	r3, #0
 8011814:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011816:	463a      	mov	r2, r7
 8011818:	1d39      	adds	r1, r7, #4
 801181a:	f107 0308 	add.w	r3, r7, #8
 801181e:	4618      	mov	r0, r3
 8011820:	f7fe fbdc 	bl	800ffdc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011824:	6839      	ldr	r1, [r7, #0]
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	68ba      	ldr	r2, [r7, #8]
 801182a:	9202      	str	r2, [sp, #8]
 801182c:	9301      	str	r3, [sp, #4]
 801182e:	2300      	movs	r3, #0
 8011830:	9300      	str	r3, [sp, #0]
 8011832:	2300      	movs	r3, #0
 8011834:	460a      	mov	r2, r1
 8011836:	4924      	ldr	r1, [pc, #144]	; (80118c8 <vTaskStartScheduler+0xc0>)
 8011838:	4824      	ldr	r0, [pc, #144]	; (80118cc <vTaskStartScheduler+0xc4>)
 801183a:	f7ff fd7b 	bl	8011334 <xTaskCreateStatic>
 801183e:	4603      	mov	r3, r0
 8011840:	4a23      	ldr	r2, [pc, #140]	; (80118d0 <vTaskStartScheduler+0xc8>)
 8011842:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011844:	4b22      	ldr	r3, [pc, #136]	; (80118d0 <vTaskStartScheduler+0xc8>)
 8011846:	681b      	ldr	r3, [r3, #0]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801184c:	2301      	movs	r3, #1
 801184e:	617b      	str	r3, [r7, #20]
 8011850:	e001      	b.n	8011856 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011852:	2300      	movs	r3, #0
 8011854:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	2b01      	cmp	r3, #1
 801185a:	d102      	bne.n	8011862 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801185c:	f001 f832 	bl	80128c4 <xTimerCreateTimerTask>
 8011860:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	2b01      	cmp	r3, #1
 8011866:	d11b      	bne.n	80118a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8011868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186c:	f383 8811 	msr	BASEPRI, r3
 8011870:	f3bf 8f6f 	isb	sy
 8011874:	f3bf 8f4f 	dsb	sy
 8011878:	613b      	str	r3, [r7, #16]
}
 801187a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801187c:	4b15      	ldr	r3, [pc, #84]	; (80118d4 <vTaskStartScheduler+0xcc>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	3358      	adds	r3, #88	; 0x58
 8011882:	4a15      	ldr	r2, [pc, #84]	; (80118d8 <vTaskStartScheduler+0xd0>)
 8011884:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011886:	4b15      	ldr	r3, [pc, #84]	; (80118dc <vTaskStartScheduler+0xd4>)
 8011888:	f04f 32ff 	mov.w	r2, #4294967295
 801188c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801188e:	4b14      	ldr	r3, [pc, #80]	; (80118e0 <vTaskStartScheduler+0xd8>)
 8011890:	2201      	movs	r2, #1
 8011892:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011894:	4b13      	ldr	r3, [pc, #76]	; (80118e4 <vTaskStartScheduler+0xdc>)
 8011896:	2200      	movs	r2, #0
 8011898:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801189a:	f001 fca9 	bl	80131f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801189e:	e00e      	b.n	80118be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118a6:	d10a      	bne.n	80118be <vTaskStartScheduler+0xb6>
	__asm volatile
 80118a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ac:	f383 8811 	msr	BASEPRI, r3
 80118b0:	f3bf 8f6f 	isb	sy
 80118b4:	f3bf 8f4f 	dsb	sy
 80118b8:	60fb      	str	r3, [r7, #12]
}
 80118ba:	bf00      	nop
 80118bc:	e7fe      	b.n	80118bc <vTaskStartScheduler+0xb4>
}
 80118be:	bf00      	nop
 80118c0:	3718      	adds	r7, #24
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	080186f8 	.word	0x080186f8
 80118cc:	08011f31 	.word	0x08011f31
 80118d0:	200015ec 	.word	0x200015ec
 80118d4:	200010f4 	.word	0x200010f4
 80118d8:	20000088 	.word	0x20000088
 80118dc:	200015e8 	.word	0x200015e8
 80118e0:	200015d4 	.word	0x200015d4
 80118e4:	200015cc 	.word	0x200015cc

080118e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80118e8:	b480      	push	{r7}
 80118ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80118ec:	4b04      	ldr	r3, [pc, #16]	; (8011900 <vTaskSuspendAll+0x18>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	3301      	adds	r3, #1
 80118f2:	4a03      	ldr	r2, [pc, #12]	; (8011900 <vTaskSuspendAll+0x18>)
 80118f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80118f6:	bf00      	nop
 80118f8:	46bd      	mov	sp, r7
 80118fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fe:	4770      	bx	lr
 8011900:	200015f0 	.word	0x200015f0

08011904 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b084      	sub	sp, #16
 8011908:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801190a:	2300      	movs	r3, #0
 801190c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801190e:	2300      	movs	r3, #0
 8011910:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011912:	4b42      	ldr	r3, [pc, #264]	; (8011a1c <xTaskResumeAll+0x118>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d10a      	bne.n	8011930 <xTaskResumeAll+0x2c>
	__asm volatile
 801191a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801191e:	f383 8811 	msr	BASEPRI, r3
 8011922:	f3bf 8f6f 	isb	sy
 8011926:	f3bf 8f4f 	dsb	sy
 801192a:	603b      	str	r3, [r7, #0]
}
 801192c:	bf00      	nop
 801192e:	e7fe      	b.n	801192e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011930:	f001 fd00 	bl	8013334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011934:	4b39      	ldr	r3, [pc, #228]	; (8011a1c <xTaskResumeAll+0x118>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	3b01      	subs	r3, #1
 801193a:	4a38      	ldr	r2, [pc, #224]	; (8011a1c <xTaskResumeAll+0x118>)
 801193c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801193e:	4b37      	ldr	r3, [pc, #220]	; (8011a1c <xTaskResumeAll+0x118>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d162      	bne.n	8011a0c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011946:	4b36      	ldr	r3, [pc, #216]	; (8011a20 <xTaskResumeAll+0x11c>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d05e      	beq.n	8011a0c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801194e:	e02f      	b.n	80119b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011950:	4b34      	ldr	r3, [pc, #208]	; (8011a24 <xTaskResumeAll+0x120>)
 8011952:	68db      	ldr	r3, [r3, #12]
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	3318      	adds	r3, #24
 801195c:	4618      	mov	r0, r3
 801195e:	f7fe fbfb 	bl	8010158 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	3304      	adds	r3, #4
 8011966:	4618      	mov	r0, r3
 8011968:	f7fe fbf6 	bl	8010158 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011970:	4b2d      	ldr	r3, [pc, #180]	; (8011a28 <xTaskResumeAll+0x124>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	429a      	cmp	r2, r3
 8011976:	d903      	bls.n	8011980 <xTaskResumeAll+0x7c>
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801197c:	4a2a      	ldr	r2, [pc, #168]	; (8011a28 <xTaskResumeAll+0x124>)
 801197e:	6013      	str	r3, [r2, #0]
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011984:	4613      	mov	r3, r2
 8011986:	009b      	lsls	r3, r3, #2
 8011988:	4413      	add	r3, r2
 801198a:	009b      	lsls	r3, r3, #2
 801198c:	4a27      	ldr	r2, [pc, #156]	; (8011a2c <xTaskResumeAll+0x128>)
 801198e:	441a      	add	r2, r3
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	3304      	adds	r3, #4
 8011994:	4619      	mov	r1, r3
 8011996:	4610      	mov	r0, r2
 8011998:	f7fe fb81 	bl	801009e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119a0:	4b23      	ldr	r3, [pc, #140]	; (8011a30 <xTaskResumeAll+0x12c>)
 80119a2:	681b      	ldr	r3, [r3, #0]
 80119a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a6:	429a      	cmp	r2, r3
 80119a8:	d302      	bcc.n	80119b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80119aa:	4b22      	ldr	r3, [pc, #136]	; (8011a34 <xTaskResumeAll+0x130>)
 80119ac:	2201      	movs	r2, #1
 80119ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80119b0:	4b1c      	ldr	r3, [pc, #112]	; (8011a24 <xTaskResumeAll+0x120>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1cb      	bne.n	8011950 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d001      	beq.n	80119c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80119be:	f000 fb71 	bl	80120a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80119c2:	4b1d      	ldr	r3, [pc, #116]	; (8011a38 <xTaskResumeAll+0x134>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d010      	beq.n	80119f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80119ce:	f000 f859 	bl	8011a84 <xTaskIncrementTick>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d002      	beq.n	80119de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80119d8:	4b16      	ldr	r3, [pc, #88]	; (8011a34 <xTaskResumeAll+0x130>)
 80119da:	2201      	movs	r2, #1
 80119dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	3b01      	subs	r3, #1
 80119e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d1f1      	bne.n	80119ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80119ea:	4b13      	ldr	r3, [pc, #76]	; (8011a38 <xTaskResumeAll+0x134>)
 80119ec:	2200      	movs	r2, #0
 80119ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80119f0:	4b10      	ldr	r3, [pc, #64]	; (8011a34 <xTaskResumeAll+0x130>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d009      	beq.n	8011a0c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80119f8:	2301      	movs	r3, #1
 80119fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80119fc:	4b0f      	ldr	r3, [pc, #60]	; (8011a3c <xTaskResumeAll+0x138>)
 80119fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a02:	601a      	str	r2, [r3, #0]
 8011a04:	f3bf 8f4f 	dsb	sy
 8011a08:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011a0c:	f001 fcc2 	bl	8013394 <vPortExitCritical>

	return xAlreadyYielded;
 8011a10:	68bb      	ldr	r3, [r7, #8]
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	200015f0 	.word	0x200015f0
 8011a20:	200015c8 	.word	0x200015c8
 8011a24:	20001588 	.word	0x20001588
 8011a28:	200015d0 	.word	0x200015d0
 8011a2c:	200010f8 	.word	0x200010f8
 8011a30:	200010f4 	.word	0x200010f4
 8011a34:	200015dc 	.word	0x200015dc
 8011a38:	200015d8 	.word	0x200015d8
 8011a3c:	e000ed04 	.word	0xe000ed04

08011a40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011a40:	b480      	push	{r7}
 8011a42:	b083      	sub	sp, #12
 8011a44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011a46:	4b05      	ldr	r3, [pc, #20]	; (8011a5c <xTaskGetTickCount+0x1c>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011a4c:	687b      	ldr	r3, [r7, #4]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	370c      	adds	r7, #12
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr
 8011a5a:	bf00      	nop
 8011a5c:	200015cc 	.word	0x200015cc

08011a60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a66:	f001 fd47 	bl	80134f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011a6e:	4b04      	ldr	r3, [pc, #16]	; (8011a80 <xTaskGetTickCountFromISR+0x20>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a74:	683b      	ldr	r3, [r7, #0]
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}
 8011a7e:	bf00      	nop
 8011a80:	200015cc 	.word	0x200015cc

08011a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b086      	sub	sp, #24
 8011a88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a8e:	4b4f      	ldr	r3, [pc, #316]	; (8011bcc <xTaskIncrementTick+0x148>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f040 808f 	bne.w	8011bb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011a98:	4b4d      	ldr	r3, [pc, #308]	; (8011bd0 <xTaskIncrementTick+0x14c>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	3301      	adds	r3, #1
 8011a9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011aa0:	4a4b      	ldr	r2, [pc, #300]	; (8011bd0 <xTaskIncrementTick+0x14c>)
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d120      	bne.n	8011aee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011aac:	4b49      	ldr	r3, [pc, #292]	; (8011bd4 <xTaskIncrementTick+0x150>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d00a      	beq.n	8011acc <xTaskIncrementTick+0x48>
	__asm volatile
 8011ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aba:	f383 8811 	msr	BASEPRI, r3
 8011abe:	f3bf 8f6f 	isb	sy
 8011ac2:	f3bf 8f4f 	dsb	sy
 8011ac6:	603b      	str	r3, [r7, #0]
}
 8011ac8:	bf00      	nop
 8011aca:	e7fe      	b.n	8011aca <xTaskIncrementTick+0x46>
 8011acc:	4b41      	ldr	r3, [pc, #260]	; (8011bd4 <xTaskIncrementTick+0x150>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	60fb      	str	r3, [r7, #12]
 8011ad2:	4b41      	ldr	r3, [pc, #260]	; (8011bd8 <xTaskIncrementTick+0x154>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	4a3f      	ldr	r2, [pc, #252]	; (8011bd4 <xTaskIncrementTick+0x150>)
 8011ad8:	6013      	str	r3, [r2, #0]
 8011ada:	4a3f      	ldr	r2, [pc, #252]	; (8011bd8 <xTaskIncrementTick+0x154>)
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	6013      	str	r3, [r2, #0]
 8011ae0:	4b3e      	ldr	r3, [pc, #248]	; (8011bdc <xTaskIncrementTick+0x158>)
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	4a3d      	ldr	r2, [pc, #244]	; (8011bdc <xTaskIncrementTick+0x158>)
 8011ae8:	6013      	str	r3, [r2, #0]
 8011aea:	f000 fadb 	bl	80120a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011aee:	4b3c      	ldr	r3, [pc, #240]	; (8011be0 <xTaskIncrementTick+0x15c>)
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	693a      	ldr	r2, [r7, #16]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d349      	bcc.n	8011b8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011af8:	4b36      	ldr	r3, [pc, #216]	; (8011bd4 <xTaskIncrementTick+0x150>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d104      	bne.n	8011b0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b02:	4b37      	ldr	r3, [pc, #220]	; (8011be0 <xTaskIncrementTick+0x15c>)
 8011b04:	f04f 32ff 	mov.w	r2, #4294967295
 8011b08:	601a      	str	r2, [r3, #0]
					break;
 8011b0a:	e03f      	b.n	8011b8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011b0c:	4b31      	ldr	r3, [pc, #196]	; (8011bd4 <xTaskIncrementTick+0x150>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	68db      	ldr	r3, [r3, #12]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011b1c:	693a      	ldr	r2, [r7, #16]
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d203      	bcs.n	8011b2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011b24:	4a2e      	ldr	r2, [pc, #184]	; (8011be0 <xTaskIncrementTick+0x15c>)
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011b2a:	e02f      	b.n	8011b8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	3304      	adds	r3, #4
 8011b30:	4618      	mov	r0, r3
 8011b32:	f7fe fb11 	bl	8010158 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b36:	68bb      	ldr	r3, [r7, #8]
 8011b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d004      	beq.n	8011b48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b3e:	68bb      	ldr	r3, [r7, #8]
 8011b40:	3318      	adds	r3, #24
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7fe fb08 	bl	8010158 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b4c:	4b25      	ldr	r3, [pc, #148]	; (8011be4 <xTaskIncrementTick+0x160>)
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d903      	bls.n	8011b5c <xTaskIncrementTick+0xd8>
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b58:	4a22      	ldr	r2, [pc, #136]	; (8011be4 <xTaskIncrementTick+0x160>)
 8011b5a:	6013      	str	r3, [r2, #0]
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b60:	4613      	mov	r3, r2
 8011b62:	009b      	lsls	r3, r3, #2
 8011b64:	4413      	add	r3, r2
 8011b66:	009b      	lsls	r3, r3, #2
 8011b68:	4a1f      	ldr	r2, [pc, #124]	; (8011be8 <xTaskIncrementTick+0x164>)
 8011b6a:	441a      	add	r2, r3
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	3304      	adds	r3, #4
 8011b70:	4619      	mov	r1, r3
 8011b72:	4610      	mov	r0, r2
 8011b74:	f7fe fa93 	bl	801009e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b7c:	4b1b      	ldr	r3, [pc, #108]	; (8011bec <xTaskIncrementTick+0x168>)
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d3b8      	bcc.n	8011af8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011b86:	2301      	movs	r3, #1
 8011b88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b8a:	e7b5      	b.n	8011af8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011b8c:	4b17      	ldr	r3, [pc, #92]	; (8011bec <xTaskIncrementTick+0x168>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b92:	4915      	ldr	r1, [pc, #84]	; (8011be8 <xTaskIncrementTick+0x164>)
 8011b94:	4613      	mov	r3, r2
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	4413      	add	r3, r2
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	440b      	add	r3, r1
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d901      	bls.n	8011ba8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011ba4:	2301      	movs	r3, #1
 8011ba6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011ba8:	4b11      	ldr	r3, [pc, #68]	; (8011bf0 <xTaskIncrementTick+0x16c>)
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d007      	beq.n	8011bc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	617b      	str	r3, [r7, #20]
 8011bb4:	e004      	b.n	8011bc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011bb6:	4b0f      	ldr	r3, [pc, #60]	; (8011bf4 <xTaskIncrementTick+0x170>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	3301      	adds	r3, #1
 8011bbc:	4a0d      	ldr	r2, [pc, #52]	; (8011bf4 <xTaskIncrementTick+0x170>)
 8011bbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011bc0:	697b      	ldr	r3, [r7, #20]
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3718      	adds	r7, #24
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	200015f0 	.word	0x200015f0
 8011bd0:	200015cc 	.word	0x200015cc
 8011bd4:	20001580 	.word	0x20001580
 8011bd8:	20001584 	.word	0x20001584
 8011bdc:	200015e0 	.word	0x200015e0
 8011be0:	200015e8 	.word	0x200015e8
 8011be4:	200015d0 	.word	0x200015d0
 8011be8:	200010f8 	.word	0x200010f8
 8011bec:	200010f4 	.word	0x200010f4
 8011bf0:	200015dc 	.word	0x200015dc
 8011bf4:	200015d8 	.word	0x200015d8

08011bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b085      	sub	sp, #20
 8011bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011bfe:	4b2a      	ldr	r3, [pc, #168]	; (8011ca8 <vTaskSwitchContext+0xb0>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d003      	beq.n	8011c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011c06:	4b29      	ldr	r3, [pc, #164]	; (8011cac <vTaskSwitchContext+0xb4>)
 8011c08:	2201      	movs	r2, #1
 8011c0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011c0c:	e046      	b.n	8011c9c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011c0e:	4b27      	ldr	r3, [pc, #156]	; (8011cac <vTaskSwitchContext+0xb4>)
 8011c10:	2200      	movs	r2, #0
 8011c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c14:	4b26      	ldr	r3, [pc, #152]	; (8011cb0 <vTaskSwitchContext+0xb8>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	60fb      	str	r3, [r7, #12]
 8011c1a:	e010      	b.n	8011c3e <vTaskSwitchContext+0x46>
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d10a      	bne.n	8011c38 <vTaskSwitchContext+0x40>
	__asm volatile
 8011c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c26:	f383 8811 	msr	BASEPRI, r3
 8011c2a:	f3bf 8f6f 	isb	sy
 8011c2e:	f3bf 8f4f 	dsb	sy
 8011c32:	607b      	str	r3, [r7, #4]
}
 8011c34:	bf00      	nop
 8011c36:	e7fe      	b.n	8011c36 <vTaskSwitchContext+0x3e>
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	3b01      	subs	r3, #1
 8011c3c:	60fb      	str	r3, [r7, #12]
 8011c3e:	491d      	ldr	r1, [pc, #116]	; (8011cb4 <vTaskSwitchContext+0xbc>)
 8011c40:	68fa      	ldr	r2, [r7, #12]
 8011c42:	4613      	mov	r3, r2
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	4413      	add	r3, r2
 8011c48:	009b      	lsls	r3, r3, #2
 8011c4a:	440b      	add	r3, r1
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d0e4      	beq.n	8011c1c <vTaskSwitchContext+0x24>
 8011c52:	68fa      	ldr	r2, [r7, #12]
 8011c54:	4613      	mov	r3, r2
 8011c56:	009b      	lsls	r3, r3, #2
 8011c58:	4413      	add	r3, r2
 8011c5a:	009b      	lsls	r3, r3, #2
 8011c5c:	4a15      	ldr	r2, [pc, #84]	; (8011cb4 <vTaskSwitchContext+0xbc>)
 8011c5e:	4413      	add	r3, r2
 8011c60:	60bb      	str	r3, [r7, #8]
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	685b      	ldr	r3, [r3, #4]
 8011c66:	685a      	ldr	r2, [r3, #4]
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	605a      	str	r2, [r3, #4]
 8011c6c:	68bb      	ldr	r3, [r7, #8]
 8011c6e:	685a      	ldr	r2, [r3, #4]
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	3308      	adds	r3, #8
 8011c74:	429a      	cmp	r2, r3
 8011c76:	d104      	bne.n	8011c82 <vTaskSwitchContext+0x8a>
 8011c78:	68bb      	ldr	r3, [r7, #8]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	685a      	ldr	r2, [r3, #4]
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	605a      	str	r2, [r3, #4]
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	4a0b      	ldr	r2, [pc, #44]	; (8011cb8 <vTaskSwitchContext+0xc0>)
 8011c8a:	6013      	str	r3, [r2, #0]
 8011c8c:	4a08      	ldr	r2, [pc, #32]	; (8011cb0 <vTaskSwitchContext+0xb8>)
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011c92:	4b09      	ldr	r3, [pc, #36]	; (8011cb8 <vTaskSwitchContext+0xc0>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	3358      	adds	r3, #88	; 0x58
 8011c98:	4a08      	ldr	r2, [pc, #32]	; (8011cbc <vTaskSwitchContext+0xc4>)
 8011c9a:	6013      	str	r3, [r2, #0]
}
 8011c9c:	bf00      	nop
 8011c9e:	3714      	adds	r7, #20
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr
 8011ca8:	200015f0 	.word	0x200015f0
 8011cac:	200015dc 	.word	0x200015dc
 8011cb0:	200015d0 	.word	0x200015d0
 8011cb4:	200010f8 	.word	0x200010f8
 8011cb8:	200010f4 	.word	0x200010f4
 8011cbc:	20000088 	.word	0x20000088

08011cc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d10a      	bne.n	8011ce6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd4:	f383 8811 	msr	BASEPRI, r3
 8011cd8:	f3bf 8f6f 	isb	sy
 8011cdc:	f3bf 8f4f 	dsb	sy
 8011ce0:	60fb      	str	r3, [r7, #12]
}
 8011ce2:	bf00      	nop
 8011ce4:	e7fe      	b.n	8011ce4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ce6:	4b07      	ldr	r3, [pc, #28]	; (8011d04 <vTaskPlaceOnEventList+0x44>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	3318      	adds	r3, #24
 8011cec:	4619      	mov	r1, r3
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7fe f9f9 	bl	80100e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011cf4:	2101      	movs	r1, #1
 8011cf6:	6838      	ldr	r0, [r7, #0]
 8011cf8:	f000 fd90 	bl	801281c <prvAddCurrentTaskToDelayedList>
}
 8011cfc:	bf00      	nop
 8011cfe:	3710      	adds	r7, #16
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}
 8011d04:	200010f4 	.word	0x200010f4

08011d08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b086      	sub	sp, #24
 8011d0c:	af00      	add	r7, sp, #0
 8011d0e:	60f8      	str	r0, [r7, #12]
 8011d10:	60b9      	str	r1, [r7, #8]
 8011d12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d10a      	bne.n	8011d30 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d1e:	f383 8811 	msr	BASEPRI, r3
 8011d22:	f3bf 8f6f 	isb	sy
 8011d26:	f3bf 8f4f 	dsb	sy
 8011d2a:	617b      	str	r3, [r7, #20]
}
 8011d2c:	bf00      	nop
 8011d2e:	e7fe      	b.n	8011d2e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011d30:	4b0a      	ldr	r3, [pc, #40]	; (8011d5c <vTaskPlaceOnEventListRestricted+0x54>)
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	3318      	adds	r3, #24
 8011d36:	4619      	mov	r1, r3
 8011d38:	68f8      	ldr	r0, [r7, #12]
 8011d3a:	f7fe f9b0 	bl	801009e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d002      	beq.n	8011d4a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011d44:	f04f 33ff 	mov.w	r3, #4294967295
 8011d48:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011d4a:	6879      	ldr	r1, [r7, #4]
 8011d4c:	68b8      	ldr	r0, [r7, #8]
 8011d4e:	f000 fd65 	bl	801281c <prvAddCurrentTaskToDelayedList>
	}
 8011d52:	bf00      	nop
 8011d54:	3718      	adds	r7, #24
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}
 8011d5a:	bf00      	nop
 8011d5c:	200010f4 	.word	0x200010f4

08011d60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b086      	sub	sp, #24
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	68db      	ldr	r3, [r3, #12]
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10a      	bne.n	8011d8c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d7a:	f383 8811 	msr	BASEPRI, r3
 8011d7e:	f3bf 8f6f 	isb	sy
 8011d82:	f3bf 8f4f 	dsb	sy
 8011d86:	60fb      	str	r3, [r7, #12]
}
 8011d88:	bf00      	nop
 8011d8a:	e7fe      	b.n	8011d8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	3318      	adds	r3, #24
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fe f9e1 	bl	8010158 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d96:	4b1e      	ldr	r3, [pc, #120]	; (8011e10 <xTaskRemoveFromEventList+0xb0>)
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d11d      	bne.n	8011dda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011d9e:	693b      	ldr	r3, [r7, #16]
 8011da0:	3304      	adds	r3, #4
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7fe f9d8 	bl	8010158 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dac:	4b19      	ldr	r3, [pc, #100]	; (8011e14 <xTaskRemoveFromEventList+0xb4>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d903      	bls.n	8011dbc <xTaskRemoveFromEventList+0x5c>
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011db8:	4a16      	ldr	r2, [pc, #88]	; (8011e14 <xTaskRemoveFromEventList+0xb4>)
 8011dba:	6013      	str	r3, [r2, #0]
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dc0:	4613      	mov	r3, r2
 8011dc2:	009b      	lsls	r3, r3, #2
 8011dc4:	4413      	add	r3, r2
 8011dc6:	009b      	lsls	r3, r3, #2
 8011dc8:	4a13      	ldr	r2, [pc, #76]	; (8011e18 <xTaskRemoveFromEventList+0xb8>)
 8011dca:	441a      	add	r2, r3
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	3304      	adds	r3, #4
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	4610      	mov	r0, r2
 8011dd4:	f7fe f963 	bl	801009e <vListInsertEnd>
 8011dd8:	e005      	b.n	8011de6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	3318      	adds	r3, #24
 8011dde:	4619      	mov	r1, r3
 8011de0:	480e      	ldr	r0, [pc, #56]	; (8011e1c <xTaskRemoveFromEventList+0xbc>)
 8011de2:	f7fe f95c 	bl	801009e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dea:	4b0d      	ldr	r3, [pc, #52]	; (8011e20 <xTaskRemoveFromEventList+0xc0>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d905      	bls.n	8011e00 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011df4:	2301      	movs	r3, #1
 8011df6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011df8:	4b0a      	ldr	r3, [pc, #40]	; (8011e24 <xTaskRemoveFromEventList+0xc4>)
 8011dfa:	2201      	movs	r2, #1
 8011dfc:	601a      	str	r2, [r3, #0]
 8011dfe:	e001      	b.n	8011e04 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011e00:	2300      	movs	r3, #0
 8011e02:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011e04:	697b      	ldr	r3, [r7, #20]
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3718      	adds	r7, #24
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	200015f0 	.word	0x200015f0
 8011e14:	200015d0 	.word	0x200015d0
 8011e18:	200010f8 	.word	0x200010f8
 8011e1c:	20001588 	.word	0x20001588
 8011e20:	200010f4 	.word	0x200010f4
 8011e24:	200015dc 	.word	0x200015dc

08011e28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011e30:	4b06      	ldr	r3, [pc, #24]	; (8011e4c <vTaskInternalSetTimeOutState+0x24>)
 8011e32:	681a      	ldr	r2, [r3, #0]
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e38:	4b05      	ldr	r3, [pc, #20]	; (8011e50 <vTaskInternalSetTimeOutState+0x28>)
 8011e3a:	681a      	ldr	r2, [r3, #0]
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	605a      	str	r2, [r3, #4]
}
 8011e40:	bf00      	nop
 8011e42:	370c      	adds	r7, #12
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr
 8011e4c:	200015e0 	.word	0x200015e0
 8011e50:	200015cc 	.word	0x200015cc

08011e54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b088      	sub	sp, #32
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
 8011e5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d10a      	bne.n	8011e7a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e68:	f383 8811 	msr	BASEPRI, r3
 8011e6c:	f3bf 8f6f 	isb	sy
 8011e70:	f3bf 8f4f 	dsb	sy
 8011e74:	613b      	str	r3, [r7, #16]
}
 8011e76:	bf00      	nop
 8011e78:	e7fe      	b.n	8011e78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d10a      	bne.n	8011e96 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e84:	f383 8811 	msr	BASEPRI, r3
 8011e88:	f3bf 8f6f 	isb	sy
 8011e8c:	f3bf 8f4f 	dsb	sy
 8011e90:	60fb      	str	r3, [r7, #12]
}
 8011e92:	bf00      	nop
 8011e94:	e7fe      	b.n	8011e94 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011e96:	f001 fa4d 	bl	8013334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011e9a:	4b1d      	ldr	r3, [pc, #116]	; (8011f10 <xTaskCheckForTimeOut+0xbc>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	685b      	ldr	r3, [r3, #4]
 8011ea4:	69ba      	ldr	r2, [r7, #24]
 8011ea6:	1ad3      	subs	r3, r2, r3
 8011ea8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eb2:	d102      	bne.n	8011eba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	61fb      	str	r3, [r7, #28]
 8011eb8:	e023      	b.n	8011f02 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681a      	ldr	r2, [r3, #0]
 8011ebe:	4b15      	ldr	r3, [pc, #84]	; (8011f14 <xTaskCheckForTimeOut+0xc0>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	429a      	cmp	r2, r3
 8011ec4:	d007      	beq.n	8011ed6 <xTaskCheckForTimeOut+0x82>
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	69ba      	ldr	r2, [r7, #24]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d302      	bcc.n	8011ed6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	61fb      	str	r3, [r7, #28]
 8011ed4:	e015      	b.n	8011f02 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	697a      	ldr	r2, [r7, #20]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d20b      	bcs.n	8011ef8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	697b      	ldr	r3, [r7, #20]
 8011ee6:	1ad2      	subs	r2, r2, r3
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f7ff ff9b 	bl	8011e28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	61fb      	str	r3, [r7, #28]
 8011ef6:	e004      	b.n	8011f02 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	2200      	movs	r2, #0
 8011efc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011efe:	2301      	movs	r3, #1
 8011f00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011f02:	f001 fa47 	bl	8013394 <vPortExitCritical>

	return xReturn;
 8011f06:	69fb      	ldr	r3, [r7, #28]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3720      	adds	r7, #32
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	200015cc 	.word	0x200015cc
 8011f14:	200015e0 	.word	0x200015e0

08011f18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011f18:	b480      	push	{r7}
 8011f1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011f1c:	4b03      	ldr	r3, [pc, #12]	; (8011f2c <vTaskMissedYield+0x14>)
 8011f1e:	2201      	movs	r2, #1
 8011f20:	601a      	str	r2, [r3, #0]
}
 8011f22:	bf00      	nop
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr
 8011f2c:	200015dc 	.word	0x200015dc

08011f30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b082      	sub	sp, #8
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011f38:	f000 f852 	bl	8011fe0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011f3c:	4b06      	ldr	r3, [pc, #24]	; (8011f58 <prvIdleTask+0x28>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d9f9      	bls.n	8011f38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011f44:	4b05      	ldr	r3, [pc, #20]	; (8011f5c <prvIdleTask+0x2c>)
 8011f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f4a:	601a      	str	r2, [r3, #0]
 8011f4c:	f3bf 8f4f 	dsb	sy
 8011f50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011f54:	e7f0      	b.n	8011f38 <prvIdleTask+0x8>
 8011f56:	bf00      	nop
 8011f58:	200010f8 	.word	0x200010f8
 8011f5c:	e000ed04 	.word	0xe000ed04

08011f60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b082      	sub	sp, #8
 8011f64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f66:	2300      	movs	r3, #0
 8011f68:	607b      	str	r3, [r7, #4]
 8011f6a:	e00c      	b.n	8011f86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	4613      	mov	r3, r2
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4413      	add	r3, r2
 8011f74:	009b      	lsls	r3, r3, #2
 8011f76:	4a12      	ldr	r2, [pc, #72]	; (8011fc0 <prvInitialiseTaskLists+0x60>)
 8011f78:	4413      	add	r3, r2
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f7fe f862 	bl	8010044 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	3301      	adds	r3, #1
 8011f84:	607b      	str	r3, [r7, #4]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b37      	cmp	r3, #55	; 0x37
 8011f8a:	d9ef      	bls.n	8011f6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011f8c:	480d      	ldr	r0, [pc, #52]	; (8011fc4 <prvInitialiseTaskLists+0x64>)
 8011f8e:	f7fe f859 	bl	8010044 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011f92:	480d      	ldr	r0, [pc, #52]	; (8011fc8 <prvInitialiseTaskLists+0x68>)
 8011f94:	f7fe f856 	bl	8010044 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011f98:	480c      	ldr	r0, [pc, #48]	; (8011fcc <prvInitialiseTaskLists+0x6c>)
 8011f9a:	f7fe f853 	bl	8010044 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011f9e:	480c      	ldr	r0, [pc, #48]	; (8011fd0 <prvInitialiseTaskLists+0x70>)
 8011fa0:	f7fe f850 	bl	8010044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011fa4:	480b      	ldr	r0, [pc, #44]	; (8011fd4 <prvInitialiseTaskLists+0x74>)
 8011fa6:	f7fe f84d 	bl	8010044 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011faa:	4b0b      	ldr	r3, [pc, #44]	; (8011fd8 <prvInitialiseTaskLists+0x78>)
 8011fac:	4a05      	ldr	r2, [pc, #20]	; (8011fc4 <prvInitialiseTaskLists+0x64>)
 8011fae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011fb0:	4b0a      	ldr	r3, [pc, #40]	; (8011fdc <prvInitialiseTaskLists+0x7c>)
 8011fb2:	4a05      	ldr	r2, [pc, #20]	; (8011fc8 <prvInitialiseTaskLists+0x68>)
 8011fb4:	601a      	str	r2, [r3, #0]
}
 8011fb6:	bf00      	nop
 8011fb8:	3708      	adds	r7, #8
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	200010f8 	.word	0x200010f8
 8011fc4:	20001558 	.word	0x20001558
 8011fc8:	2000156c 	.word	0x2000156c
 8011fcc:	20001588 	.word	0x20001588
 8011fd0:	2000159c 	.word	0x2000159c
 8011fd4:	200015b4 	.word	0x200015b4
 8011fd8:	20001580 	.word	0x20001580
 8011fdc:	20001584 	.word	0x20001584

08011fe0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b082      	sub	sp, #8
 8011fe4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011fe6:	e019      	b.n	801201c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011fe8:	f001 f9a4 	bl	8013334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fec:	4b10      	ldr	r3, [pc, #64]	; (8012030 <prvCheckTasksWaitingTermination+0x50>)
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	68db      	ldr	r3, [r3, #12]
 8011ff2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	3304      	adds	r3, #4
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7fe f8ad 	bl	8010158 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011ffe:	4b0d      	ldr	r3, [pc, #52]	; (8012034 <prvCheckTasksWaitingTermination+0x54>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	3b01      	subs	r3, #1
 8012004:	4a0b      	ldr	r2, [pc, #44]	; (8012034 <prvCheckTasksWaitingTermination+0x54>)
 8012006:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012008:	4b0b      	ldr	r3, [pc, #44]	; (8012038 <prvCheckTasksWaitingTermination+0x58>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	3b01      	subs	r3, #1
 801200e:	4a0a      	ldr	r2, [pc, #40]	; (8012038 <prvCheckTasksWaitingTermination+0x58>)
 8012010:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012012:	f001 f9bf 	bl	8013394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f000 f810 	bl	801203c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801201c:	4b06      	ldr	r3, [pc, #24]	; (8012038 <prvCheckTasksWaitingTermination+0x58>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d1e1      	bne.n	8011fe8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012024:	bf00      	nop
 8012026:	bf00      	nop
 8012028:	3708      	adds	r7, #8
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}
 801202e:	bf00      	nop
 8012030:	2000159c 	.word	0x2000159c
 8012034:	200015c8 	.word	0x200015c8
 8012038:	200015b0 	.word	0x200015b0

0801203c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	3358      	adds	r3, #88	; 0x58
 8012048:	4618      	mov	r0, r3
 801204a:	f002 fc27 	bl	801489c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8012054:	2b00      	cmp	r3, #0
 8012056:	d108      	bne.n	801206a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801205c:	4618      	mov	r0, r3
 801205e:	f001 fb57 	bl	8013710 <vPortFree>
				vPortFree( pxTCB );
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f001 fb54 	bl	8013710 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012068:	e018      	b.n	801209c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8012070:	2b01      	cmp	r3, #1
 8012072:	d103      	bne.n	801207c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012074:	6878      	ldr	r0, [r7, #4]
 8012076:	f001 fb4b 	bl	8013710 <vPortFree>
	}
 801207a:	e00f      	b.n	801209c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8012082:	2b02      	cmp	r3, #2
 8012084:	d00a      	beq.n	801209c <prvDeleteTCB+0x60>
	__asm volatile
 8012086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801208a:	f383 8811 	msr	BASEPRI, r3
 801208e:	f3bf 8f6f 	isb	sy
 8012092:	f3bf 8f4f 	dsb	sy
 8012096:	60fb      	str	r3, [r7, #12]
}
 8012098:	bf00      	nop
 801209a:	e7fe      	b.n	801209a <prvDeleteTCB+0x5e>
	}
 801209c:	bf00      	nop
 801209e:	3710      	adds	r7, #16
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80120aa:	4b0c      	ldr	r3, [pc, #48]	; (80120dc <prvResetNextTaskUnblockTime+0x38>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d104      	bne.n	80120be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80120b4:	4b0a      	ldr	r3, [pc, #40]	; (80120e0 <prvResetNextTaskUnblockTime+0x3c>)
 80120b6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80120bc:	e008      	b.n	80120d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120be:	4b07      	ldr	r3, [pc, #28]	; (80120dc <prvResetNextTaskUnblockTime+0x38>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	68db      	ldr	r3, [r3, #12]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	4a04      	ldr	r2, [pc, #16]	; (80120e0 <prvResetNextTaskUnblockTime+0x3c>)
 80120ce:	6013      	str	r3, [r2, #0]
}
 80120d0:	bf00      	nop
 80120d2:	370c      	adds	r7, #12
 80120d4:	46bd      	mov	sp, r7
 80120d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120da:	4770      	bx	lr
 80120dc:	20001580 	.word	0x20001580
 80120e0:	200015e8 	.word	0x200015e8

080120e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80120e4:	b480      	push	{r7}
 80120e6:	b083      	sub	sp, #12
 80120e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80120ea:	4b05      	ldr	r3, [pc, #20]	; (8012100 <xTaskGetCurrentTaskHandle+0x1c>)
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 80120f0:	687b      	ldr	r3, [r7, #4]
	}
 80120f2:	4618      	mov	r0, r3
 80120f4:	370c      	adds	r7, #12
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	200010f4 	.word	0x200010f4

08012104 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801210a:	4b0b      	ldr	r3, [pc, #44]	; (8012138 <xTaskGetSchedulerState+0x34>)
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d102      	bne.n	8012118 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012112:	2301      	movs	r3, #1
 8012114:	607b      	str	r3, [r7, #4]
 8012116:	e008      	b.n	801212a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012118:	4b08      	ldr	r3, [pc, #32]	; (801213c <xTaskGetSchedulerState+0x38>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d102      	bne.n	8012126 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012120:	2302      	movs	r3, #2
 8012122:	607b      	str	r3, [r7, #4]
 8012124:	e001      	b.n	801212a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012126:	2300      	movs	r3, #0
 8012128:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801212a:	687b      	ldr	r3, [r7, #4]
	}
 801212c:	4618      	mov	r0, r3
 801212e:	370c      	adds	r7, #12
 8012130:	46bd      	mov	sp, r7
 8012132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012136:	4770      	bx	lr
 8012138:	200015d4 	.word	0x200015d4
 801213c:	200015f0 	.word	0x200015f0

08012140 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012140:	b580      	push	{r7, lr}
 8012142:	b084      	sub	sp, #16
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801214c:	2300      	movs	r3, #0
 801214e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d051      	beq.n	80121fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215a:	4b2a      	ldr	r3, [pc, #168]	; (8012204 <xTaskPriorityInherit+0xc4>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012160:	429a      	cmp	r2, r3
 8012162:	d241      	bcs.n	80121e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	699b      	ldr	r3, [r3, #24]
 8012168:	2b00      	cmp	r3, #0
 801216a:	db06      	blt.n	801217a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801216c:	4b25      	ldr	r3, [pc, #148]	; (8012204 <xTaskPriorityInherit+0xc4>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012172:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	6959      	ldr	r1, [r3, #20]
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012182:	4613      	mov	r3, r2
 8012184:	009b      	lsls	r3, r3, #2
 8012186:	4413      	add	r3, r2
 8012188:	009b      	lsls	r3, r3, #2
 801218a:	4a1f      	ldr	r2, [pc, #124]	; (8012208 <xTaskPriorityInherit+0xc8>)
 801218c:	4413      	add	r3, r2
 801218e:	4299      	cmp	r1, r3
 8012190:	d122      	bne.n	80121d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012192:	68bb      	ldr	r3, [r7, #8]
 8012194:	3304      	adds	r3, #4
 8012196:	4618      	mov	r0, r3
 8012198:	f7fd ffde 	bl	8010158 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801219c:	4b19      	ldr	r3, [pc, #100]	; (8012204 <xTaskPriorityInherit+0xc4>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121aa:	4b18      	ldr	r3, [pc, #96]	; (801220c <xTaskPriorityInherit+0xcc>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d903      	bls.n	80121ba <xTaskPriorityInherit+0x7a>
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121b6:	4a15      	ldr	r2, [pc, #84]	; (801220c <xTaskPriorityInherit+0xcc>)
 80121b8:	6013      	str	r3, [r2, #0]
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121be:	4613      	mov	r3, r2
 80121c0:	009b      	lsls	r3, r3, #2
 80121c2:	4413      	add	r3, r2
 80121c4:	009b      	lsls	r3, r3, #2
 80121c6:	4a10      	ldr	r2, [pc, #64]	; (8012208 <xTaskPriorityInherit+0xc8>)
 80121c8:	441a      	add	r2, r3
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	3304      	adds	r3, #4
 80121ce:	4619      	mov	r1, r3
 80121d0:	4610      	mov	r0, r2
 80121d2:	f7fd ff64 	bl	801009e <vListInsertEnd>
 80121d6:	e004      	b.n	80121e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80121d8:	4b0a      	ldr	r3, [pc, #40]	; (8012204 <xTaskPriorityInherit+0xc4>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80121e2:	2301      	movs	r3, #1
 80121e4:	60fb      	str	r3, [r7, #12]
 80121e6:	e008      	b.n	80121fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80121ec:	4b05      	ldr	r3, [pc, #20]	; (8012204 <xTaskPriorityInherit+0xc4>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f2:	429a      	cmp	r2, r3
 80121f4:	d201      	bcs.n	80121fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80121f6:	2301      	movs	r3, #1
 80121f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121fa:	68fb      	ldr	r3, [r7, #12]
	}
 80121fc:	4618      	mov	r0, r3
 80121fe:	3710      	adds	r7, #16
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}
 8012204:	200010f4 	.word	0x200010f4
 8012208:	200010f8 	.word	0x200010f8
 801220c:	200015d0 	.word	0x200015d0

08012210 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012210:	b580      	push	{r7, lr}
 8012212:	b086      	sub	sp, #24
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801221c:	2300      	movs	r3, #0
 801221e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d056      	beq.n	80122d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012226:	4b2e      	ldr	r3, [pc, #184]	; (80122e0 <xTaskPriorityDisinherit+0xd0>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	693a      	ldr	r2, [r7, #16]
 801222c:	429a      	cmp	r2, r3
 801222e:	d00a      	beq.n	8012246 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012234:	f383 8811 	msr	BASEPRI, r3
 8012238:	f3bf 8f6f 	isb	sy
 801223c:	f3bf 8f4f 	dsb	sy
 8012240:	60fb      	str	r3, [r7, #12]
}
 8012242:	bf00      	nop
 8012244:	e7fe      	b.n	8012244 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012246:	693b      	ldr	r3, [r7, #16]
 8012248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801224a:	2b00      	cmp	r3, #0
 801224c:	d10a      	bne.n	8012264 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012252:	f383 8811 	msr	BASEPRI, r3
 8012256:	f3bf 8f6f 	isb	sy
 801225a:	f3bf 8f4f 	dsb	sy
 801225e:	60bb      	str	r3, [r7, #8]
}
 8012260:	bf00      	nop
 8012262:	e7fe      	b.n	8012262 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012268:	1e5a      	subs	r2, r3, #1
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012276:	429a      	cmp	r2, r3
 8012278:	d02c      	beq.n	80122d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801227e:	2b00      	cmp	r3, #0
 8012280:	d128      	bne.n	80122d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	3304      	adds	r3, #4
 8012286:	4618      	mov	r0, r3
 8012288:	f7fd ff66 	bl	8010158 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012298:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80122a0:	693b      	ldr	r3, [r7, #16]
 80122a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122a4:	4b0f      	ldr	r3, [pc, #60]	; (80122e4 <xTaskPriorityDisinherit+0xd4>)
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	429a      	cmp	r2, r3
 80122aa:	d903      	bls.n	80122b4 <xTaskPriorityDisinherit+0xa4>
 80122ac:	693b      	ldr	r3, [r7, #16]
 80122ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122b0:	4a0c      	ldr	r2, [pc, #48]	; (80122e4 <xTaskPriorityDisinherit+0xd4>)
 80122b2:	6013      	str	r3, [r2, #0]
 80122b4:	693b      	ldr	r3, [r7, #16]
 80122b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122b8:	4613      	mov	r3, r2
 80122ba:	009b      	lsls	r3, r3, #2
 80122bc:	4413      	add	r3, r2
 80122be:	009b      	lsls	r3, r3, #2
 80122c0:	4a09      	ldr	r2, [pc, #36]	; (80122e8 <xTaskPriorityDisinherit+0xd8>)
 80122c2:	441a      	add	r2, r3
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	3304      	adds	r3, #4
 80122c8:	4619      	mov	r1, r3
 80122ca:	4610      	mov	r0, r2
 80122cc:	f7fd fee7 	bl	801009e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80122d0:	2301      	movs	r3, #1
 80122d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80122d4:	697b      	ldr	r3, [r7, #20]
	}
 80122d6:	4618      	mov	r0, r3
 80122d8:	3718      	adds	r7, #24
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}
 80122de:	bf00      	nop
 80122e0:	200010f4 	.word	0x200010f4
 80122e4:	200015d0 	.word	0x200015d0
 80122e8:	200010f8 	.word	0x200010f8

080122ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b088      	sub	sp, #32
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80122fa:	2301      	movs	r3, #1
 80122fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d06a      	beq.n	80123da <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012308:	2b00      	cmp	r3, #0
 801230a:	d10a      	bne.n	8012322 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801230c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012310:	f383 8811 	msr	BASEPRI, r3
 8012314:	f3bf 8f6f 	isb	sy
 8012318:	f3bf 8f4f 	dsb	sy
 801231c:	60fb      	str	r3, [r7, #12]
}
 801231e:	bf00      	nop
 8012320:	e7fe      	b.n	8012320 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012322:	69bb      	ldr	r3, [r7, #24]
 8012324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012326:	683a      	ldr	r2, [r7, #0]
 8012328:	429a      	cmp	r2, r3
 801232a:	d902      	bls.n	8012332 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	61fb      	str	r3, [r7, #28]
 8012330:	e002      	b.n	8012338 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012332:	69bb      	ldr	r3, [r7, #24]
 8012334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012336:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012338:	69bb      	ldr	r3, [r7, #24]
 801233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801233c:	69fa      	ldr	r2, [r7, #28]
 801233e:	429a      	cmp	r2, r3
 8012340:	d04b      	beq.n	80123da <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012342:	69bb      	ldr	r3, [r7, #24]
 8012344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012346:	697a      	ldr	r2, [r7, #20]
 8012348:	429a      	cmp	r2, r3
 801234a:	d146      	bne.n	80123da <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801234c:	4b25      	ldr	r3, [pc, #148]	; (80123e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	69ba      	ldr	r2, [r7, #24]
 8012352:	429a      	cmp	r2, r3
 8012354:	d10a      	bne.n	801236c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8012356:	f04f 0350 	mov.w	r3, #80	; 0x50
 801235a:	f383 8811 	msr	BASEPRI, r3
 801235e:	f3bf 8f6f 	isb	sy
 8012362:	f3bf 8f4f 	dsb	sy
 8012366:	60bb      	str	r3, [r7, #8]
}
 8012368:	bf00      	nop
 801236a:	e7fe      	b.n	801236a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801236c:	69bb      	ldr	r3, [r7, #24]
 801236e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012370:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	69fa      	ldr	r2, [r7, #28]
 8012376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012378:	69bb      	ldr	r3, [r7, #24]
 801237a:	699b      	ldr	r3, [r3, #24]
 801237c:	2b00      	cmp	r3, #0
 801237e:	db04      	blt.n	801238a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012386:	69bb      	ldr	r3, [r7, #24]
 8012388:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	6959      	ldr	r1, [r3, #20]
 801238e:	693a      	ldr	r2, [r7, #16]
 8012390:	4613      	mov	r3, r2
 8012392:	009b      	lsls	r3, r3, #2
 8012394:	4413      	add	r3, r2
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	4a13      	ldr	r2, [pc, #76]	; (80123e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801239a:	4413      	add	r3, r2
 801239c:	4299      	cmp	r1, r3
 801239e:	d11c      	bne.n	80123da <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123a0:	69bb      	ldr	r3, [r7, #24]
 80123a2:	3304      	adds	r3, #4
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fd fed7 	bl	8010158 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80123aa:	69bb      	ldr	r3, [r7, #24]
 80123ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ae:	4b0f      	ldr	r3, [pc, #60]	; (80123ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80123b0:	681b      	ldr	r3, [r3, #0]
 80123b2:	429a      	cmp	r2, r3
 80123b4:	d903      	bls.n	80123be <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80123b6:	69bb      	ldr	r3, [r7, #24]
 80123b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ba:	4a0c      	ldr	r2, [pc, #48]	; (80123ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80123bc:	6013      	str	r3, [r2, #0]
 80123be:	69bb      	ldr	r3, [r7, #24]
 80123c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123c2:	4613      	mov	r3, r2
 80123c4:	009b      	lsls	r3, r3, #2
 80123c6:	4413      	add	r3, r2
 80123c8:	009b      	lsls	r3, r3, #2
 80123ca:	4a07      	ldr	r2, [pc, #28]	; (80123e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80123cc:	441a      	add	r2, r3
 80123ce:	69bb      	ldr	r3, [r7, #24]
 80123d0:	3304      	adds	r3, #4
 80123d2:	4619      	mov	r1, r3
 80123d4:	4610      	mov	r0, r2
 80123d6:	f7fd fe62 	bl	801009e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80123da:	bf00      	nop
 80123dc:	3720      	adds	r7, #32
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	200010f4 	.word	0x200010f4
 80123e8:	200010f8 	.word	0x200010f8
 80123ec:	200015d0 	.word	0x200015d0

080123f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80123f0:	b480      	push	{r7}
 80123f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80123f4:	4b07      	ldr	r3, [pc, #28]	; (8012414 <pvTaskIncrementMutexHeldCount+0x24>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d004      	beq.n	8012406 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80123fc:	4b05      	ldr	r3, [pc, #20]	; (8012414 <pvTaskIncrementMutexHeldCount+0x24>)
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012402:	3201      	adds	r2, #1
 8012404:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8012406:	4b03      	ldr	r3, [pc, #12]	; (8012414 <pvTaskIncrementMutexHeldCount+0x24>)
 8012408:	681b      	ldr	r3, [r3, #0]
	}
 801240a:	4618      	mov	r0, r3
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr
 8012414:	200010f4 	.word	0x200010f4

08012418 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8012418:	b580      	push	{r7, lr}
 801241a:	b086      	sub	sp, #24
 801241c:	af00      	add	r7, sp, #0
 801241e:	60f8      	str	r0, [r7, #12]
 8012420:	60b9      	str	r1, [r7, #8]
 8012422:	607a      	str	r2, [r7, #4]
 8012424:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8012426:	f000 ff85 	bl	8013334 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801242a:	4b29      	ldr	r3, [pc, #164]	; (80124d0 <xTaskNotifyWait+0xb8>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012432:	b2db      	uxtb	r3, r3
 8012434:	2b02      	cmp	r3, #2
 8012436:	d01c      	beq.n	8012472 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8012438:	4b25      	ldr	r3, [pc, #148]	; (80124d0 <xTaskNotifyWait+0xb8>)
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8012440:	68fa      	ldr	r2, [r7, #12]
 8012442:	43d2      	mvns	r2, r2
 8012444:	400a      	ands	r2, r1
 8012446:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801244a:	4b21      	ldr	r3, [pc, #132]	; (80124d0 <xTaskNotifyWait+0xb8>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	2201      	movs	r2, #1
 8012450:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d00b      	beq.n	8012472 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801245a:	2101      	movs	r1, #1
 801245c:	6838      	ldr	r0, [r7, #0]
 801245e:	f000 f9dd 	bl	801281c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012462:	4b1c      	ldr	r3, [pc, #112]	; (80124d4 <xTaskNotifyWait+0xbc>)
 8012464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012468:	601a      	str	r2, [r3, #0]
 801246a:	f3bf 8f4f 	dsb	sy
 801246e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012472:	f000 ff8f 	bl	8013394 <vPortExitCritical>

		taskENTER_CRITICAL();
 8012476:	f000 ff5d 	bl	8013334 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d005      	beq.n	801248c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012480:	4b13      	ldr	r3, [pc, #76]	; (80124d0 <xTaskNotifyWait+0xb8>)
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801248c:	4b10      	ldr	r3, [pc, #64]	; (80124d0 <xTaskNotifyWait+0xb8>)
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012494:	b2db      	uxtb	r3, r3
 8012496:	2b02      	cmp	r3, #2
 8012498:	d002      	beq.n	80124a0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801249a:	2300      	movs	r3, #0
 801249c:	617b      	str	r3, [r7, #20]
 801249e:	e00a      	b.n	80124b6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80124a0:	4b0b      	ldr	r3, [pc, #44]	; (80124d0 <xTaskNotifyWait+0xb8>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80124a8:	68ba      	ldr	r2, [r7, #8]
 80124aa:	43d2      	mvns	r2, r2
 80124ac:	400a      	ands	r2, r1
 80124ae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
				xReturn = pdTRUE;
 80124b2:	2301      	movs	r3, #1
 80124b4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80124b6:	4b06      	ldr	r3, [pc, #24]	; (80124d0 <xTaskNotifyWait+0xb8>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	2200      	movs	r2, #0
 80124bc:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 80124c0:	f000 ff68 	bl	8013394 <vPortExitCritical>

		return xReturn;
 80124c4:	697b      	ldr	r3, [r7, #20]
	}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3718      	adds	r7, #24
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	200010f4 	.word	0x200010f4
 80124d4:	e000ed04 	.word	0xe000ed04

080124d8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b08a      	sub	sp, #40	; 0x28
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	603b      	str	r3, [r7, #0]
 80124e4:	4613      	mov	r3, r2
 80124e6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80124e8:	2301      	movs	r3, #1
 80124ea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d10a      	bne.n	8012508 <xTaskGenericNotify+0x30>
	__asm volatile
 80124f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f6:	f383 8811 	msr	BASEPRI, r3
 80124fa:	f3bf 8f6f 	isb	sy
 80124fe:	f3bf 8f4f 	dsb	sy
 8012502:	61bb      	str	r3, [r7, #24]
}
 8012504:	bf00      	nop
 8012506:	e7fe      	b.n	8012506 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801250c:	f000 ff12 	bl	8013334 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8012510:	683b      	ldr	r3, [r7, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d004      	beq.n	8012520 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8012516:	6a3b      	ldr	r3, [r7, #32]
 8012518:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8012520:	6a3b      	ldr	r3, [r7, #32]
 8012522:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8012526:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8012528:	6a3b      	ldr	r3, [r7, #32]
 801252a:	2202      	movs	r2, #2
 801252c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

			switch( eAction )
 8012530:	79fb      	ldrb	r3, [r7, #7]
 8012532:	2b04      	cmp	r3, #4
 8012534:	d82d      	bhi.n	8012592 <xTaskGenericNotify+0xba>
 8012536:	a201      	add	r2, pc, #4	; (adr r2, 801253c <xTaskGenericNotify+0x64>)
 8012538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801253c:	080125b5 	.word	0x080125b5
 8012540:	08012551 	.word	0x08012551
 8012544:	08012563 	.word	0x08012563
 8012548:	08012573 	.word	0x08012573
 801254c:	0801257d 	.word	0x0801257d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012550:	6a3b      	ldr	r3, [r7, #32]
 8012552:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	431a      	orrs	r2, r3
 801255a:	6a3b      	ldr	r3, [r7, #32]
 801255c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					break;
 8012560:	e02b      	b.n	80125ba <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012562:	6a3b      	ldr	r3, [r7, #32]
 8012564:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012568:	1c5a      	adds	r2, r3, #1
 801256a:	6a3b      	ldr	r3, [r7, #32]
 801256c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					break;
 8012570:	e023      	b.n	80125ba <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012572:	6a3b      	ldr	r3, [r7, #32]
 8012574:	68ba      	ldr	r2, [r7, #8]
 8012576:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					break;
 801257a:	e01e      	b.n	80125ba <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801257c:	7ffb      	ldrb	r3, [r7, #31]
 801257e:	2b02      	cmp	r3, #2
 8012580:	d004      	beq.n	801258c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012582:	6a3b      	ldr	r3, [r7, #32]
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801258a:	e016      	b.n	80125ba <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 801258c:	2300      	movs	r3, #0
 801258e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012590:	e013      	b.n	80125ba <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012592:	6a3b      	ldr	r3, [r7, #32]
 8012594:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801259c:	d00c      	beq.n	80125b8 <xTaskGenericNotify+0xe0>
	__asm volatile
 801259e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a2:	f383 8811 	msr	BASEPRI, r3
 80125a6:	f3bf 8f6f 	isb	sy
 80125aa:	f3bf 8f4f 	dsb	sy
 80125ae:	617b      	str	r3, [r7, #20]
}
 80125b0:	bf00      	nop
 80125b2:	e7fe      	b.n	80125b2 <xTaskGenericNotify+0xda>
					break;
 80125b4:	bf00      	nop
 80125b6:	e000      	b.n	80125ba <xTaskGenericNotify+0xe2>

					break;
 80125b8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80125ba:	7ffb      	ldrb	r3, [r7, #31]
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d13a      	bne.n	8012636 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80125c0:	6a3b      	ldr	r3, [r7, #32]
 80125c2:	3304      	adds	r3, #4
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fd fdc7 	bl	8010158 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80125ca:	6a3b      	ldr	r3, [r7, #32]
 80125cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ce:	4b1d      	ldr	r3, [pc, #116]	; (8012644 <xTaskGenericNotify+0x16c>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d903      	bls.n	80125de <xTaskGenericNotify+0x106>
 80125d6:	6a3b      	ldr	r3, [r7, #32]
 80125d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125da:	4a1a      	ldr	r2, [pc, #104]	; (8012644 <xTaskGenericNotify+0x16c>)
 80125dc:	6013      	str	r3, [r2, #0]
 80125de:	6a3b      	ldr	r3, [r7, #32]
 80125e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125e2:	4613      	mov	r3, r2
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	4413      	add	r3, r2
 80125e8:	009b      	lsls	r3, r3, #2
 80125ea:	4a17      	ldr	r2, [pc, #92]	; (8012648 <xTaskGenericNotify+0x170>)
 80125ec:	441a      	add	r2, r3
 80125ee:	6a3b      	ldr	r3, [r7, #32]
 80125f0:	3304      	adds	r3, #4
 80125f2:	4619      	mov	r1, r3
 80125f4:	4610      	mov	r0, r2
 80125f6:	f7fd fd52 	bl	801009e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80125fa:	6a3b      	ldr	r3, [r7, #32]
 80125fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d00a      	beq.n	8012618 <xTaskGenericNotify+0x140>
	__asm volatile
 8012602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012606:	f383 8811 	msr	BASEPRI, r3
 801260a:	f3bf 8f6f 	isb	sy
 801260e:	f3bf 8f4f 	dsb	sy
 8012612:	613b      	str	r3, [r7, #16]
}
 8012614:	bf00      	nop
 8012616:	e7fe      	b.n	8012616 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012618:	6a3b      	ldr	r3, [r7, #32]
 801261a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801261c:	4b0b      	ldr	r3, [pc, #44]	; (801264c <xTaskGenericNotify+0x174>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012622:	429a      	cmp	r2, r3
 8012624:	d907      	bls.n	8012636 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8012626:	4b0a      	ldr	r3, [pc, #40]	; (8012650 <xTaskGenericNotify+0x178>)
 8012628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801262c:	601a      	str	r2, [r3, #0]
 801262e:	f3bf 8f4f 	dsb	sy
 8012632:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012636:	f000 fead 	bl	8013394 <vPortExitCritical>

		return xReturn;
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801263c:	4618      	mov	r0, r3
 801263e:	3728      	adds	r7, #40	; 0x28
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	200015d0 	.word	0x200015d0
 8012648:	200010f8 	.word	0x200010f8
 801264c:	200010f4 	.word	0x200010f4
 8012650:	e000ed04 	.word	0xe000ed04

08012654 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8012654:	b580      	push	{r7, lr}
 8012656:	b08e      	sub	sp, #56	; 0x38
 8012658:	af00      	add	r7, sp, #0
 801265a:	60f8      	str	r0, [r7, #12]
 801265c:	60b9      	str	r1, [r7, #8]
 801265e:	603b      	str	r3, [r7, #0]
 8012660:	4613      	mov	r3, r2
 8012662:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8012664:	2301      	movs	r3, #1
 8012666:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d10a      	bne.n	8012684 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 801266e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012672:	f383 8811 	msr	BASEPRI, r3
 8012676:	f3bf 8f6f 	isb	sy
 801267a:	f3bf 8f4f 	dsb	sy
 801267e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012680:	bf00      	nop
 8012682:	e7fe      	b.n	8012682 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012684:	f000 ff38 	bl	80134f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 801268c:	f3ef 8211 	mrs	r2, BASEPRI
 8012690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012694:	f383 8811 	msr	BASEPRI, r3
 8012698:	f3bf 8f6f 	isb	sy
 801269c:	f3bf 8f4f 	dsb	sy
 80126a0:	623a      	str	r2, [r7, #32]
 80126a2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80126a4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80126a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d004      	beq.n	80126b8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80126ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126b0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80126b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ba:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80126be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80126c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126c4:	2202      	movs	r2, #2
 80126c6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

			switch( eAction )
 80126ca:	79fb      	ldrb	r3, [r7, #7]
 80126cc:	2b04      	cmp	r3, #4
 80126ce:	d82f      	bhi.n	8012730 <xTaskGenericNotifyFromISR+0xdc>
 80126d0:	a201      	add	r2, pc, #4	; (adr r2, 80126d8 <xTaskGenericNotifyFromISR+0x84>)
 80126d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126d6:	bf00      	nop
 80126d8:	08012753 	.word	0x08012753
 80126dc:	080126ed 	.word	0x080126ed
 80126e0:	080126ff 	.word	0x080126ff
 80126e4:	0801270f 	.word	0x0801270f
 80126e8:	08012719 	.word	0x08012719
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80126ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	431a      	orrs	r2, r3
 80126f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					break;
 80126fc:	e02c      	b.n	8012758 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80126fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012700:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012704:	1c5a      	adds	r2, r3, #1
 8012706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012708:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					break;
 801270c:	e024      	b.n	8012758 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801270e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012710:	68ba      	ldr	r2, [r7, #8]
 8012712:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					break;
 8012716:	e01f      	b.n	8012758 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012718:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801271c:	2b02      	cmp	r3, #2
 801271e:	d004      	beq.n	801272a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012722:	68ba      	ldr	r2, [r7, #8]
 8012724:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8012728:	e016      	b.n	8012758 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 801272a:	2300      	movs	r3, #0
 801272c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 801272e:	e013      	b.n	8012758 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012732:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8012736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801273a:	d00c      	beq.n	8012756 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 801273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012740:	f383 8811 	msr	BASEPRI, r3
 8012744:	f3bf 8f6f 	isb	sy
 8012748:	f3bf 8f4f 	dsb	sy
 801274c:	61bb      	str	r3, [r7, #24]
}
 801274e:	bf00      	nop
 8012750:	e7fe      	b.n	8012750 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8012752:	bf00      	nop
 8012754:	e000      	b.n	8012758 <xTaskGenericNotifyFromISR+0x104>
					break;
 8012756:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8012758:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801275c:	2b01      	cmp	r3, #1
 801275e:	d146      	bne.n	80127ee <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8012760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00a      	beq.n	801277e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8012768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801276c:	f383 8811 	msr	BASEPRI, r3
 8012770:	f3bf 8f6f 	isb	sy
 8012774:	f3bf 8f4f 	dsb	sy
 8012778:	617b      	str	r3, [r7, #20]
}
 801277a:	bf00      	nop
 801277c:	e7fe      	b.n	801277c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801277e:	4b21      	ldr	r3, [pc, #132]	; (8012804 <xTaskGenericNotifyFromISR+0x1b0>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d11d      	bne.n	80127c2 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	3304      	adds	r3, #4
 801278a:	4618      	mov	r0, r3
 801278c:	f7fd fce4 	bl	8010158 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012794:	4b1c      	ldr	r3, [pc, #112]	; (8012808 <xTaskGenericNotifyFromISR+0x1b4>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	429a      	cmp	r2, r3
 801279a:	d903      	bls.n	80127a4 <xTaskGenericNotifyFromISR+0x150>
 801279c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127a0:	4a19      	ldr	r2, [pc, #100]	; (8012808 <xTaskGenericNotifyFromISR+0x1b4>)
 80127a2:	6013      	str	r3, [r2, #0]
 80127a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127a8:	4613      	mov	r3, r2
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	4413      	add	r3, r2
 80127ae:	009b      	lsls	r3, r3, #2
 80127b0:	4a16      	ldr	r2, [pc, #88]	; (801280c <xTaskGenericNotifyFromISR+0x1b8>)
 80127b2:	441a      	add	r2, r3
 80127b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b6:	3304      	adds	r3, #4
 80127b8:	4619      	mov	r1, r3
 80127ba:	4610      	mov	r0, r2
 80127bc:	f7fd fc6f 	bl	801009e <vListInsertEnd>
 80127c0:	e005      	b.n	80127ce <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80127c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c4:	3318      	adds	r3, #24
 80127c6:	4619      	mov	r1, r3
 80127c8:	4811      	ldr	r0, [pc, #68]	; (8012810 <xTaskGenericNotifyFromISR+0x1bc>)
 80127ca:	f7fd fc68 	bl	801009e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80127ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127d2:	4b10      	ldr	r3, [pc, #64]	; (8012814 <xTaskGenericNotifyFromISR+0x1c0>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127d8:	429a      	cmp	r2, r3
 80127da:	d908      	bls.n	80127ee <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80127dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d002      	beq.n	80127e8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80127e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127e4:	2201      	movs	r2, #1
 80127e6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80127e8:	4b0b      	ldr	r3, [pc, #44]	; (8012818 <xTaskGenericNotifyFromISR+0x1c4>)
 80127ea:	2201      	movs	r2, #1
 80127ec:	601a      	str	r2, [r3, #0]
 80127ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	f383 8811 	msr	BASEPRI, r3
}
 80127f8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80127fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80127fc:	4618      	mov	r0, r3
 80127fe:	3738      	adds	r7, #56	; 0x38
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	200015f0 	.word	0x200015f0
 8012808:	200015d0 	.word	0x200015d0
 801280c:	200010f8 	.word	0x200010f8
 8012810:	20001588 	.word	0x20001588
 8012814:	200010f4 	.word	0x200010f4
 8012818:	200015dc 	.word	0x200015dc

0801281c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012826:	4b21      	ldr	r3, [pc, #132]	; (80128ac <prvAddCurrentTaskToDelayedList+0x90>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801282c:	4b20      	ldr	r3, [pc, #128]	; (80128b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	3304      	adds	r3, #4
 8012832:	4618      	mov	r0, r3
 8012834:	f7fd fc90 	bl	8010158 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801283e:	d10a      	bne.n	8012856 <prvAddCurrentTaskToDelayedList+0x3a>
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d007      	beq.n	8012856 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012846:	4b1a      	ldr	r3, [pc, #104]	; (80128b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	3304      	adds	r3, #4
 801284c:	4619      	mov	r1, r3
 801284e:	4819      	ldr	r0, [pc, #100]	; (80128b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8012850:	f7fd fc25 	bl	801009e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012854:	e026      	b.n	80128a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012856:	68fa      	ldr	r2, [r7, #12]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	4413      	add	r3, r2
 801285c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801285e:	4b14      	ldr	r3, [pc, #80]	; (80128b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	68ba      	ldr	r2, [r7, #8]
 8012864:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012866:	68ba      	ldr	r2, [r7, #8]
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	429a      	cmp	r2, r3
 801286c:	d209      	bcs.n	8012882 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801286e:	4b12      	ldr	r3, [pc, #72]	; (80128b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8012870:	681a      	ldr	r2, [r3, #0]
 8012872:	4b0f      	ldr	r3, [pc, #60]	; (80128b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	3304      	adds	r3, #4
 8012878:	4619      	mov	r1, r3
 801287a:	4610      	mov	r0, r2
 801287c:	f7fd fc33 	bl	80100e6 <vListInsert>
}
 8012880:	e010      	b.n	80128a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012882:	4b0e      	ldr	r3, [pc, #56]	; (80128bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8012884:	681a      	ldr	r2, [r3, #0]
 8012886:	4b0a      	ldr	r3, [pc, #40]	; (80128b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	3304      	adds	r3, #4
 801288c:	4619      	mov	r1, r3
 801288e:	4610      	mov	r0, r2
 8012890:	f7fd fc29 	bl	80100e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012894:	4b0a      	ldr	r3, [pc, #40]	; (80128c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	68ba      	ldr	r2, [r7, #8]
 801289a:	429a      	cmp	r2, r3
 801289c:	d202      	bcs.n	80128a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801289e:	4a08      	ldr	r2, [pc, #32]	; (80128c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	6013      	str	r3, [r2, #0]
}
 80128a4:	bf00      	nop
 80128a6:	3710      	adds	r7, #16
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}
 80128ac:	200015cc 	.word	0x200015cc
 80128b0:	200010f4 	.word	0x200010f4
 80128b4:	200015b4 	.word	0x200015b4
 80128b8:	20001584 	.word	0x20001584
 80128bc:	20001580 	.word	0x20001580
 80128c0:	200015e8 	.word	0x200015e8

080128c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b08a      	sub	sp, #40	; 0x28
 80128c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80128ca:	2300      	movs	r3, #0
 80128cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80128ce:	f000 fba1 	bl	8013014 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80128d2:	4b1c      	ldr	r3, [pc, #112]	; (8012944 <xTimerCreateTimerTask+0x80>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d021      	beq.n	801291e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80128da:	2300      	movs	r3, #0
 80128dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80128de:	2300      	movs	r3, #0
 80128e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80128e2:	1d3a      	adds	r2, r7, #4
 80128e4:	f107 0108 	add.w	r1, r7, #8
 80128e8:	f107 030c 	add.w	r3, r7, #12
 80128ec:	4618      	mov	r0, r3
 80128ee:	f7fd fb8f 	bl	8010010 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80128f2:	6879      	ldr	r1, [r7, #4]
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	68fa      	ldr	r2, [r7, #12]
 80128f8:	9202      	str	r2, [sp, #8]
 80128fa:	9301      	str	r3, [sp, #4]
 80128fc:	2302      	movs	r3, #2
 80128fe:	9300      	str	r3, [sp, #0]
 8012900:	2300      	movs	r3, #0
 8012902:	460a      	mov	r2, r1
 8012904:	4910      	ldr	r1, [pc, #64]	; (8012948 <xTimerCreateTimerTask+0x84>)
 8012906:	4811      	ldr	r0, [pc, #68]	; (801294c <xTimerCreateTimerTask+0x88>)
 8012908:	f7fe fd14 	bl	8011334 <xTaskCreateStatic>
 801290c:	4603      	mov	r3, r0
 801290e:	4a10      	ldr	r2, [pc, #64]	; (8012950 <xTimerCreateTimerTask+0x8c>)
 8012910:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8012912:	4b0f      	ldr	r3, [pc, #60]	; (8012950 <xTimerCreateTimerTask+0x8c>)
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d001      	beq.n	801291e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801291a:	2301      	movs	r3, #1
 801291c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d10a      	bne.n	801293a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8012924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012928:	f383 8811 	msr	BASEPRI, r3
 801292c:	f3bf 8f6f 	isb	sy
 8012930:	f3bf 8f4f 	dsb	sy
 8012934:	613b      	str	r3, [r7, #16]
}
 8012936:	bf00      	nop
 8012938:	e7fe      	b.n	8012938 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801293a:	697b      	ldr	r3, [r7, #20]
}
 801293c:	4618      	mov	r0, r3
 801293e:	3718      	adds	r7, #24
 8012940:	46bd      	mov	sp, r7
 8012942:	bd80      	pop	{r7, pc}
 8012944:	20001624 	.word	0x20001624
 8012948:	08018700 	.word	0x08018700
 801294c:	08012bbd 	.word	0x08012bbd
 8012950:	20001628 	.word	0x20001628

08012954 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8012954:	b580      	push	{r7, lr}
 8012956:	b088      	sub	sp, #32
 8012958:	af02      	add	r7, sp, #8
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	607a      	str	r2, [r7, #4]
 8012960:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8012962:	202c      	movs	r0, #44	; 0x2c
 8012964:	f000 fe08 	bl	8013578 <pvPortMalloc>
 8012968:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d00d      	beq.n	801298c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8012970:	697b      	ldr	r3, [r7, #20]
 8012972:	2200      	movs	r2, #0
 8012974:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	9301      	str	r3, [sp, #4]
 801297c:	6a3b      	ldr	r3, [r7, #32]
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	68b9      	ldr	r1, [r7, #8]
 8012986:	68f8      	ldr	r0, [r7, #12]
 8012988:	f000 f843 	bl	8012a12 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801298c:	697b      	ldr	r3, [r7, #20]
	}
 801298e:	4618      	mov	r0, r3
 8012990:	3718      	adds	r7, #24
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}

08012996 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8012996:	b580      	push	{r7, lr}
 8012998:	b08a      	sub	sp, #40	; 0x28
 801299a:	af02      	add	r7, sp, #8
 801299c:	60f8      	str	r0, [r7, #12]
 801299e:	60b9      	str	r1, [r7, #8]
 80129a0:	607a      	str	r2, [r7, #4]
 80129a2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80129a4:	232c      	movs	r3, #44	; 0x2c
 80129a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80129a8:	693b      	ldr	r3, [r7, #16]
 80129aa:	2b2c      	cmp	r3, #44	; 0x2c
 80129ac:	d00a      	beq.n	80129c4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80129ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b2:	f383 8811 	msr	BASEPRI, r3
 80129b6:	f3bf 8f6f 	isb	sy
 80129ba:	f3bf 8f4f 	dsb	sy
 80129be:	61bb      	str	r3, [r7, #24]
}
 80129c0:	bf00      	nop
 80129c2:	e7fe      	b.n	80129c2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80129c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80129c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d10a      	bne.n	80129e2 <xTimerCreateStatic+0x4c>
	__asm volatile
 80129cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129d0:	f383 8811 	msr	BASEPRI, r3
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	f3bf 8f4f 	dsb	sy
 80129dc:	617b      	str	r3, [r7, #20]
}
 80129de:	bf00      	nop
 80129e0:	e7fe      	b.n	80129e0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80129e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80129e6:	69fb      	ldr	r3, [r7, #28]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d00d      	beq.n	8012a08 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80129ec:	69fb      	ldr	r3, [r7, #28]
 80129ee:	2202      	movs	r2, #2
 80129f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	9301      	str	r3, [sp, #4]
 80129f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129fa:	9300      	str	r3, [sp, #0]
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	68b9      	ldr	r1, [r7, #8]
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	f000 f805 	bl	8012a12 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012a08:	69fb      	ldr	r3, [r7, #28]
	}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3720      	adds	r7, #32
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b086      	sub	sp, #24
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	60f8      	str	r0, [r7, #12]
 8012a1a:	60b9      	str	r1, [r7, #8]
 8012a1c:	607a      	str	r2, [r7, #4]
 8012a1e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d10a      	bne.n	8012a3c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8012a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a2a:	f383 8811 	msr	BASEPRI, r3
 8012a2e:	f3bf 8f6f 	isb	sy
 8012a32:	f3bf 8f4f 	dsb	sy
 8012a36:	617b      	str	r3, [r7, #20]
}
 8012a38:	bf00      	nop
 8012a3a:	e7fe      	b.n	8012a3a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d01e      	beq.n	8012a80 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8012a42:	f000 fae7 	bl	8013014 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8012a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a48:	68fa      	ldr	r2, [r7, #12]
 8012a4a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	68ba      	ldr	r2, [r7, #8]
 8012a50:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8012a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a54:	683a      	ldr	r2, [r7, #0]
 8012a56:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8012a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a5a:	6a3a      	ldr	r2, [r7, #32]
 8012a5c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8012a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a60:	3304      	adds	r3, #4
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7fd fb0e 	bl	8010084 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d008      	beq.n	8012a80 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8012a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012a74:	f043 0304 	orr.w	r3, r3, #4
 8012a78:	b2da      	uxtb	r2, r3
 8012a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012a80:	bf00      	nop
 8012a82:	3718      	adds	r7, #24
 8012a84:	46bd      	mov	sp, r7
 8012a86:	bd80      	pop	{r7, pc}

08012a88 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b08a      	sub	sp, #40	; 0x28
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	607a      	str	r2, [r7, #4]
 8012a94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8012a96:	2300      	movs	r3, #0
 8012a98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d10a      	bne.n	8012ab6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8012aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa4:	f383 8811 	msr	BASEPRI, r3
 8012aa8:	f3bf 8f6f 	isb	sy
 8012aac:	f3bf 8f4f 	dsb	sy
 8012ab0:	623b      	str	r3, [r7, #32]
}
 8012ab2:	bf00      	nop
 8012ab4:	e7fe      	b.n	8012ab4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8012ab6:	4b1a      	ldr	r3, [pc, #104]	; (8012b20 <xTimerGenericCommand+0x98>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d02a      	beq.n	8012b14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	2b05      	cmp	r3, #5
 8012ace:	dc18      	bgt.n	8012b02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012ad0:	f7ff fb18 	bl	8012104 <xTaskGetSchedulerState>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	2b02      	cmp	r3, #2
 8012ad8:	d109      	bne.n	8012aee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012ada:	4b11      	ldr	r3, [pc, #68]	; (8012b20 <xTimerGenericCommand+0x98>)
 8012adc:	6818      	ldr	r0, [r3, #0]
 8012ade:	f107 0110 	add.w	r1, r7, #16
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ae6:	f7fd fdbf 	bl	8010668 <xQueueGenericSend>
 8012aea:	6278      	str	r0, [r7, #36]	; 0x24
 8012aec:	e012      	b.n	8012b14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012aee:	4b0c      	ldr	r3, [pc, #48]	; (8012b20 <xTimerGenericCommand+0x98>)
 8012af0:	6818      	ldr	r0, [r3, #0]
 8012af2:	f107 0110 	add.w	r1, r7, #16
 8012af6:	2300      	movs	r3, #0
 8012af8:	2200      	movs	r2, #0
 8012afa:	f7fd fdb5 	bl	8010668 <xQueueGenericSend>
 8012afe:	6278      	str	r0, [r7, #36]	; 0x24
 8012b00:	e008      	b.n	8012b14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012b02:	4b07      	ldr	r3, [pc, #28]	; (8012b20 <xTimerGenericCommand+0x98>)
 8012b04:	6818      	ldr	r0, [r3, #0]
 8012b06:	f107 0110 	add.w	r1, r7, #16
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	683a      	ldr	r2, [r7, #0]
 8012b0e:	f7fd fea9 	bl	8010864 <xQueueGenericSendFromISR>
 8012b12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012b16:	4618      	mov	r0, r3
 8012b18:	3728      	adds	r7, #40	; 0x28
 8012b1a:	46bd      	mov	sp, r7
 8012b1c:	bd80      	pop	{r7, pc}
 8012b1e:	bf00      	nop
 8012b20:	20001624 	.word	0x20001624

08012b24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012b24:	b580      	push	{r7, lr}
 8012b26:	b088      	sub	sp, #32
 8012b28:	af02      	add	r7, sp, #8
 8012b2a:	6078      	str	r0, [r7, #4]
 8012b2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b2e:	4b22      	ldr	r3, [pc, #136]	; (8012bb8 <prvProcessExpiredTimer+0x94>)
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	68db      	ldr	r3, [r3, #12]
 8012b36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	3304      	adds	r3, #4
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fd fb0b 	bl	8010158 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b48:	f003 0304 	and.w	r3, r3, #4
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d022      	beq.n	8012b96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012b50:	697b      	ldr	r3, [r7, #20]
 8012b52:	699a      	ldr	r2, [r3, #24]
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	18d1      	adds	r1, r2, r3
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	683a      	ldr	r2, [r7, #0]
 8012b5c:	6978      	ldr	r0, [r7, #20]
 8012b5e:	f000 f8d1 	bl	8012d04 <prvInsertTimerInActiveList>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d01f      	beq.n	8012ba8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012b68:	2300      	movs	r3, #0
 8012b6a:	9300      	str	r3, [sp, #0]
 8012b6c:	2300      	movs	r3, #0
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	2100      	movs	r1, #0
 8012b72:	6978      	ldr	r0, [r7, #20]
 8012b74:	f7ff ff88 	bl	8012a88 <xTimerGenericCommand>
 8012b78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d113      	bne.n	8012ba8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b84:	f383 8811 	msr	BASEPRI, r3
 8012b88:	f3bf 8f6f 	isb	sy
 8012b8c:	f3bf 8f4f 	dsb	sy
 8012b90:	60fb      	str	r3, [r7, #12]
}
 8012b92:	bf00      	nop
 8012b94:	e7fe      	b.n	8012b94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012b9c:	f023 0301 	bic.w	r3, r3, #1
 8012ba0:	b2da      	uxtb	r2, r3
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	6a1b      	ldr	r3, [r3, #32]
 8012bac:	6978      	ldr	r0, [r7, #20]
 8012bae:	4798      	blx	r3
}
 8012bb0:	bf00      	nop
 8012bb2:	3718      	adds	r7, #24
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	2000161c 	.word	0x2000161c

08012bbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b084      	sub	sp, #16
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012bc4:	f107 0308 	add.w	r3, r7, #8
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f000 f857 	bl	8012c7c <prvGetNextExpireTime>
 8012bce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	4619      	mov	r1, r3
 8012bd4:	68f8      	ldr	r0, [r7, #12]
 8012bd6:	f000 f803 	bl	8012be0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012bda:	f000 f8d5 	bl	8012d88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012bde:	e7f1      	b.n	8012bc4 <prvTimerTask+0x8>

08012be0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012bea:	f7fe fe7d 	bl	80118e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012bee:	f107 0308 	add.w	r3, r7, #8
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f000 f866 	bl	8012cc4 <prvSampleTimeNow>
 8012bf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d130      	bne.n	8012c62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012c00:	683b      	ldr	r3, [r7, #0]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d10a      	bne.n	8012c1c <prvProcessTimerOrBlockTask+0x3c>
 8012c06:	687a      	ldr	r2, [r7, #4]
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	429a      	cmp	r2, r3
 8012c0c:	d806      	bhi.n	8012c1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012c0e:	f7fe fe79 	bl	8011904 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012c12:	68f9      	ldr	r1, [r7, #12]
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f7ff ff85 	bl	8012b24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012c1a:	e024      	b.n	8012c66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d008      	beq.n	8012c34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012c22:	4b13      	ldr	r3, [pc, #76]	; (8012c70 <prvProcessTimerOrBlockTask+0x90>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d101      	bne.n	8012c30 <prvProcessTimerOrBlockTask+0x50>
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	e000      	b.n	8012c32 <prvProcessTimerOrBlockTask+0x52>
 8012c30:	2300      	movs	r3, #0
 8012c32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012c34:	4b0f      	ldr	r3, [pc, #60]	; (8012c74 <prvProcessTimerOrBlockTask+0x94>)
 8012c36:	6818      	ldr	r0, [r3, #0]
 8012c38:	687a      	ldr	r2, [r7, #4]
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	1ad3      	subs	r3, r2, r3
 8012c3e:	683a      	ldr	r2, [r7, #0]
 8012c40:	4619      	mov	r1, r3
 8012c42:	f7fe fb43 	bl	80112cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8012c46:	f7fe fe5d 	bl	8011904 <xTaskResumeAll>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d10a      	bne.n	8012c66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012c50:	4b09      	ldr	r3, [pc, #36]	; (8012c78 <prvProcessTimerOrBlockTask+0x98>)
 8012c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c56:	601a      	str	r2, [r3, #0]
 8012c58:	f3bf 8f4f 	dsb	sy
 8012c5c:	f3bf 8f6f 	isb	sy
}
 8012c60:	e001      	b.n	8012c66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012c62:	f7fe fe4f 	bl	8011904 <xTaskResumeAll>
}
 8012c66:	bf00      	nop
 8012c68:	3710      	adds	r7, #16
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	20001620 	.word	0x20001620
 8012c74:	20001624 	.word	0x20001624
 8012c78:	e000ed04 	.word	0xe000ed04

08012c7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012c7c:	b480      	push	{r7}
 8012c7e:	b085      	sub	sp, #20
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012c84:	4b0e      	ldr	r3, [pc, #56]	; (8012cc0 <prvGetNextExpireTime+0x44>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d101      	bne.n	8012c92 <prvGetNextExpireTime+0x16>
 8012c8e:	2201      	movs	r2, #1
 8012c90:	e000      	b.n	8012c94 <prvGetNextExpireTime+0x18>
 8012c92:	2200      	movs	r2, #0
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d105      	bne.n	8012cac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012ca0:	4b07      	ldr	r3, [pc, #28]	; (8012cc0 <prvGetNextExpireTime+0x44>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	68db      	ldr	r3, [r3, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	60fb      	str	r3, [r7, #12]
 8012caa:	e001      	b.n	8012cb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012cac:	2300      	movs	r3, #0
 8012cae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012cb0:	68fb      	ldr	r3, [r7, #12]
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3714      	adds	r7, #20
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	2000161c 	.word	0x2000161c

08012cc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b084      	sub	sp, #16
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012ccc:	f7fe feb8 	bl	8011a40 <xTaskGetTickCount>
 8012cd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012cd2:	4b0b      	ldr	r3, [pc, #44]	; (8012d00 <prvSampleTimeNow+0x3c>)
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	68fa      	ldr	r2, [r7, #12]
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	d205      	bcs.n	8012ce8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012cdc:	f000 f936 	bl	8012f4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	2201      	movs	r2, #1
 8012ce4:	601a      	str	r2, [r3, #0]
 8012ce6:	e002      	b.n	8012cee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	2200      	movs	r2, #0
 8012cec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012cee:	4a04      	ldr	r2, [pc, #16]	; (8012d00 <prvSampleTimeNow+0x3c>)
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	2000162c 	.word	0x2000162c

08012d04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012d04:	b580      	push	{r7, lr}
 8012d06:	b086      	sub	sp, #24
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	60f8      	str	r0, [r7, #12]
 8012d0c:	60b9      	str	r1, [r7, #8]
 8012d0e:	607a      	str	r2, [r7, #4]
 8012d10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012d12:	2300      	movs	r3, #0
 8012d14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	68ba      	ldr	r2, [r7, #8]
 8012d1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d812      	bhi.n	8012d50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	1ad2      	subs	r2, r2, r3
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	699b      	ldr	r3, [r3, #24]
 8012d34:	429a      	cmp	r2, r3
 8012d36:	d302      	bcc.n	8012d3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012d38:	2301      	movs	r3, #1
 8012d3a:	617b      	str	r3, [r7, #20]
 8012d3c:	e01b      	b.n	8012d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012d3e:	4b10      	ldr	r3, [pc, #64]	; (8012d80 <prvInsertTimerInActiveList+0x7c>)
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	3304      	adds	r3, #4
 8012d46:	4619      	mov	r1, r3
 8012d48:	4610      	mov	r0, r2
 8012d4a:	f7fd f9cc 	bl	80100e6 <vListInsert>
 8012d4e:	e012      	b.n	8012d76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d206      	bcs.n	8012d66 <prvInsertTimerInActiveList+0x62>
 8012d58:	68ba      	ldr	r2, [r7, #8]
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	429a      	cmp	r2, r3
 8012d5e:	d302      	bcc.n	8012d66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012d60:	2301      	movs	r3, #1
 8012d62:	617b      	str	r3, [r7, #20]
 8012d64:	e007      	b.n	8012d76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012d66:	4b07      	ldr	r3, [pc, #28]	; (8012d84 <prvInsertTimerInActiveList+0x80>)
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	3304      	adds	r3, #4
 8012d6e:	4619      	mov	r1, r3
 8012d70:	4610      	mov	r0, r2
 8012d72:	f7fd f9b8 	bl	80100e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8012d76:	697b      	ldr	r3, [r7, #20]
}
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3718      	adds	r7, #24
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}
 8012d80:	20001620 	.word	0x20001620
 8012d84:	2000161c 	.word	0x2000161c

08012d88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b08e      	sub	sp, #56	; 0x38
 8012d8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012d8e:	e0ca      	b.n	8012f26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	da18      	bge.n	8012dc8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8012d96:	1d3b      	adds	r3, r7, #4
 8012d98:	3304      	adds	r3, #4
 8012d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d10a      	bne.n	8012db8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012da6:	f383 8811 	msr	BASEPRI, r3
 8012daa:	f3bf 8f6f 	isb	sy
 8012dae:	f3bf 8f4f 	dsb	sy
 8012db2:	61fb      	str	r3, [r7, #28]
}
 8012db4:	bf00      	nop
 8012db6:	e7fe      	b.n	8012db6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dbe:	6850      	ldr	r0, [r2, #4]
 8012dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012dc2:	6892      	ldr	r2, [r2, #8]
 8012dc4:	4611      	mov	r1, r2
 8012dc6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	f2c0 80ab 	blt.w	8012f26 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dd6:	695b      	ldr	r3, [r3, #20]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d004      	beq.n	8012de6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dde:	3304      	adds	r3, #4
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7fd f9b9 	bl	8010158 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012de6:	463b      	mov	r3, r7
 8012de8:	4618      	mov	r0, r3
 8012dea:	f7ff ff6b 	bl	8012cc4 <prvSampleTimeNow>
 8012dee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2b09      	cmp	r3, #9
 8012df4:	f200 8096 	bhi.w	8012f24 <prvProcessReceivedCommands+0x19c>
 8012df8:	a201      	add	r2, pc, #4	; (adr r2, 8012e00 <prvProcessReceivedCommands+0x78>)
 8012dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dfe:	bf00      	nop
 8012e00:	08012e29 	.word	0x08012e29
 8012e04:	08012e29 	.word	0x08012e29
 8012e08:	08012e29 	.word	0x08012e29
 8012e0c:	08012e9d 	.word	0x08012e9d
 8012e10:	08012eb1 	.word	0x08012eb1
 8012e14:	08012efb 	.word	0x08012efb
 8012e18:	08012e29 	.word	0x08012e29
 8012e1c:	08012e29 	.word	0x08012e29
 8012e20:	08012e9d 	.word	0x08012e9d
 8012e24:	08012eb1 	.word	0x08012eb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e2e:	f043 0301 	orr.w	r3, r3, #1
 8012e32:	b2da      	uxtb	r2, r3
 8012e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012e3a:	68ba      	ldr	r2, [r7, #8]
 8012e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3e:	699b      	ldr	r3, [r3, #24]
 8012e40:	18d1      	adds	r1, r2, r3
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e48:	f7ff ff5c 	bl	8012d04 <prvInsertTimerInActiveList>
 8012e4c:	4603      	mov	r3, r0
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d069      	beq.n	8012f26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e54:	6a1b      	ldr	r3, [r3, #32]
 8012e56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012e60:	f003 0304 	and.w	r3, r3, #4
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d05e      	beq.n	8012f26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012e68:	68ba      	ldr	r2, [r7, #8]
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	699b      	ldr	r3, [r3, #24]
 8012e6e:	441a      	add	r2, r3
 8012e70:	2300      	movs	r3, #0
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	2300      	movs	r3, #0
 8012e76:	2100      	movs	r1, #0
 8012e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e7a:	f7ff fe05 	bl	8012a88 <xTimerGenericCommand>
 8012e7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012e80:	6a3b      	ldr	r3, [r7, #32]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d14f      	bne.n	8012f26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8012e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e8a:	f383 8811 	msr	BASEPRI, r3
 8012e8e:	f3bf 8f6f 	isb	sy
 8012e92:	f3bf 8f4f 	dsb	sy
 8012e96:	61bb      	str	r3, [r7, #24]
}
 8012e98:	bf00      	nop
 8012e9a:	e7fe      	b.n	8012e9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012ea2:	f023 0301 	bic.w	r3, r3, #1
 8012ea6:	b2da      	uxtb	r2, r3
 8012ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012eae:	e03a      	b.n	8012f26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012eb6:	f043 0301 	orr.w	r3, r3, #1
 8012eba:	b2da      	uxtb	r2, r3
 8012ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012ec2:	68ba      	ldr	r2, [r7, #8]
 8012ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ec6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eca:	699b      	ldr	r3, [r3, #24]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d10a      	bne.n	8012ee6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed4:	f383 8811 	msr	BASEPRI, r3
 8012ed8:	f3bf 8f6f 	isb	sy
 8012edc:	f3bf 8f4f 	dsb	sy
 8012ee0:	617b      	str	r3, [r7, #20]
}
 8012ee2:	bf00      	nop
 8012ee4:	e7fe      	b.n	8012ee4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee8:	699a      	ldr	r2, [r3, #24]
 8012eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eec:	18d1      	adds	r1, r2, r3
 8012eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ef4:	f7ff ff06 	bl	8012d04 <prvInsertTimerInActiveList>
					break;
 8012ef8:	e015      	b.n	8012f26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f00:	f003 0302 	and.w	r3, r3, #2
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d103      	bne.n	8012f10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f0a:	f000 fc01 	bl	8013710 <vPortFree>
 8012f0e:	e00a      	b.n	8012f26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f16:	f023 0301 	bic.w	r3, r3, #1
 8012f1a:	b2da      	uxtb	r2, r3
 8012f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012f22:	e000      	b.n	8012f26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8012f24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012f26:	4b08      	ldr	r3, [pc, #32]	; (8012f48 <prvProcessReceivedCommands+0x1c0>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	1d39      	adds	r1, r7, #4
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fd fdc0 	bl	8010ab4 <xQueueReceive>
 8012f34:	4603      	mov	r3, r0
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	f47f af2a 	bne.w	8012d90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8012f3c:	bf00      	nop
 8012f3e:	bf00      	nop
 8012f40:	3730      	adds	r7, #48	; 0x30
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	20001624 	.word	0x20001624

08012f4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	b088      	sub	sp, #32
 8012f50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012f52:	e048      	b.n	8012fe6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012f54:	4b2d      	ldr	r3, [pc, #180]	; (801300c <prvSwitchTimerLists+0xc0>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	68db      	ldr	r3, [r3, #12]
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f5e:	4b2b      	ldr	r3, [pc, #172]	; (801300c <prvSwitchTimerLists+0xc0>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	68db      	ldr	r3, [r3, #12]
 8012f66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	3304      	adds	r3, #4
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7fd f8f3 	bl	8010158 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	6a1b      	ldr	r3, [r3, #32]
 8012f76:	68f8      	ldr	r0, [r7, #12]
 8012f78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012f80:	f003 0304 	and.w	r3, r3, #4
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d02e      	beq.n	8012fe6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	699b      	ldr	r3, [r3, #24]
 8012f8c:	693a      	ldr	r2, [r7, #16]
 8012f8e:	4413      	add	r3, r2
 8012f90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012f92:	68ba      	ldr	r2, [r7, #8]
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	d90e      	bls.n	8012fb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	68ba      	ldr	r2, [r7, #8]
 8012f9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	68fa      	ldr	r2, [r7, #12]
 8012fa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012fa6:	4b19      	ldr	r3, [pc, #100]	; (801300c <prvSwitchTimerLists+0xc0>)
 8012fa8:	681a      	ldr	r2, [r3, #0]
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	3304      	adds	r3, #4
 8012fae:	4619      	mov	r1, r3
 8012fb0:	4610      	mov	r0, r2
 8012fb2:	f7fd f898 	bl	80100e6 <vListInsert>
 8012fb6:	e016      	b.n	8012fe6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012fb8:	2300      	movs	r3, #0
 8012fba:	9300      	str	r3, [sp, #0]
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	693a      	ldr	r2, [r7, #16]
 8012fc0:	2100      	movs	r1, #0
 8012fc2:	68f8      	ldr	r0, [r7, #12]
 8012fc4:	f7ff fd60 	bl	8012a88 <xTimerGenericCommand>
 8012fc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d10a      	bne.n	8012fe6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd4:	f383 8811 	msr	BASEPRI, r3
 8012fd8:	f3bf 8f6f 	isb	sy
 8012fdc:	f3bf 8f4f 	dsb	sy
 8012fe0:	603b      	str	r3, [r7, #0]
}
 8012fe2:	bf00      	nop
 8012fe4:	e7fe      	b.n	8012fe4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012fe6:	4b09      	ldr	r3, [pc, #36]	; (801300c <prvSwitchTimerLists+0xc0>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d1b1      	bne.n	8012f54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012ff0:	4b06      	ldr	r3, [pc, #24]	; (801300c <prvSwitchTimerLists+0xc0>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012ff6:	4b06      	ldr	r3, [pc, #24]	; (8013010 <prvSwitchTimerLists+0xc4>)
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	4a04      	ldr	r2, [pc, #16]	; (801300c <prvSwitchTimerLists+0xc0>)
 8012ffc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012ffe:	4a04      	ldr	r2, [pc, #16]	; (8013010 <prvSwitchTimerLists+0xc4>)
 8013000:	697b      	ldr	r3, [r7, #20]
 8013002:	6013      	str	r3, [r2, #0]
}
 8013004:	bf00      	nop
 8013006:	3718      	adds	r7, #24
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}
 801300c:	2000161c 	.word	0x2000161c
 8013010:	20001620 	.word	0x20001620

08013014 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b082      	sub	sp, #8
 8013018:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801301a:	f000 f98b 	bl	8013334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801301e:	4b15      	ldr	r3, [pc, #84]	; (8013074 <prvCheckForValidListAndQueue+0x60>)
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d120      	bne.n	8013068 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013026:	4814      	ldr	r0, [pc, #80]	; (8013078 <prvCheckForValidListAndQueue+0x64>)
 8013028:	f7fd f80c 	bl	8010044 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801302c:	4813      	ldr	r0, [pc, #76]	; (801307c <prvCheckForValidListAndQueue+0x68>)
 801302e:	f7fd f809 	bl	8010044 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013032:	4b13      	ldr	r3, [pc, #76]	; (8013080 <prvCheckForValidListAndQueue+0x6c>)
 8013034:	4a10      	ldr	r2, [pc, #64]	; (8013078 <prvCheckForValidListAndQueue+0x64>)
 8013036:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013038:	4b12      	ldr	r3, [pc, #72]	; (8013084 <prvCheckForValidListAndQueue+0x70>)
 801303a:	4a10      	ldr	r2, [pc, #64]	; (801307c <prvCheckForValidListAndQueue+0x68>)
 801303c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801303e:	2300      	movs	r3, #0
 8013040:	9300      	str	r3, [sp, #0]
 8013042:	4b11      	ldr	r3, [pc, #68]	; (8013088 <prvCheckForValidListAndQueue+0x74>)
 8013044:	4a11      	ldr	r2, [pc, #68]	; (801308c <prvCheckForValidListAndQueue+0x78>)
 8013046:	2110      	movs	r1, #16
 8013048:	200a      	movs	r0, #10
 801304a:	f7fd f917 	bl	801027c <xQueueGenericCreateStatic>
 801304e:	4603      	mov	r3, r0
 8013050:	4a08      	ldr	r2, [pc, #32]	; (8013074 <prvCheckForValidListAndQueue+0x60>)
 8013052:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013054:	4b07      	ldr	r3, [pc, #28]	; (8013074 <prvCheckForValidListAndQueue+0x60>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	2b00      	cmp	r3, #0
 801305a:	d005      	beq.n	8013068 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801305c:	4b05      	ldr	r3, [pc, #20]	; (8013074 <prvCheckForValidListAndQueue+0x60>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	490b      	ldr	r1, [pc, #44]	; (8013090 <prvCheckForValidListAndQueue+0x7c>)
 8013062:	4618      	mov	r0, r3
 8013064:	f7fe f8de 	bl	8011224 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013068:	f000 f994 	bl	8013394 <vPortExitCritical>
}
 801306c:	bf00      	nop
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	20001624 	.word	0x20001624
 8013078:	200015f4 	.word	0x200015f4
 801307c:	20001608 	.word	0x20001608
 8013080:	2000161c 	.word	0x2000161c
 8013084:	20001620 	.word	0x20001620
 8013088:	200016d0 	.word	0x200016d0
 801308c:	20001630 	.word	0x20001630
 8013090:	08018708 	.word	0x08018708

08013094 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b086      	sub	sp, #24
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d10a      	bne.n	80130bc <pvTimerGetTimerID+0x28>
	__asm volatile
 80130a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130aa:	f383 8811 	msr	BASEPRI, r3
 80130ae:	f3bf 8f6f 	isb	sy
 80130b2:	f3bf 8f4f 	dsb	sy
 80130b6:	60fb      	str	r3, [r7, #12]
}
 80130b8:	bf00      	nop
 80130ba:	e7fe      	b.n	80130ba <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80130bc:	f000 f93a 	bl	8013334 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	69db      	ldr	r3, [r3, #28]
 80130c4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80130c6:	f000 f965 	bl	8013394 <vPortExitCritical>

	return pvReturn;
 80130ca:	693b      	ldr	r3, [r7, #16]
}
 80130cc:	4618      	mov	r0, r3
 80130ce:	3718      	adds	r7, #24
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}

080130d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80130d4:	b480      	push	{r7}
 80130d6:	b085      	sub	sp, #20
 80130d8:	af00      	add	r7, sp, #0
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	60b9      	str	r1, [r7, #8]
 80130de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	3b04      	subs	r3, #4
 80130e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80130ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	3b04      	subs	r3, #4
 80130f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	f023 0201 	bic.w	r2, r3, #1
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	3b04      	subs	r3, #4
 8013102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013104:	4a0c      	ldr	r2, [pc, #48]	; (8013138 <pxPortInitialiseStack+0x64>)
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	3b14      	subs	r3, #20
 801310e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013110:	687a      	ldr	r2, [r7, #4]
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	3b04      	subs	r3, #4
 801311a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f06f 0202 	mvn.w	r2, #2
 8013122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	3b20      	subs	r3, #32
 8013128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801312a:	68fb      	ldr	r3, [r7, #12]
}
 801312c:	4618      	mov	r0, r3
 801312e:	3714      	adds	r7, #20
 8013130:	46bd      	mov	sp, r7
 8013132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013136:	4770      	bx	lr
 8013138:	0801313d 	.word	0x0801313d

0801313c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801313c:	b480      	push	{r7}
 801313e:	b085      	sub	sp, #20
 8013140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013142:	2300      	movs	r3, #0
 8013144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013146:	4b12      	ldr	r3, [pc, #72]	; (8013190 <prvTaskExitError+0x54>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801314e:	d00a      	beq.n	8013166 <prvTaskExitError+0x2a>
	__asm volatile
 8013150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013154:	f383 8811 	msr	BASEPRI, r3
 8013158:	f3bf 8f6f 	isb	sy
 801315c:	f3bf 8f4f 	dsb	sy
 8013160:	60fb      	str	r3, [r7, #12]
}
 8013162:	bf00      	nop
 8013164:	e7fe      	b.n	8013164 <prvTaskExitError+0x28>
	__asm volatile
 8013166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801316a:	f383 8811 	msr	BASEPRI, r3
 801316e:	f3bf 8f6f 	isb	sy
 8013172:	f3bf 8f4f 	dsb	sy
 8013176:	60bb      	str	r3, [r7, #8]
}
 8013178:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801317a:	bf00      	nop
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d0fc      	beq.n	801317c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8013182:	bf00      	nop
 8013184:	bf00      	nop
 8013186:	3714      	adds	r7, #20
 8013188:	46bd      	mov	sp, r7
 801318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318e:	4770      	bx	lr
 8013190:	2000002c 	.word	0x2000002c
	...

080131a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80131a0:	4b07      	ldr	r3, [pc, #28]	; (80131c0 <pxCurrentTCBConst2>)
 80131a2:	6819      	ldr	r1, [r3, #0]
 80131a4:	6808      	ldr	r0, [r1, #0]
 80131a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131aa:	f380 8809 	msr	PSP, r0
 80131ae:	f3bf 8f6f 	isb	sy
 80131b2:	f04f 0000 	mov.w	r0, #0
 80131b6:	f380 8811 	msr	BASEPRI, r0
 80131ba:	4770      	bx	lr
 80131bc:	f3af 8000 	nop.w

080131c0 <pxCurrentTCBConst2>:
 80131c0:	200010f4 	.word	0x200010f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80131c4:	bf00      	nop
 80131c6:	bf00      	nop

080131c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80131c8:	4808      	ldr	r0, [pc, #32]	; (80131ec <prvPortStartFirstTask+0x24>)
 80131ca:	6800      	ldr	r0, [r0, #0]
 80131cc:	6800      	ldr	r0, [r0, #0]
 80131ce:	f380 8808 	msr	MSP, r0
 80131d2:	f04f 0000 	mov.w	r0, #0
 80131d6:	f380 8814 	msr	CONTROL, r0
 80131da:	b662      	cpsie	i
 80131dc:	b661      	cpsie	f
 80131de:	f3bf 8f4f 	dsb	sy
 80131e2:	f3bf 8f6f 	isb	sy
 80131e6:	df00      	svc	0
 80131e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80131ea:	bf00      	nop
 80131ec:	e000ed08 	.word	0xe000ed08

080131f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b086      	sub	sp, #24
 80131f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80131f6:	4b46      	ldr	r3, [pc, #280]	; (8013310 <xPortStartScheduler+0x120>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	4a46      	ldr	r2, [pc, #280]	; (8013314 <xPortStartScheduler+0x124>)
 80131fc:	4293      	cmp	r3, r2
 80131fe:	d10a      	bne.n	8013216 <xPortStartScheduler+0x26>
	__asm volatile
 8013200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013204:	f383 8811 	msr	BASEPRI, r3
 8013208:	f3bf 8f6f 	isb	sy
 801320c:	f3bf 8f4f 	dsb	sy
 8013210:	613b      	str	r3, [r7, #16]
}
 8013212:	bf00      	nop
 8013214:	e7fe      	b.n	8013214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013216:	4b3e      	ldr	r3, [pc, #248]	; (8013310 <xPortStartScheduler+0x120>)
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	4a3f      	ldr	r2, [pc, #252]	; (8013318 <xPortStartScheduler+0x128>)
 801321c:	4293      	cmp	r3, r2
 801321e:	d10a      	bne.n	8013236 <xPortStartScheduler+0x46>
	__asm volatile
 8013220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013224:	f383 8811 	msr	BASEPRI, r3
 8013228:	f3bf 8f6f 	isb	sy
 801322c:	f3bf 8f4f 	dsb	sy
 8013230:	60fb      	str	r3, [r7, #12]
}
 8013232:	bf00      	nop
 8013234:	e7fe      	b.n	8013234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013236:	4b39      	ldr	r3, [pc, #228]	; (801331c <xPortStartScheduler+0x12c>)
 8013238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	781b      	ldrb	r3, [r3, #0]
 801323e:	b2db      	uxtb	r3, r3
 8013240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013242:	697b      	ldr	r3, [r7, #20]
 8013244:	22ff      	movs	r2, #255	; 0xff
 8013246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	781b      	ldrb	r3, [r3, #0]
 801324c:	b2db      	uxtb	r3, r3
 801324e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013250:	78fb      	ldrb	r3, [r7, #3]
 8013252:	b2db      	uxtb	r3, r3
 8013254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013258:	b2da      	uxtb	r2, r3
 801325a:	4b31      	ldr	r3, [pc, #196]	; (8013320 <xPortStartScheduler+0x130>)
 801325c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801325e:	4b31      	ldr	r3, [pc, #196]	; (8013324 <xPortStartScheduler+0x134>)
 8013260:	2207      	movs	r2, #7
 8013262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013264:	e009      	b.n	801327a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8013266:	4b2f      	ldr	r3, [pc, #188]	; (8013324 <xPortStartScheduler+0x134>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	3b01      	subs	r3, #1
 801326c:	4a2d      	ldr	r2, [pc, #180]	; (8013324 <xPortStartScheduler+0x134>)
 801326e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013270:	78fb      	ldrb	r3, [r7, #3]
 8013272:	b2db      	uxtb	r3, r3
 8013274:	005b      	lsls	r3, r3, #1
 8013276:	b2db      	uxtb	r3, r3
 8013278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801327a:	78fb      	ldrb	r3, [r7, #3]
 801327c:	b2db      	uxtb	r3, r3
 801327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013282:	2b80      	cmp	r3, #128	; 0x80
 8013284:	d0ef      	beq.n	8013266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013286:	4b27      	ldr	r3, [pc, #156]	; (8013324 <xPortStartScheduler+0x134>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	f1c3 0307 	rsb	r3, r3, #7
 801328e:	2b04      	cmp	r3, #4
 8013290:	d00a      	beq.n	80132a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8013292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013296:	f383 8811 	msr	BASEPRI, r3
 801329a:	f3bf 8f6f 	isb	sy
 801329e:	f3bf 8f4f 	dsb	sy
 80132a2:	60bb      	str	r3, [r7, #8]
}
 80132a4:	bf00      	nop
 80132a6:	e7fe      	b.n	80132a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80132a8:	4b1e      	ldr	r3, [pc, #120]	; (8013324 <xPortStartScheduler+0x134>)
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	021b      	lsls	r3, r3, #8
 80132ae:	4a1d      	ldr	r2, [pc, #116]	; (8013324 <xPortStartScheduler+0x134>)
 80132b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80132b2:	4b1c      	ldr	r3, [pc, #112]	; (8013324 <xPortStartScheduler+0x134>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80132ba:	4a1a      	ldr	r2, [pc, #104]	; (8013324 <xPortStartScheduler+0x134>)
 80132bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	b2da      	uxtb	r2, r3
 80132c2:	697b      	ldr	r3, [r7, #20]
 80132c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80132c6:	4b18      	ldr	r3, [pc, #96]	; (8013328 <xPortStartScheduler+0x138>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	4a17      	ldr	r2, [pc, #92]	; (8013328 <xPortStartScheduler+0x138>)
 80132cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80132d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80132d2:	4b15      	ldr	r3, [pc, #84]	; (8013328 <xPortStartScheduler+0x138>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	4a14      	ldr	r2, [pc, #80]	; (8013328 <xPortStartScheduler+0x138>)
 80132d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80132dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80132de:	f000 f8dd 	bl	801349c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80132e2:	4b12      	ldr	r3, [pc, #72]	; (801332c <xPortStartScheduler+0x13c>)
 80132e4:	2200      	movs	r2, #0
 80132e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80132e8:	f000 f8fc 	bl	80134e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80132ec:	4b10      	ldr	r3, [pc, #64]	; (8013330 <xPortStartScheduler+0x140>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	4a0f      	ldr	r2, [pc, #60]	; (8013330 <xPortStartScheduler+0x140>)
 80132f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80132f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80132f8:	f7ff ff66 	bl	80131c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80132fc:	f7fe fc7c 	bl	8011bf8 <vTaskSwitchContext>
	prvTaskExitError();
 8013300:	f7ff ff1c 	bl	801313c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013304:	2300      	movs	r3, #0
}
 8013306:	4618      	mov	r0, r3
 8013308:	3718      	adds	r7, #24
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}
 801330e:	bf00      	nop
 8013310:	e000ed00 	.word	0xe000ed00
 8013314:	410fc271 	.word	0x410fc271
 8013318:	410fc270 	.word	0x410fc270
 801331c:	e000e400 	.word	0xe000e400
 8013320:	20001720 	.word	0x20001720
 8013324:	20001724 	.word	0x20001724
 8013328:	e000ed20 	.word	0xe000ed20
 801332c:	2000002c 	.word	0x2000002c
 8013330:	e000ef34 	.word	0xe000ef34

08013334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013334:	b480      	push	{r7}
 8013336:	b083      	sub	sp, #12
 8013338:	af00      	add	r7, sp, #0
	__asm volatile
 801333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801333e:	f383 8811 	msr	BASEPRI, r3
 8013342:	f3bf 8f6f 	isb	sy
 8013346:	f3bf 8f4f 	dsb	sy
 801334a:	607b      	str	r3, [r7, #4]
}
 801334c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801334e:	4b0f      	ldr	r3, [pc, #60]	; (801338c <vPortEnterCritical+0x58>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	3301      	adds	r3, #1
 8013354:	4a0d      	ldr	r2, [pc, #52]	; (801338c <vPortEnterCritical+0x58>)
 8013356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013358:	4b0c      	ldr	r3, [pc, #48]	; (801338c <vPortEnterCritical+0x58>)
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	2b01      	cmp	r3, #1
 801335e:	d10f      	bne.n	8013380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013360:	4b0b      	ldr	r3, [pc, #44]	; (8013390 <vPortEnterCritical+0x5c>)
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	b2db      	uxtb	r3, r3
 8013366:	2b00      	cmp	r3, #0
 8013368:	d00a      	beq.n	8013380 <vPortEnterCritical+0x4c>
	__asm volatile
 801336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801336e:	f383 8811 	msr	BASEPRI, r3
 8013372:	f3bf 8f6f 	isb	sy
 8013376:	f3bf 8f4f 	dsb	sy
 801337a:	603b      	str	r3, [r7, #0]
}
 801337c:	bf00      	nop
 801337e:	e7fe      	b.n	801337e <vPortEnterCritical+0x4a>
	}
}
 8013380:	bf00      	nop
 8013382:	370c      	adds	r7, #12
 8013384:	46bd      	mov	sp, r7
 8013386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338a:	4770      	bx	lr
 801338c:	2000002c 	.word	0x2000002c
 8013390:	e000ed04 	.word	0xe000ed04

08013394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013394:	b480      	push	{r7}
 8013396:	b083      	sub	sp, #12
 8013398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801339a:	4b12      	ldr	r3, [pc, #72]	; (80133e4 <vPortExitCritical+0x50>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d10a      	bne.n	80133b8 <vPortExitCritical+0x24>
	__asm volatile
 80133a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133a6:	f383 8811 	msr	BASEPRI, r3
 80133aa:	f3bf 8f6f 	isb	sy
 80133ae:	f3bf 8f4f 	dsb	sy
 80133b2:	607b      	str	r3, [r7, #4]
}
 80133b4:	bf00      	nop
 80133b6:	e7fe      	b.n	80133b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80133b8:	4b0a      	ldr	r3, [pc, #40]	; (80133e4 <vPortExitCritical+0x50>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	3b01      	subs	r3, #1
 80133be:	4a09      	ldr	r2, [pc, #36]	; (80133e4 <vPortExitCritical+0x50>)
 80133c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80133c2:	4b08      	ldr	r3, [pc, #32]	; (80133e4 <vPortExitCritical+0x50>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d105      	bne.n	80133d6 <vPortExitCritical+0x42>
 80133ca:	2300      	movs	r3, #0
 80133cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	f383 8811 	msr	BASEPRI, r3
}
 80133d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80133d6:	bf00      	nop
 80133d8:	370c      	adds	r7, #12
 80133da:	46bd      	mov	sp, r7
 80133dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e0:	4770      	bx	lr
 80133e2:	bf00      	nop
 80133e4:	2000002c 	.word	0x2000002c
	...

080133f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80133f0:	f3ef 8009 	mrs	r0, PSP
 80133f4:	f3bf 8f6f 	isb	sy
 80133f8:	4b15      	ldr	r3, [pc, #84]	; (8013450 <pxCurrentTCBConst>)
 80133fa:	681a      	ldr	r2, [r3, #0]
 80133fc:	f01e 0f10 	tst.w	lr, #16
 8013400:	bf08      	it	eq
 8013402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801340a:	6010      	str	r0, [r2, #0]
 801340c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013414:	f380 8811 	msr	BASEPRI, r0
 8013418:	f3bf 8f4f 	dsb	sy
 801341c:	f3bf 8f6f 	isb	sy
 8013420:	f7fe fbea 	bl	8011bf8 <vTaskSwitchContext>
 8013424:	f04f 0000 	mov.w	r0, #0
 8013428:	f380 8811 	msr	BASEPRI, r0
 801342c:	bc09      	pop	{r0, r3}
 801342e:	6819      	ldr	r1, [r3, #0]
 8013430:	6808      	ldr	r0, [r1, #0]
 8013432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013436:	f01e 0f10 	tst.w	lr, #16
 801343a:	bf08      	it	eq
 801343c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013440:	f380 8809 	msr	PSP, r0
 8013444:	f3bf 8f6f 	isb	sy
 8013448:	4770      	bx	lr
 801344a:	bf00      	nop
 801344c:	f3af 8000 	nop.w

08013450 <pxCurrentTCBConst>:
 8013450:	200010f4 	.word	0x200010f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013454:	bf00      	nop
 8013456:	bf00      	nop

08013458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013458:	b580      	push	{r7, lr}
 801345a:	b082      	sub	sp, #8
 801345c:	af00      	add	r7, sp, #0
	__asm volatile
 801345e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013462:	f383 8811 	msr	BASEPRI, r3
 8013466:	f3bf 8f6f 	isb	sy
 801346a:	f3bf 8f4f 	dsb	sy
 801346e:	607b      	str	r3, [r7, #4]
}
 8013470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013472:	f7fe fb07 	bl	8011a84 <xTaskIncrementTick>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	d003      	beq.n	8013484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801347c:	4b06      	ldr	r3, [pc, #24]	; (8013498 <xPortSysTickHandler+0x40>)
 801347e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013482:	601a      	str	r2, [r3, #0]
 8013484:	2300      	movs	r3, #0
 8013486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	f383 8811 	msr	BASEPRI, r3
}
 801348e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013490:	bf00      	nop
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}
 8013498:	e000ed04 	.word	0xe000ed04

0801349c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801349c:	b480      	push	{r7}
 801349e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80134a0:	4b0b      	ldr	r3, [pc, #44]	; (80134d0 <vPortSetupTimerInterrupt+0x34>)
 80134a2:	2200      	movs	r2, #0
 80134a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80134a6:	4b0b      	ldr	r3, [pc, #44]	; (80134d4 <vPortSetupTimerInterrupt+0x38>)
 80134a8:	2200      	movs	r2, #0
 80134aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80134ac:	4b0a      	ldr	r3, [pc, #40]	; (80134d8 <vPortSetupTimerInterrupt+0x3c>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	4a0a      	ldr	r2, [pc, #40]	; (80134dc <vPortSetupTimerInterrupt+0x40>)
 80134b2:	fba2 2303 	umull	r2, r3, r2, r3
 80134b6:	099b      	lsrs	r3, r3, #6
 80134b8:	4a09      	ldr	r2, [pc, #36]	; (80134e0 <vPortSetupTimerInterrupt+0x44>)
 80134ba:	3b01      	subs	r3, #1
 80134bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80134be:	4b04      	ldr	r3, [pc, #16]	; (80134d0 <vPortSetupTimerInterrupt+0x34>)
 80134c0:	2207      	movs	r2, #7
 80134c2:	601a      	str	r2, [r3, #0]
}
 80134c4:	bf00      	nop
 80134c6:	46bd      	mov	sp, r7
 80134c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134cc:	4770      	bx	lr
 80134ce:	bf00      	nop
 80134d0:	e000e010 	.word	0xe000e010
 80134d4:	e000e018 	.word	0xe000e018
 80134d8:	20000008 	.word	0x20000008
 80134dc:	10624dd3 	.word	0x10624dd3
 80134e0:	e000e014 	.word	0xe000e014

080134e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80134e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80134f4 <vPortEnableVFP+0x10>
 80134e8:	6801      	ldr	r1, [r0, #0]
 80134ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80134ee:	6001      	str	r1, [r0, #0]
 80134f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80134f2:	bf00      	nop
 80134f4:	e000ed88 	.word	0xe000ed88

080134f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80134f8:	b480      	push	{r7}
 80134fa:	b085      	sub	sp, #20
 80134fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80134fe:	f3ef 8305 	mrs	r3, IPSR
 8013502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2b0f      	cmp	r3, #15
 8013508:	d914      	bls.n	8013534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801350a:	4a17      	ldr	r2, [pc, #92]	; (8013568 <vPortValidateInterruptPriority+0x70>)
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	4413      	add	r3, r2
 8013510:	781b      	ldrb	r3, [r3, #0]
 8013512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013514:	4b15      	ldr	r3, [pc, #84]	; (801356c <vPortValidateInterruptPriority+0x74>)
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	7afa      	ldrb	r2, [r7, #11]
 801351a:	429a      	cmp	r2, r3
 801351c:	d20a      	bcs.n	8013534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013522:	f383 8811 	msr	BASEPRI, r3
 8013526:	f3bf 8f6f 	isb	sy
 801352a:	f3bf 8f4f 	dsb	sy
 801352e:	607b      	str	r3, [r7, #4]
}
 8013530:	bf00      	nop
 8013532:	e7fe      	b.n	8013532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013534:	4b0e      	ldr	r3, [pc, #56]	; (8013570 <vPortValidateInterruptPriority+0x78>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801353c:	4b0d      	ldr	r3, [pc, #52]	; (8013574 <vPortValidateInterruptPriority+0x7c>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	429a      	cmp	r2, r3
 8013542:	d90a      	bls.n	801355a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8013544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013548:	f383 8811 	msr	BASEPRI, r3
 801354c:	f3bf 8f6f 	isb	sy
 8013550:	f3bf 8f4f 	dsb	sy
 8013554:	603b      	str	r3, [r7, #0]
}
 8013556:	bf00      	nop
 8013558:	e7fe      	b.n	8013558 <vPortValidateInterruptPriority+0x60>
	}
 801355a:	bf00      	nop
 801355c:	3714      	adds	r7, #20
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	e000e3f0 	.word	0xe000e3f0
 801356c:	20001720 	.word	0x20001720
 8013570:	e000ed0c 	.word	0xe000ed0c
 8013574:	20001724 	.word	0x20001724

08013578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b08a      	sub	sp, #40	; 0x28
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013580:	2300      	movs	r3, #0
 8013582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013584:	f7fe f9b0 	bl	80118e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013588:	4b5b      	ldr	r3, [pc, #364]	; (80136f8 <pvPortMalloc+0x180>)
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d101      	bne.n	8013594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013590:	f000 f920 	bl	80137d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013594:	4b59      	ldr	r3, [pc, #356]	; (80136fc <pvPortMalloc+0x184>)
 8013596:	681a      	ldr	r2, [r3, #0]
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	4013      	ands	r3, r2
 801359c:	2b00      	cmp	r3, #0
 801359e:	f040 8093 	bne.w	80136c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d01d      	beq.n	80135e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80135a8:	2208      	movs	r2, #8
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	4413      	add	r3, r2
 80135ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	f003 0307 	and.w	r3, r3, #7
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d014      	beq.n	80135e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	f023 0307 	bic.w	r3, r3, #7
 80135c0:	3308      	adds	r3, #8
 80135c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	f003 0307 	and.w	r3, r3, #7
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d00a      	beq.n	80135e4 <pvPortMalloc+0x6c>
	__asm volatile
 80135ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d2:	f383 8811 	msr	BASEPRI, r3
 80135d6:	f3bf 8f6f 	isb	sy
 80135da:	f3bf 8f4f 	dsb	sy
 80135de:	617b      	str	r3, [r7, #20]
}
 80135e0:	bf00      	nop
 80135e2:	e7fe      	b.n	80135e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d06e      	beq.n	80136c8 <pvPortMalloc+0x150>
 80135ea:	4b45      	ldr	r3, [pc, #276]	; (8013700 <pvPortMalloc+0x188>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	687a      	ldr	r2, [r7, #4]
 80135f0:	429a      	cmp	r2, r3
 80135f2:	d869      	bhi.n	80136c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80135f4:	4b43      	ldr	r3, [pc, #268]	; (8013704 <pvPortMalloc+0x18c>)
 80135f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80135f8:	4b42      	ldr	r3, [pc, #264]	; (8013704 <pvPortMalloc+0x18c>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80135fe:	e004      	b.n	801360a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801360a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801360c:	685b      	ldr	r3, [r3, #4]
 801360e:	687a      	ldr	r2, [r7, #4]
 8013610:	429a      	cmp	r2, r3
 8013612:	d903      	bls.n	801361c <pvPortMalloc+0xa4>
 8013614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d1f1      	bne.n	8013600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801361c:	4b36      	ldr	r3, [pc, #216]	; (80136f8 <pvPortMalloc+0x180>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013622:	429a      	cmp	r2, r3
 8013624:	d050      	beq.n	80136c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013626:	6a3b      	ldr	r3, [r7, #32]
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	2208      	movs	r2, #8
 801362c:	4413      	add	r3, r2
 801362e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013632:	681a      	ldr	r2, [r3, #0]
 8013634:	6a3b      	ldr	r3, [r7, #32]
 8013636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363a:	685a      	ldr	r2, [r3, #4]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	1ad2      	subs	r2, r2, r3
 8013640:	2308      	movs	r3, #8
 8013642:	005b      	lsls	r3, r3, #1
 8013644:	429a      	cmp	r2, r3
 8013646:	d91f      	bls.n	8013688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4413      	add	r3, r2
 801364e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	f003 0307 	and.w	r3, r3, #7
 8013656:	2b00      	cmp	r3, #0
 8013658:	d00a      	beq.n	8013670 <pvPortMalloc+0xf8>
	__asm volatile
 801365a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801365e:	f383 8811 	msr	BASEPRI, r3
 8013662:	f3bf 8f6f 	isb	sy
 8013666:	f3bf 8f4f 	dsb	sy
 801366a:	613b      	str	r3, [r7, #16]
}
 801366c:	bf00      	nop
 801366e:	e7fe      	b.n	801366e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013672:	685a      	ldr	r2, [r3, #4]
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	1ad2      	subs	r2, r2, r3
 8013678:	69bb      	ldr	r3, [r7, #24]
 801367a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013682:	69b8      	ldr	r0, [r7, #24]
 8013684:	f000 f90a 	bl	801389c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013688:	4b1d      	ldr	r3, [pc, #116]	; (8013700 <pvPortMalloc+0x188>)
 801368a:	681a      	ldr	r2, [r3, #0]
 801368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801368e:	685b      	ldr	r3, [r3, #4]
 8013690:	1ad3      	subs	r3, r2, r3
 8013692:	4a1b      	ldr	r2, [pc, #108]	; (8013700 <pvPortMalloc+0x188>)
 8013694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013696:	4b1a      	ldr	r3, [pc, #104]	; (8013700 <pvPortMalloc+0x188>)
 8013698:	681a      	ldr	r2, [r3, #0]
 801369a:	4b1b      	ldr	r3, [pc, #108]	; (8013708 <pvPortMalloc+0x190>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	429a      	cmp	r2, r3
 80136a0:	d203      	bcs.n	80136aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80136a2:	4b17      	ldr	r3, [pc, #92]	; (8013700 <pvPortMalloc+0x188>)
 80136a4:	681b      	ldr	r3, [r3, #0]
 80136a6:	4a18      	ldr	r2, [pc, #96]	; (8013708 <pvPortMalloc+0x190>)
 80136a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80136aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ac:	685a      	ldr	r2, [r3, #4]
 80136ae:	4b13      	ldr	r3, [pc, #76]	; (80136fc <pvPortMalloc+0x184>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	431a      	orrs	r2, r3
 80136b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80136b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ba:	2200      	movs	r2, #0
 80136bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80136be:	4b13      	ldr	r3, [pc, #76]	; (801370c <pvPortMalloc+0x194>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	3301      	adds	r3, #1
 80136c4:	4a11      	ldr	r2, [pc, #68]	; (801370c <pvPortMalloc+0x194>)
 80136c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80136c8:	f7fe f91c 	bl	8011904 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80136cc:	69fb      	ldr	r3, [r7, #28]
 80136ce:	f003 0307 	and.w	r3, r3, #7
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d00a      	beq.n	80136ec <pvPortMalloc+0x174>
	__asm volatile
 80136d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136da:	f383 8811 	msr	BASEPRI, r3
 80136de:	f3bf 8f6f 	isb	sy
 80136e2:	f3bf 8f4f 	dsb	sy
 80136e6:	60fb      	str	r3, [r7, #12]
}
 80136e8:	bf00      	nop
 80136ea:	e7fe      	b.n	80136ea <pvPortMalloc+0x172>
	return pvReturn;
 80136ec:	69fb      	ldr	r3, [r7, #28]
}
 80136ee:	4618      	mov	r0, r3
 80136f0:	3728      	adds	r7, #40	; 0x28
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	200120d0 	.word	0x200120d0
 80136fc:	200120e4 	.word	0x200120e4
 8013700:	200120d4 	.word	0x200120d4
 8013704:	200120c8 	.word	0x200120c8
 8013708:	200120d8 	.word	0x200120d8
 801370c:	200120dc 	.word	0x200120dc

08013710 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b086      	sub	sp, #24
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d04d      	beq.n	80137be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013722:	2308      	movs	r3, #8
 8013724:	425b      	negs	r3, r3
 8013726:	697a      	ldr	r2, [r7, #20]
 8013728:	4413      	add	r3, r2
 801372a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013730:	693b      	ldr	r3, [r7, #16]
 8013732:	685a      	ldr	r2, [r3, #4]
 8013734:	4b24      	ldr	r3, [pc, #144]	; (80137c8 <vPortFree+0xb8>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	4013      	ands	r3, r2
 801373a:	2b00      	cmp	r3, #0
 801373c:	d10a      	bne.n	8013754 <vPortFree+0x44>
	__asm volatile
 801373e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013742:	f383 8811 	msr	BASEPRI, r3
 8013746:	f3bf 8f6f 	isb	sy
 801374a:	f3bf 8f4f 	dsb	sy
 801374e:	60fb      	str	r3, [r7, #12]
}
 8013750:	bf00      	nop
 8013752:	e7fe      	b.n	8013752 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d00a      	beq.n	8013772 <vPortFree+0x62>
	__asm volatile
 801375c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013760:	f383 8811 	msr	BASEPRI, r3
 8013764:	f3bf 8f6f 	isb	sy
 8013768:	f3bf 8f4f 	dsb	sy
 801376c:	60bb      	str	r3, [r7, #8]
}
 801376e:	bf00      	nop
 8013770:	e7fe      	b.n	8013770 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	685a      	ldr	r2, [r3, #4]
 8013776:	4b14      	ldr	r3, [pc, #80]	; (80137c8 <vPortFree+0xb8>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	4013      	ands	r3, r2
 801377c:	2b00      	cmp	r3, #0
 801377e:	d01e      	beq.n	80137be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013780:	693b      	ldr	r3, [r7, #16]
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d11a      	bne.n	80137be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	685a      	ldr	r2, [r3, #4]
 801378c:	4b0e      	ldr	r3, [pc, #56]	; (80137c8 <vPortFree+0xb8>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	43db      	mvns	r3, r3
 8013792:	401a      	ands	r2, r3
 8013794:	693b      	ldr	r3, [r7, #16]
 8013796:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013798:	f7fe f8a6 	bl	80118e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	685a      	ldr	r2, [r3, #4]
 80137a0:	4b0a      	ldr	r3, [pc, #40]	; (80137cc <vPortFree+0xbc>)
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	4413      	add	r3, r2
 80137a6:	4a09      	ldr	r2, [pc, #36]	; (80137cc <vPortFree+0xbc>)
 80137a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80137aa:	6938      	ldr	r0, [r7, #16]
 80137ac:	f000 f876 	bl	801389c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80137b0:	4b07      	ldr	r3, [pc, #28]	; (80137d0 <vPortFree+0xc0>)
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	3301      	adds	r3, #1
 80137b6:	4a06      	ldr	r2, [pc, #24]	; (80137d0 <vPortFree+0xc0>)
 80137b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80137ba:	f7fe f8a3 	bl	8011904 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80137be:	bf00      	nop
 80137c0:	3718      	adds	r7, #24
 80137c2:	46bd      	mov	sp, r7
 80137c4:	bd80      	pop	{r7, pc}
 80137c6:	bf00      	nop
 80137c8:	200120e4 	.word	0x200120e4
 80137cc:	200120d4 	.word	0x200120d4
 80137d0:	200120e0 	.word	0x200120e0

080137d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80137d4:	b480      	push	{r7}
 80137d6:	b085      	sub	sp, #20
 80137d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80137da:	4b29      	ldr	r3, [pc, #164]	; (8013880 <prvHeapInit+0xac>)
 80137dc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80137de:	4b29      	ldr	r3, [pc, #164]	; (8013884 <prvHeapInit+0xb0>)
 80137e0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	f003 0307 	and.w	r3, r3, #7
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d00c      	beq.n	8013806 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	3307      	adds	r3, #7
 80137f0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	f023 0307 	bic.w	r3, r3, #7
 80137f8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80137fa:	68ba      	ldr	r2, [r7, #8]
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	1ad3      	subs	r3, r2, r3
 8013800:	4a20      	ldr	r2, [pc, #128]	; (8013884 <prvHeapInit+0xb0>)
 8013802:	4413      	add	r3, r2
 8013804:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801380a:	4a1f      	ldr	r2, [pc, #124]	; (8013888 <prvHeapInit+0xb4>)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013810:	4b1d      	ldr	r3, [pc, #116]	; (8013888 <prvHeapInit+0xb4>)
 8013812:	2200      	movs	r2, #0
 8013814:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	68ba      	ldr	r2, [r7, #8]
 801381a:	4413      	add	r3, r2
 801381c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801381e:	2208      	movs	r2, #8
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	1a9b      	subs	r3, r3, r2
 8013824:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013826:	68fb      	ldr	r3, [r7, #12]
 8013828:	f023 0307 	bic.w	r3, r3, #7
 801382c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	4a16      	ldr	r2, [pc, #88]	; (801388c <prvHeapInit+0xb8>)
 8013832:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013834:	4b15      	ldr	r3, [pc, #84]	; (801388c <prvHeapInit+0xb8>)
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	2200      	movs	r2, #0
 801383a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801383c:	4b13      	ldr	r3, [pc, #76]	; (801388c <prvHeapInit+0xb8>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2200      	movs	r2, #0
 8013842:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	68fa      	ldr	r2, [r7, #12]
 801384c:	1ad2      	subs	r2, r2, r3
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013852:	4b0e      	ldr	r3, [pc, #56]	; (801388c <prvHeapInit+0xb8>)
 8013854:	681a      	ldr	r2, [r3, #0]
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	4a0c      	ldr	r2, [pc, #48]	; (8013890 <prvHeapInit+0xbc>)
 8013860:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	4a0b      	ldr	r2, [pc, #44]	; (8013894 <prvHeapInit+0xc0>)
 8013868:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801386a:	4b0b      	ldr	r3, [pc, #44]	; (8013898 <prvHeapInit+0xc4>)
 801386c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013870:	601a      	str	r2, [r3, #0]
}
 8013872:	bf00      	nop
 8013874:	3714      	adds	r7, #20
 8013876:	46bd      	mov	sp, r7
 8013878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387c:	4770      	bx	lr
 801387e:	bf00      	nop
 8013880:	000109a0 	.word	0x000109a0
 8013884:	20001728 	.word	0x20001728
 8013888:	200120c8 	.word	0x200120c8
 801388c:	200120d0 	.word	0x200120d0
 8013890:	200120d8 	.word	0x200120d8
 8013894:	200120d4 	.word	0x200120d4
 8013898:	200120e4 	.word	0x200120e4

0801389c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801389c:	b480      	push	{r7}
 801389e:	b085      	sub	sp, #20
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80138a4:	4b28      	ldr	r3, [pc, #160]	; (8013948 <prvInsertBlockIntoFreeList+0xac>)
 80138a6:	60fb      	str	r3, [r7, #12]
 80138a8:	e002      	b.n	80138b0 <prvInsertBlockIntoFreeList+0x14>
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	60fb      	str	r3, [r7, #12]
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	429a      	cmp	r2, r3
 80138b8:	d8f7      	bhi.n	80138aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	68ba      	ldr	r2, [r7, #8]
 80138c4:	4413      	add	r3, r2
 80138c6:	687a      	ldr	r2, [r7, #4]
 80138c8:	429a      	cmp	r2, r3
 80138ca:	d108      	bne.n	80138de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	685a      	ldr	r2, [r3, #4]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	441a      	add	r2, r3
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	685b      	ldr	r3, [r3, #4]
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	441a      	add	r2, r3
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d118      	bne.n	8013924 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	681a      	ldr	r2, [r3, #0]
 80138f6:	4b15      	ldr	r3, [pc, #84]	; (801394c <prvInsertBlockIntoFreeList+0xb0>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d00d      	beq.n	801391a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	685a      	ldr	r2, [r3, #4]
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	685b      	ldr	r3, [r3, #4]
 8013908:	441a      	add	r2, r3
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	601a      	str	r2, [r3, #0]
 8013918:	e008      	b.n	801392c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801391a:	4b0c      	ldr	r3, [pc, #48]	; (801394c <prvInsertBlockIntoFreeList+0xb0>)
 801391c:	681a      	ldr	r2, [r3, #0]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	601a      	str	r2, [r3, #0]
 8013922:	e003      	b.n	801392c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	681a      	ldr	r2, [r3, #0]
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801392c:	68fa      	ldr	r2, [r7, #12]
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	429a      	cmp	r2, r3
 8013932:	d002      	beq.n	801393a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801393a:	bf00      	nop
 801393c:	3714      	adds	r7, #20
 801393e:	46bd      	mov	sp, r7
 8013940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013944:	4770      	bx	lr
 8013946:	bf00      	nop
 8013948:	200120c8 	.word	0x200120c8
 801394c:	200120d0 	.word	0x200120d0

08013950 <__cvt>:
 8013950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013954:	ec55 4b10 	vmov	r4, r5, d0
 8013958:	2d00      	cmp	r5, #0
 801395a:	460e      	mov	r6, r1
 801395c:	4619      	mov	r1, r3
 801395e:	462b      	mov	r3, r5
 8013960:	bfbb      	ittet	lt
 8013962:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013966:	461d      	movlt	r5, r3
 8013968:	2300      	movge	r3, #0
 801396a:	232d      	movlt	r3, #45	; 0x2d
 801396c:	700b      	strb	r3, [r1, #0]
 801396e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013970:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013974:	4691      	mov	r9, r2
 8013976:	f023 0820 	bic.w	r8, r3, #32
 801397a:	bfbc      	itt	lt
 801397c:	4622      	movlt	r2, r4
 801397e:	4614      	movlt	r4, r2
 8013980:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013984:	d005      	beq.n	8013992 <__cvt+0x42>
 8013986:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801398a:	d100      	bne.n	801398e <__cvt+0x3e>
 801398c:	3601      	adds	r6, #1
 801398e:	2102      	movs	r1, #2
 8013990:	e000      	b.n	8013994 <__cvt+0x44>
 8013992:	2103      	movs	r1, #3
 8013994:	ab03      	add	r3, sp, #12
 8013996:	9301      	str	r3, [sp, #4]
 8013998:	ab02      	add	r3, sp, #8
 801399a:	9300      	str	r3, [sp, #0]
 801399c:	ec45 4b10 	vmov	d0, r4, r5
 80139a0:	4653      	mov	r3, sl
 80139a2:	4632      	mov	r2, r6
 80139a4:	f001 f8d0 	bl	8014b48 <_dtoa_r>
 80139a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80139ac:	4607      	mov	r7, r0
 80139ae:	d102      	bne.n	80139b6 <__cvt+0x66>
 80139b0:	f019 0f01 	tst.w	r9, #1
 80139b4:	d022      	beq.n	80139fc <__cvt+0xac>
 80139b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80139ba:	eb07 0906 	add.w	r9, r7, r6
 80139be:	d110      	bne.n	80139e2 <__cvt+0x92>
 80139c0:	783b      	ldrb	r3, [r7, #0]
 80139c2:	2b30      	cmp	r3, #48	; 0x30
 80139c4:	d10a      	bne.n	80139dc <__cvt+0x8c>
 80139c6:	2200      	movs	r2, #0
 80139c8:	2300      	movs	r3, #0
 80139ca:	4620      	mov	r0, r4
 80139cc:	4629      	mov	r1, r5
 80139ce:	f7ed f883 	bl	8000ad8 <__aeabi_dcmpeq>
 80139d2:	b918      	cbnz	r0, 80139dc <__cvt+0x8c>
 80139d4:	f1c6 0601 	rsb	r6, r6, #1
 80139d8:	f8ca 6000 	str.w	r6, [sl]
 80139dc:	f8da 3000 	ldr.w	r3, [sl]
 80139e0:	4499      	add	r9, r3
 80139e2:	2200      	movs	r2, #0
 80139e4:	2300      	movs	r3, #0
 80139e6:	4620      	mov	r0, r4
 80139e8:	4629      	mov	r1, r5
 80139ea:	f7ed f875 	bl	8000ad8 <__aeabi_dcmpeq>
 80139ee:	b108      	cbz	r0, 80139f4 <__cvt+0xa4>
 80139f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80139f4:	2230      	movs	r2, #48	; 0x30
 80139f6:	9b03      	ldr	r3, [sp, #12]
 80139f8:	454b      	cmp	r3, r9
 80139fa:	d307      	bcc.n	8013a0c <__cvt+0xbc>
 80139fc:	9b03      	ldr	r3, [sp, #12]
 80139fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013a00:	1bdb      	subs	r3, r3, r7
 8013a02:	4638      	mov	r0, r7
 8013a04:	6013      	str	r3, [r2, #0]
 8013a06:	b004      	add	sp, #16
 8013a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a0c:	1c59      	adds	r1, r3, #1
 8013a0e:	9103      	str	r1, [sp, #12]
 8013a10:	701a      	strb	r2, [r3, #0]
 8013a12:	e7f0      	b.n	80139f6 <__cvt+0xa6>

08013a14 <__exponent>:
 8013a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a16:	4603      	mov	r3, r0
 8013a18:	2900      	cmp	r1, #0
 8013a1a:	bfb8      	it	lt
 8013a1c:	4249      	neglt	r1, r1
 8013a1e:	f803 2b02 	strb.w	r2, [r3], #2
 8013a22:	bfb4      	ite	lt
 8013a24:	222d      	movlt	r2, #45	; 0x2d
 8013a26:	222b      	movge	r2, #43	; 0x2b
 8013a28:	2909      	cmp	r1, #9
 8013a2a:	7042      	strb	r2, [r0, #1]
 8013a2c:	dd2a      	ble.n	8013a84 <__exponent+0x70>
 8013a2e:	f10d 0207 	add.w	r2, sp, #7
 8013a32:	4617      	mov	r7, r2
 8013a34:	260a      	movs	r6, #10
 8013a36:	4694      	mov	ip, r2
 8013a38:	fb91 f5f6 	sdiv	r5, r1, r6
 8013a3c:	fb06 1415 	mls	r4, r6, r5, r1
 8013a40:	3430      	adds	r4, #48	; 0x30
 8013a42:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013a46:	460c      	mov	r4, r1
 8013a48:	2c63      	cmp	r4, #99	; 0x63
 8013a4a:	f102 32ff 	add.w	r2, r2, #4294967295
 8013a4e:	4629      	mov	r1, r5
 8013a50:	dcf1      	bgt.n	8013a36 <__exponent+0x22>
 8013a52:	3130      	adds	r1, #48	; 0x30
 8013a54:	f1ac 0402 	sub.w	r4, ip, #2
 8013a58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013a5c:	1c41      	adds	r1, r0, #1
 8013a5e:	4622      	mov	r2, r4
 8013a60:	42ba      	cmp	r2, r7
 8013a62:	d30a      	bcc.n	8013a7a <__exponent+0x66>
 8013a64:	f10d 0209 	add.w	r2, sp, #9
 8013a68:	eba2 020c 	sub.w	r2, r2, ip
 8013a6c:	42bc      	cmp	r4, r7
 8013a6e:	bf88      	it	hi
 8013a70:	2200      	movhi	r2, #0
 8013a72:	4413      	add	r3, r2
 8013a74:	1a18      	subs	r0, r3, r0
 8013a76:	b003      	add	sp, #12
 8013a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a7a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013a7e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013a82:	e7ed      	b.n	8013a60 <__exponent+0x4c>
 8013a84:	2330      	movs	r3, #48	; 0x30
 8013a86:	3130      	adds	r1, #48	; 0x30
 8013a88:	7083      	strb	r3, [r0, #2]
 8013a8a:	70c1      	strb	r1, [r0, #3]
 8013a8c:	1d03      	adds	r3, r0, #4
 8013a8e:	e7f1      	b.n	8013a74 <__exponent+0x60>

08013a90 <_printf_float>:
 8013a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a94:	ed2d 8b02 	vpush	{d8}
 8013a98:	b08d      	sub	sp, #52	; 0x34
 8013a9a:	460c      	mov	r4, r1
 8013a9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013aa0:	4616      	mov	r6, r2
 8013aa2:	461f      	mov	r7, r3
 8013aa4:	4605      	mov	r5, r0
 8013aa6:	f000 fee5 	bl	8014874 <_localeconv_r>
 8013aaa:	f8d0 a000 	ldr.w	sl, [r0]
 8013aae:	4650      	mov	r0, sl
 8013ab0:	f7ec fbe6 	bl	8000280 <strlen>
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8013ab8:	6823      	ldr	r3, [r4, #0]
 8013aba:	9305      	str	r3, [sp, #20]
 8013abc:	f8d8 3000 	ldr.w	r3, [r8]
 8013ac0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013ac4:	3307      	adds	r3, #7
 8013ac6:	f023 0307 	bic.w	r3, r3, #7
 8013aca:	f103 0208 	add.w	r2, r3, #8
 8013ace:	f8c8 2000 	str.w	r2, [r8]
 8013ad2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013ad6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013ada:	9307      	str	r3, [sp, #28]
 8013adc:	f8cd 8018 	str.w	r8, [sp, #24]
 8013ae0:	ee08 0a10 	vmov	s16, r0
 8013ae4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013aec:	4b9e      	ldr	r3, [pc, #632]	; (8013d68 <_printf_float+0x2d8>)
 8013aee:	f04f 32ff 	mov.w	r2, #4294967295
 8013af2:	f7ed f823 	bl	8000b3c <__aeabi_dcmpun>
 8013af6:	bb88      	cbnz	r0, 8013b5c <_printf_float+0xcc>
 8013af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013afc:	4b9a      	ldr	r3, [pc, #616]	; (8013d68 <_printf_float+0x2d8>)
 8013afe:	f04f 32ff 	mov.w	r2, #4294967295
 8013b02:	f7ec fffd 	bl	8000b00 <__aeabi_dcmple>
 8013b06:	bb48      	cbnz	r0, 8013b5c <_printf_float+0xcc>
 8013b08:	2200      	movs	r2, #0
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	4640      	mov	r0, r8
 8013b0e:	4649      	mov	r1, r9
 8013b10:	f7ec ffec 	bl	8000aec <__aeabi_dcmplt>
 8013b14:	b110      	cbz	r0, 8013b1c <_printf_float+0x8c>
 8013b16:	232d      	movs	r3, #45	; 0x2d
 8013b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013b1c:	4a93      	ldr	r2, [pc, #588]	; (8013d6c <_printf_float+0x2dc>)
 8013b1e:	4b94      	ldr	r3, [pc, #592]	; (8013d70 <_printf_float+0x2e0>)
 8013b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013b24:	bf94      	ite	ls
 8013b26:	4690      	movls	r8, r2
 8013b28:	4698      	movhi	r8, r3
 8013b2a:	2303      	movs	r3, #3
 8013b2c:	6123      	str	r3, [r4, #16]
 8013b2e:	9b05      	ldr	r3, [sp, #20]
 8013b30:	f023 0304 	bic.w	r3, r3, #4
 8013b34:	6023      	str	r3, [r4, #0]
 8013b36:	f04f 0900 	mov.w	r9, #0
 8013b3a:	9700      	str	r7, [sp, #0]
 8013b3c:	4633      	mov	r3, r6
 8013b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8013b40:	4621      	mov	r1, r4
 8013b42:	4628      	mov	r0, r5
 8013b44:	f000 f9da 	bl	8013efc <_printf_common>
 8013b48:	3001      	adds	r0, #1
 8013b4a:	f040 8090 	bne.w	8013c6e <_printf_float+0x1de>
 8013b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b52:	b00d      	add	sp, #52	; 0x34
 8013b54:	ecbd 8b02 	vpop	{d8}
 8013b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b5c:	4642      	mov	r2, r8
 8013b5e:	464b      	mov	r3, r9
 8013b60:	4640      	mov	r0, r8
 8013b62:	4649      	mov	r1, r9
 8013b64:	f7ec ffea 	bl	8000b3c <__aeabi_dcmpun>
 8013b68:	b140      	cbz	r0, 8013b7c <_printf_float+0xec>
 8013b6a:	464b      	mov	r3, r9
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	bfbc      	itt	lt
 8013b70:	232d      	movlt	r3, #45	; 0x2d
 8013b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013b76:	4a7f      	ldr	r2, [pc, #508]	; (8013d74 <_printf_float+0x2e4>)
 8013b78:	4b7f      	ldr	r3, [pc, #508]	; (8013d78 <_printf_float+0x2e8>)
 8013b7a:	e7d1      	b.n	8013b20 <_printf_float+0x90>
 8013b7c:	6863      	ldr	r3, [r4, #4]
 8013b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013b82:	9206      	str	r2, [sp, #24]
 8013b84:	1c5a      	adds	r2, r3, #1
 8013b86:	d13f      	bne.n	8013c08 <_printf_float+0x178>
 8013b88:	2306      	movs	r3, #6
 8013b8a:	6063      	str	r3, [r4, #4]
 8013b8c:	9b05      	ldr	r3, [sp, #20]
 8013b8e:	6861      	ldr	r1, [r4, #4]
 8013b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013b94:	2300      	movs	r3, #0
 8013b96:	9303      	str	r3, [sp, #12]
 8013b98:	ab0a      	add	r3, sp, #40	; 0x28
 8013b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013b9e:	ab09      	add	r3, sp, #36	; 0x24
 8013ba0:	ec49 8b10 	vmov	d0, r8, r9
 8013ba4:	9300      	str	r3, [sp, #0]
 8013ba6:	6022      	str	r2, [r4, #0]
 8013ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013bac:	4628      	mov	r0, r5
 8013bae:	f7ff fecf 	bl	8013950 <__cvt>
 8013bb2:	9b06      	ldr	r3, [sp, #24]
 8013bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013bb6:	2b47      	cmp	r3, #71	; 0x47
 8013bb8:	4680      	mov	r8, r0
 8013bba:	d108      	bne.n	8013bce <_printf_float+0x13e>
 8013bbc:	1cc8      	adds	r0, r1, #3
 8013bbe:	db02      	blt.n	8013bc6 <_printf_float+0x136>
 8013bc0:	6863      	ldr	r3, [r4, #4]
 8013bc2:	4299      	cmp	r1, r3
 8013bc4:	dd41      	ble.n	8013c4a <_printf_float+0x1ba>
 8013bc6:	f1ab 0302 	sub.w	r3, fp, #2
 8013bca:	fa5f fb83 	uxtb.w	fp, r3
 8013bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013bd2:	d820      	bhi.n	8013c16 <_printf_float+0x186>
 8013bd4:	3901      	subs	r1, #1
 8013bd6:	465a      	mov	r2, fp
 8013bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8013bde:	f7ff ff19 	bl	8013a14 <__exponent>
 8013be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013be4:	1813      	adds	r3, r2, r0
 8013be6:	2a01      	cmp	r2, #1
 8013be8:	4681      	mov	r9, r0
 8013bea:	6123      	str	r3, [r4, #16]
 8013bec:	dc02      	bgt.n	8013bf4 <_printf_float+0x164>
 8013bee:	6822      	ldr	r2, [r4, #0]
 8013bf0:	07d2      	lsls	r2, r2, #31
 8013bf2:	d501      	bpl.n	8013bf8 <_printf_float+0x168>
 8013bf4:	3301      	adds	r3, #1
 8013bf6:	6123      	str	r3, [r4, #16]
 8013bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d09c      	beq.n	8013b3a <_printf_float+0xaa>
 8013c00:	232d      	movs	r3, #45	; 0x2d
 8013c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013c06:	e798      	b.n	8013b3a <_printf_float+0xaa>
 8013c08:	9a06      	ldr	r2, [sp, #24]
 8013c0a:	2a47      	cmp	r2, #71	; 0x47
 8013c0c:	d1be      	bne.n	8013b8c <_printf_float+0xfc>
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d1bc      	bne.n	8013b8c <_printf_float+0xfc>
 8013c12:	2301      	movs	r3, #1
 8013c14:	e7b9      	b.n	8013b8a <_printf_float+0xfa>
 8013c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013c1a:	d118      	bne.n	8013c4e <_printf_float+0x1be>
 8013c1c:	2900      	cmp	r1, #0
 8013c1e:	6863      	ldr	r3, [r4, #4]
 8013c20:	dd0b      	ble.n	8013c3a <_printf_float+0x1aa>
 8013c22:	6121      	str	r1, [r4, #16]
 8013c24:	b913      	cbnz	r3, 8013c2c <_printf_float+0x19c>
 8013c26:	6822      	ldr	r2, [r4, #0]
 8013c28:	07d0      	lsls	r0, r2, #31
 8013c2a:	d502      	bpl.n	8013c32 <_printf_float+0x1a2>
 8013c2c:	3301      	adds	r3, #1
 8013c2e:	440b      	add	r3, r1
 8013c30:	6123      	str	r3, [r4, #16]
 8013c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8013c34:	f04f 0900 	mov.w	r9, #0
 8013c38:	e7de      	b.n	8013bf8 <_printf_float+0x168>
 8013c3a:	b913      	cbnz	r3, 8013c42 <_printf_float+0x1b2>
 8013c3c:	6822      	ldr	r2, [r4, #0]
 8013c3e:	07d2      	lsls	r2, r2, #31
 8013c40:	d501      	bpl.n	8013c46 <_printf_float+0x1b6>
 8013c42:	3302      	adds	r3, #2
 8013c44:	e7f4      	b.n	8013c30 <_printf_float+0x1a0>
 8013c46:	2301      	movs	r3, #1
 8013c48:	e7f2      	b.n	8013c30 <_printf_float+0x1a0>
 8013c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c50:	4299      	cmp	r1, r3
 8013c52:	db05      	blt.n	8013c60 <_printf_float+0x1d0>
 8013c54:	6823      	ldr	r3, [r4, #0]
 8013c56:	6121      	str	r1, [r4, #16]
 8013c58:	07d8      	lsls	r0, r3, #31
 8013c5a:	d5ea      	bpl.n	8013c32 <_printf_float+0x1a2>
 8013c5c:	1c4b      	adds	r3, r1, #1
 8013c5e:	e7e7      	b.n	8013c30 <_printf_float+0x1a0>
 8013c60:	2900      	cmp	r1, #0
 8013c62:	bfd4      	ite	le
 8013c64:	f1c1 0202 	rsble	r2, r1, #2
 8013c68:	2201      	movgt	r2, #1
 8013c6a:	4413      	add	r3, r2
 8013c6c:	e7e0      	b.n	8013c30 <_printf_float+0x1a0>
 8013c6e:	6823      	ldr	r3, [r4, #0]
 8013c70:	055a      	lsls	r2, r3, #21
 8013c72:	d407      	bmi.n	8013c84 <_printf_float+0x1f4>
 8013c74:	6923      	ldr	r3, [r4, #16]
 8013c76:	4642      	mov	r2, r8
 8013c78:	4631      	mov	r1, r6
 8013c7a:	4628      	mov	r0, r5
 8013c7c:	47b8      	blx	r7
 8013c7e:	3001      	adds	r0, #1
 8013c80:	d12c      	bne.n	8013cdc <_printf_float+0x24c>
 8013c82:	e764      	b.n	8013b4e <_printf_float+0xbe>
 8013c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013c88:	f240 80e0 	bls.w	8013e4c <_printf_float+0x3bc>
 8013c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013c90:	2200      	movs	r2, #0
 8013c92:	2300      	movs	r3, #0
 8013c94:	f7ec ff20 	bl	8000ad8 <__aeabi_dcmpeq>
 8013c98:	2800      	cmp	r0, #0
 8013c9a:	d034      	beq.n	8013d06 <_printf_float+0x276>
 8013c9c:	4a37      	ldr	r2, [pc, #220]	; (8013d7c <_printf_float+0x2ec>)
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	4631      	mov	r1, r6
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	47b8      	blx	r7
 8013ca6:	3001      	adds	r0, #1
 8013ca8:	f43f af51 	beq.w	8013b4e <_printf_float+0xbe>
 8013cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013cb0:	429a      	cmp	r2, r3
 8013cb2:	db02      	blt.n	8013cba <_printf_float+0x22a>
 8013cb4:	6823      	ldr	r3, [r4, #0]
 8013cb6:	07d8      	lsls	r0, r3, #31
 8013cb8:	d510      	bpl.n	8013cdc <_printf_float+0x24c>
 8013cba:	ee18 3a10 	vmov	r3, s16
 8013cbe:	4652      	mov	r2, sl
 8013cc0:	4631      	mov	r1, r6
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	47b8      	blx	r7
 8013cc6:	3001      	adds	r0, #1
 8013cc8:	f43f af41 	beq.w	8013b4e <_printf_float+0xbe>
 8013ccc:	f04f 0800 	mov.w	r8, #0
 8013cd0:	f104 091a 	add.w	r9, r4, #26
 8013cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013cd6:	3b01      	subs	r3, #1
 8013cd8:	4543      	cmp	r3, r8
 8013cda:	dc09      	bgt.n	8013cf0 <_printf_float+0x260>
 8013cdc:	6823      	ldr	r3, [r4, #0]
 8013cde:	079b      	lsls	r3, r3, #30
 8013ce0:	f100 8107 	bmi.w	8013ef2 <_printf_float+0x462>
 8013ce4:	68e0      	ldr	r0, [r4, #12]
 8013ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ce8:	4298      	cmp	r0, r3
 8013cea:	bfb8      	it	lt
 8013cec:	4618      	movlt	r0, r3
 8013cee:	e730      	b.n	8013b52 <_printf_float+0xc2>
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	464a      	mov	r2, r9
 8013cf4:	4631      	mov	r1, r6
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	47b8      	blx	r7
 8013cfa:	3001      	adds	r0, #1
 8013cfc:	f43f af27 	beq.w	8013b4e <_printf_float+0xbe>
 8013d00:	f108 0801 	add.w	r8, r8, #1
 8013d04:	e7e6      	b.n	8013cd4 <_printf_float+0x244>
 8013d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	dc39      	bgt.n	8013d80 <_printf_float+0x2f0>
 8013d0c:	4a1b      	ldr	r2, [pc, #108]	; (8013d7c <_printf_float+0x2ec>)
 8013d0e:	2301      	movs	r3, #1
 8013d10:	4631      	mov	r1, r6
 8013d12:	4628      	mov	r0, r5
 8013d14:	47b8      	blx	r7
 8013d16:	3001      	adds	r0, #1
 8013d18:	f43f af19 	beq.w	8013b4e <_printf_float+0xbe>
 8013d1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013d20:	4313      	orrs	r3, r2
 8013d22:	d102      	bne.n	8013d2a <_printf_float+0x29a>
 8013d24:	6823      	ldr	r3, [r4, #0]
 8013d26:	07d9      	lsls	r1, r3, #31
 8013d28:	d5d8      	bpl.n	8013cdc <_printf_float+0x24c>
 8013d2a:	ee18 3a10 	vmov	r3, s16
 8013d2e:	4652      	mov	r2, sl
 8013d30:	4631      	mov	r1, r6
 8013d32:	4628      	mov	r0, r5
 8013d34:	47b8      	blx	r7
 8013d36:	3001      	adds	r0, #1
 8013d38:	f43f af09 	beq.w	8013b4e <_printf_float+0xbe>
 8013d3c:	f04f 0900 	mov.w	r9, #0
 8013d40:	f104 0a1a 	add.w	sl, r4, #26
 8013d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d46:	425b      	negs	r3, r3
 8013d48:	454b      	cmp	r3, r9
 8013d4a:	dc01      	bgt.n	8013d50 <_printf_float+0x2c0>
 8013d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d4e:	e792      	b.n	8013c76 <_printf_float+0x1e6>
 8013d50:	2301      	movs	r3, #1
 8013d52:	4652      	mov	r2, sl
 8013d54:	4631      	mov	r1, r6
 8013d56:	4628      	mov	r0, r5
 8013d58:	47b8      	blx	r7
 8013d5a:	3001      	adds	r0, #1
 8013d5c:	f43f aef7 	beq.w	8013b4e <_printf_float+0xbe>
 8013d60:	f109 0901 	add.w	r9, r9, #1
 8013d64:	e7ee      	b.n	8013d44 <_printf_float+0x2b4>
 8013d66:	bf00      	nop
 8013d68:	7fefffff 	.word	0x7fefffff
 8013d6c:	08018de8 	.word	0x08018de8
 8013d70:	08018dec 	.word	0x08018dec
 8013d74:	08018df0 	.word	0x08018df0
 8013d78:	08018df4 	.word	0x08018df4
 8013d7c:	08018df8 	.word	0x08018df8
 8013d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d84:	429a      	cmp	r2, r3
 8013d86:	bfa8      	it	ge
 8013d88:	461a      	movge	r2, r3
 8013d8a:	2a00      	cmp	r2, #0
 8013d8c:	4691      	mov	r9, r2
 8013d8e:	dc37      	bgt.n	8013e00 <_printf_float+0x370>
 8013d90:	f04f 0b00 	mov.w	fp, #0
 8013d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013d98:	f104 021a 	add.w	r2, r4, #26
 8013d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013d9e:	9305      	str	r3, [sp, #20]
 8013da0:	eba3 0309 	sub.w	r3, r3, r9
 8013da4:	455b      	cmp	r3, fp
 8013da6:	dc33      	bgt.n	8013e10 <_printf_float+0x380>
 8013da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013dac:	429a      	cmp	r2, r3
 8013dae:	db3b      	blt.n	8013e28 <_printf_float+0x398>
 8013db0:	6823      	ldr	r3, [r4, #0]
 8013db2:	07da      	lsls	r2, r3, #31
 8013db4:	d438      	bmi.n	8013e28 <_printf_float+0x398>
 8013db6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013dba:	eba2 0903 	sub.w	r9, r2, r3
 8013dbe:	9b05      	ldr	r3, [sp, #20]
 8013dc0:	1ad2      	subs	r2, r2, r3
 8013dc2:	4591      	cmp	r9, r2
 8013dc4:	bfa8      	it	ge
 8013dc6:	4691      	movge	r9, r2
 8013dc8:	f1b9 0f00 	cmp.w	r9, #0
 8013dcc:	dc35      	bgt.n	8013e3a <_printf_float+0x3aa>
 8013dce:	f04f 0800 	mov.w	r8, #0
 8013dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013dd6:	f104 0a1a 	add.w	sl, r4, #26
 8013dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013dde:	1a9b      	subs	r3, r3, r2
 8013de0:	eba3 0309 	sub.w	r3, r3, r9
 8013de4:	4543      	cmp	r3, r8
 8013de6:	f77f af79 	ble.w	8013cdc <_printf_float+0x24c>
 8013dea:	2301      	movs	r3, #1
 8013dec:	4652      	mov	r2, sl
 8013dee:	4631      	mov	r1, r6
 8013df0:	4628      	mov	r0, r5
 8013df2:	47b8      	blx	r7
 8013df4:	3001      	adds	r0, #1
 8013df6:	f43f aeaa 	beq.w	8013b4e <_printf_float+0xbe>
 8013dfa:	f108 0801 	add.w	r8, r8, #1
 8013dfe:	e7ec      	b.n	8013dda <_printf_float+0x34a>
 8013e00:	4613      	mov	r3, r2
 8013e02:	4631      	mov	r1, r6
 8013e04:	4642      	mov	r2, r8
 8013e06:	4628      	mov	r0, r5
 8013e08:	47b8      	blx	r7
 8013e0a:	3001      	adds	r0, #1
 8013e0c:	d1c0      	bne.n	8013d90 <_printf_float+0x300>
 8013e0e:	e69e      	b.n	8013b4e <_printf_float+0xbe>
 8013e10:	2301      	movs	r3, #1
 8013e12:	4631      	mov	r1, r6
 8013e14:	4628      	mov	r0, r5
 8013e16:	9205      	str	r2, [sp, #20]
 8013e18:	47b8      	blx	r7
 8013e1a:	3001      	adds	r0, #1
 8013e1c:	f43f ae97 	beq.w	8013b4e <_printf_float+0xbe>
 8013e20:	9a05      	ldr	r2, [sp, #20]
 8013e22:	f10b 0b01 	add.w	fp, fp, #1
 8013e26:	e7b9      	b.n	8013d9c <_printf_float+0x30c>
 8013e28:	ee18 3a10 	vmov	r3, s16
 8013e2c:	4652      	mov	r2, sl
 8013e2e:	4631      	mov	r1, r6
 8013e30:	4628      	mov	r0, r5
 8013e32:	47b8      	blx	r7
 8013e34:	3001      	adds	r0, #1
 8013e36:	d1be      	bne.n	8013db6 <_printf_float+0x326>
 8013e38:	e689      	b.n	8013b4e <_printf_float+0xbe>
 8013e3a:	9a05      	ldr	r2, [sp, #20]
 8013e3c:	464b      	mov	r3, r9
 8013e3e:	4442      	add	r2, r8
 8013e40:	4631      	mov	r1, r6
 8013e42:	4628      	mov	r0, r5
 8013e44:	47b8      	blx	r7
 8013e46:	3001      	adds	r0, #1
 8013e48:	d1c1      	bne.n	8013dce <_printf_float+0x33e>
 8013e4a:	e680      	b.n	8013b4e <_printf_float+0xbe>
 8013e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013e4e:	2a01      	cmp	r2, #1
 8013e50:	dc01      	bgt.n	8013e56 <_printf_float+0x3c6>
 8013e52:	07db      	lsls	r3, r3, #31
 8013e54:	d53a      	bpl.n	8013ecc <_printf_float+0x43c>
 8013e56:	2301      	movs	r3, #1
 8013e58:	4642      	mov	r2, r8
 8013e5a:	4631      	mov	r1, r6
 8013e5c:	4628      	mov	r0, r5
 8013e5e:	47b8      	blx	r7
 8013e60:	3001      	adds	r0, #1
 8013e62:	f43f ae74 	beq.w	8013b4e <_printf_float+0xbe>
 8013e66:	ee18 3a10 	vmov	r3, s16
 8013e6a:	4652      	mov	r2, sl
 8013e6c:	4631      	mov	r1, r6
 8013e6e:	4628      	mov	r0, r5
 8013e70:	47b8      	blx	r7
 8013e72:	3001      	adds	r0, #1
 8013e74:	f43f ae6b 	beq.w	8013b4e <_printf_float+0xbe>
 8013e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013e7c:	2200      	movs	r2, #0
 8013e7e:	2300      	movs	r3, #0
 8013e80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013e84:	f7ec fe28 	bl	8000ad8 <__aeabi_dcmpeq>
 8013e88:	b9d8      	cbnz	r0, 8013ec2 <_printf_float+0x432>
 8013e8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013e8e:	f108 0201 	add.w	r2, r8, #1
 8013e92:	4631      	mov	r1, r6
 8013e94:	4628      	mov	r0, r5
 8013e96:	47b8      	blx	r7
 8013e98:	3001      	adds	r0, #1
 8013e9a:	d10e      	bne.n	8013eba <_printf_float+0x42a>
 8013e9c:	e657      	b.n	8013b4e <_printf_float+0xbe>
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	4652      	mov	r2, sl
 8013ea2:	4631      	mov	r1, r6
 8013ea4:	4628      	mov	r0, r5
 8013ea6:	47b8      	blx	r7
 8013ea8:	3001      	adds	r0, #1
 8013eaa:	f43f ae50 	beq.w	8013b4e <_printf_float+0xbe>
 8013eae:	f108 0801 	add.w	r8, r8, #1
 8013eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013eb4:	3b01      	subs	r3, #1
 8013eb6:	4543      	cmp	r3, r8
 8013eb8:	dcf1      	bgt.n	8013e9e <_printf_float+0x40e>
 8013eba:	464b      	mov	r3, r9
 8013ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013ec0:	e6da      	b.n	8013c78 <_printf_float+0x1e8>
 8013ec2:	f04f 0800 	mov.w	r8, #0
 8013ec6:	f104 0a1a 	add.w	sl, r4, #26
 8013eca:	e7f2      	b.n	8013eb2 <_printf_float+0x422>
 8013ecc:	2301      	movs	r3, #1
 8013ece:	4642      	mov	r2, r8
 8013ed0:	e7df      	b.n	8013e92 <_printf_float+0x402>
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	464a      	mov	r2, r9
 8013ed6:	4631      	mov	r1, r6
 8013ed8:	4628      	mov	r0, r5
 8013eda:	47b8      	blx	r7
 8013edc:	3001      	adds	r0, #1
 8013ede:	f43f ae36 	beq.w	8013b4e <_printf_float+0xbe>
 8013ee2:	f108 0801 	add.w	r8, r8, #1
 8013ee6:	68e3      	ldr	r3, [r4, #12]
 8013ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013eea:	1a5b      	subs	r3, r3, r1
 8013eec:	4543      	cmp	r3, r8
 8013eee:	dcf0      	bgt.n	8013ed2 <_printf_float+0x442>
 8013ef0:	e6f8      	b.n	8013ce4 <_printf_float+0x254>
 8013ef2:	f04f 0800 	mov.w	r8, #0
 8013ef6:	f104 0919 	add.w	r9, r4, #25
 8013efa:	e7f4      	b.n	8013ee6 <_printf_float+0x456>

08013efc <_printf_common>:
 8013efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f00:	4616      	mov	r6, r2
 8013f02:	4699      	mov	r9, r3
 8013f04:	688a      	ldr	r2, [r1, #8]
 8013f06:	690b      	ldr	r3, [r1, #16]
 8013f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013f0c:	4293      	cmp	r3, r2
 8013f0e:	bfb8      	it	lt
 8013f10:	4613      	movlt	r3, r2
 8013f12:	6033      	str	r3, [r6, #0]
 8013f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013f18:	4607      	mov	r7, r0
 8013f1a:	460c      	mov	r4, r1
 8013f1c:	b10a      	cbz	r2, 8013f22 <_printf_common+0x26>
 8013f1e:	3301      	adds	r3, #1
 8013f20:	6033      	str	r3, [r6, #0]
 8013f22:	6823      	ldr	r3, [r4, #0]
 8013f24:	0699      	lsls	r1, r3, #26
 8013f26:	bf42      	ittt	mi
 8013f28:	6833      	ldrmi	r3, [r6, #0]
 8013f2a:	3302      	addmi	r3, #2
 8013f2c:	6033      	strmi	r3, [r6, #0]
 8013f2e:	6825      	ldr	r5, [r4, #0]
 8013f30:	f015 0506 	ands.w	r5, r5, #6
 8013f34:	d106      	bne.n	8013f44 <_printf_common+0x48>
 8013f36:	f104 0a19 	add.w	sl, r4, #25
 8013f3a:	68e3      	ldr	r3, [r4, #12]
 8013f3c:	6832      	ldr	r2, [r6, #0]
 8013f3e:	1a9b      	subs	r3, r3, r2
 8013f40:	42ab      	cmp	r3, r5
 8013f42:	dc26      	bgt.n	8013f92 <_printf_common+0x96>
 8013f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013f48:	1e13      	subs	r3, r2, #0
 8013f4a:	6822      	ldr	r2, [r4, #0]
 8013f4c:	bf18      	it	ne
 8013f4e:	2301      	movne	r3, #1
 8013f50:	0692      	lsls	r2, r2, #26
 8013f52:	d42b      	bmi.n	8013fac <_printf_common+0xb0>
 8013f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013f58:	4649      	mov	r1, r9
 8013f5a:	4638      	mov	r0, r7
 8013f5c:	47c0      	blx	r8
 8013f5e:	3001      	adds	r0, #1
 8013f60:	d01e      	beq.n	8013fa0 <_printf_common+0xa4>
 8013f62:	6823      	ldr	r3, [r4, #0]
 8013f64:	6922      	ldr	r2, [r4, #16]
 8013f66:	f003 0306 	and.w	r3, r3, #6
 8013f6a:	2b04      	cmp	r3, #4
 8013f6c:	bf02      	ittt	eq
 8013f6e:	68e5      	ldreq	r5, [r4, #12]
 8013f70:	6833      	ldreq	r3, [r6, #0]
 8013f72:	1aed      	subeq	r5, r5, r3
 8013f74:	68a3      	ldr	r3, [r4, #8]
 8013f76:	bf0c      	ite	eq
 8013f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013f7c:	2500      	movne	r5, #0
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	bfc4      	itt	gt
 8013f82:	1a9b      	subgt	r3, r3, r2
 8013f84:	18ed      	addgt	r5, r5, r3
 8013f86:	2600      	movs	r6, #0
 8013f88:	341a      	adds	r4, #26
 8013f8a:	42b5      	cmp	r5, r6
 8013f8c:	d11a      	bne.n	8013fc4 <_printf_common+0xc8>
 8013f8e:	2000      	movs	r0, #0
 8013f90:	e008      	b.n	8013fa4 <_printf_common+0xa8>
 8013f92:	2301      	movs	r3, #1
 8013f94:	4652      	mov	r2, sl
 8013f96:	4649      	mov	r1, r9
 8013f98:	4638      	mov	r0, r7
 8013f9a:	47c0      	blx	r8
 8013f9c:	3001      	adds	r0, #1
 8013f9e:	d103      	bne.n	8013fa8 <_printf_common+0xac>
 8013fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa8:	3501      	adds	r5, #1
 8013faa:	e7c6      	b.n	8013f3a <_printf_common+0x3e>
 8013fac:	18e1      	adds	r1, r4, r3
 8013fae:	1c5a      	adds	r2, r3, #1
 8013fb0:	2030      	movs	r0, #48	; 0x30
 8013fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013fb6:	4422      	add	r2, r4
 8013fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013fc0:	3302      	adds	r3, #2
 8013fc2:	e7c7      	b.n	8013f54 <_printf_common+0x58>
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	4622      	mov	r2, r4
 8013fc8:	4649      	mov	r1, r9
 8013fca:	4638      	mov	r0, r7
 8013fcc:	47c0      	blx	r8
 8013fce:	3001      	adds	r0, #1
 8013fd0:	d0e6      	beq.n	8013fa0 <_printf_common+0xa4>
 8013fd2:	3601      	adds	r6, #1
 8013fd4:	e7d9      	b.n	8013f8a <_printf_common+0x8e>
	...

08013fd8 <_printf_i>:
 8013fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013fdc:	7e0f      	ldrb	r7, [r1, #24]
 8013fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013fe0:	2f78      	cmp	r7, #120	; 0x78
 8013fe2:	4691      	mov	r9, r2
 8013fe4:	4680      	mov	r8, r0
 8013fe6:	460c      	mov	r4, r1
 8013fe8:	469a      	mov	sl, r3
 8013fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013fee:	d807      	bhi.n	8014000 <_printf_i+0x28>
 8013ff0:	2f62      	cmp	r7, #98	; 0x62
 8013ff2:	d80a      	bhi.n	801400a <_printf_i+0x32>
 8013ff4:	2f00      	cmp	r7, #0
 8013ff6:	f000 80d4 	beq.w	80141a2 <_printf_i+0x1ca>
 8013ffa:	2f58      	cmp	r7, #88	; 0x58
 8013ffc:	f000 80c0 	beq.w	8014180 <_printf_i+0x1a8>
 8014000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014008:	e03a      	b.n	8014080 <_printf_i+0xa8>
 801400a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801400e:	2b15      	cmp	r3, #21
 8014010:	d8f6      	bhi.n	8014000 <_printf_i+0x28>
 8014012:	a101      	add	r1, pc, #4	; (adr r1, 8014018 <_printf_i+0x40>)
 8014014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014018:	08014071 	.word	0x08014071
 801401c:	08014085 	.word	0x08014085
 8014020:	08014001 	.word	0x08014001
 8014024:	08014001 	.word	0x08014001
 8014028:	08014001 	.word	0x08014001
 801402c:	08014001 	.word	0x08014001
 8014030:	08014085 	.word	0x08014085
 8014034:	08014001 	.word	0x08014001
 8014038:	08014001 	.word	0x08014001
 801403c:	08014001 	.word	0x08014001
 8014040:	08014001 	.word	0x08014001
 8014044:	08014189 	.word	0x08014189
 8014048:	080140b1 	.word	0x080140b1
 801404c:	08014143 	.word	0x08014143
 8014050:	08014001 	.word	0x08014001
 8014054:	08014001 	.word	0x08014001
 8014058:	080141ab 	.word	0x080141ab
 801405c:	08014001 	.word	0x08014001
 8014060:	080140b1 	.word	0x080140b1
 8014064:	08014001 	.word	0x08014001
 8014068:	08014001 	.word	0x08014001
 801406c:	0801414b 	.word	0x0801414b
 8014070:	682b      	ldr	r3, [r5, #0]
 8014072:	1d1a      	adds	r2, r3, #4
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	602a      	str	r2, [r5, #0]
 8014078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801407c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014080:	2301      	movs	r3, #1
 8014082:	e09f      	b.n	80141c4 <_printf_i+0x1ec>
 8014084:	6820      	ldr	r0, [r4, #0]
 8014086:	682b      	ldr	r3, [r5, #0]
 8014088:	0607      	lsls	r7, r0, #24
 801408a:	f103 0104 	add.w	r1, r3, #4
 801408e:	6029      	str	r1, [r5, #0]
 8014090:	d501      	bpl.n	8014096 <_printf_i+0xbe>
 8014092:	681e      	ldr	r6, [r3, #0]
 8014094:	e003      	b.n	801409e <_printf_i+0xc6>
 8014096:	0646      	lsls	r6, r0, #25
 8014098:	d5fb      	bpl.n	8014092 <_printf_i+0xba>
 801409a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801409e:	2e00      	cmp	r6, #0
 80140a0:	da03      	bge.n	80140aa <_printf_i+0xd2>
 80140a2:	232d      	movs	r3, #45	; 0x2d
 80140a4:	4276      	negs	r6, r6
 80140a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80140aa:	485a      	ldr	r0, [pc, #360]	; (8014214 <_printf_i+0x23c>)
 80140ac:	230a      	movs	r3, #10
 80140ae:	e012      	b.n	80140d6 <_printf_i+0xfe>
 80140b0:	682b      	ldr	r3, [r5, #0]
 80140b2:	6820      	ldr	r0, [r4, #0]
 80140b4:	1d19      	adds	r1, r3, #4
 80140b6:	6029      	str	r1, [r5, #0]
 80140b8:	0605      	lsls	r5, r0, #24
 80140ba:	d501      	bpl.n	80140c0 <_printf_i+0xe8>
 80140bc:	681e      	ldr	r6, [r3, #0]
 80140be:	e002      	b.n	80140c6 <_printf_i+0xee>
 80140c0:	0641      	lsls	r1, r0, #25
 80140c2:	d5fb      	bpl.n	80140bc <_printf_i+0xe4>
 80140c4:	881e      	ldrh	r6, [r3, #0]
 80140c6:	4853      	ldr	r0, [pc, #332]	; (8014214 <_printf_i+0x23c>)
 80140c8:	2f6f      	cmp	r7, #111	; 0x6f
 80140ca:	bf0c      	ite	eq
 80140cc:	2308      	moveq	r3, #8
 80140ce:	230a      	movne	r3, #10
 80140d0:	2100      	movs	r1, #0
 80140d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80140d6:	6865      	ldr	r5, [r4, #4]
 80140d8:	60a5      	str	r5, [r4, #8]
 80140da:	2d00      	cmp	r5, #0
 80140dc:	bfa2      	ittt	ge
 80140de:	6821      	ldrge	r1, [r4, #0]
 80140e0:	f021 0104 	bicge.w	r1, r1, #4
 80140e4:	6021      	strge	r1, [r4, #0]
 80140e6:	b90e      	cbnz	r6, 80140ec <_printf_i+0x114>
 80140e8:	2d00      	cmp	r5, #0
 80140ea:	d04b      	beq.n	8014184 <_printf_i+0x1ac>
 80140ec:	4615      	mov	r5, r2
 80140ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80140f2:	fb03 6711 	mls	r7, r3, r1, r6
 80140f6:	5dc7      	ldrb	r7, [r0, r7]
 80140f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80140fc:	4637      	mov	r7, r6
 80140fe:	42bb      	cmp	r3, r7
 8014100:	460e      	mov	r6, r1
 8014102:	d9f4      	bls.n	80140ee <_printf_i+0x116>
 8014104:	2b08      	cmp	r3, #8
 8014106:	d10b      	bne.n	8014120 <_printf_i+0x148>
 8014108:	6823      	ldr	r3, [r4, #0]
 801410a:	07de      	lsls	r6, r3, #31
 801410c:	d508      	bpl.n	8014120 <_printf_i+0x148>
 801410e:	6923      	ldr	r3, [r4, #16]
 8014110:	6861      	ldr	r1, [r4, #4]
 8014112:	4299      	cmp	r1, r3
 8014114:	bfde      	ittt	le
 8014116:	2330      	movle	r3, #48	; 0x30
 8014118:	f805 3c01 	strble.w	r3, [r5, #-1]
 801411c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014120:	1b52      	subs	r2, r2, r5
 8014122:	6122      	str	r2, [r4, #16]
 8014124:	f8cd a000 	str.w	sl, [sp]
 8014128:	464b      	mov	r3, r9
 801412a:	aa03      	add	r2, sp, #12
 801412c:	4621      	mov	r1, r4
 801412e:	4640      	mov	r0, r8
 8014130:	f7ff fee4 	bl	8013efc <_printf_common>
 8014134:	3001      	adds	r0, #1
 8014136:	d14a      	bne.n	80141ce <_printf_i+0x1f6>
 8014138:	f04f 30ff 	mov.w	r0, #4294967295
 801413c:	b004      	add	sp, #16
 801413e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014142:	6823      	ldr	r3, [r4, #0]
 8014144:	f043 0320 	orr.w	r3, r3, #32
 8014148:	6023      	str	r3, [r4, #0]
 801414a:	4833      	ldr	r0, [pc, #204]	; (8014218 <_printf_i+0x240>)
 801414c:	2778      	movs	r7, #120	; 0x78
 801414e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014152:	6823      	ldr	r3, [r4, #0]
 8014154:	6829      	ldr	r1, [r5, #0]
 8014156:	061f      	lsls	r7, r3, #24
 8014158:	f851 6b04 	ldr.w	r6, [r1], #4
 801415c:	d402      	bmi.n	8014164 <_printf_i+0x18c>
 801415e:	065f      	lsls	r7, r3, #25
 8014160:	bf48      	it	mi
 8014162:	b2b6      	uxthmi	r6, r6
 8014164:	07df      	lsls	r7, r3, #31
 8014166:	bf48      	it	mi
 8014168:	f043 0320 	orrmi.w	r3, r3, #32
 801416c:	6029      	str	r1, [r5, #0]
 801416e:	bf48      	it	mi
 8014170:	6023      	strmi	r3, [r4, #0]
 8014172:	b91e      	cbnz	r6, 801417c <_printf_i+0x1a4>
 8014174:	6823      	ldr	r3, [r4, #0]
 8014176:	f023 0320 	bic.w	r3, r3, #32
 801417a:	6023      	str	r3, [r4, #0]
 801417c:	2310      	movs	r3, #16
 801417e:	e7a7      	b.n	80140d0 <_printf_i+0xf8>
 8014180:	4824      	ldr	r0, [pc, #144]	; (8014214 <_printf_i+0x23c>)
 8014182:	e7e4      	b.n	801414e <_printf_i+0x176>
 8014184:	4615      	mov	r5, r2
 8014186:	e7bd      	b.n	8014104 <_printf_i+0x12c>
 8014188:	682b      	ldr	r3, [r5, #0]
 801418a:	6826      	ldr	r6, [r4, #0]
 801418c:	6961      	ldr	r1, [r4, #20]
 801418e:	1d18      	adds	r0, r3, #4
 8014190:	6028      	str	r0, [r5, #0]
 8014192:	0635      	lsls	r5, r6, #24
 8014194:	681b      	ldr	r3, [r3, #0]
 8014196:	d501      	bpl.n	801419c <_printf_i+0x1c4>
 8014198:	6019      	str	r1, [r3, #0]
 801419a:	e002      	b.n	80141a2 <_printf_i+0x1ca>
 801419c:	0670      	lsls	r0, r6, #25
 801419e:	d5fb      	bpl.n	8014198 <_printf_i+0x1c0>
 80141a0:	8019      	strh	r1, [r3, #0]
 80141a2:	2300      	movs	r3, #0
 80141a4:	6123      	str	r3, [r4, #16]
 80141a6:	4615      	mov	r5, r2
 80141a8:	e7bc      	b.n	8014124 <_printf_i+0x14c>
 80141aa:	682b      	ldr	r3, [r5, #0]
 80141ac:	1d1a      	adds	r2, r3, #4
 80141ae:	602a      	str	r2, [r5, #0]
 80141b0:	681d      	ldr	r5, [r3, #0]
 80141b2:	6862      	ldr	r2, [r4, #4]
 80141b4:	2100      	movs	r1, #0
 80141b6:	4628      	mov	r0, r5
 80141b8:	f7ec f812 	bl	80001e0 <memchr>
 80141bc:	b108      	cbz	r0, 80141c2 <_printf_i+0x1ea>
 80141be:	1b40      	subs	r0, r0, r5
 80141c0:	6060      	str	r0, [r4, #4]
 80141c2:	6863      	ldr	r3, [r4, #4]
 80141c4:	6123      	str	r3, [r4, #16]
 80141c6:	2300      	movs	r3, #0
 80141c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80141cc:	e7aa      	b.n	8014124 <_printf_i+0x14c>
 80141ce:	6923      	ldr	r3, [r4, #16]
 80141d0:	462a      	mov	r2, r5
 80141d2:	4649      	mov	r1, r9
 80141d4:	4640      	mov	r0, r8
 80141d6:	47d0      	blx	sl
 80141d8:	3001      	adds	r0, #1
 80141da:	d0ad      	beq.n	8014138 <_printf_i+0x160>
 80141dc:	6823      	ldr	r3, [r4, #0]
 80141de:	079b      	lsls	r3, r3, #30
 80141e0:	d413      	bmi.n	801420a <_printf_i+0x232>
 80141e2:	68e0      	ldr	r0, [r4, #12]
 80141e4:	9b03      	ldr	r3, [sp, #12]
 80141e6:	4298      	cmp	r0, r3
 80141e8:	bfb8      	it	lt
 80141ea:	4618      	movlt	r0, r3
 80141ec:	e7a6      	b.n	801413c <_printf_i+0x164>
 80141ee:	2301      	movs	r3, #1
 80141f0:	4632      	mov	r2, r6
 80141f2:	4649      	mov	r1, r9
 80141f4:	4640      	mov	r0, r8
 80141f6:	47d0      	blx	sl
 80141f8:	3001      	adds	r0, #1
 80141fa:	d09d      	beq.n	8014138 <_printf_i+0x160>
 80141fc:	3501      	adds	r5, #1
 80141fe:	68e3      	ldr	r3, [r4, #12]
 8014200:	9903      	ldr	r1, [sp, #12]
 8014202:	1a5b      	subs	r3, r3, r1
 8014204:	42ab      	cmp	r3, r5
 8014206:	dcf2      	bgt.n	80141ee <_printf_i+0x216>
 8014208:	e7eb      	b.n	80141e2 <_printf_i+0x20a>
 801420a:	2500      	movs	r5, #0
 801420c:	f104 0619 	add.w	r6, r4, #25
 8014210:	e7f5      	b.n	80141fe <_printf_i+0x226>
 8014212:	bf00      	nop
 8014214:	08018dfa 	.word	0x08018dfa
 8014218:	08018e0b 	.word	0x08018e0b

0801421c <_scanf_float>:
 801421c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014220:	b087      	sub	sp, #28
 8014222:	4617      	mov	r7, r2
 8014224:	9303      	str	r3, [sp, #12]
 8014226:	688b      	ldr	r3, [r1, #8]
 8014228:	1e5a      	subs	r2, r3, #1
 801422a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801422e:	bf83      	ittte	hi
 8014230:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8014234:	195b      	addhi	r3, r3, r5
 8014236:	9302      	strhi	r3, [sp, #8]
 8014238:	2300      	movls	r3, #0
 801423a:	bf86      	itte	hi
 801423c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014240:	608b      	strhi	r3, [r1, #8]
 8014242:	9302      	strls	r3, [sp, #8]
 8014244:	680b      	ldr	r3, [r1, #0]
 8014246:	468b      	mov	fp, r1
 8014248:	2500      	movs	r5, #0
 801424a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801424e:	f84b 3b1c 	str.w	r3, [fp], #28
 8014252:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8014256:	4680      	mov	r8, r0
 8014258:	460c      	mov	r4, r1
 801425a:	465e      	mov	r6, fp
 801425c:	46aa      	mov	sl, r5
 801425e:	46a9      	mov	r9, r5
 8014260:	9501      	str	r5, [sp, #4]
 8014262:	68a2      	ldr	r2, [r4, #8]
 8014264:	b152      	cbz	r2, 801427c <_scanf_float+0x60>
 8014266:	683b      	ldr	r3, [r7, #0]
 8014268:	781b      	ldrb	r3, [r3, #0]
 801426a:	2b4e      	cmp	r3, #78	; 0x4e
 801426c:	d864      	bhi.n	8014338 <_scanf_float+0x11c>
 801426e:	2b40      	cmp	r3, #64	; 0x40
 8014270:	d83c      	bhi.n	80142ec <_scanf_float+0xd0>
 8014272:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8014276:	b2c8      	uxtb	r0, r1
 8014278:	280e      	cmp	r0, #14
 801427a:	d93a      	bls.n	80142f2 <_scanf_float+0xd6>
 801427c:	f1b9 0f00 	cmp.w	r9, #0
 8014280:	d003      	beq.n	801428a <_scanf_float+0x6e>
 8014282:	6823      	ldr	r3, [r4, #0]
 8014284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014288:	6023      	str	r3, [r4, #0]
 801428a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801428e:	f1ba 0f01 	cmp.w	sl, #1
 8014292:	f200 8113 	bhi.w	80144bc <_scanf_float+0x2a0>
 8014296:	455e      	cmp	r6, fp
 8014298:	f200 8105 	bhi.w	80144a6 <_scanf_float+0x28a>
 801429c:	2501      	movs	r5, #1
 801429e:	4628      	mov	r0, r5
 80142a0:	b007      	add	sp, #28
 80142a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142a6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80142aa:	2a0d      	cmp	r2, #13
 80142ac:	d8e6      	bhi.n	801427c <_scanf_float+0x60>
 80142ae:	a101      	add	r1, pc, #4	; (adr r1, 80142b4 <_scanf_float+0x98>)
 80142b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80142b4:	080143f3 	.word	0x080143f3
 80142b8:	0801427d 	.word	0x0801427d
 80142bc:	0801427d 	.word	0x0801427d
 80142c0:	0801427d 	.word	0x0801427d
 80142c4:	08014453 	.word	0x08014453
 80142c8:	0801442b 	.word	0x0801442b
 80142cc:	0801427d 	.word	0x0801427d
 80142d0:	0801427d 	.word	0x0801427d
 80142d4:	08014401 	.word	0x08014401
 80142d8:	0801427d 	.word	0x0801427d
 80142dc:	0801427d 	.word	0x0801427d
 80142e0:	0801427d 	.word	0x0801427d
 80142e4:	0801427d 	.word	0x0801427d
 80142e8:	080143b9 	.word	0x080143b9
 80142ec:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80142f0:	e7db      	b.n	80142aa <_scanf_float+0x8e>
 80142f2:	290e      	cmp	r1, #14
 80142f4:	d8c2      	bhi.n	801427c <_scanf_float+0x60>
 80142f6:	a001      	add	r0, pc, #4	; (adr r0, 80142fc <_scanf_float+0xe0>)
 80142f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80142fc:	080143ab 	.word	0x080143ab
 8014300:	0801427d 	.word	0x0801427d
 8014304:	080143ab 	.word	0x080143ab
 8014308:	0801443f 	.word	0x0801443f
 801430c:	0801427d 	.word	0x0801427d
 8014310:	08014359 	.word	0x08014359
 8014314:	08014395 	.word	0x08014395
 8014318:	08014395 	.word	0x08014395
 801431c:	08014395 	.word	0x08014395
 8014320:	08014395 	.word	0x08014395
 8014324:	08014395 	.word	0x08014395
 8014328:	08014395 	.word	0x08014395
 801432c:	08014395 	.word	0x08014395
 8014330:	08014395 	.word	0x08014395
 8014334:	08014395 	.word	0x08014395
 8014338:	2b6e      	cmp	r3, #110	; 0x6e
 801433a:	d809      	bhi.n	8014350 <_scanf_float+0x134>
 801433c:	2b60      	cmp	r3, #96	; 0x60
 801433e:	d8b2      	bhi.n	80142a6 <_scanf_float+0x8a>
 8014340:	2b54      	cmp	r3, #84	; 0x54
 8014342:	d077      	beq.n	8014434 <_scanf_float+0x218>
 8014344:	2b59      	cmp	r3, #89	; 0x59
 8014346:	d199      	bne.n	801427c <_scanf_float+0x60>
 8014348:	2d07      	cmp	r5, #7
 801434a:	d197      	bne.n	801427c <_scanf_float+0x60>
 801434c:	2508      	movs	r5, #8
 801434e:	e029      	b.n	80143a4 <_scanf_float+0x188>
 8014350:	2b74      	cmp	r3, #116	; 0x74
 8014352:	d06f      	beq.n	8014434 <_scanf_float+0x218>
 8014354:	2b79      	cmp	r3, #121	; 0x79
 8014356:	e7f6      	b.n	8014346 <_scanf_float+0x12a>
 8014358:	6821      	ldr	r1, [r4, #0]
 801435a:	05c8      	lsls	r0, r1, #23
 801435c:	d51a      	bpl.n	8014394 <_scanf_float+0x178>
 801435e:	9b02      	ldr	r3, [sp, #8]
 8014360:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8014364:	6021      	str	r1, [r4, #0]
 8014366:	f109 0901 	add.w	r9, r9, #1
 801436a:	b11b      	cbz	r3, 8014374 <_scanf_float+0x158>
 801436c:	3b01      	subs	r3, #1
 801436e:	3201      	adds	r2, #1
 8014370:	9302      	str	r3, [sp, #8]
 8014372:	60a2      	str	r2, [r4, #8]
 8014374:	68a3      	ldr	r3, [r4, #8]
 8014376:	3b01      	subs	r3, #1
 8014378:	60a3      	str	r3, [r4, #8]
 801437a:	6923      	ldr	r3, [r4, #16]
 801437c:	3301      	adds	r3, #1
 801437e:	6123      	str	r3, [r4, #16]
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	3b01      	subs	r3, #1
 8014384:	2b00      	cmp	r3, #0
 8014386:	607b      	str	r3, [r7, #4]
 8014388:	f340 8084 	ble.w	8014494 <_scanf_float+0x278>
 801438c:	683b      	ldr	r3, [r7, #0]
 801438e:	3301      	adds	r3, #1
 8014390:	603b      	str	r3, [r7, #0]
 8014392:	e766      	b.n	8014262 <_scanf_float+0x46>
 8014394:	eb1a 0f05 	cmn.w	sl, r5
 8014398:	f47f af70 	bne.w	801427c <_scanf_float+0x60>
 801439c:	6822      	ldr	r2, [r4, #0]
 801439e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80143a2:	6022      	str	r2, [r4, #0]
 80143a4:	f806 3b01 	strb.w	r3, [r6], #1
 80143a8:	e7e4      	b.n	8014374 <_scanf_float+0x158>
 80143aa:	6822      	ldr	r2, [r4, #0]
 80143ac:	0610      	lsls	r0, r2, #24
 80143ae:	f57f af65 	bpl.w	801427c <_scanf_float+0x60>
 80143b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80143b6:	e7f4      	b.n	80143a2 <_scanf_float+0x186>
 80143b8:	f1ba 0f00 	cmp.w	sl, #0
 80143bc:	d10e      	bne.n	80143dc <_scanf_float+0x1c0>
 80143be:	f1b9 0f00 	cmp.w	r9, #0
 80143c2:	d10e      	bne.n	80143e2 <_scanf_float+0x1c6>
 80143c4:	6822      	ldr	r2, [r4, #0]
 80143c6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80143ca:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80143ce:	d108      	bne.n	80143e2 <_scanf_float+0x1c6>
 80143d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80143d4:	6022      	str	r2, [r4, #0]
 80143d6:	f04f 0a01 	mov.w	sl, #1
 80143da:	e7e3      	b.n	80143a4 <_scanf_float+0x188>
 80143dc:	f1ba 0f02 	cmp.w	sl, #2
 80143e0:	d055      	beq.n	801448e <_scanf_float+0x272>
 80143e2:	2d01      	cmp	r5, #1
 80143e4:	d002      	beq.n	80143ec <_scanf_float+0x1d0>
 80143e6:	2d04      	cmp	r5, #4
 80143e8:	f47f af48 	bne.w	801427c <_scanf_float+0x60>
 80143ec:	3501      	adds	r5, #1
 80143ee:	b2ed      	uxtb	r5, r5
 80143f0:	e7d8      	b.n	80143a4 <_scanf_float+0x188>
 80143f2:	f1ba 0f01 	cmp.w	sl, #1
 80143f6:	f47f af41 	bne.w	801427c <_scanf_float+0x60>
 80143fa:	f04f 0a02 	mov.w	sl, #2
 80143fe:	e7d1      	b.n	80143a4 <_scanf_float+0x188>
 8014400:	b97d      	cbnz	r5, 8014422 <_scanf_float+0x206>
 8014402:	f1b9 0f00 	cmp.w	r9, #0
 8014406:	f47f af3c 	bne.w	8014282 <_scanf_float+0x66>
 801440a:	6822      	ldr	r2, [r4, #0]
 801440c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014410:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014414:	f47f af39 	bne.w	801428a <_scanf_float+0x6e>
 8014418:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801441c:	6022      	str	r2, [r4, #0]
 801441e:	2501      	movs	r5, #1
 8014420:	e7c0      	b.n	80143a4 <_scanf_float+0x188>
 8014422:	2d03      	cmp	r5, #3
 8014424:	d0e2      	beq.n	80143ec <_scanf_float+0x1d0>
 8014426:	2d05      	cmp	r5, #5
 8014428:	e7de      	b.n	80143e8 <_scanf_float+0x1cc>
 801442a:	2d02      	cmp	r5, #2
 801442c:	f47f af26 	bne.w	801427c <_scanf_float+0x60>
 8014430:	2503      	movs	r5, #3
 8014432:	e7b7      	b.n	80143a4 <_scanf_float+0x188>
 8014434:	2d06      	cmp	r5, #6
 8014436:	f47f af21 	bne.w	801427c <_scanf_float+0x60>
 801443a:	2507      	movs	r5, #7
 801443c:	e7b2      	b.n	80143a4 <_scanf_float+0x188>
 801443e:	6822      	ldr	r2, [r4, #0]
 8014440:	0591      	lsls	r1, r2, #22
 8014442:	f57f af1b 	bpl.w	801427c <_scanf_float+0x60>
 8014446:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801444a:	6022      	str	r2, [r4, #0]
 801444c:	f8cd 9004 	str.w	r9, [sp, #4]
 8014450:	e7a8      	b.n	80143a4 <_scanf_float+0x188>
 8014452:	6822      	ldr	r2, [r4, #0]
 8014454:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8014458:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801445c:	d006      	beq.n	801446c <_scanf_float+0x250>
 801445e:	0550      	lsls	r0, r2, #21
 8014460:	f57f af0c 	bpl.w	801427c <_scanf_float+0x60>
 8014464:	f1b9 0f00 	cmp.w	r9, #0
 8014468:	f43f af0f 	beq.w	801428a <_scanf_float+0x6e>
 801446c:	0591      	lsls	r1, r2, #22
 801446e:	bf58      	it	pl
 8014470:	9901      	ldrpl	r1, [sp, #4]
 8014472:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014476:	bf58      	it	pl
 8014478:	eba9 0101 	subpl.w	r1, r9, r1
 801447c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014480:	bf58      	it	pl
 8014482:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8014486:	6022      	str	r2, [r4, #0]
 8014488:	f04f 0900 	mov.w	r9, #0
 801448c:	e78a      	b.n	80143a4 <_scanf_float+0x188>
 801448e:	f04f 0a03 	mov.w	sl, #3
 8014492:	e787      	b.n	80143a4 <_scanf_float+0x188>
 8014494:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014498:	4639      	mov	r1, r7
 801449a:	4640      	mov	r0, r8
 801449c:	4798      	blx	r3
 801449e:	2800      	cmp	r0, #0
 80144a0:	f43f aedf 	beq.w	8014262 <_scanf_float+0x46>
 80144a4:	e6ea      	b.n	801427c <_scanf_float+0x60>
 80144a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80144ae:	463a      	mov	r2, r7
 80144b0:	4640      	mov	r0, r8
 80144b2:	4798      	blx	r3
 80144b4:	6923      	ldr	r3, [r4, #16]
 80144b6:	3b01      	subs	r3, #1
 80144b8:	6123      	str	r3, [r4, #16]
 80144ba:	e6ec      	b.n	8014296 <_scanf_float+0x7a>
 80144bc:	1e6b      	subs	r3, r5, #1
 80144be:	2b06      	cmp	r3, #6
 80144c0:	d825      	bhi.n	801450e <_scanf_float+0x2f2>
 80144c2:	2d02      	cmp	r5, #2
 80144c4:	d836      	bhi.n	8014534 <_scanf_float+0x318>
 80144c6:	455e      	cmp	r6, fp
 80144c8:	f67f aee8 	bls.w	801429c <_scanf_float+0x80>
 80144cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144d0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80144d4:	463a      	mov	r2, r7
 80144d6:	4640      	mov	r0, r8
 80144d8:	4798      	blx	r3
 80144da:	6923      	ldr	r3, [r4, #16]
 80144dc:	3b01      	subs	r3, #1
 80144de:	6123      	str	r3, [r4, #16]
 80144e0:	e7f1      	b.n	80144c6 <_scanf_float+0x2aa>
 80144e2:	9802      	ldr	r0, [sp, #8]
 80144e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144e8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80144ec:	9002      	str	r0, [sp, #8]
 80144ee:	463a      	mov	r2, r7
 80144f0:	4640      	mov	r0, r8
 80144f2:	4798      	blx	r3
 80144f4:	6923      	ldr	r3, [r4, #16]
 80144f6:	3b01      	subs	r3, #1
 80144f8:	6123      	str	r3, [r4, #16]
 80144fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80144fe:	fa5f fa8a 	uxtb.w	sl, sl
 8014502:	f1ba 0f02 	cmp.w	sl, #2
 8014506:	d1ec      	bne.n	80144e2 <_scanf_float+0x2c6>
 8014508:	3d03      	subs	r5, #3
 801450a:	b2ed      	uxtb	r5, r5
 801450c:	1b76      	subs	r6, r6, r5
 801450e:	6823      	ldr	r3, [r4, #0]
 8014510:	05da      	lsls	r2, r3, #23
 8014512:	d52f      	bpl.n	8014574 <_scanf_float+0x358>
 8014514:	055b      	lsls	r3, r3, #21
 8014516:	d510      	bpl.n	801453a <_scanf_float+0x31e>
 8014518:	455e      	cmp	r6, fp
 801451a:	f67f aebf 	bls.w	801429c <_scanf_float+0x80>
 801451e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014522:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014526:	463a      	mov	r2, r7
 8014528:	4640      	mov	r0, r8
 801452a:	4798      	blx	r3
 801452c:	6923      	ldr	r3, [r4, #16]
 801452e:	3b01      	subs	r3, #1
 8014530:	6123      	str	r3, [r4, #16]
 8014532:	e7f1      	b.n	8014518 <_scanf_float+0x2fc>
 8014534:	46aa      	mov	sl, r5
 8014536:	9602      	str	r6, [sp, #8]
 8014538:	e7df      	b.n	80144fa <_scanf_float+0x2de>
 801453a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801453e:	6923      	ldr	r3, [r4, #16]
 8014540:	2965      	cmp	r1, #101	; 0x65
 8014542:	f103 33ff 	add.w	r3, r3, #4294967295
 8014546:	f106 35ff 	add.w	r5, r6, #4294967295
 801454a:	6123      	str	r3, [r4, #16]
 801454c:	d00c      	beq.n	8014568 <_scanf_float+0x34c>
 801454e:	2945      	cmp	r1, #69	; 0x45
 8014550:	d00a      	beq.n	8014568 <_scanf_float+0x34c>
 8014552:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014556:	463a      	mov	r2, r7
 8014558:	4640      	mov	r0, r8
 801455a:	4798      	blx	r3
 801455c:	6923      	ldr	r3, [r4, #16]
 801455e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014562:	3b01      	subs	r3, #1
 8014564:	1eb5      	subs	r5, r6, #2
 8014566:	6123      	str	r3, [r4, #16]
 8014568:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801456c:	463a      	mov	r2, r7
 801456e:	4640      	mov	r0, r8
 8014570:	4798      	blx	r3
 8014572:	462e      	mov	r6, r5
 8014574:	6825      	ldr	r5, [r4, #0]
 8014576:	f015 0510 	ands.w	r5, r5, #16
 801457a:	d158      	bne.n	801462e <_scanf_float+0x412>
 801457c:	7035      	strb	r5, [r6, #0]
 801457e:	6823      	ldr	r3, [r4, #0]
 8014580:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014588:	d11c      	bne.n	80145c4 <_scanf_float+0x3a8>
 801458a:	9b01      	ldr	r3, [sp, #4]
 801458c:	454b      	cmp	r3, r9
 801458e:	eba3 0209 	sub.w	r2, r3, r9
 8014592:	d124      	bne.n	80145de <_scanf_float+0x3c2>
 8014594:	2200      	movs	r2, #0
 8014596:	4659      	mov	r1, fp
 8014598:	4640      	mov	r0, r8
 801459a:	f002 fc81 	bl	8016ea0 <_strtod_r>
 801459e:	9b03      	ldr	r3, [sp, #12]
 80145a0:	6821      	ldr	r1, [r4, #0]
 80145a2:	681b      	ldr	r3, [r3, #0]
 80145a4:	f011 0f02 	tst.w	r1, #2
 80145a8:	ec57 6b10 	vmov	r6, r7, d0
 80145ac:	f103 0204 	add.w	r2, r3, #4
 80145b0:	d020      	beq.n	80145f4 <_scanf_float+0x3d8>
 80145b2:	9903      	ldr	r1, [sp, #12]
 80145b4:	600a      	str	r2, [r1, #0]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	e9c3 6700 	strd	r6, r7, [r3]
 80145bc:	68e3      	ldr	r3, [r4, #12]
 80145be:	3301      	adds	r3, #1
 80145c0:	60e3      	str	r3, [r4, #12]
 80145c2:	e66c      	b.n	801429e <_scanf_float+0x82>
 80145c4:	9b04      	ldr	r3, [sp, #16]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d0e4      	beq.n	8014594 <_scanf_float+0x378>
 80145ca:	9905      	ldr	r1, [sp, #20]
 80145cc:	230a      	movs	r3, #10
 80145ce:	462a      	mov	r2, r5
 80145d0:	3101      	adds	r1, #1
 80145d2:	4640      	mov	r0, r8
 80145d4:	f002 fcec 	bl	8016fb0 <_strtol_r>
 80145d8:	9b04      	ldr	r3, [sp, #16]
 80145da:	9e05      	ldr	r6, [sp, #20]
 80145dc:	1ac2      	subs	r2, r0, r3
 80145de:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80145e2:	429e      	cmp	r6, r3
 80145e4:	bf28      	it	cs
 80145e6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80145ea:	4912      	ldr	r1, [pc, #72]	; (8014634 <_scanf_float+0x418>)
 80145ec:	4630      	mov	r0, r6
 80145ee:	f000 f8d5 	bl	801479c <siprintf>
 80145f2:	e7cf      	b.n	8014594 <_scanf_float+0x378>
 80145f4:	f011 0f04 	tst.w	r1, #4
 80145f8:	9903      	ldr	r1, [sp, #12]
 80145fa:	600a      	str	r2, [r1, #0]
 80145fc:	d1db      	bne.n	80145b6 <_scanf_float+0x39a>
 80145fe:	f8d3 8000 	ldr.w	r8, [r3]
 8014602:	ee10 2a10 	vmov	r2, s0
 8014606:	ee10 0a10 	vmov	r0, s0
 801460a:	463b      	mov	r3, r7
 801460c:	4639      	mov	r1, r7
 801460e:	f7ec fa95 	bl	8000b3c <__aeabi_dcmpun>
 8014612:	b128      	cbz	r0, 8014620 <_scanf_float+0x404>
 8014614:	4808      	ldr	r0, [pc, #32]	; (8014638 <_scanf_float+0x41c>)
 8014616:	f000 fa07 	bl	8014a28 <nanf>
 801461a:	ed88 0a00 	vstr	s0, [r8]
 801461e:	e7cd      	b.n	80145bc <_scanf_float+0x3a0>
 8014620:	4630      	mov	r0, r6
 8014622:	4639      	mov	r1, r7
 8014624:	f7ec fae8 	bl	8000bf8 <__aeabi_d2f>
 8014628:	f8c8 0000 	str.w	r0, [r8]
 801462c:	e7c6      	b.n	80145bc <_scanf_float+0x3a0>
 801462e:	2500      	movs	r5, #0
 8014630:	e635      	b.n	801429e <_scanf_float+0x82>
 8014632:	bf00      	nop
 8014634:	08018e1c 	.word	0x08018e1c
 8014638:	080191ad 	.word	0x080191ad

0801463c <std>:
 801463c:	2300      	movs	r3, #0
 801463e:	b510      	push	{r4, lr}
 8014640:	4604      	mov	r4, r0
 8014642:	e9c0 3300 	strd	r3, r3, [r0]
 8014646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801464a:	6083      	str	r3, [r0, #8]
 801464c:	8181      	strh	r1, [r0, #12]
 801464e:	6643      	str	r3, [r0, #100]	; 0x64
 8014650:	81c2      	strh	r2, [r0, #14]
 8014652:	6183      	str	r3, [r0, #24]
 8014654:	4619      	mov	r1, r3
 8014656:	2208      	movs	r2, #8
 8014658:	305c      	adds	r0, #92	; 0x5c
 801465a:	f000 f902 	bl	8014862 <memset>
 801465e:	4b05      	ldr	r3, [pc, #20]	; (8014674 <std+0x38>)
 8014660:	6263      	str	r3, [r4, #36]	; 0x24
 8014662:	4b05      	ldr	r3, [pc, #20]	; (8014678 <std+0x3c>)
 8014664:	62a3      	str	r3, [r4, #40]	; 0x28
 8014666:	4b05      	ldr	r3, [pc, #20]	; (801467c <std+0x40>)
 8014668:	62e3      	str	r3, [r4, #44]	; 0x2c
 801466a:	4b05      	ldr	r3, [pc, #20]	; (8014680 <std+0x44>)
 801466c:	6224      	str	r4, [r4, #32]
 801466e:	6323      	str	r3, [r4, #48]	; 0x30
 8014670:	bd10      	pop	{r4, pc}
 8014672:	bf00      	nop
 8014674:	080147dd 	.word	0x080147dd
 8014678:	080147ff 	.word	0x080147ff
 801467c:	08014837 	.word	0x08014837
 8014680:	0801485b 	.word	0x0801485b

08014684 <stdio_exit_handler>:
 8014684:	4a02      	ldr	r2, [pc, #8]	; (8014690 <stdio_exit_handler+0xc>)
 8014686:	4903      	ldr	r1, [pc, #12]	; (8014694 <stdio_exit_handler+0x10>)
 8014688:	4803      	ldr	r0, [pc, #12]	; (8014698 <stdio_exit_handler+0x14>)
 801468a:	f000 b869 	b.w	8014760 <_fwalk_sglue>
 801468e:	bf00      	nop
 8014690:	20000030 	.word	0x20000030
 8014694:	08017371 	.word	0x08017371
 8014698:	2000003c 	.word	0x2000003c

0801469c <cleanup_stdio>:
 801469c:	6841      	ldr	r1, [r0, #4]
 801469e:	4b0c      	ldr	r3, [pc, #48]	; (80146d0 <cleanup_stdio+0x34>)
 80146a0:	4299      	cmp	r1, r3
 80146a2:	b510      	push	{r4, lr}
 80146a4:	4604      	mov	r4, r0
 80146a6:	d001      	beq.n	80146ac <cleanup_stdio+0x10>
 80146a8:	f002 fe62 	bl	8017370 <_fflush_r>
 80146ac:	68a1      	ldr	r1, [r4, #8]
 80146ae:	4b09      	ldr	r3, [pc, #36]	; (80146d4 <cleanup_stdio+0x38>)
 80146b0:	4299      	cmp	r1, r3
 80146b2:	d002      	beq.n	80146ba <cleanup_stdio+0x1e>
 80146b4:	4620      	mov	r0, r4
 80146b6:	f002 fe5b 	bl	8017370 <_fflush_r>
 80146ba:	68e1      	ldr	r1, [r4, #12]
 80146bc:	4b06      	ldr	r3, [pc, #24]	; (80146d8 <cleanup_stdio+0x3c>)
 80146be:	4299      	cmp	r1, r3
 80146c0:	d004      	beq.n	80146cc <cleanup_stdio+0x30>
 80146c2:	4620      	mov	r0, r4
 80146c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146c8:	f002 be52 	b.w	8017370 <_fflush_r>
 80146cc:	bd10      	pop	{r4, pc}
 80146ce:	bf00      	nop
 80146d0:	200120e8 	.word	0x200120e8
 80146d4:	20012150 	.word	0x20012150
 80146d8:	200121b8 	.word	0x200121b8

080146dc <global_stdio_init.part.0>:
 80146dc:	b510      	push	{r4, lr}
 80146de:	4b0b      	ldr	r3, [pc, #44]	; (801470c <global_stdio_init.part.0+0x30>)
 80146e0:	4c0b      	ldr	r4, [pc, #44]	; (8014710 <global_stdio_init.part.0+0x34>)
 80146e2:	4a0c      	ldr	r2, [pc, #48]	; (8014714 <global_stdio_init.part.0+0x38>)
 80146e4:	601a      	str	r2, [r3, #0]
 80146e6:	4620      	mov	r0, r4
 80146e8:	2200      	movs	r2, #0
 80146ea:	2104      	movs	r1, #4
 80146ec:	f7ff ffa6 	bl	801463c <std>
 80146f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80146f4:	2201      	movs	r2, #1
 80146f6:	2109      	movs	r1, #9
 80146f8:	f7ff ffa0 	bl	801463c <std>
 80146fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014700:	2202      	movs	r2, #2
 8014702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014706:	2112      	movs	r1, #18
 8014708:	f7ff bf98 	b.w	801463c <std>
 801470c:	20012220 	.word	0x20012220
 8014710:	200120e8 	.word	0x200120e8
 8014714:	08014685 	.word	0x08014685

08014718 <__sfp_lock_acquire>:
 8014718:	4801      	ldr	r0, [pc, #4]	; (8014720 <__sfp_lock_acquire+0x8>)
 801471a:	f000 b975 	b.w	8014a08 <__retarget_lock_acquire_recursive>
 801471e:	bf00      	nop
 8014720:	20012229 	.word	0x20012229

08014724 <__sfp_lock_release>:
 8014724:	4801      	ldr	r0, [pc, #4]	; (801472c <__sfp_lock_release+0x8>)
 8014726:	f000 b970 	b.w	8014a0a <__retarget_lock_release_recursive>
 801472a:	bf00      	nop
 801472c:	20012229 	.word	0x20012229

08014730 <__sinit>:
 8014730:	b510      	push	{r4, lr}
 8014732:	4604      	mov	r4, r0
 8014734:	f7ff fff0 	bl	8014718 <__sfp_lock_acquire>
 8014738:	6a23      	ldr	r3, [r4, #32]
 801473a:	b11b      	cbz	r3, 8014744 <__sinit+0x14>
 801473c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014740:	f7ff bff0 	b.w	8014724 <__sfp_lock_release>
 8014744:	4b04      	ldr	r3, [pc, #16]	; (8014758 <__sinit+0x28>)
 8014746:	6223      	str	r3, [r4, #32]
 8014748:	4b04      	ldr	r3, [pc, #16]	; (801475c <__sinit+0x2c>)
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d1f5      	bne.n	801473c <__sinit+0xc>
 8014750:	f7ff ffc4 	bl	80146dc <global_stdio_init.part.0>
 8014754:	e7f2      	b.n	801473c <__sinit+0xc>
 8014756:	bf00      	nop
 8014758:	0801469d 	.word	0x0801469d
 801475c:	20012220 	.word	0x20012220

08014760 <_fwalk_sglue>:
 8014760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014764:	4607      	mov	r7, r0
 8014766:	4688      	mov	r8, r1
 8014768:	4614      	mov	r4, r2
 801476a:	2600      	movs	r6, #0
 801476c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014770:	f1b9 0901 	subs.w	r9, r9, #1
 8014774:	d505      	bpl.n	8014782 <_fwalk_sglue+0x22>
 8014776:	6824      	ldr	r4, [r4, #0]
 8014778:	2c00      	cmp	r4, #0
 801477a:	d1f7      	bne.n	801476c <_fwalk_sglue+0xc>
 801477c:	4630      	mov	r0, r6
 801477e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014782:	89ab      	ldrh	r3, [r5, #12]
 8014784:	2b01      	cmp	r3, #1
 8014786:	d907      	bls.n	8014798 <_fwalk_sglue+0x38>
 8014788:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801478c:	3301      	adds	r3, #1
 801478e:	d003      	beq.n	8014798 <_fwalk_sglue+0x38>
 8014790:	4629      	mov	r1, r5
 8014792:	4638      	mov	r0, r7
 8014794:	47c0      	blx	r8
 8014796:	4306      	orrs	r6, r0
 8014798:	3568      	adds	r5, #104	; 0x68
 801479a:	e7e9      	b.n	8014770 <_fwalk_sglue+0x10>

0801479c <siprintf>:
 801479c:	b40e      	push	{r1, r2, r3}
 801479e:	b500      	push	{lr}
 80147a0:	b09c      	sub	sp, #112	; 0x70
 80147a2:	ab1d      	add	r3, sp, #116	; 0x74
 80147a4:	9002      	str	r0, [sp, #8]
 80147a6:	9006      	str	r0, [sp, #24]
 80147a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80147ac:	4809      	ldr	r0, [pc, #36]	; (80147d4 <siprintf+0x38>)
 80147ae:	9107      	str	r1, [sp, #28]
 80147b0:	9104      	str	r1, [sp, #16]
 80147b2:	4909      	ldr	r1, [pc, #36]	; (80147d8 <siprintf+0x3c>)
 80147b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80147b8:	9105      	str	r1, [sp, #20]
 80147ba:	6800      	ldr	r0, [r0, #0]
 80147bc:	9301      	str	r3, [sp, #4]
 80147be:	a902      	add	r1, sp, #8
 80147c0:	f002 fc52 	bl	8017068 <_svfiprintf_r>
 80147c4:	9b02      	ldr	r3, [sp, #8]
 80147c6:	2200      	movs	r2, #0
 80147c8:	701a      	strb	r2, [r3, #0]
 80147ca:	b01c      	add	sp, #112	; 0x70
 80147cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80147d0:	b003      	add	sp, #12
 80147d2:	4770      	bx	lr
 80147d4:	20000088 	.word	0x20000088
 80147d8:	ffff0208 	.word	0xffff0208

080147dc <__sread>:
 80147dc:	b510      	push	{r4, lr}
 80147de:	460c      	mov	r4, r1
 80147e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147e4:	f000 f8c2 	bl	801496c <_read_r>
 80147e8:	2800      	cmp	r0, #0
 80147ea:	bfab      	itete	ge
 80147ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80147ee:	89a3      	ldrhlt	r3, [r4, #12]
 80147f0:	181b      	addge	r3, r3, r0
 80147f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80147f6:	bfac      	ite	ge
 80147f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80147fa:	81a3      	strhlt	r3, [r4, #12]
 80147fc:	bd10      	pop	{r4, pc}

080147fe <__swrite>:
 80147fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014802:	461f      	mov	r7, r3
 8014804:	898b      	ldrh	r3, [r1, #12]
 8014806:	05db      	lsls	r3, r3, #23
 8014808:	4605      	mov	r5, r0
 801480a:	460c      	mov	r4, r1
 801480c:	4616      	mov	r6, r2
 801480e:	d505      	bpl.n	801481c <__swrite+0x1e>
 8014810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014814:	2302      	movs	r3, #2
 8014816:	2200      	movs	r2, #0
 8014818:	f000 f896 	bl	8014948 <_lseek_r>
 801481c:	89a3      	ldrh	r3, [r4, #12]
 801481e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014826:	81a3      	strh	r3, [r4, #12]
 8014828:	4632      	mov	r2, r6
 801482a:	463b      	mov	r3, r7
 801482c:	4628      	mov	r0, r5
 801482e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014832:	f000 b8ad 	b.w	8014990 <_write_r>

08014836 <__sseek>:
 8014836:	b510      	push	{r4, lr}
 8014838:	460c      	mov	r4, r1
 801483a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801483e:	f000 f883 	bl	8014948 <_lseek_r>
 8014842:	1c43      	adds	r3, r0, #1
 8014844:	89a3      	ldrh	r3, [r4, #12]
 8014846:	bf15      	itete	ne
 8014848:	6560      	strne	r0, [r4, #84]	; 0x54
 801484a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801484e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014852:	81a3      	strheq	r3, [r4, #12]
 8014854:	bf18      	it	ne
 8014856:	81a3      	strhne	r3, [r4, #12]
 8014858:	bd10      	pop	{r4, pc}

0801485a <__sclose>:
 801485a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801485e:	f000 b80d 	b.w	801487c <_close_r>

08014862 <memset>:
 8014862:	4402      	add	r2, r0
 8014864:	4603      	mov	r3, r0
 8014866:	4293      	cmp	r3, r2
 8014868:	d100      	bne.n	801486c <memset+0xa>
 801486a:	4770      	bx	lr
 801486c:	f803 1b01 	strb.w	r1, [r3], #1
 8014870:	e7f9      	b.n	8014866 <memset+0x4>
	...

08014874 <_localeconv_r>:
 8014874:	4800      	ldr	r0, [pc, #0]	; (8014878 <_localeconv_r+0x4>)
 8014876:	4770      	bx	lr
 8014878:	2000017c 	.word	0x2000017c

0801487c <_close_r>:
 801487c:	b538      	push	{r3, r4, r5, lr}
 801487e:	4d06      	ldr	r5, [pc, #24]	; (8014898 <_close_r+0x1c>)
 8014880:	2300      	movs	r3, #0
 8014882:	4604      	mov	r4, r0
 8014884:	4608      	mov	r0, r1
 8014886:	602b      	str	r3, [r5, #0]
 8014888:	f7f1 fe11 	bl	80064ae <_close>
 801488c:	1c43      	adds	r3, r0, #1
 801488e:	d102      	bne.n	8014896 <_close_r+0x1a>
 8014890:	682b      	ldr	r3, [r5, #0]
 8014892:	b103      	cbz	r3, 8014896 <_close_r+0x1a>
 8014894:	6023      	str	r3, [r4, #0]
 8014896:	bd38      	pop	{r3, r4, r5, pc}
 8014898:	20012224 	.word	0x20012224

0801489c <_reclaim_reent>:
 801489c:	4b29      	ldr	r3, [pc, #164]	; (8014944 <_reclaim_reent+0xa8>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	4283      	cmp	r3, r0
 80148a2:	b570      	push	{r4, r5, r6, lr}
 80148a4:	4604      	mov	r4, r0
 80148a6:	d04b      	beq.n	8014940 <_reclaim_reent+0xa4>
 80148a8:	69c3      	ldr	r3, [r0, #28]
 80148aa:	b143      	cbz	r3, 80148be <_reclaim_reent+0x22>
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d144      	bne.n	801493c <_reclaim_reent+0xa0>
 80148b2:	69e3      	ldr	r3, [r4, #28]
 80148b4:	6819      	ldr	r1, [r3, #0]
 80148b6:	b111      	cbz	r1, 80148be <_reclaim_reent+0x22>
 80148b8:	4620      	mov	r0, r4
 80148ba:	f000 ff37 	bl	801572c <_free_r>
 80148be:	6961      	ldr	r1, [r4, #20]
 80148c0:	b111      	cbz	r1, 80148c8 <_reclaim_reent+0x2c>
 80148c2:	4620      	mov	r0, r4
 80148c4:	f000 ff32 	bl	801572c <_free_r>
 80148c8:	69e1      	ldr	r1, [r4, #28]
 80148ca:	b111      	cbz	r1, 80148d2 <_reclaim_reent+0x36>
 80148cc:	4620      	mov	r0, r4
 80148ce:	f000 ff2d 	bl	801572c <_free_r>
 80148d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80148d4:	b111      	cbz	r1, 80148dc <_reclaim_reent+0x40>
 80148d6:	4620      	mov	r0, r4
 80148d8:	f000 ff28 	bl	801572c <_free_r>
 80148dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80148de:	b111      	cbz	r1, 80148e6 <_reclaim_reent+0x4a>
 80148e0:	4620      	mov	r0, r4
 80148e2:	f000 ff23 	bl	801572c <_free_r>
 80148e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80148e8:	b111      	cbz	r1, 80148f0 <_reclaim_reent+0x54>
 80148ea:	4620      	mov	r0, r4
 80148ec:	f000 ff1e 	bl	801572c <_free_r>
 80148f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80148f2:	b111      	cbz	r1, 80148fa <_reclaim_reent+0x5e>
 80148f4:	4620      	mov	r0, r4
 80148f6:	f000 ff19 	bl	801572c <_free_r>
 80148fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80148fc:	b111      	cbz	r1, 8014904 <_reclaim_reent+0x68>
 80148fe:	4620      	mov	r0, r4
 8014900:	f000 ff14 	bl	801572c <_free_r>
 8014904:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8014906:	b111      	cbz	r1, 801490e <_reclaim_reent+0x72>
 8014908:	4620      	mov	r0, r4
 801490a:	f000 ff0f 	bl	801572c <_free_r>
 801490e:	6a23      	ldr	r3, [r4, #32]
 8014910:	b1b3      	cbz	r3, 8014940 <_reclaim_reent+0xa4>
 8014912:	4620      	mov	r0, r4
 8014914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014918:	4718      	bx	r3
 801491a:	5949      	ldr	r1, [r1, r5]
 801491c:	b941      	cbnz	r1, 8014930 <_reclaim_reent+0x94>
 801491e:	3504      	adds	r5, #4
 8014920:	69e3      	ldr	r3, [r4, #28]
 8014922:	2d80      	cmp	r5, #128	; 0x80
 8014924:	68d9      	ldr	r1, [r3, #12]
 8014926:	d1f8      	bne.n	801491a <_reclaim_reent+0x7e>
 8014928:	4620      	mov	r0, r4
 801492a:	f000 feff 	bl	801572c <_free_r>
 801492e:	e7c0      	b.n	80148b2 <_reclaim_reent+0x16>
 8014930:	680e      	ldr	r6, [r1, #0]
 8014932:	4620      	mov	r0, r4
 8014934:	f000 fefa 	bl	801572c <_free_r>
 8014938:	4631      	mov	r1, r6
 801493a:	e7ef      	b.n	801491c <_reclaim_reent+0x80>
 801493c:	2500      	movs	r5, #0
 801493e:	e7ef      	b.n	8014920 <_reclaim_reent+0x84>
 8014940:	bd70      	pop	{r4, r5, r6, pc}
 8014942:	bf00      	nop
 8014944:	20000088 	.word	0x20000088

08014948 <_lseek_r>:
 8014948:	b538      	push	{r3, r4, r5, lr}
 801494a:	4d07      	ldr	r5, [pc, #28]	; (8014968 <_lseek_r+0x20>)
 801494c:	4604      	mov	r4, r0
 801494e:	4608      	mov	r0, r1
 8014950:	4611      	mov	r1, r2
 8014952:	2200      	movs	r2, #0
 8014954:	602a      	str	r2, [r5, #0]
 8014956:	461a      	mov	r2, r3
 8014958:	f7f1 fdd0 	bl	80064fc <_lseek>
 801495c:	1c43      	adds	r3, r0, #1
 801495e:	d102      	bne.n	8014966 <_lseek_r+0x1e>
 8014960:	682b      	ldr	r3, [r5, #0]
 8014962:	b103      	cbz	r3, 8014966 <_lseek_r+0x1e>
 8014964:	6023      	str	r3, [r4, #0]
 8014966:	bd38      	pop	{r3, r4, r5, pc}
 8014968:	20012224 	.word	0x20012224

0801496c <_read_r>:
 801496c:	b538      	push	{r3, r4, r5, lr}
 801496e:	4d07      	ldr	r5, [pc, #28]	; (801498c <_read_r+0x20>)
 8014970:	4604      	mov	r4, r0
 8014972:	4608      	mov	r0, r1
 8014974:	4611      	mov	r1, r2
 8014976:	2200      	movs	r2, #0
 8014978:	602a      	str	r2, [r5, #0]
 801497a:	461a      	mov	r2, r3
 801497c:	f7f1 fd5e 	bl	800643c <_read>
 8014980:	1c43      	adds	r3, r0, #1
 8014982:	d102      	bne.n	801498a <_read_r+0x1e>
 8014984:	682b      	ldr	r3, [r5, #0]
 8014986:	b103      	cbz	r3, 801498a <_read_r+0x1e>
 8014988:	6023      	str	r3, [r4, #0]
 801498a:	bd38      	pop	{r3, r4, r5, pc}
 801498c:	20012224 	.word	0x20012224

08014990 <_write_r>:
 8014990:	b538      	push	{r3, r4, r5, lr}
 8014992:	4d07      	ldr	r5, [pc, #28]	; (80149b0 <_write_r+0x20>)
 8014994:	4604      	mov	r4, r0
 8014996:	4608      	mov	r0, r1
 8014998:	4611      	mov	r1, r2
 801499a:	2200      	movs	r2, #0
 801499c:	602a      	str	r2, [r5, #0]
 801499e:	461a      	mov	r2, r3
 80149a0:	f7f1 fd69 	bl	8006476 <_write>
 80149a4:	1c43      	adds	r3, r0, #1
 80149a6:	d102      	bne.n	80149ae <_write_r+0x1e>
 80149a8:	682b      	ldr	r3, [r5, #0]
 80149aa:	b103      	cbz	r3, 80149ae <_write_r+0x1e>
 80149ac:	6023      	str	r3, [r4, #0]
 80149ae:	bd38      	pop	{r3, r4, r5, pc}
 80149b0:	20012224 	.word	0x20012224

080149b4 <__errno>:
 80149b4:	4b01      	ldr	r3, [pc, #4]	; (80149bc <__errno+0x8>)
 80149b6:	6818      	ldr	r0, [r3, #0]
 80149b8:	4770      	bx	lr
 80149ba:	bf00      	nop
 80149bc:	20000088 	.word	0x20000088

080149c0 <__libc_init_array>:
 80149c0:	b570      	push	{r4, r5, r6, lr}
 80149c2:	4d0d      	ldr	r5, [pc, #52]	; (80149f8 <__libc_init_array+0x38>)
 80149c4:	4c0d      	ldr	r4, [pc, #52]	; (80149fc <__libc_init_array+0x3c>)
 80149c6:	1b64      	subs	r4, r4, r5
 80149c8:	10a4      	asrs	r4, r4, #2
 80149ca:	2600      	movs	r6, #0
 80149cc:	42a6      	cmp	r6, r4
 80149ce:	d109      	bne.n	80149e4 <__libc_init_array+0x24>
 80149d0:	4d0b      	ldr	r5, [pc, #44]	; (8014a00 <__libc_init_array+0x40>)
 80149d2:	4c0c      	ldr	r4, [pc, #48]	; (8014a04 <__libc_init_array+0x44>)
 80149d4:	f003 fbd4 	bl	8018180 <_init>
 80149d8:	1b64      	subs	r4, r4, r5
 80149da:	10a4      	asrs	r4, r4, #2
 80149dc:	2600      	movs	r6, #0
 80149de:	42a6      	cmp	r6, r4
 80149e0:	d105      	bne.n	80149ee <__libc_init_array+0x2e>
 80149e2:	bd70      	pop	{r4, r5, r6, pc}
 80149e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80149e8:	4798      	blx	r3
 80149ea:	3601      	adds	r6, #1
 80149ec:	e7ee      	b.n	80149cc <__libc_init_array+0xc>
 80149ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80149f2:	4798      	blx	r3
 80149f4:	3601      	adds	r6, #1
 80149f6:	e7f2      	b.n	80149de <__libc_init_array+0x1e>
 80149f8:	08019218 	.word	0x08019218
 80149fc:	08019218 	.word	0x08019218
 8014a00:	08019218 	.word	0x08019218
 8014a04:	0801921c 	.word	0x0801921c

08014a08 <__retarget_lock_acquire_recursive>:
 8014a08:	4770      	bx	lr

08014a0a <__retarget_lock_release_recursive>:
 8014a0a:	4770      	bx	lr

08014a0c <memcpy>:
 8014a0c:	440a      	add	r2, r1
 8014a0e:	4291      	cmp	r1, r2
 8014a10:	f100 33ff 	add.w	r3, r0, #4294967295
 8014a14:	d100      	bne.n	8014a18 <memcpy+0xc>
 8014a16:	4770      	bx	lr
 8014a18:	b510      	push	{r4, lr}
 8014a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014a22:	4291      	cmp	r1, r2
 8014a24:	d1f9      	bne.n	8014a1a <memcpy+0xe>
 8014a26:	bd10      	pop	{r4, pc}

08014a28 <nanf>:
 8014a28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014a30 <nanf+0x8>
 8014a2c:	4770      	bx	lr
 8014a2e:	bf00      	nop
 8014a30:	7fc00000 	.word	0x7fc00000

08014a34 <quorem>:
 8014a34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a38:	6903      	ldr	r3, [r0, #16]
 8014a3a:	690c      	ldr	r4, [r1, #16]
 8014a3c:	42a3      	cmp	r3, r4
 8014a3e:	4607      	mov	r7, r0
 8014a40:	db7e      	blt.n	8014b40 <quorem+0x10c>
 8014a42:	3c01      	subs	r4, #1
 8014a44:	f101 0814 	add.w	r8, r1, #20
 8014a48:	f100 0514 	add.w	r5, r0, #20
 8014a4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014a50:	9301      	str	r3, [sp, #4]
 8014a52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014a56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014a5a:	3301      	adds	r3, #1
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014a62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014a66:	fbb2 f6f3 	udiv	r6, r2, r3
 8014a6a:	d331      	bcc.n	8014ad0 <quorem+0x9c>
 8014a6c:	f04f 0e00 	mov.w	lr, #0
 8014a70:	4640      	mov	r0, r8
 8014a72:	46ac      	mov	ip, r5
 8014a74:	46f2      	mov	sl, lr
 8014a76:	f850 2b04 	ldr.w	r2, [r0], #4
 8014a7a:	b293      	uxth	r3, r2
 8014a7c:	fb06 e303 	mla	r3, r6, r3, lr
 8014a80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014a84:	0c1a      	lsrs	r2, r3, #16
 8014a86:	b29b      	uxth	r3, r3
 8014a88:	ebaa 0303 	sub.w	r3, sl, r3
 8014a8c:	f8dc a000 	ldr.w	sl, [ip]
 8014a90:	fa13 f38a 	uxtah	r3, r3, sl
 8014a94:	fb06 220e 	mla	r2, r6, lr, r2
 8014a98:	9300      	str	r3, [sp, #0]
 8014a9a:	9b00      	ldr	r3, [sp, #0]
 8014a9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014aa0:	b292      	uxth	r2, r2
 8014aa2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014aa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014aaa:	f8bd 3000 	ldrh.w	r3, [sp]
 8014aae:	4581      	cmp	r9, r0
 8014ab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ab4:	f84c 3b04 	str.w	r3, [ip], #4
 8014ab8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014abc:	d2db      	bcs.n	8014a76 <quorem+0x42>
 8014abe:	f855 300b 	ldr.w	r3, [r5, fp]
 8014ac2:	b92b      	cbnz	r3, 8014ad0 <quorem+0x9c>
 8014ac4:	9b01      	ldr	r3, [sp, #4]
 8014ac6:	3b04      	subs	r3, #4
 8014ac8:	429d      	cmp	r5, r3
 8014aca:	461a      	mov	r2, r3
 8014acc:	d32c      	bcc.n	8014b28 <quorem+0xf4>
 8014ace:	613c      	str	r4, [r7, #16]
 8014ad0:	4638      	mov	r0, r7
 8014ad2:	f001 f9f1 	bl	8015eb8 <__mcmp>
 8014ad6:	2800      	cmp	r0, #0
 8014ad8:	db22      	blt.n	8014b20 <quorem+0xec>
 8014ada:	3601      	adds	r6, #1
 8014adc:	4629      	mov	r1, r5
 8014ade:	2000      	movs	r0, #0
 8014ae0:	f858 2b04 	ldr.w	r2, [r8], #4
 8014ae4:	f8d1 c000 	ldr.w	ip, [r1]
 8014ae8:	b293      	uxth	r3, r2
 8014aea:	1ac3      	subs	r3, r0, r3
 8014aec:	0c12      	lsrs	r2, r2, #16
 8014aee:	fa13 f38c 	uxtah	r3, r3, ip
 8014af2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014af6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014afa:	b29b      	uxth	r3, r3
 8014afc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b00:	45c1      	cmp	r9, r8
 8014b02:	f841 3b04 	str.w	r3, [r1], #4
 8014b06:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014b0a:	d2e9      	bcs.n	8014ae0 <quorem+0xac>
 8014b0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014b10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b14:	b922      	cbnz	r2, 8014b20 <quorem+0xec>
 8014b16:	3b04      	subs	r3, #4
 8014b18:	429d      	cmp	r5, r3
 8014b1a:	461a      	mov	r2, r3
 8014b1c:	d30a      	bcc.n	8014b34 <quorem+0x100>
 8014b1e:	613c      	str	r4, [r7, #16]
 8014b20:	4630      	mov	r0, r6
 8014b22:	b003      	add	sp, #12
 8014b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b28:	6812      	ldr	r2, [r2, #0]
 8014b2a:	3b04      	subs	r3, #4
 8014b2c:	2a00      	cmp	r2, #0
 8014b2e:	d1ce      	bne.n	8014ace <quorem+0x9a>
 8014b30:	3c01      	subs	r4, #1
 8014b32:	e7c9      	b.n	8014ac8 <quorem+0x94>
 8014b34:	6812      	ldr	r2, [r2, #0]
 8014b36:	3b04      	subs	r3, #4
 8014b38:	2a00      	cmp	r2, #0
 8014b3a:	d1f0      	bne.n	8014b1e <quorem+0xea>
 8014b3c:	3c01      	subs	r4, #1
 8014b3e:	e7eb      	b.n	8014b18 <quorem+0xe4>
 8014b40:	2000      	movs	r0, #0
 8014b42:	e7ee      	b.n	8014b22 <quorem+0xee>
 8014b44:	0000      	movs	r0, r0
	...

08014b48 <_dtoa_r>:
 8014b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b4c:	ed2d 8b04 	vpush	{d8-d9}
 8014b50:	69c5      	ldr	r5, [r0, #28]
 8014b52:	b093      	sub	sp, #76	; 0x4c
 8014b54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014b58:	ec57 6b10 	vmov	r6, r7, d0
 8014b5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014b60:	9107      	str	r1, [sp, #28]
 8014b62:	4604      	mov	r4, r0
 8014b64:	920a      	str	r2, [sp, #40]	; 0x28
 8014b66:	930d      	str	r3, [sp, #52]	; 0x34
 8014b68:	b975      	cbnz	r5, 8014b88 <_dtoa_r+0x40>
 8014b6a:	2010      	movs	r0, #16
 8014b6c:	f000 fe2a 	bl	80157c4 <malloc>
 8014b70:	4602      	mov	r2, r0
 8014b72:	61e0      	str	r0, [r4, #28]
 8014b74:	b920      	cbnz	r0, 8014b80 <_dtoa_r+0x38>
 8014b76:	4bae      	ldr	r3, [pc, #696]	; (8014e30 <_dtoa_r+0x2e8>)
 8014b78:	21ef      	movs	r1, #239	; 0xef
 8014b7a:	48ae      	ldr	r0, [pc, #696]	; (8014e34 <_dtoa_r+0x2ec>)
 8014b7c:	f002 fc64 	bl	8017448 <__assert_func>
 8014b80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014b84:	6005      	str	r5, [r0, #0]
 8014b86:	60c5      	str	r5, [r0, #12]
 8014b88:	69e3      	ldr	r3, [r4, #28]
 8014b8a:	6819      	ldr	r1, [r3, #0]
 8014b8c:	b151      	cbz	r1, 8014ba4 <_dtoa_r+0x5c>
 8014b8e:	685a      	ldr	r2, [r3, #4]
 8014b90:	604a      	str	r2, [r1, #4]
 8014b92:	2301      	movs	r3, #1
 8014b94:	4093      	lsls	r3, r2
 8014b96:	608b      	str	r3, [r1, #8]
 8014b98:	4620      	mov	r0, r4
 8014b9a:	f000 ff07 	bl	80159ac <_Bfree>
 8014b9e:	69e3      	ldr	r3, [r4, #28]
 8014ba0:	2200      	movs	r2, #0
 8014ba2:	601a      	str	r2, [r3, #0]
 8014ba4:	1e3b      	subs	r3, r7, #0
 8014ba6:	bfbb      	ittet	lt
 8014ba8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014bac:	9303      	strlt	r3, [sp, #12]
 8014bae:	2300      	movge	r3, #0
 8014bb0:	2201      	movlt	r2, #1
 8014bb2:	bfac      	ite	ge
 8014bb4:	f8c8 3000 	strge.w	r3, [r8]
 8014bb8:	f8c8 2000 	strlt.w	r2, [r8]
 8014bbc:	4b9e      	ldr	r3, [pc, #632]	; (8014e38 <_dtoa_r+0x2f0>)
 8014bbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8014bc2:	ea33 0308 	bics.w	r3, r3, r8
 8014bc6:	d11b      	bne.n	8014c00 <_dtoa_r+0xb8>
 8014bc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014bca:	f242 730f 	movw	r3, #9999	; 0x270f
 8014bce:	6013      	str	r3, [r2, #0]
 8014bd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8014bd4:	4333      	orrs	r3, r6
 8014bd6:	f000 8593 	beq.w	8015700 <_dtoa_r+0xbb8>
 8014bda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bdc:	b963      	cbnz	r3, 8014bf8 <_dtoa_r+0xb0>
 8014bde:	4b97      	ldr	r3, [pc, #604]	; (8014e3c <_dtoa_r+0x2f4>)
 8014be0:	e027      	b.n	8014c32 <_dtoa_r+0xea>
 8014be2:	4b97      	ldr	r3, [pc, #604]	; (8014e40 <_dtoa_r+0x2f8>)
 8014be4:	9300      	str	r3, [sp, #0]
 8014be6:	3308      	adds	r3, #8
 8014be8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014bea:	6013      	str	r3, [r2, #0]
 8014bec:	9800      	ldr	r0, [sp, #0]
 8014bee:	b013      	add	sp, #76	; 0x4c
 8014bf0:	ecbd 8b04 	vpop	{d8-d9}
 8014bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf8:	4b90      	ldr	r3, [pc, #576]	; (8014e3c <_dtoa_r+0x2f4>)
 8014bfa:	9300      	str	r3, [sp, #0]
 8014bfc:	3303      	adds	r3, #3
 8014bfe:	e7f3      	b.n	8014be8 <_dtoa_r+0xa0>
 8014c00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c04:	2200      	movs	r2, #0
 8014c06:	ec51 0b17 	vmov	r0, r1, d7
 8014c0a:	eeb0 8a47 	vmov.f32	s16, s14
 8014c0e:	eef0 8a67 	vmov.f32	s17, s15
 8014c12:	2300      	movs	r3, #0
 8014c14:	f7eb ff60 	bl	8000ad8 <__aeabi_dcmpeq>
 8014c18:	4681      	mov	r9, r0
 8014c1a:	b160      	cbz	r0, 8014c36 <_dtoa_r+0xee>
 8014c1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014c1e:	2301      	movs	r3, #1
 8014c20:	6013      	str	r3, [r2, #0]
 8014c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	f000 8568 	beq.w	80156fa <_dtoa_r+0xbb2>
 8014c2a:	4b86      	ldr	r3, [pc, #536]	; (8014e44 <_dtoa_r+0x2fc>)
 8014c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014c2e:	6013      	str	r3, [r2, #0]
 8014c30:	3b01      	subs	r3, #1
 8014c32:	9300      	str	r3, [sp, #0]
 8014c34:	e7da      	b.n	8014bec <_dtoa_r+0xa4>
 8014c36:	aa10      	add	r2, sp, #64	; 0x40
 8014c38:	a911      	add	r1, sp, #68	; 0x44
 8014c3a:	4620      	mov	r0, r4
 8014c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8014c40:	eef0 0a68 	vmov.f32	s1, s17
 8014c44:	f001 fa4e 	bl	80160e4 <__d2b>
 8014c48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014c4c:	4682      	mov	sl, r0
 8014c4e:	2d00      	cmp	r5, #0
 8014c50:	d07f      	beq.n	8014d52 <_dtoa_r+0x20a>
 8014c52:	ee18 3a90 	vmov	r3, s17
 8014c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014c5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8014c5e:	ec51 0b18 	vmov	r0, r1, d8
 8014c62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014c66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014c6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8014c6e:	4619      	mov	r1, r3
 8014c70:	2200      	movs	r2, #0
 8014c72:	4b75      	ldr	r3, [pc, #468]	; (8014e48 <_dtoa_r+0x300>)
 8014c74:	f7eb fb10 	bl	8000298 <__aeabi_dsub>
 8014c78:	a367      	add	r3, pc, #412	; (adr r3, 8014e18 <_dtoa_r+0x2d0>)
 8014c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c7e:	f7eb fcc3 	bl	8000608 <__aeabi_dmul>
 8014c82:	a367      	add	r3, pc, #412	; (adr r3, 8014e20 <_dtoa_r+0x2d8>)
 8014c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c88:	f7eb fb08 	bl	800029c <__adddf3>
 8014c8c:	4606      	mov	r6, r0
 8014c8e:	4628      	mov	r0, r5
 8014c90:	460f      	mov	r7, r1
 8014c92:	f7eb fc4f 	bl	8000534 <__aeabi_i2d>
 8014c96:	a364      	add	r3, pc, #400	; (adr r3, 8014e28 <_dtoa_r+0x2e0>)
 8014c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c9c:	f7eb fcb4 	bl	8000608 <__aeabi_dmul>
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	4639      	mov	r1, r7
 8014ca8:	f7eb faf8 	bl	800029c <__adddf3>
 8014cac:	4606      	mov	r6, r0
 8014cae:	460f      	mov	r7, r1
 8014cb0:	f7eb ff5a 	bl	8000b68 <__aeabi_d2iz>
 8014cb4:	2200      	movs	r2, #0
 8014cb6:	4683      	mov	fp, r0
 8014cb8:	2300      	movs	r3, #0
 8014cba:	4630      	mov	r0, r6
 8014cbc:	4639      	mov	r1, r7
 8014cbe:	f7eb ff15 	bl	8000aec <__aeabi_dcmplt>
 8014cc2:	b148      	cbz	r0, 8014cd8 <_dtoa_r+0x190>
 8014cc4:	4658      	mov	r0, fp
 8014cc6:	f7eb fc35 	bl	8000534 <__aeabi_i2d>
 8014cca:	4632      	mov	r2, r6
 8014ccc:	463b      	mov	r3, r7
 8014cce:	f7eb ff03 	bl	8000ad8 <__aeabi_dcmpeq>
 8014cd2:	b908      	cbnz	r0, 8014cd8 <_dtoa_r+0x190>
 8014cd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014cd8:	f1bb 0f16 	cmp.w	fp, #22
 8014cdc:	d857      	bhi.n	8014d8e <_dtoa_r+0x246>
 8014cde:	4b5b      	ldr	r3, [pc, #364]	; (8014e4c <_dtoa_r+0x304>)
 8014ce0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce8:	ec51 0b18 	vmov	r0, r1, d8
 8014cec:	f7eb fefe 	bl	8000aec <__aeabi_dcmplt>
 8014cf0:	2800      	cmp	r0, #0
 8014cf2:	d04e      	beq.n	8014d92 <_dtoa_r+0x24a>
 8014cf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8014cfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014cfe:	1b5b      	subs	r3, r3, r5
 8014d00:	1e5a      	subs	r2, r3, #1
 8014d02:	bf45      	ittet	mi
 8014d04:	f1c3 0301 	rsbmi	r3, r3, #1
 8014d08:	9305      	strmi	r3, [sp, #20]
 8014d0a:	2300      	movpl	r3, #0
 8014d0c:	2300      	movmi	r3, #0
 8014d0e:	9206      	str	r2, [sp, #24]
 8014d10:	bf54      	ite	pl
 8014d12:	9305      	strpl	r3, [sp, #20]
 8014d14:	9306      	strmi	r3, [sp, #24]
 8014d16:	f1bb 0f00 	cmp.w	fp, #0
 8014d1a:	db3c      	blt.n	8014d96 <_dtoa_r+0x24e>
 8014d1c:	9b06      	ldr	r3, [sp, #24]
 8014d1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8014d22:	445b      	add	r3, fp
 8014d24:	9306      	str	r3, [sp, #24]
 8014d26:	2300      	movs	r3, #0
 8014d28:	9308      	str	r3, [sp, #32]
 8014d2a:	9b07      	ldr	r3, [sp, #28]
 8014d2c:	2b09      	cmp	r3, #9
 8014d2e:	d868      	bhi.n	8014e02 <_dtoa_r+0x2ba>
 8014d30:	2b05      	cmp	r3, #5
 8014d32:	bfc4      	itt	gt
 8014d34:	3b04      	subgt	r3, #4
 8014d36:	9307      	strgt	r3, [sp, #28]
 8014d38:	9b07      	ldr	r3, [sp, #28]
 8014d3a:	f1a3 0302 	sub.w	r3, r3, #2
 8014d3e:	bfcc      	ite	gt
 8014d40:	2500      	movgt	r5, #0
 8014d42:	2501      	movle	r5, #1
 8014d44:	2b03      	cmp	r3, #3
 8014d46:	f200 8085 	bhi.w	8014e54 <_dtoa_r+0x30c>
 8014d4a:	e8df f003 	tbb	[pc, r3]
 8014d4e:	3b2e      	.short	0x3b2e
 8014d50:	5839      	.short	0x5839
 8014d52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014d56:	441d      	add	r5, r3
 8014d58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014d5c:	2b20      	cmp	r3, #32
 8014d5e:	bfc1      	itttt	gt
 8014d60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014d64:	fa08 f803 	lslgt.w	r8, r8, r3
 8014d68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8014d6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8014d70:	bfd6      	itet	le
 8014d72:	f1c3 0320 	rsble	r3, r3, #32
 8014d76:	ea48 0003 	orrgt.w	r0, r8, r3
 8014d7a:	fa06 f003 	lslle.w	r0, r6, r3
 8014d7e:	f7eb fbc9 	bl	8000514 <__aeabi_ui2d>
 8014d82:	2201      	movs	r2, #1
 8014d84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014d88:	3d01      	subs	r5, #1
 8014d8a:	920e      	str	r2, [sp, #56]	; 0x38
 8014d8c:	e76f      	b.n	8014c6e <_dtoa_r+0x126>
 8014d8e:	2301      	movs	r3, #1
 8014d90:	e7b3      	b.n	8014cfa <_dtoa_r+0x1b2>
 8014d92:	900c      	str	r0, [sp, #48]	; 0x30
 8014d94:	e7b2      	b.n	8014cfc <_dtoa_r+0x1b4>
 8014d96:	9b05      	ldr	r3, [sp, #20]
 8014d98:	eba3 030b 	sub.w	r3, r3, fp
 8014d9c:	9305      	str	r3, [sp, #20]
 8014d9e:	f1cb 0300 	rsb	r3, fp, #0
 8014da2:	9308      	str	r3, [sp, #32]
 8014da4:	2300      	movs	r3, #0
 8014da6:	930b      	str	r3, [sp, #44]	; 0x2c
 8014da8:	e7bf      	b.n	8014d2a <_dtoa_r+0x1e2>
 8014daa:	2300      	movs	r3, #0
 8014dac:	9309      	str	r3, [sp, #36]	; 0x24
 8014dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	dc52      	bgt.n	8014e5a <_dtoa_r+0x312>
 8014db4:	2301      	movs	r3, #1
 8014db6:	9301      	str	r3, [sp, #4]
 8014db8:	9304      	str	r3, [sp, #16]
 8014dba:	461a      	mov	r2, r3
 8014dbc:	920a      	str	r2, [sp, #40]	; 0x28
 8014dbe:	e00b      	b.n	8014dd8 <_dtoa_r+0x290>
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	e7f3      	b.n	8014dac <_dtoa_r+0x264>
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8014dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014dca:	445b      	add	r3, fp
 8014dcc:	9301      	str	r3, [sp, #4]
 8014dce:	3301      	adds	r3, #1
 8014dd0:	2b01      	cmp	r3, #1
 8014dd2:	9304      	str	r3, [sp, #16]
 8014dd4:	bfb8      	it	lt
 8014dd6:	2301      	movlt	r3, #1
 8014dd8:	69e0      	ldr	r0, [r4, #28]
 8014dda:	2100      	movs	r1, #0
 8014ddc:	2204      	movs	r2, #4
 8014dde:	f102 0614 	add.w	r6, r2, #20
 8014de2:	429e      	cmp	r6, r3
 8014de4:	d93d      	bls.n	8014e62 <_dtoa_r+0x31a>
 8014de6:	6041      	str	r1, [r0, #4]
 8014de8:	4620      	mov	r0, r4
 8014dea:	f000 fd9f 	bl	801592c <_Balloc>
 8014dee:	9000      	str	r0, [sp, #0]
 8014df0:	2800      	cmp	r0, #0
 8014df2:	d139      	bne.n	8014e68 <_dtoa_r+0x320>
 8014df4:	4b16      	ldr	r3, [pc, #88]	; (8014e50 <_dtoa_r+0x308>)
 8014df6:	4602      	mov	r2, r0
 8014df8:	f240 11af 	movw	r1, #431	; 0x1af
 8014dfc:	e6bd      	b.n	8014b7a <_dtoa_r+0x32>
 8014dfe:	2301      	movs	r3, #1
 8014e00:	e7e1      	b.n	8014dc6 <_dtoa_r+0x27e>
 8014e02:	2501      	movs	r5, #1
 8014e04:	2300      	movs	r3, #0
 8014e06:	9307      	str	r3, [sp, #28]
 8014e08:	9509      	str	r5, [sp, #36]	; 0x24
 8014e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e0e:	9301      	str	r3, [sp, #4]
 8014e10:	9304      	str	r3, [sp, #16]
 8014e12:	2200      	movs	r2, #0
 8014e14:	2312      	movs	r3, #18
 8014e16:	e7d1      	b.n	8014dbc <_dtoa_r+0x274>
 8014e18:	636f4361 	.word	0x636f4361
 8014e1c:	3fd287a7 	.word	0x3fd287a7
 8014e20:	8b60c8b3 	.word	0x8b60c8b3
 8014e24:	3fc68a28 	.word	0x3fc68a28
 8014e28:	509f79fb 	.word	0x509f79fb
 8014e2c:	3fd34413 	.word	0x3fd34413
 8014e30:	08018e2e 	.word	0x08018e2e
 8014e34:	08018e45 	.word	0x08018e45
 8014e38:	7ff00000 	.word	0x7ff00000
 8014e3c:	08018e2a 	.word	0x08018e2a
 8014e40:	08018e21 	.word	0x08018e21
 8014e44:	08018df9 	.word	0x08018df9
 8014e48:	3ff80000 	.word	0x3ff80000
 8014e4c:	08018f30 	.word	0x08018f30
 8014e50:	08018e9d 	.word	0x08018e9d
 8014e54:	2301      	movs	r3, #1
 8014e56:	9309      	str	r3, [sp, #36]	; 0x24
 8014e58:	e7d7      	b.n	8014e0a <_dtoa_r+0x2c2>
 8014e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e5c:	9301      	str	r3, [sp, #4]
 8014e5e:	9304      	str	r3, [sp, #16]
 8014e60:	e7ba      	b.n	8014dd8 <_dtoa_r+0x290>
 8014e62:	3101      	adds	r1, #1
 8014e64:	0052      	lsls	r2, r2, #1
 8014e66:	e7ba      	b.n	8014dde <_dtoa_r+0x296>
 8014e68:	69e3      	ldr	r3, [r4, #28]
 8014e6a:	9a00      	ldr	r2, [sp, #0]
 8014e6c:	601a      	str	r2, [r3, #0]
 8014e6e:	9b04      	ldr	r3, [sp, #16]
 8014e70:	2b0e      	cmp	r3, #14
 8014e72:	f200 80a8 	bhi.w	8014fc6 <_dtoa_r+0x47e>
 8014e76:	2d00      	cmp	r5, #0
 8014e78:	f000 80a5 	beq.w	8014fc6 <_dtoa_r+0x47e>
 8014e7c:	f1bb 0f00 	cmp.w	fp, #0
 8014e80:	dd38      	ble.n	8014ef4 <_dtoa_r+0x3ac>
 8014e82:	4bc0      	ldr	r3, [pc, #768]	; (8015184 <_dtoa_r+0x63c>)
 8014e84:	f00b 020f 	and.w	r2, fp, #15
 8014e88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014e90:	e9d3 6700 	ldrd	r6, r7, [r3]
 8014e94:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014e98:	d019      	beq.n	8014ece <_dtoa_r+0x386>
 8014e9a:	4bbb      	ldr	r3, [pc, #748]	; (8015188 <_dtoa_r+0x640>)
 8014e9c:	ec51 0b18 	vmov	r0, r1, d8
 8014ea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014ea4:	f7eb fcda 	bl	800085c <__aeabi_ddiv>
 8014ea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014eac:	f008 080f 	and.w	r8, r8, #15
 8014eb0:	2503      	movs	r5, #3
 8014eb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8015188 <_dtoa_r+0x640>
 8014eb6:	f1b8 0f00 	cmp.w	r8, #0
 8014eba:	d10a      	bne.n	8014ed2 <_dtoa_r+0x38a>
 8014ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014ec0:	4632      	mov	r2, r6
 8014ec2:	463b      	mov	r3, r7
 8014ec4:	f7eb fcca 	bl	800085c <__aeabi_ddiv>
 8014ec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ecc:	e02b      	b.n	8014f26 <_dtoa_r+0x3de>
 8014ece:	2502      	movs	r5, #2
 8014ed0:	e7ef      	b.n	8014eb2 <_dtoa_r+0x36a>
 8014ed2:	f018 0f01 	tst.w	r8, #1
 8014ed6:	d008      	beq.n	8014eea <_dtoa_r+0x3a2>
 8014ed8:	4630      	mov	r0, r6
 8014eda:	4639      	mov	r1, r7
 8014edc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014ee0:	f7eb fb92 	bl	8000608 <__aeabi_dmul>
 8014ee4:	3501      	adds	r5, #1
 8014ee6:	4606      	mov	r6, r0
 8014ee8:	460f      	mov	r7, r1
 8014eea:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014eee:	f109 0908 	add.w	r9, r9, #8
 8014ef2:	e7e0      	b.n	8014eb6 <_dtoa_r+0x36e>
 8014ef4:	f000 809f 	beq.w	8015036 <_dtoa_r+0x4ee>
 8014ef8:	f1cb 0600 	rsb	r6, fp, #0
 8014efc:	4ba1      	ldr	r3, [pc, #644]	; (8015184 <_dtoa_r+0x63c>)
 8014efe:	4fa2      	ldr	r7, [pc, #648]	; (8015188 <_dtoa_r+0x640>)
 8014f00:	f006 020f 	and.w	r2, r6, #15
 8014f04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0c:	ec51 0b18 	vmov	r0, r1, d8
 8014f10:	f7eb fb7a 	bl	8000608 <__aeabi_dmul>
 8014f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f18:	1136      	asrs	r6, r6, #4
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	2502      	movs	r5, #2
 8014f1e:	2e00      	cmp	r6, #0
 8014f20:	d17e      	bne.n	8015020 <_dtoa_r+0x4d8>
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d1d0      	bne.n	8014ec8 <_dtoa_r+0x380>
 8014f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	f000 8084 	beq.w	801503a <_dtoa_r+0x4f2>
 8014f32:	4b96      	ldr	r3, [pc, #600]	; (801518c <_dtoa_r+0x644>)
 8014f34:	2200      	movs	r2, #0
 8014f36:	4640      	mov	r0, r8
 8014f38:	4649      	mov	r1, r9
 8014f3a:	f7eb fdd7 	bl	8000aec <__aeabi_dcmplt>
 8014f3e:	2800      	cmp	r0, #0
 8014f40:	d07b      	beq.n	801503a <_dtoa_r+0x4f2>
 8014f42:	9b04      	ldr	r3, [sp, #16]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d078      	beq.n	801503a <_dtoa_r+0x4f2>
 8014f48:	9b01      	ldr	r3, [sp, #4]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	dd39      	ble.n	8014fc2 <_dtoa_r+0x47a>
 8014f4e:	4b90      	ldr	r3, [pc, #576]	; (8015190 <_dtoa_r+0x648>)
 8014f50:	2200      	movs	r2, #0
 8014f52:	4640      	mov	r0, r8
 8014f54:	4649      	mov	r1, r9
 8014f56:	f7eb fb57 	bl	8000608 <__aeabi_dmul>
 8014f5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f5e:	9e01      	ldr	r6, [sp, #4]
 8014f60:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014f64:	3501      	adds	r5, #1
 8014f66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014f6a:	4628      	mov	r0, r5
 8014f6c:	f7eb fae2 	bl	8000534 <__aeabi_i2d>
 8014f70:	4642      	mov	r2, r8
 8014f72:	464b      	mov	r3, r9
 8014f74:	f7eb fb48 	bl	8000608 <__aeabi_dmul>
 8014f78:	4b86      	ldr	r3, [pc, #536]	; (8015194 <_dtoa_r+0x64c>)
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	f7eb f98e 	bl	800029c <__adddf3>
 8014f80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014f84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f88:	9303      	str	r3, [sp, #12]
 8014f8a:	2e00      	cmp	r6, #0
 8014f8c:	d158      	bne.n	8015040 <_dtoa_r+0x4f8>
 8014f8e:	4b82      	ldr	r3, [pc, #520]	; (8015198 <_dtoa_r+0x650>)
 8014f90:	2200      	movs	r2, #0
 8014f92:	4640      	mov	r0, r8
 8014f94:	4649      	mov	r1, r9
 8014f96:	f7eb f97f 	bl	8000298 <__aeabi_dsub>
 8014f9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014f9e:	4680      	mov	r8, r0
 8014fa0:	4689      	mov	r9, r1
 8014fa2:	f7eb fdc1 	bl	8000b28 <__aeabi_dcmpgt>
 8014fa6:	2800      	cmp	r0, #0
 8014fa8:	f040 8296 	bne.w	80154d8 <_dtoa_r+0x990>
 8014fac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014fb0:	4640      	mov	r0, r8
 8014fb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014fb6:	4649      	mov	r1, r9
 8014fb8:	f7eb fd98 	bl	8000aec <__aeabi_dcmplt>
 8014fbc:	2800      	cmp	r0, #0
 8014fbe:	f040 8289 	bne.w	80154d4 <_dtoa_r+0x98c>
 8014fc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	f2c0 814e 	blt.w	801526a <_dtoa_r+0x722>
 8014fce:	f1bb 0f0e 	cmp.w	fp, #14
 8014fd2:	f300 814a 	bgt.w	801526a <_dtoa_r+0x722>
 8014fd6:	4b6b      	ldr	r3, [pc, #428]	; (8015184 <_dtoa_r+0x63c>)
 8014fd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014fdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	f280 80dc 	bge.w	80151a0 <_dtoa_r+0x658>
 8014fe8:	9b04      	ldr	r3, [sp, #16]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	f300 80d8 	bgt.w	80151a0 <_dtoa_r+0x658>
 8014ff0:	f040 826f 	bne.w	80154d2 <_dtoa_r+0x98a>
 8014ff4:	4b68      	ldr	r3, [pc, #416]	; (8015198 <_dtoa_r+0x650>)
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	4640      	mov	r0, r8
 8014ffa:	4649      	mov	r1, r9
 8014ffc:	f7eb fb04 	bl	8000608 <__aeabi_dmul>
 8015000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015004:	f7eb fd86 	bl	8000b14 <__aeabi_dcmpge>
 8015008:	9e04      	ldr	r6, [sp, #16]
 801500a:	4637      	mov	r7, r6
 801500c:	2800      	cmp	r0, #0
 801500e:	f040 8245 	bne.w	801549c <_dtoa_r+0x954>
 8015012:	9d00      	ldr	r5, [sp, #0]
 8015014:	2331      	movs	r3, #49	; 0x31
 8015016:	f805 3b01 	strb.w	r3, [r5], #1
 801501a:	f10b 0b01 	add.w	fp, fp, #1
 801501e:	e241      	b.n	80154a4 <_dtoa_r+0x95c>
 8015020:	07f2      	lsls	r2, r6, #31
 8015022:	d505      	bpl.n	8015030 <_dtoa_r+0x4e8>
 8015024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015028:	f7eb faee 	bl	8000608 <__aeabi_dmul>
 801502c:	3501      	adds	r5, #1
 801502e:	2301      	movs	r3, #1
 8015030:	1076      	asrs	r6, r6, #1
 8015032:	3708      	adds	r7, #8
 8015034:	e773      	b.n	8014f1e <_dtoa_r+0x3d6>
 8015036:	2502      	movs	r5, #2
 8015038:	e775      	b.n	8014f26 <_dtoa_r+0x3de>
 801503a:	9e04      	ldr	r6, [sp, #16]
 801503c:	465f      	mov	r7, fp
 801503e:	e792      	b.n	8014f66 <_dtoa_r+0x41e>
 8015040:	9900      	ldr	r1, [sp, #0]
 8015042:	4b50      	ldr	r3, [pc, #320]	; (8015184 <_dtoa_r+0x63c>)
 8015044:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015048:	4431      	add	r1, r6
 801504a:	9102      	str	r1, [sp, #8]
 801504c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801504e:	eeb0 9a47 	vmov.f32	s18, s14
 8015052:	eef0 9a67 	vmov.f32	s19, s15
 8015056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801505a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801505e:	2900      	cmp	r1, #0
 8015060:	d044      	beq.n	80150ec <_dtoa_r+0x5a4>
 8015062:	494e      	ldr	r1, [pc, #312]	; (801519c <_dtoa_r+0x654>)
 8015064:	2000      	movs	r0, #0
 8015066:	f7eb fbf9 	bl	800085c <__aeabi_ddiv>
 801506a:	ec53 2b19 	vmov	r2, r3, d9
 801506e:	f7eb f913 	bl	8000298 <__aeabi_dsub>
 8015072:	9d00      	ldr	r5, [sp, #0]
 8015074:	ec41 0b19 	vmov	d9, r0, r1
 8015078:	4649      	mov	r1, r9
 801507a:	4640      	mov	r0, r8
 801507c:	f7eb fd74 	bl	8000b68 <__aeabi_d2iz>
 8015080:	4606      	mov	r6, r0
 8015082:	f7eb fa57 	bl	8000534 <__aeabi_i2d>
 8015086:	4602      	mov	r2, r0
 8015088:	460b      	mov	r3, r1
 801508a:	4640      	mov	r0, r8
 801508c:	4649      	mov	r1, r9
 801508e:	f7eb f903 	bl	8000298 <__aeabi_dsub>
 8015092:	3630      	adds	r6, #48	; 0x30
 8015094:	f805 6b01 	strb.w	r6, [r5], #1
 8015098:	ec53 2b19 	vmov	r2, r3, d9
 801509c:	4680      	mov	r8, r0
 801509e:	4689      	mov	r9, r1
 80150a0:	f7eb fd24 	bl	8000aec <__aeabi_dcmplt>
 80150a4:	2800      	cmp	r0, #0
 80150a6:	d164      	bne.n	8015172 <_dtoa_r+0x62a>
 80150a8:	4642      	mov	r2, r8
 80150aa:	464b      	mov	r3, r9
 80150ac:	4937      	ldr	r1, [pc, #220]	; (801518c <_dtoa_r+0x644>)
 80150ae:	2000      	movs	r0, #0
 80150b0:	f7eb f8f2 	bl	8000298 <__aeabi_dsub>
 80150b4:	ec53 2b19 	vmov	r2, r3, d9
 80150b8:	f7eb fd18 	bl	8000aec <__aeabi_dcmplt>
 80150bc:	2800      	cmp	r0, #0
 80150be:	f040 80b6 	bne.w	801522e <_dtoa_r+0x6e6>
 80150c2:	9b02      	ldr	r3, [sp, #8]
 80150c4:	429d      	cmp	r5, r3
 80150c6:	f43f af7c 	beq.w	8014fc2 <_dtoa_r+0x47a>
 80150ca:	4b31      	ldr	r3, [pc, #196]	; (8015190 <_dtoa_r+0x648>)
 80150cc:	ec51 0b19 	vmov	r0, r1, d9
 80150d0:	2200      	movs	r2, #0
 80150d2:	f7eb fa99 	bl	8000608 <__aeabi_dmul>
 80150d6:	4b2e      	ldr	r3, [pc, #184]	; (8015190 <_dtoa_r+0x648>)
 80150d8:	ec41 0b19 	vmov	d9, r0, r1
 80150dc:	2200      	movs	r2, #0
 80150de:	4640      	mov	r0, r8
 80150e0:	4649      	mov	r1, r9
 80150e2:	f7eb fa91 	bl	8000608 <__aeabi_dmul>
 80150e6:	4680      	mov	r8, r0
 80150e8:	4689      	mov	r9, r1
 80150ea:	e7c5      	b.n	8015078 <_dtoa_r+0x530>
 80150ec:	ec51 0b17 	vmov	r0, r1, d7
 80150f0:	f7eb fa8a 	bl	8000608 <__aeabi_dmul>
 80150f4:	9b02      	ldr	r3, [sp, #8]
 80150f6:	9d00      	ldr	r5, [sp, #0]
 80150f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80150fa:	ec41 0b19 	vmov	d9, r0, r1
 80150fe:	4649      	mov	r1, r9
 8015100:	4640      	mov	r0, r8
 8015102:	f7eb fd31 	bl	8000b68 <__aeabi_d2iz>
 8015106:	4606      	mov	r6, r0
 8015108:	f7eb fa14 	bl	8000534 <__aeabi_i2d>
 801510c:	3630      	adds	r6, #48	; 0x30
 801510e:	4602      	mov	r2, r0
 8015110:	460b      	mov	r3, r1
 8015112:	4640      	mov	r0, r8
 8015114:	4649      	mov	r1, r9
 8015116:	f7eb f8bf 	bl	8000298 <__aeabi_dsub>
 801511a:	f805 6b01 	strb.w	r6, [r5], #1
 801511e:	9b02      	ldr	r3, [sp, #8]
 8015120:	429d      	cmp	r5, r3
 8015122:	4680      	mov	r8, r0
 8015124:	4689      	mov	r9, r1
 8015126:	f04f 0200 	mov.w	r2, #0
 801512a:	d124      	bne.n	8015176 <_dtoa_r+0x62e>
 801512c:	4b1b      	ldr	r3, [pc, #108]	; (801519c <_dtoa_r+0x654>)
 801512e:	ec51 0b19 	vmov	r0, r1, d9
 8015132:	f7eb f8b3 	bl	800029c <__adddf3>
 8015136:	4602      	mov	r2, r0
 8015138:	460b      	mov	r3, r1
 801513a:	4640      	mov	r0, r8
 801513c:	4649      	mov	r1, r9
 801513e:	f7eb fcf3 	bl	8000b28 <__aeabi_dcmpgt>
 8015142:	2800      	cmp	r0, #0
 8015144:	d173      	bne.n	801522e <_dtoa_r+0x6e6>
 8015146:	ec53 2b19 	vmov	r2, r3, d9
 801514a:	4914      	ldr	r1, [pc, #80]	; (801519c <_dtoa_r+0x654>)
 801514c:	2000      	movs	r0, #0
 801514e:	f7eb f8a3 	bl	8000298 <__aeabi_dsub>
 8015152:	4602      	mov	r2, r0
 8015154:	460b      	mov	r3, r1
 8015156:	4640      	mov	r0, r8
 8015158:	4649      	mov	r1, r9
 801515a:	f7eb fcc7 	bl	8000aec <__aeabi_dcmplt>
 801515e:	2800      	cmp	r0, #0
 8015160:	f43f af2f 	beq.w	8014fc2 <_dtoa_r+0x47a>
 8015164:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015166:	1e6b      	subs	r3, r5, #1
 8015168:	930f      	str	r3, [sp, #60]	; 0x3c
 801516a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801516e:	2b30      	cmp	r3, #48	; 0x30
 8015170:	d0f8      	beq.n	8015164 <_dtoa_r+0x61c>
 8015172:	46bb      	mov	fp, r7
 8015174:	e04a      	b.n	801520c <_dtoa_r+0x6c4>
 8015176:	4b06      	ldr	r3, [pc, #24]	; (8015190 <_dtoa_r+0x648>)
 8015178:	f7eb fa46 	bl	8000608 <__aeabi_dmul>
 801517c:	4680      	mov	r8, r0
 801517e:	4689      	mov	r9, r1
 8015180:	e7bd      	b.n	80150fe <_dtoa_r+0x5b6>
 8015182:	bf00      	nop
 8015184:	08018f30 	.word	0x08018f30
 8015188:	08018f08 	.word	0x08018f08
 801518c:	3ff00000 	.word	0x3ff00000
 8015190:	40240000 	.word	0x40240000
 8015194:	401c0000 	.word	0x401c0000
 8015198:	40140000 	.word	0x40140000
 801519c:	3fe00000 	.word	0x3fe00000
 80151a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80151a4:	9d00      	ldr	r5, [sp, #0]
 80151a6:	4642      	mov	r2, r8
 80151a8:	464b      	mov	r3, r9
 80151aa:	4630      	mov	r0, r6
 80151ac:	4639      	mov	r1, r7
 80151ae:	f7eb fb55 	bl	800085c <__aeabi_ddiv>
 80151b2:	f7eb fcd9 	bl	8000b68 <__aeabi_d2iz>
 80151b6:	9001      	str	r0, [sp, #4]
 80151b8:	f7eb f9bc 	bl	8000534 <__aeabi_i2d>
 80151bc:	4642      	mov	r2, r8
 80151be:	464b      	mov	r3, r9
 80151c0:	f7eb fa22 	bl	8000608 <__aeabi_dmul>
 80151c4:	4602      	mov	r2, r0
 80151c6:	460b      	mov	r3, r1
 80151c8:	4630      	mov	r0, r6
 80151ca:	4639      	mov	r1, r7
 80151cc:	f7eb f864 	bl	8000298 <__aeabi_dsub>
 80151d0:	9e01      	ldr	r6, [sp, #4]
 80151d2:	9f04      	ldr	r7, [sp, #16]
 80151d4:	3630      	adds	r6, #48	; 0x30
 80151d6:	f805 6b01 	strb.w	r6, [r5], #1
 80151da:	9e00      	ldr	r6, [sp, #0]
 80151dc:	1bae      	subs	r6, r5, r6
 80151de:	42b7      	cmp	r7, r6
 80151e0:	4602      	mov	r2, r0
 80151e2:	460b      	mov	r3, r1
 80151e4:	d134      	bne.n	8015250 <_dtoa_r+0x708>
 80151e6:	f7eb f859 	bl	800029c <__adddf3>
 80151ea:	4642      	mov	r2, r8
 80151ec:	464b      	mov	r3, r9
 80151ee:	4606      	mov	r6, r0
 80151f0:	460f      	mov	r7, r1
 80151f2:	f7eb fc99 	bl	8000b28 <__aeabi_dcmpgt>
 80151f6:	b9c8      	cbnz	r0, 801522c <_dtoa_r+0x6e4>
 80151f8:	4642      	mov	r2, r8
 80151fa:	464b      	mov	r3, r9
 80151fc:	4630      	mov	r0, r6
 80151fe:	4639      	mov	r1, r7
 8015200:	f7eb fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8015204:	b110      	cbz	r0, 801520c <_dtoa_r+0x6c4>
 8015206:	9b01      	ldr	r3, [sp, #4]
 8015208:	07db      	lsls	r3, r3, #31
 801520a:	d40f      	bmi.n	801522c <_dtoa_r+0x6e4>
 801520c:	4651      	mov	r1, sl
 801520e:	4620      	mov	r0, r4
 8015210:	f000 fbcc 	bl	80159ac <_Bfree>
 8015214:	2300      	movs	r3, #0
 8015216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015218:	702b      	strb	r3, [r5, #0]
 801521a:	f10b 0301 	add.w	r3, fp, #1
 801521e:	6013      	str	r3, [r2, #0]
 8015220:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015222:	2b00      	cmp	r3, #0
 8015224:	f43f ace2 	beq.w	8014bec <_dtoa_r+0xa4>
 8015228:	601d      	str	r5, [r3, #0]
 801522a:	e4df      	b.n	8014bec <_dtoa_r+0xa4>
 801522c:	465f      	mov	r7, fp
 801522e:	462b      	mov	r3, r5
 8015230:	461d      	mov	r5, r3
 8015232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015236:	2a39      	cmp	r2, #57	; 0x39
 8015238:	d106      	bne.n	8015248 <_dtoa_r+0x700>
 801523a:	9a00      	ldr	r2, [sp, #0]
 801523c:	429a      	cmp	r2, r3
 801523e:	d1f7      	bne.n	8015230 <_dtoa_r+0x6e8>
 8015240:	9900      	ldr	r1, [sp, #0]
 8015242:	2230      	movs	r2, #48	; 0x30
 8015244:	3701      	adds	r7, #1
 8015246:	700a      	strb	r2, [r1, #0]
 8015248:	781a      	ldrb	r2, [r3, #0]
 801524a:	3201      	adds	r2, #1
 801524c:	701a      	strb	r2, [r3, #0]
 801524e:	e790      	b.n	8015172 <_dtoa_r+0x62a>
 8015250:	4ba3      	ldr	r3, [pc, #652]	; (80154e0 <_dtoa_r+0x998>)
 8015252:	2200      	movs	r2, #0
 8015254:	f7eb f9d8 	bl	8000608 <__aeabi_dmul>
 8015258:	2200      	movs	r2, #0
 801525a:	2300      	movs	r3, #0
 801525c:	4606      	mov	r6, r0
 801525e:	460f      	mov	r7, r1
 8015260:	f7eb fc3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8015264:	2800      	cmp	r0, #0
 8015266:	d09e      	beq.n	80151a6 <_dtoa_r+0x65e>
 8015268:	e7d0      	b.n	801520c <_dtoa_r+0x6c4>
 801526a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801526c:	2a00      	cmp	r2, #0
 801526e:	f000 80ca 	beq.w	8015406 <_dtoa_r+0x8be>
 8015272:	9a07      	ldr	r2, [sp, #28]
 8015274:	2a01      	cmp	r2, #1
 8015276:	f300 80ad 	bgt.w	80153d4 <_dtoa_r+0x88c>
 801527a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801527c:	2a00      	cmp	r2, #0
 801527e:	f000 80a5 	beq.w	80153cc <_dtoa_r+0x884>
 8015282:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015286:	9e08      	ldr	r6, [sp, #32]
 8015288:	9d05      	ldr	r5, [sp, #20]
 801528a:	9a05      	ldr	r2, [sp, #20]
 801528c:	441a      	add	r2, r3
 801528e:	9205      	str	r2, [sp, #20]
 8015290:	9a06      	ldr	r2, [sp, #24]
 8015292:	2101      	movs	r1, #1
 8015294:	441a      	add	r2, r3
 8015296:	4620      	mov	r0, r4
 8015298:	9206      	str	r2, [sp, #24]
 801529a:	f000 fc87 	bl	8015bac <__i2b>
 801529e:	4607      	mov	r7, r0
 80152a0:	b165      	cbz	r5, 80152bc <_dtoa_r+0x774>
 80152a2:	9b06      	ldr	r3, [sp, #24]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	dd09      	ble.n	80152bc <_dtoa_r+0x774>
 80152a8:	42ab      	cmp	r3, r5
 80152aa:	9a05      	ldr	r2, [sp, #20]
 80152ac:	bfa8      	it	ge
 80152ae:	462b      	movge	r3, r5
 80152b0:	1ad2      	subs	r2, r2, r3
 80152b2:	9205      	str	r2, [sp, #20]
 80152b4:	9a06      	ldr	r2, [sp, #24]
 80152b6:	1aed      	subs	r5, r5, r3
 80152b8:	1ad3      	subs	r3, r2, r3
 80152ba:	9306      	str	r3, [sp, #24]
 80152bc:	9b08      	ldr	r3, [sp, #32]
 80152be:	b1f3      	cbz	r3, 80152fe <_dtoa_r+0x7b6>
 80152c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	f000 80a3 	beq.w	801540e <_dtoa_r+0x8c6>
 80152c8:	2e00      	cmp	r6, #0
 80152ca:	dd10      	ble.n	80152ee <_dtoa_r+0x7a6>
 80152cc:	4639      	mov	r1, r7
 80152ce:	4632      	mov	r2, r6
 80152d0:	4620      	mov	r0, r4
 80152d2:	f000 fd2b 	bl	8015d2c <__pow5mult>
 80152d6:	4652      	mov	r2, sl
 80152d8:	4601      	mov	r1, r0
 80152da:	4607      	mov	r7, r0
 80152dc:	4620      	mov	r0, r4
 80152de:	f000 fc7b 	bl	8015bd8 <__multiply>
 80152e2:	4651      	mov	r1, sl
 80152e4:	4680      	mov	r8, r0
 80152e6:	4620      	mov	r0, r4
 80152e8:	f000 fb60 	bl	80159ac <_Bfree>
 80152ec:	46c2      	mov	sl, r8
 80152ee:	9b08      	ldr	r3, [sp, #32]
 80152f0:	1b9a      	subs	r2, r3, r6
 80152f2:	d004      	beq.n	80152fe <_dtoa_r+0x7b6>
 80152f4:	4651      	mov	r1, sl
 80152f6:	4620      	mov	r0, r4
 80152f8:	f000 fd18 	bl	8015d2c <__pow5mult>
 80152fc:	4682      	mov	sl, r0
 80152fe:	2101      	movs	r1, #1
 8015300:	4620      	mov	r0, r4
 8015302:	f000 fc53 	bl	8015bac <__i2b>
 8015306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015308:	2b00      	cmp	r3, #0
 801530a:	4606      	mov	r6, r0
 801530c:	f340 8081 	ble.w	8015412 <_dtoa_r+0x8ca>
 8015310:	461a      	mov	r2, r3
 8015312:	4601      	mov	r1, r0
 8015314:	4620      	mov	r0, r4
 8015316:	f000 fd09 	bl	8015d2c <__pow5mult>
 801531a:	9b07      	ldr	r3, [sp, #28]
 801531c:	2b01      	cmp	r3, #1
 801531e:	4606      	mov	r6, r0
 8015320:	dd7a      	ble.n	8015418 <_dtoa_r+0x8d0>
 8015322:	f04f 0800 	mov.w	r8, #0
 8015326:	6933      	ldr	r3, [r6, #16]
 8015328:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801532c:	6918      	ldr	r0, [r3, #16]
 801532e:	f000 fbef 	bl	8015b10 <__hi0bits>
 8015332:	f1c0 0020 	rsb	r0, r0, #32
 8015336:	9b06      	ldr	r3, [sp, #24]
 8015338:	4418      	add	r0, r3
 801533a:	f010 001f 	ands.w	r0, r0, #31
 801533e:	f000 8094 	beq.w	801546a <_dtoa_r+0x922>
 8015342:	f1c0 0320 	rsb	r3, r0, #32
 8015346:	2b04      	cmp	r3, #4
 8015348:	f340 8085 	ble.w	8015456 <_dtoa_r+0x90e>
 801534c:	9b05      	ldr	r3, [sp, #20]
 801534e:	f1c0 001c 	rsb	r0, r0, #28
 8015352:	4403      	add	r3, r0
 8015354:	9305      	str	r3, [sp, #20]
 8015356:	9b06      	ldr	r3, [sp, #24]
 8015358:	4403      	add	r3, r0
 801535a:	4405      	add	r5, r0
 801535c:	9306      	str	r3, [sp, #24]
 801535e:	9b05      	ldr	r3, [sp, #20]
 8015360:	2b00      	cmp	r3, #0
 8015362:	dd05      	ble.n	8015370 <_dtoa_r+0x828>
 8015364:	4651      	mov	r1, sl
 8015366:	461a      	mov	r2, r3
 8015368:	4620      	mov	r0, r4
 801536a:	f000 fd39 	bl	8015de0 <__lshift>
 801536e:	4682      	mov	sl, r0
 8015370:	9b06      	ldr	r3, [sp, #24]
 8015372:	2b00      	cmp	r3, #0
 8015374:	dd05      	ble.n	8015382 <_dtoa_r+0x83a>
 8015376:	4631      	mov	r1, r6
 8015378:	461a      	mov	r2, r3
 801537a:	4620      	mov	r0, r4
 801537c:	f000 fd30 	bl	8015de0 <__lshift>
 8015380:	4606      	mov	r6, r0
 8015382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015384:	2b00      	cmp	r3, #0
 8015386:	d072      	beq.n	801546e <_dtoa_r+0x926>
 8015388:	4631      	mov	r1, r6
 801538a:	4650      	mov	r0, sl
 801538c:	f000 fd94 	bl	8015eb8 <__mcmp>
 8015390:	2800      	cmp	r0, #0
 8015392:	da6c      	bge.n	801546e <_dtoa_r+0x926>
 8015394:	2300      	movs	r3, #0
 8015396:	4651      	mov	r1, sl
 8015398:	220a      	movs	r2, #10
 801539a:	4620      	mov	r0, r4
 801539c:	f000 fb28 	bl	80159f0 <__multadd>
 80153a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80153a6:	4682      	mov	sl, r0
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	f000 81b0 	beq.w	801570e <_dtoa_r+0xbc6>
 80153ae:	2300      	movs	r3, #0
 80153b0:	4639      	mov	r1, r7
 80153b2:	220a      	movs	r2, #10
 80153b4:	4620      	mov	r0, r4
 80153b6:	f000 fb1b 	bl	80159f0 <__multadd>
 80153ba:	9b01      	ldr	r3, [sp, #4]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	4607      	mov	r7, r0
 80153c0:	f300 8096 	bgt.w	80154f0 <_dtoa_r+0x9a8>
 80153c4:	9b07      	ldr	r3, [sp, #28]
 80153c6:	2b02      	cmp	r3, #2
 80153c8:	dc59      	bgt.n	801547e <_dtoa_r+0x936>
 80153ca:	e091      	b.n	80154f0 <_dtoa_r+0x9a8>
 80153cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80153ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80153d2:	e758      	b.n	8015286 <_dtoa_r+0x73e>
 80153d4:	9b04      	ldr	r3, [sp, #16]
 80153d6:	1e5e      	subs	r6, r3, #1
 80153d8:	9b08      	ldr	r3, [sp, #32]
 80153da:	42b3      	cmp	r3, r6
 80153dc:	bfbf      	itttt	lt
 80153de:	9b08      	ldrlt	r3, [sp, #32]
 80153e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80153e2:	9608      	strlt	r6, [sp, #32]
 80153e4:	1af3      	sublt	r3, r6, r3
 80153e6:	bfb4      	ite	lt
 80153e8:	18d2      	addlt	r2, r2, r3
 80153ea:	1b9e      	subge	r6, r3, r6
 80153ec:	9b04      	ldr	r3, [sp, #16]
 80153ee:	bfbc      	itt	lt
 80153f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80153f2:	2600      	movlt	r6, #0
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	bfb7      	itett	lt
 80153f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80153fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8015400:	1a9d      	sublt	r5, r3, r2
 8015402:	2300      	movlt	r3, #0
 8015404:	e741      	b.n	801528a <_dtoa_r+0x742>
 8015406:	9e08      	ldr	r6, [sp, #32]
 8015408:	9d05      	ldr	r5, [sp, #20]
 801540a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801540c:	e748      	b.n	80152a0 <_dtoa_r+0x758>
 801540e:	9a08      	ldr	r2, [sp, #32]
 8015410:	e770      	b.n	80152f4 <_dtoa_r+0x7ac>
 8015412:	9b07      	ldr	r3, [sp, #28]
 8015414:	2b01      	cmp	r3, #1
 8015416:	dc19      	bgt.n	801544c <_dtoa_r+0x904>
 8015418:	9b02      	ldr	r3, [sp, #8]
 801541a:	b9bb      	cbnz	r3, 801544c <_dtoa_r+0x904>
 801541c:	9b03      	ldr	r3, [sp, #12]
 801541e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015422:	b99b      	cbnz	r3, 801544c <_dtoa_r+0x904>
 8015424:	9b03      	ldr	r3, [sp, #12]
 8015426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801542a:	0d1b      	lsrs	r3, r3, #20
 801542c:	051b      	lsls	r3, r3, #20
 801542e:	b183      	cbz	r3, 8015452 <_dtoa_r+0x90a>
 8015430:	9b05      	ldr	r3, [sp, #20]
 8015432:	3301      	adds	r3, #1
 8015434:	9305      	str	r3, [sp, #20]
 8015436:	9b06      	ldr	r3, [sp, #24]
 8015438:	3301      	adds	r3, #1
 801543a:	9306      	str	r3, [sp, #24]
 801543c:	f04f 0801 	mov.w	r8, #1
 8015440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015442:	2b00      	cmp	r3, #0
 8015444:	f47f af6f 	bne.w	8015326 <_dtoa_r+0x7de>
 8015448:	2001      	movs	r0, #1
 801544a:	e774      	b.n	8015336 <_dtoa_r+0x7ee>
 801544c:	f04f 0800 	mov.w	r8, #0
 8015450:	e7f6      	b.n	8015440 <_dtoa_r+0x8f8>
 8015452:	4698      	mov	r8, r3
 8015454:	e7f4      	b.n	8015440 <_dtoa_r+0x8f8>
 8015456:	d082      	beq.n	801535e <_dtoa_r+0x816>
 8015458:	9a05      	ldr	r2, [sp, #20]
 801545a:	331c      	adds	r3, #28
 801545c:	441a      	add	r2, r3
 801545e:	9205      	str	r2, [sp, #20]
 8015460:	9a06      	ldr	r2, [sp, #24]
 8015462:	441a      	add	r2, r3
 8015464:	441d      	add	r5, r3
 8015466:	9206      	str	r2, [sp, #24]
 8015468:	e779      	b.n	801535e <_dtoa_r+0x816>
 801546a:	4603      	mov	r3, r0
 801546c:	e7f4      	b.n	8015458 <_dtoa_r+0x910>
 801546e:	9b04      	ldr	r3, [sp, #16]
 8015470:	2b00      	cmp	r3, #0
 8015472:	dc37      	bgt.n	80154e4 <_dtoa_r+0x99c>
 8015474:	9b07      	ldr	r3, [sp, #28]
 8015476:	2b02      	cmp	r3, #2
 8015478:	dd34      	ble.n	80154e4 <_dtoa_r+0x99c>
 801547a:	9b04      	ldr	r3, [sp, #16]
 801547c:	9301      	str	r3, [sp, #4]
 801547e:	9b01      	ldr	r3, [sp, #4]
 8015480:	b963      	cbnz	r3, 801549c <_dtoa_r+0x954>
 8015482:	4631      	mov	r1, r6
 8015484:	2205      	movs	r2, #5
 8015486:	4620      	mov	r0, r4
 8015488:	f000 fab2 	bl	80159f0 <__multadd>
 801548c:	4601      	mov	r1, r0
 801548e:	4606      	mov	r6, r0
 8015490:	4650      	mov	r0, sl
 8015492:	f000 fd11 	bl	8015eb8 <__mcmp>
 8015496:	2800      	cmp	r0, #0
 8015498:	f73f adbb 	bgt.w	8015012 <_dtoa_r+0x4ca>
 801549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801549e:	9d00      	ldr	r5, [sp, #0]
 80154a0:	ea6f 0b03 	mvn.w	fp, r3
 80154a4:	f04f 0800 	mov.w	r8, #0
 80154a8:	4631      	mov	r1, r6
 80154aa:	4620      	mov	r0, r4
 80154ac:	f000 fa7e 	bl	80159ac <_Bfree>
 80154b0:	2f00      	cmp	r7, #0
 80154b2:	f43f aeab 	beq.w	801520c <_dtoa_r+0x6c4>
 80154b6:	f1b8 0f00 	cmp.w	r8, #0
 80154ba:	d005      	beq.n	80154c8 <_dtoa_r+0x980>
 80154bc:	45b8      	cmp	r8, r7
 80154be:	d003      	beq.n	80154c8 <_dtoa_r+0x980>
 80154c0:	4641      	mov	r1, r8
 80154c2:	4620      	mov	r0, r4
 80154c4:	f000 fa72 	bl	80159ac <_Bfree>
 80154c8:	4639      	mov	r1, r7
 80154ca:	4620      	mov	r0, r4
 80154cc:	f000 fa6e 	bl	80159ac <_Bfree>
 80154d0:	e69c      	b.n	801520c <_dtoa_r+0x6c4>
 80154d2:	2600      	movs	r6, #0
 80154d4:	4637      	mov	r7, r6
 80154d6:	e7e1      	b.n	801549c <_dtoa_r+0x954>
 80154d8:	46bb      	mov	fp, r7
 80154da:	4637      	mov	r7, r6
 80154dc:	e599      	b.n	8015012 <_dtoa_r+0x4ca>
 80154de:	bf00      	nop
 80154e0:	40240000 	.word	0x40240000
 80154e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	f000 80c8 	beq.w	801567c <_dtoa_r+0xb34>
 80154ec:	9b04      	ldr	r3, [sp, #16]
 80154ee:	9301      	str	r3, [sp, #4]
 80154f0:	2d00      	cmp	r5, #0
 80154f2:	dd05      	ble.n	8015500 <_dtoa_r+0x9b8>
 80154f4:	4639      	mov	r1, r7
 80154f6:	462a      	mov	r2, r5
 80154f8:	4620      	mov	r0, r4
 80154fa:	f000 fc71 	bl	8015de0 <__lshift>
 80154fe:	4607      	mov	r7, r0
 8015500:	f1b8 0f00 	cmp.w	r8, #0
 8015504:	d05b      	beq.n	80155be <_dtoa_r+0xa76>
 8015506:	6879      	ldr	r1, [r7, #4]
 8015508:	4620      	mov	r0, r4
 801550a:	f000 fa0f 	bl	801592c <_Balloc>
 801550e:	4605      	mov	r5, r0
 8015510:	b928      	cbnz	r0, 801551e <_dtoa_r+0x9d6>
 8015512:	4b83      	ldr	r3, [pc, #524]	; (8015720 <_dtoa_r+0xbd8>)
 8015514:	4602      	mov	r2, r0
 8015516:	f240 21ef 	movw	r1, #751	; 0x2ef
 801551a:	f7ff bb2e 	b.w	8014b7a <_dtoa_r+0x32>
 801551e:	693a      	ldr	r2, [r7, #16]
 8015520:	3202      	adds	r2, #2
 8015522:	0092      	lsls	r2, r2, #2
 8015524:	f107 010c 	add.w	r1, r7, #12
 8015528:	300c      	adds	r0, #12
 801552a:	f7ff fa6f 	bl	8014a0c <memcpy>
 801552e:	2201      	movs	r2, #1
 8015530:	4629      	mov	r1, r5
 8015532:	4620      	mov	r0, r4
 8015534:	f000 fc54 	bl	8015de0 <__lshift>
 8015538:	9b00      	ldr	r3, [sp, #0]
 801553a:	3301      	adds	r3, #1
 801553c:	9304      	str	r3, [sp, #16]
 801553e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015542:	4413      	add	r3, r2
 8015544:	9308      	str	r3, [sp, #32]
 8015546:	9b02      	ldr	r3, [sp, #8]
 8015548:	f003 0301 	and.w	r3, r3, #1
 801554c:	46b8      	mov	r8, r7
 801554e:	9306      	str	r3, [sp, #24]
 8015550:	4607      	mov	r7, r0
 8015552:	9b04      	ldr	r3, [sp, #16]
 8015554:	4631      	mov	r1, r6
 8015556:	3b01      	subs	r3, #1
 8015558:	4650      	mov	r0, sl
 801555a:	9301      	str	r3, [sp, #4]
 801555c:	f7ff fa6a 	bl	8014a34 <quorem>
 8015560:	4641      	mov	r1, r8
 8015562:	9002      	str	r0, [sp, #8]
 8015564:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8015568:	4650      	mov	r0, sl
 801556a:	f000 fca5 	bl	8015eb8 <__mcmp>
 801556e:	463a      	mov	r2, r7
 8015570:	9005      	str	r0, [sp, #20]
 8015572:	4631      	mov	r1, r6
 8015574:	4620      	mov	r0, r4
 8015576:	f000 fcbb 	bl	8015ef0 <__mdiff>
 801557a:	68c2      	ldr	r2, [r0, #12]
 801557c:	4605      	mov	r5, r0
 801557e:	bb02      	cbnz	r2, 80155c2 <_dtoa_r+0xa7a>
 8015580:	4601      	mov	r1, r0
 8015582:	4650      	mov	r0, sl
 8015584:	f000 fc98 	bl	8015eb8 <__mcmp>
 8015588:	4602      	mov	r2, r0
 801558a:	4629      	mov	r1, r5
 801558c:	4620      	mov	r0, r4
 801558e:	9209      	str	r2, [sp, #36]	; 0x24
 8015590:	f000 fa0c 	bl	80159ac <_Bfree>
 8015594:	9b07      	ldr	r3, [sp, #28]
 8015596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015598:	9d04      	ldr	r5, [sp, #16]
 801559a:	ea43 0102 	orr.w	r1, r3, r2
 801559e:	9b06      	ldr	r3, [sp, #24]
 80155a0:	4319      	orrs	r1, r3
 80155a2:	d110      	bne.n	80155c6 <_dtoa_r+0xa7e>
 80155a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80155a8:	d029      	beq.n	80155fe <_dtoa_r+0xab6>
 80155aa:	9b05      	ldr	r3, [sp, #20]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	dd02      	ble.n	80155b6 <_dtoa_r+0xa6e>
 80155b0:	9b02      	ldr	r3, [sp, #8]
 80155b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80155b6:	9b01      	ldr	r3, [sp, #4]
 80155b8:	f883 9000 	strb.w	r9, [r3]
 80155bc:	e774      	b.n	80154a8 <_dtoa_r+0x960>
 80155be:	4638      	mov	r0, r7
 80155c0:	e7ba      	b.n	8015538 <_dtoa_r+0x9f0>
 80155c2:	2201      	movs	r2, #1
 80155c4:	e7e1      	b.n	801558a <_dtoa_r+0xa42>
 80155c6:	9b05      	ldr	r3, [sp, #20]
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	db04      	blt.n	80155d6 <_dtoa_r+0xa8e>
 80155cc:	9907      	ldr	r1, [sp, #28]
 80155ce:	430b      	orrs	r3, r1
 80155d0:	9906      	ldr	r1, [sp, #24]
 80155d2:	430b      	orrs	r3, r1
 80155d4:	d120      	bne.n	8015618 <_dtoa_r+0xad0>
 80155d6:	2a00      	cmp	r2, #0
 80155d8:	dded      	ble.n	80155b6 <_dtoa_r+0xa6e>
 80155da:	4651      	mov	r1, sl
 80155dc:	2201      	movs	r2, #1
 80155de:	4620      	mov	r0, r4
 80155e0:	f000 fbfe 	bl	8015de0 <__lshift>
 80155e4:	4631      	mov	r1, r6
 80155e6:	4682      	mov	sl, r0
 80155e8:	f000 fc66 	bl	8015eb8 <__mcmp>
 80155ec:	2800      	cmp	r0, #0
 80155ee:	dc03      	bgt.n	80155f8 <_dtoa_r+0xab0>
 80155f0:	d1e1      	bne.n	80155b6 <_dtoa_r+0xa6e>
 80155f2:	f019 0f01 	tst.w	r9, #1
 80155f6:	d0de      	beq.n	80155b6 <_dtoa_r+0xa6e>
 80155f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80155fc:	d1d8      	bne.n	80155b0 <_dtoa_r+0xa68>
 80155fe:	9a01      	ldr	r2, [sp, #4]
 8015600:	2339      	movs	r3, #57	; 0x39
 8015602:	7013      	strb	r3, [r2, #0]
 8015604:	462b      	mov	r3, r5
 8015606:	461d      	mov	r5, r3
 8015608:	3b01      	subs	r3, #1
 801560a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801560e:	2a39      	cmp	r2, #57	; 0x39
 8015610:	d06c      	beq.n	80156ec <_dtoa_r+0xba4>
 8015612:	3201      	adds	r2, #1
 8015614:	701a      	strb	r2, [r3, #0]
 8015616:	e747      	b.n	80154a8 <_dtoa_r+0x960>
 8015618:	2a00      	cmp	r2, #0
 801561a:	dd07      	ble.n	801562c <_dtoa_r+0xae4>
 801561c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8015620:	d0ed      	beq.n	80155fe <_dtoa_r+0xab6>
 8015622:	9a01      	ldr	r2, [sp, #4]
 8015624:	f109 0301 	add.w	r3, r9, #1
 8015628:	7013      	strb	r3, [r2, #0]
 801562a:	e73d      	b.n	80154a8 <_dtoa_r+0x960>
 801562c:	9b04      	ldr	r3, [sp, #16]
 801562e:	9a08      	ldr	r2, [sp, #32]
 8015630:	f803 9c01 	strb.w	r9, [r3, #-1]
 8015634:	4293      	cmp	r3, r2
 8015636:	d043      	beq.n	80156c0 <_dtoa_r+0xb78>
 8015638:	4651      	mov	r1, sl
 801563a:	2300      	movs	r3, #0
 801563c:	220a      	movs	r2, #10
 801563e:	4620      	mov	r0, r4
 8015640:	f000 f9d6 	bl	80159f0 <__multadd>
 8015644:	45b8      	cmp	r8, r7
 8015646:	4682      	mov	sl, r0
 8015648:	f04f 0300 	mov.w	r3, #0
 801564c:	f04f 020a 	mov.w	r2, #10
 8015650:	4641      	mov	r1, r8
 8015652:	4620      	mov	r0, r4
 8015654:	d107      	bne.n	8015666 <_dtoa_r+0xb1e>
 8015656:	f000 f9cb 	bl	80159f0 <__multadd>
 801565a:	4680      	mov	r8, r0
 801565c:	4607      	mov	r7, r0
 801565e:	9b04      	ldr	r3, [sp, #16]
 8015660:	3301      	adds	r3, #1
 8015662:	9304      	str	r3, [sp, #16]
 8015664:	e775      	b.n	8015552 <_dtoa_r+0xa0a>
 8015666:	f000 f9c3 	bl	80159f0 <__multadd>
 801566a:	4639      	mov	r1, r7
 801566c:	4680      	mov	r8, r0
 801566e:	2300      	movs	r3, #0
 8015670:	220a      	movs	r2, #10
 8015672:	4620      	mov	r0, r4
 8015674:	f000 f9bc 	bl	80159f0 <__multadd>
 8015678:	4607      	mov	r7, r0
 801567a:	e7f0      	b.n	801565e <_dtoa_r+0xb16>
 801567c:	9b04      	ldr	r3, [sp, #16]
 801567e:	9301      	str	r3, [sp, #4]
 8015680:	9d00      	ldr	r5, [sp, #0]
 8015682:	4631      	mov	r1, r6
 8015684:	4650      	mov	r0, sl
 8015686:	f7ff f9d5 	bl	8014a34 <quorem>
 801568a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801568e:	9b00      	ldr	r3, [sp, #0]
 8015690:	f805 9b01 	strb.w	r9, [r5], #1
 8015694:	1aea      	subs	r2, r5, r3
 8015696:	9b01      	ldr	r3, [sp, #4]
 8015698:	4293      	cmp	r3, r2
 801569a:	dd07      	ble.n	80156ac <_dtoa_r+0xb64>
 801569c:	4651      	mov	r1, sl
 801569e:	2300      	movs	r3, #0
 80156a0:	220a      	movs	r2, #10
 80156a2:	4620      	mov	r0, r4
 80156a4:	f000 f9a4 	bl	80159f0 <__multadd>
 80156a8:	4682      	mov	sl, r0
 80156aa:	e7ea      	b.n	8015682 <_dtoa_r+0xb3a>
 80156ac:	9b01      	ldr	r3, [sp, #4]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	bfc8      	it	gt
 80156b2:	461d      	movgt	r5, r3
 80156b4:	9b00      	ldr	r3, [sp, #0]
 80156b6:	bfd8      	it	le
 80156b8:	2501      	movle	r5, #1
 80156ba:	441d      	add	r5, r3
 80156bc:	f04f 0800 	mov.w	r8, #0
 80156c0:	4651      	mov	r1, sl
 80156c2:	2201      	movs	r2, #1
 80156c4:	4620      	mov	r0, r4
 80156c6:	f000 fb8b 	bl	8015de0 <__lshift>
 80156ca:	4631      	mov	r1, r6
 80156cc:	4682      	mov	sl, r0
 80156ce:	f000 fbf3 	bl	8015eb8 <__mcmp>
 80156d2:	2800      	cmp	r0, #0
 80156d4:	dc96      	bgt.n	8015604 <_dtoa_r+0xabc>
 80156d6:	d102      	bne.n	80156de <_dtoa_r+0xb96>
 80156d8:	f019 0f01 	tst.w	r9, #1
 80156dc:	d192      	bne.n	8015604 <_dtoa_r+0xabc>
 80156de:	462b      	mov	r3, r5
 80156e0:	461d      	mov	r5, r3
 80156e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80156e6:	2a30      	cmp	r2, #48	; 0x30
 80156e8:	d0fa      	beq.n	80156e0 <_dtoa_r+0xb98>
 80156ea:	e6dd      	b.n	80154a8 <_dtoa_r+0x960>
 80156ec:	9a00      	ldr	r2, [sp, #0]
 80156ee:	429a      	cmp	r2, r3
 80156f0:	d189      	bne.n	8015606 <_dtoa_r+0xabe>
 80156f2:	f10b 0b01 	add.w	fp, fp, #1
 80156f6:	2331      	movs	r3, #49	; 0x31
 80156f8:	e796      	b.n	8015628 <_dtoa_r+0xae0>
 80156fa:	4b0a      	ldr	r3, [pc, #40]	; (8015724 <_dtoa_r+0xbdc>)
 80156fc:	f7ff ba99 	b.w	8014c32 <_dtoa_r+0xea>
 8015700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015702:	2b00      	cmp	r3, #0
 8015704:	f47f aa6d 	bne.w	8014be2 <_dtoa_r+0x9a>
 8015708:	4b07      	ldr	r3, [pc, #28]	; (8015728 <_dtoa_r+0xbe0>)
 801570a:	f7ff ba92 	b.w	8014c32 <_dtoa_r+0xea>
 801570e:	9b01      	ldr	r3, [sp, #4]
 8015710:	2b00      	cmp	r3, #0
 8015712:	dcb5      	bgt.n	8015680 <_dtoa_r+0xb38>
 8015714:	9b07      	ldr	r3, [sp, #28]
 8015716:	2b02      	cmp	r3, #2
 8015718:	f73f aeb1 	bgt.w	801547e <_dtoa_r+0x936>
 801571c:	e7b0      	b.n	8015680 <_dtoa_r+0xb38>
 801571e:	bf00      	nop
 8015720:	08018e9d 	.word	0x08018e9d
 8015724:	08018df8 	.word	0x08018df8
 8015728:	08018e21 	.word	0x08018e21

0801572c <_free_r>:
 801572c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801572e:	2900      	cmp	r1, #0
 8015730:	d044      	beq.n	80157bc <_free_r+0x90>
 8015732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015736:	9001      	str	r0, [sp, #4]
 8015738:	2b00      	cmp	r3, #0
 801573a:	f1a1 0404 	sub.w	r4, r1, #4
 801573e:	bfb8      	it	lt
 8015740:	18e4      	addlt	r4, r4, r3
 8015742:	f000 f8e7 	bl	8015914 <__malloc_lock>
 8015746:	4a1e      	ldr	r2, [pc, #120]	; (80157c0 <_free_r+0x94>)
 8015748:	9801      	ldr	r0, [sp, #4]
 801574a:	6813      	ldr	r3, [r2, #0]
 801574c:	b933      	cbnz	r3, 801575c <_free_r+0x30>
 801574e:	6063      	str	r3, [r4, #4]
 8015750:	6014      	str	r4, [r2, #0]
 8015752:	b003      	add	sp, #12
 8015754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015758:	f000 b8e2 	b.w	8015920 <__malloc_unlock>
 801575c:	42a3      	cmp	r3, r4
 801575e:	d908      	bls.n	8015772 <_free_r+0x46>
 8015760:	6825      	ldr	r5, [r4, #0]
 8015762:	1961      	adds	r1, r4, r5
 8015764:	428b      	cmp	r3, r1
 8015766:	bf01      	itttt	eq
 8015768:	6819      	ldreq	r1, [r3, #0]
 801576a:	685b      	ldreq	r3, [r3, #4]
 801576c:	1949      	addeq	r1, r1, r5
 801576e:	6021      	streq	r1, [r4, #0]
 8015770:	e7ed      	b.n	801574e <_free_r+0x22>
 8015772:	461a      	mov	r2, r3
 8015774:	685b      	ldr	r3, [r3, #4]
 8015776:	b10b      	cbz	r3, 801577c <_free_r+0x50>
 8015778:	42a3      	cmp	r3, r4
 801577a:	d9fa      	bls.n	8015772 <_free_r+0x46>
 801577c:	6811      	ldr	r1, [r2, #0]
 801577e:	1855      	adds	r5, r2, r1
 8015780:	42a5      	cmp	r5, r4
 8015782:	d10b      	bne.n	801579c <_free_r+0x70>
 8015784:	6824      	ldr	r4, [r4, #0]
 8015786:	4421      	add	r1, r4
 8015788:	1854      	adds	r4, r2, r1
 801578a:	42a3      	cmp	r3, r4
 801578c:	6011      	str	r1, [r2, #0]
 801578e:	d1e0      	bne.n	8015752 <_free_r+0x26>
 8015790:	681c      	ldr	r4, [r3, #0]
 8015792:	685b      	ldr	r3, [r3, #4]
 8015794:	6053      	str	r3, [r2, #4]
 8015796:	440c      	add	r4, r1
 8015798:	6014      	str	r4, [r2, #0]
 801579a:	e7da      	b.n	8015752 <_free_r+0x26>
 801579c:	d902      	bls.n	80157a4 <_free_r+0x78>
 801579e:	230c      	movs	r3, #12
 80157a0:	6003      	str	r3, [r0, #0]
 80157a2:	e7d6      	b.n	8015752 <_free_r+0x26>
 80157a4:	6825      	ldr	r5, [r4, #0]
 80157a6:	1961      	adds	r1, r4, r5
 80157a8:	428b      	cmp	r3, r1
 80157aa:	bf04      	itt	eq
 80157ac:	6819      	ldreq	r1, [r3, #0]
 80157ae:	685b      	ldreq	r3, [r3, #4]
 80157b0:	6063      	str	r3, [r4, #4]
 80157b2:	bf04      	itt	eq
 80157b4:	1949      	addeq	r1, r1, r5
 80157b6:	6021      	streq	r1, [r4, #0]
 80157b8:	6054      	str	r4, [r2, #4]
 80157ba:	e7ca      	b.n	8015752 <_free_r+0x26>
 80157bc:	b003      	add	sp, #12
 80157be:	bd30      	pop	{r4, r5, pc}
 80157c0:	2001222c 	.word	0x2001222c

080157c4 <malloc>:
 80157c4:	4b02      	ldr	r3, [pc, #8]	; (80157d0 <malloc+0xc>)
 80157c6:	4601      	mov	r1, r0
 80157c8:	6818      	ldr	r0, [r3, #0]
 80157ca:	f000 b823 	b.w	8015814 <_malloc_r>
 80157ce:	bf00      	nop
 80157d0:	20000088 	.word	0x20000088

080157d4 <sbrk_aligned>:
 80157d4:	b570      	push	{r4, r5, r6, lr}
 80157d6:	4e0e      	ldr	r6, [pc, #56]	; (8015810 <sbrk_aligned+0x3c>)
 80157d8:	460c      	mov	r4, r1
 80157da:	6831      	ldr	r1, [r6, #0]
 80157dc:	4605      	mov	r5, r0
 80157de:	b911      	cbnz	r1, 80157e6 <sbrk_aligned+0x12>
 80157e0:	f001 fe1a 	bl	8017418 <_sbrk_r>
 80157e4:	6030      	str	r0, [r6, #0]
 80157e6:	4621      	mov	r1, r4
 80157e8:	4628      	mov	r0, r5
 80157ea:	f001 fe15 	bl	8017418 <_sbrk_r>
 80157ee:	1c43      	adds	r3, r0, #1
 80157f0:	d00a      	beq.n	8015808 <sbrk_aligned+0x34>
 80157f2:	1cc4      	adds	r4, r0, #3
 80157f4:	f024 0403 	bic.w	r4, r4, #3
 80157f8:	42a0      	cmp	r0, r4
 80157fa:	d007      	beq.n	801580c <sbrk_aligned+0x38>
 80157fc:	1a21      	subs	r1, r4, r0
 80157fe:	4628      	mov	r0, r5
 8015800:	f001 fe0a 	bl	8017418 <_sbrk_r>
 8015804:	3001      	adds	r0, #1
 8015806:	d101      	bne.n	801580c <sbrk_aligned+0x38>
 8015808:	f04f 34ff 	mov.w	r4, #4294967295
 801580c:	4620      	mov	r0, r4
 801580e:	bd70      	pop	{r4, r5, r6, pc}
 8015810:	20012230 	.word	0x20012230

08015814 <_malloc_r>:
 8015814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015818:	1ccd      	adds	r5, r1, #3
 801581a:	f025 0503 	bic.w	r5, r5, #3
 801581e:	3508      	adds	r5, #8
 8015820:	2d0c      	cmp	r5, #12
 8015822:	bf38      	it	cc
 8015824:	250c      	movcc	r5, #12
 8015826:	2d00      	cmp	r5, #0
 8015828:	4607      	mov	r7, r0
 801582a:	db01      	blt.n	8015830 <_malloc_r+0x1c>
 801582c:	42a9      	cmp	r1, r5
 801582e:	d905      	bls.n	801583c <_malloc_r+0x28>
 8015830:	230c      	movs	r3, #12
 8015832:	603b      	str	r3, [r7, #0]
 8015834:	2600      	movs	r6, #0
 8015836:	4630      	mov	r0, r6
 8015838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801583c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015910 <_malloc_r+0xfc>
 8015840:	f000 f868 	bl	8015914 <__malloc_lock>
 8015844:	f8d8 3000 	ldr.w	r3, [r8]
 8015848:	461c      	mov	r4, r3
 801584a:	bb5c      	cbnz	r4, 80158a4 <_malloc_r+0x90>
 801584c:	4629      	mov	r1, r5
 801584e:	4638      	mov	r0, r7
 8015850:	f7ff ffc0 	bl	80157d4 <sbrk_aligned>
 8015854:	1c43      	adds	r3, r0, #1
 8015856:	4604      	mov	r4, r0
 8015858:	d155      	bne.n	8015906 <_malloc_r+0xf2>
 801585a:	f8d8 4000 	ldr.w	r4, [r8]
 801585e:	4626      	mov	r6, r4
 8015860:	2e00      	cmp	r6, #0
 8015862:	d145      	bne.n	80158f0 <_malloc_r+0xdc>
 8015864:	2c00      	cmp	r4, #0
 8015866:	d048      	beq.n	80158fa <_malloc_r+0xe6>
 8015868:	6823      	ldr	r3, [r4, #0]
 801586a:	4631      	mov	r1, r6
 801586c:	4638      	mov	r0, r7
 801586e:	eb04 0903 	add.w	r9, r4, r3
 8015872:	f001 fdd1 	bl	8017418 <_sbrk_r>
 8015876:	4581      	cmp	r9, r0
 8015878:	d13f      	bne.n	80158fa <_malloc_r+0xe6>
 801587a:	6821      	ldr	r1, [r4, #0]
 801587c:	1a6d      	subs	r5, r5, r1
 801587e:	4629      	mov	r1, r5
 8015880:	4638      	mov	r0, r7
 8015882:	f7ff ffa7 	bl	80157d4 <sbrk_aligned>
 8015886:	3001      	adds	r0, #1
 8015888:	d037      	beq.n	80158fa <_malloc_r+0xe6>
 801588a:	6823      	ldr	r3, [r4, #0]
 801588c:	442b      	add	r3, r5
 801588e:	6023      	str	r3, [r4, #0]
 8015890:	f8d8 3000 	ldr.w	r3, [r8]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d038      	beq.n	801590a <_malloc_r+0xf6>
 8015898:	685a      	ldr	r2, [r3, #4]
 801589a:	42a2      	cmp	r2, r4
 801589c:	d12b      	bne.n	80158f6 <_malloc_r+0xe2>
 801589e:	2200      	movs	r2, #0
 80158a0:	605a      	str	r2, [r3, #4]
 80158a2:	e00f      	b.n	80158c4 <_malloc_r+0xb0>
 80158a4:	6822      	ldr	r2, [r4, #0]
 80158a6:	1b52      	subs	r2, r2, r5
 80158a8:	d41f      	bmi.n	80158ea <_malloc_r+0xd6>
 80158aa:	2a0b      	cmp	r2, #11
 80158ac:	d917      	bls.n	80158de <_malloc_r+0xca>
 80158ae:	1961      	adds	r1, r4, r5
 80158b0:	42a3      	cmp	r3, r4
 80158b2:	6025      	str	r5, [r4, #0]
 80158b4:	bf18      	it	ne
 80158b6:	6059      	strne	r1, [r3, #4]
 80158b8:	6863      	ldr	r3, [r4, #4]
 80158ba:	bf08      	it	eq
 80158bc:	f8c8 1000 	streq.w	r1, [r8]
 80158c0:	5162      	str	r2, [r4, r5]
 80158c2:	604b      	str	r3, [r1, #4]
 80158c4:	4638      	mov	r0, r7
 80158c6:	f104 060b 	add.w	r6, r4, #11
 80158ca:	f000 f829 	bl	8015920 <__malloc_unlock>
 80158ce:	f026 0607 	bic.w	r6, r6, #7
 80158d2:	1d23      	adds	r3, r4, #4
 80158d4:	1af2      	subs	r2, r6, r3
 80158d6:	d0ae      	beq.n	8015836 <_malloc_r+0x22>
 80158d8:	1b9b      	subs	r3, r3, r6
 80158da:	50a3      	str	r3, [r4, r2]
 80158dc:	e7ab      	b.n	8015836 <_malloc_r+0x22>
 80158de:	42a3      	cmp	r3, r4
 80158e0:	6862      	ldr	r2, [r4, #4]
 80158e2:	d1dd      	bne.n	80158a0 <_malloc_r+0x8c>
 80158e4:	f8c8 2000 	str.w	r2, [r8]
 80158e8:	e7ec      	b.n	80158c4 <_malloc_r+0xb0>
 80158ea:	4623      	mov	r3, r4
 80158ec:	6864      	ldr	r4, [r4, #4]
 80158ee:	e7ac      	b.n	801584a <_malloc_r+0x36>
 80158f0:	4634      	mov	r4, r6
 80158f2:	6876      	ldr	r6, [r6, #4]
 80158f4:	e7b4      	b.n	8015860 <_malloc_r+0x4c>
 80158f6:	4613      	mov	r3, r2
 80158f8:	e7cc      	b.n	8015894 <_malloc_r+0x80>
 80158fa:	230c      	movs	r3, #12
 80158fc:	603b      	str	r3, [r7, #0]
 80158fe:	4638      	mov	r0, r7
 8015900:	f000 f80e 	bl	8015920 <__malloc_unlock>
 8015904:	e797      	b.n	8015836 <_malloc_r+0x22>
 8015906:	6025      	str	r5, [r4, #0]
 8015908:	e7dc      	b.n	80158c4 <_malloc_r+0xb0>
 801590a:	605b      	str	r3, [r3, #4]
 801590c:	deff      	udf	#255	; 0xff
 801590e:	bf00      	nop
 8015910:	2001222c 	.word	0x2001222c

08015914 <__malloc_lock>:
 8015914:	4801      	ldr	r0, [pc, #4]	; (801591c <__malloc_lock+0x8>)
 8015916:	f7ff b877 	b.w	8014a08 <__retarget_lock_acquire_recursive>
 801591a:	bf00      	nop
 801591c:	20012228 	.word	0x20012228

08015920 <__malloc_unlock>:
 8015920:	4801      	ldr	r0, [pc, #4]	; (8015928 <__malloc_unlock+0x8>)
 8015922:	f7ff b872 	b.w	8014a0a <__retarget_lock_release_recursive>
 8015926:	bf00      	nop
 8015928:	20012228 	.word	0x20012228

0801592c <_Balloc>:
 801592c:	b570      	push	{r4, r5, r6, lr}
 801592e:	69c6      	ldr	r6, [r0, #28]
 8015930:	4604      	mov	r4, r0
 8015932:	460d      	mov	r5, r1
 8015934:	b976      	cbnz	r6, 8015954 <_Balloc+0x28>
 8015936:	2010      	movs	r0, #16
 8015938:	f7ff ff44 	bl	80157c4 <malloc>
 801593c:	4602      	mov	r2, r0
 801593e:	61e0      	str	r0, [r4, #28]
 8015940:	b920      	cbnz	r0, 801594c <_Balloc+0x20>
 8015942:	4b18      	ldr	r3, [pc, #96]	; (80159a4 <_Balloc+0x78>)
 8015944:	4818      	ldr	r0, [pc, #96]	; (80159a8 <_Balloc+0x7c>)
 8015946:	216b      	movs	r1, #107	; 0x6b
 8015948:	f001 fd7e 	bl	8017448 <__assert_func>
 801594c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015950:	6006      	str	r6, [r0, #0]
 8015952:	60c6      	str	r6, [r0, #12]
 8015954:	69e6      	ldr	r6, [r4, #28]
 8015956:	68f3      	ldr	r3, [r6, #12]
 8015958:	b183      	cbz	r3, 801597c <_Balloc+0x50>
 801595a:	69e3      	ldr	r3, [r4, #28]
 801595c:	68db      	ldr	r3, [r3, #12]
 801595e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015962:	b9b8      	cbnz	r0, 8015994 <_Balloc+0x68>
 8015964:	2101      	movs	r1, #1
 8015966:	fa01 f605 	lsl.w	r6, r1, r5
 801596a:	1d72      	adds	r2, r6, #5
 801596c:	0092      	lsls	r2, r2, #2
 801596e:	4620      	mov	r0, r4
 8015970:	f001 fd88 	bl	8017484 <_calloc_r>
 8015974:	b160      	cbz	r0, 8015990 <_Balloc+0x64>
 8015976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801597a:	e00e      	b.n	801599a <_Balloc+0x6e>
 801597c:	2221      	movs	r2, #33	; 0x21
 801597e:	2104      	movs	r1, #4
 8015980:	4620      	mov	r0, r4
 8015982:	f001 fd7f 	bl	8017484 <_calloc_r>
 8015986:	69e3      	ldr	r3, [r4, #28]
 8015988:	60f0      	str	r0, [r6, #12]
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d1e4      	bne.n	801595a <_Balloc+0x2e>
 8015990:	2000      	movs	r0, #0
 8015992:	bd70      	pop	{r4, r5, r6, pc}
 8015994:	6802      	ldr	r2, [r0, #0]
 8015996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801599a:	2300      	movs	r3, #0
 801599c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80159a0:	e7f7      	b.n	8015992 <_Balloc+0x66>
 80159a2:	bf00      	nop
 80159a4:	08018e2e 	.word	0x08018e2e
 80159a8:	08018eae 	.word	0x08018eae

080159ac <_Bfree>:
 80159ac:	b570      	push	{r4, r5, r6, lr}
 80159ae:	69c6      	ldr	r6, [r0, #28]
 80159b0:	4605      	mov	r5, r0
 80159b2:	460c      	mov	r4, r1
 80159b4:	b976      	cbnz	r6, 80159d4 <_Bfree+0x28>
 80159b6:	2010      	movs	r0, #16
 80159b8:	f7ff ff04 	bl	80157c4 <malloc>
 80159bc:	4602      	mov	r2, r0
 80159be:	61e8      	str	r0, [r5, #28]
 80159c0:	b920      	cbnz	r0, 80159cc <_Bfree+0x20>
 80159c2:	4b09      	ldr	r3, [pc, #36]	; (80159e8 <_Bfree+0x3c>)
 80159c4:	4809      	ldr	r0, [pc, #36]	; (80159ec <_Bfree+0x40>)
 80159c6:	218f      	movs	r1, #143	; 0x8f
 80159c8:	f001 fd3e 	bl	8017448 <__assert_func>
 80159cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80159d0:	6006      	str	r6, [r0, #0]
 80159d2:	60c6      	str	r6, [r0, #12]
 80159d4:	b13c      	cbz	r4, 80159e6 <_Bfree+0x3a>
 80159d6:	69eb      	ldr	r3, [r5, #28]
 80159d8:	6862      	ldr	r2, [r4, #4]
 80159da:	68db      	ldr	r3, [r3, #12]
 80159dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80159e0:	6021      	str	r1, [r4, #0]
 80159e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80159e6:	bd70      	pop	{r4, r5, r6, pc}
 80159e8:	08018e2e 	.word	0x08018e2e
 80159ec:	08018eae 	.word	0x08018eae

080159f0 <__multadd>:
 80159f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159f4:	690d      	ldr	r5, [r1, #16]
 80159f6:	4607      	mov	r7, r0
 80159f8:	460c      	mov	r4, r1
 80159fa:	461e      	mov	r6, r3
 80159fc:	f101 0c14 	add.w	ip, r1, #20
 8015a00:	2000      	movs	r0, #0
 8015a02:	f8dc 3000 	ldr.w	r3, [ip]
 8015a06:	b299      	uxth	r1, r3
 8015a08:	fb02 6101 	mla	r1, r2, r1, r6
 8015a0c:	0c1e      	lsrs	r6, r3, #16
 8015a0e:	0c0b      	lsrs	r3, r1, #16
 8015a10:	fb02 3306 	mla	r3, r2, r6, r3
 8015a14:	b289      	uxth	r1, r1
 8015a16:	3001      	adds	r0, #1
 8015a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015a1c:	4285      	cmp	r5, r0
 8015a1e:	f84c 1b04 	str.w	r1, [ip], #4
 8015a22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015a26:	dcec      	bgt.n	8015a02 <__multadd+0x12>
 8015a28:	b30e      	cbz	r6, 8015a6e <__multadd+0x7e>
 8015a2a:	68a3      	ldr	r3, [r4, #8]
 8015a2c:	42ab      	cmp	r3, r5
 8015a2e:	dc19      	bgt.n	8015a64 <__multadd+0x74>
 8015a30:	6861      	ldr	r1, [r4, #4]
 8015a32:	4638      	mov	r0, r7
 8015a34:	3101      	adds	r1, #1
 8015a36:	f7ff ff79 	bl	801592c <_Balloc>
 8015a3a:	4680      	mov	r8, r0
 8015a3c:	b928      	cbnz	r0, 8015a4a <__multadd+0x5a>
 8015a3e:	4602      	mov	r2, r0
 8015a40:	4b0c      	ldr	r3, [pc, #48]	; (8015a74 <__multadd+0x84>)
 8015a42:	480d      	ldr	r0, [pc, #52]	; (8015a78 <__multadd+0x88>)
 8015a44:	21ba      	movs	r1, #186	; 0xba
 8015a46:	f001 fcff 	bl	8017448 <__assert_func>
 8015a4a:	6922      	ldr	r2, [r4, #16]
 8015a4c:	3202      	adds	r2, #2
 8015a4e:	f104 010c 	add.w	r1, r4, #12
 8015a52:	0092      	lsls	r2, r2, #2
 8015a54:	300c      	adds	r0, #12
 8015a56:	f7fe ffd9 	bl	8014a0c <memcpy>
 8015a5a:	4621      	mov	r1, r4
 8015a5c:	4638      	mov	r0, r7
 8015a5e:	f7ff ffa5 	bl	80159ac <_Bfree>
 8015a62:	4644      	mov	r4, r8
 8015a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015a68:	3501      	adds	r5, #1
 8015a6a:	615e      	str	r6, [r3, #20]
 8015a6c:	6125      	str	r5, [r4, #16]
 8015a6e:	4620      	mov	r0, r4
 8015a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a74:	08018e9d 	.word	0x08018e9d
 8015a78:	08018eae 	.word	0x08018eae

08015a7c <__s2b>:
 8015a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a80:	460c      	mov	r4, r1
 8015a82:	4615      	mov	r5, r2
 8015a84:	461f      	mov	r7, r3
 8015a86:	2209      	movs	r2, #9
 8015a88:	3308      	adds	r3, #8
 8015a8a:	4606      	mov	r6, r0
 8015a8c:	fb93 f3f2 	sdiv	r3, r3, r2
 8015a90:	2100      	movs	r1, #0
 8015a92:	2201      	movs	r2, #1
 8015a94:	429a      	cmp	r2, r3
 8015a96:	db09      	blt.n	8015aac <__s2b+0x30>
 8015a98:	4630      	mov	r0, r6
 8015a9a:	f7ff ff47 	bl	801592c <_Balloc>
 8015a9e:	b940      	cbnz	r0, 8015ab2 <__s2b+0x36>
 8015aa0:	4602      	mov	r2, r0
 8015aa2:	4b19      	ldr	r3, [pc, #100]	; (8015b08 <__s2b+0x8c>)
 8015aa4:	4819      	ldr	r0, [pc, #100]	; (8015b0c <__s2b+0x90>)
 8015aa6:	21d3      	movs	r1, #211	; 0xd3
 8015aa8:	f001 fcce 	bl	8017448 <__assert_func>
 8015aac:	0052      	lsls	r2, r2, #1
 8015aae:	3101      	adds	r1, #1
 8015ab0:	e7f0      	b.n	8015a94 <__s2b+0x18>
 8015ab2:	9b08      	ldr	r3, [sp, #32]
 8015ab4:	6143      	str	r3, [r0, #20]
 8015ab6:	2d09      	cmp	r5, #9
 8015ab8:	f04f 0301 	mov.w	r3, #1
 8015abc:	6103      	str	r3, [r0, #16]
 8015abe:	dd16      	ble.n	8015aee <__s2b+0x72>
 8015ac0:	f104 0909 	add.w	r9, r4, #9
 8015ac4:	46c8      	mov	r8, r9
 8015ac6:	442c      	add	r4, r5
 8015ac8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015acc:	4601      	mov	r1, r0
 8015ace:	3b30      	subs	r3, #48	; 0x30
 8015ad0:	220a      	movs	r2, #10
 8015ad2:	4630      	mov	r0, r6
 8015ad4:	f7ff ff8c 	bl	80159f0 <__multadd>
 8015ad8:	45a0      	cmp	r8, r4
 8015ada:	d1f5      	bne.n	8015ac8 <__s2b+0x4c>
 8015adc:	f1a5 0408 	sub.w	r4, r5, #8
 8015ae0:	444c      	add	r4, r9
 8015ae2:	1b2d      	subs	r5, r5, r4
 8015ae4:	1963      	adds	r3, r4, r5
 8015ae6:	42bb      	cmp	r3, r7
 8015ae8:	db04      	blt.n	8015af4 <__s2b+0x78>
 8015aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015aee:	340a      	adds	r4, #10
 8015af0:	2509      	movs	r5, #9
 8015af2:	e7f6      	b.n	8015ae2 <__s2b+0x66>
 8015af4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015af8:	4601      	mov	r1, r0
 8015afa:	3b30      	subs	r3, #48	; 0x30
 8015afc:	220a      	movs	r2, #10
 8015afe:	4630      	mov	r0, r6
 8015b00:	f7ff ff76 	bl	80159f0 <__multadd>
 8015b04:	e7ee      	b.n	8015ae4 <__s2b+0x68>
 8015b06:	bf00      	nop
 8015b08:	08018e9d 	.word	0x08018e9d
 8015b0c:	08018eae 	.word	0x08018eae

08015b10 <__hi0bits>:
 8015b10:	0c03      	lsrs	r3, r0, #16
 8015b12:	041b      	lsls	r3, r3, #16
 8015b14:	b9d3      	cbnz	r3, 8015b4c <__hi0bits+0x3c>
 8015b16:	0400      	lsls	r0, r0, #16
 8015b18:	2310      	movs	r3, #16
 8015b1a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015b1e:	bf04      	itt	eq
 8015b20:	0200      	lsleq	r0, r0, #8
 8015b22:	3308      	addeq	r3, #8
 8015b24:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015b28:	bf04      	itt	eq
 8015b2a:	0100      	lsleq	r0, r0, #4
 8015b2c:	3304      	addeq	r3, #4
 8015b2e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015b32:	bf04      	itt	eq
 8015b34:	0080      	lsleq	r0, r0, #2
 8015b36:	3302      	addeq	r3, #2
 8015b38:	2800      	cmp	r0, #0
 8015b3a:	db05      	blt.n	8015b48 <__hi0bits+0x38>
 8015b3c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015b40:	f103 0301 	add.w	r3, r3, #1
 8015b44:	bf08      	it	eq
 8015b46:	2320      	moveq	r3, #32
 8015b48:	4618      	mov	r0, r3
 8015b4a:	4770      	bx	lr
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	e7e4      	b.n	8015b1a <__hi0bits+0xa>

08015b50 <__lo0bits>:
 8015b50:	6803      	ldr	r3, [r0, #0]
 8015b52:	f013 0207 	ands.w	r2, r3, #7
 8015b56:	d00c      	beq.n	8015b72 <__lo0bits+0x22>
 8015b58:	07d9      	lsls	r1, r3, #31
 8015b5a:	d422      	bmi.n	8015ba2 <__lo0bits+0x52>
 8015b5c:	079a      	lsls	r2, r3, #30
 8015b5e:	bf49      	itett	mi
 8015b60:	085b      	lsrmi	r3, r3, #1
 8015b62:	089b      	lsrpl	r3, r3, #2
 8015b64:	6003      	strmi	r3, [r0, #0]
 8015b66:	2201      	movmi	r2, #1
 8015b68:	bf5c      	itt	pl
 8015b6a:	6003      	strpl	r3, [r0, #0]
 8015b6c:	2202      	movpl	r2, #2
 8015b6e:	4610      	mov	r0, r2
 8015b70:	4770      	bx	lr
 8015b72:	b299      	uxth	r1, r3
 8015b74:	b909      	cbnz	r1, 8015b7a <__lo0bits+0x2a>
 8015b76:	0c1b      	lsrs	r3, r3, #16
 8015b78:	2210      	movs	r2, #16
 8015b7a:	b2d9      	uxtb	r1, r3
 8015b7c:	b909      	cbnz	r1, 8015b82 <__lo0bits+0x32>
 8015b7e:	3208      	adds	r2, #8
 8015b80:	0a1b      	lsrs	r3, r3, #8
 8015b82:	0719      	lsls	r1, r3, #28
 8015b84:	bf04      	itt	eq
 8015b86:	091b      	lsreq	r3, r3, #4
 8015b88:	3204      	addeq	r2, #4
 8015b8a:	0799      	lsls	r1, r3, #30
 8015b8c:	bf04      	itt	eq
 8015b8e:	089b      	lsreq	r3, r3, #2
 8015b90:	3202      	addeq	r2, #2
 8015b92:	07d9      	lsls	r1, r3, #31
 8015b94:	d403      	bmi.n	8015b9e <__lo0bits+0x4e>
 8015b96:	085b      	lsrs	r3, r3, #1
 8015b98:	f102 0201 	add.w	r2, r2, #1
 8015b9c:	d003      	beq.n	8015ba6 <__lo0bits+0x56>
 8015b9e:	6003      	str	r3, [r0, #0]
 8015ba0:	e7e5      	b.n	8015b6e <__lo0bits+0x1e>
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	e7e3      	b.n	8015b6e <__lo0bits+0x1e>
 8015ba6:	2220      	movs	r2, #32
 8015ba8:	e7e1      	b.n	8015b6e <__lo0bits+0x1e>
	...

08015bac <__i2b>:
 8015bac:	b510      	push	{r4, lr}
 8015bae:	460c      	mov	r4, r1
 8015bb0:	2101      	movs	r1, #1
 8015bb2:	f7ff febb 	bl	801592c <_Balloc>
 8015bb6:	4602      	mov	r2, r0
 8015bb8:	b928      	cbnz	r0, 8015bc6 <__i2b+0x1a>
 8015bba:	4b05      	ldr	r3, [pc, #20]	; (8015bd0 <__i2b+0x24>)
 8015bbc:	4805      	ldr	r0, [pc, #20]	; (8015bd4 <__i2b+0x28>)
 8015bbe:	f240 1145 	movw	r1, #325	; 0x145
 8015bc2:	f001 fc41 	bl	8017448 <__assert_func>
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	6144      	str	r4, [r0, #20]
 8015bca:	6103      	str	r3, [r0, #16]
 8015bcc:	bd10      	pop	{r4, pc}
 8015bce:	bf00      	nop
 8015bd0:	08018e9d 	.word	0x08018e9d
 8015bd4:	08018eae 	.word	0x08018eae

08015bd8 <__multiply>:
 8015bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bdc:	4691      	mov	r9, r2
 8015bde:	690a      	ldr	r2, [r1, #16]
 8015be0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015be4:	429a      	cmp	r2, r3
 8015be6:	bfb8      	it	lt
 8015be8:	460b      	movlt	r3, r1
 8015bea:	460c      	mov	r4, r1
 8015bec:	bfbc      	itt	lt
 8015bee:	464c      	movlt	r4, r9
 8015bf0:	4699      	movlt	r9, r3
 8015bf2:	6927      	ldr	r7, [r4, #16]
 8015bf4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015bf8:	68a3      	ldr	r3, [r4, #8]
 8015bfa:	6861      	ldr	r1, [r4, #4]
 8015bfc:	eb07 060a 	add.w	r6, r7, sl
 8015c00:	42b3      	cmp	r3, r6
 8015c02:	b085      	sub	sp, #20
 8015c04:	bfb8      	it	lt
 8015c06:	3101      	addlt	r1, #1
 8015c08:	f7ff fe90 	bl	801592c <_Balloc>
 8015c0c:	b930      	cbnz	r0, 8015c1c <__multiply+0x44>
 8015c0e:	4602      	mov	r2, r0
 8015c10:	4b44      	ldr	r3, [pc, #272]	; (8015d24 <__multiply+0x14c>)
 8015c12:	4845      	ldr	r0, [pc, #276]	; (8015d28 <__multiply+0x150>)
 8015c14:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015c18:	f001 fc16 	bl	8017448 <__assert_func>
 8015c1c:	f100 0514 	add.w	r5, r0, #20
 8015c20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015c24:	462b      	mov	r3, r5
 8015c26:	2200      	movs	r2, #0
 8015c28:	4543      	cmp	r3, r8
 8015c2a:	d321      	bcc.n	8015c70 <__multiply+0x98>
 8015c2c:	f104 0314 	add.w	r3, r4, #20
 8015c30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015c34:	f109 0314 	add.w	r3, r9, #20
 8015c38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015c3c:	9202      	str	r2, [sp, #8]
 8015c3e:	1b3a      	subs	r2, r7, r4
 8015c40:	3a15      	subs	r2, #21
 8015c42:	f022 0203 	bic.w	r2, r2, #3
 8015c46:	3204      	adds	r2, #4
 8015c48:	f104 0115 	add.w	r1, r4, #21
 8015c4c:	428f      	cmp	r7, r1
 8015c4e:	bf38      	it	cc
 8015c50:	2204      	movcc	r2, #4
 8015c52:	9201      	str	r2, [sp, #4]
 8015c54:	9a02      	ldr	r2, [sp, #8]
 8015c56:	9303      	str	r3, [sp, #12]
 8015c58:	429a      	cmp	r2, r3
 8015c5a:	d80c      	bhi.n	8015c76 <__multiply+0x9e>
 8015c5c:	2e00      	cmp	r6, #0
 8015c5e:	dd03      	ble.n	8015c68 <__multiply+0x90>
 8015c60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d05b      	beq.n	8015d20 <__multiply+0x148>
 8015c68:	6106      	str	r6, [r0, #16]
 8015c6a:	b005      	add	sp, #20
 8015c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c70:	f843 2b04 	str.w	r2, [r3], #4
 8015c74:	e7d8      	b.n	8015c28 <__multiply+0x50>
 8015c76:	f8b3 a000 	ldrh.w	sl, [r3]
 8015c7a:	f1ba 0f00 	cmp.w	sl, #0
 8015c7e:	d024      	beq.n	8015cca <__multiply+0xf2>
 8015c80:	f104 0e14 	add.w	lr, r4, #20
 8015c84:	46a9      	mov	r9, r5
 8015c86:	f04f 0c00 	mov.w	ip, #0
 8015c8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015c8e:	f8d9 1000 	ldr.w	r1, [r9]
 8015c92:	fa1f fb82 	uxth.w	fp, r2
 8015c96:	b289      	uxth	r1, r1
 8015c98:	fb0a 110b 	mla	r1, sl, fp, r1
 8015c9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015ca0:	f8d9 2000 	ldr.w	r2, [r9]
 8015ca4:	4461      	add	r1, ip
 8015ca6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015caa:	fb0a c20b 	mla	r2, sl, fp, ip
 8015cae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015cb2:	b289      	uxth	r1, r1
 8015cb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015cb8:	4577      	cmp	r7, lr
 8015cba:	f849 1b04 	str.w	r1, [r9], #4
 8015cbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015cc2:	d8e2      	bhi.n	8015c8a <__multiply+0xb2>
 8015cc4:	9a01      	ldr	r2, [sp, #4]
 8015cc6:	f845 c002 	str.w	ip, [r5, r2]
 8015cca:	9a03      	ldr	r2, [sp, #12]
 8015ccc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015cd0:	3304      	adds	r3, #4
 8015cd2:	f1b9 0f00 	cmp.w	r9, #0
 8015cd6:	d021      	beq.n	8015d1c <__multiply+0x144>
 8015cd8:	6829      	ldr	r1, [r5, #0]
 8015cda:	f104 0c14 	add.w	ip, r4, #20
 8015cde:	46ae      	mov	lr, r5
 8015ce0:	f04f 0a00 	mov.w	sl, #0
 8015ce4:	f8bc b000 	ldrh.w	fp, [ip]
 8015ce8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015cec:	fb09 220b 	mla	r2, r9, fp, r2
 8015cf0:	4452      	add	r2, sl
 8015cf2:	b289      	uxth	r1, r1
 8015cf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015cf8:	f84e 1b04 	str.w	r1, [lr], #4
 8015cfc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015d00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015d04:	f8be 1000 	ldrh.w	r1, [lr]
 8015d08:	fb09 110a 	mla	r1, r9, sl, r1
 8015d0c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015d10:	4567      	cmp	r7, ip
 8015d12:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015d16:	d8e5      	bhi.n	8015ce4 <__multiply+0x10c>
 8015d18:	9a01      	ldr	r2, [sp, #4]
 8015d1a:	50a9      	str	r1, [r5, r2]
 8015d1c:	3504      	adds	r5, #4
 8015d1e:	e799      	b.n	8015c54 <__multiply+0x7c>
 8015d20:	3e01      	subs	r6, #1
 8015d22:	e79b      	b.n	8015c5c <__multiply+0x84>
 8015d24:	08018e9d 	.word	0x08018e9d
 8015d28:	08018eae 	.word	0x08018eae

08015d2c <__pow5mult>:
 8015d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d30:	4615      	mov	r5, r2
 8015d32:	f012 0203 	ands.w	r2, r2, #3
 8015d36:	4606      	mov	r6, r0
 8015d38:	460f      	mov	r7, r1
 8015d3a:	d007      	beq.n	8015d4c <__pow5mult+0x20>
 8015d3c:	4c25      	ldr	r4, [pc, #148]	; (8015dd4 <__pow5mult+0xa8>)
 8015d3e:	3a01      	subs	r2, #1
 8015d40:	2300      	movs	r3, #0
 8015d42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d46:	f7ff fe53 	bl	80159f0 <__multadd>
 8015d4a:	4607      	mov	r7, r0
 8015d4c:	10ad      	asrs	r5, r5, #2
 8015d4e:	d03d      	beq.n	8015dcc <__pow5mult+0xa0>
 8015d50:	69f4      	ldr	r4, [r6, #28]
 8015d52:	b97c      	cbnz	r4, 8015d74 <__pow5mult+0x48>
 8015d54:	2010      	movs	r0, #16
 8015d56:	f7ff fd35 	bl	80157c4 <malloc>
 8015d5a:	4602      	mov	r2, r0
 8015d5c:	61f0      	str	r0, [r6, #28]
 8015d5e:	b928      	cbnz	r0, 8015d6c <__pow5mult+0x40>
 8015d60:	4b1d      	ldr	r3, [pc, #116]	; (8015dd8 <__pow5mult+0xac>)
 8015d62:	481e      	ldr	r0, [pc, #120]	; (8015ddc <__pow5mult+0xb0>)
 8015d64:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015d68:	f001 fb6e 	bl	8017448 <__assert_func>
 8015d6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015d70:	6004      	str	r4, [r0, #0]
 8015d72:	60c4      	str	r4, [r0, #12]
 8015d74:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015d78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015d7c:	b94c      	cbnz	r4, 8015d92 <__pow5mult+0x66>
 8015d7e:	f240 2171 	movw	r1, #625	; 0x271
 8015d82:	4630      	mov	r0, r6
 8015d84:	f7ff ff12 	bl	8015bac <__i2b>
 8015d88:	2300      	movs	r3, #0
 8015d8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8015d8e:	4604      	mov	r4, r0
 8015d90:	6003      	str	r3, [r0, #0]
 8015d92:	f04f 0900 	mov.w	r9, #0
 8015d96:	07eb      	lsls	r3, r5, #31
 8015d98:	d50a      	bpl.n	8015db0 <__pow5mult+0x84>
 8015d9a:	4639      	mov	r1, r7
 8015d9c:	4622      	mov	r2, r4
 8015d9e:	4630      	mov	r0, r6
 8015da0:	f7ff ff1a 	bl	8015bd8 <__multiply>
 8015da4:	4639      	mov	r1, r7
 8015da6:	4680      	mov	r8, r0
 8015da8:	4630      	mov	r0, r6
 8015daa:	f7ff fdff 	bl	80159ac <_Bfree>
 8015dae:	4647      	mov	r7, r8
 8015db0:	106d      	asrs	r5, r5, #1
 8015db2:	d00b      	beq.n	8015dcc <__pow5mult+0xa0>
 8015db4:	6820      	ldr	r0, [r4, #0]
 8015db6:	b938      	cbnz	r0, 8015dc8 <__pow5mult+0x9c>
 8015db8:	4622      	mov	r2, r4
 8015dba:	4621      	mov	r1, r4
 8015dbc:	4630      	mov	r0, r6
 8015dbe:	f7ff ff0b 	bl	8015bd8 <__multiply>
 8015dc2:	6020      	str	r0, [r4, #0]
 8015dc4:	f8c0 9000 	str.w	r9, [r0]
 8015dc8:	4604      	mov	r4, r0
 8015dca:	e7e4      	b.n	8015d96 <__pow5mult+0x6a>
 8015dcc:	4638      	mov	r0, r7
 8015dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dd2:	bf00      	nop
 8015dd4:	08018ff8 	.word	0x08018ff8
 8015dd8:	08018e2e 	.word	0x08018e2e
 8015ddc:	08018eae 	.word	0x08018eae

08015de0 <__lshift>:
 8015de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015de4:	460c      	mov	r4, r1
 8015de6:	6849      	ldr	r1, [r1, #4]
 8015de8:	6923      	ldr	r3, [r4, #16]
 8015dea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015dee:	68a3      	ldr	r3, [r4, #8]
 8015df0:	4607      	mov	r7, r0
 8015df2:	4691      	mov	r9, r2
 8015df4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015df8:	f108 0601 	add.w	r6, r8, #1
 8015dfc:	42b3      	cmp	r3, r6
 8015dfe:	db0b      	blt.n	8015e18 <__lshift+0x38>
 8015e00:	4638      	mov	r0, r7
 8015e02:	f7ff fd93 	bl	801592c <_Balloc>
 8015e06:	4605      	mov	r5, r0
 8015e08:	b948      	cbnz	r0, 8015e1e <__lshift+0x3e>
 8015e0a:	4602      	mov	r2, r0
 8015e0c:	4b28      	ldr	r3, [pc, #160]	; (8015eb0 <__lshift+0xd0>)
 8015e0e:	4829      	ldr	r0, [pc, #164]	; (8015eb4 <__lshift+0xd4>)
 8015e10:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015e14:	f001 fb18 	bl	8017448 <__assert_func>
 8015e18:	3101      	adds	r1, #1
 8015e1a:	005b      	lsls	r3, r3, #1
 8015e1c:	e7ee      	b.n	8015dfc <__lshift+0x1c>
 8015e1e:	2300      	movs	r3, #0
 8015e20:	f100 0114 	add.w	r1, r0, #20
 8015e24:	f100 0210 	add.w	r2, r0, #16
 8015e28:	4618      	mov	r0, r3
 8015e2a:	4553      	cmp	r3, sl
 8015e2c:	db33      	blt.n	8015e96 <__lshift+0xb6>
 8015e2e:	6920      	ldr	r0, [r4, #16]
 8015e30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e34:	f104 0314 	add.w	r3, r4, #20
 8015e38:	f019 091f 	ands.w	r9, r9, #31
 8015e3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015e40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015e44:	d02b      	beq.n	8015e9e <__lshift+0xbe>
 8015e46:	f1c9 0e20 	rsb	lr, r9, #32
 8015e4a:	468a      	mov	sl, r1
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	6818      	ldr	r0, [r3, #0]
 8015e50:	fa00 f009 	lsl.w	r0, r0, r9
 8015e54:	4310      	orrs	r0, r2
 8015e56:	f84a 0b04 	str.w	r0, [sl], #4
 8015e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e5e:	459c      	cmp	ip, r3
 8015e60:	fa22 f20e 	lsr.w	r2, r2, lr
 8015e64:	d8f3      	bhi.n	8015e4e <__lshift+0x6e>
 8015e66:	ebac 0304 	sub.w	r3, ip, r4
 8015e6a:	3b15      	subs	r3, #21
 8015e6c:	f023 0303 	bic.w	r3, r3, #3
 8015e70:	3304      	adds	r3, #4
 8015e72:	f104 0015 	add.w	r0, r4, #21
 8015e76:	4584      	cmp	ip, r0
 8015e78:	bf38      	it	cc
 8015e7a:	2304      	movcc	r3, #4
 8015e7c:	50ca      	str	r2, [r1, r3]
 8015e7e:	b10a      	cbz	r2, 8015e84 <__lshift+0xa4>
 8015e80:	f108 0602 	add.w	r6, r8, #2
 8015e84:	3e01      	subs	r6, #1
 8015e86:	4638      	mov	r0, r7
 8015e88:	612e      	str	r6, [r5, #16]
 8015e8a:	4621      	mov	r1, r4
 8015e8c:	f7ff fd8e 	bl	80159ac <_Bfree>
 8015e90:	4628      	mov	r0, r5
 8015e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e96:	f842 0f04 	str.w	r0, [r2, #4]!
 8015e9a:	3301      	adds	r3, #1
 8015e9c:	e7c5      	b.n	8015e2a <__lshift+0x4a>
 8015e9e:	3904      	subs	r1, #4
 8015ea0:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ea4:	f841 2f04 	str.w	r2, [r1, #4]!
 8015ea8:	459c      	cmp	ip, r3
 8015eaa:	d8f9      	bhi.n	8015ea0 <__lshift+0xc0>
 8015eac:	e7ea      	b.n	8015e84 <__lshift+0xa4>
 8015eae:	bf00      	nop
 8015eb0:	08018e9d 	.word	0x08018e9d
 8015eb4:	08018eae 	.word	0x08018eae

08015eb8 <__mcmp>:
 8015eb8:	b530      	push	{r4, r5, lr}
 8015eba:	6902      	ldr	r2, [r0, #16]
 8015ebc:	690c      	ldr	r4, [r1, #16]
 8015ebe:	1b12      	subs	r2, r2, r4
 8015ec0:	d10e      	bne.n	8015ee0 <__mcmp+0x28>
 8015ec2:	f100 0314 	add.w	r3, r0, #20
 8015ec6:	3114      	adds	r1, #20
 8015ec8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015ecc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015ed0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015ed4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015ed8:	42a5      	cmp	r5, r4
 8015eda:	d003      	beq.n	8015ee4 <__mcmp+0x2c>
 8015edc:	d305      	bcc.n	8015eea <__mcmp+0x32>
 8015ede:	2201      	movs	r2, #1
 8015ee0:	4610      	mov	r0, r2
 8015ee2:	bd30      	pop	{r4, r5, pc}
 8015ee4:	4283      	cmp	r3, r0
 8015ee6:	d3f3      	bcc.n	8015ed0 <__mcmp+0x18>
 8015ee8:	e7fa      	b.n	8015ee0 <__mcmp+0x28>
 8015eea:	f04f 32ff 	mov.w	r2, #4294967295
 8015eee:	e7f7      	b.n	8015ee0 <__mcmp+0x28>

08015ef0 <__mdiff>:
 8015ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef4:	460c      	mov	r4, r1
 8015ef6:	4606      	mov	r6, r0
 8015ef8:	4611      	mov	r1, r2
 8015efa:	4620      	mov	r0, r4
 8015efc:	4690      	mov	r8, r2
 8015efe:	f7ff ffdb 	bl	8015eb8 <__mcmp>
 8015f02:	1e05      	subs	r5, r0, #0
 8015f04:	d110      	bne.n	8015f28 <__mdiff+0x38>
 8015f06:	4629      	mov	r1, r5
 8015f08:	4630      	mov	r0, r6
 8015f0a:	f7ff fd0f 	bl	801592c <_Balloc>
 8015f0e:	b930      	cbnz	r0, 8015f1e <__mdiff+0x2e>
 8015f10:	4b3a      	ldr	r3, [pc, #232]	; (8015ffc <__mdiff+0x10c>)
 8015f12:	4602      	mov	r2, r0
 8015f14:	f240 2137 	movw	r1, #567	; 0x237
 8015f18:	4839      	ldr	r0, [pc, #228]	; (8016000 <__mdiff+0x110>)
 8015f1a:	f001 fa95 	bl	8017448 <__assert_func>
 8015f1e:	2301      	movs	r3, #1
 8015f20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f28:	bfa4      	itt	ge
 8015f2a:	4643      	movge	r3, r8
 8015f2c:	46a0      	movge	r8, r4
 8015f2e:	4630      	mov	r0, r6
 8015f30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015f34:	bfa6      	itte	ge
 8015f36:	461c      	movge	r4, r3
 8015f38:	2500      	movge	r5, #0
 8015f3a:	2501      	movlt	r5, #1
 8015f3c:	f7ff fcf6 	bl	801592c <_Balloc>
 8015f40:	b920      	cbnz	r0, 8015f4c <__mdiff+0x5c>
 8015f42:	4b2e      	ldr	r3, [pc, #184]	; (8015ffc <__mdiff+0x10c>)
 8015f44:	4602      	mov	r2, r0
 8015f46:	f240 2145 	movw	r1, #581	; 0x245
 8015f4a:	e7e5      	b.n	8015f18 <__mdiff+0x28>
 8015f4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015f50:	6926      	ldr	r6, [r4, #16]
 8015f52:	60c5      	str	r5, [r0, #12]
 8015f54:	f104 0914 	add.w	r9, r4, #20
 8015f58:	f108 0514 	add.w	r5, r8, #20
 8015f5c:	f100 0e14 	add.w	lr, r0, #20
 8015f60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015f64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015f68:	f108 0210 	add.w	r2, r8, #16
 8015f6c:	46f2      	mov	sl, lr
 8015f6e:	2100      	movs	r1, #0
 8015f70:	f859 3b04 	ldr.w	r3, [r9], #4
 8015f74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015f78:	fa11 f88b 	uxtah	r8, r1, fp
 8015f7c:	b299      	uxth	r1, r3
 8015f7e:	0c1b      	lsrs	r3, r3, #16
 8015f80:	eba8 0801 	sub.w	r8, r8, r1
 8015f84:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015f88:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015f8c:	fa1f f888 	uxth.w	r8, r8
 8015f90:	1419      	asrs	r1, r3, #16
 8015f92:	454e      	cmp	r6, r9
 8015f94:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015f98:	f84a 3b04 	str.w	r3, [sl], #4
 8015f9c:	d8e8      	bhi.n	8015f70 <__mdiff+0x80>
 8015f9e:	1b33      	subs	r3, r6, r4
 8015fa0:	3b15      	subs	r3, #21
 8015fa2:	f023 0303 	bic.w	r3, r3, #3
 8015fa6:	3304      	adds	r3, #4
 8015fa8:	3415      	adds	r4, #21
 8015faa:	42a6      	cmp	r6, r4
 8015fac:	bf38      	it	cc
 8015fae:	2304      	movcc	r3, #4
 8015fb0:	441d      	add	r5, r3
 8015fb2:	4473      	add	r3, lr
 8015fb4:	469e      	mov	lr, r3
 8015fb6:	462e      	mov	r6, r5
 8015fb8:	4566      	cmp	r6, ip
 8015fba:	d30e      	bcc.n	8015fda <__mdiff+0xea>
 8015fbc:	f10c 0203 	add.w	r2, ip, #3
 8015fc0:	1b52      	subs	r2, r2, r5
 8015fc2:	f022 0203 	bic.w	r2, r2, #3
 8015fc6:	3d03      	subs	r5, #3
 8015fc8:	45ac      	cmp	ip, r5
 8015fca:	bf38      	it	cc
 8015fcc:	2200      	movcc	r2, #0
 8015fce:	4413      	add	r3, r2
 8015fd0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015fd4:	b17a      	cbz	r2, 8015ff6 <__mdiff+0x106>
 8015fd6:	6107      	str	r7, [r0, #16]
 8015fd8:	e7a4      	b.n	8015f24 <__mdiff+0x34>
 8015fda:	f856 8b04 	ldr.w	r8, [r6], #4
 8015fde:	fa11 f288 	uxtah	r2, r1, r8
 8015fe2:	1414      	asrs	r4, r2, #16
 8015fe4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015fe8:	b292      	uxth	r2, r2
 8015fea:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015fee:	f84e 2b04 	str.w	r2, [lr], #4
 8015ff2:	1421      	asrs	r1, r4, #16
 8015ff4:	e7e0      	b.n	8015fb8 <__mdiff+0xc8>
 8015ff6:	3f01      	subs	r7, #1
 8015ff8:	e7ea      	b.n	8015fd0 <__mdiff+0xe0>
 8015ffa:	bf00      	nop
 8015ffc:	08018e9d 	.word	0x08018e9d
 8016000:	08018eae 	.word	0x08018eae

08016004 <__ulp>:
 8016004:	b082      	sub	sp, #8
 8016006:	ed8d 0b00 	vstr	d0, [sp]
 801600a:	9a01      	ldr	r2, [sp, #4]
 801600c:	4b0f      	ldr	r3, [pc, #60]	; (801604c <__ulp+0x48>)
 801600e:	4013      	ands	r3, r2
 8016010:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016014:	2b00      	cmp	r3, #0
 8016016:	dc08      	bgt.n	801602a <__ulp+0x26>
 8016018:	425b      	negs	r3, r3
 801601a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801601e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8016022:	da04      	bge.n	801602e <__ulp+0x2a>
 8016024:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016028:	4113      	asrs	r3, r2
 801602a:	2200      	movs	r2, #0
 801602c:	e008      	b.n	8016040 <__ulp+0x3c>
 801602e:	f1a2 0314 	sub.w	r3, r2, #20
 8016032:	2b1e      	cmp	r3, #30
 8016034:	bfda      	itte	le
 8016036:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 801603a:	40da      	lsrle	r2, r3
 801603c:	2201      	movgt	r2, #1
 801603e:	2300      	movs	r3, #0
 8016040:	4619      	mov	r1, r3
 8016042:	4610      	mov	r0, r2
 8016044:	ec41 0b10 	vmov	d0, r0, r1
 8016048:	b002      	add	sp, #8
 801604a:	4770      	bx	lr
 801604c:	7ff00000 	.word	0x7ff00000

08016050 <__b2d>:
 8016050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016054:	6906      	ldr	r6, [r0, #16]
 8016056:	f100 0814 	add.w	r8, r0, #20
 801605a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801605e:	1f37      	subs	r7, r6, #4
 8016060:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016064:	4610      	mov	r0, r2
 8016066:	f7ff fd53 	bl	8015b10 <__hi0bits>
 801606a:	f1c0 0320 	rsb	r3, r0, #32
 801606e:	280a      	cmp	r0, #10
 8016070:	600b      	str	r3, [r1, #0]
 8016072:	491b      	ldr	r1, [pc, #108]	; (80160e0 <__b2d+0x90>)
 8016074:	dc15      	bgt.n	80160a2 <__b2d+0x52>
 8016076:	f1c0 0c0b 	rsb	ip, r0, #11
 801607a:	fa22 f30c 	lsr.w	r3, r2, ip
 801607e:	45b8      	cmp	r8, r7
 8016080:	ea43 0501 	orr.w	r5, r3, r1
 8016084:	bf34      	ite	cc
 8016086:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801608a:	2300      	movcs	r3, #0
 801608c:	3015      	adds	r0, #21
 801608e:	fa02 f000 	lsl.w	r0, r2, r0
 8016092:	fa23 f30c 	lsr.w	r3, r3, ip
 8016096:	4303      	orrs	r3, r0
 8016098:	461c      	mov	r4, r3
 801609a:	ec45 4b10 	vmov	d0, r4, r5
 801609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160a2:	45b8      	cmp	r8, r7
 80160a4:	bf3a      	itte	cc
 80160a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80160aa:	f1a6 0708 	subcc.w	r7, r6, #8
 80160ae:	2300      	movcs	r3, #0
 80160b0:	380b      	subs	r0, #11
 80160b2:	d012      	beq.n	80160da <__b2d+0x8a>
 80160b4:	f1c0 0120 	rsb	r1, r0, #32
 80160b8:	fa23 f401 	lsr.w	r4, r3, r1
 80160bc:	4082      	lsls	r2, r0
 80160be:	4322      	orrs	r2, r4
 80160c0:	4547      	cmp	r7, r8
 80160c2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80160c6:	bf8c      	ite	hi
 80160c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80160cc:	2200      	movls	r2, #0
 80160ce:	4083      	lsls	r3, r0
 80160d0:	40ca      	lsrs	r2, r1
 80160d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80160d6:	4313      	orrs	r3, r2
 80160d8:	e7de      	b.n	8016098 <__b2d+0x48>
 80160da:	ea42 0501 	orr.w	r5, r2, r1
 80160de:	e7db      	b.n	8016098 <__b2d+0x48>
 80160e0:	3ff00000 	.word	0x3ff00000

080160e4 <__d2b>:
 80160e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80160e8:	460f      	mov	r7, r1
 80160ea:	2101      	movs	r1, #1
 80160ec:	ec59 8b10 	vmov	r8, r9, d0
 80160f0:	4616      	mov	r6, r2
 80160f2:	f7ff fc1b 	bl	801592c <_Balloc>
 80160f6:	4604      	mov	r4, r0
 80160f8:	b930      	cbnz	r0, 8016108 <__d2b+0x24>
 80160fa:	4602      	mov	r2, r0
 80160fc:	4b24      	ldr	r3, [pc, #144]	; (8016190 <__d2b+0xac>)
 80160fe:	4825      	ldr	r0, [pc, #148]	; (8016194 <__d2b+0xb0>)
 8016100:	f240 310f 	movw	r1, #783	; 0x30f
 8016104:	f001 f9a0 	bl	8017448 <__assert_func>
 8016108:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801610c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016110:	bb2d      	cbnz	r5, 801615e <__d2b+0x7a>
 8016112:	9301      	str	r3, [sp, #4]
 8016114:	f1b8 0300 	subs.w	r3, r8, #0
 8016118:	d026      	beq.n	8016168 <__d2b+0x84>
 801611a:	4668      	mov	r0, sp
 801611c:	9300      	str	r3, [sp, #0]
 801611e:	f7ff fd17 	bl	8015b50 <__lo0bits>
 8016122:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016126:	b1e8      	cbz	r0, 8016164 <__d2b+0x80>
 8016128:	f1c0 0320 	rsb	r3, r0, #32
 801612c:	fa02 f303 	lsl.w	r3, r2, r3
 8016130:	430b      	orrs	r3, r1
 8016132:	40c2      	lsrs	r2, r0
 8016134:	6163      	str	r3, [r4, #20]
 8016136:	9201      	str	r2, [sp, #4]
 8016138:	9b01      	ldr	r3, [sp, #4]
 801613a:	61a3      	str	r3, [r4, #24]
 801613c:	2b00      	cmp	r3, #0
 801613e:	bf14      	ite	ne
 8016140:	2202      	movne	r2, #2
 8016142:	2201      	moveq	r2, #1
 8016144:	6122      	str	r2, [r4, #16]
 8016146:	b1bd      	cbz	r5, 8016178 <__d2b+0x94>
 8016148:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801614c:	4405      	add	r5, r0
 801614e:	603d      	str	r5, [r7, #0]
 8016150:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016154:	6030      	str	r0, [r6, #0]
 8016156:	4620      	mov	r0, r4
 8016158:	b003      	add	sp, #12
 801615a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801615e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016162:	e7d6      	b.n	8016112 <__d2b+0x2e>
 8016164:	6161      	str	r1, [r4, #20]
 8016166:	e7e7      	b.n	8016138 <__d2b+0x54>
 8016168:	a801      	add	r0, sp, #4
 801616a:	f7ff fcf1 	bl	8015b50 <__lo0bits>
 801616e:	9b01      	ldr	r3, [sp, #4]
 8016170:	6163      	str	r3, [r4, #20]
 8016172:	3020      	adds	r0, #32
 8016174:	2201      	movs	r2, #1
 8016176:	e7e5      	b.n	8016144 <__d2b+0x60>
 8016178:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801617c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016180:	6038      	str	r0, [r7, #0]
 8016182:	6918      	ldr	r0, [r3, #16]
 8016184:	f7ff fcc4 	bl	8015b10 <__hi0bits>
 8016188:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801618c:	e7e2      	b.n	8016154 <__d2b+0x70>
 801618e:	bf00      	nop
 8016190:	08018e9d 	.word	0x08018e9d
 8016194:	08018eae 	.word	0x08018eae

08016198 <__ratio>:
 8016198:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801619c:	4688      	mov	r8, r1
 801619e:	4669      	mov	r1, sp
 80161a0:	4681      	mov	r9, r0
 80161a2:	f7ff ff55 	bl	8016050 <__b2d>
 80161a6:	a901      	add	r1, sp, #4
 80161a8:	4640      	mov	r0, r8
 80161aa:	ec55 4b10 	vmov	r4, r5, d0
 80161ae:	f7ff ff4f 	bl	8016050 <__b2d>
 80161b2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80161b6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80161ba:	eba3 0c02 	sub.w	ip, r3, r2
 80161be:	e9dd 3200 	ldrd	r3, r2, [sp]
 80161c2:	1a9b      	subs	r3, r3, r2
 80161c4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80161c8:	ec51 0b10 	vmov	r0, r1, d0
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	bfd6      	itet	le
 80161d0:	460a      	movle	r2, r1
 80161d2:	462a      	movgt	r2, r5
 80161d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80161d8:	468b      	mov	fp, r1
 80161da:	462f      	mov	r7, r5
 80161dc:	bfd4      	ite	le
 80161de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80161e2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80161e6:	4620      	mov	r0, r4
 80161e8:	ee10 2a10 	vmov	r2, s0
 80161ec:	465b      	mov	r3, fp
 80161ee:	4639      	mov	r1, r7
 80161f0:	f7ea fb34 	bl	800085c <__aeabi_ddiv>
 80161f4:	ec41 0b10 	vmov	d0, r0, r1
 80161f8:	b003      	add	sp, #12
 80161fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161fe <__copybits>:
 80161fe:	3901      	subs	r1, #1
 8016200:	b570      	push	{r4, r5, r6, lr}
 8016202:	1149      	asrs	r1, r1, #5
 8016204:	6914      	ldr	r4, [r2, #16]
 8016206:	3101      	adds	r1, #1
 8016208:	f102 0314 	add.w	r3, r2, #20
 801620c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016210:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016214:	1f05      	subs	r5, r0, #4
 8016216:	42a3      	cmp	r3, r4
 8016218:	d30c      	bcc.n	8016234 <__copybits+0x36>
 801621a:	1aa3      	subs	r3, r4, r2
 801621c:	3b11      	subs	r3, #17
 801621e:	f023 0303 	bic.w	r3, r3, #3
 8016222:	3211      	adds	r2, #17
 8016224:	42a2      	cmp	r2, r4
 8016226:	bf88      	it	hi
 8016228:	2300      	movhi	r3, #0
 801622a:	4418      	add	r0, r3
 801622c:	2300      	movs	r3, #0
 801622e:	4288      	cmp	r0, r1
 8016230:	d305      	bcc.n	801623e <__copybits+0x40>
 8016232:	bd70      	pop	{r4, r5, r6, pc}
 8016234:	f853 6b04 	ldr.w	r6, [r3], #4
 8016238:	f845 6f04 	str.w	r6, [r5, #4]!
 801623c:	e7eb      	b.n	8016216 <__copybits+0x18>
 801623e:	f840 3b04 	str.w	r3, [r0], #4
 8016242:	e7f4      	b.n	801622e <__copybits+0x30>

08016244 <__any_on>:
 8016244:	f100 0214 	add.w	r2, r0, #20
 8016248:	6900      	ldr	r0, [r0, #16]
 801624a:	114b      	asrs	r3, r1, #5
 801624c:	4298      	cmp	r0, r3
 801624e:	b510      	push	{r4, lr}
 8016250:	db11      	blt.n	8016276 <__any_on+0x32>
 8016252:	dd0a      	ble.n	801626a <__any_on+0x26>
 8016254:	f011 011f 	ands.w	r1, r1, #31
 8016258:	d007      	beq.n	801626a <__any_on+0x26>
 801625a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801625e:	fa24 f001 	lsr.w	r0, r4, r1
 8016262:	fa00 f101 	lsl.w	r1, r0, r1
 8016266:	428c      	cmp	r4, r1
 8016268:	d10b      	bne.n	8016282 <__any_on+0x3e>
 801626a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801626e:	4293      	cmp	r3, r2
 8016270:	d803      	bhi.n	801627a <__any_on+0x36>
 8016272:	2000      	movs	r0, #0
 8016274:	bd10      	pop	{r4, pc}
 8016276:	4603      	mov	r3, r0
 8016278:	e7f7      	b.n	801626a <__any_on+0x26>
 801627a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801627e:	2900      	cmp	r1, #0
 8016280:	d0f5      	beq.n	801626e <__any_on+0x2a>
 8016282:	2001      	movs	r0, #1
 8016284:	e7f6      	b.n	8016274 <__any_on+0x30>

08016286 <sulp>:
 8016286:	b570      	push	{r4, r5, r6, lr}
 8016288:	4604      	mov	r4, r0
 801628a:	460d      	mov	r5, r1
 801628c:	ec45 4b10 	vmov	d0, r4, r5
 8016290:	4616      	mov	r6, r2
 8016292:	f7ff feb7 	bl	8016004 <__ulp>
 8016296:	ec51 0b10 	vmov	r0, r1, d0
 801629a:	b17e      	cbz	r6, 80162bc <sulp+0x36>
 801629c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80162a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	dd09      	ble.n	80162bc <sulp+0x36>
 80162a8:	051b      	lsls	r3, r3, #20
 80162aa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80162ae:	2400      	movs	r4, #0
 80162b0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80162b4:	4622      	mov	r2, r4
 80162b6:	462b      	mov	r3, r5
 80162b8:	f7ea f9a6 	bl	8000608 <__aeabi_dmul>
 80162bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080162c0 <_strtod_l>:
 80162c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162c4:	ed2d 8b02 	vpush	{d8}
 80162c8:	b09b      	sub	sp, #108	; 0x6c
 80162ca:	4604      	mov	r4, r0
 80162cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80162ce:	2200      	movs	r2, #0
 80162d0:	9216      	str	r2, [sp, #88]	; 0x58
 80162d2:	460d      	mov	r5, r1
 80162d4:	f04f 0800 	mov.w	r8, #0
 80162d8:	f04f 0900 	mov.w	r9, #0
 80162dc:	460a      	mov	r2, r1
 80162de:	9215      	str	r2, [sp, #84]	; 0x54
 80162e0:	7811      	ldrb	r1, [r2, #0]
 80162e2:	292b      	cmp	r1, #43	; 0x2b
 80162e4:	d04c      	beq.n	8016380 <_strtod_l+0xc0>
 80162e6:	d83a      	bhi.n	801635e <_strtod_l+0x9e>
 80162e8:	290d      	cmp	r1, #13
 80162ea:	d834      	bhi.n	8016356 <_strtod_l+0x96>
 80162ec:	2908      	cmp	r1, #8
 80162ee:	d834      	bhi.n	801635a <_strtod_l+0x9a>
 80162f0:	2900      	cmp	r1, #0
 80162f2:	d03d      	beq.n	8016370 <_strtod_l+0xb0>
 80162f4:	2200      	movs	r2, #0
 80162f6:	920a      	str	r2, [sp, #40]	; 0x28
 80162f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80162fa:	7832      	ldrb	r2, [r6, #0]
 80162fc:	2a30      	cmp	r2, #48	; 0x30
 80162fe:	f040 80b4 	bne.w	801646a <_strtod_l+0x1aa>
 8016302:	7872      	ldrb	r2, [r6, #1]
 8016304:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016308:	2a58      	cmp	r2, #88	; 0x58
 801630a:	d170      	bne.n	80163ee <_strtod_l+0x12e>
 801630c:	9302      	str	r3, [sp, #8]
 801630e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016310:	9301      	str	r3, [sp, #4]
 8016312:	ab16      	add	r3, sp, #88	; 0x58
 8016314:	9300      	str	r3, [sp, #0]
 8016316:	4a8e      	ldr	r2, [pc, #568]	; (8016550 <_strtod_l+0x290>)
 8016318:	ab17      	add	r3, sp, #92	; 0x5c
 801631a:	a915      	add	r1, sp, #84	; 0x54
 801631c:	4620      	mov	r0, r4
 801631e:	f001 f92f 	bl	8017580 <__gethex>
 8016322:	f010 070f 	ands.w	r7, r0, #15
 8016326:	4605      	mov	r5, r0
 8016328:	d005      	beq.n	8016336 <_strtod_l+0x76>
 801632a:	2f06      	cmp	r7, #6
 801632c:	d12a      	bne.n	8016384 <_strtod_l+0xc4>
 801632e:	3601      	adds	r6, #1
 8016330:	2300      	movs	r3, #0
 8016332:	9615      	str	r6, [sp, #84]	; 0x54
 8016334:	930a      	str	r3, [sp, #40]	; 0x28
 8016336:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016338:	2b00      	cmp	r3, #0
 801633a:	f040 857f 	bne.w	8016e3c <_strtod_l+0xb7c>
 801633e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016340:	b1db      	cbz	r3, 801637a <_strtod_l+0xba>
 8016342:	4642      	mov	r2, r8
 8016344:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8016348:	ec43 2b10 	vmov	d0, r2, r3
 801634c:	b01b      	add	sp, #108	; 0x6c
 801634e:	ecbd 8b02 	vpop	{d8}
 8016352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016356:	2920      	cmp	r1, #32
 8016358:	d1cc      	bne.n	80162f4 <_strtod_l+0x34>
 801635a:	3201      	adds	r2, #1
 801635c:	e7bf      	b.n	80162de <_strtod_l+0x1e>
 801635e:	292d      	cmp	r1, #45	; 0x2d
 8016360:	d1c8      	bne.n	80162f4 <_strtod_l+0x34>
 8016362:	2101      	movs	r1, #1
 8016364:	910a      	str	r1, [sp, #40]	; 0x28
 8016366:	1c51      	adds	r1, r2, #1
 8016368:	9115      	str	r1, [sp, #84]	; 0x54
 801636a:	7852      	ldrb	r2, [r2, #1]
 801636c:	2a00      	cmp	r2, #0
 801636e:	d1c3      	bne.n	80162f8 <_strtod_l+0x38>
 8016370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016372:	9515      	str	r5, [sp, #84]	; 0x54
 8016374:	2b00      	cmp	r3, #0
 8016376:	f040 855f 	bne.w	8016e38 <_strtod_l+0xb78>
 801637a:	4642      	mov	r2, r8
 801637c:	464b      	mov	r3, r9
 801637e:	e7e3      	b.n	8016348 <_strtod_l+0x88>
 8016380:	2100      	movs	r1, #0
 8016382:	e7ef      	b.n	8016364 <_strtod_l+0xa4>
 8016384:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016386:	b13a      	cbz	r2, 8016398 <_strtod_l+0xd8>
 8016388:	2135      	movs	r1, #53	; 0x35
 801638a:	a818      	add	r0, sp, #96	; 0x60
 801638c:	f7ff ff37 	bl	80161fe <__copybits>
 8016390:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016392:	4620      	mov	r0, r4
 8016394:	f7ff fb0a 	bl	80159ac <_Bfree>
 8016398:	3f01      	subs	r7, #1
 801639a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801639c:	2f04      	cmp	r7, #4
 801639e:	d806      	bhi.n	80163ae <_strtod_l+0xee>
 80163a0:	e8df f007 	tbb	[pc, r7]
 80163a4:	201d0314 	.word	0x201d0314
 80163a8:	14          	.byte	0x14
 80163a9:	00          	.byte	0x00
 80163aa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80163ae:	05e9      	lsls	r1, r5, #23
 80163b0:	bf48      	it	mi
 80163b2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80163b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80163ba:	0d1b      	lsrs	r3, r3, #20
 80163bc:	051b      	lsls	r3, r3, #20
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d1b9      	bne.n	8016336 <_strtod_l+0x76>
 80163c2:	f7fe faf7 	bl	80149b4 <__errno>
 80163c6:	2322      	movs	r3, #34	; 0x22
 80163c8:	6003      	str	r3, [r0, #0]
 80163ca:	e7b4      	b.n	8016336 <_strtod_l+0x76>
 80163cc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80163d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80163d4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80163d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80163dc:	e7e7      	b.n	80163ae <_strtod_l+0xee>
 80163de:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016558 <_strtod_l+0x298>
 80163e2:	e7e4      	b.n	80163ae <_strtod_l+0xee>
 80163e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80163e8:	f04f 38ff 	mov.w	r8, #4294967295
 80163ec:	e7df      	b.n	80163ae <_strtod_l+0xee>
 80163ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80163f0:	1c5a      	adds	r2, r3, #1
 80163f2:	9215      	str	r2, [sp, #84]	; 0x54
 80163f4:	785b      	ldrb	r3, [r3, #1]
 80163f6:	2b30      	cmp	r3, #48	; 0x30
 80163f8:	d0f9      	beq.n	80163ee <_strtod_l+0x12e>
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d09b      	beq.n	8016336 <_strtod_l+0x76>
 80163fe:	2301      	movs	r3, #1
 8016400:	f04f 0a00 	mov.w	sl, #0
 8016404:	9304      	str	r3, [sp, #16]
 8016406:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016408:	930b      	str	r3, [sp, #44]	; 0x2c
 801640a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801640e:	46d3      	mov	fp, sl
 8016410:	220a      	movs	r2, #10
 8016412:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016414:	7806      	ldrb	r6, [r0, #0]
 8016416:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801641a:	b2d9      	uxtb	r1, r3
 801641c:	2909      	cmp	r1, #9
 801641e:	d926      	bls.n	801646e <_strtod_l+0x1ae>
 8016420:	494c      	ldr	r1, [pc, #304]	; (8016554 <_strtod_l+0x294>)
 8016422:	2201      	movs	r2, #1
 8016424:	f000 ffe6 	bl	80173f4 <strncmp>
 8016428:	2800      	cmp	r0, #0
 801642a:	d030      	beq.n	801648e <_strtod_l+0x1ce>
 801642c:	2000      	movs	r0, #0
 801642e:	4632      	mov	r2, r6
 8016430:	9005      	str	r0, [sp, #20]
 8016432:	465e      	mov	r6, fp
 8016434:	4603      	mov	r3, r0
 8016436:	2a65      	cmp	r2, #101	; 0x65
 8016438:	d001      	beq.n	801643e <_strtod_l+0x17e>
 801643a:	2a45      	cmp	r2, #69	; 0x45
 801643c:	d113      	bne.n	8016466 <_strtod_l+0x1a6>
 801643e:	b91e      	cbnz	r6, 8016448 <_strtod_l+0x188>
 8016440:	9a04      	ldr	r2, [sp, #16]
 8016442:	4302      	orrs	r2, r0
 8016444:	d094      	beq.n	8016370 <_strtod_l+0xb0>
 8016446:	2600      	movs	r6, #0
 8016448:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801644a:	1c6a      	adds	r2, r5, #1
 801644c:	9215      	str	r2, [sp, #84]	; 0x54
 801644e:	786a      	ldrb	r2, [r5, #1]
 8016450:	2a2b      	cmp	r2, #43	; 0x2b
 8016452:	d074      	beq.n	801653e <_strtod_l+0x27e>
 8016454:	2a2d      	cmp	r2, #45	; 0x2d
 8016456:	d078      	beq.n	801654a <_strtod_l+0x28a>
 8016458:	f04f 0c00 	mov.w	ip, #0
 801645c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016460:	2909      	cmp	r1, #9
 8016462:	d97f      	bls.n	8016564 <_strtod_l+0x2a4>
 8016464:	9515      	str	r5, [sp, #84]	; 0x54
 8016466:	2700      	movs	r7, #0
 8016468:	e09e      	b.n	80165a8 <_strtod_l+0x2e8>
 801646a:	2300      	movs	r3, #0
 801646c:	e7c8      	b.n	8016400 <_strtod_l+0x140>
 801646e:	f1bb 0f08 	cmp.w	fp, #8
 8016472:	bfd8      	it	le
 8016474:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8016476:	f100 0001 	add.w	r0, r0, #1
 801647a:	bfda      	itte	le
 801647c:	fb02 3301 	mlale	r3, r2, r1, r3
 8016480:	9309      	strle	r3, [sp, #36]	; 0x24
 8016482:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8016486:	f10b 0b01 	add.w	fp, fp, #1
 801648a:	9015      	str	r0, [sp, #84]	; 0x54
 801648c:	e7c1      	b.n	8016412 <_strtod_l+0x152>
 801648e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016490:	1c5a      	adds	r2, r3, #1
 8016492:	9215      	str	r2, [sp, #84]	; 0x54
 8016494:	785a      	ldrb	r2, [r3, #1]
 8016496:	f1bb 0f00 	cmp.w	fp, #0
 801649a:	d037      	beq.n	801650c <_strtod_l+0x24c>
 801649c:	9005      	str	r0, [sp, #20]
 801649e:	465e      	mov	r6, fp
 80164a0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80164a4:	2b09      	cmp	r3, #9
 80164a6:	d912      	bls.n	80164ce <_strtod_l+0x20e>
 80164a8:	2301      	movs	r3, #1
 80164aa:	e7c4      	b.n	8016436 <_strtod_l+0x176>
 80164ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80164ae:	1c5a      	adds	r2, r3, #1
 80164b0:	9215      	str	r2, [sp, #84]	; 0x54
 80164b2:	785a      	ldrb	r2, [r3, #1]
 80164b4:	3001      	adds	r0, #1
 80164b6:	2a30      	cmp	r2, #48	; 0x30
 80164b8:	d0f8      	beq.n	80164ac <_strtod_l+0x1ec>
 80164ba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80164be:	2b08      	cmp	r3, #8
 80164c0:	f200 84c1 	bhi.w	8016e46 <_strtod_l+0xb86>
 80164c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80164c6:	9005      	str	r0, [sp, #20]
 80164c8:	2000      	movs	r0, #0
 80164ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80164cc:	4606      	mov	r6, r0
 80164ce:	3a30      	subs	r2, #48	; 0x30
 80164d0:	f100 0301 	add.w	r3, r0, #1
 80164d4:	d014      	beq.n	8016500 <_strtod_l+0x240>
 80164d6:	9905      	ldr	r1, [sp, #20]
 80164d8:	4419      	add	r1, r3
 80164da:	9105      	str	r1, [sp, #20]
 80164dc:	4633      	mov	r3, r6
 80164de:	eb00 0c06 	add.w	ip, r0, r6
 80164e2:	210a      	movs	r1, #10
 80164e4:	4563      	cmp	r3, ip
 80164e6:	d113      	bne.n	8016510 <_strtod_l+0x250>
 80164e8:	1833      	adds	r3, r6, r0
 80164ea:	2b08      	cmp	r3, #8
 80164ec:	f106 0601 	add.w	r6, r6, #1
 80164f0:	4406      	add	r6, r0
 80164f2:	dc1a      	bgt.n	801652a <_strtod_l+0x26a>
 80164f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80164f6:	230a      	movs	r3, #10
 80164f8:	fb03 2301 	mla	r3, r3, r1, r2
 80164fc:	9309      	str	r3, [sp, #36]	; 0x24
 80164fe:	2300      	movs	r3, #0
 8016500:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016502:	1c51      	adds	r1, r2, #1
 8016504:	9115      	str	r1, [sp, #84]	; 0x54
 8016506:	7852      	ldrb	r2, [r2, #1]
 8016508:	4618      	mov	r0, r3
 801650a:	e7c9      	b.n	80164a0 <_strtod_l+0x1e0>
 801650c:	4658      	mov	r0, fp
 801650e:	e7d2      	b.n	80164b6 <_strtod_l+0x1f6>
 8016510:	2b08      	cmp	r3, #8
 8016512:	f103 0301 	add.w	r3, r3, #1
 8016516:	dc03      	bgt.n	8016520 <_strtod_l+0x260>
 8016518:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801651a:	434f      	muls	r7, r1
 801651c:	9709      	str	r7, [sp, #36]	; 0x24
 801651e:	e7e1      	b.n	80164e4 <_strtod_l+0x224>
 8016520:	2b10      	cmp	r3, #16
 8016522:	bfd8      	it	le
 8016524:	fb01 fa0a 	mulle.w	sl, r1, sl
 8016528:	e7dc      	b.n	80164e4 <_strtod_l+0x224>
 801652a:	2e10      	cmp	r6, #16
 801652c:	bfdc      	itt	le
 801652e:	230a      	movle	r3, #10
 8016530:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8016534:	e7e3      	b.n	80164fe <_strtod_l+0x23e>
 8016536:	2300      	movs	r3, #0
 8016538:	9305      	str	r3, [sp, #20]
 801653a:	2301      	movs	r3, #1
 801653c:	e780      	b.n	8016440 <_strtod_l+0x180>
 801653e:	f04f 0c00 	mov.w	ip, #0
 8016542:	1caa      	adds	r2, r5, #2
 8016544:	9215      	str	r2, [sp, #84]	; 0x54
 8016546:	78aa      	ldrb	r2, [r5, #2]
 8016548:	e788      	b.n	801645c <_strtod_l+0x19c>
 801654a:	f04f 0c01 	mov.w	ip, #1
 801654e:	e7f8      	b.n	8016542 <_strtod_l+0x282>
 8016550:	08019008 	.word	0x08019008
 8016554:	08019004 	.word	0x08019004
 8016558:	7ff00000 	.word	0x7ff00000
 801655c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801655e:	1c51      	adds	r1, r2, #1
 8016560:	9115      	str	r1, [sp, #84]	; 0x54
 8016562:	7852      	ldrb	r2, [r2, #1]
 8016564:	2a30      	cmp	r2, #48	; 0x30
 8016566:	d0f9      	beq.n	801655c <_strtod_l+0x29c>
 8016568:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801656c:	2908      	cmp	r1, #8
 801656e:	f63f af7a 	bhi.w	8016466 <_strtod_l+0x1a6>
 8016572:	3a30      	subs	r2, #48	; 0x30
 8016574:	9208      	str	r2, [sp, #32]
 8016576:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016578:	920c      	str	r2, [sp, #48]	; 0x30
 801657a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801657c:	1c57      	adds	r7, r2, #1
 801657e:	9715      	str	r7, [sp, #84]	; 0x54
 8016580:	7852      	ldrb	r2, [r2, #1]
 8016582:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8016586:	f1be 0f09 	cmp.w	lr, #9
 801658a:	d938      	bls.n	80165fe <_strtod_l+0x33e>
 801658c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801658e:	1a7f      	subs	r7, r7, r1
 8016590:	2f08      	cmp	r7, #8
 8016592:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016596:	dc03      	bgt.n	80165a0 <_strtod_l+0x2e0>
 8016598:	9908      	ldr	r1, [sp, #32]
 801659a:	428f      	cmp	r7, r1
 801659c:	bfa8      	it	ge
 801659e:	460f      	movge	r7, r1
 80165a0:	f1bc 0f00 	cmp.w	ip, #0
 80165a4:	d000      	beq.n	80165a8 <_strtod_l+0x2e8>
 80165a6:	427f      	negs	r7, r7
 80165a8:	2e00      	cmp	r6, #0
 80165aa:	d14f      	bne.n	801664c <_strtod_l+0x38c>
 80165ac:	9904      	ldr	r1, [sp, #16]
 80165ae:	4301      	orrs	r1, r0
 80165b0:	f47f aec1 	bne.w	8016336 <_strtod_l+0x76>
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	f47f aedb 	bne.w	8016370 <_strtod_l+0xb0>
 80165ba:	2a69      	cmp	r2, #105	; 0x69
 80165bc:	d029      	beq.n	8016612 <_strtod_l+0x352>
 80165be:	dc26      	bgt.n	801660e <_strtod_l+0x34e>
 80165c0:	2a49      	cmp	r2, #73	; 0x49
 80165c2:	d026      	beq.n	8016612 <_strtod_l+0x352>
 80165c4:	2a4e      	cmp	r2, #78	; 0x4e
 80165c6:	f47f aed3 	bne.w	8016370 <_strtod_l+0xb0>
 80165ca:	499b      	ldr	r1, [pc, #620]	; (8016838 <_strtod_l+0x578>)
 80165cc:	a815      	add	r0, sp, #84	; 0x54
 80165ce:	f001 fa17 	bl	8017a00 <__match>
 80165d2:	2800      	cmp	r0, #0
 80165d4:	f43f aecc 	beq.w	8016370 <_strtod_l+0xb0>
 80165d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80165da:	781b      	ldrb	r3, [r3, #0]
 80165dc:	2b28      	cmp	r3, #40	; 0x28
 80165de:	d12f      	bne.n	8016640 <_strtod_l+0x380>
 80165e0:	4996      	ldr	r1, [pc, #600]	; (801683c <_strtod_l+0x57c>)
 80165e2:	aa18      	add	r2, sp, #96	; 0x60
 80165e4:	a815      	add	r0, sp, #84	; 0x54
 80165e6:	f001 fa1f 	bl	8017a28 <__hexnan>
 80165ea:	2805      	cmp	r0, #5
 80165ec:	d128      	bne.n	8016640 <_strtod_l+0x380>
 80165ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80165f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80165f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80165f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80165fc:	e69b      	b.n	8016336 <_strtod_l+0x76>
 80165fe:	9f08      	ldr	r7, [sp, #32]
 8016600:	210a      	movs	r1, #10
 8016602:	fb01 2107 	mla	r1, r1, r7, r2
 8016606:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801660a:	9208      	str	r2, [sp, #32]
 801660c:	e7b5      	b.n	801657a <_strtod_l+0x2ba>
 801660e:	2a6e      	cmp	r2, #110	; 0x6e
 8016610:	e7d9      	b.n	80165c6 <_strtod_l+0x306>
 8016612:	498b      	ldr	r1, [pc, #556]	; (8016840 <_strtod_l+0x580>)
 8016614:	a815      	add	r0, sp, #84	; 0x54
 8016616:	f001 f9f3 	bl	8017a00 <__match>
 801661a:	2800      	cmp	r0, #0
 801661c:	f43f aea8 	beq.w	8016370 <_strtod_l+0xb0>
 8016620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016622:	4988      	ldr	r1, [pc, #544]	; (8016844 <_strtod_l+0x584>)
 8016624:	3b01      	subs	r3, #1
 8016626:	a815      	add	r0, sp, #84	; 0x54
 8016628:	9315      	str	r3, [sp, #84]	; 0x54
 801662a:	f001 f9e9 	bl	8017a00 <__match>
 801662e:	b910      	cbnz	r0, 8016636 <_strtod_l+0x376>
 8016630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016632:	3301      	adds	r3, #1
 8016634:	9315      	str	r3, [sp, #84]	; 0x54
 8016636:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8016854 <_strtod_l+0x594>
 801663a:	f04f 0800 	mov.w	r8, #0
 801663e:	e67a      	b.n	8016336 <_strtod_l+0x76>
 8016640:	4881      	ldr	r0, [pc, #516]	; (8016848 <_strtod_l+0x588>)
 8016642:	f000 fef9 	bl	8017438 <nan>
 8016646:	ec59 8b10 	vmov	r8, r9, d0
 801664a:	e674      	b.n	8016336 <_strtod_l+0x76>
 801664c:	9b05      	ldr	r3, [sp, #20]
 801664e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016650:	1afb      	subs	r3, r7, r3
 8016652:	f1bb 0f00 	cmp.w	fp, #0
 8016656:	bf08      	it	eq
 8016658:	46b3      	moveq	fp, r6
 801665a:	2e10      	cmp	r6, #16
 801665c:	9308      	str	r3, [sp, #32]
 801665e:	4635      	mov	r5, r6
 8016660:	bfa8      	it	ge
 8016662:	2510      	movge	r5, #16
 8016664:	f7e9 ff56 	bl	8000514 <__aeabi_ui2d>
 8016668:	2e09      	cmp	r6, #9
 801666a:	4680      	mov	r8, r0
 801666c:	4689      	mov	r9, r1
 801666e:	dd13      	ble.n	8016698 <_strtod_l+0x3d8>
 8016670:	4b76      	ldr	r3, [pc, #472]	; (801684c <_strtod_l+0x58c>)
 8016672:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016676:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801667a:	f7e9 ffc5 	bl	8000608 <__aeabi_dmul>
 801667e:	4680      	mov	r8, r0
 8016680:	4650      	mov	r0, sl
 8016682:	4689      	mov	r9, r1
 8016684:	f7e9 ff46 	bl	8000514 <__aeabi_ui2d>
 8016688:	4602      	mov	r2, r0
 801668a:	460b      	mov	r3, r1
 801668c:	4640      	mov	r0, r8
 801668e:	4649      	mov	r1, r9
 8016690:	f7e9 fe04 	bl	800029c <__adddf3>
 8016694:	4680      	mov	r8, r0
 8016696:	4689      	mov	r9, r1
 8016698:	2e0f      	cmp	r6, #15
 801669a:	dc38      	bgt.n	801670e <_strtod_l+0x44e>
 801669c:	9b08      	ldr	r3, [sp, #32]
 801669e:	2b00      	cmp	r3, #0
 80166a0:	f43f ae49 	beq.w	8016336 <_strtod_l+0x76>
 80166a4:	dd24      	ble.n	80166f0 <_strtod_l+0x430>
 80166a6:	2b16      	cmp	r3, #22
 80166a8:	dc0b      	bgt.n	80166c2 <_strtod_l+0x402>
 80166aa:	4968      	ldr	r1, [pc, #416]	; (801684c <_strtod_l+0x58c>)
 80166ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80166b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166b4:	4642      	mov	r2, r8
 80166b6:	464b      	mov	r3, r9
 80166b8:	f7e9 ffa6 	bl	8000608 <__aeabi_dmul>
 80166bc:	4680      	mov	r8, r0
 80166be:	4689      	mov	r9, r1
 80166c0:	e639      	b.n	8016336 <_strtod_l+0x76>
 80166c2:	9a08      	ldr	r2, [sp, #32]
 80166c4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80166c8:	4293      	cmp	r3, r2
 80166ca:	db20      	blt.n	801670e <_strtod_l+0x44e>
 80166cc:	4c5f      	ldr	r4, [pc, #380]	; (801684c <_strtod_l+0x58c>)
 80166ce:	f1c6 060f 	rsb	r6, r6, #15
 80166d2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80166d6:	4642      	mov	r2, r8
 80166d8:	464b      	mov	r3, r9
 80166da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166de:	f7e9 ff93 	bl	8000608 <__aeabi_dmul>
 80166e2:	9b08      	ldr	r3, [sp, #32]
 80166e4:	1b9e      	subs	r6, r3, r6
 80166e6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80166ea:	e9d4 2300 	ldrd	r2, r3, [r4]
 80166ee:	e7e3      	b.n	80166b8 <_strtod_l+0x3f8>
 80166f0:	9b08      	ldr	r3, [sp, #32]
 80166f2:	3316      	adds	r3, #22
 80166f4:	db0b      	blt.n	801670e <_strtod_l+0x44e>
 80166f6:	9b05      	ldr	r3, [sp, #20]
 80166f8:	1bdf      	subs	r7, r3, r7
 80166fa:	4b54      	ldr	r3, [pc, #336]	; (801684c <_strtod_l+0x58c>)
 80166fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8016700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016704:	4640      	mov	r0, r8
 8016706:	4649      	mov	r1, r9
 8016708:	f7ea f8a8 	bl	800085c <__aeabi_ddiv>
 801670c:	e7d6      	b.n	80166bc <_strtod_l+0x3fc>
 801670e:	9b08      	ldr	r3, [sp, #32]
 8016710:	1b75      	subs	r5, r6, r5
 8016712:	441d      	add	r5, r3
 8016714:	2d00      	cmp	r5, #0
 8016716:	dd70      	ble.n	80167fa <_strtod_l+0x53a>
 8016718:	f015 030f 	ands.w	r3, r5, #15
 801671c:	d00a      	beq.n	8016734 <_strtod_l+0x474>
 801671e:	494b      	ldr	r1, [pc, #300]	; (801684c <_strtod_l+0x58c>)
 8016720:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016724:	4642      	mov	r2, r8
 8016726:	464b      	mov	r3, r9
 8016728:	e9d1 0100 	ldrd	r0, r1, [r1]
 801672c:	f7e9 ff6c 	bl	8000608 <__aeabi_dmul>
 8016730:	4680      	mov	r8, r0
 8016732:	4689      	mov	r9, r1
 8016734:	f035 050f 	bics.w	r5, r5, #15
 8016738:	d04d      	beq.n	80167d6 <_strtod_l+0x516>
 801673a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801673e:	dd22      	ble.n	8016786 <_strtod_l+0x4c6>
 8016740:	2500      	movs	r5, #0
 8016742:	46ab      	mov	fp, r5
 8016744:	9509      	str	r5, [sp, #36]	; 0x24
 8016746:	9505      	str	r5, [sp, #20]
 8016748:	2322      	movs	r3, #34	; 0x22
 801674a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8016854 <_strtod_l+0x594>
 801674e:	6023      	str	r3, [r4, #0]
 8016750:	f04f 0800 	mov.w	r8, #0
 8016754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016756:	2b00      	cmp	r3, #0
 8016758:	f43f aded 	beq.w	8016336 <_strtod_l+0x76>
 801675c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801675e:	4620      	mov	r0, r4
 8016760:	f7ff f924 	bl	80159ac <_Bfree>
 8016764:	9905      	ldr	r1, [sp, #20]
 8016766:	4620      	mov	r0, r4
 8016768:	f7ff f920 	bl	80159ac <_Bfree>
 801676c:	4659      	mov	r1, fp
 801676e:	4620      	mov	r0, r4
 8016770:	f7ff f91c 	bl	80159ac <_Bfree>
 8016774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016776:	4620      	mov	r0, r4
 8016778:	f7ff f918 	bl	80159ac <_Bfree>
 801677c:	4629      	mov	r1, r5
 801677e:	4620      	mov	r0, r4
 8016780:	f7ff f914 	bl	80159ac <_Bfree>
 8016784:	e5d7      	b.n	8016336 <_strtod_l+0x76>
 8016786:	4b32      	ldr	r3, [pc, #200]	; (8016850 <_strtod_l+0x590>)
 8016788:	9304      	str	r3, [sp, #16]
 801678a:	2300      	movs	r3, #0
 801678c:	112d      	asrs	r5, r5, #4
 801678e:	4640      	mov	r0, r8
 8016790:	4649      	mov	r1, r9
 8016792:	469a      	mov	sl, r3
 8016794:	2d01      	cmp	r5, #1
 8016796:	dc21      	bgt.n	80167dc <_strtod_l+0x51c>
 8016798:	b10b      	cbz	r3, 801679e <_strtod_l+0x4de>
 801679a:	4680      	mov	r8, r0
 801679c:	4689      	mov	r9, r1
 801679e:	492c      	ldr	r1, [pc, #176]	; (8016850 <_strtod_l+0x590>)
 80167a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80167a4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80167a8:	4642      	mov	r2, r8
 80167aa:	464b      	mov	r3, r9
 80167ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167b0:	f7e9 ff2a 	bl	8000608 <__aeabi_dmul>
 80167b4:	4b27      	ldr	r3, [pc, #156]	; (8016854 <_strtod_l+0x594>)
 80167b6:	460a      	mov	r2, r1
 80167b8:	400b      	ands	r3, r1
 80167ba:	4927      	ldr	r1, [pc, #156]	; (8016858 <_strtod_l+0x598>)
 80167bc:	428b      	cmp	r3, r1
 80167be:	4680      	mov	r8, r0
 80167c0:	d8be      	bhi.n	8016740 <_strtod_l+0x480>
 80167c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80167c6:	428b      	cmp	r3, r1
 80167c8:	bf86      	itte	hi
 80167ca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801685c <_strtod_l+0x59c>
 80167ce:	f04f 38ff 	movhi.w	r8, #4294967295
 80167d2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80167d6:	2300      	movs	r3, #0
 80167d8:	9304      	str	r3, [sp, #16]
 80167da:	e07b      	b.n	80168d4 <_strtod_l+0x614>
 80167dc:	07ea      	lsls	r2, r5, #31
 80167de:	d505      	bpl.n	80167ec <_strtod_l+0x52c>
 80167e0:	9b04      	ldr	r3, [sp, #16]
 80167e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e6:	f7e9 ff0f 	bl	8000608 <__aeabi_dmul>
 80167ea:	2301      	movs	r3, #1
 80167ec:	9a04      	ldr	r2, [sp, #16]
 80167ee:	3208      	adds	r2, #8
 80167f0:	f10a 0a01 	add.w	sl, sl, #1
 80167f4:	106d      	asrs	r5, r5, #1
 80167f6:	9204      	str	r2, [sp, #16]
 80167f8:	e7cc      	b.n	8016794 <_strtod_l+0x4d4>
 80167fa:	d0ec      	beq.n	80167d6 <_strtod_l+0x516>
 80167fc:	426d      	negs	r5, r5
 80167fe:	f015 020f 	ands.w	r2, r5, #15
 8016802:	d00a      	beq.n	801681a <_strtod_l+0x55a>
 8016804:	4b11      	ldr	r3, [pc, #68]	; (801684c <_strtod_l+0x58c>)
 8016806:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801680a:	4640      	mov	r0, r8
 801680c:	4649      	mov	r1, r9
 801680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016812:	f7ea f823 	bl	800085c <__aeabi_ddiv>
 8016816:	4680      	mov	r8, r0
 8016818:	4689      	mov	r9, r1
 801681a:	112d      	asrs	r5, r5, #4
 801681c:	d0db      	beq.n	80167d6 <_strtod_l+0x516>
 801681e:	2d1f      	cmp	r5, #31
 8016820:	dd1e      	ble.n	8016860 <_strtod_l+0x5a0>
 8016822:	2500      	movs	r5, #0
 8016824:	46ab      	mov	fp, r5
 8016826:	9509      	str	r5, [sp, #36]	; 0x24
 8016828:	9505      	str	r5, [sp, #20]
 801682a:	2322      	movs	r3, #34	; 0x22
 801682c:	f04f 0800 	mov.w	r8, #0
 8016830:	f04f 0900 	mov.w	r9, #0
 8016834:	6023      	str	r3, [r4, #0]
 8016836:	e78d      	b.n	8016754 <_strtod_l+0x494>
 8016838:	08018df5 	.word	0x08018df5
 801683c:	0801901c 	.word	0x0801901c
 8016840:	08018ded 	.word	0x08018ded
 8016844:	08018e24 	.word	0x08018e24
 8016848:	080191ad 	.word	0x080191ad
 801684c:	08018f30 	.word	0x08018f30
 8016850:	08018f08 	.word	0x08018f08
 8016854:	7ff00000 	.word	0x7ff00000
 8016858:	7ca00000 	.word	0x7ca00000
 801685c:	7fefffff 	.word	0x7fefffff
 8016860:	f015 0310 	ands.w	r3, r5, #16
 8016864:	bf18      	it	ne
 8016866:	236a      	movne	r3, #106	; 0x6a
 8016868:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8016c0c <_strtod_l+0x94c>
 801686c:	9304      	str	r3, [sp, #16]
 801686e:	4640      	mov	r0, r8
 8016870:	4649      	mov	r1, r9
 8016872:	2300      	movs	r3, #0
 8016874:	07ea      	lsls	r2, r5, #31
 8016876:	d504      	bpl.n	8016882 <_strtod_l+0x5c2>
 8016878:	e9da 2300 	ldrd	r2, r3, [sl]
 801687c:	f7e9 fec4 	bl	8000608 <__aeabi_dmul>
 8016880:	2301      	movs	r3, #1
 8016882:	106d      	asrs	r5, r5, #1
 8016884:	f10a 0a08 	add.w	sl, sl, #8
 8016888:	d1f4      	bne.n	8016874 <_strtod_l+0x5b4>
 801688a:	b10b      	cbz	r3, 8016890 <_strtod_l+0x5d0>
 801688c:	4680      	mov	r8, r0
 801688e:	4689      	mov	r9, r1
 8016890:	9b04      	ldr	r3, [sp, #16]
 8016892:	b1bb      	cbz	r3, 80168c4 <_strtod_l+0x604>
 8016894:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016898:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801689c:	2b00      	cmp	r3, #0
 801689e:	4649      	mov	r1, r9
 80168a0:	dd10      	ble.n	80168c4 <_strtod_l+0x604>
 80168a2:	2b1f      	cmp	r3, #31
 80168a4:	f340 811e 	ble.w	8016ae4 <_strtod_l+0x824>
 80168a8:	2b34      	cmp	r3, #52	; 0x34
 80168aa:	bfde      	ittt	le
 80168ac:	f04f 33ff 	movle.w	r3, #4294967295
 80168b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80168b4:	4093      	lslle	r3, r2
 80168b6:	f04f 0800 	mov.w	r8, #0
 80168ba:	bfcc      	ite	gt
 80168bc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80168c0:	ea03 0901 	andle.w	r9, r3, r1
 80168c4:	2200      	movs	r2, #0
 80168c6:	2300      	movs	r3, #0
 80168c8:	4640      	mov	r0, r8
 80168ca:	4649      	mov	r1, r9
 80168cc:	f7ea f904 	bl	8000ad8 <__aeabi_dcmpeq>
 80168d0:	2800      	cmp	r0, #0
 80168d2:	d1a6      	bne.n	8016822 <_strtod_l+0x562>
 80168d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168d6:	9300      	str	r3, [sp, #0]
 80168d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168da:	4633      	mov	r3, r6
 80168dc:	465a      	mov	r2, fp
 80168de:	4620      	mov	r0, r4
 80168e0:	f7ff f8cc 	bl	8015a7c <__s2b>
 80168e4:	9009      	str	r0, [sp, #36]	; 0x24
 80168e6:	2800      	cmp	r0, #0
 80168e8:	f43f af2a 	beq.w	8016740 <_strtod_l+0x480>
 80168ec:	9a08      	ldr	r2, [sp, #32]
 80168ee:	9b05      	ldr	r3, [sp, #20]
 80168f0:	2a00      	cmp	r2, #0
 80168f2:	eba3 0307 	sub.w	r3, r3, r7
 80168f6:	bfa8      	it	ge
 80168f8:	2300      	movge	r3, #0
 80168fa:	930c      	str	r3, [sp, #48]	; 0x30
 80168fc:	2500      	movs	r5, #0
 80168fe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016902:	9312      	str	r3, [sp, #72]	; 0x48
 8016904:	46ab      	mov	fp, r5
 8016906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016908:	4620      	mov	r0, r4
 801690a:	6859      	ldr	r1, [r3, #4]
 801690c:	f7ff f80e 	bl	801592c <_Balloc>
 8016910:	9005      	str	r0, [sp, #20]
 8016912:	2800      	cmp	r0, #0
 8016914:	f43f af18 	beq.w	8016748 <_strtod_l+0x488>
 8016918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801691a:	691a      	ldr	r2, [r3, #16]
 801691c:	3202      	adds	r2, #2
 801691e:	f103 010c 	add.w	r1, r3, #12
 8016922:	0092      	lsls	r2, r2, #2
 8016924:	300c      	adds	r0, #12
 8016926:	f7fe f871 	bl	8014a0c <memcpy>
 801692a:	ec49 8b10 	vmov	d0, r8, r9
 801692e:	aa18      	add	r2, sp, #96	; 0x60
 8016930:	a917      	add	r1, sp, #92	; 0x5c
 8016932:	4620      	mov	r0, r4
 8016934:	f7ff fbd6 	bl	80160e4 <__d2b>
 8016938:	ec49 8b18 	vmov	d8, r8, r9
 801693c:	9016      	str	r0, [sp, #88]	; 0x58
 801693e:	2800      	cmp	r0, #0
 8016940:	f43f af02 	beq.w	8016748 <_strtod_l+0x488>
 8016944:	2101      	movs	r1, #1
 8016946:	4620      	mov	r0, r4
 8016948:	f7ff f930 	bl	8015bac <__i2b>
 801694c:	4683      	mov	fp, r0
 801694e:	2800      	cmp	r0, #0
 8016950:	f43f aefa 	beq.w	8016748 <_strtod_l+0x488>
 8016954:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8016956:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016958:	2e00      	cmp	r6, #0
 801695a:	bfab      	itete	ge
 801695c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801695e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8016960:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8016962:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8016966:	bfac      	ite	ge
 8016968:	eb06 0a03 	addge.w	sl, r6, r3
 801696c:	1b9f      	sublt	r7, r3, r6
 801696e:	9b04      	ldr	r3, [sp, #16]
 8016970:	1af6      	subs	r6, r6, r3
 8016972:	4416      	add	r6, r2
 8016974:	4ba0      	ldr	r3, [pc, #640]	; (8016bf8 <_strtod_l+0x938>)
 8016976:	3e01      	subs	r6, #1
 8016978:	429e      	cmp	r6, r3
 801697a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801697e:	f280 80c4 	bge.w	8016b0a <_strtod_l+0x84a>
 8016982:	1b9b      	subs	r3, r3, r6
 8016984:	2b1f      	cmp	r3, #31
 8016986:	eba2 0203 	sub.w	r2, r2, r3
 801698a:	f04f 0101 	mov.w	r1, #1
 801698e:	f300 80b0 	bgt.w	8016af2 <_strtod_l+0x832>
 8016992:	fa01 f303 	lsl.w	r3, r1, r3
 8016996:	930e      	str	r3, [sp, #56]	; 0x38
 8016998:	2300      	movs	r3, #0
 801699a:	930d      	str	r3, [sp, #52]	; 0x34
 801699c:	eb0a 0602 	add.w	r6, sl, r2
 80169a0:	9b04      	ldr	r3, [sp, #16]
 80169a2:	45b2      	cmp	sl, r6
 80169a4:	4417      	add	r7, r2
 80169a6:	441f      	add	r7, r3
 80169a8:	4653      	mov	r3, sl
 80169aa:	bfa8      	it	ge
 80169ac:	4633      	movge	r3, r6
 80169ae:	42bb      	cmp	r3, r7
 80169b0:	bfa8      	it	ge
 80169b2:	463b      	movge	r3, r7
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	bfc2      	ittt	gt
 80169b8:	1af6      	subgt	r6, r6, r3
 80169ba:	1aff      	subgt	r7, r7, r3
 80169bc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80169c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	dd17      	ble.n	80169f6 <_strtod_l+0x736>
 80169c6:	4659      	mov	r1, fp
 80169c8:	461a      	mov	r2, r3
 80169ca:	4620      	mov	r0, r4
 80169cc:	f7ff f9ae 	bl	8015d2c <__pow5mult>
 80169d0:	4683      	mov	fp, r0
 80169d2:	2800      	cmp	r0, #0
 80169d4:	f43f aeb8 	beq.w	8016748 <_strtod_l+0x488>
 80169d8:	4601      	mov	r1, r0
 80169da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80169dc:	4620      	mov	r0, r4
 80169de:	f7ff f8fb 	bl	8015bd8 <__multiply>
 80169e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80169e4:	2800      	cmp	r0, #0
 80169e6:	f43f aeaf 	beq.w	8016748 <_strtod_l+0x488>
 80169ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 80169ec:	4620      	mov	r0, r4
 80169ee:	f7fe ffdd 	bl	80159ac <_Bfree>
 80169f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80169f4:	9316      	str	r3, [sp, #88]	; 0x58
 80169f6:	2e00      	cmp	r6, #0
 80169f8:	f300 808c 	bgt.w	8016b14 <_strtod_l+0x854>
 80169fc:	9b08      	ldr	r3, [sp, #32]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	dd08      	ble.n	8016a14 <_strtod_l+0x754>
 8016a02:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a04:	9905      	ldr	r1, [sp, #20]
 8016a06:	4620      	mov	r0, r4
 8016a08:	f7ff f990 	bl	8015d2c <__pow5mult>
 8016a0c:	9005      	str	r0, [sp, #20]
 8016a0e:	2800      	cmp	r0, #0
 8016a10:	f43f ae9a 	beq.w	8016748 <_strtod_l+0x488>
 8016a14:	2f00      	cmp	r7, #0
 8016a16:	dd08      	ble.n	8016a2a <_strtod_l+0x76a>
 8016a18:	9905      	ldr	r1, [sp, #20]
 8016a1a:	463a      	mov	r2, r7
 8016a1c:	4620      	mov	r0, r4
 8016a1e:	f7ff f9df 	bl	8015de0 <__lshift>
 8016a22:	9005      	str	r0, [sp, #20]
 8016a24:	2800      	cmp	r0, #0
 8016a26:	f43f ae8f 	beq.w	8016748 <_strtod_l+0x488>
 8016a2a:	f1ba 0f00 	cmp.w	sl, #0
 8016a2e:	dd08      	ble.n	8016a42 <_strtod_l+0x782>
 8016a30:	4659      	mov	r1, fp
 8016a32:	4652      	mov	r2, sl
 8016a34:	4620      	mov	r0, r4
 8016a36:	f7ff f9d3 	bl	8015de0 <__lshift>
 8016a3a:	4683      	mov	fp, r0
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	f43f ae83 	beq.w	8016748 <_strtod_l+0x488>
 8016a42:	9a05      	ldr	r2, [sp, #20]
 8016a44:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016a46:	4620      	mov	r0, r4
 8016a48:	f7ff fa52 	bl	8015ef0 <__mdiff>
 8016a4c:	4605      	mov	r5, r0
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	f43f ae7a 	beq.w	8016748 <_strtod_l+0x488>
 8016a54:	68c3      	ldr	r3, [r0, #12]
 8016a56:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a58:	2300      	movs	r3, #0
 8016a5a:	60c3      	str	r3, [r0, #12]
 8016a5c:	4659      	mov	r1, fp
 8016a5e:	f7ff fa2b 	bl	8015eb8 <__mcmp>
 8016a62:	2800      	cmp	r0, #0
 8016a64:	da60      	bge.n	8016b28 <_strtod_l+0x868>
 8016a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016a68:	ea53 0308 	orrs.w	r3, r3, r8
 8016a6c:	f040 8084 	bne.w	8016b78 <_strtod_l+0x8b8>
 8016a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d17f      	bne.n	8016b78 <_strtod_l+0x8b8>
 8016a78:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016a7c:	0d1b      	lsrs	r3, r3, #20
 8016a7e:	051b      	lsls	r3, r3, #20
 8016a80:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016a84:	d978      	bls.n	8016b78 <_strtod_l+0x8b8>
 8016a86:	696b      	ldr	r3, [r5, #20]
 8016a88:	b913      	cbnz	r3, 8016a90 <_strtod_l+0x7d0>
 8016a8a:	692b      	ldr	r3, [r5, #16]
 8016a8c:	2b01      	cmp	r3, #1
 8016a8e:	dd73      	ble.n	8016b78 <_strtod_l+0x8b8>
 8016a90:	4629      	mov	r1, r5
 8016a92:	2201      	movs	r2, #1
 8016a94:	4620      	mov	r0, r4
 8016a96:	f7ff f9a3 	bl	8015de0 <__lshift>
 8016a9a:	4659      	mov	r1, fp
 8016a9c:	4605      	mov	r5, r0
 8016a9e:	f7ff fa0b 	bl	8015eb8 <__mcmp>
 8016aa2:	2800      	cmp	r0, #0
 8016aa4:	dd68      	ble.n	8016b78 <_strtod_l+0x8b8>
 8016aa6:	9904      	ldr	r1, [sp, #16]
 8016aa8:	4a54      	ldr	r2, [pc, #336]	; (8016bfc <_strtod_l+0x93c>)
 8016aaa:	464b      	mov	r3, r9
 8016aac:	2900      	cmp	r1, #0
 8016aae:	f000 8084 	beq.w	8016bba <_strtod_l+0x8fa>
 8016ab2:	ea02 0109 	and.w	r1, r2, r9
 8016ab6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016aba:	dc7e      	bgt.n	8016bba <_strtod_l+0x8fa>
 8016abc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016ac0:	f77f aeb3 	ble.w	801682a <_strtod_l+0x56a>
 8016ac4:	4b4e      	ldr	r3, [pc, #312]	; (8016c00 <_strtod_l+0x940>)
 8016ac6:	4640      	mov	r0, r8
 8016ac8:	4649      	mov	r1, r9
 8016aca:	2200      	movs	r2, #0
 8016acc:	f7e9 fd9c 	bl	8000608 <__aeabi_dmul>
 8016ad0:	4b4a      	ldr	r3, [pc, #296]	; (8016bfc <_strtod_l+0x93c>)
 8016ad2:	400b      	ands	r3, r1
 8016ad4:	4680      	mov	r8, r0
 8016ad6:	4689      	mov	r9, r1
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	f47f ae3f 	bne.w	801675c <_strtod_l+0x49c>
 8016ade:	2322      	movs	r3, #34	; 0x22
 8016ae0:	6023      	str	r3, [r4, #0]
 8016ae2:	e63b      	b.n	801675c <_strtod_l+0x49c>
 8016ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8016aec:	ea03 0808 	and.w	r8, r3, r8
 8016af0:	e6e8      	b.n	80168c4 <_strtod_l+0x604>
 8016af2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016af6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016afa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016afe:	36e2      	adds	r6, #226	; 0xe2
 8016b00:	fa01 f306 	lsl.w	r3, r1, r6
 8016b04:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8016b08:	e748      	b.n	801699c <_strtod_l+0x6dc>
 8016b0a:	2100      	movs	r1, #0
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8016b12:	e743      	b.n	801699c <_strtod_l+0x6dc>
 8016b14:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016b16:	4632      	mov	r2, r6
 8016b18:	4620      	mov	r0, r4
 8016b1a:	f7ff f961 	bl	8015de0 <__lshift>
 8016b1e:	9016      	str	r0, [sp, #88]	; 0x58
 8016b20:	2800      	cmp	r0, #0
 8016b22:	f47f af6b 	bne.w	80169fc <_strtod_l+0x73c>
 8016b26:	e60f      	b.n	8016748 <_strtod_l+0x488>
 8016b28:	46ca      	mov	sl, r9
 8016b2a:	d171      	bne.n	8016c10 <_strtod_l+0x950>
 8016b2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016b2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016b32:	b352      	cbz	r2, 8016b8a <_strtod_l+0x8ca>
 8016b34:	4a33      	ldr	r2, [pc, #204]	; (8016c04 <_strtod_l+0x944>)
 8016b36:	4293      	cmp	r3, r2
 8016b38:	d12a      	bne.n	8016b90 <_strtod_l+0x8d0>
 8016b3a:	9b04      	ldr	r3, [sp, #16]
 8016b3c:	4641      	mov	r1, r8
 8016b3e:	b1fb      	cbz	r3, 8016b80 <_strtod_l+0x8c0>
 8016b40:	4b2e      	ldr	r3, [pc, #184]	; (8016bfc <_strtod_l+0x93c>)
 8016b42:	ea09 0303 	and.w	r3, r9, r3
 8016b46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8016b4e:	d81a      	bhi.n	8016b86 <_strtod_l+0x8c6>
 8016b50:	0d1b      	lsrs	r3, r3, #20
 8016b52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016b56:	fa02 f303 	lsl.w	r3, r2, r3
 8016b5a:	4299      	cmp	r1, r3
 8016b5c:	d118      	bne.n	8016b90 <_strtod_l+0x8d0>
 8016b5e:	4b2a      	ldr	r3, [pc, #168]	; (8016c08 <_strtod_l+0x948>)
 8016b60:	459a      	cmp	sl, r3
 8016b62:	d102      	bne.n	8016b6a <_strtod_l+0x8aa>
 8016b64:	3101      	adds	r1, #1
 8016b66:	f43f adef 	beq.w	8016748 <_strtod_l+0x488>
 8016b6a:	4b24      	ldr	r3, [pc, #144]	; (8016bfc <_strtod_l+0x93c>)
 8016b6c:	ea0a 0303 	and.w	r3, sl, r3
 8016b70:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016b74:	f04f 0800 	mov.w	r8, #0
 8016b78:	9b04      	ldr	r3, [sp, #16]
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d1a2      	bne.n	8016ac4 <_strtod_l+0x804>
 8016b7e:	e5ed      	b.n	801675c <_strtod_l+0x49c>
 8016b80:	f04f 33ff 	mov.w	r3, #4294967295
 8016b84:	e7e9      	b.n	8016b5a <_strtod_l+0x89a>
 8016b86:	4613      	mov	r3, r2
 8016b88:	e7e7      	b.n	8016b5a <_strtod_l+0x89a>
 8016b8a:	ea53 0308 	orrs.w	r3, r3, r8
 8016b8e:	d08a      	beq.n	8016aa6 <_strtod_l+0x7e6>
 8016b90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016b92:	b1e3      	cbz	r3, 8016bce <_strtod_l+0x90e>
 8016b94:	ea13 0f0a 	tst.w	r3, sl
 8016b98:	d0ee      	beq.n	8016b78 <_strtod_l+0x8b8>
 8016b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b9c:	9a04      	ldr	r2, [sp, #16]
 8016b9e:	4640      	mov	r0, r8
 8016ba0:	4649      	mov	r1, r9
 8016ba2:	b1c3      	cbz	r3, 8016bd6 <_strtod_l+0x916>
 8016ba4:	f7ff fb6f 	bl	8016286 <sulp>
 8016ba8:	4602      	mov	r2, r0
 8016baa:	460b      	mov	r3, r1
 8016bac:	ec51 0b18 	vmov	r0, r1, d8
 8016bb0:	f7e9 fb74 	bl	800029c <__adddf3>
 8016bb4:	4680      	mov	r8, r0
 8016bb6:	4689      	mov	r9, r1
 8016bb8:	e7de      	b.n	8016b78 <_strtod_l+0x8b8>
 8016bba:	4013      	ands	r3, r2
 8016bbc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016bc0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016bc4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016bc8:	f04f 38ff 	mov.w	r8, #4294967295
 8016bcc:	e7d4      	b.n	8016b78 <_strtod_l+0x8b8>
 8016bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bd0:	ea13 0f08 	tst.w	r3, r8
 8016bd4:	e7e0      	b.n	8016b98 <_strtod_l+0x8d8>
 8016bd6:	f7ff fb56 	bl	8016286 <sulp>
 8016bda:	4602      	mov	r2, r0
 8016bdc:	460b      	mov	r3, r1
 8016bde:	ec51 0b18 	vmov	r0, r1, d8
 8016be2:	f7e9 fb59 	bl	8000298 <__aeabi_dsub>
 8016be6:	2200      	movs	r2, #0
 8016be8:	2300      	movs	r3, #0
 8016bea:	4680      	mov	r8, r0
 8016bec:	4689      	mov	r9, r1
 8016bee:	f7e9 ff73 	bl	8000ad8 <__aeabi_dcmpeq>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	d0c0      	beq.n	8016b78 <_strtod_l+0x8b8>
 8016bf6:	e618      	b.n	801682a <_strtod_l+0x56a>
 8016bf8:	fffffc02 	.word	0xfffffc02
 8016bfc:	7ff00000 	.word	0x7ff00000
 8016c00:	39500000 	.word	0x39500000
 8016c04:	000fffff 	.word	0x000fffff
 8016c08:	7fefffff 	.word	0x7fefffff
 8016c0c:	08019030 	.word	0x08019030
 8016c10:	4659      	mov	r1, fp
 8016c12:	4628      	mov	r0, r5
 8016c14:	f7ff fac0 	bl	8016198 <__ratio>
 8016c18:	ec57 6b10 	vmov	r6, r7, d0
 8016c1c:	ee10 0a10 	vmov	r0, s0
 8016c20:	2200      	movs	r2, #0
 8016c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016c26:	4639      	mov	r1, r7
 8016c28:	f7e9 ff6a 	bl	8000b00 <__aeabi_dcmple>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	d071      	beq.n	8016d14 <_strtod_l+0xa54>
 8016c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d17c      	bne.n	8016d30 <_strtod_l+0xa70>
 8016c36:	f1b8 0f00 	cmp.w	r8, #0
 8016c3a:	d15a      	bne.n	8016cf2 <_strtod_l+0xa32>
 8016c3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d15d      	bne.n	8016d00 <_strtod_l+0xa40>
 8016c44:	4b90      	ldr	r3, [pc, #576]	; (8016e88 <_strtod_l+0xbc8>)
 8016c46:	2200      	movs	r2, #0
 8016c48:	4630      	mov	r0, r6
 8016c4a:	4639      	mov	r1, r7
 8016c4c:	f7e9 ff4e 	bl	8000aec <__aeabi_dcmplt>
 8016c50:	2800      	cmp	r0, #0
 8016c52:	d15c      	bne.n	8016d0e <_strtod_l+0xa4e>
 8016c54:	4630      	mov	r0, r6
 8016c56:	4639      	mov	r1, r7
 8016c58:	4b8c      	ldr	r3, [pc, #560]	; (8016e8c <_strtod_l+0xbcc>)
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	f7e9 fcd4 	bl	8000608 <__aeabi_dmul>
 8016c60:	4606      	mov	r6, r0
 8016c62:	460f      	mov	r7, r1
 8016c64:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016c68:	9606      	str	r6, [sp, #24]
 8016c6a:	9307      	str	r3, [sp, #28]
 8016c6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016c70:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016c74:	4b86      	ldr	r3, [pc, #536]	; (8016e90 <_strtod_l+0xbd0>)
 8016c76:	ea0a 0303 	and.w	r3, sl, r3
 8016c7a:	930d      	str	r3, [sp, #52]	; 0x34
 8016c7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c7e:	4b85      	ldr	r3, [pc, #532]	; (8016e94 <_strtod_l+0xbd4>)
 8016c80:	429a      	cmp	r2, r3
 8016c82:	f040 8090 	bne.w	8016da6 <_strtod_l+0xae6>
 8016c86:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016c8a:	ec49 8b10 	vmov	d0, r8, r9
 8016c8e:	f7ff f9b9 	bl	8016004 <__ulp>
 8016c92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016c96:	ec51 0b10 	vmov	r0, r1, d0
 8016c9a:	f7e9 fcb5 	bl	8000608 <__aeabi_dmul>
 8016c9e:	4642      	mov	r2, r8
 8016ca0:	464b      	mov	r3, r9
 8016ca2:	f7e9 fafb 	bl	800029c <__adddf3>
 8016ca6:	460b      	mov	r3, r1
 8016ca8:	4979      	ldr	r1, [pc, #484]	; (8016e90 <_strtod_l+0xbd0>)
 8016caa:	4a7b      	ldr	r2, [pc, #492]	; (8016e98 <_strtod_l+0xbd8>)
 8016cac:	4019      	ands	r1, r3
 8016cae:	4291      	cmp	r1, r2
 8016cb0:	4680      	mov	r8, r0
 8016cb2:	d944      	bls.n	8016d3e <_strtod_l+0xa7e>
 8016cb4:	ee18 2a90 	vmov	r2, s17
 8016cb8:	4b78      	ldr	r3, [pc, #480]	; (8016e9c <_strtod_l+0xbdc>)
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d104      	bne.n	8016cc8 <_strtod_l+0xa08>
 8016cbe:	ee18 3a10 	vmov	r3, s16
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	f43f ad40 	beq.w	8016748 <_strtod_l+0x488>
 8016cc8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8016e9c <_strtod_l+0xbdc>
 8016ccc:	f04f 38ff 	mov.w	r8, #4294967295
 8016cd0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016cd2:	4620      	mov	r0, r4
 8016cd4:	f7fe fe6a 	bl	80159ac <_Bfree>
 8016cd8:	9905      	ldr	r1, [sp, #20]
 8016cda:	4620      	mov	r0, r4
 8016cdc:	f7fe fe66 	bl	80159ac <_Bfree>
 8016ce0:	4659      	mov	r1, fp
 8016ce2:	4620      	mov	r0, r4
 8016ce4:	f7fe fe62 	bl	80159ac <_Bfree>
 8016ce8:	4629      	mov	r1, r5
 8016cea:	4620      	mov	r0, r4
 8016cec:	f7fe fe5e 	bl	80159ac <_Bfree>
 8016cf0:	e609      	b.n	8016906 <_strtod_l+0x646>
 8016cf2:	f1b8 0f01 	cmp.w	r8, #1
 8016cf6:	d103      	bne.n	8016d00 <_strtod_l+0xa40>
 8016cf8:	f1b9 0f00 	cmp.w	r9, #0
 8016cfc:	f43f ad95 	beq.w	801682a <_strtod_l+0x56a>
 8016d00:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8016e58 <_strtod_l+0xb98>
 8016d04:	4f60      	ldr	r7, [pc, #384]	; (8016e88 <_strtod_l+0xbc8>)
 8016d06:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016d0a:	2600      	movs	r6, #0
 8016d0c:	e7ae      	b.n	8016c6c <_strtod_l+0x9ac>
 8016d0e:	4f5f      	ldr	r7, [pc, #380]	; (8016e8c <_strtod_l+0xbcc>)
 8016d10:	2600      	movs	r6, #0
 8016d12:	e7a7      	b.n	8016c64 <_strtod_l+0x9a4>
 8016d14:	4b5d      	ldr	r3, [pc, #372]	; (8016e8c <_strtod_l+0xbcc>)
 8016d16:	4630      	mov	r0, r6
 8016d18:	4639      	mov	r1, r7
 8016d1a:	2200      	movs	r2, #0
 8016d1c:	f7e9 fc74 	bl	8000608 <__aeabi_dmul>
 8016d20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d22:	4606      	mov	r6, r0
 8016d24:	460f      	mov	r7, r1
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d09c      	beq.n	8016c64 <_strtod_l+0x9a4>
 8016d2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016d2e:	e79d      	b.n	8016c6c <_strtod_l+0x9ac>
 8016d30:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8016e60 <_strtod_l+0xba0>
 8016d34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016d38:	ec57 6b17 	vmov	r6, r7, d7
 8016d3c:	e796      	b.n	8016c6c <_strtod_l+0x9ac>
 8016d3e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016d42:	9b04      	ldr	r3, [sp, #16]
 8016d44:	46ca      	mov	sl, r9
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d1c2      	bne.n	8016cd0 <_strtod_l+0xa10>
 8016d4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016d50:	0d1b      	lsrs	r3, r3, #20
 8016d52:	051b      	lsls	r3, r3, #20
 8016d54:	429a      	cmp	r2, r3
 8016d56:	d1bb      	bne.n	8016cd0 <_strtod_l+0xa10>
 8016d58:	4630      	mov	r0, r6
 8016d5a:	4639      	mov	r1, r7
 8016d5c:	f7ea f804 	bl	8000d68 <__aeabi_d2lz>
 8016d60:	f7e9 fc24 	bl	80005ac <__aeabi_l2d>
 8016d64:	4602      	mov	r2, r0
 8016d66:	460b      	mov	r3, r1
 8016d68:	4630      	mov	r0, r6
 8016d6a:	4639      	mov	r1, r7
 8016d6c:	f7e9 fa94 	bl	8000298 <__aeabi_dsub>
 8016d70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d72:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016d76:	ea43 0308 	orr.w	r3, r3, r8
 8016d7a:	4313      	orrs	r3, r2
 8016d7c:	4606      	mov	r6, r0
 8016d7e:	460f      	mov	r7, r1
 8016d80:	d054      	beq.n	8016e2c <_strtod_l+0xb6c>
 8016d82:	a339      	add	r3, pc, #228	; (adr r3, 8016e68 <_strtod_l+0xba8>)
 8016d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d88:	f7e9 feb0 	bl	8000aec <__aeabi_dcmplt>
 8016d8c:	2800      	cmp	r0, #0
 8016d8e:	f47f ace5 	bne.w	801675c <_strtod_l+0x49c>
 8016d92:	a337      	add	r3, pc, #220	; (adr r3, 8016e70 <_strtod_l+0xbb0>)
 8016d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d98:	4630      	mov	r0, r6
 8016d9a:	4639      	mov	r1, r7
 8016d9c:	f7e9 fec4 	bl	8000b28 <__aeabi_dcmpgt>
 8016da0:	2800      	cmp	r0, #0
 8016da2:	d095      	beq.n	8016cd0 <_strtod_l+0xa10>
 8016da4:	e4da      	b.n	801675c <_strtod_l+0x49c>
 8016da6:	9b04      	ldr	r3, [sp, #16]
 8016da8:	b333      	cbz	r3, 8016df8 <_strtod_l+0xb38>
 8016daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016dac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016db0:	d822      	bhi.n	8016df8 <_strtod_l+0xb38>
 8016db2:	a331      	add	r3, pc, #196	; (adr r3, 8016e78 <_strtod_l+0xbb8>)
 8016db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016db8:	4630      	mov	r0, r6
 8016dba:	4639      	mov	r1, r7
 8016dbc:	f7e9 fea0 	bl	8000b00 <__aeabi_dcmple>
 8016dc0:	b1a0      	cbz	r0, 8016dec <_strtod_l+0xb2c>
 8016dc2:	4639      	mov	r1, r7
 8016dc4:	4630      	mov	r0, r6
 8016dc6:	f7e9 fef7 	bl	8000bb8 <__aeabi_d2uiz>
 8016dca:	2801      	cmp	r0, #1
 8016dcc:	bf38      	it	cc
 8016dce:	2001      	movcc	r0, #1
 8016dd0:	f7e9 fba0 	bl	8000514 <__aeabi_ui2d>
 8016dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016dd6:	4606      	mov	r6, r0
 8016dd8:	460f      	mov	r7, r1
 8016dda:	bb23      	cbnz	r3, 8016e26 <_strtod_l+0xb66>
 8016ddc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016de0:	9010      	str	r0, [sp, #64]	; 0x40
 8016de2:	9311      	str	r3, [sp, #68]	; 0x44
 8016de4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016de8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8016dec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016dee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016df0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016df4:	1a9b      	subs	r3, r3, r2
 8016df6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016df8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016dfc:	eeb0 0a48 	vmov.f32	s0, s16
 8016e00:	eef0 0a68 	vmov.f32	s1, s17
 8016e04:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8016e08:	f7ff f8fc 	bl	8016004 <__ulp>
 8016e0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016e10:	ec53 2b10 	vmov	r2, r3, d0
 8016e14:	f7e9 fbf8 	bl	8000608 <__aeabi_dmul>
 8016e18:	ec53 2b18 	vmov	r2, r3, d8
 8016e1c:	f7e9 fa3e 	bl	800029c <__adddf3>
 8016e20:	4680      	mov	r8, r0
 8016e22:	4689      	mov	r9, r1
 8016e24:	e78d      	b.n	8016d42 <_strtod_l+0xa82>
 8016e26:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016e2a:	e7db      	b.n	8016de4 <_strtod_l+0xb24>
 8016e2c:	a314      	add	r3, pc, #80	; (adr r3, 8016e80 <_strtod_l+0xbc0>)
 8016e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e32:	f7e9 fe5b 	bl	8000aec <__aeabi_dcmplt>
 8016e36:	e7b3      	b.n	8016da0 <_strtod_l+0xae0>
 8016e38:	2300      	movs	r3, #0
 8016e3a:	930a      	str	r3, [sp, #40]	; 0x28
 8016e3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016e40:	6013      	str	r3, [r2, #0]
 8016e42:	f7ff ba7c 	b.w	801633e <_strtod_l+0x7e>
 8016e46:	2a65      	cmp	r2, #101	; 0x65
 8016e48:	f43f ab75 	beq.w	8016536 <_strtod_l+0x276>
 8016e4c:	2a45      	cmp	r2, #69	; 0x45
 8016e4e:	f43f ab72 	beq.w	8016536 <_strtod_l+0x276>
 8016e52:	2301      	movs	r3, #1
 8016e54:	f7ff bbaa 	b.w	80165ac <_strtod_l+0x2ec>
 8016e58:	00000000 	.word	0x00000000
 8016e5c:	bff00000 	.word	0xbff00000
 8016e60:	00000000 	.word	0x00000000
 8016e64:	3ff00000 	.word	0x3ff00000
 8016e68:	94a03595 	.word	0x94a03595
 8016e6c:	3fdfffff 	.word	0x3fdfffff
 8016e70:	35afe535 	.word	0x35afe535
 8016e74:	3fe00000 	.word	0x3fe00000
 8016e78:	ffc00000 	.word	0xffc00000
 8016e7c:	41dfffff 	.word	0x41dfffff
 8016e80:	94a03595 	.word	0x94a03595
 8016e84:	3fcfffff 	.word	0x3fcfffff
 8016e88:	3ff00000 	.word	0x3ff00000
 8016e8c:	3fe00000 	.word	0x3fe00000
 8016e90:	7ff00000 	.word	0x7ff00000
 8016e94:	7fe00000 	.word	0x7fe00000
 8016e98:	7c9fffff 	.word	0x7c9fffff
 8016e9c:	7fefffff 	.word	0x7fefffff

08016ea0 <_strtod_r>:
 8016ea0:	4b01      	ldr	r3, [pc, #4]	; (8016ea8 <_strtod_r+0x8>)
 8016ea2:	f7ff ba0d 	b.w	80162c0 <_strtod_l>
 8016ea6:	bf00      	nop
 8016ea8:	2000008c 	.word	0x2000008c

08016eac <_strtol_l.constprop.0>:
 8016eac:	2b01      	cmp	r3, #1
 8016eae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016eb2:	d001      	beq.n	8016eb8 <_strtol_l.constprop.0+0xc>
 8016eb4:	2b24      	cmp	r3, #36	; 0x24
 8016eb6:	d906      	bls.n	8016ec6 <_strtol_l.constprop.0+0x1a>
 8016eb8:	f7fd fd7c 	bl	80149b4 <__errno>
 8016ebc:	2316      	movs	r3, #22
 8016ebe:	6003      	str	r3, [r0, #0]
 8016ec0:	2000      	movs	r0, #0
 8016ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ec6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016fac <_strtol_l.constprop.0+0x100>
 8016eca:	460d      	mov	r5, r1
 8016ecc:	462e      	mov	r6, r5
 8016ece:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ed2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016ed6:	f017 0708 	ands.w	r7, r7, #8
 8016eda:	d1f7      	bne.n	8016ecc <_strtol_l.constprop.0+0x20>
 8016edc:	2c2d      	cmp	r4, #45	; 0x2d
 8016ede:	d132      	bne.n	8016f46 <_strtol_l.constprop.0+0x9a>
 8016ee0:	782c      	ldrb	r4, [r5, #0]
 8016ee2:	2701      	movs	r7, #1
 8016ee4:	1cb5      	adds	r5, r6, #2
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d05b      	beq.n	8016fa2 <_strtol_l.constprop.0+0xf6>
 8016eea:	2b10      	cmp	r3, #16
 8016eec:	d109      	bne.n	8016f02 <_strtol_l.constprop.0+0x56>
 8016eee:	2c30      	cmp	r4, #48	; 0x30
 8016ef0:	d107      	bne.n	8016f02 <_strtol_l.constprop.0+0x56>
 8016ef2:	782c      	ldrb	r4, [r5, #0]
 8016ef4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016ef8:	2c58      	cmp	r4, #88	; 0x58
 8016efa:	d14d      	bne.n	8016f98 <_strtol_l.constprop.0+0xec>
 8016efc:	786c      	ldrb	r4, [r5, #1]
 8016efe:	2310      	movs	r3, #16
 8016f00:	3502      	adds	r5, #2
 8016f02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016f06:	f108 38ff 	add.w	r8, r8, #4294967295
 8016f0a:	f04f 0e00 	mov.w	lr, #0
 8016f0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8016f12:	4676      	mov	r6, lr
 8016f14:	fb03 8a19 	mls	sl, r3, r9, r8
 8016f18:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016f1c:	f1bc 0f09 	cmp.w	ip, #9
 8016f20:	d816      	bhi.n	8016f50 <_strtol_l.constprop.0+0xa4>
 8016f22:	4664      	mov	r4, ip
 8016f24:	42a3      	cmp	r3, r4
 8016f26:	dd24      	ble.n	8016f72 <_strtol_l.constprop.0+0xc6>
 8016f28:	f1be 3fff 	cmp.w	lr, #4294967295
 8016f2c:	d008      	beq.n	8016f40 <_strtol_l.constprop.0+0x94>
 8016f2e:	45b1      	cmp	r9, r6
 8016f30:	d31c      	bcc.n	8016f6c <_strtol_l.constprop.0+0xc0>
 8016f32:	d101      	bne.n	8016f38 <_strtol_l.constprop.0+0x8c>
 8016f34:	45a2      	cmp	sl, r4
 8016f36:	db19      	blt.n	8016f6c <_strtol_l.constprop.0+0xc0>
 8016f38:	fb06 4603 	mla	r6, r6, r3, r4
 8016f3c:	f04f 0e01 	mov.w	lr, #1
 8016f40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f44:	e7e8      	b.n	8016f18 <_strtol_l.constprop.0+0x6c>
 8016f46:	2c2b      	cmp	r4, #43	; 0x2b
 8016f48:	bf04      	itt	eq
 8016f4a:	782c      	ldrbeq	r4, [r5, #0]
 8016f4c:	1cb5      	addeq	r5, r6, #2
 8016f4e:	e7ca      	b.n	8016ee6 <_strtol_l.constprop.0+0x3a>
 8016f50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016f54:	f1bc 0f19 	cmp.w	ip, #25
 8016f58:	d801      	bhi.n	8016f5e <_strtol_l.constprop.0+0xb2>
 8016f5a:	3c37      	subs	r4, #55	; 0x37
 8016f5c:	e7e2      	b.n	8016f24 <_strtol_l.constprop.0+0x78>
 8016f5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016f62:	f1bc 0f19 	cmp.w	ip, #25
 8016f66:	d804      	bhi.n	8016f72 <_strtol_l.constprop.0+0xc6>
 8016f68:	3c57      	subs	r4, #87	; 0x57
 8016f6a:	e7db      	b.n	8016f24 <_strtol_l.constprop.0+0x78>
 8016f6c:	f04f 3eff 	mov.w	lr, #4294967295
 8016f70:	e7e6      	b.n	8016f40 <_strtol_l.constprop.0+0x94>
 8016f72:	f1be 3fff 	cmp.w	lr, #4294967295
 8016f76:	d105      	bne.n	8016f84 <_strtol_l.constprop.0+0xd8>
 8016f78:	2322      	movs	r3, #34	; 0x22
 8016f7a:	6003      	str	r3, [r0, #0]
 8016f7c:	4646      	mov	r6, r8
 8016f7e:	b942      	cbnz	r2, 8016f92 <_strtol_l.constprop.0+0xe6>
 8016f80:	4630      	mov	r0, r6
 8016f82:	e79e      	b.n	8016ec2 <_strtol_l.constprop.0+0x16>
 8016f84:	b107      	cbz	r7, 8016f88 <_strtol_l.constprop.0+0xdc>
 8016f86:	4276      	negs	r6, r6
 8016f88:	2a00      	cmp	r2, #0
 8016f8a:	d0f9      	beq.n	8016f80 <_strtol_l.constprop.0+0xd4>
 8016f8c:	f1be 0f00 	cmp.w	lr, #0
 8016f90:	d000      	beq.n	8016f94 <_strtol_l.constprop.0+0xe8>
 8016f92:	1e69      	subs	r1, r5, #1
 8016f94:	6011      	str	r1, [r2, #0]
 8016f96:	e7f3      	b.n	8016f80 <_strtol_l.constprop.0+0xd4>
 8016f98:	2430      	movs	r4, #48	; 0x30
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d1b1      	bne.n	8016f02 <_strtol_l.constprop.0+0x56>
 8016f9e:	2308      	movs	r3, #8
 8016fa0:	e7af      	b.n	8016f02 <_strtol_l.constprop.0+0x56>
 8016fa2:	2c30      	cmp	r4, #48	; 0x30
 8016fa4:	d0a5      	beq.n	8016ef2 <_strtol_l.constprop.0+0x46>
 8016fa6:	230a      	movs	r3, #10
 8016fa8:	e7ab      	b.n	8016f02 <_strtol_l.constprop.0+0x56>
 8016faa:	bf00      	nop
 8016fac:	08019059 	.word	0x08019059

08016fb0 <_strtol_r>:
 8016fb0:	f7ff bf7c 	b.w	8016eac <_strtol_l.constprop.0>

08016fb4 <__ssputs_r>:
 8016fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb8:	688e      	ldr	r6, [r1, #8]
 8016fba:	461f      	mov	r7, r3
 8016fbc:	42be      	cmp	r6, r7
 8016fbe:	680b      	ldr	r3, [r1, #0]
 8016fc0:	4682      	mov	sl, r0
 8016fc2:	460c      	mov	r4, r1
 8016fc4:	4690      	mov	r8, r2
 8016fc6:	d82c      	bhi.n	8017022 <__ssputs_r+0x6e>
 8016fc8:	898a      	ldrh	r2, [r1, #12]
 8016fca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016fce:	d026      	beq.n	801701e <__ssputs_r+0x6a>
 8016fd0:	6965      	ldr	r5, [r4, #20]
 8016fd2:	6909      	ldr	r1, [r1, #16]
 8016fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fd8:	eba3 0901 	sub.w	r9, r3, r1
 8016fdc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fe0:	1c7b      	adds	r3, r7, #1
 8016fe2:	444b      	add	r3, r9
 8016fe4:	106d      	asrs	r5, r5, #1
 8016fe6:	429d      	cmp	r5, r3
 8016fe8:	bf38      	it	cc
 8016fea:	461d      	movcc	r5, r3
 8016fec:	0553      	lsls	r3, r2, #21
 8016fee:	d527      	bpl.n	8017040 <__ssputs_r+0x8c>
 8016ff0:	4629      	mov	r1, r5
 8016ff2:	f7fe fc0f 	bl	8015814 <_malloc_r>
 8016ff6:	4606      	mov	r6, r0
 8016ff8:	b360      	cbz	r0, 8017054 <__ssputs_r+0xa0>
 8016ffa:	6921      	ldr	r1, [r4, #16]
 8016ffc:	464a      	mov	r2, r9
 8016ffe:	f7fd fd05 	bl	8014a0c <memcpy>
 8017002:	89a3      	ldrh	r3, [r4, #12]
 8017004:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801700c:	81a3      	strh	r3, [r4, #12]
 801700e:	6126      	str	r6, [r4, #16]
 8017010:	6165      	str	r5, [r4, #20]
 8017012:	444e      	add	r6, r9
 8017014:	eba5 0509 	sub.w	r5, r5, r9
 8017018:	6026      	str	r6, [r4, #0]
 801701a:	60a5      	str	r5, [r4, #8]
 801701c:	463e      	mov	r6, r7
 801701e:	42be      	cmp	r6, r7
 8017020:	d900      	bls.n	8017024 <__ssputs_r+0x70>
 8017022:	463e      	mov	r6, r7
 8017024:	6820      	ldr	r0, [r4, #0]
 8017026:	4632      	mov	r2, r6
 8017028:	4641      	mov	r1, r8
 801702a:	f000 f9c9 	bl	80173c0 <memmove>
 801702e:	68a3      	ldr	r3, [r4, #8]
 8017030:	1b9b      	subs	r3, r3, r6
 8017032:	60a3      	str	r3, [r4, #8]
 8017034:	6823      	ldr	r3, [r4, #0]
 8017036:	4433      	add	r3, r6
 8017038:	6023      	str	r3, [r4, #0]
 801703a:	2000      	movs	r0, #0
 801703c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017040:	462a      	mov	r2, r5
 8017042:	f000 fd9e 	bl	8017b82 <_realloc_r>
 8017046:	4606      	mov	r6, r0
 8017048:	2800      	cmp	r0, #0
 801704a:	d1e0      	bne.n	801700e <__ssputs_r+0x5a>
 801704c:	6921      	ldr	r1, [r4, #16]
 801704e:	4650      	mov	r0, sl
 8017050:	f7fe fb6c 	bl	801572c <_free_r>
 8017054:	230c      	movs	r3, #12
 8017056:	f8ca 3000 	str.w	r3, [sl]
 801705a:	89a3      	ldrh	r3, [r4, #12]
 801705c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017060:	81a3      	strh	r3, [r4, #12]
 8017062:	f04f 30ff 	mov.w	r0, #4294967295
 8017066:	e7e9      	b.n	801703c <__ssputs_r+0x88>

08017068 <_svfiprintf_r>:
 8017068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801706c:	4698      	mov	r8, r3
 801706e:	898b      	ldrh	r3, [r1, #12]
 8017070:	061b      	lsls	r3, r3, #24
 8017072:	b09d      	sub	sp, #116	; 0x74
 8017074:	4607      	mov	r7, r0
 8017076:	460d      	mov	r5, r1
 8017078:	4614      	mov	r4, r2
 801707a:	d50e      	bpl.n	801709a <_svfiprintf_r+0x32>
 801707c:	690b      	ldr	r3, [r1, #16]
 801707e:	b963      	cbnz	r3, 801709a <_svfiprintf_r+0x32>
 8017080:	2140      	movs	r1, #64	; 0x40
 8017082:	f7fe fbc7 	bl	8015814 <_malloc_r>
 8017086:	6028      	str	r0, [r5, #0]
 8017088:	6128      	str	r0, [r5, #16]
 801708a:	b920      	cbnz	r0, 8017096 <_svfiprintf_r+0x2e>
 801708c:	230c      	movs	r3, #12
 801708e:	603b      	str	r3, [r7, #0]
 8017090:	f04f 30ff 	mov.w	r0, #4294967295
 8017094:	e0d0      	b.n	8017238 <_svfiprintf_r+0x1d0>
 8017096:	2340      	movs	r3, #64	; 0x40
 8017098:	616b      	str	r3, [r5, #20]
 801709a:	2300      	movs	r3, #0
 801709c:	9309      	str	r3, [sp, #36]	; 0x24
 801709e:	2320      	movs	r3, #32
 80170a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80170a8:	2330      	movs	r3, #48	; 0x30
 80170aa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017250 <_svfiprintf_r+0x1e8>
 80170ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170b2:	f04f 0901 	mov.w	r9, #1
 80170b6:	4623      	mov	r3, r4
 80170b8:	469a      	mov	sl, r3
 80170ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170be:	b10a      	cbz	r2, 80170c4 <_svfiprintf_r+0x5c>
 80170c0:	2a25      	cmp	r2, #37	; 0x25
 80170c2:	d1f9      	bne.n	80170b8 <_svfiprintf_r+0x50>
 80170c4:	ebba 0b04 	subs.w	fp, sl, r4
 80170c8:	d00b      	beq.n	80170e2 <_svfiprintf_r+0x7a>
 80170ca:	465b      	mov	r3, fp
 80170cc:	4622      	mov	r2, r4
 80170ce:	4629      	mov	r1, r5
 80170d0:	4638      	mov	r0, r7
 80170d2:	f7ff ff6f 	bl	8016fb4 <__ssputs_r>
 80170d6:	3001      	adds	r0, #1
 80170d8:	f000 80a9 	beq.w	801722e <_svfiprintf_r+0x1c6>
 80170dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170de:	445a      	add	r2, fp
 80170e0:	9209      	str	r2, [sp, #36]	; 0x24
 80170e2:	f89a 3000 	ldrb.w	r3, [sl]
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	f000 80a1 	beq.w	801722e <_svfiprintf_r+0x1c6>
 80170ec:	2300      	movs	r3, #0
 80170ee:	f04f 32ff 	mov.w	r2, #4294967295
 80170f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170f6:	f10a 0a01 	add.w	sl, sl, #1
 80170fa:	9304      	str	r3, [sp, #16]
 80170fc:	9307      	str	r3, [sp, #28]
 80170fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017102:	931a      	str	r3, [sp, #104]	; 0x68
 8017104:	4654      	mov	r4, sl
 8017106:	2205      	movs	r2, #5
 8017108:	f814 1b01 	ldrb.w	r1, [r4], #1
 801710c:	4850      	ldr	r0, [pc, #320]	; (8017250 <_svfiprintf_r+0x1e8>)
 801710e:	f7e9 f867 	bl	80001e0 <memchr>
 8017112:	9a04      	ldr	r2, [sp, #16]
 8017114:	b9d8      	cbnz	r0, 801714e <_svfiprintf_r+0xe6>
 8017116:	06d0      	lsls	r0, r2, #27
 8017118:	bf44      	itt	mi
 801711a:	2320      	movmi	r3, #32
 801711c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017120:	0711      	lsls	r1, r2, #28
 8017122:	bf44      	itt	mi
 8017124:	232b      	movmi	r3, #43	; 0x2b
 8017126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801712a:	f89a 3000 	ldrb.w	r3, [sl]
 801712e:	2b2a      	cmp	r3, #42	; 0x2a
 8017130:	d015      	beq.n	801715e <_svfiprintf_r+0xf6>
 8017132:	9a07      	ldr	r2, [sp, #28]
 8017134:	4654      	mov	r4, sl
 8017136:	2000      	movs	r0, #0
 8017138:	f04f 0c0a 	mov.w	ip, #10
 801713c:	4621      	mov	r1, r4
 801713e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017142:	3b30      	subs	r3, #48	; 0x30
 8017144:	2b09      	cmp	r3, #9
 8017146:	d94d      	bls.n	80171e4 <_svfiprintf_r+0x17c>
 8017148:	b1b0      	cbz	r0, 8017178 <_svfiprintf_r+0x110>
 801714a:	9207      	str	r2, [sp, #28]
 801714c:	e014      	b.n	8017178 <_svfiprintf_r+0x110>
 801714e:	eba0 0308 	sub.w	r3, r0, r8
 8017152:	fa09 f303 	lsl.w	r3, r9, r3
 8017156:	4313      	orrs	r3, r2
 8017158:	9304      	str	r3, [sp, #16]
 801715a:	46a2      	mov	sl, r4
 801715c:	e7d2      	b.n	8017104 <_svfiprintf_r+0x9c>
 801715e:	9b03      	ldr	r3, [sp, #12]
 8017160:	1d19      	adds	r1, r3, #4
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	9103      	str	r1, [sp, #12]
 8017166:	2b00      	cmp	r3, #0
 8017168:	bfbb      	ittet	lt
 801716a:	425b      	neglt	r3, r3
 801716c:	f042 0202 	orrlt.w	r2, r2, #2
 8017170:	9307      	strge	r3, [sp, #28]
 8017172:	9307      	strlt	r3, [sp, #28]
 8017174:	bfb8      	it	lt
 8017176:	9204      	strlt	r2, [sp, #16]
 8017178:	7823      	ldrb	r3, [r4, #0]
 801717a:	2b2e      	cmp	r3, #46	; 0x2e
 801717c:	d10c      	bne.n	8017198 <_svfiprintf_r+0x130>
 801717e:	7863      	ldrb	r3, [r4, #1]
 8017180:	2b2a      	cmp	r3, #42	; 0x2a
 8017182:	d134      	bne.n	80171ee <_svfiprintf_r+0x186>
 8017184:	9b03      	ldr	r3, [sp, #12]
 8017186:	1d1a      	adds	r2, r3, #4
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	9203      	str	r2, [sp, #12]
 801718c:	2b00      	cmp	r3, #0
 801718e:	bfb8      	it	lt
 8017190:	f04f 33ff 	movlt.w	r3, #4294967295
 8017194:	3402      	adds	r4, #2
 8017196:	9305      	str	r3, [sp, #20]
 8017198:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017260 <_svfiprintf_r+0x1f8>
 801719c:	7821      	ldrb	r1, [r4, #0]
 801719e:	2203      	movs	r2, #3
 80171a0:	4650      	mov	r0, sl
 80171a2:	f7e9 f81d 	bl	80001e0 <memchr>
 80171a6:	b138      	cbz	r0, 80171b8 <_svfiprintf_r+0x150>
 80171a8:	9b04      	ldr	r3, [sp, #16]
 80171aa:	eba0 000a 	sub.w	r0, r0, sl
 80171ae:	2240      	movs	r2, #64	; 0x40
 80171b0:	4082      	lsls	r2, r0
 80171b2:	4313      	orrs	r3, r2
 80171b4:	3401      	adds	r4, #1
 80171b6:	9304      	str	r3, [sp, #16]
 80171b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171bc:	4825      	ldr	r0, [pc, #148]	; (8017254 <_svfiprintf_r+0x1ec>)
 80171be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80171c2:	2206      	movs	r2, #6
 80171c4:	f7e9 f80c 	bl	80001e0 <memchr>
 80171c8:	2800      	cmp	r0, #0
 80171ca:	d038      	beq.n	801723e <_svfiprintf_r+0x1d6>
 80171cc:	4b22      	ldr	r3, [pc, #136]	; (8017258 <_svfiprintf_r+0x1f0>)
 80171ce:	bb1b      	cbnz	r3, 8017218 <_svfiprintf_r+0x1b0>
 80171d0:	9b03      	ldr	r3, [sp, #12]
 80171d2:	3307      	adds	r3, #7
 80171d4:	f023 0307 	bic.w	r3, r3, #7
 80171d8:	3308      	adds	r3, #8
 80171da:	9303      	str	r3, [sp, #12]
 80171dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171de:	4433      	add	r3, r6
 80171e0:	9309      	str	r3, [sp, #36]	; 0x24
 80171e2:	e768      	b.n	80170b6 <_svfiprintf_r+0x4e>
 80171e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80171e8:	460c      	mov	r4, r1
 80171ea:	2001      	movs	r0, #1
 80171ec:	e7a6      	b.n	801713c <_svfiprintf_r+0xd4>
 80171ee:	2300      	movs	r3, #0
 80171f0:	3401      	adds	r4, #1
 80171f2:	9305      	str	r3, [sp, #20]
 80171f4:	4619      	mov	r1, r3
 80171f6:	f04f 0c0a 	mov.w	ip, #10
 80171fa:	4620      	mov	r0, r4
 80171fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017200:	3a30      	subs	r2, #48	; 0x30
 8017202:	2a09      	cmp	r2, #9
 8017204:	d903      	bls.n	801720e <_svfiprintf_r+0x1a6>
 8017206:	2b00      	cmp	r3, #0
 8017208:	d0c6      	beq.n	8017198 <_svfiprintf_r+0x130>
 801720a:	9105      	str	r1, [sp, #20]
 801720c:	e7c4      	b.n	8017198 <_svfiprintf_r+0x130>
 801720e:	fb0c 2101 	mla	r1, ip, r1, r2
 8017212:	4604      	mov	r4, r0
 8017214:	2301      	movs	r3, #1
 8017216:	e7f0      	b.n	80171fa <_svfiprintf_r+0x192>
 8017218:	ab03      	add	r3, sp, #12
 801721a:	9300      	str	r3, [sp, #0]
 801721c:	462a      	mov	r2, r5
 801721e:	4b0f      	ldr	r3, [pc, #60]	; (801725c <_svfiprintf_r+0x1f4>)
 8017220:	a904      	add	r1, sp, #16
 8017222:	4638      	mov	r0, r7
 8017224:	f7fc fc34 	bl	8013a90 <_printf_float>
 8017228:	1c42      	adds	r2, r0, #1
 801722a:	4606      	mov	r6, r0
 801722c:	d1d6      	bne.n	80171dc <_svfiprintf_r+0x174>
 801722e:	89ab      	ldrh	r3, [r5, #12]
 8017230:	065b      	lsls	r3, r3, #25
 8017232:	f53f af2d 	bmi.w	8017090 <_svfiprintf_r+0x28>
 8017236:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017238:	b01d      	add	sp, #116	; 0x74
 801723a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801723e:	ab03      	add	r3, sp, #12
 8017240:	9300      	str	r3, [sp, #0]
 8017242:	462a      	mov	r2, r5
 8017244:	4b05      	ldr	r3, [pc, #20]	; (801725c <_svfiprintf_r+0x1f4>)
 8017246:	a904      	add	r1, sp, #16
 8017248:	4638      	mov	r0, r7
 801724a:	f7fc fec5 	bl	8013fd8 <_printf_i>
 801724e:	e7eb      	b.n	8017228 <_svfiprintf_r+0x1c0>
 8017250:	08019159 	.word	0x08019159
 8017254:	08019163 	.word	0x08019163
 8017258:	08013a91 	.word	0x08013a91
 801725c:	08016fb5 	.word	0x08016fb5
 8017260:	0801915f 	.word	0x0801915f

08017264 <__sflush_r>:
 8017264:	898a      	ldrh	r2, [r1, #12]
 8017266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801726a:	4605      	mov	r5, r0
 801726c:	0710      	lsls	r0, r2, #28
 801726e:	460c      	mov	r4, r1
 8017270:	d458      	bmi.n	8017324 <__sflush_r+0xc0>
 8017272:	684b      	ldr	r3, [r1, #4]
 8017274:	2b00      	cmp	r3, #0
 8017276:	dc05      	bgt.n	8017284 <__sflush_r+0x20>
 8017278:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801727a:	2b00      	cmp	r3, #0
 801727c:	dc02      	bgt.n	8017284 <__sflush_r+0x20>
 801727e:	2000      	movs	r0, #0
 8017280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017286:	2e00      	cmp	r6, #0
 8017288:	d0f9      	beq.n	801727e <__sflush_r+0x1a>
 801728a:	2300      	movs	r3, #0
 801728c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017290:	682f      	ldr	r7, [r5, #0]
 8017292:	6a21      	ldr	r1, [r4, #32]
 8017294:	602b      	str	r3, [r5, #0]
 8017296:	d032      	beq.n	80172fe <__sflush_r+0x9a>
 8017298:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801729a:	89a3      	ldrh	r3, [r4, #12]
 801729c:	075a      	lsls	r2, r3, #29
 801729e:	d505      	bpl.n	80172ac <__sflush_r+0x48>
 80172a0:	6863      	ldr	r3, [r4, #4]
 80172a2:	1ac0      	subs	r0, r0, r3
 80172a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172a6:	b10b      	cbz	r3, 80172ac <__sflush_r+0x48>
 80172a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80172aa:	1ac0      	subs	r0, r0, r3
 80172ac:	2300      	movs	r3, #0
 80172ae:	4602      	mov	r2, r0
 80172b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172b2:	6a21      	ldr	r1, [r4, #32]
 80172b4:	4628      	mov	r0, r5
 80172b6:	47b0      	blx	r6
 80172b8:	1c43      	adds	r3, r0, #1
 80172ba:	89a3      	ldrh	r3, [r4, #12]
 80172bc:	d106      	bne.n	80172cc <__sflush_r+0x68>
 80172be:	6829      	ldr	r1, [r5, #0]
 80172c0:	291d      	cmp	r1, #29
 80172c2:	d82b      	bhi.n	801731c <__sflush_r+0xb8>
 80172c4:	4a29      	ldr	r2, [pc, #164]	; (801736c <__sflush_r+0x108>)
 80172c6:	410a      	asrs	r2, r1
 80172c8:	07d6      	lsls	r6, r2, #31
 80172ca:	d427      	bmi.n	801731c <__sflush_r+0xb8>
 80172cc:	2200      	movs	r2, #0
 80172ce:	6062      	str	r2, [r4, #4]
 80172d0:	04d9      	lsls	r1, r3, #19
 80172d2:	6922      	ldr	r2, [r4, #16]
 80172d4:	6022      	str	r2, [r4, #0]
 80172d6:	d504      	bpl.n	80172e2 <__sflush_r+0x7e>
 80172d8:	1c42      	adds	r2, r0, #1
 80172da:	d101      	bne.n	80172e0 <__sflush_r+0x7c>
 80172dc:	682b      	ldr	r3, [r5, #0]
 80172de:	b903      	cbnz	r3, 80172e2 <__sflush_r+0x7e>
 80172e0:	6560      	str	r0, [r4, #84]	; 0x54
 80172e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172e4:	602f      	str	r7, [r5, #0]
 80172e6:	2900      	cmp	r1, #0
 80172e8:	d0c9      	beq.n	801727e <__sflush_r+0x1a>
 80172ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172ee:	4299      	cmp	r1, r3
 80172f0:	d002      	beq.n	80172f8 <__sflush_r+0x94>
 80172f2:	4628      	mov	r0, r5
 80172f4:	f7fe fa1a 	bl	801572c <_free_r>
 80172f8:	2000      	movs	r0, #0
 80172fa:	6360      	str	r0, [r4, #52]	; 0x34
 80172fc:	e7c0      	b.n	8017280 <__sflush_r+0x1c>
 80172fe:	2301      	movs	r3, #1
 8017300:	4628      	mov	r0, r5
 8017302:	47b0      	blx	r6
 8017304:	1c41      	adds	r1, r0, #1
 8017306:	d1c8      	bne.n	801729a <__sflush_r+0x36>
 8017308:	682b      	ldr	r3, [r5, #0]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d0c5      	beq.n	801729a <__sflush_r+0x36>
 801730e:	2b1d      	cmp	r3, #29
 8017310:	d001      	beq.n	8017316 <__sflush_r+0xb2>
 8017312:	2b16      	cmp	r3, #22
 8017314:	d101      	bne.n	801731a <__sflush_r+0xb6>
 8017316:	602f      	str	r7, [r5, #0]
 8017318:	e7b1      	b.n	801727e <__sflush_r+0x1a>
 801731a:	89a3      	ldrh	r3, [r4, #12]
 801731c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017320:	81a3      	strh	r3, [r4, #12]
 8017322:	e7ad      	b.n	8017280 <__sflush_r+0x1c>
 8017324:	690f      	ldr	r7, [r1, #16]
 8017326:	2f00      	cmp	r7, #0
 8017328:	d0a9      	beq.n	801727e <__sflush_r+0x1a>
 801732a:	0793      	lsls	r3, r2, #30
 801732c:	680e      	ldr	r6, [r1, #0]
 801732e:	bf08      	it	eq
 8017330:	694b      	ldreq	r3, [r1, #20]
 8017332:	600f      	str	r7, [r1, #0]
 8017334:	bf18      	it	ne
 8017336:	2300      	movne	r3, #0
 8017338:	eba6 0807 	sub.w	r8, r6, r7
 801733c:	608b      	str	r3, [r1, #8]
 801733e:	f1b8 0f00 	cmp.w	r8, #0
 8017342:	dd9c      	ble.n	801727e <__sflush_r+0x1a>
 8017344:	6a21      	ldr	r1, [r4, #32]
 8017346:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017348:	4643      	mov	r3, r8
 801734a:	463a      	mov	r2, r7
 801734c:	4628      	mov	r0, r5
 801734e:	47b0      	blx	r6
 8017350:	2800      	cmp	r0, #0
 8017352:	dc06      	bgt.n	8017362 <__sflush_r+0xfe>
 8017354:	89a3      	ldrh	r3, [r4, #12]
 8017356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801735a:	81a3      	strh	r3, [r4, #12]
 801735c:	f04f 30ff 	mov.w	r0, #4294967295
 8017360:	e78e      	b.n	8017280 <__sflush_r+0x1c>
 8017362:	4407      	add	r7, r0
 8017364:	eba8 0800 	sub.w	r8, r8, r0
 8017368:	e7e9      	b.n	801733e <__sflush_r+0xda>
 801736a:	bf00      	nop
 801736c:	dfbffffe 	.word	0xdfbffffe

08017370 <_fflush_r>:
 8017370:	b538      	push	{r3, r4, r5, lr}
 8017372:	690b      	ldr	r3, [r1, #16]
 8017374:	4605      	mov	r5, r0
 8017376:	460c      	mov	r4, r1
 8017378:	b913      	cbnz	r3, 8017380 <_fflush_r+0x10>
 801737a:	2500      	movs	r5, #0
 801737c:	4628      	mov	r0, r5
 801737e:	bd38      	pop	{r3, r4, r5, pc}
 8017380:	b118      	cbz	r0, 801738a <_fflush_r+0x1a>
 8017382:	6a03      	ldr	r3, [r0, #32]
 8017384:	b90b      	cbnz	r3, 801738a <_fflush_r+0x1a>
 8017386:	f7fd f9d3 	bl	8014730 <__sinit>
 801738a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d0f3      	beq.n	801737a <_fflush_r+0xa>
 8017392:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017394:	07d0      	lsls	r0, r2, #31
 8017396:	d404      	bmi.n	80173a2 <_fflush_r+0x32>
 8017398:	0599      	lsls	r1, r3, #22
 801739a:	d402      	bmi.n	80173a2 <_fflush_r+0x32>
 801739c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801739e:	f7fd fb33 	bl	8014a08 <__retarget_lock_acquire_recursive>
 80173a2:	4628      	mov	r0, r5
 80173a4:	4621      	mov	r1, r4
 80173a6:	f7ff ff5d 	bl	8017264 <__sflush_r>
 80173aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173ac:	07da      	lsls	r2, r3, #31
 80173ae:	4605      	mov	r5, r0
 80173b0:	d4e4      	bmi.n	801737c <_fflush_r+0xc>
 80173b2:	89a3      	ldrh	r3, [r4, #12]
 80173b4:	059b      	lsls	r3, r3, #22
 80173b6:	d4e1      	bmi.n	801737c <_fflush_r+0xc>
 80173b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173ba:	f7fd fb26 	bl	8014a0a <__retarget_lock_release_recursive>
 80173be:	e7dd      	b.n	801737c <_fflush_r+0xc>

080173c0 <memmove>:
 80173c0:	4288      	cmp	r0, r1
 80173c2:	b510      	push	{r4, lr}
 80173c4:	eb01 0402 	add.w	r4, r1, r2
 80173c8:	d902      	bls.n	80173d0 <memmove+0x10>
 80173ca:	4284      	cmp	r4, r0
 80173cc:	4623      	mov	r3, r4
 80173ce:	d807      	bhi.n	80173e0 <memmove+0x20>
 80173d0:	1e43      	subs	r3, r0, #1
 80173d2:	42a1      	cmp	r1, r4
 80173d4:	d008      	beq.n	80173e8 <memmove+0x28>
 80173d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80173da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80173de:	e7f8      	b.n	80173d2 <memmove+0x12>
 80173e0:	4402      	add	r2, r0
 80173e2:	4601      	mov	r1, r0
 80173e4:	428a      	cmp	r2, r1
 80173e6:	d100      	bne.n	80173ea <memmove+0x2a>
 80173e8:	bd10      	pop	{r4, pc}
 80173ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80173ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80173f2:	e7f7      	b.n	80173e4 <memmove+0x24>

080173f4 <strncmp>:
 80173f4:	b510      	push	{r4, lr}
 80173f6:	b16a      	cbz	r2, 8017414 <strncmp+0x20>
 80173f8:	3901      	subs	r1, #1
 80173fa:	1884      	adds	r4, r0, r2
 80173fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017400:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017404:	429a      	cmp	r2, r3
 8017406:	d103      	bne.n	8017410 <strncmp+0x1c>
 8017408:	42a0      	cmp	r0, r4
 801740a:	d001      	beq.n	8017410 <strncmp+0x1c>
 801740c:	2a00      	cmp	r2, #0
 801740e:	d1f5      	bne.n	80173fc <strncmp+0x8>
 8017410:	1ad0      	subs	r0, r2, r3
 8017412:	bd10      	pop	{r4, pc}
 8017414:	4610      	mov	r0, r2
 8017416:	e7fc      	b.n	8017412 <strncmp+0x1e>

08017418 <_sbrk_r>:
 8017418:	b538      	push	{r3, r4, r5, lr}
 801741a:	4d06      	ldr	r5, [pc, #24]	; (8017434 <_sbrk_r+0x1c>)
 801741c:	2300      	movs	r3, #0
 801741e:	4604      	mov	r4, r0
 8017420:	4608      	mov	r0, r1
 8017422:	602b      	str	r3, [r5, #0]
 8017424:	f7ef f878 	bl	8006518 <_sbrk>
 8017428:	1c43      	adds	r3, r0, #1
 801742a:	d102      	bne.n	8017432 <_sbrk_r+0x1a>
 801742c:	682b      	ldr	r3, [r5, #0]
 801742e:	b103      	cbz	r3, 8017432 <_sbrk_r+0x1a>
 8017430:	6023      	str	r3, [r4, #0]
 8017432:	bd38      	pop	{r3, r4, r5, pc}
 8017434:	20012224 	.word	0x20012224

08017438 <nan>:
 8017438:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017440 <nan+0x8>
 801743c:	4770      	bx	lr
 801743e:	bf00      	nop
 8017440:	00000000 	.word	0x00000000
 8017444:	7ff80000 	.word	0x7ff80000

08017448 <__assert_func>:
 8017448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801744a:	4614      	mov	r4, r2
 801744c:	461a      	mov	r2, r3
 801744e:	4b09      	ldr	r3, [pc, #36]	; (8017474 <__assert_func+0x2c>)
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	4605      	mov	r5, r0
 8017454:	68d8      	ldr	r0, [r3, #12]
 8017456:	b14c      	cbz	r4, 801746c <__assert_func+0x24>
 8017458:	4b07      	ldr	r3, [pc, #28]	; (8017478 <__assert_func+0x30>)
 801745a:	9100      	str	r1, [sp, #0]
 801745c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017460:	4906      	ldr	r1, [pc, #24]	; (801747c <__assert_func+0x34>)
 8017462:	462b      	mov	r3, r5
 8017464:	f000 fbca 	bl	8017bfc <fiprintf>
 8017468:	f000 fbda 	bl	8017c20 <abort>
 801746c:	4b04      	ldr	r3, [pc, #16]	; (8017480 <__assert_func+0x38>)
 801746e:	461c      	mov	r4, r3
 8017470:	e7f3      	b.n	801745a <__assert_func+0x12>
 8017472:	bf00      	nop
 8017474:	20000088 	.word	0x20000088
 8017478:	08019172 	.word	0x08019172
 801747c:	0801917f 	.word	0x0801917f
 8017480:	080191ad 	.word	0x080191ad

08017484 <_calloc_r>:
 8017484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017486:	fba1 2402 	umull	r2, r4, r1, r2
 801748a:	b94c      	cbnz	r4, 80174a0 <_calloc_r+0x1c>
 801748c:	4611      	mov	r1, r2
 801748e:	9201      	str	r2, [sp, #4]
 8017490:	f7fe f9c0 	bl	8015814 <_malloc_r>
 8017494:	9a01      	ldr	r2, [sp, #4]
 8017496:	4605      	mov	r5, r0
 8017498:	b930      	cbnz	r0, 80174a8 <_calloc_r+0x24>
 801749a:	4628      	mov	r0, r5
 801749c:	b003      	add	sp, #12
 801749e:	bd30      	pop	{r4, r5, pc}
 80174a0:	220c      	movs	r2, #12
 80174a2:	6002      	str	r2, [r0, #0]
 80174a4:	2500      	movs	r5, #0
 80174a6:	e7f8      	b.n	801749a <_calloc_r+0x16>
 80174a8:	4621      	mov	r1, r4
 80174aa:	f7fd f9da 	bl	8014862 <memset>
 80174ae:	e7f4      	b.n	801749a <_calloc_r+0x16>

080174b0 <rshift>:
 80174b0:	6903      	ldr	r3, [r0, #16]
 80174b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80174b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 80174be:	f100 0414 	add.w	r4, r0, #20
 80174c2:	dd45      	ble.n	8017550 <rshift+0xa0>
 80174c4:	f011 011f 	ands.w	r1, r1, #31
 80174c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80174cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80174d0:	d10c      	bne.n	80174ec <rshift+0x3c>
 80174d2:	f100 0710 	add.w	r7, r0, #16
 80174d6:	4629      	mov	r1, r5
 80174d8:	42b1      	cmp	r1, r6
 80174da:	d334      	bcc.n	8017546 <rshift+0x96>
 80174dc:	1a9b      	subs	r3, r3, r2
 80174de:	009b      	lsls	r3, r3, #2
 80174e0:	1eea      	subs	r2, r5, #3
 80174e2:	4296      	cmp	r6, r2
 80174e4:	bf38      	it	cc
 80174e6:	2300      	movcc	r3, #0
 80174e8:	4423      	add	r3, r4
 80174ea:	e015      	b.n	8017518 <rshift+0x68>
 80174ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80174f0:	f1c1 0820 	rsb	r8, r1, #32
 80174f4:	40cf      	lsrs	r7, r1
 80174f6:	f105 0e04 	add.w	lr, r5, #4
 80174fa:	46a1      	mov	r9, r4
 80174fc:	4576      	cmp	r6, lr
 80174fe:	46f4      	mov	ip, lr
 8017500:	d815      	bhi.n	801752e <rshift+0x7e>
 8017502:	1a9a      	subs	r2, r3, r2
 8017504:	0092      	lsls	r2, r2, #2
 8017506:	3a04      	subs	r2, #4
 8017508:	3501      	adds	r5, #1
 801750a:	42ae      	cmp	r6, r5
 801750c:	bf38      	it	cc
 801750e:	2200      	movcc	r2, #0
 8017510:	18a3      	adds	r3, r4, r2
 8017512:	50a7      	str	r7, [r4, r2]
 8017514:	b107      	cbz	r7, 8017518 <rshift+0x68>
 8017516:	3304      	adds	r3, #4
 8017518:	1b1a      	subs	r2, r3, r4
 801751a:	42a3      	cmp	r3, r4
 801751c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017520:	bf08      	it	eq
 8017522:	2300      	moveq	r3, #0
 8017524:	6102      	str	r2, [r0, #16]
 8017526:	bf08      	it	eq
 8017528:	6143      	streq	r3, [r0, #20]
 801752a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801752e:	f8dc c000 	ldr.w	ip, [ip]
 8017532:	fa0c fc08 	lsl.w	ip, ip, r8
 8017536:	ea4c 0707 	orr.w	r7, ip, r7
 801753a:	f849 7b04 	str.w	r7, [r9], #4
 801753e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017542:	40cf      	lsrs	r7, r1
 8017544:	e7da      	b.n	80174fc <rshift+0x4c>
 8017546:	f851 cb04 	ldr.w	ip, [r1], #4
 801754a:	f847 cf04 	str.w	ip, [r7, #4]!
 801754e:	e7c3      	b.n	80174d8 <rshift+0x28>
 8017550:	4623      	mov	r3, r4
 8017552:	e7e1      	b.n	8017518 <rshift+0x68>

08017554 <__hexdig_fun>:
 8017554:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017558:	2b09      	cmp	r3, #9
 801755a:	d802      	bhi.n	8017562 <__hexdig_fun+0xe>
 801755c:	3820      	subs	r0, #32
 801755e:	b2c0      	uxtb	r0, r0
 8017560:	4770      	bx	lr
 8017562:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017566:	2b05      	cmp	r3, #5
 8017568:	d801      	bhi.n	801756e <__hexdig_fun+0x1a>
 801756a:	3847      	subs	r0, #71	; 0x47
 801756c:	e7f7      	b.n	801755e <__hexdig_fun+0xa>
 801756e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017572:	2b05      	cmp	r3, #5
 8017574:	d801      	bhi.n	801757a <__hexdig_fun+0x26>
 8017576:	3827      	subs	r0, #39	; 0x27
 8017578:	e7f1      	b.n	801755e <__hexdig_fun+0xa>
 801757a:	2000      	movs	r0, #0
 801757c:	4770      	bx	lr
	...

08017580 <__gethex>:
 8017580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017584:	4617      	mov	r7, r2
 8017586:	680a      	ldr	r2, [r1, #0]
 8017588:	b085      	sub	sp, #20
 801758a:	f102 0b02 	add.w	fp, r2, #2
 801758e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8017592:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8017596:	4681      	mov	r9, r0
 8017598:	468a      	mov	sl, r1
 801759a:	9302      	str	r3, [sp, #8]
 801759c:	32fe      	adds	r2, #254	; 0xfe
 801759e:	eb02 030b 	add.w	r3, r2, fp
 80175a2:	46d8      	mov	r8, fp
 80175a4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80175a8:	9301      	str	r3, [sp, #4]
 80175aa:	2830      	cmp	r0, #48	; 0x30
 80175ac:	d0f7      	beq.n	801759e <__gethex+0x1e>
 80175ae:	f7ff ffd1 	bl	8017554 <__hexdig_fun>
 80175b2:	4604      	mov	r4, r0
 80175b4:	2800      	cmp	r0, #0
 80175b6:	d138      	bne.n	801762a <__gethex+0xaa>
 80175b8:	49a7      	ldr	r1, [pc, #668]	; (8017858 <__gethex+0x2d8>)
 80175ba:	2201      	movs	r2, #1
 80175bc:	4640      	mov	r0, r8
 80175be:	f7ff ff19 	bl	80173f4 <strncmp>
 80175c2:	4606      	mov	r6, r0
 80175c4:	2800      	cmp	r0, #0
 80175c6:	d169      	bne.n	801769c <__gethex+0x11c>
 80175c8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80175cc:	465d      	mov	r5, fp
 80175ce:	f7ff ffc1 	bl	8017554 <__hexdig_fun>
 80175d2:	2800      	cmp	r0, #0
 80175d4:	d064      	beq.n	80176a0 <__gethex+0x120>
 80175d6:	465a      	mov	r2, fp
 80175d8:	7810      	ldrb	r0, [r2, #0]
 80175da:	2830      	cmp	r0, #48	; 0x30
 80175dc:	4690      	mov	r8, r2
 80175de:	f102 0201 	add.w	r2, r2, #1
 80175e2:	d0f9      	beq.n	80175d8 <__gethex+0x58>
 80175e4:	f7ff ffb6 	bl	8017554 <__hexdig_fun>
 80175e8:	2301      	movs	r3, #1
 80175ea:	fab0 f480 	clz	r4, r0
 80175ee:	0964      	lsrs	r4, r4, #5
 80175f0:	465e      	mov	r6, fp
 80175f2:	9301      	str	r3, [sp, #4]
 80175f4:	4642      	mov	r2, r8
 80175f6:	4615      	mov	r5, r2
 80175f8:	3201      	adds	r2, #1
 80175fa:	7828      	ldrb	r0, [r5, #0]
 80175fc:	f7ff ffaa 	bl	8017554 <__hexdig_fun>
 8017600:	2800      	cmp	r0, #0
 8017602:	d1f8      	bne.n	80175f6 <__gethex+0x76>
 8017604:	4994      	ldr	r1, [pc, #592]	; (8017858 <__gethex+0x2d8>)
 8017606:	2201      	movs	r2, #1
 8017608:	4628      	mov	r0, r5
 801760a:	f7ff fef3 	bl	80173f4 <strncmp>
 801760e:	b978      	cbnz	r0, 8017630 <__gethex+0xb0>
 8017610:	b946      	cbnz	r6, 8017624 <__gethex+0xa4>
 8017612:	1c6e      	adds	r6, r5, #1
 8017614:	4632      	mov	r2, r6
 8017616:	4615      	mov	r5, r2
 8017618:	3201      	adds	r2, #1
 801761a:	7828      	ldrb	r0, [r5, #0]
 801761c:	f7ff ff9a 	bl	8017554 <__hexdig_fun>
 8017620:	2800      	cmp	r0, #0
 8017622:	d1f8      	bne.n	8017616 <__gethex+0x96>
 8017624:	1b73      	subs	r3, r6, r5
 8017626:	009e      	lsls	r6, r3, #2
 8017628:	e004      	b.n	8017634 <__gethex+0xb4>
 801762a:	2400      	movs	r4, #0
 801762c:	4626      	mov	r6, r4
 801762e:	e7e1      	b.n	80175f4 <__gethex+0x74>
 8017630:	2e00      	cmp	r6, #0
 8017632:	d1f7      	bne.n	8017624 <__gethex+0xa4>
 8017634:	782b      	ldrb	r3, [r5, #0]
 8017636:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801763a:	2b50      	cmp	r3, #80	; 0x50
 801763c:	d13d      	bne.n	80176ba <__gethex+0x13a>
 801763e:	786b      	ldrb	r3, [r5, #1]
 8017640:	2b2b      	cmp	r3, #43	; 0x2b
 8017642:	d02f      	beq.n	80176a4 <__gethex+0x124>
 8017644:	2b2d      	cmp	r3, #45	; 0x2d
 8017646:	d031      	beq.n	80176ac <__gethex+0x12c>
 8017648:	1c69      	adds	r1, r5, #1
 801764a:	f04f 0b00 	mov.w	fp, #0
 801764e:	7808      	ldrb	r0, [r1, #0]
 8017650:	f7ff ff80 	bl	8017554 <__hexdig_fun>
 8017654:	1e42      	subs	r2, r0, #1
 8017656:	b2d2      	uxtb	r2, r2
 8017658:	2a18      	cmp	r2, #24
 801765a:	d82e      	bhi.n	80176ba <__gethex+0x13a>
 801765c:	f1a0 0210 	sub.w	r2, r0, #16
 8017660:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017664:	f7ff ff76 	bl	8017554 <__hexdig_fun>
 8017668:	f100 3cff 	add.w	ip, r0, #4294967295
 801766c:	fa5f fc8c 	uxtb.w	ip, ip
 8017670:	f1bc 0f18 	cmp.w	ip, #24
 8017674:	d91d      	bls.n	80176b2 <__gethex+0x132>
 8017676:	f1bb 0f00 	cmp.w	fp, #0
 801767a:	d000      	beq.n	801767e <__gethex+0xfe>
 801767c:	4252      	negs	r2, r2
 801767e:	4416      	add	r6, r2
 8017680:	f8ca 1000 	str.w	r1, [sl]
 8017684:	b1dc      	cbz	r4, 80176be <__gethex+0x13e>
 8017686:	9b01      	ldr	r3, [sp, #4]
 8017688:	2b00      	cmp	r3, #0
 801768a:	bf14      	ite	ne
 801768c:	f04f 0800 	movne.w	r8, #0
 8017690:	f04f 0806 	moveq.w	r8, #6
 8017694:	4640      	mov	r0, r8
 8017696:	b005      	add	sp, #20
 8017698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801769c:	4645      	mov	r5, r8
 801769e:	4626      	mov	r6, r4
 80176a0:	2401      	movs	r4, #1
 80176a2:	e7c7      	b.n	8017634 <__gethex+0xb4>
 80176a4:	f04f 0b00 	mov.w	fp, #0
 80176a8:	1ca9      	adds	r1, r5, #2
 80176aa:	e7d0      	b.n	801764e <__gethex+0xce>
 80176ac:	f04f 0b01 	mov.w	fp, #1
 80176b0:	e7fa      	b.n	80176a8 <__gethex+0x128>
 80176b2:	230a      	movs	r3, #10
 80176b4:	fb03 0002 	mla	r0, r3, r2, r0
 80176b8:	e7d0      	b.n	801765c <__gethex+0xdc>
 80176ba:	4629      	mov	r1, r5
 80176bc:	e7e0      	b.n	8017680 <__gethex+0x100>
 80176be:	eba5 0308 	sub.w	r3, r5, r8
 80176c2:	3b01      	subs	r3, #1
 80176c4:	4621      	mov	r1, r4
 80176c6:	2b07      	cmp	r3, #7
 80176c8:	dc0a      	bgt.n	80176e0 <__gethex+0x160>
 80176ca:	4648      	mov	r0, r9
 80176cc:	f7fe f92e 	bl	801592c <_Balloc>
 80176d0:	4604      	mov	r4, r0
 80176d2:	b940      	cbnz	r0, 80176e6 <__gethex+0x166>
 80176d4:	4b61      	ldr	r3, [pc, #388]	; (801785c <__gethex+0x2dc>)
 80176d6:	4602      	mov	r2, r0
 80176d8:	21e4      	movs	r1, #228	; 0xe4
 80176da:	4861      	ldr	r0, [pc, #388]	; (8017860 <__gethex+0x2e0>)
 80176dc:	f7ff feb4 	bl	8017448 <__assert_func>
 80176e0:	3101      	adds	r1, #1
 80176e2:	105b      	asrs	r3, r3, #1
 80176e4:	e7ef      	b.n	80176c6 <__gethex+0x146>
 80176e6:	f100 0a14 	add.w	sl, r0, #20
 80176ea:	2300      	movs	r3, #0
 80176ec:	495a      	ldr	r1, [pc, #360]	; (8017858 <__gethex+0x2d8>)
 80176ee:	f8cd a004 	str.w	sl, [sp, #4]
 80176f2:	469b      	mov	fp, r3
 80176f4:	45a8      	cmp	r8, r5
 80176f6:	d342      	bcc.n	801777e <__gethex+0x1fe>
 80176f8:	9801      	ldr	r0, [sp, #4]
 80176fa:	f840 bb04 	str.w	fp, [r0], #4
 80176fe:	eba0 000a 	sub.w	r0, r0, sl
 8017702:	1080      	asrs	r0, r0, #2
 8017704:	6120      	str	r0, [r4, #16]
 8017706:	ea4f 1840 	mov.w	r8, r0, lsl #5
 801770a:	4658      	mov	r0, fp
 801770c:	f7fe fa00 	bl	8015b10 <__hi0bits>
 8017710:	683d      	ldr	r5, [r7, #0]
 8017712:	eba8 0000 	sub.w	r0, r8, r0
 8017716:	42a8      	cmp	r0, r5
 8017718:	dd59      	ble.n	80177ce <__gethex+0x24e>
 801771a:	eba0 0805 	sub.w	r8, r0, r5
 801771e:	4641      	mov	r1, r8
 8017720:	4620      	mov	r0, r4
 8017722:	f7fe fd8f 	bl	8016244 <__any_on>
 8017726:	4683      	mov	fp, r0
 8017728:	b1b8      	cbz	r0, 801775a <__gethex+0x1da>
 801772a:	f108 33ff 	add.w	r3, r8, #4294967295
 801772e:	1159      	asrs	r1, r3, #5
 8017730:	f003 021f 	and.w	r2, r3, #31
 8017734:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017738:	f04f 0b01 	mov.w	fp, #1
 801773c:	fa0b f202 	lsl.w	r2, fp, r2
 8017740:	420a      	tst	r2, r1
 8017742:	d00a      	beq.n	801775a <__gethex+0x1da>
 8017744:	455b      	cmp	r3, fp
 8017746:	dd06      	ble.n	8017756 <__gethex+0x1d6>
 8017748:	f1a8 0102 	sub.w	r1, r8, #2
 801774c:	4620      	mov	r0, r4
 801774e:	f7fe fd79 	bl	8016244 <__any_on>
 8017752:	2800      	cmp	r0, #0
 8017754:	d138      	bne.n	80177c8 <__gethex+0x248>
 8017756:	f04f 0b02 	mov.w	fp, #2
 801775a:	4641      	mov	r1, r8
 801775c:	4620      	mov	r0, r4
 801775e:	f7ff fea7 	bl	80174b0 <rshift>
 8017762:	4446      	add	r6, r8
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	42b3      	cmp	r3, r6
 8017768:	da41      	bge.n	80177ee <__gethex+0x26e>
 801776a:	4621      	mov	r1, r4
 801776c:	4648      	mov	r0, r9
 801776e:	f7fe f91d 	bl	80159ac <_Bfree>
 8017772:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017774:	2300      	movs	r3, #0
 8017776:	6013      	str	r3, [r2, #0]
 8017778:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801777c:	e78a      	b.n	8017694 <__gethex+0x114>
 801777e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8017782:	2a2e      	cmp	r2, #46	; 0x2e
 8017784:	d014      	beq.n	80177b0 <__gethex+0x230>
 8017786:	2b20      	cmp	r3, #32
 8017788:	d106      	bne.n	8017798 <__gethex+0x218>
 801778a:	9b01      	ldr	r3, [sp, #4]
 801778c:	f843 bb04 	str.w	fp, [r3], #4
 8017790:	f04f 0b00 	mov.w	fp, #0
 8017794:	9301      	str	r3, [sp, #4]
 8017796:	465b      	mov	r3, fp
 8017798:	7828      	ldrb	r0, [r5, #0]
 801779a:	9303      	str	r3, [sp, #12]
 801779c:	f7ff feda 	bl	8017554 <__hexdig_fun>
 80177a0:	9b03      	ldr	r3, [sp, #12]
 80177a2:	f000 000f 	and.w	r0, r0, #15
 80177a6:	4098      	lsls	r0, r3
 80177a8:	ea4b 0b00 	orr.w	fp, fp, r0
 80177ac:	3304      	adds	r3, #4
 80177ae:	e7a1      	b.n	80176f4 <__gethex+0x174>
 80177b0:	45a8      	cmp	r8, r5
 80177b2:	d8e8      	bhi.n	8017786 <__gethex+0x206>
 80177b4:	2201      	movs	r2, #1
 80177b6:	4628      	mov	r0, r5
 80177b8:	9303      	str	r3, [sp, #12]
 80177ba:	f7ff fe1b 	bl	80173f4 <strncmp>
 80177be:	4926      	ldr	r1, [pc, #152]	; (8017858 <__gethex+0x2d8>)
 80177c0:	9b03      	ldr	r3, [sp, #12]
 80177c2:	2800      	cmp	r0, #0
 80177c4:	d1df      	bne.n	8017786 <__gethex+0x206>
 80177c6:	e795      	b.n	80176f4 <__gethex+0x174>
 80177c8:	f04f 0b03 	mov.w	fp, #3
 80177cc:	e7c5      	b.n	801775a <__gethex+0x1da>
 80177ce:	da0b      	bge.n	80177e8 <__gethex+0x268>
 80177d0:	eba5 0800 	sub.w	r8, r5, r0
 80177d4:	4621      	mov	r1, r4
 80177d6:	4642      	mov	r2, r8
 80177d8:	4648      	mov	r0, r9
 80177da:	f7fe fb01 	bl	8015de0 <__lshift>
 80177de:	eba6 0608 	sub.w	r6, r6, r8
 80177e2:	4604      	mov	r4, r0
 80177e4:	f100 0a14 	add.w	sl, r0, #20
 80177e8:	f04f 0b00 	mov.w	fp, #0
 80177ec:	e7ba      	b.n	8017764 <__gethex+0x1e4>
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	42b3      	cmp	r3, r6
 80177f2:	dd73      	ble.n	80178dc <__gethex+0x35c>
 80177f4:	1b9e      	subs	r6, r3, r6
 80177f6:	42b5      	cmp	r5, r6
 80177f8:	dc34      	bgt.n	8017864 <__gethex+0x2e4>
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	2b02      	cmp	r3, #2
 80177fe:	d023      	beq.n	8017848 <__gethex+0x2c8>
 8017800:	2b03      	cmp	r3, #3
 8017802:	d025      	beq.n	8017850 <__gethex+0x2d0>
 8017804:	2b01      	cmp	r3, #1
 8017806:	d115      	bne.n	8017834 <__gethex+0x2b4>
 8017808:	42b5      	cmp	r5, r6
 801780a:	d113      	bne.n	8017834 <__gethex+0x2b4>
 801780c:	2d01      	cmp	r5, #1
 801780e:	d10b      	bne.n	8017828 <__gethex+0x2a8>
 8017810:	9a02      	ldr	r2, [sp, #8]
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	6013      	str	r3, [r2, #0]
 8017816:	2301      	movs	r3, #1
 8017818:	6123      	str	r3, [r4, #16]
 801781a:	f8ca 3000 	str.w	r3, [sl]
 801781e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017820:	f04f 0862 	mov.w	r8, #98	; 0x62
 8017824:	601c      	str	r4, [r3, #0]
 8017826:	e735      	b.n	8017694 <__gethex+0x114>
 8017828:	1e69      	subs	r1, r5, #1
 801782a:	4620      	mov	r0, r4
 801782c:	f7fe fd0a 	bl	8016244 <__any_on>
 8017830:	2800      	cmp	r0, #0
 8017832:	d1ed      	bne.n	8017810 <__gethex+0x290>
 8017834:	4621      	mov	r1, r4
 8017836:	4648      	mov	r0, r9
 8017838:	f7fe f8b8 	bl	80159ac <_Bfree>
 801783c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801783e:	2300      	movs	r3, #0
 8017840:	6013      	str	r3, [r2, #0]
 8017842:	f04f 0850 	mov.w	r8, #80	; 0x50
 8017846:	e725      	b.n	8017694 <__gethex+0x114>
 8017848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801784a:	2b00      	cmp	r3, #0
 801784c:	d1f2      	bne.n	8017834 <__gethex+0x2b4>
 801784e:	e7df      	b.n	8017810 <__gethex+0x290>
 8017850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017852:	2b00      	cmp	r3, #0
 8017854:	d1dc      	bne.n	8017810 <__gethex+0x290>
 8017856:	e7ed      	b.n	8017834 <__gethex+0x2b4>
 8017858:	08019004 	.word	0x08019004
 801785c:	08018e9d 	.word	0x08018e9d
 8017860:	080191ae 	.word	0x080191ae
 8017864:	f106 38ff 	add.w	r8, r6, #4294967295
 8017868:	f1bb 0f00 	cmp.w	fp, #0
 801786c:	d133      	bne.n	80178d6 <__gethex+0x356>
 801786e:	f1b8 0f00 	cmp.w	r8, #0
 8017872:	d004      	beq.n	801787e <__gethex+0x2fe>
 8017874:	4641      	mov	r1, r8
 8017876:	4620      	mov	r0, r4
 8017878:	f7fe fce4 	bl	8016244 <__any_on>
 801787c:	4683      	mov	fp, r0
 801787e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8017882:	2301      	movs	r3, #1
 8017884:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017888:	f008 081f 	and.w	r8, r8, #31
 801788c:	fa03 f308 	lsl.w	r3, r3, r8
 8017890:	4213      	tst	r3, r2
 8017892:	4631      	mov	r1, r6
 8017894:	4620      	mov	r0, r4
 8017896:	bf18      	it	ne
 8017898:	f04b 0b02 	orrne.w	fp, fp, #2
 801789c:	1bad      	subs	r5, r5, r6
 801789e:	f7ff fe07 	bl	80174b0 <rshift>
 80178a2:	687e      	ldr	r6, [r7, #4]
 80178a4:	f04f 0802 	mov.w	r8, #2
 80178a8:	f1bb 0f00 	cmp.w	fp, #0
 80178ac:	d04a      	beq.n	8017944 <__gethex+0x3c4>
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	2b02      	cmp	r3, #2
 80178b2:	d016      	beq.n	80178e2 <__gethex+0x362>
 80178b4:	2b03      	cmp	r3, #3
 80178b6:	d018      	beq.n	80178ea <__gethex+0x36a>
 80178b8:	2b01      	cmp	r3, #1
 80178ba:	d109      	bne.n	80178d0 <__gethex+0x350>
 80178bc:	f01b 0f02 	tst.w	fp, #2
 80178c0:	d006      	beq.n	80178d0 <__gethex+0x350>
 80178c2:	f8da 3000 	ldr.w	r3, [sl]
 80178c6:	ea4b 0b03 	orr.w	fp, fp, r3
 80178ca:	f01b 0f01 	tst.w	fp, #1
 80178ce:	d10f      	bne.n	80178f0 <__gethex+0x370>
 80178d0:	f048 0810 	orr.w	r8, r8, #16
 80178d4:	e036      	b.n	8017944 <__gethex+0x3c4>
 80178d6:	f04f 0b01 	mov.w	fp, #1
 80178da:	e7d0      	b.n	801787e <__gethex+0x2fe>
 80178dc:	f04f 0801 	mov.w	r8, #1
 80178e0:	e7e2      	b.n	80178a8 <__gethex+0x328>
 80178e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178e4:	f1c3 0301 	rsb	r3, r3, #1
 80178e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80178ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d0ef      	beq.n	80178d0 <__gethex+0x350>
 80178f0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80178f4:	f104 0214 	add.w	r2, r4, #20
 80178f8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80178fc:	9301      	str	r3, [sp, #4]
 80178fe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8017902:	2300      	movs	r3, #0
 8017904:	4694      	mov	ip, r2
 8017906:	f852 1b04 	ldr.w	r1, [r2], #4
 801790a:	f1b1 3fff 	cmp.w	r1, #4294967295
 801790e:	d01e      	beq.n	801794e <__gethex+0x3ce>
 8017910:	3101      	adds	r1, #1
 8017912:	f8cc 1000 	str.w	r1, [ip]
 8017916:	f1b8 0f02 	cmp.w	r8, #2
 801791a:	f104 0214 	add.w	r2, r4, #20
 801791e:	d13d      	bne.n	801799c <__gethex+0x41c>
 8017920:	683b      	ldr	r3, [r7, #0]
 8017922:	3b01      	subs	r3, #1
 8017924:	42ab      	cmp	r3, r5
 8017926:	d10b      	bne.n	8017940 <__gethex+0x3c0>
 8017928:	1169      	asrs	r1, r5, #5
 801792a:	2301      	movs	r3, #1
 801792c:	f005 051f 	and.w	r5, r5, #31
 8017930:	fa03 f505 	lsl.w	r5, r3, r5
 8017934:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017938:	421d      	tst	r5, r3
 801793a:	bf18      	it	ne
 801793c:	f04f 0801 	movne.w	r8, #1
 8017940:	f048 0820 	orr.w	r8, r8, #32
 8017944:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017946:	601c      	str	r4, [r3, #0]
 8017948:	9b02      	ldr	r3, [sp, #8]
 801794a:	601e      	str	r6, [r3, #0]
 801794c:	e6a2      	b.n	8017694 <__gethex+0x114>
 801794e:	4290      	cmp	r0, r2
 8017950:	f842 3c04 	str.w	r3, [r2, #-4]
 8017954:	d8d6      	bhi.n	8017904 <__gethex+0x384>
 8017956:	68a2      	ldr	r2, [r4, #8]
 8017958:	4593      	cmp	fp, r2
 801795a:	db17      	blt.n	801798c <__gethex+0x40c>
 801795c:	6861      	ldr	r1, [r4, #4]
 801795e:	4648      	mov	r0, r9
 8017960:	3101      	adds	r1, #1
 8017962:	f7fd ffe3 	bl	801592c <_Balloc>
 8017966:	4682      	mov	sl, r0
 8017968:	b918      	cbnz	r0, 8017972 <__gethex+0x3f2>
 801796a:	4b1b      	ldr	r3, [pc, #108]	; (80179d8 <__gethex+0x458>)
 801796c:	4602      	mov	r2, r0
 801796e:	2184      	movs	r1, #132	; 0x84
 8017970:	e6b3      	b.n	80176da <__gethex+0x15a>
 8017972:	6922      	ldr	r2, [r4, #16]
 8017974:	3202      	adds	r2, #2
 8017976:	f104 010c 	add.w	r1, r4, #12
 801797a:	0092      	lsls	r2, r2, #2
 801797c:	300c      	adds	r0, #12
 801797e:	f7fd f845 	bl	8014a0c <memcpy>
 8017982:	4621      	mov	r1, r4
 8017984:	4648      	mov	r0, r9
 8017986:	f7fe f811 	bl	80159ac <_Bfree>
 801798a:	4654      	mov	r4, sl
 801798c:	6922      	ldr	r2, [r4, #16]
 801798e:	1c51      	adds	r1, r2, #1
 8017990:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017994:	6121      	str	r1, [r4, #16]
 8017996:	2101      	movs	r1, #1
 8017998:	6151      	str	r1, [r2, #20]
 801799a:	e7bc      	b.n	8017916 <__gethex+0x396>
 801799c:	6921      	ldr	r1, [r4, #16]
 801799e:	4559      	cmp	r1, fp
 80179a0:	dd0b      	ble.n	80179ba <__gethex+0x43a>
 80179a2:	2101      	movs	r1, #1
 80179a4:	4620      	mov	r0, r4
 80179a6:	f7ff fd83 	bl	80174b0 <rshift>
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	3601      	adds	r6, #1
 80179ae:	42b3      	cmp	r3, r6
 80179b0:	f6ff aedb 	blt.w	801776a <__gethex+0x1ea>
 80179b4:	f04f 0801 	mov.w	r8, #1
 80179b8:	e7c2      	b.n	8017940 <__gethex+0x3c0>
 80179ba:	f015 051f 	ands.w	r5, r5, #31
 80179be:	d0f9      	beq.n	80179b4 <__gethex+0x434>
 80179c0:	9b01      	ldr	r3, [sp, #4]
 80179c2:	441a      	add	r2, r3
 80179c4:	f1c5 0520 	rsb	r5, r5, #32
 80179c8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80179cc:	f7fe f8a0 	bl	8015b10 <__hi0bits>
 80179d0:	42a8      	cmp	r0, r5
 80179d2:	dbe6      	blt.n	80179a2 <__gethex+0x422>
 80179d4:	e7ee      	b.n	80179b4 <__gethex+0x434>
 80179d6:	bf00      	nop
 80179d8:	08018e9d 	.word	0x08018e9d

080179dc <L_shift>:
 80179dc:	f1c2 0208 	rsb	r2, r2, #8
 80179e0:	0092      	lsls	r2, r2, #2
 80179e2:	b570      	push	{r4, r5, r6, lr}
 80179e4:	f1c2 0620 	rsb	r6, r2, #32
 80179e8:	6843      	ldr	r3, [r0, #4]
 80179ea:	6804      	ldr	r4, [r0, #0]
 80179ec:	fa03 f506 	lsl.w	r5, r3, r6
 80179f0:	432c      	orrs	r4, r5
 80179f2:	40d3      	lsrs	r3, r2
 80179f4:	6004      	str	r4, [r0, #0]
 80179f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80179fa:	4288      	cmp	r0, r1
 80179fc:	d3f4      	bcc.n	80179e8 <L_shift+0xc>
 80179fe:	bd70      	pop	{r4, r5, r6, pc}

08017a00 <__match>:
 8017a00:	b530      	push	{r4, r5, lr}
 8017a02:	6803      	ldr	r3, [r0, #0]
 8017a04:	3301      	adds	r3, #1
 8017a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a0a:	b914      	cbnz	r4, 8017a12 <__match+0x12>
 8017a0c:	6003      	str	r3, [r0, #0]
 8017a0e:	2001      	movs	r0, #1
 8017a10:	bd30      	pop	{r4, r5, pc}
 8017a12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017a1a:	2d19      	cmp	r5, #25
 8017a1c:	bf98      	it	ls
 8017a1e:	3220      	addls	r2, #32
 8017a20:	42a2      	cmp	r2, r4
 8017a22:	d0f0      	beq.n	8017a06 <__match+0x6>
 8017a24:	2000      	movs	r0, #0
 8017a26:	e7f3      	b.n	8017a10 <__match+0x10>

08017a28 <__hexnan>:
 8017a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a2c:	680b      	ldr	r3, [r1, #0]
 8017a2e:	6801      	ldr	r1, [r0, #0]
 8017a30:	115e      	asrs	r6, r3, #5
 8017a32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017a36:	f013 031f 	ands.w	r3, r3, #31
 8017a3a:	b087      	sub	sp, #28
 8017a3c:	bf18      	it	ne
 8017a3e:	3604      	addne	r6, #4
 8017a40:	2500      	movs	r5, #0
 8017a42:	1f37      	subs	r7, r6, #4
 8017a44:	4682      	mov	sl, r0
 8017a46:	4690      	mov	r8, r2
 8017a48:	9301      	str	r3, [sp, #4]
 8017a4a:	f846 5c04 	str.w	r5, [r6, #-4]
 8017a4e:	46b9      	mov	r9, r7
 8017a50:	463c      	mov	r4, r7
 8017a52:	9502      	str	r5, [sp, #8]
 8017a54:	46ab      	mov	fp, r5
 8017a56:	784a      	ldrb	r2, [r1, #1]
 8017a58:	1c4b      	adds	r3, r1, #1
 8017a5a:	9303      	str	r3, [sp, #12]
 8017a5c:	b342      	cbz	r2, 8017ab0 <__hexnan+0x88>
 8017a5e:	4610      	mov	r0, r2
 8017a60:	9105      	str	r1, [sp, #20]
 8017a62:	9204      	str	r2, [sp, #16]
 8017a64:	f7ff fd76 	bl	8017554 <__hexdig_fun>
 8017a68:	2800      	cmp	r0, #0
 8017a6a:	d14f      	bne.n	8017b0c <__hexnan+0xe4>
 8017a6c:	9a04      	ldr	r2, [sp, #16]
 8017a6e:	9905      	ldr	r1, [sp, #20]
 8017a70:	2a20      	cmp	r2, #32
 8017a72:	d818      	bhi.n	8017aa6 <__hexnan+0x7e>
 8017a74:	9b02      	ldr	r3, [sp, #8]
 8017a76:	459b      	cmp	fp, r3
 8017a78:	dd13      	ble.n	8017aa2 <__hexnan+0x7a>
 8017a7a:	454c      	cmp	r4, r9
 8017a7c:	d206      	bcs.n	8017a8c <__hexnan+0x64>
 8017a7e:	2d07      	cmp	r5, #7
 8017a80:	dc04      	bgt.n	8017a8c <__hexnan+0x64>
 8017a82:	462a      	mov	r2, r5
 8017a84:	4649      	mov	r1, r9
 8017a86:	4620      	mov	r0, r4
 8017a88:	f7ff ffa8 	bl	80179dc <L_shift>
 8017a8c:	4544      	cmp	r4, r8
 8017a8e:	d950      	bls.n	8017b32 <__hexnan+0x10a>
 8017a90:	2300      	movs	r3, #0
 8017a92:	f1a4 0904 	sub.w	r9, r4, #4
 8017a96:	f844 3c04 	str.w	r3, [r4, #-4]
 8017a9a:	f8cd b008 	str.w	fp, [sp, #8]
 8017a9e:	464c      	mov	r4, r9
 8017aa0:	461d      	mov	r5, r3
 8017aa2:	9903      	ldr	r1, [sp, #12]
 8017aa4:	e7d7      	b.n	8017a56 <__hexnan+0x2e>
 8017aa6:	2a29      	cmp	r2, #41	; 0x29
 8017aa8:	d155      	bne.n	8017b56 <__hexnan+0x12e>
 8017aaa:	3102      	adds	r1, #2
 8017aac:	f8ca 1000 	str.w	r1, [sl]
 8017ab0:	f1bb 0f00 	cmp.w	fp, #0
 8017ab4:	d04f      	beq.n	8017b56 <__hexnan+0x12e>
 8017ab6:	454c      	cmp	r4, r9
 8017ab8:	d206      	bcs.n	8017ac8 <__hexnan+0xa0>
 8017aba:	2d07      	cmp	r5, #7
 8017abc:	dc04      	bgt.n	8017ac8 <__hexnan+0xa0>
 8017abe:	462a      	mov	r2, r5
 8017ac0:	4649      	mov	r1, r9
 8017ac2:	4620      	mov	r0, r4
 8017ac4:	f7ff ff8a 	bl	80179dc <L_shift>
 8017ac8:	4544      	cmp	r4, r8
 8017aca:	d934      	bls.n	8017b36 <__hexnan+0x10e>
 8017acc:	f1a8 0204 	sub.w	r2, r8, #4
 8017ad0:	4623      	mov	r3, r4
 8017ad2:	f853 1b04 	ldr.w	r1, [r3], #4
 8017ad6:	f842 1f04 	str.w	r1, [r2, #4]!
 8017ada:	429f      	cmp	r7, r3
 8017adc:	d2f9      	bcs.n	8017ad2 <__hexnan+0xaa>
 8017ade:	1b3b      	subs	r3, r7, r4
 8017ae0:	f023 0303 	bic.w	r3, r3, #3
 8017ae4:	3304      	adds	r3, #4
 8017ae6:	3e03      	subs	r6, #3
 8017ae8:	3401      	adds	r4, #1
 8017aea:	42a6      	cmp	r6, r4
 8017aec:	bf38      	it	cc
 8017aee:	2304      	movcc	r3, #4
 8017af0:	4443      	add	r3, r8
 8017af2:	2200      	movs	r2, #0
 8017af4:	f843 2b04 	str.w	r2, [r3], #4
 8017af8:	429f      	cmp	r7, r3
 8017afa:	d2fb      	bcs.n	8017af4 <__hexnan+0xcc>
 8017afc:	683b      	ldr	r3, [r7, #0]
 8017afe:	b91b      	cbnz	r3, 8017b08 <__hexnan+0xe0>
 8017b00:	4547      	cmp	r7, r8
 8017b02:	d126      	bne.n	8017b52 <__hexnan+0x12a>
 8017b04:	2301      	movs	r3, #1
 8017b06:	603b      	str	r3, [r7, #0]
 8017b08:	2005      	movs	r0, #5
 8017b0a:	e025      	b.n	8017b58 <__hexnan+0x130>
 8017b0c:	3501      	adds	r5, #1
 8017b0e:	2d08      	cmp	r5, #8
 8017b10:	f10b 0b01 	add.w	fp, fp, #1
 8017b14:	dd06      	ble.n	8017b24 <__hexnan+0xfc>
 8017b16:	4544      	cmp	r4, r8
 8017b18:	d9c3      	bls.n	8017aa2 <__hexnan+0x7a>
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8017b20:	2501      	movs	r5, #1
 8017b22:	3c04      	subs	r4, #4
 8017b24:	6822      	ldr	r2, [r4, #0]
 8017b26:	f000 000f 	and.w	r0, r0, #15
 8017b2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017b2e:	6020      	str	r0, [r4, #0]
 8017b30:	e7b7      	b.n	8017aa2 <__hexnan+0x7a>
 8017b32:	2508      	movs	r5, #8
 8017b34:	e7b5      	b.n	8017aa2 <__hexnan+0x7a>
 8017b36:	9b01      	ldr	r3, [sp, #4]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d0df      	beq.n	8017afc <__hexnan+0xd4>
 8017b3c:	f1c3 0320 	rsb	r3, r3, #32
 8017b40:	f04f 32ff 	mov.w	r2, #4294967295
 8017b44:	40da      	lsrs	r2, r3
 8017b46:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017b4a:	4013      	ands	r3, r2
 8017b4c:	f846 3c04 	str.w	r3, [r6, #-4]
 8017b50:	e7d4      	b.n	8017afc <__hexnan+0xd4>
 8017b52:	3f04      	subs	r7, #4
 8017b54:	e7d2      	b.n	8017afc <__hexnan+0xd4>
 8017b56:	2004      	movs	r0, #4
 8017b58:	b007      	add	sp, #28
 8017b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b5e <__ascii_mbtowc>:
 8017b5e:	b082      	sub	sp, #8
 8017b60:	b901      	cbnz	r1, 8017b64 <__ascii_mbtowc+0x6>
 8017b62:	a901      	add	r1, sp, #4
 8017b64:	b142      	cbz	r2, 8017b78 <__ascii_mbtowc+0x1a>
 8017b66:	b14b      	cbz	r3, 8017b7c <__ascii_mbtowc+0x1e>
 8017b68:	7813      	ldrb	r3, [r2, #0]
 8017b6a:	600b      	str	r3, [r1, #0]
 8017b6c:	7812      	ldrb	r2, [r2, #0]
 8017b6e:	1e10      	subs	r0, r2, #0
 8017b70:	bf18      	it	ne
 8017b72:	2001      	movne	r0, #1
 8017b74:	b002      	add	sp, #8
 8017b76:	4770      	bx	lr
 8017b78:	4610      	mov	r0, r2
 8017b7a:	e7fb      	b.n	8017b74 <__ascii_mbtowc+0x16>
 8017b7c:	f06f 0001 	mvn.w	r0, #1
 8017b80:	e7f8      	b.n	8017b74 <__ascii_mbtowc+0x16>

08017b82 <_realloc_r>:
 8017b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b86:	4680      	mov	r8, r0
 8017b88:	4614      	mov	r4, r2
 8017b8a:	460e      	mov	r6, r1
 8017b8c:	b921      	cbnz	r1, 8017b98 <_realloc_r+0x16>
 8017b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b92:	4611      	mov	r1, r2
 8017b94:	f7fd be3e 	b.w	8015814 <_malloc_r>
 8017b98:	b92a      	cbnz	r2, 8017ba6 <_realloc_r+0x24>
 8017b9a:	f7fd fdc7 	bl	801572c <_free_r>
 8017b9e:	4625      	mov	r5, r4
 8017ba0:	4628      	mov	r0, r5
 8017ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ba6:	f000 f842 	bl	8017c2e <_malloc_usable_size_r>
 8017baa:	4284      	cmp	r4, r0
 8017bac:	4607      	mov	r7, r0
 8017bae:	d802      	bhi.n	8017bb6 <_realloc_r+0x34>
 8017bb0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017bb4:	d812      	bhi.n	8017bdc <_realloc_r+0x5a>
 8017bb6:	4621      	mov	r1, r4
 8017bb8:	4640      	mov	r0, r8
 8017bba:	f7fd fe2b 	bl	8015814 <_malloc_r>
 8017bbe:	4605      	mov	r5, r0
 8017bc0:	2800      	cmp	r0, #0
 8017bc2:	d0ed      	beq.n	8017ba0 <_realloc_r+0x1e>
 8017bc4:	42bc      	cmp	r4, r7
 8017bc6:	4622      	mov	r2, r4
 8017bc8:	4631      	mov	r1, r6
 8017bca:	bf28      	it	cs
 8017bcc:	463a      	movcs	r2, r7
 8017bce:	f7fc ff1d 	bl	8014a0c <memcpy>
 8017bd2:	4631      	mov	r1, r6
 8017bd4:	4640      	mov	r0, r8
 8017bd6:	f7fd fda9 	bl	801572c <_free_r>
 8017bda:	e7e1      	b.n	8017ba0 <_realloc_r+0x1e>
 8017bdc:	4635      	mov	r5, r6
 8017bde:	e7df      	b.n	8017ba0 <_realloc_r+0x1e>

08017be0 <__ascii_wctomb>:
 8017be0:	b149      	cbz	r1, 8017bf6 <__ascii_wctomb+0x16>
 8017be2:	2aff      	cmp	r2, #255	; 0xff
 8017be4:	bf85      	ittet	hi
 8017be6:	238a      	movhi	r3, #138	; 0x8a
 8017be8:	6003      	strhi	r3, [r0, #0]
 8017bea:	700a      	strbls	r2, [r1, #0]
 8017bec:	f04f 30ff 	movhi.w	r0, #4294967295
 8017bf0:	bf98      	it	ls
 8017bf2:	2001      	movls	r0, #1
 8017bf4:	4770      	bx	lr
 8017bf6:	4608      	mov	r0, r1
 8017bf8:	4770      	bx	lr
	...

08017bfc <fiprintf>:
 8017bfc:	b40e      	push	{r1, r2, r3}
 8017bfe:	b503      	push	{r0, r1, lr}
 8017c00:	4601      	mov	r1, r0
 8017c02:	ab03      	add	r3, sp, #12
 8017c04:	4805      	ldr	r0, [pc, #20]	; (8017c1c <fiprintf+0x20>)
 8017c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c0a:	6800      	ldr	r0, [r0, #0]
 8017c0c:	9301      	str	r3, [sp, #4]
 8017c0e:	f000 f83f 	bl	8017c90 <_vfiprintf_r>
 8017c12:	b002      	add	sp, #8
 8017c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c18:	b003      	add	sp, #12
 8017c1a:	4770      	bx	lr
 8017c1c:	20000088 	.word	0x20000088

08017c20 <abort>:
 8017c20:	b508      	push	{r3, lr}
 8017c22:	2006      	movs	r0, #6
 8017c24:	f000 fa0c 	bl	8018040 <raise>
 8017c28:	2001      	movs	r0, #1
 8017c2a:	f7ee fbfd 	bl	8006428 <_exit>

08017c2e <_malloc_usable_size_r>:
 8017c2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c32:	1f18      	subs	r0, r3, #4
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	bfbc      	itt	lt
 8017c38:	580b      	ldrlt	r3, [r1, r0]
 8017c3a:	18c0      	addlt	r0, r0, r3
 8017c3c:	4770      	bx	lr

08017c3e <__sfputc_r>:
 8017c3e:	6893      	ldr	r3, [r2, #8]
 8017c40:	3b01      	subs	r3, #1
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	b410      	push	{r4}
 8017c46:	6093      	str	r3, [r2, #8]
 8017c48:	da08      	bge.n	8017c5c <__sfputc_r+0x1e>
 8017c4a:	6994      	ldr	r4, [r2, #24]
 8017c4c:	42a3      	cmp	r3, r4
 8017c4e:	db01      	blt.n	8017c54 <__sfputc_r+0x16>
 8017c50:	290a      	cmp	r1, #10
 8017c52:	d103      	bne.n	8017c5c <__sfputc_r+0x1e>
 8017c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c58:	f000 b934 	b.w	8017ec4 <__swbuf_r>
 8017c5c:	6813      	ldr	r3, [r2, #0]
 8017c5e:	1c58      	adds	r0, r3, #1
 8017c60:	6010      	str	r0, [r2, #0]
 8017c62:	7019      	strb	r1, [r3, #0]
 8017c64:	4608      	mov	r0, r1
 8017c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c6a:	4770      	bx	lr

08017c6c <__sfputs_r>:
 8017c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c6e:	4606      	mov	r6, r0
 8017c70:	460f      	mov	r7, r1
 8017c72:	4614      	mov	r4, r2
 8017c74:	18d5      	adds	r5, r2, r3
 8017c76:	42ac      	cmp	r4, r5
 8017c78:	d101      	bne.n	8017c7e <__sfputs_r+0x12>
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	e007      	b.n	8017c8e <__sfputs_r+0x22>
 8017c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c82:	463a      	mov	r2, r7
 8017c84:	4630      	mov	r0, r6
 8017c86:	f7ff ffda 	bl	8017c3e <__sfputc_r>
 8017c8a:	1c43      	adds	r3, r0, #1
 8017c8c:	d1f3      	bne.n	8017c76 <__sfputs_r+0xa>
 8017c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017c90 <_vfiprintf_r>:
 8017c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c94:	460d      	mov	r5, r1
 8017c96:	b09d      	sub	sp, #116	; 0x74
 8017c98:	4614      	mov	r4, r2
 8017c9a:	4698      	mov	r8, r3
 8017c9c:	4606      	mov	r6, r0
 8017c9e:	b118      	cbz	r0, 8017ca8 <_vfiprintf_r+0x18>
 8017ca0:	6a03      	ldr	r3, [r0, #32]
 8017ca2:	b90b      	cbnz	r3, 8017ca8 <_vfiprintf_r+0x18>
 8017ca4:	f7fc fd44 	bl	8014730 <__sinit>
 8017ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017caa:	07d9      	lsls	r1, r3, #31
 8017cac:	d405      	bmi.n	8017cba <_vfiprintf_r+0x2a>
 8017cae:	89ab      	ldrh	r3, [r5, #12]
 8017cb0:	059a      	lsls	r2, r3, #22
 8017cb2:	d402      	bmi.n	8017cba <_vfiprintf_r+0x2a>
 8017cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cb6:	f7fc fea7 	bl	8014a08 <__retarget_lock_acquire_recursive>
 8017cba:	89ab      	ldrh	r3, [r5, #12]
 8017cbc:	071b      	lsls	r3, r3, #28
 8017cbe:	d501      	bpl.n	8017cc4 <_vfiprintf_r+0x34>
 8017cc0:	692b      	ldr	r3, [r5, #16]
 8017cc2:	b99b      	cbnz	r3, 8017cec <_vfiprintf_r+0x5c>
 8017cc4:	4629      	mov	r1, r5
 8017cc6:	4630      	mov	r0, r6
 8017cc8:	f000 f93a 	bl	8017f40 <__swsetup_r>
 8017ccc:	b170      	cbz	r0, 8017cec <_vfiprintf_r+0x5c>
 8017cce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cd0:	07dc      	lsls	r4, r3, #31
 8017cd2:	d504      	bpl.n	8017cde <_vfiprintf_r+0x4e>
 8017cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8017cd8:	b01d      	add	sp, #116	; 0x74
 8017cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cde:	89ab      	ldrh	r3, [r5, #12]
 8017ce0:	0598      	lsls	r0, r3, #22
 8017ce2:	d4f7      	bmi.n	8017cd4 <_vfiprintf_r+0x44>
 8017ce4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ce6:	f7fc fe90 	bl	8014a0a <__retarget_lock_release_recursive>
 8017cea:	e7f3      	b.n	8017cd4 <_vfiprintf_r+0x44>
 8017cec:	2300      	movs	r3, #0
 8017cee:	9309      	str	r3, [sp, #36]	; 0x24
 8017cf0:	2320      	movs	r3, #32
 8017cf2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017cf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8017cfa:	2330      	movs	r3, #48	; 0x30
 8017cfc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017eb0 <_vfiprintf_r+0x220>
 8017d00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017d04:	f04f 0901 	mov.w	r9, #1
 8017d08:	4623      	mov	r3, r4
 8017d0a:	469a      	mov	sl, r3
 8017d0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d10:	b10a      	cbz	r2, 8017d16 <_vfiprintf_r+0x86>
 8017d12:	2a25      	cmp	r2, #37	; 0x25
 8017d14:	d1f9      	bne.n	8017d0a <_vfiprintf_r+0x7a>
 8017d16:	ebba 0b04 	subs.w	fp, sl, r4
 8017d1a:	d00b      	beq.n	8017d34 <_vfiprintf_r+0xa4>
 8017d1c:	465b      	mov	r3, fp
 8017d1e:	4622      	mov	r2, r4
 8017d20:	4629      	mov	r1, r5
 8017d22:	4630      	mov	r0, r6
 8017d24:	f7ff ffa2 	bl	8017c6c <__sfputs_r>
 8017d28:	3001      	adds	r0, #1
 8017d2a:	f000 80a9 	beq.w	8017e80 <_vfiprintf_r+0x1f0>
 8017d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d30:	445a      	add	r2, fp
 8017d32:	9209      	str	r2, [sp, #36]	; 0x24
 8017d34:	f89a 3000 	ldrb.w	r3, [sl]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	f000 80a1 	beq.w	8017e80 <_vfiprintf_r+0x1f0>
 8017d3e:	2300      	movs	r3, #0
 8017d40:	f04f 32ff 	mov.w	r2, #4294967295
 8017d44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d48:	f10a 0a01 	add.w	sl, sl, #1
 8017d4c:	9304      	str	r3, [sp, #16]
 8017d4e:	9307      	str	r3, [sp, #28]
 8017d50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d54:	931a      	str	r3, [sp, #104]	; 0x68
 8017d56:	4654      	mov	r4, sl
 8017d58:	2205      	movs	r2, #5
 8017d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d5e:	4854      	ldr	r0, [pc, #336]	; (8017eb0 <_vfiprintf_r+0x220>)
 8017d60:	f7e8 fa3e 	bl	80001e0 <memchr>
 8017d64:	9a04      	ldr	r2, [sp, #16]
 8017d66:	b9d8      	cbnz	r0, 8017da0 <_vfiprintf_r+0x110>
 8017d68:	06d1      	lsls	r1, r2, #27
 8017d6a:	bf44      	itt	mi
 8017d6c:	2320      	movmi	r3, #32
 8017d6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d72:	0713      	lsls	r3, r2, #28
 8017d74:	bf44      	itt	mi
 8017d76:	232b      	movmi	r3, #43	; 0x2b
 8017d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8017d80:	2b2a      	cmp	r3, #42	; 0x2a
 8017d82:	d015      	beq.n	8017db0 <_vfiprintf_r+0x120>
 8017d84:	9a07      	ldr	r2, [sp, #28]
 8017d86:	4654      	mov	r4, sl
 8017d88:	2000      	movs	r0, #0
 8017d8a:	f04f 0c0a 	mov.w	ip, #10
 8017d8e:	4621      	mov	r1, r4
 8017d90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d94:	3b30      	subs	r3, #48	; 0x30
 8017d96:	2b09      	cmp	r3, #9
 8017d98:	d94d      	bls.n	8017e36 <_vfiprintf_r+0x1a6>
 8017d9a:	b1b0      	cbz	r0, 8017dca <_vfiprintf_r+0x13a>
 8017d9c:	9207      	str	r2, [sp, #28]
 8017d9e:	e014      	b.n	8017dca <_vfiprintf_r+0x13a>
 8017da0:	eba0 0308 	sub.w	r3, r0, r8
 8017da4:	fa09 f303 	lsl.w	r3, r9, r3
 8017da8:	4313      	orrs	r3, r2
 8017daa:	9304      	str	r3, [sp, #16]
 8017dac:	46a2      	mov	sl, r4
 8017dae:	e7d2      	b.n	8017d56 <_vfiprintf_r+0xc6>
 8017db0:	9b03      	ldr	r3, [sp, #12]
 8017db2:	1d19      	adds	r1, r3, #4
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	9103      	str	r1, [sp, #12]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	bfbb      	ittet	lt
 8017dbc:	425b      	neglt	r3, r3
 8017dbe:	f042 0202 	orrlt.w	r2, r2, #2
 8017dc2:	9307      	strge	r3, [sp, #28]
 8017dc4:	9307      	strlt	r3, [sp, #28]
 8017dc6:	bfb8      	it	lt
 8017dc8:	9204      	strlt	r2, [sp, #16]
 8017dca:	7823      	ldrb	r3, [r4, #0]
 8017dcc:	2b2e      	cmp	r3, #46	; 0x2e
 8017dce:	d10c      	bne.n	8017dea <_vfiprintf_r+0x15a>
 8017dd0:	7863      	ldrb	r3, [r4, #1]
 8017dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8017dd4:	d134      	bne.n	8017e40 <_vfiprintf_r+0x1b0>
 8017dd6:	9b03      	ldr	r3, [sp, #12]
 8017dd8:	1d1a      	adds	r2, r3, #4
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	9203      	str	r2, [sp, #12]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	bfb8      	it	lt
 8017de2:	f04f 33ff 	movlt.w	r3, #4294967295
 8017de6:	3402      	adds	r4, #2
 8017de8:	9305      	str	r3, [sp, #20]
 8017dea:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017ec0 <_vfiprintf_r+0x230>
 8017dee:	7821      	ldrb	r1, [r4, #0]
 8017df0:	2203      	movs	r2, #3
 8017df2:	4650      	mov	r0, sl
 8017df4:	f7e8 f9f4 	bl	80001e0 <memchr>
 8017df8:	b138      	cbz	r0, 8017e0a <_vfiprintf_r+0x17a>
 8017dfa:	9b04      	ldr	r3, [sp, #16]
 8017dfc:	eba0 000a 	sub.w	r0, r0, sl
 8017e00:	2240      	movs	r2, #64	; 0x40
 8017e02:	4082      	lsls	r2, r0
 8017e04:	4313      	orrs	r3, r2
 8017e06:	3401      	adds	r4, #1
 8017e08:	9304      	str	r3, [sp, #16]
 8017e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e0e:	4829      	ldr	r0, [pc, #164]	; (8017eb4 <_vfiprintf_r+0x224>)
 8017e10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e14:	2206      	movs	r2, #6
 8017e16:	f7e8 f9e3 	bl	80001e0 <memchr>
 8017e1a:	2800      	cmp	r0, #0
 8017e1c:	d03f      	beq.n	8017e9e <_vfiprintf_r+0x20e>
 8017e1e:	4b26      	ldr	r3, [pc, #152]	; (8017eb8 <_vfiprintf_r+0x228>)
 8017e20:	bb1b      	cbnz	r3, 8017e6a <_vfiprintf_r+0x1da>
 8017e22:	9b03      	ldr	r3, [sp, #12]
 8017e24:	3307      	adds	r3, #7
 8017e26:	f023 0307 	bic.w	r3, r3, #7
 8017e2a:	3308      	adds	r3, #8
 8017e2c:	9303      	str	r3, [sp, #12]
 8017e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e30:	443b      	add	r3, r7
 8017e32:	9309      	str	r3, [sp, #36]	; 0x24
 8017e34:	e768      	b.n	8017d08 <_vfiprintf_r+0x78>
 8017e36:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e3a:	460c      	mov	r4, r1
 8017e3c:	2001      	movs	r0, #1
 8017e3e:	e7a6      	b.n	8017d8e <_vfiprintf_r+0xfe>
 8017e40:	2300      	movs	r3, #0
 8017e42:	3401      	adds	r4, #1
 8017e44:	9305      	str	r3, [sp, #20]
 8017e46:	4619      	mov	r1, r3
 8017e48:	f04f 0c0a 	mov.w	ip, #10
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e52:	3a30      	subs	r2, #48	; 0x30
 8017e54:	2a09      	cmp	r2, #9
 8017e56:	d903      	bls.n	8017e60 <_vfiprintf_r+0x1d0>
 8017e58:	2b00      	cmp	r3, #0
 8017e5a:	d0c6      	beq.n	8017dea <_vfiprintf_r+0x15a>
 8017e5c:	9105      	str	r1, [sp, #20]
 8017e5e:	e7c4      	b.n	8017dea <_vfiprintf_r+0x15a>
 8017e60:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e64:	4604      	mov	r4, r0
 8017e66:	2301      	movs	r3, #1
 8017e68:	e7f0      	b.n	8017e4c <_vfiprintf_r+0x1bc>
 8017e6a:	ab03      	add	r3, sp, #12
 8017e6c:	9300      	str	r3, [sp, #0]
 8017e6e:	462a      	mov	r2, r5
 8017e70:	4b12      	ldr	r3, [pc, #72]	; (8017ebc <_vfiprintf_r+0x22c>)
 8017e72:	a904      	add	r1, sp, #16
 8017e74:	4630      	mov	r0, r6
 8017e76:	f7fb fe0b 	bl	8013a90 <_printf_float>
 8017e7a:	4607      	mov	r7, r0
 8017e7c:	1c78      	adds	r0, r7, #1
 8017e7e:	d1d6      	bne.n	8017e2e <_vfiprintf_r+0x19e>
 8017e80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e82:	07d9      	lsls	r1, r3, #31
 8017e84:	d405      	bmi.n	8017e92 <_vfiprintf_r+0x202>
 8017e86:	89ab      	ldrh	r3, [r5, #12]
 8017e88:	059a      	lsls	r2, r3, #22
 8017e8a:	d402      	bmi.n	8017e92 <_vfiprintf_r+0x202>
 8017e8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e8e:	f7fc fdbc 	bl	8014a0a <__retarget_lock_release_recursive>
 8017e92:	89ab      	ldrh	r3, [r5, #12]
 8017e94:	065b      	lsls	r3, r3, #25
 8017e96:	f53f af1d 	bmi.w	8017cd4 <_vfiprintf_r+0x44>
 8017e9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e9c:	e71c      	b.n	8017cd8 <_vfiprintf_r+0x48>
 8017e9e:	ab03      	add	r3, sp, #12
 8017ea0:	9300      	str	r3, [sp, #0]
 8017ea2:	462a      	mov	r2, r5
 8017ea4:	4b05      	ldr	r3, [pc, #20]	; (8017ebc <_vfiprintf_r+0x22c>)
 8017ea6:	a904      	add	r1, sp, #16
 8017ea8:	4630      	mov	r0, r6
 8017eaa:	f7fc f895 	bl	8013fd8 <_printf_i>
 8017eae:	e7e4      	b.n	8017e7a <_vfiprintf_r+0x1ea>
 8017eb0:	08019159 	.word	0x08019159
 8017eb4:	08019163 	.word	0x08019163
 8017eb8:	08013a91 	.word	0x08013a91
 8017ebc:	08017c6d 	.word	0x08017c6d
 8017ec0:	0801915f 	.word	0x0801915f

08017ec4 <__swbuf_r>:
 8017ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ec6:	460e      	mov	r6, r1
 8017ec8:	4614      	mov	r4, r2
 8017eca:	4605      	mov	r5, r0
 8017ecc:	b118      	cbz	r0, 8017ed6 <__swbuf_r+0x12>
 8017ece:	6a03      	ldr	r3, [r0, #32]
 8017ed0:	b90b      	cbnz	r3, 8017ed6 <__swbuf_r+0x12>
 8017ed2:	f7fc fc2d 	bl	8014730 <__sinit>
 8017ed6:	69a3      	ldr	r3, [r4, #24]
 8017ed8:	60a3      	str	r3, [r4, #8]
 8017eda:	89a3      	ldrh	r3, [r4, #12]
 8017edc:	071a      	lsls	r2, r3, #28
 8017ede:	d525      	bpl.n	8017f2c <__swbuf_r+0x68>
 8017ee0:	6923      	ldr	r3, [r4, #16]
 8017ee2:	b31b      	cbz	r3, 8017f2c <__swbuf_r+0x68>
 8017ee4:	6823      	ldr	r3, [r4, #0]
 8017ee6:	6922      	ldr	r2, [r4, #16]
 8017ee8:	1a98      	subs	r0, r3, r2
 8017eea:	6963      	ldr	r3, [r4, #20]
 8017eec:	b2f6      	uxtb	r6, r6
 8017eee:	4283      	cmp	r3, r0
 8017ef0:	4637      	mov	r7, r6
 8017ef2:	dc04      	bgt.n	8017efe <__swbuf_r+0x3a>
 8017ef4:	4621      	mov	r1, r4
 8017ef6:	4628      	mov	r0, r5
 8017ef8:	f7ff fa3a 	bl	8017370 <_fflush_r>
 8017efc:	b9e0      	cbnz	r0, 8017f38 <__swbuf_r+0x74>
 8017efe:	68a3      	ldr	r3, [r4, #8]
 8017f00:	3b01      	subs	r3, #1
 8017f02:	60a3      	str	r3, [r4, #8]
 8017f04:	6823      	ldr	r3, [r4, #0]
 8017f06:	1c5a      	adds	r2, r3, #1
 8017f08:	6022      	str	r2, [r4, #0]
 8017f0a:	701e      	strb	r6, [r3, #0]
 8017f0c:	6962      	ldr	r2, [r4, #20]
 8017f0e:	1c43      	adds	r3, r0, #1
 8017f10:	429a      	cmp	r2, r3
 8017f12:	d004      	beq.n	8017f1e <__swbuf_r+0x5a>
 8017f14:	89a3      	ldrh	r3, [r4, #12]
 8017f16:	07db      	lsls	r3, r3, #31
 8017f18:	d506      	bpl.n	8017f28 <__swbuf_r+0x64>
 8017f1a:	2e0a      	cmp	r6, #10
 8017f1c:	d104      	bne.n	8017f28 <__swbuf_r+0x64>
 8017f1e:	4621      	mov	r1, r4
 8017f20:	4628      	mov	r0, r5
 8017f22:	f7ff fa25 	bl	8017370 <_fflush_r>
 8017f26:	b938      	cbnz	r0, 8017f38 <__swbuf_r+0x74>
 8017f28:	4638      	mov	r0, r7
 8017f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f2c:	4621      	mov	r1, r4
 8017f2e:	4628      	mov	r0, r5
 8017f30:	f000 f806 	bl	8017f40 <__swsetup_r>
 8017f34:	2800      	cmp	r0, #0
 8017f36:	d0d5      	beq.n	8017ee4 <__swbuf_r+0x20>
 8017f38:	f04f 37ff 	mov.w	r7, #4294967295
 8017f3c:	e7f4      	b.n	8017f28 <__swbuf_r+0x64>
	...

08017f40 <__swsetup_r>:
 8017f40:	b538      	push	{r3, r4, r5, lr}
 8017f42:	4b2a      	ldr	r3, [pc, #168]	; (8017fec <__swsetup_r+0xac>)
 8017f44:	4605      	mov	r5, r0
 8017f46:	6818      	ldr	r0, [r3, #0]
 8017f48:	460c      	mov	r4, r1
 8017f4a:	b118      	cbz	r0, 8017f54 <__swsetup_r+0x14>
 8017f4c:	6a03      	ldr	r3, [r0, #32]
 8017f4e:	b90b      	cbnz	r3, 8017f54 <__swsetup_r+0x14>
 8017f50:	f7fc fbee 	bl	8014730 <__sinit>
 8017f54:	89a3      	ldrh	r3, [r4, #12]
 8017f56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f5a:	0718      	lsls	r0, r3, #28
 8017f5c:	d422      	bmi.n	8017fa4 <__swsetup_r+0x64>
 8017f5e:	06d9      	lsls	r1, r3, #27
 8017f60:	d407      	bmi.n	8017f72 <__swsetup_r+0x32>
 8017f62:	2309      	movs	r3, #9
 8017f64:	602b      	str	r3, [r5, #0]
 8017f66:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017f6a:	81a3      	strh	r3, [r4, #12]
 8017f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8017f70:	e034      	b.n	8017fdc <__swsetup_r+0x9c>
 8017f72:	0758      	lsls	r0, r3, #29
 8017f74:	d512      	bpl.n	8017f9c <__swsetup_r+0x5c>
 8017f76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f78:	b141      	cbz	r1, 8017f8c <__swsetup_r+0x4c>
 8017f7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f7e:	4299      	cmp	r1, r3
 8017f80:	d002      	beq.n	8017f88 <__swsetup_r+0x48>
 8017f82:	4628      	mov	r0, r5
 8017f84:	f7fd fbd2 	bl	801572c <_free_r>
 8017f88:	2300      	movs	r3, #0
 8017f8a:	6363      	str	r3, [r4, #52]	; 0x34
 8017f8c:	89a3      	ldrh	r3, [r4, #12]
 8017f8e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017f92:	81a3      	strh	r3, [r4, #12]
 8017f94:	2300      	movs	r3, #0
 8017f96:	6063      	str	r3, [r4, #4]
 8017f98:	6923      	ldr	r3, [r4, #16]
 8017f9a:	6023      	str	r3, [r4, #0]
 8017f9c:	89a3      	ldrh	r3, [r4, #12]
 8017f9e:	f043 0308 	orr.w	r3, r3, #8
 8017fa2:	81a3      	strh	r3, [r4, #12]
 8017fa4:	6923      	ldr	r3, [r4, #16]
 8017fa6:	b94b      	cbnz	r3, 8017fbc <__swsetup_r+0x7c>
 8017fa8:	89a3      	ldrh	r3, [r4, #12]
 8017faa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017fb2:	d003      	beq.n	8017fbc <__swsetup_r+0x7c>
 8017fb4:	4621      	mov	r1, r4
 8017fb6:	4628      	mov	r0, r5
 8017fb8:	f000 f884 	bl	80180c4 <__smakebuf_r>
 8017fbc:	89a0      	ldrh	r0, [r4, #12]
 8017fbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017fc2:	f010 0301 	ands.w	r3, r0, #1
 8017fc6:	d00a      	beq.n	8017fde <__swsetup_r+0x9e>
 8017fc8:	2300      	movs	r3, #0
 8017fca:	60a3      	str	r3, [r4, #8]
 8017fcc:	6963      	ldr	r3, [r4, #20]
 8017fce:	425b      	negs	r3, r3
 8017fd0:	61a3      	str	r3, [r4, #24]
 8017fd2:	6923      	ldr	r3, [r4, #16]
 8017fd4:	b943      	cbnz	r3, 8017fe8 <__swsetup_r+0xa8>
 8017fd6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017fda:	d1c4      	bne.n	8017f66 <__swsetup_r+0x26>
 8017fdc:	bd38      	pop	{r3, r4, r5, pc}
 8017fde:	0781      	lsls	r1, r0, #30
 8017fe0:	bf58      	it	pl
 8017fe2:	6963      	ldrpl	r3, [r4, #20]
 8017fe4:	60a3      	str	r3, [r4, #8]
 8017fe6:	e7f4      	b.n	8017fd2 <__swsetup_r+0x92>
 8017fe8:	2000      	movs	r0, #0
 8017fea:	e7f7      	b.n	8017fdc <__swsetup_r+0x9c>
 8017fec:	20000088 	.word	0x20000088

08017ff0 <_raise_r>:
 8017ff0:	291f      	cmp	r1, #31
 8017ff2:	b538      	push	{r3, r4, r5, lr}
 8017ff4:	4604      	mov	r4, r0
 8017ff6:	460d      	mov	r5, r1
 8017ff8:	d904      	bls.n	8018004 <_raise_r+0x14>
 8017ffa:	2316      	movs	r3, #22
 8017ffc:	6003      	str	r3, [r0, #0]
 8017ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8018002:	bd38      	pop	{r3, r4, r5, pc}
 8018004:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018006:	b112      	cbz	r2, 801800e <_raise_r+0x1e>
 8018008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801800c:	b94b      	cbnz	r3, 8018022 <_raise_r+0x32>
 801800e:	4620      	mov	r0, r4
 8018010:	f000 f830 	bl	8018074 <_getpid_r>
 8018014:	462a      	mov	r2, r5
 8018016:	4601      	mov	r1, r0
 8018018:	4620      	mov	r0, r4
 801801a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801801e:	f000 b817 	b.w	8018050 <_kill_r>
 8018022:	2b01      	cmp	r3, #1
 8018024:	d00a      	beq.n	801803c <_raise_r+0x4c>
 8018026:	1c59      	adds	r1, r3, #1
 8018028:	d103      	bne.n	8018032 <_raise_r+0x42>
 801802a:	2316      	movs	r3, #22
 801802c:	6003      	str	r3, [r0, #0]
 801802e:	2001      	movs	r0, #1
 8018030:	e7e7      	b.n	8018002 <_raise_r+0x12>
 8018032:	2400      	movs	r4, #0
 8018034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018038:	4628      	mov	r0, r5
 801803a:	4798      	blx	r3
 801803c:	2000      	movs	r0, #0
 801803e:	e7e0      	b.n	8018002 <_raise_r+0x12>

08018040 <raise>:
 8018040:	4b02      	ldr	r3, [pc, #8]	; (801804c <raise+0xc>)
 8018042:	4601      	mov	r1, r0
 8018044:	6818      	ldr	r0, [r3, #0]
 8018046:	f7ff bfd3 	b.w	8017ff0 <_raise_r>
 801804a:	bf00      	nop
 801804c:	20000088 	.word	0x20000088

08018050 <_kill_r>:
 8018050:	b538      	push	{r3, r4, r5, lr}
 8018052:	4d07      	ldr	r5, [pc, #28]	; (8018070 <_kill_r+0x20>)
 8018054:	2300      	movs	r3, #0
 8018056:	4604      	mov	r4, r0
 8018058:	4608      	mov	r0, r1
 801805a:	4611      	mov	r1, r2
 801805c:	602b      	str	r3, [r5, #0]
 801805e:	f7ee f9d3 	bl	8006408 <_kill>
 8018062:	1c43      	adds	r3, r0, #1
 8018064:	d102      	bne.n	801806c <_kill_r+0x1c>
 8018066:	682b      	ldr	r3, [r5, #0]
 8018068:	b103      	cbz	r3, 801806c <_kill_r+0x1c>
 801806a:	6023      	str	r3, [r4, #0]
 801806c:	bd38      	pop	{r3, r4, r5, pc}
 801806e:	bf00      	nop
 8018070:	20012224 	.word	0x20012224

08018074 <_getpid_r>:
 8018074:	f7ee b9c0 	b.w	80063f8 <_getpid>

08018078 <__swhatbuf_r>:
 8018078:	b570      	push	{r4, r5, r6, lr}
 801807a:	460c      	mov	r4, r1
 801807c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018080:	2900      	cmp	r1, #0
 8018082:	b096      	sub	sp, #88	; 0x58
 8018084:	4615      	mov	r5, r2
 8018086:	461e      	mov	r6, r3
 8018088:	da0d      	bge.n	80180a6 <__swhatbuf_r+0x2e>
 801808a:	89a3      	ldrh	r3, [r4, #12]
 801808c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018090:	f04f 0100 	mov.w	r1, #0
 8018094:	bf0c      	ite	eq
 8018096:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801809a:	2340      	movne	r3, #64	; 0x40
 801809c:	2000      	movs	r0, #0
 801809e:	6031      	str	r1, [r6, #0]
 80180a0:	602b      	str	r3, [r5, #0]
 80180a2:	b016      	add	sp, #88	; 0x58
 80180a4:	bd70      	pop	{r4, r5, r6, pc}
 80180a6:	466a      	mov	r2, sp
 80180a8:	f000 f848 	bl	801813c <_fstat_r>
 80180ac:	2800      	cmp	r0, #0
 80180ae:	dbec      	blt.n	801808a <__swhatbuf_r+0x12>
 80180b0:	9901      	ldr	r1, [sp, #4]
 80180b2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80180b6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80180ba:	4259      	negs	r1, r3
 80180bc:	4159      	adcs	r1, r3
 80180be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180c2:	e7eb      	b.n	801809c <__swhatbuf_r+0x24>

080180c4 <__smakebuf_r>:
 80180c4:	898b      	ldrh	r3, [r1, #12]
 80180c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80180c8:	079d      	lsls	r5, r3, #30
 80180ca:	4606      	mov	r6, r0
 80180cc:	460c      	mov	r4, r1
 80180ce:	d507      	bpl.n	80180e0 <__smakebuf_r+0x1c>
 80180d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80180d4:	6023      	str	r3, [r4, #0]
 80180d6:	6123      	str	r3, [r4, #16]
 80180d8:	2301      	movs	r3, #1
 80180da:	6163      	str	r3, [r4, #20]
 80180dc:	b002      	add	sp, #8
 80180de:	bd70      	pop	{r4, r5, r6, pc}
 80180e0:	ab01      	add	r3, sp, #4
 80180e2:	466a      	mov	r2, sp
 80180e4:	f7ff ffc8 	bl	8018078 <__swhatbuf_r>
 80180e8:	9900      	ldr	r1, [sp, #0]
 80180ea:	4605      	mov	r5, r0
 80180ec:	4630      	mov	r0, r6
 80180ee:	f7fd fb91 	bl	8015814 <_malloc_r>
 80180f2:	b948      	cbnz	r0, 8018108 <__smakebuf_r+0x44>
 80180f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180f8:	059a      	lsls	r2, r3, #22
 80180fa:	d4ef      	bmi.n	80180dc <__smakebuf_r+0x18>
 80180fc:	f023 0303 	bic.w	r3, r3, #3
 8018100:	f043 0302 	orr.w	r3, r3, #2
 8018104:	81a3      	strh	r3, [r4, #12]
 8018106:	e7e3      	b.n	80180d0 <__smakebuf_r+0xc>
 8018108:	89a3      	ldrh	r3, [r4, #12]
 801810a:	6020      	str	r0, [r4, #0]
 801810c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018110:	81a3      	strh	r3, [r4, #12]
 8018112:	9b00      	ldr	r3, [sp, #0]
 8018114:	6163      	str	r3, [r4, #20]
 8018116:	9b01      	ldr	r3, [sp, #4]
 8018118:	6120      	str	r0, [r4, #16]
 801811a:	b15b      	cbz	r3, 8018134 <__smakebuf_r+0x70>
 801811c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018120:	4630      	mov	r0, r6
 8018122:	f000 f81d 	bl	8018160 <_isatty_r>
 8018126:	b128      	cbz	r0, 8018134 <__smakebuf_r+0x70>
 8018128:	89a3      	ldrh	r3, [r4, #12]
 801812a:	f023 0303 	bic.w	r3, r3, #3
 801812e:	f043 0301 	orr.w	r3, r3, #1
 8018132:	81a3      	strh	r3, [r4, #12]
 8018134:	89a3      	ldrh	r3, [r4, #12]
 8018136:	431d      	orrs	r5, r3
 8018138:	81a5      	strh	r5, [r4, #12]
 801813a:	e7cf      	b.n	80180dc <__smakebuf_r+0x18>

0801813c <_fstat_r>:
 801813c:	b538      	push	{r3, r4, r5, lr}
 801813e:	4d07      	ldr	r5, [pc, #28]	; (801815c <_fstat_r+0x20>)
 8018140:	2300      	movs	r3, #0
 8018142:	4604      	mov	r4, r0
 8018144:	4608      	mov	r0, r1
 8018146:	4611      	mov	r1, r2
 8018148:	602b      	str	r3, [r5, #0]
 801814a:	f7ee f9bc 	bl	80064c6 <_fstat>
 801814e:	1c43      	adds	r3, r0, #1
 8018150:	d102      	bne.n	8018158 <_fstat_r+0x1c>
 8018152:	682b      	ldr	r3, [r5, #0]
 8018154:	b103      	cbz	r3, 8018158 <_fstat_r+0x1c>
 8018156:	6023      	str	r3, [r4, #0]
 8018158:	bd38      	pop	{r3, r4, r5, pc}
 801815a:	bf00      	nop
 801815c:	20012224 	.word	0x20012224

08018160 <_isatty_r>:
 8018160:	b538      	push	{r3, r4, r5, lr}
 8018162:	4d06      	ldr	r5, [pc, #24]	; (801817c <_isatty_r+0x1c>)
 8018164:	2300      	movs	r3, #0
 8018166:	4604      	mov	r4, r0
 8018168:	4608      	mov	r0, r1
 801816a:	602b      	str	r3, [r5, #0]
 801816c:	f7ee f9bb 	bl	80064e6 <_isatty>
 8018170:	1c43      	adds	r3, r0, #1
 8018172:	d102      	bne.n	801817a <_isatty_r+0x1a>
 8018174:	682b      	ldr	r3, [r5, #0]
 8018176:	b103      	cbz	r3, 801817a <_isatty_r+0x1a>
 8018178:	6023      	str	r3, [r4, #0]
 801817a:	bd38      	pop	{r3, r4, r5, pc}
 801817c:	20012224 	.word	0x20012224

08018180 <_init>:
 8018180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018182:	bf00      	nop
 8018184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018186:	bc08      	pop	{r3}
 8018188:	469e      	mov	lr, r3
 801818a:	4770      	bx	lr

0801818c <_fini>:
 801818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801818e:	bf00      	nop
 8018190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018192:	bc08      	pop	{r3}
 8018194:	469e      	mov	lr, r3
 8018196:	4770      	bx	lr

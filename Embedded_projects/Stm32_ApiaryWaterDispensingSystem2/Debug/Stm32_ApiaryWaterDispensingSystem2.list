
Stm32_ApiaryWaterDispensingSystem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015844  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e94  080159e8  080159e8  000259e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801687c  0801687c  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801687c  0801687c  0002687c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016884  08016884  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016884  08016884  00026884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016888  08016888  00026888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801688c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d9c4  200001f8  08016a84  000301f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000dbbc  08016a84  0003dbbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ad51  00000000  00000000  0003026b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000067d2  00000000  00000000  0005afbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002370  00000000  00000000  00061790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b5d  00000000  00000000  00063b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020042  00000000  00000000  0006565d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003102a  00000000  00000000  0008569f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a9fe2  00000000  00000000  000b66c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000a2f4  00000000  00000000  001606ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0016a9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080159cc 	.word	0x080159cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080159cc 	.word	0x080159cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b9bb 	b.w	8000f90 <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f84d 	bl	8000cc8 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f840 	bl	8000cc8 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f82f 	bl	8000cc8 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f821 	bl	8000cc8 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <GFX_SetFont+0x1c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000214 	.word	0x20000214

08000fb4 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b7e      	cmp	r3, #126	; 0x7e
 8000fce:	f200 80a3 	bhi.w	8001118 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]
 8000fd6:	e096      	b.n	8001106 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000fd8:	4b51      	ldr	r3, [pc, #324]	; (8001120 <GFX_DrawChar+0x16c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3b20      	subs	r3, #32
 8000fe0:	494f      	ldr	r1, [pc, #316]	; (8001120 <GFX_DrawChar+0x16c>)
 8000fe2:	6809      	ldr	r1, [r1, #0]
 8000fe4:	3101      	adds	r1, #1
 8000fe6:	7809      	ldrb	r1, [r1, #0]
 8000fe8:	fb03 f101 	mul.w	r1, r3, r1
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	440b      	add	r3, r1
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	757b      	strb	r3, [r7, #21]
 8000ffc:	e078      	b.n	80010f0 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000ffe:	7dbb      	ldrb	r3, [r7, #22]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d032      	beq.n	800106e <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <GFX_DrawChar+0x170>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d113      	bne.n	8001038 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	b29a      	uxth	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4413      	add	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	b218      	sxth	r0, r3
 800101e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001022:	b29a      	uxth	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4413      	add	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	b21b      	sxth	r3, r3
 800102e:	79ba      	ldrb	r2, [r7, #6]
 8001030:	4619      	mov	r1, r3
 8001032:	f000 faf5 	bl	8001620 <SSD1306_DrawPixel>
 8001036:	e052      	b.n	80010de <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	4a3a      	ldr	r2, [pc, #232]	; (8001124 <GFX_DrawChar+0x170>)
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	fb03 f202 	mul.w	r2, r3, r2
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	18d0      	adds	r0, r2, r3
 8001046:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800104a:	4a36      	ldr	r2, [pc, #216]	; (8001124 <GFX_DrawChar+0x170>)
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	fb03 f202 	mul.w	r2, r3, r2
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	18d1      	adds	r1, r2, r3
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <GFX_DrawChar+0x170>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b31      	ldr	r3, [pc, #196]	; (8001124 <GFX_DrawChar+0x170>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b29c      	uxth	r4, r3
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	4623      	mov	r3, r4
 8001068:	f000 f960 	bl	800132c <GFX_DrawFillRectangle>
 800106c:	e037      	b.n	80010de <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800106e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001072:	2b00      	cmp	r3, #0
 8001074:	d133      	bne.n	80010de <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <GFX_DrawChar+0x170>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d114      	bne.n	80010a8 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	b29a      	uxth	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4413      	add	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	b218      	sxth	r0, r3
 800108c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001090:	b29a      	uxth	r2, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4413      	add	r3, r2
 8001098:	b29b      	uxth	r3, r3
 800109a:	b21b      	sxth	r3, r3
 800109c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010a0:	4619      	mov	r1, r3
 80010a2:	f000 fabd 	bl	8001620 <SSD1306_DrawPixel>
 80010a6:	e01a      	b.n	80010de <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <GFX_DrawChar+0x170>)
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	fb03 f202 	mul.w	r2, r3, r2
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	18d0      	adds	r0, r2, r3
 80010b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010ba:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <GFX_DrawChar+0x170>)
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	fb03 f202 	mul.w	r2, r3, r2
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	18d1      	adds	r1, r2, r3
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <GFX_DrawChar+0x170>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <GFX_DrawChar+0x170>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b29c      	uxth	r4, r3
 80010d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	4623      	mov	r3, r4
 80010da:	f000 f927 	bl	800132c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80010de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	757b      	strb	r3, [r7, #21]
 80010ea:	7dbb      	ldrb	r3, [r7, #22]
 80010ec:	085b      	lsrs	r3, r3, #1
 80010ee:	75bb      	strb	r3, [r7, #22]
 80010f0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <GFX_DrawChar+0x16c>)
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f6ff af7f 	blt.w	8000ffe <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	3301      	adds	r3, #1
 8001104:	75fb      	strb	r3, [r7, #23]
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <GFX_DrawChar+0x16c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	429a      	cmp	r2, r3
 8001112:	f4ff af61 	bcc.w	8000fd8 <GFX_DrawChar+0x24>
 8001116:	e000      	b.n	800111a <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001118:	bf00      	nop
            }
        }
    }
}
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	20000214 	.word	0x20000214
 8001124:	20000000 	.word	0x20000000

08001128 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af02      	add	r7, sp, #8
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001140:	e03e      	b.n	80011c0 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001142:	78f9      	ldrb	r1, [r7, #3]
 8001144:	7cfa      	ldrb	r2, [r7, #19]
 8001146:	f897 3020 	ldrb.w	r3, [r7, #32]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	460b      	mov	r3, r1
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f7ff ff2f 	bl	8000fb4 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <GFX_DrawString+0xb0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <GFX_DrawString+0xb4>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	3301      	adds	r3, #1
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001170:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d120      	bne.n	80011ba <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001178:	2300      	movs	r3, #0
 800117a:	74bb      	strb	r3, [r7, #18]
 800117c:	e012      	b.n	80011a4 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	b29b      	uxth	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	b218      	sxth	r0, r3
 8001188:	7cbb      	ldrb	r3, [r7, #18]
 800118a:	b29a      	uxth	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	b21b      	sxth	r3, r3
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	f000 fa41 	bl	8001620 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800119e:	7cbb      	ldrb	r3, [r7, #18]
 80011a0:	3301      	adds	r3, #1
 80011a2:	74bb      	strb	r3, [r7, #18]
 80011a4:	7cba      	ldrb	r2, [r7, #18]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <GFX_DrawString+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <GFX_DrawString+0xb4>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	fb01 f303 	mul.w	r3, r1, r3
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbe1      	blt.n	800117e <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ba      	bne.n	8001142 <GFX_DrawString+0x1a>
	}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000214 	.word	0x20000214
 80011dc:	20000000 	.word	0x20000000

080011e0 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1acb      	subs	r3, r1, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	bfb8      	it	lt
 8001206:	425b      	neglt	r3, r3
 8001208:	429a      	cmp	r2, r3
 800120a:	bfcc      	ite	gt
 800120c:	2301      	movgt	r3, #1
 800120e:	2300      	movle	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001214:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dd0b      	ble.n	8001254 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	b29b      	uxth	r3, r3
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	b29b      	uxth	r3, r3
 8001260:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfb8      	it	lt
 800126c:	425b      	neglt	r3, r3
 800126e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001270:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001274:	0fda      	lsrs	r2, r3, #31
 8001276:	4413      	add	r3, r2
 8001278:	105b      	asrs	r3, r3, #1
 800127a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	da02      	bge.n	800128a <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001288:	e030      	b.n	80012ec <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 800128a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001290:	e02c      	b.n	80012ec <GFX_WriteLine+0x10c>
	        if (steep) {
 8001292:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	b21b      	sxth	r3, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	b211      	sxth	r1, r2
 80012a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f9ba 	bl	8001620 <SSD1306_DrawPixel>
 80012ac:	e008      	b.n	80012c0 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	b211      	sxth	r1, r2
 80012b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f9b0 	bl	8001620 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80012c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012c2:	8abb      	ldrh	r3, [r7, #20]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80012ca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	da09      	bge.n	80012e6 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80012d2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	4413      	add	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80012dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012de:	8afb      	ldrh	r3, [r7, #22]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	ddce      	ble.n	8001292 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af02      	add	r7, sp, #8
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff ff5e 	bl	80011e0 <GFX_WriteLine>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	4611      	mov	r1, r2
 8001338:	461a      	mov	r2, r3
 800133a:	460b      	mov	r3, r1
 800133c:	80fb      	strh	r3, [r7, #6]
 800133e:	4613      	mov	r3, r2
 8001340:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001348:	88ba      	ldrh	r2, [r7, #4]
 800134a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	6978      	ldr	r0, [r7, #20]
 8001352:	f7ff ffd4 	bl	80012fe <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbef      	blt.n	8001348 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <Read16>:
#include "INA219.h"
#include "stm32f4xx_hal.h"


uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b088      	sub	sp, #32
 8001376:	af04      	add	r7, sp, #16
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	78fb      	ldrb	r3, [r7, #3]
 8001384:	b29a      	uxth	r2, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	2302      	movs	r3, #2
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	2301      	movs	r3, #1
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	f005 ffc3 	bl	8007324 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 800139e:	7b3b      	ldrb	r3, [r7, #12]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	b21a      	sxth	r2, r3
 80013a4:	7b7b      	ldrb	r3, [r7, #13]
 80013a6:	b21b      	sxth	r3, r3
 80013a8:	4313      	orrs	r3, r2
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	b29b      	uxth	r3, r3
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b088      	sub	sp, #32
 80013ba:	af04      	add	r7, sp, #16
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	70fb      	strb	r3, [r7, #3]
 80013c2:	4613      	mov	r3, r2
 80013c4:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80013c6:	883b      	ldrh	r3, [r7, #0]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 80013d0:	883b      	ldrh	r3, [r7, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	78fb      	ldrb	r3, [r7, #3]
 80013dc:	b29a      	uxth	r2, r3
 80013de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	2302      	movs	r3, #2
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2301      	movs	r3, #1
 80013f0:	2180      	movs	r1, #128	; 0x80
 80013f2:	f005 fe9d 	bl	8007130 <HAL_I2C_Mem_Write>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001406:	2102      	movs	r1, #2
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffb2 	bl	8001372 <Read16>
 800140e:	4603      	mov	r3, r0
 8001410:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	08db      	lsrs	r3, r3, #3
 8001416:	b29b      	uxth	r3, r3
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	b29b      	uxth	r3, r3

}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 800142c:	2104      	movs	r1, #4
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff9f 	bl	8001372 <Read16>
 8001434:	4603      	mov	r3, r0
 8001436:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001438:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <INA219_ReadCurrent>:

int16_t INA219_ReadCurrent(INA219_t *ina219,ina219_calibration *ina219calibration)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ffe8 	bl	8001424 <INA219_ReadCurrent_raw>
 8001454:	4603      	mov	r3, r0
 8001456:	81fb      	strh	r3, [r7, #14]

	return (result / ina219calibration->ina219_currentDivider_mA );
 8001458:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001462:	fb93 f3f2 	sdiv	r3, r3, r2
 8001466:	b21b      	sxth	r3, r3
}
 8001468:	4618      	mov	r0, r3
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <INA219_ReadShuntVolage>:

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001478:	2101      	movs	r1, #1
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ff79 	bl	8001372 <Read16>
 8001480:	4603      	mov	r3, r0
 8001482:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01 );
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f854 	bl	8000534 <__aeabi_i2d>
 800148c:	a308      	add	r3, pc, #32	; (adr r3, 80014b0 <INA219_ReadShuntVolage+0x40>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f8b9 	bl	8000608 <__aeabi_dmul>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4610      	mov	r0, r2
 800149c:	4619      	mov	r1, r3
 800149e:	f7ff fb8b 	bl	8000bb8 <__aeabi_d2uiz>
 80014a2:	4603      	mov	r3, r0
 80014a4:	b29b      	uxth	r3, r3
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	47ae147b 	.word	0x47ae147b
 80014b4:	3f847ae1 	.word	0x3f847ae1

080014b8 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80014c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ff75 	bl	80013b6 <Write16>
	HAL_Delay(1);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f004 fdab 	bl	8006028 <HAL_Delay>

}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	461a      	mov	r2, r3
 80014ea:	2105      	movs	r1, #5
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff62 	bl	80013b6 <Write16>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	460b      	mov	r3, r1
 8001504:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001506:	887b      	ldrh	r3, [r7, #2]
 8001508:	461a      	mov	r2, r3
 800150a:	2100      	movs	r1, #0
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff52 	bl	80013b6 <Write16>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219,ina219_calibration *ina219calibration)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001524:	f643 139f 	movw	r3, #14751	; 0x399f
 8001528:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219calibration->ina219_calibrationValue = 4096;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001530:	801a      	strh	r2, [r3, #0]
	ina219calibration->ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	220a      	movs	r2, #10
 8001536:	805a      	strh	r2, [r3, #2]
	ina219calibration->ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2202      	movs	r2, #2
 800153c:	809a      	strh	r2, [r3, #4]

	INA219_setCalibration(ina219, ina219calibration->ina219_calibrationValue);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffc8 	bl	80014da <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffd3 	bl	80014fa <INA219_setConfig>
}
 8001554:	bf00      	nop
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address,ina219_calibration *ina219calibration)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	79fa      	ldrb	r2, [r7, #7]
 8001576:	711a      	strb	r2, [r3, #4]

	ina219calibration->ina219_currentDivider_mA = 0;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2200      	movs	r2, #0
 800157c:	805a      	strh	r2, [r3, #2]
	ina219calibration->ina219_powerMultiplier_mW = 0;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	809a      	strh	r2, [r3, #4]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	b29b      	uxth	r3, r3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	b299      	uxth	r1, r3
 800158c:	2302      	movs	r3, #2
 800158e:	2203      	movs	r2, #3
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f006 f8ed 	bl	8007770 <HAL_I2C_IsDeviceReady>
 8001596:	4603      	mov	r3, r0
 8001598:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d108      	bne.n	80015b2 <INA219_Init+0x56>
	{

		INA219_Reset(ina219);
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f7ff ff89 	bl	80014b8 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219,ina219calibration);
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	68f8      	ldr	r0, [r7, #12]
 80015aa:	f7ff ffb6 	bl	800151a <INA219_setCalibration_32V_2A>

		return 1;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <INA219_Init+0x58>
	}

	else
	{
		return 0;
 80015b2:	2300      	movs	r3, #0
	}
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af04      	add	r7, sp, #16
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <SSD1306_Command+0x2c>)
 80015c8:	6818      	ldr	r0, [r3, #0]
 80015ca:	2364      	movs	r3, #100	; 0x64
 80015cc:	9302      	str	r3, [sp, #8]
 80015ce:	2301      	movs	r3, #1
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	1dfb      	adds	r3, r7, #7
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	2301      	movs	r3, #1
 80015d8:	2200      	movs	r2, #0
 80015da:	2178      	movs	r1, #120	; 0x78
 80015dc:	f005 fda8 	bl	8007130 <HAL_I2C_Mem_Write>
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000218 	.word	0x20000218

080015ec <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af04      	add	r7, sp, #16
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <SSD1306_Data+0x30>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2301      	movs	r3, #1
 800160a:	2240      	movs	r2, #64	; 0x40
 800160c:	2178      	movs	r1, #120	; 0x78
 800160e:	f005 fd8f 	bl	8007130 <HAL_I2C_Mem_Write>
#endif
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000218 	.word	0x20000218

08001620 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
 800162a:	460b      	mov	r3, r1
 800162c:	80bb      	strh	r3, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 8001632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001636:	2b00      	cmp	r3, #0
 8001638:	db79      	blt.n	800172e <SSD1306_DrawPixel+0x10e>
 800163a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163e:	2b7f      	cmp	r3, #127	; 0x7f
 8001640:	dc75      	bgt.n	800172e <SSD1306_DrawPixel+0x10e>
 8001642:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db71      	blt.n	800172e <SSD1306_DrawPixel+0x10e>
 800164a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800164e:	2b3f      	cmp	r3, #63	; 0x3f
 8001650:	dc6d      	bgt.n	800172e <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 8001652:	78fb      	ldrb	r3, [r7, #3]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d049      	beq.n	80016ec <SSD1306_DrawPixel+0xcc>
 8001658:	2b02      	cmp	r3, #2
 800165a:	dc69      	bgt.n	8001730 <SSD1306_DrawPixel+0x110>
 800165c:	2b00      	cmp	r3, #0
 800165e:	d022      	beq.n	80016a6 <SSD1306_DrawPixel+0x86>
 8001660:	2b01      	cmp	r3, #1
 8001662:	d165      	bne.n	8001730 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 8001664:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001668:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	da00      	bge.n	8001672 <SSD1306_DrawPixel+0x52>
 8001670:	3307      	adds	r3, #7
 8001672:	10db      	asrs	r3, r3, #3
 8001674:	b218      	sxth	r0, r3
 8001676:	4603      	mov	r3, r0
 8001678:	01db      	lsls	r3, r3, #7
 800167a:	4413      	add	r3, r2
 800167c:	4a2f      	ldr	r2, [pc, #188]	; (800173c <SSD1306_DrawPixel+0x11c>)
 800167e:	5cd3      	ldrb	r3, [r2, r3]
 8001680:	b25a      	sxtb	r2, r3
 8001682:	88bb      	ldrh	r3, [r7, #4]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	b25b      	sxtb	r3, r3
 8001690:	4313      	orrs	r3, r2
 8001692:	b259      	sxtb	r1, r3
 8001694:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001698:	4603      	mov	r3, r0
 800169a:	01db      	lsls	r3, r3, #7
 800169c:	4413      	add	r3, r2
 800169e:	b2c9      	uxtb	r1, r1
 80016a0:	4a26      	ldr	r2, [pc, #152]	; (800173c <SSD1306_DrawPixel+0x11c>)
 80016a2:	54d1      	strb	r1, [r2, r3]
      break;
 80016a4:	e044      	b.n	8001730 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 80016a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016aa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da00      	bge.n	80016b4 <SSD1306_DrawPixel+0x94>
 80016b2:	3307      	adds	r3, #7
 80016b4:	10db      	asrs	r3, r3, #3
 80016b6:	b218      	sxth	r0, r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	01db      	lsls	r3, r3, #7
 80016bc:	4413      	add	r3, r2
 80016be:	4a1f      	ldr	r2, [pc, #124]	; (800173c <SSD1306_DrawPixel+0x11c>)
 80016c0:	5cd3      	ldrb	r3, [r2, r3]
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	88bb      	ldrh	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f303 	lsl.w	r3, r1, r3
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	4013      	ands	r3, r2
 80016d8:	b259      	sxtb	r1, r3
 80016da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016de:	4603      	mov	r3, r0
 80016e0:	01db      	lsls	r3, r3, #7
 80016e2:	4413      	add	r3, r2
 80016e4:	b2c9      	uxtb	r1, r1
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <SSD1306_DrawPixel+0x11c>)
 80016e8:	54d1      	strb	r1, [r2, r3]
      break;
 80016ea:	e021      	b.n	8001730 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 80016ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da00      	bge.n	80016fa <SSD1306_DrawPixel+0xda>
 80016f8:	3307      	adds	r3, #7
 80016fa:	10db      	asrs	r3, r3, #3
 80016fc:	b218      	sxth	r0, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	01db      	lsls	r3, r3, #7
 8001702:	4413      	add	r3, r2
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <SSD1306_DrawPixel+0x11c>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	b25a      	sxtb	r2, r3
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	2101      	movs	r1, #1
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	b25b      	sxtb	r3, r3
 8001718:	4053      	eors	r3, r2
 800171a:	b259      	sxtb	r1, r3
 800171c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001720:	4603      	mov	r3, r0
 8001722:	01db      	lsls	r3, r3, #7
 8001724:	4413      	add	r3, r2
 8001726:	b2c9      	uxtb	r1, r1
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <SSD1306_DrawPixel+0x11c>)
 800172a:	54d1      	strb	r1, [r2, r3]
      break;
 800172c:	e000      	b.n	8001730 <SSD1306_DrawPixel+0x110>
	  return;
 800172e:	bf00      	nop
    }
}
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000021c 	.word	0x2000021c

08001740 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <SSD1306_Clear+0x22>
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10d      	bne.n	8001770 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 8001754:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001758:	21ff      	movs	r1, #255	; 0xff
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <SSD1306_Clear+0x38>)
 800175c:	f012 f98f 	bl	8013a7e <memset>
		break;
 8001760:	e006      	b.n	8001770 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 8001762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001766:	2100      	movs	r1, #0
 8001768:	4803      	ldr	r0, [pc, #12]	; (8001778 <SSD1306_Clear+0x38>)
 800176a:	f012 f988 	bl	8013a7e <memset>
		break;
 800176e:	bf00      	nop
	}
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	2000021c 	.word	0x2000021c

0800177c <SSD1306_Display>:

void SSD1306_Display(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
//	SSD1306_Command(SSD1306_COLUMNADDR);
//	SSD1306_Command(0); // Column start address
//	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
//
//	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
	for (uint8_t i = 0; i < 8 ; i++)
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]
 8001786:	e02d      	b.n	80017e4 <SSD1306_Display+0x68>
		{
			osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <SSD1306_Display+0x78>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f04f 31ff 	mov.w	r1, #4294967295
 8001790:	4618      	mov	r0, r3
 8001792:	f00d fc99 	bl	800f0c8 <osMutexAcquire>
//	//		printf("TASK OLED I2C MUTEX is taken \n\r");
		    SSD1306_Command(SSD1306_PAGEADDR);
 8001796:	2022      	movs	r0, #34	; 0x22
 8001798:	f7ff ff10 	bl	80015bc <SSD1306_Command>
		    SSD1306_Command(i);                      // Page start address
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff ff0c 	bl	80015bc <SSD1306_Command>
			SSD1306_Command(i);                   // Page end (not really, but works here)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff ff08 	bl	80015bc <SSD1306_Command>
			SSD1306_Command(SSD1306_COLUMNADDR);
 80017ac:	2021      	movs	r0, #33	; 0x21
 80017ae:	f7ff ff05 	bl	80015bc <SSD1306_Command>
			SSD1306_Command(0); // Column start address
 80017b2:	2000      	movs	r0, #0
 80017b4:	f7ff ff02 	bl	80015bc <SSD1306_Command>
			SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 80017b8:	207f      	movs	r0, #127	; 0x7f
 80017ba:	f7ff feff 	bl	80015bc <SSD1306_Command>

			SSD1306_Data(buffer+(i * SSD1306_LCDWIDTH), SSD1306_LCDWIDTH);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	01db      	lsls	r3, r3, #7
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <SSD1306_Display+0x7c>)
 80017c6:	4413      	add	r3, r2
 80017c8:	2180      	movs	r1, #128	; 0x80
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff0e 	bl	80015ec <SSD1306_Data>
			osMutexRelease(MutexI2C2Handle);
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <SSD1306_Display+0x78>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f00d fcc2 	bl	800f15e <osMutexRelease>
	//		printf("TASK OLED I2C MUTEX is released \n\r");
			osThreadYield();
 80017da:	f00d f9d5 	bl	800eb88 <osThreadYield>
	for (uint8_t i = 0; i < 8 ; i++)
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	3301      	adds	r3, #1
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	2b07      	cmp	r3, #7
 80017e8:	d9ce      	bls.n	8001788 <SSD1306_Display+0xc>
		}
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	3708      	adds	r7, #8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000724 	.word	0x20000724
 80017f8:	2000021c 	.word	0x2000021c

080017fc <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001804:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <SSD1306_Init+0xac>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 800180a:	20ae      	movs	r0, #174	; 0xae
 800180c:	f7ff fed6 	bl	80015bc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 8001810:	20d5      	movs	r0, #213	; 0xd5
 8001812:	f7ff fed3 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(0x80);
 8001816:	2080      	movs	r0, #128	; 0x80
 8001818:	f7ff fed0 	bl	80015bc <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 800181c:	203f      	movs	r0, #63	; 0x3f
 800181e:	f7ff fecd 	bl	80015bc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 8001822:	20d3      	movs	r0, #211	; 0xd3
 8001824:	f7ff feca 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(0x00);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fec7 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800182e:	2040      	movs	r0, #64	; 0x40
 8001830:	f7ff fec4 	bl	80015bc <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001834:	208d      	movs	r0, #141	; 0x8d
 8001836:	f7ff fec1 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(0x14);
 800183a:	2014      	movs	r0, #20
 800183c:	f7ff febe 	bl	80015bc <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8001840:	2020      	movs	r0, #32
 8001842:	f7ff febb 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8001846:	2000      	movs	r0, #0
 8001848:	f7ff feb8 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 800184c:	20a1      	movs	r0, #161	; 0xa1
 800184e:	f7ff feb5 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8001852:	20c8      	movs	r0, #200	; 0xc8
 8001854:	f7ff feb2 	bl	80015bc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001858:	20da      	movs	r0, #218	; 0xda
 800185a:	f7ff feaf 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(0x12);
 800185e:	2012      	movs	r0, #18
 8001860:	f7ff feac 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8001864:	2081      	movs	r0, #129	; 0x81
 8001866:	f7ff fea9 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(0xFF);
 800186a:	20ff      	movs	r0, #255	; 0xff
 800186c:	f7ff fea6 	bl	80015bc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001870:	20d9      	movs	r0, #217	; 0xd9
 8001872:	f7ff fea3 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(0xF1);
 8001876:	20f1      	movs	r0, #241	; 0xf1
 8001878:	f7ff fea0 	bl	80015bc <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 800187c:	20db      	movs	r0, #219	; 0xdb
 800187e:	f7ff fe9d 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(0x40);
 8001882:	2040      	movs	r0, #64	; 0x40
 8001884:	f7ff fe9a 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001888:	20a4      	movs	r0, #164	; 0xa4
 800188a:	f7ff fe97 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 800188e:	20a6      	movs	r0, #166	; 0xa6
 8001890:	f7ff fe94 	bl	80015bc <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8001894:	202e      	movs	r0, #46	; 0x2e
 8001896:	f7ff fe91 	bl	80015bc <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 800189a:	20af      	movs	r0, #175	; 0xaf
 800189c:	f7ff fe8e 	bl	80015bc <SSD1306_Command>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000218 	.word	0x20000218

080018ac <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <BH1750_Init+0x34>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 80018ba:	f000 f813 	bl	80018e4 <BH1750_Reset>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d107      	bne.n	80018d4 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 80018c4:	2045      	movs	r0, #69	; 0x45
 80018c6:	f000 f859 	bl	800197c <BH1750_SetMtreg>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <BH1750_Init+0x28>
			return BH1750_OK;
 80018d0:	2300      	movs	r3, #0
 80018d2:	e000      	b.n	80018d6 <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	2000061c 	.word	0x2000061c

080018e4 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 80018ea:	2307      	movs	r3, #7
 80018ec:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <BH1750_Reset+0x30>)
 80018f0:	6818      	ldr	r0, [r3, #0]
 80018f2:	1dfa      	adds	r2, r7, #7
 80018f4:	230a      	movs	r3, #10
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	2146      	movs	r1, #70	; 0x46
 80018fc:	f005 f8f4 	bl	8006ae8 <HAL_I2C_Master_Transmit>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <BH1750_Reset+0x26>
		return BH1750_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <BH1750_Reset+0x28>

	return BH1750_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	2000061c 	.word	0x2000061c

08001918 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af02      	add	r7, sp, #8
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	b2db      	uxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	d106      	bne.n	800193a <BH1750_SetMode+0x22>
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	095b      	lsrs	r3, r3, #5
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <BH1750_SetMode+0x22>
 8001936:	2301      	movs	r3, #1
 8001938:	e018      	b.n	800196c <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	f003 030c 	and.w	r3, r3, #12
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <BH1750_SetMode+0x30>
 8001944:	2301      	movs	r3, #1
 8001946:	e011      	b.n	800196c <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8001948:	79fa      	ldrb	r2, [r7, #7]
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <BH1750_SetMode+0x5c>)
 800194c:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <BH1750_SetMode+0x60>)
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	1dfa      	adds	r2, r7, #7
 8001954:	230a      	movs	r3, #10
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	2146      	movs	r1, #70	; 0x46
 800195c:	f005 f8c4 	bl	8006ae8 <HAL_I2C_Master_Transmit>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <BH1750_SetMode+0x52>
		return BH1750_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	e000      	b.n	800196c <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 800196a:	2301      	movs	r3, #1
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000620 	.word	0x20000620
 8001978:	2000061c 	.word	0x2000061c

0800197c <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af02      	add	r7, sp, #8
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b1e      	cmp	r3, #30
 800198a:	d902      	bls.n	8001992 <BH1750_SetMtreg+0x16>
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d101      	bne.n	8001996 <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e037      	b.n	8001a06 <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 8001996:	4a1e      	ldr	r2, [pc, #120]	; (8001a10 <BH1750_SetMtreg+0x94>)
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	f003 031f 	and.w	r3, r3, #31
 80019b2:	b25b      	sxtb	r3, r3
 80019b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <BH1750_SetMtreg+0x98>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f107 020c 	add.w	r2, r7, #12
 80019c6:	230a      	movs	r3, #10
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2301      	movs	r3, #1
 80019cc:	2146      	movs	r1, #70	; 0x46
 80019ce:	f005 f88b 	bl	8006ae8 <HAL_I2C_Master_Transmit>
 80019d2:	4603      	mov	r3, r0
 80019d4:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e012      	b.n	8001a06 <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <BH1750_SetMtreg+0x98>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	f107 030c 	add.w	r3, r7, #12
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	230a      	movs	r3, #10
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2301      	movs	r3, #1
 80019f0:	2146      	movs	r1, #70	; 0x46
 80019f2:	f005 f879 	bl	8006ae8 <HAL_I2C_Master_Transmit>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000621 	.word	0x20000621
 8001a14:	2000061c 	.word	0x2000061c

08001a18 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 8001a20:	4b25      	ldr	r3, [pc, #148]	; (8001ab8 <BH1750_ReadLight+0xa0>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	f107 0208 	add.w	r2, r7, #8
 8001a28:	230a      	movs	r3, #10
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	2146      	movs	r1, #70	; 0x46
 8001a30:	f005 f958 	bl	8006ce4 <HAL_I2C_Master_Receive>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d138      	bne.n	8001aac <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 8001a3a:	7a3b      	ldrb	r3, [r7, #8]
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	7a7a      	ldrb	r2, [r7, #9]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4a:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001a4e:	4b1b      	ldr	r3, [pc, #108]	; (8001abc <BH1750_ReadLight+0xa4>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b45      	cmp	r3, #69	; 0x45
 8001a54:	d00f      	beq.n	8001a76 <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <BH1750_ReadLight+0xa4>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	ee07 3a90 	vmov	s15, r3
 8001a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a62:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001ac0 <BH1750_ReadLight+0xa8>
 8001a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a72:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <BH1750_ReadLight+0xac>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b21      	cmp	r3, #33	; 0x21
 8001a7c:	d003      	beq.n	8001a86 <BH1750_ReadLight+0x6e>
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <BH1750_ReadLight+0xac>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b11      	cmp	r3, #17
 8001a84:	d107      	bne.n	8001a96 <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 8001a86:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a8a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a92:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 8001a96:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a9a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001ac8 <BH1750_ReadLight+0xb0>
 8001a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e000      	b.n	8001aae <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001aac:	2301      	movs	r3, #1
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000061c 	.word	0x2000061c
 8001abc:	20000621 	.word	0x20000621
 8001ac0:	428a0000 	.word	0x428a0000
 8001ac4:	20000620 	.word	0x20000620
 8001ac8:	3f99999a 	.word	0x3f99999a

08001acc <BME280_Read8>:
int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9, h2, h4, h5;
uint16_t t1, p1;
int32_t t_fine;

uint8_t BME280_Read8(uint8_t addr)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af04      	add	r7, sp, #16
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, &tmp, 1, 10);
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <BME280_Read8+0x38>)
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	230a      	movs	r3, #10
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	f107 030f 	add.w	r3, r7, #15
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2301      	movs	r3, #1
 8001af2:	21ec      	movs	r1, #236	; 0xec
 8001af4:	f005 fc16 	bl	8007324 <HAL_I2C_Mem_Read>
	return tmp;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000624 	.word	0x20000624

08001b08 <BME280_Read16>:

uint16_t BME280_Read16(uint8_t addr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af04      	add	r7, sp, #16
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 2, 10);
 8001b12:	4b0d      	ldr	r3, [pc, #52]	; (8001b48 <BME280_Read16+0x40>)
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	2302      	movs	r3, #2
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	21ec      	movs	r1, #236	; 0xec
 8001b2c:	f005 fbfa 	bl	8007324 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
 8001b32:	021b      	lsls	r3, r3, #8
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	7b7b      	ldrb	r3, [r7, #13]
 8001b38:	b21b      	sxth	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	b29b      	uxth	r3, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000624 	.word	0x20000624

08001b4c <BME280_Read16LE>:

uint16_t BME280_Read16LE(uint8_t addr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BME280_Read16(addr);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ffd5 	bl	8001b08 <BME280_Read16>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001b62:	89fb      	ldrh	r3, [r7, #14]
 8001b64:	0a1b      	lsrs	r3, r3, #8
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	89fb      	ldrh	r3, [r7, #14]
 8001b6c:	021b      	lsls	r3, r3, #8
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	4313      	orrs	r3, r2
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	b29b      	uxth	r3, r3
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <BME280_Write8>:

void BME280_Write8(uint8_t address, uint8_t data)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	4603      	mov	r3, r0
 8001b88:	460a      	mov	r2, r1
 8001b8a:	71fb      	strb	r3, [r7, #7]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <BME280_Write8+0x34>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	230a      	movs	r3, #10
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	1dbb      	adds	r3, r7, #6
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	21ec      	movs	r1, #236	; 0xec
 8001ba8:	f005 fac2 	bl	8007130 <HAL_I2C_Mem_Write>
}
 8001bac:	bf00      	nop
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000624 	.word	0x20000624

08001bb8 <BME280_Read24>:

uint32_t BME280_Read24(uint8_t addr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af04      	add	r7, sp, #16
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 3, 10);
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <BME280_Read24+0x40>)
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	230a      	movs	r3, #10
 8001bcc:	9302      	str	r3, [sp, #8]
 8001bce:	2303      	movs	r3, #3
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2301      	movs	r3, #1
 8001bda:	21ec      	movs	r1, #236	; 0xec
 8001bdc:	f005 fba2 	bl	8007324 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001be0:	7b3b      	ldrb	r3, [r7, #12]
 8001be2:	041a      	lsls	r2, r3, #16
 8001be4:	7b7b      	ldrb	r3, [r7, #13]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	4313      	orrs	r3, r2
 8001bea:	7bba      	ldrb	r2, [r7, #14]
 8001bec:	4313      	orrs	r3, r2
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000624 	.word	0x20000624

08001bfc <BME280_IsReadingCalibration>:
uint8_t BME280_IsReadingCalibration(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
	uint8_t Status = BME280_Read8(BME280_STATUS);
 8001c02:	20f3      	movs	r0, #243	; 0xf3
 8001c04:	f7ff ff62 	bl	8001acc <BME280_Read8>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	71fb      	strb	r3, [r7, #7]

	return ((Status & 1) != 0);
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf14      	ite	ne
 8001c16:	2301      	movne	r3, #1
 8001c18:	2300      	moveq	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <BME280_SetConfig>:

void BME280_SetConfig(uint8_t standby_time, uint8_t filter)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	71fb      	strb	r3, [r7, #7]
 8001c30:	4613      	mov	r3, r2
 8001c32:	71bb      	strb	r3, [r7, #6]
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	015b      	lsls	r3, r3, #5
 8001c38:	b25a      	sxtb	r2, r3
 8001c3a:	79bb      	ldrb	r3, [r7, #6]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	f003 031c 	and.w	r3, r3, #28
 8001c44:	b25b      	sxtb	r3, r3
 8001c46:	4313      	orrs	r3, r2
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f023 0303 	bic.w	r3, r3, #3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	20f5      	movs	r0, #245	; 0xf5
 8001c56:	f7ff ff93 	bl	8001b80 <BME280_Write8>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <BME280_Init>:


void BME280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t huminidity_oversampling, uint8_t mode)
{
 8001c64:	b590      	push	{r4, r7, lr}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	4611      	mov	r1, r2
 8001c70:	461a      	mov	r2, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	70fb      	strb	r3, [r7, #3]
 8001c76:	460b      	mov	r3, r1
 8001c78:	70bb      	strb	r3, [r7, #2]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8001c7e:	4a8f      	ldr	r2, [pc, #572]	; (8001ebc <BME280_Init+0x258>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6013      	str	r3, [r2, #0]
	uint8_t HumReg, i;

		if (mode > BME280_NORMALMODE)
 8001c84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	d902      	bls.n	8001c92 <BME280_Init+0x2e>
		    mode = BME280_NORMALMODE;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	f887 3020 	strb.w	r3, [r7, #32]
		_mode = mode;
 8001c92:	4a8b      	ldr	r2, [pc, #556]	; (8001ec0 <BME280_Init+0x25c>)
 8001c94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c98:	7013      	strb	r3, [r2, #0]
		if(mode == BME280_FORCEDMODE)
 8001c9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d102      	bne.n	8001ca8 <BME280_Init+0x44>
			mode = BME280_SLEEPMODE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 3020 	strb.w	r3, [r7, #32]

		if (temperature_resolution > BME280_TEMPERATURE_20BIT)
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	2b05      	cmp	r3, #5
 8001cac:	d901      	bls.n	8001cb2 <BME280_Init+0x4e>
			temperature_resolution = BME280_TEMPERATURE_20BIT;
 8001cae:	2305      	movs	r3, #5
 8001cb0:	70fb      	strb	r3, [r7, #3]
		_temperature_res = temperature_resolution;
 8001cb2:	4a84      	ldr	r2, [pc, #528]	; (8001ec4 <BME280_Init+0x260>)
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	7013      	strb	r3, [r2, #0]

		if (pressure_oversampling > BME280_PRESSURE_ULTRAHIGHRES)
 8001cb8:	78bb      	ldrb	r3, [r7, #2]
 8001cba:	2b05      	cmp	r3, #5
 8001cbc:	d901      	bls.n	8001cc2 <BME280_Init+0x5e>
			pressure_oversampling = BME280_PRESSURE_ULTRAHIGHRES;
 8001cbe:	2305      	movs	r3, #5
 8001cc0:	70bb      	strb	r3, [r7, #2]
		_pressure_oversampling = pressure_oversampling;
 8001cc2:	4a81      	ldr	r2, [pc, #516]	; (8001ec8 <BME280_Init+0x264>)
 8001cc4:	78bb      	ldrb	r3, [r7, #2]
 8001cc6:	7013      	strb	r3, [r2, #0]

		if (huminidity_oversampling > BME280_HUMINIDITY_ULTRAHIGH)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b05      	cmp	r3, #5
 8001ccc:	d901      	bls.n	8001cd2 <BME280_Init+0x6e>
			huminidity_oversampling = BME280_HUMINIDITY_ULTRAHIGH;
 8001cce:	2305      	movs	r3, #5
 8001cd0:	707b      	strb	r3, [r7, #1]
		_huminidity_oversampling = huminidity_oversampling;
 8001cd2:	4a7e      	ldr	r2, [pc, #504]	; (8001ecc <BME280_Init+0x268>)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	7013      	strb	r3, [r2, #0]

		while(BME280_Read8(BME280_CHIPID) != 0x60);
 8001cd8:	bf00      	nop
 8001cda:	20d0      	movs	r0, #208	; 0xd0
 8001cdc:	f7ff fef6 	bl	8001acc <BME280_Read8>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b60      	cmp	r3, #96	; 0x60
 8001ce4:	d1f9      	bne.n	8001cda <BME280_Init+0x76>

		BME280_Write8(BME280_SOFTRESET, 0xB6);
 8001ce6:	21b6      	movs	r1, #182	; 0xb6
 8001ce8:	20e0      	movs	r0, #224	; 0xe0
 8001cea:	f7ff ff49 	bl	8001b80 <BME280_Write8>

		for(i = 0; i<30; i++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
 8001cf2:	e005      	b.n	8001d00 <BME280_Init+0x9c>
			HAL_Delay(10); // Wait  300 msfor wake up
 8001cf4:	200a      	movs	r0, #10
 8001cf6:	f004 f997 	bl	8006028 <HAL_Delay>
		for(i = 0; i<30; i++)
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	2b1d      	cmp	r3, #29
 8001d04:	d9f6      	bls.n	8001cf4 <BME280_Init+0x90>

		while(BME280_IsReadingCalibration())
 8001d06:	e00b      	b.n	8001d20 <BME280_Init+0xbc>
			for(i = 0; i<10; i++)
 8001d08:	2300      	movs	r3, #0
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e005      	b.n	8001d1a <BME280_Init+0xb6>
				HAL_Delay(1);
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f004 f98a 	bl	8006028 <HAL_Delay>
			for(i = 0; i<10; i++)
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	3301      	adds	r3, #1
 8001d18:	73fb      	strb	r3, [r7, #15]
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	d9f6      	bls.n	8001d0e <BME280_Init+0xaa>
		while(BME280_IsReadingCalibration())
 8001d20:	f7ff ff6c 	bl	8001bfc <BME280_IsReadingCalibration>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ee      	bne.n	8001d08 <BME280_Init+0xa4>

		/* read calibration data */
		t1 = BME280_Read16LE(BME280_DIG_T1);
 8001d2a:	2088      	movs	r0, #136	; 0x88
 8001d2c:	f7ff ff0e 	bl	8001b4c <BME280_Read16LE>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <BME280_Init+0x26c>)
 8001d36:	801a      	strh	r2, [r3, #0]
		t2 = BME280_Read16LE(BME280_DIG_T2);
 8001d38:	208a      	movs	r0, #138	; 0x8a
 8001d3a:	f7ff ff07 	bl	8001b4c <BME280_Read16LE>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	b21a      	sxth	r2, r3
 8001d42:	4b64      	ldr	r3, [pc, #400]	; (8001ed4 <BME280_Init+0x270>)
 8001d44:	801a      	strh	r2, [r3, #0]
		t3 = BME280_Read16LE(BME280_DIG_T3);
 8001d46:	208c      	movs	r0, #140	; 0x8c
 8001d48:	f7ff ff00 	bl	8001b4c <BME280_Read16LE>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b21a      	sxth	r2, r3
 8001d50:	4b61      	ldr	r3, [pc, #388]	; (8001ed8 <BME280_Init+0x274>)
 8001d52:	801a      	strh	r2, [r3, #0]

		p1 = BME280_Read16LE(BME280_DIG_P1);
 8001d54:	208e      	movs	r0, #142	; 0x8e
 8001d56:	f7ff fef9 	bl	8001b4c <BME280_Read16LE>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b5f      	ldr	r3, [pc, #380]	; (8001edc <BME280_Init+0x278>)
 8001d60:	801a      	strh	r2, [r3, #0]
		p2 = BME280_Read16LE(BME280_DIG_P2);
 8001d62:	2090      	movs	r0, #144	; 0x90
 8001d64:	f7ff fef2 	bl	8001b4c <BME280_Read16LE>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <BME280_Init+0x27c>)
 8001d6e:	801a      	strh	r2, [r3, #0]
		p3 = BME280_Read16LE(BME280_DIG_P3);
 8001d70:	2092      	movs	r0, #146	; 0x92
 8001d72:	f7ff feeb 	bl	8001b4c <BME280_Read16LE>
 8001d76:	4603      	mov	r3, r0
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	4b5a      	ldr	r3, [pc, #360]	; (8001ee4 <BME280_Init+0x280>)
 8001d7c:	801a      	strh	r2, [r3, #0]
		p4 = BME280_Read16LE(BME280_DIG_P4);
 8001d7e:	2094      	movs	r0, #148	; 0x94
 8001d80:	f7ff fee4 	bl	8001b4c <BME280_Read16LE>
 8001d84:	4603      	mov	r3, r0
 8001d86:	b21a      	sxth	r2, r3
 8001d88:	4b57      	ldr	r3, [pc, #348]	; (8001ee8 <BME280_Init+0x284>)
 8001d8a:	801a      	strh	r2, [r3, #0]
		p5 = BME280_Read16LE(BME280_DIG_P5);
 8001d8c:	2096      	movs	r0, #150	; 0x96
 8001d8e:	f7ff fedd 	bl	8001b4c <BME280_Read16LE>
 8001d92:	4603      	mov	r3, r0
 8001d94:	b21a      	sxth	r2, r3
 8001d96:	4b55      	ldr	r3, [pc, #340]	; (8001eec <BME280_Init+0x288>)
 8001d98:	801a      	strh	r2, [r3, #0]
		p6 = BME280_Read16LE(BME280_DIG_P6);
 8001d9a:	2098      	movs	r0, #152	; 0x98
 8001d9c:	f7ff fed6 	bl	8001b4c <BME280_Read16LE>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b21a      	sxth	r2, r3
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <BME280_Init+0x28c>)
 8001da6:	801a      	strh	r2, [r3, #0]
		p7 = BME280_Read16LE(BME280_DIG_P7);
 8001da8:	209a      	movs	r0, #154	; 0x9a
 8001daa:	f7ff fecf 	bl	8001b4c <BME280_Read16LE>
 8001dae:	4603      	mov	r3, r0
 8001db0:	b21a      	sxth	r2, r3
 8001db2:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <BME280_Init+0x290>)
 8001db4:	801a      	strh	r2, [r3, #0]
		p8 = BME280_Read16LE(BME280_DIG_P8);
 8001db6:	209c      	movs	r0, #156	; 0x9c
 8001db8:	f7ff fec8 	bl	8001b4c <BME280_Read16LE>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	b21a      	sxth	r2, r3
 8001dc0:	4b4d      	ldr	r3, [pc, #308]	; (8001ef8 <BME280_Init+0x294>)
 8001dc2:	801a      	strh	r2, [r3, #0]
		p9 = BME280_Read16LE(BME280_DIG_P9);
 8001dc4:	209e      	movs	r0, #158	; 0x9e
 8001dc6:	f7ff fec1 	bl	8001b4c <BME280_Read16LE>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	4b4b      	ldr	r3, [pc, #300]	; (8001efc <BME280_Init+0x298>)
 8001dd0:	801a      	strh	r2, [r3, #0]

		h1 = BME280_Read8(BME280_DIG_H1);
 8001dd2:	20a1      	movs	r0, #161	; 0xa1
 8001dd4:	f7ff fe7a 	bl	8001acc <BME280_Read8>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b48      	ldr	r3, [pc, #288]	; (8001f00 <BME280_Init+0x29c>)
 8001dde:	701a      	strb	r2, [r3, #0]
		h2 = BME280_Read16LE(BME280_DIG_H2);
 8001de0:	20e1      	movs	r0, #225	; 0xe1
 8001de2:	f7ff feb3 	bl	8001b4c <BME280_Read16LE>
 8001de6:	4603      	mov	r3, r0
 8001de8:	b21a      	sxth	r2, r3
 8001dea:	4b46      	ldr	r3, [pc, #280]	; (8001f04 <BME280_Init+0x2a0>)
 8001dec:	801a      	strh	r2, [r3, #0]
		h3 = BME280_Read8(BME280_DIG_H3);
 8001dee:	20e3      	movs	r0, #227	; 0xe3
 8001df0:	f7ff fe6c 	bl	8001acc <BME280_Read8>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <BME280_Init+0x2a4>)
 8001dfa:	701a      	strb	r2, [r3, #0]
		h4 = ((BME280_Read8(BME280_DIG_H4) << 4 ) | (BME280_Read8(BME280_DIG_H4+1) & 0xF));
 8001dfc:	20e4      	movs	r0, #228	; 0xe4
 8001dfe:	f7ff fe65 	bl	8001acc <BME280_Read8>
 8001e02:	4603      	mov	r3, r0
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	b21c      	sxth	r4, r3
 8001e08:	20e5      	movs	r0, #229	; 0xe5
 8001e0a:	f7ff fe5f 	bl	8001acc <BME280_Read8>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b21b      	sxth	r3, r3
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	b21b      	sxth	r3, r3
 8001e18:	4323      	orrs	r3, r4
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	4b3b      	ldr	r3, [pc, #236]	; (8001f0c <BME280_Init+0x2a8>)
 8001e1e:	801a      	strh	r2, [r3, #0]
		h5 = ((BME280_Read8(BME280_DIG_H5+1) << 4) | (BME280_Read8(BME280_DIG_H5) >> 4));
 8001e20:	20e6      	movs	r0, #230	; 0xe6
 8001e22:	f7ff fe53 	bl	8001acc <BME280_Read8>
 8001e26:	4603      	mov	r3, r0
 8001e28:	011b      	lsls	r3, r3, #4
 8001e2a:	b21c      	sxth	r4, r3
 8001e2c:	20e5      	movs	r0, #229	; 0xe5
 8001e2e:	f7ff fe4d 	bl	8001acc <BME280_Read8>
 8001e32:	4603      	mov	r3, r0
 8001e34:	091b      	lsrs	r3, r3, #4
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	b21b      	sxth	r3, r3
 8001e3a:	4323      	orrs	r3, r4
 8001e3c:	b21a      	sxth	r2, r3
 8001e3e:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <BME280_Init+0x2ac>)
 8001e40:	801a      	strh	r2, [r3, #0]
		h6 = (int8_t)BME280_Read8(BME280_DIG_H6);
 8001e42:	20e7      	movs	r0, #231	; 0xe7
 8001e44:	f7ff fe42 	bl	8001acc <BME280_Read8>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b25a      	sxtb	r2, r3
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <BME280_Init+0x2b0>)
 8001e4e:	701a      	strb	r2, [r3, #0]

		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001e50:	20f2      	movs	r0, #242	; 0xf2
 8001e52:	f7ff fe3b 	bl	8001acc <BME280_Read8>
 8001e56:	4603      	mov	r3, r0
 8001e58:	73bb      	strb	r3, [r7, #14]
		HumReg &= 0xF8;
 8001e5a:	7bbb      	ldrb	r3, [r7, #14]
 8001e5c:	f023 0307 	bic.w	r3, r3, #7
 8001e60:	73bb      	strb	r3, [r7, #14]
		HumReg |= _huminidity_oversampling;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <BME280_Init+0x268>)
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	7bbb      	ldrb	r3, [r7, #14]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_HUM_CONTROL, HumReg);
 8001e6c:	7bbb      	ldrb	r3, [r7, #14]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	20f2      	movs	r0, #242	; 0xf2
 8001e72:	f7ff fe85 	bl	8001b80 <BME280_Write8>
		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001e76:	20f2      	movs	r0, #242	; 0xf2
 8001e78:	f7ff fe28 	bl	8001acc <BME280_Read8>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	015b      	lsls	r3, r3, #5
 8001e84:	b25a      	sxtb	r2, r3
 8001e86:	78bb      	ldrb	r3, [r7, #2]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	b25b      	sxtb	r3, r3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	b25a      	sxtb	r2, r3
 8001e90:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	20f4      	movs	r0, #244	; 0xf4
 8001e9e:	f7ff fe6f 	bl	8001b80 <BME280_Write8>

		if(mode == BME280_NORMALMODE)
 8001ea2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ea6:	2b03      	cmp	r3, #3
 8001ea8:	d103      	bne.n	8001eb2 <BME280_Init+0x24e>
		{
			BME280_SetConfig(BME280_STANDBY_MS_0_5, BME280_FILTER_OFF);
 8001eaa:	2100      	movs	r1, #0
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff feb9 	bl	8001c24 <BME280_SetConfig>
		}
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000624 	.word	0x20000624
 8001ec0:	2000062b 	.word	0x2000062b
 8001ec4:	20000628 	.word	0x20000628
 8001ec8:	20000629 	.word	0x20000629
 8001ecc:	2000062a 	.word	0x2000062a
 8001ed0:	2000064a 	.word	0x2000064a
 8001ed4:	20000630 	.word	0x20000630
 8001ed8:	20000632 	.word	0x20000632
 8001edc:	2000064c 	.word	0x2000064c
 8001ee0:	20000634 	.word	0x20000634
 8001ee4:	20000636 	.word	0x20000636
 8001ee8:	20000638 	.word	0x20000638
 8001eec:	2000063a 	.word	0x2000063a
 8001ef0:	2000063c 	.word	0x2000063c
 8001ef4:	2000063e 	.word	0x2000063e
 8001ef8:	20000640 	.word	0x20000640
 8001efc:	20000642 	.word	0x20000642
 8001f00:	2000062c 	.word	0x2000062c
 8001f04:	20000644 	.word	0x20000644
 8001f08:	2000062d 	.word	0x2000062d
 8001f0c:	20000646 	.word	0x20000646
 8001f10:	20000648 	.word	0x20000648
 8001f14:	2000062e 	.word	0x2000062e

08001f18 <BME280_ReadTemperature>:

float BME280_ReadTemperature(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BME280_FORCEDMODE)
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <BME280_ReadTemperature+0x104>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d12b      	bne.n	8001f7e <BME280_ReadTemperature+0x66>
  {
	  uint8_t mode;
	  uint8_t ctrl = BME280_Read8(BME280_CONTROL);
 8001f26:	20f4      	movs	r0, #244	; 0xf4
 8001f28:	f7ff fdd0 	bl	8001acc <BME280_Read8>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BME280_FORCEDMODE;
 8001f38:	7dfb      	ldrb	r3, [r7, #23]
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	75fb      	strb	r3, [r7, #23]
	  BME280_Write8(BME280_CONTROL, ctrl);
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	4619      	mov	r1, r3
 8001f44:	20f4      	movs	r0, #244	; 0xf4
 8001f46:	f7ff fe1b 	bl	8001b80 <BME280_Write8>

	  mode = BME280_Read8(BME280_CONTROL); 	// Read written mode
 8001f4a:	20f4      	movs	r0, #244	; 0xf4
 8001f4c:	f7ff fdbe 	bl	8001acc <BME280_Read8>
 8001f50:	4603      	mov	r3, r0
 8001f52:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001f54:	7dbb      	ldrb	r3, [r7, #22]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	75bb      	strb	r3, [r7, #22]

	  if(mode == BME280_FORCEDMODE)
 8001f5c:	7dbb      	ldrb	r3, [r7, #22]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d10d      	bne.n	8001f7e <BME280_ReadTemperature+0x66>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BME280_Read8(BME280_CONTROL);
 8001f62:	20f4      	movs	r0, #244	; 0xf4
 8001f64:	f7ff fdb2 	bl	8001acc <BME280_Read8>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001f6c:	7dbb      	ldrb	r3, [r7, #22]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	75bb      	strb	r3, [r7, #22]
			  if(mode == BME280_SLEEPMODE)
 8001f74:	7dbb      	ldrb	r3, [r7, #22]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d000      	beq.n	8001f7c <BME280_ReadTemperature+0x64>
			  mode = BME280_Read8(BME280_CONTROL);
 8001f7a:	e7f2      	b.n	8001f62 <BME280_ReadTemperature+0x4a>
				  break;
 8001f7c:	bf00      	nop
		  }
	  }
  }

  int32_t adc_T = BME280_Read24(BME280_TEMPDATA);
 8001f7e:	20fa      	movs	r0, #250	; 0xfa
 8001f80:	f7ff fe1a 	bl	8001bb8 <BME280_Read24>
 8001f84:	4603      	mov	r3, r0
 8001f86:	613b      	str	r3, [r7, #16]
  if (adc_T == 0x800000)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f8e:	d102      	bne.n	8001f96 <BME280_ReadTemperature+0x7e>
	  return -99;
 8001f90:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002020 <BME280_ReadTemperature+0x108>
 8001f94:	e03b      	b.n	800200e <BME280_ReadTemperature+0xf6>

  adc_T >>= 4;
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	111b      	asrs	r3, r3, #4
 8001f9a:	613b      	str	r3, [r7, #16]

  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	10da      	asrs	r2, r3, #3
 8001fa0:	4b20      	ldr	r3, [pc, #128]	; (8002024 <BME280_ReadTemperature+0x10c>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	1ad3      	subs	r3, r2, r3
		  ((int32_t)t2)) >> 11;
 8001fa8:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <BME280_ReadTemperature+0x110>)
 8001faa:	f9b2 2000 	ldrsh.w	r2, [r2]
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	12db      	asrs	r3, r3, #11
 8001fb4:	60fb      	str	r3, [r7, #12]

  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	111b      	asrs	r3, r3, #4
 8001fba:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <BME280_ReadTemperature+0x10c>)
 8001fbc:	8812      	ldrh	r2, [r2, #0]
 8001fbe:	1a9b      	subs	r3, r3, r2
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	1112      	asrs	r2, r2, #4
 8001fc4:	4917      	ldr	r1, [pc, #92]	; (8002024 <BME280_ReadTemperature+0x10c>)
 8001fc6:	8809      	ldrh	r1, [r1, #0]
 8001fc8:	1a52      	subs	r2, r2, r1
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001fce:	131b      	asrs	r3, r3, #12
		  ((int32_t)t3)) >> 14;
 8001fd0:	4a16      	ldr	r2, [pc, #88]	; (800202c <BME280_ReadTemperature+0x114>)
 8001fd2:	f9b2 2000 	ldrsh.w	r2, [r2]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001fd6:	fb02 f303 	mul.w	r3, r2, r3
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001fda:	139b      	asrs	r3, r3, #14
 8001fdc:	60bb      	str	r3, [r7, #8]

  t_fine = var1 + var2;
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <BME280_ReadTemperature+0x118>)
 8001fe6:	6013      	str	r3, [r2, #0]

  float T  = (t_fine * 5 + 128) >> 8;
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <BME280_ReadTemperature+0x118>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3380      	adds	r3, #128	; 0x80
 8001ff4:	121b      	asrs	r3, r3, #8
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ffe:	edc7 7a01 	vstr	s15, [r7, #4]
  return T/100;
 8002002:	edd7 7a01 	vldr	s15, [r7, #4]
 8002006:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8002034 <BME280_ReadTemperature+0x11c>
 800200a:	ee87 7aa6 	vdiv.f32	s14, s15, s13

  return -99;
}
 800200e:	eef0 7a47 	vmov.f32	s15, s14
 8002012:	eeb0 0a67 	vmov.f32	s0, s15
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	2000062b 	.word	0x2000062b
 8002020:	c2c60000 	.word	0xc2c60000
 8002024:	2000064a 	.word	0x2000064a
 8002028:	20000630 	.word	0x20000630
 800202c:	20000632 	.word	0x20000632
 8002030:	20000650 	.word	0x20000650
 8002034:	42c80000 	.word	0x42c80000

08002038 <BME280_ReadTemperatureAndPressureAndHuminidity>:
	  float h = (v_x1_u32r>>12);
	  return  h / 1024.0;
}

uint8_t BME280_ReadTemperatureAndPressureAndHuminidity(float *temperature, int32_t *pressure, float *huminidity)
{
 8002038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800203c:	b0d2      	sub	sp, #328	; 0x148
 800203e:	af00      	add	r7, sp, #0
 8002040:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8002044:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8002048:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	*temperature = BME280_ReadTemperature();
 800204c:	f7ff ff64 	bl	8001f18 <BME280_ReadTemperature>
 8002050:	eef0 7a40 	vmov.f32	s15, s0
 8002054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002058:	edc3 7a00 	vstr	s15, [r3]

	if(*temperature == -99)
 800205c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8002334 <BME280_ReadTemperatureAndPressureAndHuminidity+0x2fc>
 8002068:	eef4 7a47 	vcmp.f32	s15, s14
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	d101      	bne.n	8002076 <BME280_ReadTemperatureAndPressureAndHuminidity+0x3e>
	  return -1;
 8002072:	23ff      	movs	r3, #255	; 0xff
 8002074:	e33f      	b.n	80026f6 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 8002076:	20f7      	movs	r0, #247	; 0xf7
 8002078:	f7ff fd9e 	bl	8001bb8 <BME280_Read24>
 800207c:	4603      	mov	r3, r0
 800207e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	adc_P >>= 4;
 8002082:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002086:	111b      	asrs	r3, r3, #4
 8002088:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	var1 = ((int64_t)t_fine) - 128000;
 800208c:	4baa      	ldr	r3, [pc, #680]	; (8002338 <BME280_ReadTemperatureAndPressureAndHuminidity+0x300>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	17da      	asrs	r2, r3, #31
 8002092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002096:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800209a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800209e:	460b      	mov	r3, r1
 80020a0:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80020a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a6:	4613      	mov	r3, r2
 80020a8:	f143 33ff 	adc.w	r3, r3, #4294967295
 80020ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80020b2:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = var1 * var1 * (int64_t)p6;
 80020b6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80020ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020be:	fb03 f102 	mul.w	r1, r3, r2
 80020c2:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80020c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	18ca      	adds	r2, r1, r3
 80020d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80020d4:	fba3 4503 	umull	r4, r5, r3, r3
 80020d8:	1953      	adds	r3, r2, r5
 80020da:	461d      	mov	r5, r3
 80020dc:	4b97      	ldr	r3, [pc, #604]	; (800233c <BME280_ReadTemperatureAndPressureAndHuminidity+0x304>)
 80020de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	17da      	asrs	r2, r3, #31
 80020e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80020ea:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80020ee:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80020f2:	4603      	mov	r3, r0
 80020f4:	fb03 f205 	mul.w	r2, r3, r5
 80020f8:	460b      	mov	r3, r1
 80020fa:	fb04 f303 	mul.w	r3, r4, r3
 80020fe:	4413      	add	r3, r2
 8002100:	4602      	mov	r2, r0
 8002102:	fba4 8902 	umull	r8, r9, r4, r2
 8002106:	444b      	add	r3, r9
 8002108:	4699      	mov	r9, r3
 800210a:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 800210e:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8002112:	4b8b      	ldr	r3, [pc, #556]	; (8002340 <BME280_ReadTemperatureAndPressureAndHuminidity+0x308>)
 8002114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002118:	b21b      	sxth	r3, r3
 800211a:	17da      	asrs	r2, r3, #31
 800211c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002120:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002124:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002128:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800212c:	462a      	mov	r2, r5
 800212e:	fb02 f203 	mul.w	r2, r2, r3
 8002132:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002136:	4621      	mov	r1, r4
 8002138:	fb01 f303 	mul.w	r3, r1, r3
 800213c:	441a      	add	r2, r3
 800213e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002142:	4621      	mov	r1, r4
 8002144:	fba3 ab01 	umull	sl, fp, r3, r1
 8002148:	eb02 030b 	add.w	r3, r2, fp
 800214c:	469b      	mov	fp, r3
 800214e:	f04f 0000 	mov.w	r0, #0
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800215a:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800215e:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8002162:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002166:	1814      	adds	r4, r2, r0
 8002168:	643c      	str	r4, [r7, #64]	; 0x40
 800216a:	414b      	adcs	r3, r1
 800216c:	647b      	str	r3, [r7, #68]	; 0x44
 800216e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002172:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var2 = var2 + (((int64_t)p4)<<35);
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <BME280_ReadTemperatureAndPressureAndHuminidity+0x30c>)
 8002178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217c:	b21b      	sxth	r3, r3
 800217e:	17da      	asrs	r2, r3, #31
 8002180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002184:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002188:	f04f 0000 	mov.w	r0, #0
 800218c:	f04f 0100 	mov.w	r1, #0
 8002190:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002194:	00d9      	lsls	r1, r3, #3
 8002196:	2000      	movs	r0, #0
 8002198:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800219c:	1814      	adds	r4, r2, r0
 800219e:	63bc      	str	r4, [r7, #56]	; 0x38
 80021a0:	414b      	adcs	r3, r1
 80021a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021a4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80021a8:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80021ac:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80021b0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021b4:	fb03 f102 	mul.w	r1, r3, r2
 80021b8:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80021bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021c0:	fb02 f303 	mul.w	r3, r2, r3
 80021c4:	18ca      	adds	r2, r1, r3
 80021c6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021ca:	fba3 1303 	umull	r1, r3, r3, r3
 80021ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021d2:	460b      	mov	r3, r1
 80021d4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80021d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80021dc:	18d3      	adds	r3, r2, r3
 80021de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021e2:	4b59      	ldr	r3, [pc, #356]	; (8002348 <BME280_ReadTemperatureAndPressureAndHuminidity+0x310>)
 80021e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e8:	b21b      	sxth	r3, r3
 80021ea:	17da      	asrs	r2, r3, #31
 80021ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80021f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80021f4:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80021f8:	462b      	mov	r3, r5
 80021fa:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 80021fe:	4642      	mov	r2, r8
 8002200:	fb02 f203 	mul.w	r2, r2, r3
 8002204:	464b      	mov	r3, r9
 8002206:	4621      	mov	r1, r4
 8002208:	fb01 f303 	mul.w	r3, r1, r3
 800220c:	4413      	add	r3, r2
 800220e:	4622      	mov	r2, r4
 8002210:	4641      	mov	r1, r8
 8002212:	fba2 1201 	umull	r1, r2, r2, r1
 8002216:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800221a:	460a      	mov	r2, r1
 800221c:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8002220:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8002224:	4413      	add	r3, r2
 8002226:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800222a:	f04f 0000 	mov.w	r0, #0
 800222e:	f04f 0100 	mov.w	r1, #0
 8002232:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8002236:	4623      	mov	r3, r4
 8002238:	0a18      	lsrs	r0, r3, #8
 800223a:	462b      	mov	r3, r5
 800223c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002240:	462b      	mov	r3, r5
 8002242:	1219      	asrs	r1, r3, #8
			((var1 * (int64_t)p2)<<12);
 8002244:	4b41      	ldr	r3, [pc, #260]	; (800234c <BME280_ReadTemperatureAndPressureAndHuminidity+0x314>)
 8002246:	f9b3 3000 	ldrsh.w	r3, [r3]
 800224a:	b21b      	sxth	r3, r3
 800224c:	17da      	asrs	r2, r3, #31
 800224e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002252:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002256:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800225a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800225e:	464a      	mov	r2, r9
 8002260:	fb02 f203 	mul.w	r2, r2, r3
 8002264:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002268:	4644      	mov	r4, r8
 800226a:	fb04 f303 	mul.w	r3, r4, r3
 800226e:	441a      	add	r2, r3
 8002270:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002274:	4644      	mov	r4, r8
 8002276:	fba3 4304 	umull	r4, r3, r3, r4
 800227a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800227e:	4623      	mov	r3, r4
 8002280:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002288:	18d3      	adds	r3, r2, r3
 800228a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800228e:	f04f 0200 	mov.w	r2, #0
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800229a:	464c      	mov	r4, r9
 800229c:	0323      	lsls	r3, r4, #12
 800229e:	4644      	mov	r4, r8
 80022a0:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80022a4:	4644      	mov	r4, r8
 80022a6:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 80022a8:	1884      	adds	r4, r0, r2
 80022aa:	633c      	str	r4, [r7, #48]	; 0x30
 80022ac:	eb41 0303 	adc.w	r3, r1, r3
 80022b0:	637b      	str	r3, [r7, #52]	; 0x34
 80022b2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80022b6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 80022ba:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80022be:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80022c2:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 80022c6:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 80022ca:	4b21      	ldr	r3, [pc, #132]	; (8002350 <BME280_ReadTemperatureAndPressureAndHuminidity+0x318>)
 80022cc:	881b      	ldrh	r3, [r3, #0]
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	2200      	movs	r2, #0
 80022d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80022da:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80022de:	462b      	mov	r3, r5
 80022e0:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80022e4:	4642      	mov	r2, r8
 80022e6:	fb02 f203 	mul.w	r2, r2, r3
 80022ea:	464b      	mov	r3, r9
 80022ec:	4621      	mov	r1, r4
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	4622      	mov	r2, r4
 80022f6:	4641      	mov	r1, r8
 80022f8:	fba2 1201 	umull	r1, r2, r2, r1
 80022fc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002300:	460a      	mov	r2, r1
 8002302:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8002306:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800230a:	4413      	add	r3, r2
 800230c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800231c:	4629      	mov	r1, r5
 800231e:	104a      	asrs	r2, r1, #1
 8002320:	4629      	mov	r1, r5
 8002322:	17cb      	asrs	r3, r1, #31
 8002324:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

	if (var1 == 0) {
 8002328:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800232c:	4313      	orrs	r3, r2
 800232e:	d111      	bne.n	8002354 <BME280_ReadTemperatureAndPressureAndHuminidity+0x31c>
		return 0;  // avoid exception caused by division by zero
 8002330:	2300      	movs	r3, #0
 8002332:	e1e0      	b.n	80026f6 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>
 8002334:	c2c60000 	.word	0xc2c60000
 8002338:	20000650 	.word	0x20000650
 800233c:	2000063c 	.word	0x2000063c
 8002340:	2000063a 	.word	0x2000063a
 8002344:	20000638 	.word	0x20000638
 8002348:	20000636 	.word	0x20000636
 800234c:	20000634 	.word	0x20000634
 8002350:	2000064c 	.word	0x2000064c
	}
	p = 1048576 - adc_P;
 8002354:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002358:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800235c:	17da      	asrs	r2, r3, #31
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002360:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002362:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002366:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	p = (((p<<31) - var2)*3125) / var1;
 800236a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800236e:	105b      	asrs	r3, r3, #1
 8002370:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002374:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002378:	07db      	lsls	r3, r3, #31
 800237a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800237e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002382:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 8002386:	4621      	mov	r1, r4
 8002388:	1a89      	subs	r1, r1, r2
 800238a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800238e:	4629      	mov	r1, r5
 8002390:	eb61 0303 	sbc.w	r3, r1, r3
 8002394:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002398:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800239c:	4622      	mov	r2, r4
 800239e:	462b      	mov	r3, r5
 80023a0:	1891      	adds	r1, r2, r2
 80023a2:	6239      	str	r1, [r7, #32]
 80023a4:	415b      	adcs	r3, r3
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
 80023a8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80023ac:	4621      	mov	r1, r4
 80023ae:	1851      	adds	r1, r2, r1
 80023b0:	61b9      	str	r1, [r7, #24]
 80023b2:	4629      	mov	r1, r5
 80023b4:	414b      	adcs	r3, r1
 80023b6:	61fb      	str	r3, [r7, #28]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80023c4:	4649      	mov	r1, r9
 80023c6:	018b      	lsls	r3, r1, #6
 80023c8:	4641      	mov	r1, r8
 80023ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ce:	4641      	mov	r1, r8
 80023d0:	018a      	lsls	r2, r1, #6
 80023d2:	4641      	mov	r1, r8
 80023d4:	1889      	adds	r1, r1, r2
 80023d6:	6139      	str	r1, [r7, #16]
 80023d8:	4649      	mov	r1, r9
 80023da:	eb43 0101 	adc.w	r1, r3, r1
 80023de:	6179      	str	r1, [r7, #20]
 80023e0:	f04f 0200 	mov.w	r2, #0
 80023e4:	f04f 0300 	mov.w	r3, #0
 80023e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023ec:	4649      	mov	r1, r9
 80023ee:	008b      	lsls	r3, r1, #2
 80023f0:	4641      	mov	r1, r8
 80023f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023f6:	4641      	mov	r1, r8
 80023f8:	008a      	lsls	r2, r1, #2
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	4603      	mov	r3, r0
 8002400:	4622      	mov	r2, r4
 8002402:	189b      	adds	r3, r3, r2
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	460b      	mov	r3, r1
 8002408:	462a      	mov	r2, r5
 800240a:	eb42 0303 	adc.w	r3, r2, r3
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800241c:	4649      	mov	r1, r9
 800241e:	008b      	lsls	r3, r1, #2
 8002420:	4641      	mov	r1, r8
 8002422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002426:	4641      	mov	r1, r8
 8002428:	008a      	lsls	r2, r1, #2
 800242a:	4610      	mov	r0, r2
 800242c:	4619      	mov	r1, r3
 800242e:	4603      	mov	r3, r0
 8002430:	4622      	mov	r2, r4
 8002432:	189b      	adds	r3, r3, r2
 8002434:	67bb      	str	r3, [r7, #120]	; 0x78
 8002436:	462b      	mov	r3, r5
 8002438:	460a      	mov	r2, r1
 800243a:	eb42 0303 	adc.w	r3, r2, r3
 800243e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002440:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002444:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002448:	f7fe fbd6 	bl	8000bf8 <__aeabi_ldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8002454:	4bab      	ldr	r3, [pc, #684]	; (8002704 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6cc>)
 8002456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245a:	b21b      	sxth	r3, r3
 800245c:	17da      	asrs	r2, r3, #31
 800245e:	673b      	str	r3, [r7, #112]	; 0x70
 8002460:	677a      	str	r2, [r7, #116]	; 0x74
 8002462:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002466:	f04f 0000 	mov.w	r0, #0
 800246a:	f04f 0100 	mov.w	r1, #0
 800246e:	0b50      	lsrs	r0, r2, #13
 8002470:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002474:	1359      	asrs	r1, r3, #13
 8002476:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800247a:	462b      	mov	r3, r5
 800247c:	fb00 f203 	mul.w	r2, r0, r3
 8002480:	4623      	mov	r3, r4
 8002482:	fb03 f301 	mul.w	r3, r3, r1
 8002486:	4413      	add	r3, r2
 8002488:	4622      	mov	r2, r4
 800248a:	fba2 1200 	umull	r1, r2, r2, r0
 800248e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002492:	460a      	mov	r2, r1
 8002494:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002498:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800249c:	4413      	add	r3, r2
 800249e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80024a2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80024a6:	f04f 0000 	mov.w	r0, #0
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	0b50      	lsrs	r0, r2, #13
 80024b0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80024b4:	1359      	asrs	r1, r3, #13
 80024b6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80024ba:	462b      	mov	r3, r5
 80024bc:	fb00 f203 	mul.w	r2, r0, r3
 80024c0:	4623      	mov	r3, r4
 80024c2:	fb03 f301 	mul.w	r3, r3, r1
 80024c6:	4413      	add	r3, r2
 80024c8:	4622      	mov	r2, r4
 80024ca:	fba2 1200 	umull	r1, r2, r2, r0
 80024ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80024d2:	460a      	mov	r2, r1
 80024d4:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80024d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80024dc:	4413      	add	r3, r2
 80024de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80024ee:	4621      	mov	r1, r4
 80024f0:	0e4a      	lsrs	r2, r1, #25
 80024f2:	4629      	mov	r1, r5
 80024f4:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80024f8:	4629      	mov	r1, r5
 80024fa:	164b      	asrs	r3, r1, #25
 80024fc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = (((int64_t)p8) * p) >> 19;
 8002500:	4b81      	ldr	r3, [pc, #516]	; (8002708 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d0>)
 8002502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002506:	b21b      	sxth	r3, r3
 8002508:	17da      	asrs	r2, r3, #31
 800250a:	66bb      	str	r3, [r7, #104]	; 0x68
 800250c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800250e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002512:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8002516:	462a      	mov	r2, r5
 8002518:	fb02 f203 	mul.w	r2, r2, r3
 800251c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002520:	4621      	mov	r1, r4
 8002522:	fb01 f303 	mul.w	r3, r1, r3
 8002526:	4413      	add	r3, r2
 8002528:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800252c:	4621      	mov	r1, r4
 800252e:	fba2 1201 	umull	r1, r2, r2, r1
 8002532:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002536:	460a      	mov	r2, r1
 8002538:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800253c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002540:	4413      	add	r3, r2
 8002542:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002552:	4621      	mov	r1, r4
 8002554:	0cca      	lsrs	r2, r1, #19
 8002556:	4629      	mov	r1, r5
 8002558:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800255c:	4629      	mov	r1, r5
 800255e:	14cb      	asrs	r3, r1, #19
 8002560:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8002564:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002568:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800256c:	1884      	adds	r4, r0, r2
 800256e:	663c      	str	r4, [r7, #96]	; 0x60
 8002570:	eb41 0303 	adc.w	r3, r1, r3
 8002574:	667b      	str	r3, [r7, #100]	; 0x64
 8002576:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800257a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800257e:	4621      	mov	r1, r4
 8002580:	1889      	adds	r1, r1, r2
 8002582:	65b9      	str	r1, [r7, #88]	; 0x58
 8002584:	4629      	mov	r1, r5
 8002586:	eb43 0101 	adc.w	r1, r3, r1
 800258a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800258c:	f04f 0000 	mov.w	r0, #0
 8002590:	f04f 0100 	mov.w	r1, #0
 8002594:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002598:	4623      	mov	r3, r4
 800259a:	0a18      	lsrs	r0, r3, #8
 800259c:	462b      	mov	r3, r5
 800259e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80025a2:	462b      	mov	r3, r5
 80025a4:	1219      	asrs	r1, r3, #8
 80025a6:	4b59      	ldr	r3, [pc, #356]	; (800270c <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d4>)
 80025a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	17da      	asrs	r2, r3, #31
 80025b0:	653b      	str	r3, [r7, #80]	; 0x50
 80025b2:	657a      	str	r2, [r7, #84]	; 0x54
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80025c0:	464c      	mov	r4, r9
 80025c2:	0123      	lsls	r3, r4, #4
 80025c4:	4644      	mov	r4, r8
 80025c6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80025ca:	4644      	mov	r4, r8
 80025cc:	0122      	lsls	r2, r4, #4
 80025ce:	1884      	adds	r4, r0, r2
 80025d0:	603c      	str	r4, [r7, #0]
 80025d2:	eb41 0303 	adc.w	r3, r1, r3
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80025dc:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	*pressure = (int32_t)p/256;
 80025e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	da00      	bge.n	80025ea <BME280_ReadTemperatureAndPressureAndHuminidity+0x5b2>
 80025e8:	33ff      	adds	r3, #255	; 0xff
 80025ea:	121b      	asrs	r3, r3, #8
 80025ec:	461a      	mov	r2, r3
 80025ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025f2:	601a      	str	r2, [r3, #0]

	// Pressure section
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 80025f4:	20fd      	movs	r0, #253	; 0xfd
 80025f6:	f7ff fa87 	bl	8001b08 <BME280_Read16>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (adc_H == 0x8000) // value in case humidity measurement was disabled
 8002600:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	d101      	bne.n	800260e <BME280_ReadTemperatureAndPressureAndHuminidity+0x5d6>
		return -1; //error
 800260a:	23ff      	movs	r3, #255	; 0xff
 800260c:	e073      	b.n	80026f6 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t v_x1_u32r;

	v_x1_u32r = (t_fine - ((int32_t)76800));
 800260e:	4b40      	ldr	r3, [pc, #256]	; (8002710 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8002616:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 800261a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800261e:	039a      	lsls	r2, r3, #14
 8002620:	4b3c      	ldr	r3, [pc, #240]	; (8002714 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6dc>)
 8002622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002626:	051b      	lsls	r3, r3, #20
 8002628:	1ad2      	subs	r2, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 800262a:	4b3b      	ldr	r3, [pc, #236]	; (8002718 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e0>)
 800262c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002630:	4619      	mov	r1, r3
 8002632:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002636:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 800263a:	1ad3      	subs	r3, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 800263c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002640:	13db      	asrs	r3, r3, #15
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 8002642:	4a36      	ldr	r2, [pc, #216]	; (800271c <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e4>)
 8002644:	f992 2000 	ldrsb.w	r2, [r2]
 8002648:	4611      	mov	r1, r2
 800264a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800264e:	fb01 f202 	mul.w	r2, r1, r2
 8002652:	1292      	asrs	r2, r2, #10
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8002654:	4932      	ldr	r1, [pc, #200]	; (8002720 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e8>)
 8002656:	7809      	ldrb	r1, [r1, #0]
 8002658:	4608      	mov	r0, r1
 800265a:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800265e:	fb00 f101 	mul.w	r1, r0, r1
 8002662:	12c9      	asrs	r1, r1, #11
 8002664:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 8002668:	fb01 f202 	mul.w	r2, r1, r2
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 800266c:	1292      	asrs	r2, r2, #10
 800266e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 8002672:	492c      	ldr	r1, [pc, #176]	; (8002724 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6ec>)
 8002674:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002678:	fb01 f202 	mul.w	r2, r1, r2
 800267c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002680:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800268a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800268e:	13db      	asrs	r3, r3, #15
 8002690:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002694:	13d2      	asrs	r2, r2, #15
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	11db      	asrs	r3, r3, #7
							 ((int32_t)h1)) >> 4));
 800269c:	4a22      	ldr	r2, [pc, #136]	; (8002728 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f0>)
 800269e:	7812      	ldrb	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80026a0:	fb02 f303 	mul.w	r3, r2, r3
							 ((int32_t)h1)) >> 4));
 80026a4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80026a6:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80026b0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80026b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 80026bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026c0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80026c4:	bfa8      	it	ge
 80026c6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80026ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	float h = (v_x1_u32r>>12);
 80026ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026d2:	131b      	asrs	r3, r3, #12
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026dc:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
	*huminidity = h / 1024.0;
 80026e0:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 80026e4:	eddf 6a11 	vldr	s13, [pc, #68]	; 800272c <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f4>
 80026e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026f0:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80026fc:	46bd      	mov	sp, r7
 80026fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002702:	bf00      	nop
 8002704:	20000642 	.word	0x20000642
 8002708:	20000640 	.word	0x20000640
 800270c:	2000063e 	.word	0x2000063e
 8002710:	20000650 	.word	0x20000650
 8002714:	20000646 	.word	0x20000646
 8002718:	20000648 	.word	0x20000648
 800271c:	2000062e 	.word	0x2000062e
 8002720:	2000062d 	.word	0x2000062d
 8002724:	20000644 	.word	0x20000644
 8002728:	2000062c 	.word	0x2000062c
 800272c:	44800000 	.word	0x44800000

08002730 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <MX_DMA_Init+0x8c>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a1f      	ldr	r2, [pc, #124]	; (80027bc <MX_DMA_Init+0x8c>)
 8002740:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <MX_DMA_Init+0x8c>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_DMA_Init+0x90>)
 8002754:	4a1b      	ldr	r2, [pc, #108]	; (80027c4 <MX_DMA_Init+0x94>)
 8002756:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <MX_DMA_Init+0x90>)
 800275a:	2200      	movs	r2, #0
 800275c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_DMA_Init+0x90>)
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <MX_DMA_Init+0x90>)
 8002766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 800276c:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <MX_DMA_Init+0x90>)
 800276e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002772:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <MX_DMA_Init+0x90>)
 8002776:	2200      	movs	r2, #0
 8002778:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <MX_DMA_Init+0x90>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002780:	4b0f      	ldr	r3, [pc, #60]	; (80027c0 <MX_DMA_Init+0x90>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <MX_DMA_Init+0x90>)
 8002788:	2200      	movs	r2, #0
 800278a:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <MX_DMA_Init+0x90>)
 800278e:	2204      	movs	r2, #4
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <MX_DMA_Init+0x90>)
 8002794:	2203      	movs	r2, #3
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <MX_DMA_Init+0x90>)
 800279a:	2200      	movs	r2, #0
 800279c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <MX_DMA_Init+0x90>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80027a4:	4806      	ldr	r0, [pc, #24]	; (80027c0 <MX_DMA_Init+0x90>)
 80027a6:	f003 fd45 	bl	8006234 <HAL_DMA_Init>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_DMA_Init+0x84>
  {
    Error_Handler();
 80027b0:	f001 fb4e 	bl	8003e50 <Error_Handler>
  }

}
 80027b4:	bf00      	nop
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	20000654 	.word	0x20000654
 80027c4:	40026410 	.word	0x40026410

080027c8 <drv8835_mode_control>:
#include "stm32f4xx_hal_tim.h"



void drv8835_mode_control(DRV8835_Mode mode)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
	if(mode == Phase_Enable_Mode)
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d105      	bne.n	80027e4 <drv8835_mode_control+0x1c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, SET);
 80027d8:	2201      	movs	r2, #1
 80027da:	2180      	movs	r1, #128	; 0x80
 80027dc:	4807      	ldr	r0, [pc, #28]	; (80027fc <drv8835_mode_control+0x34>)
 80027de:	f004 f825 	bl	800682c <HAL_GPIO_WritePin>
	else if(mode == In_In_Mode)
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
}
 80027e2:	e007      	b.n	80027f4 <drv8835_mode_control+0x2c>
	else if(mode == In_In_Mode)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <drv8835_mode_control+0x2c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2180      	movs	r1, #128	; 0x80
 80027ee:	4803      	ldr	r0, [pc, #12]	; (80027fc <drv8835_mode_control+0x34>)
 80027f0:	f004 f81c 	bl	800682c <HAL_GPIO_WritePin>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40020000 	.word	0x40020000

08002800 <drv8835_set_motorA_direction>:

void drv8835_set_motorA_direction(DRV8835_Direction dir)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
	if(dir == CW)
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <drv8835_set_motorA_direction+0x1c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, SET);
 8002810:	2201      	movs	r2, #1
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	4807      	ldr	r0, [pc, #28]	; (8002834 <drv8835_set_motorA_direction+0x34>)
 8002816:	f004 f809 	bl	800682c <HAL_GPIO_WritePin>
	else if(dir == CCW)
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
}
 800281a:	e007      	b.n	800282c <drv8835_set_motorA_direction+0x2c>
	else if(dir == CCW)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d104      	bne.n	800282c <drv8835_set_motorA_direction+0x2c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
 8002822:	2200      	movs	r2, #0
 8002824:	2140      	movs	r1, #64	; 0x40
 8002826:	4803      	ldr	r0, [pc, #12]	; (8002834 <drv8835_set_motorA_direction+0x34>)
 8002828:	f004 f800 	bl	800682c <HAL_GPIO_WritePin>
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40020400 	.word	0x40020400

08002838 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint8_t speed)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
	if(speed >= htim3.Instance->ARR)
 8002842:	79fa      	ldrb	r2, [r7, #7]
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <drv8835_set_motorA_speed+0x34>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	429a      	cmp	r2, r3
 800284c:	d303      	bcc.n	8002856 <drv8835_set_motorA_speed+0x1e>
		speed = htim3.Instance->ARR;
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <drv8835_set_motorA_speed+0x34>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002854:	71fb      	strb	r3, [r7, #7]

	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, speed);
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <drv8835_set_motorA_speed+0x34>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	79fa      	ldrb	r2, [r7, #7]
 800285c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000860 	.word	0x20000860

08002870 <drv8835_init>:

void drv8835_init()
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
	drv8835_mode_control(Phase_Enable_Mode);
 8002874:	2001      	movs	r0, #1
 8002876:	f7ff ffa7 	bl	80027c8 <drv8835_mode_control>
	drv8835_set_motorA_direction(CCW);
 800287a:	2001      	movs	r0, #1
 800287c:	f7ff ffc0 	bl	8002800 <drv8835_set_motorA_direction>
	drv8835_set_motorA_speed(0);
 8002880:	2000      	movs	r0, #0
 8002882:	f7ff ffd9 	bl	8002838 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002886:	2100      	movs	r1, #0
 8002888:	4802      	ldr	r0, [pc, #8]	; (8002894 <drv8835_init+0x24>)
 800288a:	f007 fb2f 	bl	8009eec <HAL_TIM_PWM_Start>
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000860 	.word	0x20000860

08002898 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 800289c:	4891      	ldr	r0, [pc, #580]	; (8002ae4 <MX_FREERTOS_Init+0x24c>)
 800289e:	f00c fb8d 	bl	800efbc <osMutexNew>
 80028a2:	4603      	mov	r3, r0
 80028a4:	4a90      	ldr	r2, [pc, #576]	; (8002ae8 <MX_FREERTOS_Init+0x250>)
 80028a6:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 80028a8:	4890      	ldr	r0, [pc, #576]	; (8002aec <MX_FREERTOS_Init+0x254>)
 80028aa:	f00c fb87 	bl	800efbc <osMutexNew>
 80028ae:	4603      	mov	r3, r0
 80028b0:	4a8f      	ldr	r2, [pc, #572]	; (8002af0 <MX_FREERTOS_Init+0x258>)
 80028b2:	6013      	str	r3, [r2, #0]

  /* creation of MutexRTC */
  MutexRTCHandle = osMutexNew(&MutexRTC_attributes);
 80028b4:	488f      	ldr	r0, [pc, #572]	; (8002af4 <MX_FREERTOS_Init+0x25c>)
 80028b6:	f00c fb81 	bl	800efbc <osMutexNew>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4a8e      	ldr	r2, [pc, #568]	; (8002af8 <MX_FREERTOS_Init+0x260>)
 80028be:	6013      	str	r3, [r2, #0]

  /* creation of MutexAlarm */
  MutexAlarmHandle = osMutexNew(&MutexAlarm_attributes);
 80028c0:	488e      	ldr	r0, [pc, #568]	; (8002afc <MX_FREERTOS_Init+0x264>)
 80028c2:	f00c fb7b 	bl	800efbc <osMutexNew>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4a8d      	ldr	r2, [pc, #564]	; (8002b00 <MX_FREERTOS_Init+0x268>)
 80028ca:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 80028cc:	488d      	ldr	r0, [pc, #564]	; (8002b04 <MX_FREERTOS_Init+0x26c>)
 80028ce:	f00c fb75 	bl	800efbc <osMutexNew>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4a8c      	ldr	r2, [pc, #560]	; (8002b08 <MX_FREERTOS_Init+0x270>)
 80028d6:	6013      	str	r3, [r2, #0]

  /* creation of MutexSdCard */
  MutexSdCardHandle = osMutexNew(&MutexSdCard_attributes);
 80028d8:	488c      	ldr	r0, [pc, #560]	; (8002b0c <MX_FREERTOS_Init+0x274>)
 80028da:	f00c fb6f 	bl	800efbc <osMutexNew>
 80028de:	4603      	mov	r3, r0
 80028e0:	4a8b      	ldr	r2, [pc, #556]	; (8002b10 <MX_FREERTOS_Init+0x278>)
 80028e2:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemBme280 */
  BinarySemBme280Handle = osSemaphoreNew(1, 1, &BinarySemBme280_attributes);
 80028e4:	4a8b      	ldr	r2, [pc, #556]	; (8002b14 <MX_FREERTOS_Init+0x27c>)
 80028e6:	2101      	movs	r1, #1
 80028e8:	2001      	movs	r0, #1
 80028ea:	f00c fc9b 	bl	800f224 <osSemaphoreNew>
 80028ee:	4603      	mov	r3, r0
 80028f0:	4a89      	ldr	r2, [pc, #548]	; (8002b18 <MX_FREERTOS_Init+0x280>)
 80028f2:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemBH1750 */
  BinarySemBH1750Handle = osSemaphoreNew(1, 1, &BinarySemBH1750_attributes);
 80028f4:	4a89      	ldr	r2, [pc, #548]	; (8002b1c <MX_FREERTOS_Init+0x284>)
 80028f6:	2101      	movs	r1, #1
 80028f8:	2001      	movs	r0, #1
 80028fa:	f00c fc93 	bl	800f224 <osSemaphoreNew>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a87      	ldr	r2, [pc, #540]	; (8002b20 <MX_FREERTOS_Init+0x288>)
 8002902:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemRTC */
  BinarySemRTCHandle = osSemaphoreNew(1, 1, &BinarySemRTC_attributes);
 8002904:	4a87      	ldr	r2, [pc, #540]	; (8002b24 <MX_FREERTOS_Init+0x28c>)
 8002906:	2101      	movs	r1, #1
 8002908:	2001      	movs	r0, #1
 800290a:	f00c fc8b 	bl	800f224 <osSemaphoreNew>
 800290e:	4603      	mov	r3, r0
 8002910:	4a85      	ldr	r2, [pc, #532]	; (8002b28 <MX_FREERTOS_Init+0x290>)
 8002912:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemCounter */
  BinarySemCounterHandle = osSemaphoreNew(1, 1, &BinarySemCounter_attributes);
 8002914:	4a85      	ldr	r2, [pc, #532]	; (8002b2c <MX_FREERTOS_Init+0x294>)
 8002916:	2101      	movs	r1, #1
 8002918:	2001      	movs	r0, #1
 800291a:	f00c fc83 	bl	800f224 <osSemaphoreNew>
 800291e:	4603      	mov	r3, r0
 8002920:	4a83      	ldr	r2, [pc, #524]	; (8002b30 <MX_FREERTOS_Init+0x298>)
 8002922:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemSetAlarm */
  BinarySemSetAlarmHandle = osSemaphoreNew(1, 1, &BinarySemSetAlarm_attributes);
 8002924:	4a83      	ldr	r2, [pc, #524]	; (8002b34 <MX_FREERTOS_Init+0x29c>)
 8002926:	2101      	movs	r1, #1
 8002928:	2001      	movs	r0, #1
 800292a:	f00c fc7b 	bl	800f224 <osSemaphoreNew>
 800292e:	4603      	mov	r3, r0
 8002930:	4a81      	ldr	r2, [pc, #516]	; (8002b38 <MX_FREERTOS_Init+0x2a0>)
 8002932:	6013      	str	r3, [r2, #0]

  /* creation of BinarySdCard */
  BinarySdCardHandle = osSemaphoreNew(1, 1, &BinarySdCard_attributes);
 8002934:	4a81      	ldr	r2, [pc, #516]	; (8002b3c <MX_FREERTOS_Init+0x2a4>)
 8002936:	2101      	movs	r1, #1
 8002938:	2001      	movs	r0, #1
 800293a:	f00c fc73 	bl	800f224 <osSemaphoreNew>
 800293e:	4603      	mov	r3, r0
 8002940:	4a7f      	ldr	r2, [pc, #508]	; (8002b40 <MX_FREERTOS_Init+0x2a8>)
 8002942:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemINA219 */
  BinarySemINA219Handle = osSemaphoreNew(1, 1, &BinarySemINA219_attributes);
 8002944:	4a7f      	ldr	r2, [pc, #508]	; (8002b44 <MX_FREERTOS_Init+0x2ac>)
 8002946:	2101      	movs	r1, #1
 8002948:	2001      	movs	r0, #1
 800294a:	f00c fc6b 	bl	800f224 <osSemaphoreNew>
 800294e:	4603      	mov	r3, r0
 8002950:	4a7d      	ldr	r2, [pc, #500]	; (8002b48 <MX_FREERTOS_Init+0x2b0>)
 8002952:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBmeData */
  TimerBmeDataHandle = osTimerNew(CallbackTimerBmeData, osTimerPeriodic, NULL, &TimerBmeData_attributes);
 8002954:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <MX_FREERTOS_Init+0x2b4>)
 8002956:	2200      	movs	r2, #0
 8002958:	2101      	movs	r1, #1
 800295a:	487d      	ldr	r0, [pc, #500]	; (8002b50 <MX_FREERTOS_Init+0x2b8>)
 800295c:	f00c fa84 	bl	800ee68 <osTimerNew>
 8002960:	4603      	mov	r3, r0
 8002962:	4a7c      	ldr	r2, [pc, #496]	; (8002b54 <MX_FREERTOS_Init+0x2bc>)
 8002964:	6013      	str	r3, [r2, #0]

  /* creation of TimerBh1750Data */
  TimerBh1750DataHandle = osTimerNew(CallbackTimerBh1750Data, osTimerPeriodic, NULL, &TimerBh1750Data_attributes);
 8002966:	4b7c      	ldr	r3, [pc, #496]	; (8002b58 <MX_FREERTOS_Init+0x2c0>)
 8002968:	2200      	movs	r2, #0
 800296a:	2101      	movs	r1, #1
 800296c:	487b      	ldr	r0, [pc, #492]	; (8002b5c <MX_FREERTOS_Init+0x2c4>)
 800296e:	f00c fa7b 	bl	800ee68 <osTimerNew>
 8002972:	4603      	mov	r3, r0
 8002974:	4a7a      	ldr	r2, [pc, #488]	; (8002b60 <MX_FREERTOS_Init+0x2c8>)
 8002976:	6013      	str	r3, [r2, #0]

  /* creation of TimerRTC */
  TimerRTCHandle = osTimerNew(CallbackTimerRTC, osTimerPeriodic, NULL, &TimerRTC_attributes);
 8002978:	4b7a      	ldr	r3, [pc, #488]	; (8002b64 <MX_FREERTOS_Init+0x2cc>)
 800297a:	2200      	movs	r2, #0
 800297c:	2101      	movs	r1, #1
 800297e:	487a      	ldr	r0, [pc, #488]	; (8002b68 <MX_FREERTOS_Init+0x2d0>)
 8002980:	f00c fa72 	bl	800ee68 <osTimerNew>
 8002984:	4603      	mov	r3, r0
 8002986:	4a79      	ldr	r2, [pc, #484]	; (8002b6c <MX_FREERTOS_Init+0x2d4>)
 8002988:	6013      	str	r3, [r2, #0]

  /* creation of TimerSDCard */
  TimerSDCardHandle = osTimerNew(CallbackTimerSDCard, osTimerPeriodic, NULL, &TimerSDCard_attributes);
 800298a:	4b79      	ldr	r3, [pc, #484]	; (8002b70 <MX_FREERTOS_Init+0x2d8>)
 800298c:	2200      	movs	r2, #0
 800298e:	2101      	movs	r1, #1
 8002990:	4878      	ldr	r0, [pc, #480]	; (8002b74 <MX_FREERTOS_Init+0x2dc>)
 8002992:	f00c fa69 	bl	800ee68 <osTimerNew>
 8002996:	4603      	mov	r3, r0
 8002998:	4a77      	ldr	r2, [pc, #476]	; (8002b78 <MX_FREERTOS_Init+0x2e0>)
 800299a:	6013      	str	r3, [r2, #0]

  /* creation of TimerINA219 */
  TimerINA219Handle = osTimerNew(CallbackTimerINA219, osTimerPeriodic, NULL, &TimerINA219_attributes);
 800299c:	4b77      	ldr	r3, [pc, #476]	; (8002b7c <MX_FREERTOS_Init+0x2e4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	2101      	movs	r1, #1
 80029a2:	4877      	ldr	r0, [pc, #476]	; (8002b80 <MX_FREERTOS_Init+0x2e8>)
 80029a4:	f00c fa60 	bl	800ee68 <osTimerNew>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4a76      	ldr	r2, [pc, #472]	; (8002b84 <MX_FREERTOS_Init+0x2ec>)
 80029ac:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueBme */
  QueueBmeHandle = osMessageQueueNew (5, sizeof(BmeData_t), &QueueBme_attributes);
 80029ae:	4a76      	ldr	r2, [pc, #472]	; (8002b88 <MX_FREERTOS_Init+0x2f0>)
 80029b0:	210c      	movs	r1, #12
 80029b2:	2005      	movs	r0, #5
 80029b4:	f00c fd56 	bl	800f464 <osMessageQueueNew>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4a74      	ldr	r2, [pc, #464]	; (8002b8c <MX_FREERTOS_Init+0x2f4>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* creation of QueueBh1750 */
  QueueBh1750Handle = osMessageQueueNew (5, sizeof(BHData_t), &QueueBh1750_attributes);
 80029be:	4a74      	ldr	r2, [pc, #464]	; (8002b90 <MX_FREERTOS_Init+0x2f8>)
 80029c0:	2104      	movs	r1, #4
 80029c2:	2005      	movs	r0, #5
 80029c4:	f00c fd4e 	bl	800f464 <osMessageQueueNew>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a72      	ldr	r2, [pc, #456]	; (8002b94 <MX_FREERTOS_Init+0x2fc>)
 80029cc:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCData */
  QueueRTCDataHandle = osMessageQueueNew (5, sizeof(RTC_DateTypeDef), &QueueRTCData_attributes);
 80029ce:	4a72      	ldr	r2, [pc, #456]	; (8002b98 <MX_FREERTOS_Init+0x300>)
 80029d0:	2104      	movs	r1, #4
 80029d2:	2005      	movs	r0, #5
 80029d4:	f00c fd46 	bl	800f464 <osMessageQueueNew>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a70      	ldr	r2, [pc, #448]	; (8002b9c <MX_FREERTOS_Init+0x304>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCTime */
  QueueRTCTimeHandle = osMessageQueueNew (5, sizeof(RTC_TimeTypeDef), &QueueRTCTime_attributes);
 80029de:	4a70      	ldr	r2, [pc, #448]	; (8002ba0 <MX_FREERTOS_Init+0x308>)
 80029e0:	2114      	movs	r1, #20
 80029e2:	2005      	movs	r0, #5
 80029e4:	f00c fd3e 	bl	800f464 <osMessageQueueNew>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4a6e      	ldr	r2, [pc, #440]	; (8002ba4 <MX_FREERTOS_Init+0x30c>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* creation of QueueCounterPump */
  QueueCounterPumpHandle = osMessageQueueNew (1, sizeof(uint8_t), &QueueCounterPump_attributes);
 80029ee:	4a6e      	ldr	r2, [pc, #440]	; (8002ba8 <MX_FREERTOS_Init+0x310>)
 80029f0:	2101      	movs	r1, #1
 80029f2:	2001      	movs	r0, #1
 80029f4:	f00c fd36 	bl	800f464 <osMessageQueueNew>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a6c      	ldr	r2, [pc, #432]	; (8002bac <MX_FREERTOS_Init+0x314>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* creation of QueueCounterAlarm */
  QueueCounterAlarmHandle = osMessageQueueNew (1, sizeof(uint8_t), &QueueCounterAlarm_attributes);
 80029fe:	4a6c      	ldr	r2, [pc, #432]	; (8002bb0 <MX_FREERTOS_Init+0x318>)
 8002a00:	2101      	movs	r1, #1
 8002a02:	2001      	movs	r0, #1
 8002a04:	f00c fd2e 	bl	800f464 <osMessageQueueNew>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4a6a      	ldr	r2, [pc, #424]	; (8002bb4 <MX_FREERTOS_Init+0x31c>)
 8002a0c:	6013      	str	r3, [r2, #0]

  /* creation of QueSDCARD */
  QueSDCARDHandle = osMessageQueueNew (1, sizeof(Data_Structure_t), &QueSDCARD_attributes);
 8002a0e:	4a6a      	ldr	r2, [pc, #424]	; (8002bb8 <MX_FREERTOS_Init+0x320>)
 8002a10:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002a14:	2001      	movs	r0, #1
 8002a16:	f00c fd25 	bl	800f464 <osMessageQueueNew>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	4a67      	ldr	r2, [pc, #412]	; (8002bbc <MX_FREERTOS_Init+0x324>)
 8002a1e:	6013      	str	r3, [r2, #0]

  /* creation of QuequeBattery */
  QuequeBatteryHandle = osMessageQueueNew (16, sizeof(INA219Data_t), &QuequeBattery_attributes);
 8002a20:	4a67      	ldr	r2, [pc, #412]	; (8002bc0 <MX_FREERTOS_Init+0x328>)
 8002a22:	2106      	movs	r1, #6
 8002a24:	2010      	movs	r0, #16
 8002a26:	f00c fd1d 	bl	800f464 <osMessageQueueNew>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4a65      	ldr	r2, [pc, #404]	; (8002bc4 <MX_FREERTOS_Init+0x32c>)
 8002a2e:	6013      	str	r3, [r2, #0]

  /* creation of QuequePV */
  QuequePVHandle = osMessageQueueNew (16, sizeof(INA219Data_t), &QuequePV_attributes);
 8002a30:	4a65      	ldr	r2, [pc, #404]	; (8002bc8 <MX_FREERTOS_Init+0x330>)
 8002a32:	2106      	movs	r1, #6
 8002a34:	2010      	movs	r0, #16
 8002a36:	f00c fd15 	bl	800f464 <osMessageQueueNew>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a63      	ldr	r2, [pc, #396]	; (8002bcc <MX_FREERTOS_Init+0x334>)
 8002a3e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskRTC */
  TaskRTCHandle = osThreadNew(StartTaskRTC, NULL, &TaskRTC_attributes);
 8002a40:	4a63      	ldr	r2, [pc, #396]	; (8002bd0 <MX_FREERTOS_Init+0x338>)
 8002a42:	2100      	movs	r1, #0
 8002a44:	4863      	ldr	r0, [pc, #396]	; (8002bd4 <MX_FREERTOS_Init+0x33c>)
 8002a46:	f00c f80d 	bl	800ea64 <osThreadNew>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4a62      	ldr	r2, [pc, #392]	; (8002bd8 <MX_FREERTOS_Init+0x340>)
 8002a4e:	6013      	str	r3, [r2, #0]

  /* creation of TaskBme280 */
  TaskBme280Handle = osThreadNew(StartTaskBme280, NULL, &TaskBme280_attributes);
 8002a50:	4a62      	ldr	r2, [pc, #392]	; (8002bdc <MX_FREERTOS_Init+0x344>)
 8002a52:	2100      	movs	r1, #0
 8002a54:	4862      	ldr	r0, [pc, #392]	; (8002be0 <MX_FREERTOS_Init+0x348>)
 8002a56:	f00c f805 	bl	800ea64 <osThreadNew>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4a61      	ldr	r2, [pc, #388]	; (8002be4 <MX_FREERTOS_Init+0x34c>)
 8002a5e:	6013      	str	r3, [r2, #0]

  /* creation of TaskBH1750 */
  TaskBH1750Handle = osThreadNew(StartTaskBH1750, NULL, &TaskBH1750_attributes);
 8002a60:	4a61      	ldr	r2, [pc, #388]	; (8002be8 <MX_FREERTOS_Init+0x350>)
 8002a62:	2100      	movs	r1, #0
 8002a64:	4861      	ldr	r0, [pc, #388]	; (8002bec <MX_FREERTOS_Init+0x354>)
 8002a66:	f00b fffd 	bl	800ea64 <osThreadNew>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a60      	ldr	r2, [pc, #384]	; (8002bf0 <MX_FREERTOS_Init+0x358>)
 8002a6e:	6013      	str	r3, [r2, #0]

  /* creation of TaskSSD1306 */
  TaskSSD1306Handle = osThreadNew(StartTaskSSD1306, NULL, &TaskSSD1306_attributes);
 8002a70:	4a60      	ldr	r2, [pc, #384]	; (8002bf4 <MX_FREERTOS_Init+0x35c>)
 8002a72:	2100      	movs	r1, #0
 8002a74:	4860      	ldr	r0, [pc, #384]	; (8002bf8 <MX_FREERTOS_Init+0x360>)
 8002a76:	f00b fff5 	bl	800ea64 <osThreadNew>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4a5f      	ldr	r2, [pc, #380]	; (8002bfc <MX_FREERTOS_Init+0x364>)
 8002a7e:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpON */
  TaskPumpONHandle = osThreadNew(StartTaskPumpON, NULL, &TaskPumpON_attributes);
 8002a80:	4a5f      	ldr	r2, [pc, #380]	; (8002c00 <MX_FREERTOS_Init+0x368>)
 8002a82:	2100      	movs	r1, #0
 8002a84:	485f      	ldr	r0, [pc, #380]	; (8002c04 <MX_FREERTOS_Init+0x36c>)
 8002a86:	f00b ffed 	bl	800ea64 <osThreadNew>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4a5e      	ldr	r2, [pc, #376]	; (8002c08 <MX_FREERTOS_Init+0x370>)
 8002a8e:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpOFF */
  TaskPumpOFFHandle = osThreadNew(StartTaskPumpOFF, NULL, &TaskPumpOFF_attributes);
 8002a90:	4a5e      	ldr	r2, [pc, #376]	; (8002c0c <MX_FREERTOS_Init+0x374>)
 8002a92:	2100      	movs	r1, #0
 8002a94:	485e      	ldr	r0, [pc, #376]	; (8002c10 <MX_FREERTOS_Init+0x378>)
 8002a96:	f00b ffe5 	bl	800ea64 <osThreadNew>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a5d      	ldr	r2, [pc, #372]	; (8002c14 <MX_FREERTOS_Init+0x37c>)
 8002a9e:	6013      	str	r3, [r2, #0]

  /* creation of TaskCounterPump */
  TaskCounterPumpHandle = osThreadNew(StartTaskCounterPump, NULL, &TaskCounterPump_attributes);
 8002aa0:	4a5d      	ldr	r2, [pc, #372]	; (8002c18 <MX_FREERTOS_Init+0x380>)
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	485d      	ldr	r0, [pc, #372]	; (8002c1c <MX_FREERTOS_Init+0x384>)
 8002aa6:	f00b ffdd 	bl	800ea64 <osThreadNew>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4a5c      	ldr	r2, [pc, #368]	; (8002c20 <MX_FREERTOS_Init+0x388>)
 8002aae:	6013      	str	r3, [r2, #0]

  /* creation of TaskAlarmCounte */
  TaskAlarmCounteHandle = osThreadNew(StartTaskAlarmCounter, NULL, &TaskAlarmCounte_attributes);
 8002ab0:	4a5c      	ldr	r2, [pc, #368]	; (8002c24 <MX_FREERTOS_Init+0x38c>)
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	485c      	ldr	r0, [pc, #368]	; (8002c28 <MX_FREERTOS_Init+0x390>)
 8002ab6:	f00b ffd5 	bl	800ea64 <osThreadNew>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4a5b      	ldr	r2, [pc, #364]	; (8002c2c <MX_FREERTOS_Init+0x394>)
 8002abe:	6013      	str	r3, [r2, #0]

  /* creation of TaskSdCard */
  TaskSdCardHandle = osThreadNew(StartTaskSdCard, NULL, &TaskSdCard_attributes);
 8002ac0:	4a5b      	ldr	r2, [pc, #364]	; (8002c30 <MX_FREERTOS_Init+0x398>)
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	485b      	ldr	r0, [pc, #364]	; (8002c34 <MX_FREERTOS_Init+0x39c>)
 8002ac6:	f00b ffcd 	bl	800ea64 <osThreadNew>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4a5a      	ldr	r2, [pc, #360]	; (8002c38 <MX_FREERTOS_Init+0x3a0>)
 8002ace:	6013      	str	r3, [r2, #0]

  /* creation of TaskINA219 */
  TaskINA219Handle = osThreadNew(StartTaskINA219, NULL, &TaskINA219_attributes);
 8002ad0:	4a5a      	ldr	r2, [pc, #360]	; (8002c3c <MX_FREERTOS_Init+0x3a4>)
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	485a      	ldr	r0, [pc, #360]	; (8002c40 <MX_FREERTOS_Init+0x3a8>)
 8002ad6:	f00b ffc5 	bl	800ea64 <osThreadNew>
 8002ada:	4603      	mov	r3, r0
 8002adc:	4a59      	ldr	r2, [pc, #356]	; (8002c44 <MX_FREERTOS_Init+0x3ac>)
 8002ade:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002ae0:	bf00      	nop
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	08016344 	.word	0x08016344
 8002ae8:	20000714 	.word	0x20000714
 8002aec:	08016354 	.word	0x08016354
 8002af0:	20000718 	.word	0x20000718
 8002af4:	08016364 	.word	0x08016364
 8002af8:	2000071c 	.word	0x2000071c
 8002afc:	08016374 	.word	0x08016374
 8002b00:	20000720 	.word	0x20000720
 8002b04:	08016384 	.word	0x08016384
 8002b08:	20000724 	.word	0x20000724
 8002b0c:	08016394 	.word	0x08016394
 8002b10:	20000728 	.word	0x20000728
 8002b14:	080163a4 	.word	0x080163a4
 8002b18:	2000072c 	.word	0x2000072c
 8002b1c:	080163b4 	.word	0x080163b4
 8002b20:	20000730 	.word	0x20000730
 8002b24:	080163c4 	.word	0x080163c4
 8002b28:	20000734 	.word	0x20000734
 8002b2c:	080163d4 	.word	0x080163d4
 8002b30:	20000738 	.word	0x20000738
 8002b34:	080163e4 	.word	0x080163e4
 8002b38:	2000073c 	.word	0x2000073c
 8002b3c:	080163f4 	.word	0x080163f4
 8002b40:	20000740 	.word	0x20000740
 8002b44:	08016404 	.word	0x08016404
 8002b48:	20000744 	.word	0x20000744
 8002b4c:	080162f4 	.word	0x080162f4
 8002b50:	08003a2d 	.word	0x08003a2d
 8002b54:	20000700 	.word	0x20000700
 8002b58:	08016304 	.word	0x08016304
 8002b5c:	08003a4d 	.word	0x08003a4d
 8002b60:	20000704 	.word	0x20000704
 8002b64:	08016314 	.word	0x08016314
 8002b68:	08003a6d 	.word	0x08003a6d
 8002b6c:	20000708 	.word	0x20000708
 8002b70:	08016324 	.word	0x08016324
 8002b74:	08003a8d 	.word	0x08003a8d
 8002b78:	2000070c 	.word	0x2000070c
 8002b7c:	08016334 	.word	0x08016334
 8002b80:	08003aad 	.word	0x08003aad
 8002b84:	20000710 	.word	0x20000710
 8002b88:	0801621c 	.word	0x0801621c
 8002b8c:	200006dc 	.word	0x200006dc
 8002b90:	08016234 	.word	0x08016234
 8002b94:	200006e0 	.word	0x200006e0
 8002b98:	0801624c 	.word	0x0801624c
 8002b9c:	200006e4 	.word	0x200006e4
 8002ba0:	08016264 	.word	0x08016264
 8002ba4:	200006e8 	.word	0x200006e8
 8002ba8:	0801627c 	.word	0x0801627c
 8002bac:	200006ec 	.word	0x200006ec
 8002bb0:	08016294 	.word	0x08016294
 8002bb4:	200006f0 	.word	0x200006f0
 8002bb8:	080162ac 	.word	0x080162ac
 8002bbc:	200006f4 	.word	0x200006f4
 8002bc0:	080162c4 	.word	0x080162c4
 8002bc4:	200006f8 	.word	0x200006f8
 8002bc8:	080162dc 	.word	0x080162dc
 8002bcc:	200006fc 	.word	0x200006fc
 8002bd0:	080160b4 	.word	0x080160b4
 8002bd4:	08002c49 	.word	0x08002c49
 8002bd8:	200006b4 	.word	0x200006b4
 8002bdc:	080160d8 	.word	0x080160d8
 8002be0:	08002ee1 	.word	0x08002ee1
 8002be4:	200006b8 	.word	0x200006b8
 8002be8:	080160fc 	.word	0x080160fc
 8002bec:	08002fd1 	.word	0x08002fd1
 8002bf0:	200006bc 	.word	0x200006bc
 8002bf4:	08016120 	.word	0x08016120
 8002bf8:	080030a9 	.word	0x080030a9
 8002bfc:	200006c0 	.word	0x200006c0
 8002c00:	08016144 	.word	0x08016144
 8002c04:	080034d9 	.word	0x080034d9
 8002c08:	200006c4 	.word	0x200006c4
 8002c0c:	08016168 	.word	0x08016168
 8002c10:	080034ff 	.word	0x080034ff
 8002c14:	200006c8 	.word	0x200006c8
 8002c18:	0801618c 	.word	0x0801618c
 8002c1c:	0800351d 	.word	0x0800351d
 8002c20:	200006cc 	.word	0x200006cc
 8002c24:	080161b0 	.word	0x080161b0
 8002c28:	080035cd 	.word	0x080035cd
 8002c2c:	200006d0 	.word	0x200006d0
 8002c30:	080161d4 	.word	0x080161d4
 8002c34:	08003681 	.word	0x08003681
 8002c38:	200006d4 	.word	0x200006d4
 8002c3c:	080161f8 	.word	0x080161f8
 8002c40:	08003901 	.word	0x08003901
 8002c44:	200006d8 	.word	0x200006d8

08002c48 <StartTaskRTC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskRTC */
void StartTaskRTC(void *argument)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b09e      	sub	sp, #120	; 0x78
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
	 	 RTC_AlarmTypeDef _AlarmON, _AlarmOFF;


	 	static uint8_t _PumpDispensing = 1;
	 	static uint8_t _AlarmPeriod = 1;
	 	uint8_t SdCard = 1;
 8002c50:	2301      	movs	r3, #1
 8002c52:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73





	 	 _AlarmON.AlarmTime.Hours = 8 ;
 8002c56:	2308      	movs	r3, #8
 8002c58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	 	 _AlarmON.AlarmTime.Minutes = 0 ;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	 	_AlarmON.AlarmTime.Seconds = 0 ;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32


		 _AlarmOFF.AlarmTime.Hours = 8 ;
 8002c68:	2308      	movs	r3, #8
 8002c6a:	723b      	strb	r3, [r7, #8]
		 _AlarmOFF.AlarmTime.Minutes = 1 ;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	727b      	strb	r3, [r7, #9]
		_AlarmOFF.AlarmTime.Seconds = 0 ;
 8002c70:	2300      	movs	r3, #0
 8002c72:	72bb      	strb	r3, [r7, #10]




	 	HAL_RTC_Init(&hrtc);
 8002c74:	4888      	ldr	r0, [pc, #544]	; (8002e98 <StartTaskRTC+0x250>)
 8002c76:	f006 f90f 	bl	8008e98 <HAL_RTC_Init>
		HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 8002c7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4619      	mov	r1, r3
 8002c82:	4885      	ldr	r0, [pc, #532]	; (8002e98 <StartTaskRTC+0x250>)
 8002c84:	f006 fafa 	bl	800927c <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 8002c88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4881      	ldr	r0, [pc, #516]	; (8002e98 <StartTaskRTC+0x250>)
 8002c92:	f006 fa11 	bl	80090b8 <HAL_RTC_GetTime>

		HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 8002c96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	487e      	ldr	r0, [pc, #504]	; (8002e98 <StartTaskRTC+0x250>)
 8002ca0:	f006 fb3b 	bl	800931a <HAL_RTC_SetAlarm>
		HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 8002ca4:	f107 0308 	add.w	r3, r7, #8
 8002ca8:	2200      	movs	r2, #0
 8002caa:	4619      	mov	r1, r3
 8002cac:	487a      	ldr	r0, [pc, #488]	; (8002e98 <StartTaskRTC+0x250>)
 8002cae:	f006 fb34 	bl	800931a <HAL_RTC_SetAlarm>
	//    _RTCTime.Minutes =0x0;
	//	_RTCTime.Seconds =0x0;
	// 	HAL_RTC_SetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
	// 	HAL_RTC_SetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);

		osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 8002cb2:	4b7a      	ldr	r3, [pc, #488]	; (8002e9c <StartTaskRTC+0x254>)
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cba:	2200      	movs	r2, #0
 8002cbc:	4978      	ldr	r1, [pc, #480]	; (8002ea0 <StartTaskRTC+0x258>)
 8002cbe:	f00c fc45 	bl	800f54c <osMessageQueuePut>
		osMessageQueuePut(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 8002cc2:	4b78      	ldr	r3, [pc, #480]	; (8002ea4 <StartTaskRTC+0x25c>)
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cca:	2200      	movs	r2, #0
 8002ccc:	4976      	ldr	r1, [pc, #472]	; (8002ea8 <StartTaskRTC+0x260>)
 8002cce:	f00c fc3d 	bl	800f54c <osMessageQueuePut>
	 	osTimerStart(TimerRTCHandle, 100);
 8002cd2:	4b76      	ldr	r3, [pc, #472]	; (8002eac <StartTaskRTC+0x264>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2164      	movs	r1, #100	; 0x64
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f00c f941 	bl	800ef60 <osTimerStart>
	 	uint32_t tick4 = osKernelGetTickCount();
 8002cde:	f00b fea3 	bl	800ea28 <osKernelGetTickCount>
 8002ce2:	6778      	str	r0, [r7, #116]	; 0x74
  /* Infinite loop */
  for(;;)
  {
	  //	  osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, 10);
	  //	  osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod, 0, 10);
	  printf("Task RTC start \n\r ");
 8002ce4:	4872      	ldr	r0, [pc, #456]	; (8002eb0 <StartTaskRTC+0x268>)
 8002ce6:	f002 fd1d 	bl	8005724 <printf_>
	  	  HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 8002cea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4869      	ldr	r0, [pc, #420]	; (8002e98 <StartTaskRTC+0x250>)
 8002cf4:	f006 fac2 	bl	800927c <HAL_RTC_GetDate>
	  	  HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 8002cf8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4865      	ldr	r0, [pc, #404]	; (8002e98 <StartTaskRTC+0x250>)
 8002d02:	f006 f9d9 	bl	80090b8 <HAL_RTC_GetTime>

	  	if (osOK == osSemaphoreAcquire(BinarySemCounterHandle, 0))
 8002d06:	4b6b      	ldr	r3, [pc, #428]	; (8002eb4 <StartTaskRTC+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f00c fb13 	bl	800f338 <osSemaphoreAcquire>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <StartTaskRTC+0xe8>
	  	{
	  		osMessageQueueGet(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 8002d18:	4b62      	ldr	r3, [pc, #392]	; (8002ea4 <StartTaskRTC+0x25c>)
 8002d1a:	6818      	ldr	r0, [r3, #0]
 8002d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d20:	2200      	movs	r2, #0
 8002d22:	4961      	ldr	r1, [pc, #388]	; (8002ea8 <StartTaskRTC+0x260>)
 8002d24:	f00c fc72 	bl	800f60c <osMessageQueueGet>
	  		_AlarmOFF.AlarmTime.Minutes = _PumpDispensing;
 8002d28:	4b5f      	ldr	r3, [pc, #380]	; (8002ea8 <StartTaskRTC+0x260>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	727b      	strb	r3, [r7, #9]
 8002d2e:	e010      	b.n	8002d52 <StartTaskRTC+0x10a>

	  	}
	  	else if (osOK == osSemaphoreAcquire(BinarySemSetAlarmHandle, 0))
 8002d30:	4b61      	ldr	r3, [pc, #388]	; (8002eb8 <StartTaskRTC+0x270>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2100      	movs	r1, #0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f00c fafe 	bl	800f338 <osSemaphoreAcquire>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <StartTaskRTC+0x10a>
	  	{
	  		osMessageQueueGet(QueueCounterAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 8002d42:	4b56      	ldr	r3, [pc, #344]	; (8002e9c <StartTaskRTC+0x254>)
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	4954      	ldr	r1, [pc, #336]	; (8002ea0 <StartTaskRTC+0x258>)
 8002d4e:	f00c fc5d 	bl	800f60c <osMessageQueueGet>
	  //			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
	  //		}



	  	   if (_AlarmON.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmON.AlarmTime.Minutes ==  _RTCTime.Minutes )
 8002d52:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002d56:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d137      	bne.n	8002dce <StartTaskRTC+0x186>
 8002d5e:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8002d62:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d131      	bne.n	8002dce <StartTaskRTC+0x186>
	  	  	  {
	  		  osMutexAcquire(MutexAlarmHandle, osWaitForever);
 8002d6a:	4b54      	ldr	r3, [pc, #336]	; (8002ebc <StartTaskRTC+0x274>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d72:	4618      	mov	r0, r3
 8002d74:	f00c f9a8 	bl	800f0c8 <osMutexAcquire>
	  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2120      	movs	r1, #32
 8002d7c:	4850      	ldr	r0, [pc, #320]	; (8002ec0 <StartTaskRTC+0x278>)
 8002d7e:	f003 fd55 	bl	800682c <HAL_GPIO_WritePin>
	  			  osThreadFlagsSet(TaskPumpONHandle, 0x00000001U);
 8002d82:	4b50      	ldr	r3, [pc, #320]	; (8002ec4 <StartTaskRTC+0x27c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f00b ff1d 	bl	800ebc8 <osThreadFlagsSet>
	  			  _AlarmON.AlarmTime.Hours = _AlarmON.AlarmTime.Hours + _AlarmPeriod;
 8002d8e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002d92:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <StartTaskRTC+0x258>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	  			  if(_AlarmON.AlarmTime.Hours >= 22 || _AlarmON.AlarmTime.Hours <= 8)
 8002d9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002da2:	2b15      	cmp	r3, #21
 8002da4:	d803      	bhi.n	8002dae <StartTaskRTC+0x166>
 8002da6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002daa:	2b08      	cmp	r3, #8
 8002dac:	d802      	bhi.n	8002db4 <StartTaskRTC+0x16c>
	  				  {
	  					  _AlarmON.AlarmTime.Hours = 8;
 8002dae:	2308      	movs	r3, #8
 8002db0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	  				  }
	  			  HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 8002db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002db8:	2200      	movs	r2, #0
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4836      	ldr	r0, [pc, #216]	; (8002e98 <StartTaskRTC+0x250>)
 8002dbe:	f006 faac 	bl	800931a <HAL_RTC_SetAlarm>
	  			  osMutexRelease(MutexAlarmHandle);
 8002dc2:	4b3e      	ldr	r3, [pc, #248]	; (8002ebc <StartTaskRTC+0x274>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f00c f9c9 	bl	800f15e <osMutexRelease>
 8002dcc:	e035      	b.n	8002e3a <StartTaskRTC+0x1f2>
	  	  	  }
	  	  else if(_AlarmOFF.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmOFF.AlarmTime.Minutes ==  _RTCTime.Minutes )
 8002dce:	7a3a      	ldrb	r2, [r7, #8]
 8002dd0:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d130      	bne.n	8002e3a <StartTaskRTC+0x1f2>
 8002dd8:	7a7a      	ldrb	r2, [r7, #9]
 8002dda:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d12b      	bne.n	8002e3a <StartTaskRTC+0x1f2>
	  	  	  {
	  		  	  osMutexAcquire(MutexAlarmHandle, osWaitForever);
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <StartTaskRTC+0x274>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f04f 31ff 	mov.w	r1, #4294967295
 8002dea:	4618      	mov	r0, r3
 8002dec:	f00c f96c 	bl	800f0c8 <osMutexAcquire>
	  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8002df0:	2200      	movs	r2, #0
 8002df2:	2120      	movs	r1, #32
 8002df4:	4832      	ldr	r0, [pc, #200]	; (8002ec0 <StartTaskRTC+0x278>)
 8002df6:	f003 fd19 	bl	800682c <HAL_GPIO_WritePin>
	  			  osThreadFlagsSet(TaskPumpOFFHandle, 0x00000010U);
 8002dfa:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <StartTaskRTC+0x280>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2110      	movs	r1, #16
 8002e00:	4618      	mov	r0, r3
 8002e02:	f00b fee1 	bl	800ebc8 <osThreadFlagsSet>

	  			  _AlarmOFF.AlarmTime.Hours = _AlarmOFF.AlarmTime.Hours + _AlarmPeriod;
 8002e06:	7a3a      	ldrb	r2, [r7, #8]
 8002e08:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <StartTaskRTC+0x258>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	723b      	strb	r3, [r7, #8]

	  			if(_AlarmOFF.AlarmTime.Hours >= 22 || _AlarmOFF.AlarmTime.Hours <= 8)
 8002e12:	7a3b      	ldrb	r3, [r7, #8]
 8002e14:	2b15      	cmp	r3, #21
 8002e16:	d802      	bhi.n	8002e1e <StartTaskRTC+0x1d6>
 8002e18:	7a3b      	ldrb	r3, [r7, #8]
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d801      	bhi.n	8002e22 <StartTaskRTC+0x1da>
	  			  	 {
	  			  		  _AlarmOFF.AlarmTime.Hours = 8;
 8002e1e:	2308      	movs	r3, #8
 8002e20:	723b      	strb	r3, [r7, #8]
	  			  	 }

	  			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 8002e22:	f107 0308 	add.w	r3, r7, #8
 8002e26:	2200      	movs	r2, #0
 8002e28:	4619      	mov	r1, r3
 8002e2a:	481b      	ldr	r0, [pc, #108]	; (8002e98 <StartTaskRTC+0x250>)
 8002e2c:	f006 fa75 	bl	800931a <HAL_RTC_SetAlarm>
	  			  osMutexRelease(MutexAlarmHandle);
 8002e30:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <StartTaskRTC+0x274>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f00c f992 	bl	800f15e <osMutexRelease>
	  //	  {
	  //
	  //
	  //		  CompareSeconds = RTCTime.Seconds;
	  //	  }
	  	  if (osOK == osSemaphoreAcquire(BinarySemRTCHandle, 0)) {
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <StartTaskRTC+0x284>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f00c fa79 	bl	800f338 <osSemaphoreAcquire>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d111      	bne.n	8002e70 <StartTaskRTC+0x228>
	  //	  	  			osMessageQueuePut(QueueRTCDataHandle, &_RTCDate, 0, osWaitForever);
	  	  	  			osMessageQueuePut(QueueRTCTimeHandle, &_RTCTime, 0, osWaitForever);
 8002e4c:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <StartTaskRTC+0x288>)
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002e54:	f04f 33ff 	mov.w	r3, #4294967295
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f00c fb77 	bl	800f54c <osMessageQueuePut>
	  	  	  			osMessageQueuePut(QueueRTCDataHandle, &_RTCDate, 0, osWaitForever);
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <StartTaskRTC+0x28c>)
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8002e66:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f00c fb6e 	bl	800f54c <osMessageQueuePut>
	  	  	  		}
	  	  printf("Task RTC exit \n\r ");
 8002e70:	4819      	ldr	r0, [pc, #100]	; (8002ed8 <StartTaskRTC+0x290>)
 8002e72:	f002 fc57 	bl	8005724 <printf_>
	  	  tick4 += ((70 * osKernelGetTickFreq()) / 1000);
 8002e76:	f00b fdec 	bl	800ea52 <osKernelGetTickFreq>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2246      	movs	r2, #70	; 0x46
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	4a16      	ldr	r2, [pc, #88]	; (8002edc <StartTaskRTC+0x294>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	099b      	lsrs	r3, r3, #6
 8002e8a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e8c:	4413      	add	r3, r2
 8002e8e:	677b      	str	r3, [r7, #116]	; 0x74
	  	  osDelayUntil(tick4);
 8002e90:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002e92:	f00b ffa6 	bl	800ede2 <osDelayUntil>
	  printf("Task RTC start \n\r ");
 8002e96:	e725      	b.n	8002ce4 <StartTaskRTC+0x9c>
 8002e98:	2000079c 	.word	0x2000079c
 8002e9c:	200006f0 	.word	0x200006f0
 8002ea0:	20000001 	.word	0x20000001
 8002ea4:	200006ec 	.word	0x200006ec
 8002ea8:	20000002 	.word	0x20000002
 8002eac:	20000708 	.word	0x20000708
 8002eb0:	08015bf0 	.word	0x08015bf0
 8002eb4:	20000738 	.word	0x20000738
 8002eb8:	2000073c 	.word	0x2000073c
 8002ebc:	20000720 	.word	0x20000720
 8002ec0:	40020000 	.word	0x40020000
 8002ec4:	200006c4 	.word	0x200006c4
 8002ec8:	200006c8 	.word	0x200006c8
 8002ecc:	20000734 	.word	0x20000734
 8002ed0:	200006e8 	.word	0x200006e8
 8002ed4:	200006e4 	.word	0x200006e4
 8002ed8:	08015c04 	.word	0x08015c04
 8002edc:	10624dd3 	.word	0x10624dd3

08002ee0 <StartTaskBme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBme280 */
void StartTaskBme280(void *argument)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBme280 */
	BmeData_t _BmeData;
		uint32_t tick3;
		osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002ee8:	4b31      	ldr	r3, [pc, #196]	; (8002fb0 <StartTaskBme280+0xd0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f00c f8e9 	bl	800f0c8 <osMutexAcquire>
		BME280_Init(&hi2c1, BME280_TEMPERATURE_16BIT, BME280_PRESSURE_ULTRALOWPOWER,
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	2303      	movs	r3, #3
 8002efc:	2201      	movs	r2, #1
 8002efe:	2101      	movs	r1, #1
 8002f00:	482c      	ldr	r0, [pc, #176]	; (8002fb4 <StartTaskBme280+0xd4>)
 8002f02:	f7fe feaf 	bl	8001c64 <BME280_Init>
		BME280_HUMINIDITY_STANDARD, BME280_NORMALMODE);
		BME280_SetConfig(BME280_STANDBY_MS_10, BME280_FILTER_OFF);
 8002f06:	2100      	movs	r1, #0
 8002f08:	2006      	movs	r0, #6
 8002f0a:	f7fe fe8b 	bl	8001c24 <BME280_SetConfig>
		osMutexRelease(MutexI2CHandle);
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <StartTaskBme280+0xd0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f00c f923 	bl	800f15e <osMutexRelease>
		osTimerStart(TimerBmeDataHandle, 300);
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <StartTaskBme280+0xd8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002f20:	4618      	mov	r0, r3
 8002f22:	f00c f81d 	bl	800ef60 <osTimerStart>

		tick3 = osKernelGetTickCount();
 8002f26:	f00b fd7f 	bl	800ea28 <osKernelGetTickCount>
 8002f2a:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {

	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <StartTaskBme280+0xd0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	4618      	mov	r0, r3
 8002f36:	f00c f8c7 	bl	800f0c8 <osMutexAcquire>
	  printf("TASK BME280 start\n\r ");
 8002f3a:	4820      	ldr	r0, [pc, #128]	; (8002fbc <StartTaskBme280+0xdc>)
 8002f3c:	f002 fbf2 	bl	8005724 <printf_>
	  	  BME280_ReadTemperatureAndPressureAndHuminidity(&_BmeData.Temperature,
 8002f40:	f107 0208 	add.w	r2, r7, #8
 8002f44:	f107 0308 	add.w	r3, r7, #8
 8002f48:	f103 0108 	add.w	r1, r3, #8
 8002f4c:	f107 0308 	add.w	r3, r7, #8
 8002f50:	3304      	adds	r3, #4
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7ff f870 	bl	8002038 <BME280_ReadTemperatureAndPressureAndHuminidity>
	  	  				&_BmeData.Pressure, &_BmeData.Humidity);
	  	printf("TASK BME280 exit\n\r ");
 8002f58:	4819      	ldr	r0, [pc, #100]	; (8002fc0 <StartTaskBme280+0xe0>)
 8002f5a:	f002 fbe3 	bl	8005724 <printf_>
	  	  osMutexRelease(MutexI2CHandle);
 8002f5e:	4b14      	ldr	r3, [pc, #80]	; (8002fb0 <StartTaskBme280+0xd0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f00c f8fb 	bl	800f15e <osMutexRelease>

	  	  if (osOK == osSemaphoreAcquire(BinarySemBme280Handle, 0)) {
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <StartTaskBme280+0xe4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2100      	movs	r1, #0
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f00c f9e2 	bl	800f338 <osSemaphoreAcquire>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d108      	bne.n	8002f8c <StartTaskBme280+0xac>
	  	  			osMessageQueuePut(QueueBmeHandle, &_BmeData, 0, osWaitForever);
 8002f7a:	4b13      	ldr	r3, [pc, #76]	; (8002fc8 <StartTaskBme280+0xe8>)
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	f107 0108 	add.w	r1, r7, #8
 8002f82:	f04f 33ff 	mov.w	r3, #4294967295
 8002f86:	2200      	movs	r2, #0
 8002f88:	f00c fae0 	bl	800f54c <osMessageQueuePut>
	  	  		}

	  //	  printf("Temperature: %.2f, Humidity: %.2f z \n\r", _BmeData.Temperature, _BmeData.Humidity);
	  //////    osDelay(100);
	  		tick3 += (235 * osKernelGetTickFreq()) / 1000;
 8002f8c:	f00b fd61 	bl	800ea52 <osKernelGetTickFreq>
 8002f90:	4603      	mov	r3, r0
 8002f92:	22eb      	movs	r2, #235	; 0xeb
 8002f94:	fb02 f303 	mul.w	r3, r2, r3
 8002f98:	4a0c      	ldr	r2, [pc, #48]	; (8002fcc <StartTaskBme280+0xec>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	099b      	lsrs	r3, r3, #6
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
	  		osDelayUntil(tick3);
 8002fa6:	6978      	ldr	r0, [r7, #20]
 8002fa8:	f00b ff1b 	bl	800ede2 <osDelayUntil>
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002fac:	e7be      	b.n	8002f2c <StartTaskBme280+0x4c>
 8002fae:	bf00      	nop
 8002fb0:	20000718 	.word	0x20000718
 8002fb4:	20000748 	.word	0x20000748
 8002fb8:	20000700 	.word	0x20000700
 8002fbc:	08015c18 	.word	0x08015c18
 8002fc0:	08015c30 	.word	0x08015c30
 8002fc4:	2000072c 	.word	0x2000072c
 8002fc8:	200006dc 	.word	0x200006dc
 8002fcc:	10624dd3 	.word	0x10624dd3

08002fd0 <StartTaskBH1750>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBH1750 */
void StartTaskBH1750(void *argument)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	uint32_t tick4;
		BHData_t _BHData;

		//	float BH1750_lux;

		osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002fd8:	4b2b      	ldr	r3, [pc, #172]	; (8003088 <StartTaskBH1750+0xb8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f00c f871 	bl	800f0c8 <osMutexAcquire>
		BH1750_Init(&hi2c1);
 8002fe6:	4829      	ldr	r0, [pc, #164]	; (800308c <StartTaskBH1750+0xbc>)
 8002fe8:	f7fe fc60 	bl	80018ac <BH1750_Init>
		BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8002fec:	2011      	movs	r0, #17
 8002fee:	f7fe fc93 	bl	8001918 <BH1750_SetMode>
		osMutexRelease(MutexI2CHandle);
 8002ff2:	4b25      	ldr	r3, [pc, #148]	; (8003088 <StartTaskBH1750+0xb8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00c f8b1 	bl	800f15e <osMutexRelease>

		osTimerStart(TimerBh1750DataHandle, 200);
 8002ffc:	4b24      	ldr	r3, [pc, #144]	; (8003090 <StartTaskBH1750+0xc0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	21c8      	movs	r1, #200	; 0xc8
 8003002:	4618      	mov	r0, r3
 8003004:	f00b ffac 	bl	800ef60 <osTimerStart>
		tick4 = osKernelGetTickCount();
 8003008:	f00b fd0e 	bl	800ea28 <osKernelGetTickCount>
 800300c:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 800300e:	4b1e      	ldr	r3, [pc, #120]	; (8003088 <StartTaskBH1750+0xb8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f04f 31ff 	mov.w	r1, #4294967295
 8003016:	4618      	mov	r0, r3
 8003018:	f00c f856 	bl	800f0c8 <osMutexAcquire>
	  printf("TASK BH1750 start \n\r ");
 800301c:	481d      	ldr	r0, [pc, #116]	; (8003094 <StartTaskBH1750+0xc4>)
 800301e:	f002 fb81 	bl	8005724 <printf_>
	 	  		BH1750_ReadLight(&_BHData.LightIntensity);
 8003022:	f107 0308 	add.w	r3, r7, #8
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fcf6 	bl	8001a18 <BH1750_ReadLight>
	 	  //	  	  printf("Light: %.2f \n\r", _BhData.LightIntensity);
	 	  		printf("TASK BH1750 exit \n\r ");
 800302c:	481a      	ldr	r0, [pc, #104]	; (8003098 <StartTaskBH1750+0xc8>)
 800302e:	f002 fb79 	bl	8005724 <printf_>
	 	  		osMutexRelease(MutexI2CHandle);
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <StartTaskBH1750+0xb8>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f00c f891 	bl	800f15e <osMutexRelease>

	 	  		if (osOK == osSemaphoreAcquire(BinarySemBH1750Handle, 0)) {
 800303c:	4b17      	ldr	r3, [pc, #92]	; (800309c <StartTaskBH1750+0xcc>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f00c f978 	bl	800f338 <osSemaphoreAcquire>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d108      	bne.n	8003060 <StartTaskBH1750+0x90>
	 	  			osMessageQueuePut(QueueBh1750Handle, &_BHData, 0, osWaitForever);
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <StartTaskBH1750+0xd0>)
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	f107 0108 	add.w	r1, r7, #8
 8003056:	f04f 33ff 	mov.w	r3, #4294967295
 800305a:	2200      	movs	r2, #0
 800305c:	f00c fa76 	bl	800f54c <osMessageQueuePut>
	 	  //	  	 	  	  {
	 	  //	  	 	  		  size = sprintf(buffer, "BH1750 Lux: %.2f\n\r", BH1750_lux);
	 	  //	  	 	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, size, 100);
	 	  //	  	 	  	  }

	 	  		tick4 += ((165 * osKernelGetTickFreq()) / 1000);
 8003060:	f00b fcf7 	bl	800ea52 <osKernelGetTickFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4613      	mov	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4413      	add	r3, r2
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	4413      	add	r3, r2
 8003070:	4a0c      	ldr	r2, [pc, #48]	; (80030a4 <StartTaskBH1750+0xd4>)
 8003072:	fba2 2303 	umull	r2, r3, r2, r3
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
	 	  		osDelayUntil(tick4);
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f00b feaf 	bl	800ede2 <osDelayUntil>
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8003084:	e7c3      	b.n	800300e <StartTaskBH1750+0x3e>
 8003086:	bf00      	nop
 8003088:	20000718 	.word	0x20000718
 800308c:	20000748 	.word	0x20000748
 8003090:	20000704 	.word	0x20000704
 8003094:	08015c44 	.word	0x08015c44
 8003098:	08015c5c 	.word	0x08015c5c
 800309c:	20000730 	.word	0x20000730
 80030a0:	200006e0 	.word	0x200006e0
 80030a4:	10624dd3 	.word	0x10624dd3

080030a8 <StartTaskSSD1306>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSSD1306 */
void StartTaskSSD1306(void *argument)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b0ed      	sub	sp, #436	; 0x1b4
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80030b2:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 80030b6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTaskSSD1306 */
	Data_Structure_t _DataStructure;
	Data_Structure_t *PointerData =&_DataStructure;
 80030b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80030bc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
	BHData_t _BHData;
	INA219Data_t _INA219_Battery;

	RTC_TimeTypeDef _RTCTime;
	RTC_DateTypeDef _RTCData;
	uint8_t _AlarmPeriod = 1;
 80030c0:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80030c4:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]

	uint8_t _PumpDispensing = 1;
 80030cc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80030d0:	f5a3 73cf 	sub.w	r3, r3, #414	; 0x19e
 80030d4:	2201      	movs	r2, #1
 80030d6:	701a      	strb	r2, [r3, #0]


	uint32_t tick2;
	uint8_t i =1;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3



	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 80030de:	4b3b      	ldr	r3, [pc, #236]	; (80031cc <StartTaskSSD1306+0x124>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f04f 31ff 	mov.w	r1, #4294967295
 80030e6:	4618      	mov	r0, r3
 80030e8:	f00b ffee 	bl	800f0c8 <osMutexAcquire>
	SSD1306_Init(&hi2c1);
 80030ec:	4838      	ldr	r0, [pc, #224]	; (80031d0 <StartTaskSSD1306+0x128>)
 80030ee:	f7fe fb85 	bl	80017fc <SSD1306_Init>
	osMutexRelease(MutexI2C2Handle);
 80030f2:	4b36      	ldr	r3, [pc, #216]	; (80031cc <StartTaskSSD1306+0x124>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f00c f831 	bl	800f15e <osMutexRelease>

	GFX_SetFont(font_8x5);
 80030fc:	4835      	ldr	r0, [pc, #212]	; (80031d4 <StartTaskSSD1306+0x12c>)
 80030fe:	f7fd ff49 	bl	8000f94 <GFX_SetFont>
	SSD1306_Clear(BLACK);
 8003102:	2000      	movs	r0, #0
 8003104:	f7fe fb1c 	bl	8001740 <SSD1306_Clear>
	SSD1306_Display();
 8003108:	f7fe fb38 	bl	800177c <SSD1306_Display>
	osTimerStart(TimerSDCardHandle, 20000);
 800310c:	4b32      	ldr	r3, [pc, #200]	; (80031d8 <StartTaskSSD1306+0x130>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f644 6120 	movw	r1, #20000	; 0x4e20
 8003114:	4618      	mov	r0, r3
 8003116:	f00b ff23 	bl	800ef60 <osTimerStart>
	tick2 = osKernelGetTickCount();
 800311a:	f00b fc85 	bl	800ea28 <osKernelGetTickCount>
 800311e:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
  /* Infinite loop */
  for(;;)
  {
	  	  SSD1306_Clear(BLACK);
 8003122:	2000      	movs	r0, #0
 8003124:	f7fe fb0c 	bl	8001740 <SSD1306_Clear>
	  	  osMessageQueueGet(QueueBmeHandle, &_BmeData, 0, 50);
 8003128:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <StartTaskSSD1306+0x134>)
 800312a:	6818      	ldr	r0, [r3, #0]
 800312c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8003130:	2332      	movs	r3, #50	; 0x32
 8003132:	2200      	movs	r2, #0
 8003134:	f00c fa6a 	bl	800f60c <osMessageQueueGet>
	  	  printf("1\n\r");
 8003138:	4829      	ldr	r0, [pc, #164]	; (80031e0 <StartTaskSSD1306+0x138>)
 800313a:	f002 faf3 	bl	8005724 <printf_>
	  	  osMessageQueueGet(QueueBh1750Handle, &_BHData, 0, 50);
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <StartTaskSSD1306+0x13c>)
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8003146:	2332      	movs	r3, #50	; 0x32
 8003148:	2200      	movs	r2, #0
 800314a:	f00c fa5f 	bl	800f60c <osMessageQueueGet>
	  	  printf("2\n\r");
 800314e:	4826      	ldr	r0, [pc, #152]	; (80031e8 <StartTaskSSD1306+0x140>)
 8003150:	f002 fae8 	bl	8005724 <printf_>
	  //	  osMessageQueueGet(QueueRTCDataHandle, &_RTCDate, 0,osWaitForever);
	  	  osMessageQueueGet(QuequePVHandle, &_INA219_Battery, 0, 50);
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <StartTaskSSD1306+0x144>)
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800315c:	2332      	movs	r3, #50	; 0x32
 800315e:	2200      	movs	r2, #0
 8003160:	f00c fa54 	bl	800f60c <osMessageQueueGet>
	  	printf("3\n\r");
 8003164:	4822      	ldr	r0, [pc, #136]	; (80031f0 <StartTaskSSD1306+0x148>)
 8003166:	f002 fadd 	bl	8005724 <printf_>
	  	  osMessageQueueGet(QueueRTCTimeHandle, &_RTCTime, 0, 50);
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <StartTaskSSD1306+0x14c>)
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	f107 0110 	add.w	r1, r7, #16
 8003172:	2332      	movs	r3, #50	; 0x32
 8003174:	2200      	movs	r2, #0
 8003176:	f00c fa49 	bl	800f60c <osMessageQueueGet>
	  	printf("4\n\r");
 800317a:	481f      	ldr	r0, [pc, #124]	; (80031f8 <StartTaskSSD1306+0x150>)
 800317c:	f002 fad2 	bl	8005724 <printf_>
	  	  osMessageQueueGet(QueueRTCDataHandle, &_RTCData, 0, 50);
 8003180:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <StartTaskSSD1306+0x154>)
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	f107 010c 	add.w	r1, r7, #12
 8003188:	2332      	movs	r3, #50	; 0x32
 800318a:	2200      	movs	r2, #0
 800318c:	f00c fa3e 	bl	800f60c <osMessageQueueGet>
	  	printf("5\n\r");
 8003190:	481b      	ldr	r0, [pc, #108]	; (8003200 <StartTaskSSD1306+0x158>)
 8003192:	f002 fac7 	bl	8005724 <printf_>



	  	  if(osOK== osMessageQueueGet(QueueCounterPumpHandle, &_PumpDispensing, 0, 50))
 8003196:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <StartTaskSSD1306+0x15c>)
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	f107 010a 	add.w	r1, r7, #10
 800319e:	2332      	movs	r3, #50	; 0x32
 80031a0:	2200      	movs	r2, #0
 80031a2:	f00c fa33 	bl	800f60c <osMessageQueueGet>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d12f      	bne.n	800320c <StartTaskSSD1306+0x164>
	  	  {

	  		  osMessageQueuePut(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 80031ac:	4b15      	ldr	r3, [pc, #84]	; (8003204 <StartTaskSSD1306+0x15c>)
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	f107 010a 	add.w	r1, r7, #10
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	2200      	movs	r2, #0
 80031ba:	f00c f9c7 	bl	800f54c <osMessageQueuePut>
	  		  osSemaphoreRelease(BinarySemCounterHandle);
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <StartTaskSSD1306+0x160>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f00c f90a 	bl	800f3dc <osSemaphoreRelease>
 80031c8:	e039      	b.n	800323e <StartTaskSSD1306+0x196>
 80031ca:	bf00      	nop
 80031cc:	20000724 	.word	0x20000724
 80031d0:	20000748 	.word	0x20000748
 80031d4:	08015ed4 	.word	0x08015ed4
 80031d8:	2000070c 	.word	0x2000070c
 80031dc:	200006dc 	.word	0x200006dc
 80031e0:	08015c74 	.word	0x08015c74
 80031e4:	200006e0 	.word	0x200006e0
 80031e8:	08015c78 	.word	0x08015c78
 80031ec:	200006fc 	.word	0x200006fc
 80031f0:	08015c7c 	.word	0x08015c7c
 80031f4:	200006e8 	.word	0x200006e8
 80031f8:	08015c80 	.word	0x08015c80
 80031fc:	200006e4 	.word	0x200006e4
 8003200:	08015c84 	.word	0x08015c84
 8003204:	200006ec 	.word	0x200006ec
 8003208:	20000738 	.word	0x20000738
	  	  }

	  	  else 	if(osOK== osMessageQueueGet(QueueCounterAlarmHandle, &_AlarmPeriod, 0, 50))
 800320c:	4ba1      	ldr	r3, [pc, #644]	; (8003494 <StartTaskSSD1306+0x3ec>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	f107 010b 	add.w	r1, r7, #11
 8003214:	2332      	movs	r3, #50	; 0x32
 8003216:	2200      	movs	r2, #0
 8003218:	f00c f9f8 	bl	800f60c <osMessageQueueGet>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10d      	bne.n	800323e <StartTaskSSD1306+0x196>
	  	 {

	  		   osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 8003222:	4b9c      	ldr	r3, [pc, #624]	; (8003494 <StartTaskSSD1306+0x3ec>)
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	f107 010b 	add.w	r1, r7, #11
 800322a:	f04f 33ff 	mov.w	r3, #4294967295
 800322e:	2200      	movs	r2, #0
 8003230:	f00c f98c 	bl	800f54c <osMessageQueuePut>
	  		   osSemaphoreRelease(BinarySemSetAlarmHandle);
 8003234:	4b98      	ldr	r3, [pc, #608]	; (8003498 <StartTaskSSD1306+0x3f0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f00c f8cf 	bl	800f3dc <osSemaphoreRelease>
	  	 }
//	  	   osMessageQueueGet(QueueCounterAlarmHandle, &_AlarmPeriod, 0, 50);


//	  	   osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, osWaitForever);
	  	  sprintf(PointerData->MessageData, "Data: %02d:%02d:%02d;",_RTCData.Date,_RTCData.Month,_RTCData.Year);
 800323e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003242:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8003246:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800324a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800324e:	789b      	ldrb	r3, [r3, #2]
 8003250:	461a      	mov	r2, r3
 8003252:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003256:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800325a:	785b      	ldrb	r3, [r3, #1]
 800325c:	4619      	mov	r1, r3
 800325e:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003262:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003266:	78db      	ldrb	r3, [r3, #3]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	460b      	mov	r3, r1
 800326c:	498b      	ldr	r1, [pc, #556]	; (800349c <StartTaskSSD1306+0x3f4>)
 800326e:	f002 fa75 	bl	800575c <sprintf_>
	      sprintf(PointerData->MessageTime, "Time: %02d:%02d:%02d;",_RTCTime.Hours,_RTCTime.Minutes,_RTCTime.Seconds);
 8003272:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003276:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800327a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800327e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800328a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800328e:	785b      	ldrb	r3, [r3, #1]
 8003290:	4619      	mov	r1, r3
 8003292:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003296:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800329a:	789b      	ldrb	r3, [r3, #2]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	460b      	mov	r3, r1
 80032a0:	497f      	ldr	r1, [pc, #508]	; (80034a0 <StartTaskSSD1306+0x3f8>)
 80032a2:	f002 fa5b 	bl	800575c <sprintf_>
	  	  sprintf(PointerData->MessageTemp, "Temperature: %.2f; ", _BmeData.Temperature);
 80032a6:	f8d7 419c 	ldr.w	r4, [r7, #412]	; 0x19c
 80032aa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80032ae:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f94f 	bl	8000558 <__aeabi_f2d>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4979      	ldr	r1, [pc, #484]	; (80034a4 <StartTaskSSD1306+0x3fc>)
 80032c0:	4620      	mov	r0, r4
 80032c2:	f002 fa4b 	bl	800575c <sprintf_>
	  	  sprintf(PointerData->MessageHum, "Humidity: %.2f;", _BmeData.Humidity);
 80032c6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80032ca:	f103 0420 	add.w	r4, r3, #32
 80032ce:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80032d2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f7fd f93d 	bl	8000558 <__aeabi_f2d>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4971      	ldr	r1, [pc, #452]	; (80034a8 <StartTaskSSD1306+0x400>)
 80032e4:	4620      	mov	r0, r4
 80032e6:	f002 fa39 	bl	800575c <sprintf_>
	  	  sprintf(PointerData->MessageInten, "Lx: %.2f;", _BHData.LightIntensity);
 80032ea:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80032ee:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80032f2:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80032f6:	f5a3 73be 	sub.w	r3, r3, #380	; 0x17c
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd f92b 	bl	8000558 <__aeabi_f2d>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4969      	ldr	r1, [pc, #420]	; (80034ac <StartTaskSSD1306+0x404>)
 8003308:	4620      	mov	r0, r4
 800330a:	f002 fa27 	bl	800575c <sprintf_>
	  	  sprintf(PointerData->MessagePvVoltageBus,"Battery Voltage bus: %u;",_INA219_Battery.VoltageBus);
 800330e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003312:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8003316:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800331a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4963      	ldr	r1, [pc, #396]	; (80034b0 <StartTaskSSD1306+0x408>)
 8003324:	f002 fa1a 	bl	800575c <sprintf_>
	  	  sprintf(PointerData->MessagePVVoltageShunt,"Battery Voltage shunt: %u;",_INA219_Battery.VoltageShunt);
 8003328:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800332c:	f103 00e0 	add.w	r0, r3, #224	; 0xe0
 8003330:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003334:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003338:	885b      	ldrh	r3, [r3, #2]
 800333a:	461a      	mov	r2, r3
 800333c:	495d      	ldr	r1, [pc, #372]	; (80034b4 <StartTaskSSD1306+0x40c>)
 800333e:	f002 fa0d 	bl	800575c <sprintf_>
	  	  sprintf(PointerData->MessagePVCurrent,"Current: %d;",_INA219_Battery.Current);
 8003342:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003346:	f503 7080 	add.w	r0, r3, #256	; 0x100
 800334a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800334e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003352:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003356:	461a      	mov	r2, r3
 8003358:	4957      	ldr	r1, [pc, #348]	; (80034b8 <StartTaskSSD1306+0x410>)
 800335a:	f002 f9ff 	bl	800575c <sprintf_>
	  //  sprintf(MessageData, "Data: %02d.%02d.20%02d  Time: %02d:%02d:%02d:%02d",_RTCDate.Date,_RTCDate.Month,_RTCDate.Year,_RTCTime.Hours,_RTCTime.Minutes,_RTCTime.Seconds);


	  	  sprintf(PointerData->MessageTimePump, "Pump OP Time: %02d Min;",_PumpDispensing);
 800335e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8003362:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8003366:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800336a:	f5a3 73cf 	sub.w	r3, r3, #414	; 0x19e
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	4952      	ldr	r1, [pc, #328]	; (80034bc <StartTaskSSD1306+0x414>)
 8003374:	f002 f9f2 	bl	800575c <sprintf_>
	  	  sprintf(PointerData->MessageFreqAlarm, "Alarm Period: %02d H;", _AlarmPeriod);
 8003378:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800337c:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8003380:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8003384:	f2a3 139d 	subw	r3, r3, #413	; 0x19d
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	494c      	ldr	r1, [pc, #304]	; (80034c0 <StartTaskSSD1306+0x418>)
 800338e:	f002 f9e5 	bl	800575c <sprintf_>

	  	if (osOK == osSemaphoreAcquire(BinarySdCardHandle, 0)) {
 8003392:	4b4c      	ldr	r3, [pc, #304]	; (80034c4 <StartTaskSSD1306+0x41c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f00b ffcd 	bl	800f338 <osSemaphoreAcquire>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d107      	bne.n	80033b4 <StartTaskSSD1306+0x30c>
	  		  	  			osMessageQueuePut(QueSDCARDHandle,PointerData, 0, 50);
 80033a4:	4b48      	ldr	r3, [pc, #288]	; (80034c8 <StartTaskSSD1306+0x420>)
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	2332      	movs	r3, #50	; 0x32
 80033aa:	2200      	movs	r2, #0
 80033ac:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 80033b0:	f00c f8cc 	bl	800f54c <osMessageQueuePut>
	  		  	  		}




	  	  GFX_DrawString(0, 0, PointerData->MessageTime, WHITE, 0);
 80033b4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80033b8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80033bc:	2300      	movs	r3, #0
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2301      	movs	r3, #1
 80033c2:	2100      	movs	r1, #0
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fd feaf 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 10, PointerData->MessageTemp, WHITE, 0);
 80033ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80033ce:	2300      	movs	r3, #0
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2301      	movs	r3, #1
 80033d4:	210a      	movs	r1, #10
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fd fea6 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 20, PointerData->MessageHum, WHITE, 0);
 80033dc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80033e0:	f103 0220 	add.w	r2, r3, #32
 80033e4:	2300      	movs	r3, #0
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2301      	movs	r3, #1
 80033ea:	2114      	movs	r1, #20
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7fd fe9b 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 30, PointerData->MessageInten, WHITE, 0);
 80033f2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80033f6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80033fa:	2300      	movs	r3, #0
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2301      	movs	r3, #1
 8003400:	211e      	movs	r1, #30
 8003402:	2000      	movs	r0, #0
 8003404:	f7fd fe90 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 40, PointerData->MessageTimePump, WHITE, 0);
 8003408:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800340c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8003410:	2300      	movs	r3, #0
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2301      	movs	r3, #1
 8003416:	2128      	movs	r1, #40	; 0x28
 8003418:	2000      	movs	r0, #0
 800341a:	f7fd fe85 	bl	8001128 <GFX_DrawString>


	  	  if(i%3 ==0)
 800341e:	f897 21a3 	ldrb.w	r2, [r7, #419]	; 0x1a3
 8003422:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <StartTaskSSD1306+0x424>)
 8003424:	fba3 1302 	umull	r1, r3, r3, r2
 8003428:	0859      	lsrs	r1, r3, #1
 800342a:	460b      	mov	r3, r1
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	440b      	add	r3, r1
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <StartTaskSSD1306+0x3ac>
	  	  {
	  	  GFX_DrawString(0, 50, PointerData->MessageFreqAlarm, WHITE, 0);
 8003438:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800343c:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8003440:	2300      	movs	r3, #0
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	2301      	movs	r3, #1
 8003446:	2132      	movs	r1, #50	; 0x32
 8003448:	2000      	movs	r0, #0
 800344a:	f7fd fe6d 	bl	8001128 <GFX_DrawString>
	  	  i=1;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
	  	  }

	  	  SSD1306_Display();
 8003454:	f7fe f992 	bl	800177c <SSD1306_Display>
	  	  i=i+1;
 8003458:	f897 31a3 	ldrb.w	r3, [r7, #419]	; 0x1a3
 800345c:	3301      	adds	r3, #1
 800345e:	f887 31a3 	strb.w	r3, [r7, #419]	; 0x1a3
	  	  printf("TASK OLED \n\r");
 8003462:	481b      	ldr	r0, [pc, #108]	; (80034d0 <StartTaskSSD1306+0x428>)
 8003464:	f002 f95e 	bl	8005724 <printf_>

	  //		printf("TASK OLED I2C MUTEX is released \n\r");
	        tick2 += (600 * osKernelGetTickFreq()) / 1000;
 8003468:	f00b faf3 	bl	800ea52 <osKernelGetTickFreq>
 800346c:	4603      	mov	r3, r0
 800346e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	4a17      	ldr	r2, [pc, #92]	; (80034d4 <StartTaskSSD1306+0x42c>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003482:	4413      	add	r3, r2
 8003484:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	  	  osDelayUntil(tick2);
 8003488:	f8d7 01a4 	ldr.w	r0, [r7, #420]	; 0x1a4
 800348c:	f00b fca9 	bl	800ede2 <osDelayUntil>
	  	  SSD1306_Clear(BLACK);
 8003490:	e647      	b.n	8003122 <StartTaskSSD1306+0x7a>
 8003492:	bf00      	nop
 8003494:	200006f0 	.word	0x200006f0
 8003498:	2000073c 	.word	0x2000073c
 800349c:	08015c88 	.word	0x08015c88
 80034a0:	08015ca0 	.word	0x08015ca0
 80034a4:	08015cb8 	.word	0x08015cb8
 80034a8:	08015ccc 	.word	0x08015ccc
 80034ac:	08015cdc 	.word	0x08015cdc
 80034b0:	08015ce8 	.word	0x08015ce8
 80034b4:	08015d04 	.word	0x08015d04
 80034b8:	08015d20 	.word	0x08015d20
 80034bc:	08015d30 	.word	0x08015d30
 80034c0:	08015d48 	.word	0x08015d48
 80034c4:	20000740 	.word	0x20000740
 80034c8:	200006f4 	.word	0x200006f4
 80034cc:	aaaaaaab 	.word	0xaaaaaaab
 80034d0:	08015d60 	.word	0x08015d60
 80034d4:	10624dd3 	.word	0x10624dd3

080034d8 <StartTaskPumpON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpON */
void StartTaskPumpON(void *argument)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPumpON */
	drv8835_init();
 80034e0:	f7ff f9c6 	bl	8002870 <drv8835_init>
  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80034e4:	f04f 32ff 	mov.w	r2, #4294967295
 80034e8:	2100      	movs	r1, #0
 80034ea:	2001      	movs	r0, #1
 80034ec:	f00b fbf8 	bl	800ece0 <osThreadFlagsWait>

	  drv8835_set_motorA_speed(99);
 80034f0:	2063      	movs	r0, #99	; 0x63
 80034f2:	f7ff f9a1 	bl	8002838 <drv8835_set_motorA_speed>
	  osThreadFlagsClear(0x00000001U);
 80034f6:	2001      	movs	r0, #1
 80034f8:	f00b fbb4 	bl	800ec64 <osThreadFlagsClear>
	  osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 80034fc:	e7f2      	b.n	80034e4 <StartTaskPumpON+0xc>

080034fe <StartTaskPumpOFF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpOFF */
void StartTaskPumpOFF(void *argument)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPumpOFF */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x00000010U, osFlagsWaitAll, osWaitForever);
 8003506:	f04f 32ff 	mov.w	r2, #4294967295
 800350a:	2101      	movs	r1, #1
 800350c:	2010      	movs	r0, #16
 800350e:	f00b fbe7 	bl	800ece0 <osThreadFlagsWait>


	  	  drv8835_set_motorA_speed(0);
 8003512:	2000      	movs	r0, #0
 8003514:	f7ff f990 	bl	8002838 <drv8835_set_motorA_speed>
	  osThreadFlagsWait(0x00000010U, osFlagsWaitAll, osWaitForever);
 8003518:	e7f5      	b.n	8003506 <StartTaskPumpOFF+0x8>
	...

0800351c <StartTaskCounterPump>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCounterPump */
void StartTaskCounterPump(void *argument)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCounterPump */
	static uint8_t _PumpDipensing = 1;
	uint32_t tick = osKernelGetTickCount();
 8003524:	f00b fa80 	bl	800ea28 <osKernelGetTickCount>
 8003528:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 800352a:	2101      	movs	r1, #1
 800352c:	4823      	ldr	r0, [pc, #140]	; (80035bc <StartTaskCounterPump+0xa0>)
 800352e:	f003 f965 	bl	80067fc <HAL_GPIO_ReadPin>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d114      	bne.n	8003562 <StartTaskCounterPump+0x46>
	 	  {
	 	  	  _PumpDipensing= _PumpDipensing + 1;
 8003538:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <StartTaskCounterPump+0xa4>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	b2da      	uxtb	r2, r3
 8003540:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <StartTaskCounterPump+0xa4>)
 8003542:	701a      	strb	r2, [r3, #0]
	 	  		if(_PumpDipensing >=60)
 8003544:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <StartTaskCounterPump+0xa4>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b3b      	cmp	r3, #59	; 0x3b
 800354a:	d902      	bls.n	8003552 <StartTaskCounterPump+0x36>
	 	  		{
	 	  			_PumpDipensing = 1;
 800354c:	4b1c      	ldr	r3, [pc, #112]	; (80035c0 <StartTaskCounterPump+0xa4>)
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
	 	  		}
	 	  		osMessageQueuePut(QueueCounterPumpHandle, &_PumpDipensing , 0, 50);
 8003552:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <StartTaskCounterPump+0xa8>)
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	2332      	movs	r3, #50	; 0x32
 8003558:	2200      	movs	r2, #0
 800355a:	4919      	ldr	r1, [pc, #100]	; (80035c0 <StartTaskCounterPump+0xa4>)
 800355c:	f00b fff6 	bl	800f54c <osMessageQueuePut>
 8003560:	e01a      	b.n	8003598 <StartTaskCounterPump+0x7c>
	 	  }
	 	  else if(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)== GPIO_PIN_RESET)
 8003562:	2102      	movs	r1, #2
 8003564:	4815      	ldr	r0, [pc, #84]	; (80035bc <StartTaskCounterPump+0xa0>)
 8003566:	f003 f949 	bl	80067fc <HAL_GPIO_ReadPin>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d113      	bne.n	8003598 <StartTaskCounterPump+0x7c>
	 	  {
	 		  _PumpDipensing= _PumpDipensing -1;
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <StartTaskCounterPump+0xa4>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	3b01      	subs	r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <StartTaskCounterPump+0xa4>)
 800357a:	701a      	strb	r2, [r3, #0]
	 		 	  		if(_PumpDipensing <=0)
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <StartTaskCounterPump+0xa4>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <StartTaskCounterPump+0x6e>
	 		 	  		{
	 		 	  			_PumpDipensing = 59;
 8003584:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <StartTaskCounterPump+0xa4>)
 8003586:	223b      	movs	r2, #59	; 0x3b
 8003588:	701a      	strb	r2, [r3, #0]
	 		 	  		}
	 		   osMessageQueuePut(QueueCounterPumpHandle, &_PumpDipensing , 0, 50);
 800358a:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <StartTaskCounterPump+0xa8>)
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	2332      	movs	r3, #50	; 0x32
 8003590:	2200      	movs	r2, #0
 8003592:	490b      	ldr	r1, [pc, #44]	; (80035c0 <StartTaskCounterPump+0xa4>)
 8003594:	f00b ffda 	bl	800f54c <osMessageQueuePut>
	 	  }

	 	  	  	tick += (220 * osKernelGetTickFreq()) / 1000;
 8003598:	f00b fa5b 	bl	800ea52 <osKernelGetTickFreq>
 800359c:	4603      	mov	r3, r0
 800359e:	22dc      	movs	r2, #220	; 0xdc
 80035a0:	fb02 f303 	mul.w	r3, r2, r3
 80035a4:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <StartTaskCounterPump+0xac>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4413      	add	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
	 	  	  	osDelayUntil(tick);
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f00b fc15 	bl	800ede2 <osDelayUntil>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 80035b8:	e7b7      	b.n	800352a <StartTaskCounterPump+0xe>
 80035ba:	bf00      	nop
 80035bc:	40020800 	.word	0x40020800
 80035c0:	20000003 	.word	0x20000003
 80035c4:	200006ec 	.word	0x200006ec
 80035c8:	10624dd3 	.word	0x10624dd3

080035cc <StartTaskAlarmCounter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAlarmCounter */
void StartTaskAlarmCounter(void *argument)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAlarmCounter */
	static uint8_t _AlarmPeriod = 1;
	uint32_t tick = osKernelGetTickCount();
 80035d4:	f00b fa28 	bl	800ea28 <osKernelGetTickCount>
 80035d8:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)== GPIO_PIN_RESET)
 80035da:	2101      	movs	r1, #1
 80035dc:	4823      	ldr	r0, [pc, #140]	; (800366c <StartTaskAlarmCounter+0xa0>)
 80035de:	f003 f90d 	bl	80067fc <HAL_GPIO_ReadPin>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d114      	bne.n	8003612 <StartTaskAlarmCounter+0x46>
	 	 	  {
	 	 	  	  _AlarmPeriod= _AlarmPeriod + 1;
 80035e8:	4b21      	ldr	r3, [pc, #132]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 80035f2:	701a      	strb	r2, [r3, #0]
	 	 	  		if(_AlarmPeriod >=16)
 80035f4:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b0f      	cmp	r3, #15
 80035fa:	d902      	bls.n	8003602 <StartTaskAlarmCounter+0x36>
	 	 	  		{
	 	 	  			_AlarmPeriod = 1;
 80035fc:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 80035fe:	2201      	movs	r2, #1
 8003600:	701a      	strb	r2, [r3, #0]
	 	 	  		}
	 	 	  		osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod , 0, 50);
 8003602:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <StartTaskAlarmCounter+0xa8>)
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	2332      	movs	r3, #50	; 0x32
 8003608:	2200      	movs	r2, #0
 800360a:	4919      	ldr	r1, [pc, #100]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 800360c:	f00b ff9e 	bl	800f54c <osMessageQueuePut>
 8003610:	e01a      	b.n	8003648 <StartTaskAlarmCounter+0x7c>
	 	 	  }
	 	 	  else if(HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin)== GPIO_PIN_RESET)
 8003612:	2108      	movs	r1, #8
 8003614:	4818      	ldr	r0, [pc, #96]	; (8003678 <StartTaskAlarmCounter+0xac>)
 8003616:	f003 f8f1 	bl	80067fc <HAL_GPIO_ReadPin>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d113      	bne.n	8003648 <StartTaskAlarmCounter+0x7c>
	 	 	  {
	 	 		  _AlarmPeriod= _AlarmPeriod - 1;
 8003620:	4b13      	ldr	r3, [pc, #76]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	3b01      	subs	r3, #1
 8003626:	b2da      	uxtb	r2, r3
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 800362a:	701a      	strb	r2, [r3, #0]
	 	 		 	  		if(_AlarmPeriod <=0)
 800362c:	4b10      	ldr	r3, [pc, #64]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <StartTaskAlarmCounter+0x6e>
	 	 		 	  		{
	 	 		 	  			_AlarmPeriod = 16;
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 8003636:	2210      	movs	r2, #16
 8003638:	701a      	strb	r2, [r3, #0]
	 	 		 	  		}
	 	 		   osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod , 0, 50);
 800363a:	4b0e      	ldr	r3, [pc, #56]	; (8003674 <StartTaskAlarmCounter+0xa8>)
 800363c:	6818      	ldr	r0, [r3, #0]
 800363e:	2332      	movs	r3, #50	; 0x32
 8003640:	2200      	movs	r2, #0
 8003642:	490b      	ldr	r1, [pc, #44]	; (8003670 <StartTaskAlarmCounter+0xa4>)
 8003644:	f00b ff82 	bl	800f54c <osMessageQueuePut>
	 	 	  }

	 	 	  	  	tick += (200 * osKernelGetTickFreq()) / 1000;
 8003648:	f00b fa03 	bl	800ea52 <osKernelGetTickFreq>
 800364c:	4603      	mov	r3, r0
 800364e:	22c8      	movs	r2, #200	; 0xc8
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	4a09      	ldr	r2, [pc, #36]	; (800367c <StartTaskAlarmCounter+0xb0>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
	 	 	  	  	osDelayUntil(tick);
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f00b fbbd 	bl	800ede2 <osDelayUntil>
	  if(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)== GPIO_PIN_RESET)
 8003668:	e7b7      	b.n	80035da <StartTaskAlarmCounter+0xe>
 800366a:	bf00      	nop
 800366c:	40020400 	.word	0x40020400
 8003670:	20000004 	.word	0x20000004
 8003674:	200006f0 	.word	0x200006f0
 8003678:	40020800 	.word	0x40020800
 800367c:	10624dd3 	.word	0x10624dd3

08003680 <StartTaskSdCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSdCard */
void StartTaskSdCard(void *argument)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
 8003686:	af00      	add	r7, sp, #0
 8003688:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800368c:	f2a3 6354 	subw	r3, r3, #1620	; 0x654
 8003690:	6018      	str	r0, [r3, #0]

	uint8_t bytes;
	char data[128];

	Data_Structure_t _Data_StructureGet;
	Data_Structure_t *PointerDataZ = &_Data_StructureGet;
 8003692:	f107 0308 	add.w	r3, r7, #8
 8003696:	f8c7 3650 	str.w	r3, [r7, #1616]	; 0x650

	uint32_t tick = osKernelGetTickCount();
 800369a:	f00b f9c5 	bl	800ea28 <osKernelGetTickCount>
 800369e:	f8c7 0654 	str.w	r0, [r7, #1620]	; 0x654
  /* Infinite loop */
  for(;;)
  {
	  	  osMessageQueueGet(QueSDCARDHandle, PointerDataZ, 0, osWaitForever);
 80036a2:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <StartTaskSdCard+0x250>)
 80036a4:	6818      	ldr	r0, [r3, #0]
 80036a6:	f04f 33ff 	mov.w	r3, #4294967295
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8d7 1650 	ldr.w	r1, [r7, #1616]	; 0x650
 80036b0:	f00b ffac 	bl	800f60c <osMessageQueueGet>

//		  osMutexAcquire(TimerSDCardHandle, osWaitForever);


			FatFsResult = f_mount(&SdFatFs, "", 1);
 80036b4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80036b8:	2201      	movs	r2, #1
 80036ba:	4986      	ldr	r1, [pc, #536]	; (80038d4 <StartTaskSdCard+0x254>)
 80036bc:	4618      	mov	r0, r3
 80036be:	f00a f96b 	bl	800d998 <f_mount>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f
			if(FatFsResult != FR_OK)
 80036c8:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <StartTaskSdCard+0x78>
			  {
				  bytes = sprintf(data, "FatFS mount error.\n\r");
 80036d0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80036d4:	4980      	ldr	r1, [pc, #512]	; (80038d8 <StartTaskSdCard+0x258>)
 80036d6:	4618      	mov	r0, r3
 80036d8:	f002 f840 	bl	800575c <sprintf_>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 364e 	strb.w	r3, [r7, #1614]	; 0x64e
				  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 80036e2:	f897 364e 	ldrb.w	r3, [r7, #1614]	; 0x64e
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 80036ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036f0:	487a      	ldr	r0, [pc, #488]	; (80038dc <StartTaskSdCard+0x25c>)
 80036f2:	f007 fb00 	bl	800acf6 <HAL_UART_Transmit>
 80036f6:	e0d6      	b.n	80038a6 <StartTaskSdCard+0x226>
			  }

			  else
			  {
				  bytes = sprintf(data, "FatFS mounted.\n\r");
 80036f8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80036fc:	4978      	ldr	r1, [pc, #480]	; (80038e0 <StartTaskSdCard+0x260>)
 80036fe:	4618      	mov	r0, r3
 8003700:	f002 f82c 	bl	800575c <sprintf_>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 364e 	strb.w	r3, [r7, #1614]	; 0x64e
				  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 800370a:	f897 364e 	ldrb.w	r3, [r7, #1614]	; 0x64e
 800370e:	b29a      	uxth	r2, r3
 8003710:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8003714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003718:	4870      	ldr	r0, [pc, #448]	; (80038dc <StartTaskSdCard+0x25c>)
 800371a:	f007 faec 	bl	800acf6 <HAL_UART_Transmit>

				  //
				  // Open file on SD for writing
				  //
				  osMutexAcquire(MutexSdCardHandle, osWaitForever);
 800371e:	4b71      	ldr	r3, [pc, #452]	; (80038e4 <StartTaskSdCard+0x264>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f04f 31ff 	mov.w	r1, #4294967295
 8003726:	4618      	mov	r0, r3
 8003728:	f00b fcce 	bl	800f0c8 <osMutexAcquire>
				  FatFsResult = f_open(&SdCardFile, "badaniam.csv", FA_WRITE|FA_OPEN_APPEND);
 800372c:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003730:	2232      	movs	r2, #50	; 0x32
 8003732:	496d      	ldr	r1, [pc, #436]	; (80038e8 <StartTaskSdCard+0x268>)
 8003734:	4618      	mov	r0, r3
 8003736:	f00a f993 	bl	800da60 <f_open>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f

				  //
				  // File open error check
				  //
				  if(FatFsResult != FR_OK)
 8003740:	f897 364f 	ldrb.w	r3, [r7, #1615]	; 0x64f
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <StartTaskSdCard+0xf0>
				  {
					  bytes = sprintf(data, "No badaniam.csv file. Can't create.\n\r");
 8003748:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800374c:	4967      	ldr	r1, [pc, #412]	; (80038ec <StartTaskSdCard+0x26c>)
 800374e:	4618      	mov	r0, r3
 8003750:	f002 f804 	bl	800575c <sprintf_>
 8003754:	4603      	mov	r3, r0
 8003756:	f887 364e 	strb.w	r3, [r7, #1614]	; 0x64e
					  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 800375a:	f897 364e 	ldrb.w	r3, [r7, #1614]	; 0x64e
 800375e:	b29a      	uxth	r2, r3
 8003760:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8003764:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003768:	485c      	ldr	r0, [pc, #368]	; (80038dc <StartTaskSdCard+0x25c>)
 800376a:	f007 fac4 	bl	800acf6 <HAL_UART_Transmit>
 800376e:	e095      	b.n	800389c <StartTaskSdCard+0x21c>


				  else
				  {

					  bytes = sprintf(data, "File opened.\n\r");
 8003770:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8003774:	495e      	ldr	r1, [pc, #376]	; (80038f0 <StartTaskSdCard+0x270>)
 8003776:	4618      	mov	r0, r3
 8003778:	f001 fff0 	bl	800575c <sprintf_>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 364e 	strb.w	r3, [r7, #1614]	; 0x64e
					  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8003782:	f897 364e 	ldrb.w	r3, [r7, #1614]	; 0x64e
 8003786:	b29a      	uxth	r2, r3
 8003788:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 800378c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003790:	4852      	ldr	r0, [pc, #328]	; (80038dc <StartTaskSdCard+0x25c>)
 8003792:	f007 fab0 	bl	800acf6 <HAL_UART_Transmit>

					  //
					  //	Print something to this file
					  //
					  f_printf(&SdCardFile,PointerDataZ->MessageData);
 8003796:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800379a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800379e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f00a fdf3 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile,PointerDataZ->MessageTime);
 80037aa:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80037ae:	f103 0260 	add.w	r2, r3, #96	; 0x60
 80037b2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f00a fde9 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile, PointerDataZ->MessageTemp);
 80037be:	f8d7 2650 	ldr.w	r2, [r7, #1616]	; 0x650
 80037c2:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f00a fde1 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile,PointerDataZ->MessageHum);
 80037ce:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80037d2:	f103 0220 	add.w	r2, r3, #32
 80037d6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f00a fdd7 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile,PointerDataZ->MessageInten);
 80037e2:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80037e6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80037ea:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80037ee:	4611      	mov	r1, r2
 80037f0:	4618      	mov	r0, r3
 80037f2:	f00a fdcd 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile,PointerDataZ->MessagePvVoltageBus);
 80037f6:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 80037fa:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 80037fe:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f00a fdc3 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile,PointerDataZ->MessagePVVoltageShunt);
 800380a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800380e:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8003812:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f00a fdb9 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile,PointerDataZ->MessagePVCurrent);
 800381e:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8003822:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8003826:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800382a:	4611      	mov	r1, r2
 800382c:	4618      	mov	r0, r3
 800382e:	f00a fdaf 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile,PointerDataZ->MessageTimePump);
 8003832:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 8003836:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 800383a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800383e:	4611      	mov	r1, r2
 8003840:	4618      	mov	r0, r3
 8003842:	f00a fda5 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile,PointerDataZ->MessageFreqAlarm);
 8003846:	f8d7 3650 	ldr.w	r3, [r7, #1616]	; 0x650
 800384a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800384e:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8003852:	4611      	mov	r1, r2
 8003854:	4618      	mov	r0, r3
 8003856:	f00a fd9b 	bl	800e390 <f_printf>
					  f_printf(&SdCardFile,"\n");
 800385a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800385e:	4925      	ldr	r1, [pc, #148]	; (80038f4 <StartTaskSdCard+0x274>)
 8003860:	4618      	mov	r0, r3
 8003862:	f00a fd95 	bl	800e390 <f_printf>
		  //  		  }

					  //
					  // Close file
					  //
					  FatFsResult = f_close(&SdCardFile);
 8003866:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800386a:	4618      	mov	r0, r3
 800386c:	f00a fcea 	bl	800e244 <f_close>
 8003870:	4603      	mov	r3, r0
 8003872:	f887 364f 	strb.w	r3, [r7, #1615]	; 0x64f

					  bytes = sprintf(data, "File closed!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!.\n\r");
 8003876:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800387a:	491f      	ldr	r1, [pc, #124]	; (80038f8 <StartTaskSdCard+0x278>)
 800387c:	4618      	mov	r0, r3
 800387e:	f001 ff6d 	bl	800575c <sprintf_>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 364e 	strb.w	r3, [r7, #1614]	; 0x64e
					  HAL_UART_Transmit(&huart2, (uint8_t*)data, bytes, 1000);
 8003888:	f897 364e 	ldrb.w	r3, [r7, #1614]	; 0x64e
 800388c:	b29a      	uxth	r2, r3
 800388e:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8003892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003896:	4811      	ldr	r0, [pc, #68]	; (80038dc <StartTaskSdCard+0x25c>)
 8003898:	f007 fa2d 	bl	800acf6 <HAL_UART_Transmit>



	      }

				  osMutexRelease(MutexSdCardHandle);
 800389c:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <StartTaskSdCard+0x264>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f00b fc5c 	bl	800f15e <osMutexRelease>
			  }
//			 osMutexRelease(MutexSdCardHandle);
			tick += (5000 * osKernelGetTickFreq()) / 1000;
 80038a6:	f00b f8d4 	bl	800ea52 <osKernelGetTickFreq>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	fb02 f303 	mul.w	r3, r2, r3
 80038b4:	4a11      	ldr	r2, [pc, #68]	; (80038fc <StartTaskSdCard+0x27c>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	099b      	lsrs	r3, r3, #6
 80038bc:	f8d7 2654 	ldr.w	r2, [r7, #1620]	; 0x654
 80038c0:	4413      	add	r3, r2
 80038c2:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
				  	 	 	  	  	osDelayUntil(tick);
 80038c6:	f8d7 0654 	ldr.w	r0, [r7, #1620]	; 0x654
 80038ca:	f00b fa8a 	bl	800ede2 <osDelayUntil>
	  	  osMessageQueueGet(QueSDCARDHandle, PointerDataZ, 0, osWaitForever);
 80038ce:	e6e8      	b.n	80036a2 <StartTaskSdCard+0x22>
 80038d0:	200006f4 	.word	0x200006f4
 80038d4:	08015d70 	.word	0x08015d70
 80038d8:	08015d74 	.word	0x08015d74
 80038dc:	200008a8 	.word	0x200008a8
 80038e0:	08015d8c 	.word	0x08015d8c
 80038e4:	20000728 	.word	0x20000728
 80038e8:	08015da0 	.word	0x08015da0
 80038ec:	08015db0 	.word	0x08015db0
 80038f0:	08015dd8 	.word	0x08015dd8
 80038f4:	08015de8 	.word	0x08015de8
 80038f8:	08015dec 	.word	0x08015dec
 80038fc:	10624dd3 	.word	0x10624dd3

08003900 <StartTaskINA219>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskINA219 */
void StartTaskINA219(void *argument)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskINA219 */

	INA219_t ina219;
	ina219_calibration ina219_calibration;
	ina219_calibration.ina219_calibrationValue = 4096;
 8003908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800390c:	823b      	strh	r3, [r7, #16]
	ina219_calibration.ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 800390e:	230a      	movs	r3, #10
 8003910:	827b      	strh	r3, [r7, #18]
	ina219_calibration.ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8003912:	2302      	movs	r3, #2
 8003914:	82bb      	strh	r3, [r7, #20]
	INA219Data_t _ina219;
	INA219Data_t *INA_219_pointer = &_ina219;
 8003916:	f107 0308 	add.w	r3, r7, #8
 800391a:	623b      	str	r3, [r7, #32]





	 osMutexAcquire(MutexI2CHandle, osWaitForever);
 800391c:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <StartTaskINA219+0x108>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f04f 31ff 	mov.w	r1, #4294967295
 8003924:	4618      	mov	r0, r3
 8003926:	f00b fbcf 	bl	800f0c8 <osMutexAcquire>
	 INA219_Init(&ina219, &hi2c1, INA219_ADDRESS,&ina219_calibration);
 800392a:	f107 0310 	add.w	r3, r7, #16
 800392e:	f107 0018 	add.w	r0, r7, #24
 8003932:	2240      	movs	r2, #64	; 0x40
 8003934:	4935      	ldr	r1, [pc, #212]	; (8003a0c <StartTaskINA219+0x10c>)
 8003936:	f7fd fe11 	bl	800155c <INA219_Init>
	 osMutexRelease(MutexI2CHandle);
 800393a:	4b33      	ldr	r3, [pc, #204]	; (8003a08 <StartTaskINA219+0x108>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f00b fc0d 	bl	800f15e <osMutexRelease>
	osTimerStart(TimerINA219Handle, 300);
 8003944:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <StartTaskINA219+0x110>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800394c:	4618      	mov	r0, r3
 800394e:	f00b fb07 	bl	800ef60 <osTimerStart>
	uint32_t tick = osKernelGetTickCount();
 8003952:	f00b f869 	bl	800ea28 <osKernelGetTickCount>
 8003956:	6278      	str	r0, [r7, #36]	; 0x24
  /* Infinite loop */
  for(;;)
  {


	  	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <StartTaskINA219+0x108>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f04f 31ff 	mov.w	r1, #4294967295
 8003960:	4618      	mov	r0, r3
 8003962:	f00b fbb1 	bl	800f0c8 <osMutexAcquire>
	  	  printf("INA219 Mutex Acquire\n\r");
 8003966:	482b      	ldr	r0, [pc, #172]	; (8003a14 <StartTaskINA219+0x114>)
 8003968:	f001 fedc 	bl	8005724 <printf_>
		  INA_219_pointer->VoltageBus = INA219_ReadBusVoltage(&ina219);
 800396c:	f107 0318 	add.w	r3, r7, #24
 8003970:	4618      	mov	r0, r3
 8003972:	f7fd fd44 	bl	80013fe <INA219_ReadBusVoltage>
 8003976:	4603      	mov	r3, r0
 8003978:	461a      	mov	r2, r3
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	801a      	strh	r2, [r3, #0]
		  INA_219_pointer->VoltageShunt = INA219_ReadShuntVolage(&ina219);
 800397e:	f107 0318 	add.w	r3, r7, #24
 8003982:	4618      	mov	r0, r3
 8003984:	f7fd fd74 	bl	8001470 <INA219_ReadShuntVolage>
 8003988:	4603      	mov	r3, r0
 800398a:	461a      	mov	r2, r3
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	805a      	strh	r2, [r3, #2]
		  INA_219_pointer->Current = INA219_ReadCurrent(&ina219,&ina219_calibration);
 8003990:	f107 0210 	add.w	r2, r7, #16
 8003994:	f107 0318 	add.w	r3, r7, #24
 8003998:	4611      	mov	r1, r2
 800399a:	4618      	mov	r0, r3
 800399c:	f7fd fd52 	bl	8001444 <INA219_ReadCurrent>
 80039a0:	4603      	mov	r3, r0
 80039a2:	461a      	mov	r2, r3
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	809a      	strh	r2, [r3, #4]
////
		  osMutexRelease(MutexI2CHandle);
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <StartTaskINA219+0x108>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f00b fbd6 	bl	800f15e <osMutexRelease>
		  printf("INA219 Mutex Released\n\r");
 80039b2:	4819      	ldr	r0, [pc, #100]	; (8003a18 <StartTaskINA219+0x118>)
 80039b4:	f001 feb6 	bl	8005724 <printf_>
//
		  if (osOK == osSemaphoreAcquire(BinarySemINA219Handle, 0)) {
 80039b8:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <StartTaskINA219+0x11c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f00b fcba 	bl	800f338 <osSemaphoreAcquire>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d108      	bne.n	80039dc <StartTaskINA219+0xdc>
		  	 	  			osMessageQueuePut(QuequePVHandle, &_ina219, 0, osWaitForever);
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <StartTaskINA219+0x120>)
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	f107 0108 	add.w	r1, r7, #8
 80039d2:	f04f 33ff 	mov.w	r3, #4294967295
 80039d6:	2200      	movs	r2, #0
 80039d8:	f00b fdb8 	bl	800f54c <osMessageQueuePut>
		  	 	  		}
		  printf("INA219 exit \n\r");
 80039dc:	4811      	ldr	r0, [pc, #68]	; (8003a24 <StartTaskINA219+0x124>)
 80039de:	f001 fea1 	bl	8005724 <printf_>
//


	  tick+=(265*osKernelGetTickFreq())/1000;
 80039e2:	f00b f836 	bl	800ea52 <osKernelGetTickFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4613      	mov	r3, r2
 80039ea:	015b      	lsls	r3, r3, #5
 80039ec:	4413      	add	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	4a0d      	ldr	r2, [pc, #52]	; (8003a28 <StartTaskINA219+0x128>)
 80039f4:	fba2 2303 	umull	r2, r3, r2, r3
 80039f8:	099b      	lsrs	r3, r3, #6
 80039fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fc:	4413      	add	r3, r2
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
	  osDelayUntil(tick);
 8003a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a02:	f00b f9ee 	bl	800ede2 <osDelayUntil>
	  	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8003a06:	e7a7      	b.n	8003958 <StartTaskINA219+0x58>
 8003a08:	20000718 	.word	0x20000718
 8003a0c:	20000748 	.word	0x20000748
 8003a10:	20000710 	.word	0x20000710
 8003a14:	08015e20 	.word	0x08015e20
 8003a18:	08015e38 	.word	0x08015e38
 8003a1c:	20000744 	.word	0x20000744
 8003a20:	200006fc 	.word	0x200006fc
 8003a24:	08015e50 	.word	0x08015e50
 8003a28:	10624dd3 	.word	0x10624dd3

08003a2c <CallbackTimerBmeData>:
  /* USER CODE END StartTaskINA219 */
}

/* CallbackTimerBmeData function */
void CallbackTimerBmeData(void *argument)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBmeData */
	osSemaphoreRelease(BinarySemBme280Handle);
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <CallbackTimerBmeData+0x1c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f00b fccf 	bl	800f3dc <osSemaphoreRelease>
  /* USER CODE END CallbackTimerBmeData */
}
 8003a3e:	bf00      	nop
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2000072c 	.word	0x2000072c

08003a4c <CallbackTimerBh1750Data>:

/* CallbackTimerBh1750Data function */
void CallbackTimerBh1750Data(void *argument)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBh1750Data */
	osSemaphoreRelease(BinarySemBH1750Handle);
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <CallbackTimerBh1750Data+0x1c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f00b fcbf 	bl	800f3dc <osSemaphoreRelease>
  /* USER CODE END CallbackTimerBh1750Data */
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000730 	.word	0x20000730

08003a6c <CallbackTimerRTC>:

/* CallbackTimerRTC function */
void CallbackTimerRTC(void *argument)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerRTC */
	osSemaphoreRelease(BinarySemRTCHandle);
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <CallbackTimerRTC+0x1c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f00b fcaf 	bl	800f3dc <osSemaphoreRelease>
  /* USER CODE END CallbackTimerRTC */
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000734 	.word	0x20000734

08003a8c <CallbackTimerSDCard>:

/* CallbackTimerSDCard function */
void CallbackTimerSDCard(void *argument)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerSDCard */
	osSemaphoreRelease(BinarySdCardHandle);
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <CallbackTimerSDCard+0x1c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f00b fc9f 	bl	800f3dc <osSemaphoreRelease>
  /* USER CODE END CallbackTimerSDCard */
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20000740 	.word	0x20000740

08003aac <CallbackTimerINA219>:

/* CallbackTimerINA219 function */
void CallbackTimerINA219(void *argument)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerINA219 */
	osSemaphoreRelease(BinarySemINA219Handle);
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <CallbackTimerINA219+0x1c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f00b fc8f 	bl	800f3dc <osSemaphoreRelease>
  /* USER CODE END CallbackTimerINA219 */
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000744 	.word	0x20000744

08003acc <_putchar>:
//	{
//		char *ParsePointer = strtok(NULL,",");
//	}
//}

void _putchar(char character) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
	// send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	; (8003b04 <_putchar+0x38>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f04f 31ff 	mov.w	r1, #4294967295
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f00b faf2 	bl	800f0c8 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8003ae4:	1df9      	adds	r1, r7, #7
 8003ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aea:	2201      	movs	r2, #1
 8003aec:	4806      	ldr	r0, [pc, #24]	; (8003b08 <_putchar+0x3c>)
 8003aee:	f007 f902 	bl	800acf6 <HAL_UART_Transmit>

	osMutexRelease(MutexPrintfHandle);
 8003af2:	4b04      	ldr	r3, [pc, #16]	; (8003b04 <_putchar+0x38>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f00b fb31 	bl	800f15e <osMutexRelease>
}
 8003afc:	bf00      	nop
 8003afe:	3708      	adds	r7, #8
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	20000714 	.word	0x20000714
 8003b08:	200008a8 	.word	0x200008a8

08003b0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08a      	sub	sp, #40	; 0x28
 8003b10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b12:	f107 0314 	add.w	r3, r7, #20
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	4b3d      	ldr	r3, [pc, #244]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	4a3c      	ldr	r2, [pc, #240]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	6313      	str	r3, [r2, #48]	; 0x30
 8003b32:	4b3a      	ldr	r3, [pc, #232]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	4b36      	ldr	r3, [pc, #216]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	4a35      	ldr	r2, [pc, #212]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4e:	4b33      	ldr	r3, [pc, #204]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	4b2f      	ldr	r3, [pc, #188]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	4a2e      	ldr	r2, [pc, #184]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6a:	4b2c      	ldr	r3, [pc, #176]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
 8003b7a:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	6313      	str	r3, [r2, #48]	; 0x30
 8003b86:	4b25      	ldr	r3, [pc, #148]	; (8003c1c <MX_GPIO_Init+0x110>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MODE_Pin, GPIO_PIN_RESET);
 8003b92:	2200      	movs	r2, #0
 8003b94:	21a0      	movs	r1, #160	; 0xa0
 8003b96:	4822      	ldr	r0, [pc, #136]	; (8003c20 <MX_GPIO_Init+0x114>)
 8003b98:	f002 fe48 	bl	800682c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|APHASE_Pin, GPIO_PIN_RESET);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8003ba2:	4820      	ldr	r0, [pc, #128]	; (8003c24 <MX_GPIO_Init+0x118>)
 8003ba4:	f002 fe42 	bl	800682c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B4_Pin;
 8003ba8:	230b      	movs	r3, #11
 8003baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4619      	mov	r1, r3
 8003bba:	481b      	ldr	r0, [pc, #108]	; (8003c28 <MX_GPIO_Init+0x11c>)
 8003bbc:	f002 fc9a 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MODE_Pin;
 8003bc0:	23a0      	movs	r3, #160	; 0xa0
 8003bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd0:	f107 0314 	add.w	r3, r7, #20
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4812      	ldr	r0, [pc, #72]	; (8003c20 <MX_GPIO_Init+0x114>)
 8003bd8:	f002 fc8c 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be0:	2300      	movs	r3, #0
 8003be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be4:	2301      	movs	r3, #1
 8003be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4619      	mov	r1, r3
 8003bee:	480d      	ldr	r0, [pc, #52]	; (8003c24 <MX_GPIO_Init+0x118>)
 8003bf0:	f002 fc80 	bl	80064f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|APHASE_Pin;
 8003bf4:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8003bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c02:	2300      	movs	r3, #0
 8003c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c06:	f107 0314 	add.w	r3, r7, #20
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4805      	ldr	r0, [pc, #20]	; (8003c24 <MX_GPIO_Init+0x118>)
 8003c0e:	f002 fc71 	bl	80064f4 <HAL_GPIO_Init>

}
 8003c12:	bf00      	nop
 8003c14:	3728      	adds	r7, #40	; 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	40020000 	.word	0x40020000
 8003c24:	40020400 	.word	0x40020400
 8003c28:	40020800 	.word	0x40020800

08003c2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003c30:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c32:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <MX_I2C1_Init+0x54>)
 8003c34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c38:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <MX_I2C1_Init+0x58>)
 8003c3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003c42:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c48:	4b0c      	ldr	r3, [pc, #48]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c50:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c5c:	4b07      	ldr	r3, [pc, #28]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c68:	4804      	ldr	r0, [pc, #16]	; (8003c7c <MX_I2C1_Init+0x50>)
 8003c6a:	f002 fdf9 	bl	8006860 <HAL_I2C_Init>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003c74:	f000 f8ec 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003c78:	bf00      	nop
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000748 	.word	0x20000748
 8003c80:	40005400 	.word	0x40005400
 8003c84:	00061a80 	.word	0x00061a80

08003c88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08a      	sub	sp, #40	; 0x28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c90:	f107 0314 	add.w	r3, r7, #20
 8003c94:	2200      	movs	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a19      	ldr	r2, [pc, #100]	; (8003d0c <HAL_I2C_MspInit+0x84>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d12c      	bne.n	8003d04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	4b18      	ldr	r3, [pc, #96]	; (8003d10 <HAL_I2C_MspInit+0x88>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	4a17      	ldr	r2, [pc, #92]	; (8003d10 <HAL_I2C_MspInit+0x88>)
 8003cb4:	f043 0302 	orr.w	r3, r3, #2
 8003cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cba:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <HAL_I2C_MspInit+0x88>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003cc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ccc:	2312      	movs	r3, #18
 8003cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003cd8:	2304      	movs	r3, #4
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	480c      	ldr	r0, [pc, #48]	; (8003d14 <HAL_I2C_MspInit+0x8c>)
 8003ce4:	f002 fc06 	bl	80064f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <HAL_I2C_MspInit+0x88>)
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <HAL_I2C_MspInit+0x88>)
 8003cf2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cf6:	6413      	str	r3, [r2, #64]	; 0x40
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <HAL_I2C_MspInit+0x88>)
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003d04:	bf00      	nop
 8003d06:	3728      	adds	r7, #40	; 0x28
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40005400 	.word	0x40005400
 8003d10:	40023800 	.word	0x40023800
 8003d14:	40020400 	.word	0x40020400

08003d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003d1c:	f002 f942 	bl	8005fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003d20:	f000 f818 	bl	8003d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003d24:	f7ff fef2 	bl	8003b0c <MX_GPIO_Init>
  MX_DMA_Init();
 8003d28:	f7fe fd02 	bl	8002730 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003d2c:	f002 f89e 	bl	8005e6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003d30:	f7ff ff7c 	bl	8003c2c <MX_I2C1_Init>
  MX_RTC_Init();
 8003d34:	f001 fd2e 	bl	8005794 <MX_RTC_Init>
  MX_TIM3_Init();
 8003d38:	f001 ffc6 	bl	8005cc8 <MX_TIM3_Init>
  MX_SPI3_Init();
 8003d3c:	f001 fdb0 	bl	80058a0 <MX_SPI3_Init>
  MX_FATFS_Init();
 8003d40:	f007 fb4e 	bl	800b3e0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003d44:	f00a fe26 	bl	800e994 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003d48:	f7fe fda6 	bl	8002898 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003d4c:	f00a fe46 	bl	800e9dc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d50:	e7fe      	b.n	8003d50 <main+0x38>
	...

08003d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b094      	sub	sp, #80	; 0x50
 8003d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d5a:	f107 0320 	add.w	r3, r7, #32
 8003d5e:	2230      	movs	r2, #48	; 0x30
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f00f fe8b 	bl	8013a7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d68:	f107 030c 	add.w	r3, r7, #12
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	605a      	str	r2, [r3, #4]
 8003d72:	609a      	str	r2, [r3, #8]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <SystemClock_Config+0xd0>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	4a28      	ldr	r2, [pc, #160]	; (8003e24 <SystemClock_Config+0xd0>)
 8003d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d86:	6413      	str	r3, [r2, #64]	; 0x40
 8003d88:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <SystemClock_Config+0xd0>)
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d94:	2300      	movs	r3, #0
 8003d96:	607b      	str	r3, [r7, #4]
 8003d98:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <SystemClock_Config+0xd4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <SystemClock_Config+0xd4>)
 8003d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <SystemClock_Config+0xd4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003dac:	607b      	str	r3, [r7, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003db0:	2306      	movs	r3, #6
 8003db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003db4:	2301      	movs	r3, #1
 8003db6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003db8:	2301      	movs	r3, #1
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8003dc8:	2310      	movs	r3, #16
 8003dca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003dcc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003dd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003dda:	f107 0320 	add.w	r3, r7, #32
 8003dde:	4618      	mov	r0, r3
 8003de0:	f004 faa0 	bl	8008324 <HAL_RCC_OscConfig>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003dea:	f000 f831 	bl	8003e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dee:	230f      	movs	r3, #15
 8003df0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003df2:	2302      	movs	r3, #2
 8003df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003e04:	f107 030c 	add.w	r3, r7, #12
 8003e08:	2102      	movs	r1, #2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f004 fd02 	bl	8008814 <HAL_RCC_ClockConfig>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003e16:	f000 f81b 	bl	8003e50 <Error_Handler>
  }
}
 8003e1a:	bf00      	nop
 8003e1c:	3750      	adds	r7, #80	; 0x50
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40007000 	.word	0x40007000

08003e2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e3e:	f002 f8d3 	bl	8005fe8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40014400 	.word	0x40014400

08003e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e54:	b672      	cpsid	i
}
 8003e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e58:	e7fe      	b.n	8003e58 <Error_Handler+0x8>

08003e5a <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b085      	sub	sp, #20
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
 8003e66:	4603      	mov	r3, r0
 8003e68:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d204      	bcs.n	8003e7c <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4413      	add	r3, r2
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	701a      	strb	r2, [r3, #0]
  }
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	4603      	mov	r3, r0
 8003e96:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003e98:	bf00      	nop
 8003e9a:	3714      	adds	r7, #20
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <_out_char+0x1e>
    _putchar(character);
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fe05 	bl	8003acc <_putchar>
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e002      	b.n	8003ee0 <_strnlen_s+0x16>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3301      	adds	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <_strnlen_s+0x28>
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	603a      	str	r2, [r7, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f3      	bne.n	8003eda <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	2b2f      	cmp	r3, #47	; 0x2f
 8003f12:	d904      	bls.n	8003f1e <_is_digit+0x1a>
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	2b39      	cmp	r3, #57	; 0x39
 8003f18:	d801      	bhi.n	8003f1e <_is_digit+0x1a>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <_is_digit+0x1c>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	b2db      	uxtb	r3, r3
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f3e:	e00e      	b.n	8003f5e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	1c59      	adds	r1, r3, #1
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6011      	str	r1, [r2, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	4403      	add	r3, r0
 8003f5a:	3b30      	subs	r3, #48	; 0x30
 8003f5c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ffcd 	bl	8003f04 <_is_digit>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e7      	bne.n	8003f40 <_atoi+0xe>
  }
  return i;
 8003f70:	68fb      	ldr	r3, [r7, #12]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003f7a:	b590      	push	{r4, r7, lr}
 8003f7c:	b087      	sub	sp, #28
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d125      	bne.n	8003fe2 <_out_rev+0x68>
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d120      	bne.n	8003fe2 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	e00a      	b.n	8003fbc <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	1c53      	adds	r3, r2, #1
 8003faa:	607b      	str	r3, [r7, #4]
 8003fac:	68fc      	ldr	r4, [r7, #12]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68b9      	ldr	r1, [r7, #8]
 8003fb2:	2020      	movs	r0, #32
 8003fb4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d3f0      	bcc.n	8003fa6 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003fc4:	e00d      	b.n	8003fe2 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd0:	4413      	add	r3, r2
 8003fd2:	7818      	ldrb	r0, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	1c53      	adds	r3, r2, #1
 8003fd8:	607b      	str	r3, [r7, #4]
 8003fda:	68fc      	ldr	r4, [r7, #12]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	47a0      	blx	r4
  while (len) {
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1ee      	bne.n	8003fc6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00e      	beq.n	8004010 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003ff2:	e007      	b.n	8004004 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	1c53      	adds	r3, r2, #1
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	68fc      	ldr	r4, [r7, #12]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	68b9      	ldr	r1, [r7, #8]
 8004000:	2020      	movs	r0, #32
 8004002:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800400c:	429a      	cmp	r2, r3
 800400e:	d8f1      	bhi.n	8003ff4 <_out_rev+0x7a>
    }
  }

  return idx;
 8004010:	687b      	ldr	r3, [r7, #4]
}
 8004012:	4618      	mov	r0, r3
 8004014:	371c      	adds	r7, #28
 8004016:	46bd      	mov	sp, r7
 8004018:	bd90      	pop	{r4, r7, pc}

0800401a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b088      	sub	sp, #32
 800401e:	af04      	add	r7, sp, #16
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d136      	bne.n	80040a0 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d018      	beq.n	800406a <_ntoa_format+0x50>
 8004038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d013      	beq.n	800406a <_ntoa_format+0x50>
 8004042:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <_ntoa_format+0x3a>
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <_ntoa_format+0x50>
      width--;
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	3b01      	subs	r3, #1
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800405a:	e006      	b.n	800406a <_ntoa_format+0x50>
      buf[len++] = '0';
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	61fa      	str	r2, [r7, #28]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4413      	add	r3, r2
 8004066:	2230      	movs	r2, #48	; 0x30
 8004068:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406e:	429a      	cmp	r2, r3
 8004070:	d20a      	bcs.n	8004088 <_ntoa_format+0x6e>
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	2b1f      	cmp	r3, #31
 8004076:	d9f1      	bls.n	800405c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004078:	e006      	b.n	8004088 <_ntoa_format+0x6e>
      buf[len++] = '0';
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	61fa      	str	r2, [r7, #28]
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4413      	add	r3, r2
 8004084:	2230      	movs	r2, #48	; 0x30
 8004086:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <_ntoa_format+0x86>
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004096:	429a      	cmp	r2, r3
 8004098:	d202      	bcs.n	80040a0 <_ntoa_format+0x86>
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	2b1f      	cmp	r3, #31
 800409e:	d9ec      	bls.n	800407a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80040a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a2:	f003 0310 	and.w	r3, r3, #16
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d058      	beq.n	800415c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d116      	bne.n	80040e2 <_ntoa_format+0xc8>
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d013      	beq.n	80040e2 <_ntoa_format+0xc8>
 80040ba:	69fa      	ldr	r2, [r7, #28]
 80040bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040be:	429a      	cmp	r2, r3
 80040c0:	d003      	beq.n	80040ca <_ntoa_format+0xb0>
 80040c2:	69fa      	ldr	r2, [r7, #28]
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d10b      	bne.n	80040e2 <_ntoa_format+0xc8>
      len--;
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3b01      	subs	r3, #1
 80040ce:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <_ntoa_format+0xc8>
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	2b10      	cmp	r3, #16
 80040da:	d102      	bne.n	80040e2 <_ntoa_format+0xc8>
        len--;
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	3b01      	subs	r3, #1
 80040e0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d10f      	bne.n	8004108 <_ntoa_format+0xee>
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	f003 0320 	and.w	r3, r3, #32
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <_ntoa_format+0xee>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	2b1f      	cmp	r3, #31
 80040f6:	d807      	bhi.n	8004108 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	61fa      	str	r2, [r7, #28]
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4413      	add	r3, r2
 8004102:	2278      	movs	r2, #120	; 0x78
 8004104:	701a      	strb	r2, [r3, #0]
 8004106:	e01f      	b.n	8004148 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	2b10      	cmp	r3, #16
 800410c:	d10f      	bne.n	800412e <_ntoa_format+0x114>
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <_ntoa_format+0x114>
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	2b1f      	cmp	r3, #31
 800411c:	d807      	bhi.n	800412e <_ntoa_format+0x114>
      buf[len++] = 'X';
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	61fa      	str	r2, [r7, #28]
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4413      	add	r3, r2
 8004128:	2258      	movs	r2, #88	; 0x58
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e00c      	b.n	8004148 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	2b02      	cmp	r3, #2
 8004132:	d109      	bne.n	8004148 <_ntoa_format+0x12e>
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	2b1f      	cmp	r3, #31
 8004138:	d806      	bhi.n	8004148 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	61fa      	str	r2, [r7, #28]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4413      	add	r3, r2
 8004144:	2262      	movs	r2, #98	; 0x62
 8004146:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b1f      	cmp	r3, #31
 800414c:	d806      	bhi.n	800415c <_ntoa_format+0x142>
      buf[len++] = '0';
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	61fa      	str	r2, [r7, #28]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	4413      	add	r3, r2
 8004158:	2230      	movs	r2, #48	; 0x30
 800415a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	2b1f      	cmp	r3, #31
 8004160:	d824      	bhi.n	80041ac <_ntoa_format+0x192>
    if (negative) {
 8004162:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d007      	beq.n	800417a <_ntoa_format+0x160>
      buf[len++] = '-';
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	61fa      	str	r2, [r7, #28]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4413      	add	r3, r2
 8004174:	222d      	movs	r2, #45	; 0x2d
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e018      	b.n	80041ac <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	f003 0304 	and.w	r3, r3, #4
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	61fa      	str	r2, [r7, #28]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4413      	add	r3, r2
 800418e:	222b      	movs	r2, #43	; 0x2b
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	e00b      	b.n	80041ac <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d006      	beq.n	80041ac <_ntoa_format+0x192>
      buf[len++] = ' ';
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4413      	add	r3, r2
 80041a8:	2220      	movs	r2, #32
 80041aa:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80041ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ae:	9303      	str	r3, [sp, #12]
 80041b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b2:	9302      	str	r3, [sp, #8]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	9301      	str	r3, [sp, #4]
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fed9 	bl	8003f7a <_out_rev>
 80041c8:	4603      	mov	r3, r0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b096      	sub	sp, #88	; 0x58
 80041d6:	af08      	add	r7, sp, #32
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80041e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80041ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ec:	f023 0310 	bic.w	r3, r3, #16
 80041f0:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80041f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <_ntoa_long+0x30>
 80041fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d032      	beq.n	8004268 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8004202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004206:	fbb3 f2f2 	udiv	r2, r3, r2
 800420a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800420c:	fb01 f202 	mul.w	r2, r1, r2
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004216:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800421a:	2b09      	cmp	r3, #9
 800421c:	d804      	bhi.n	8004228 <_ntoa_long+0x56>
 800421e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004222:	3330      	adds	r3, #48	; 0x30
 8004224:	b2da      	uxtb	r2, r3
 8004226:	e00d      	b.n	8004244 <_ntoa_long+0x72>
 8004228:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <_ntoa_long+0x64>
 8004232:	2241      	movs	r2, #65	; 0x41
 8004234:	e000      	b.n	8004238 <_ntoa_long+0x66>
 8004236:	2261      	movs	r2, #97	; 0x61
 8004238:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800423c:	4413      	add	r3, r2
 800423e:	b2db      	uxtb	r3, r3
 8004240:	3b0a      	subs	r3, #10
 8004242:	b2da      	uxtb	r2, r3
 8004244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004246:	1c59      	adds	r1, r3, #1
 8004248:	6379      	str	r1, [r7, #52]	; 0x34
 800424a:	3338      	adds	r3, #56	; 0x38
 800424c:	443b      	add	r3, r7
 800424e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004252:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800425c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <_ntoa_long+0x96>
 8004262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004264:	2b1f      	cmp	r3, #31
 8004266:	d9cc      	bls.n	8004202 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004268:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426a:	9306      	str	r3, [sp, #24]
 800426c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800426e:	9305      	str	r3, [sp, #20]
 8004270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004272:	9304      	str	r3, [sp, #16]
 8004274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004276:	9303      	str	r3, [sp, #12]
 8004278:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800427c:	9302      	str	r3, [sp, #8]
 800427e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	f107 0310 	add.w	r3, r7, #16
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	68b9      	ldr	r1, [r7, #8]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff fec3 	bl	800401a <_ntoa_format>
 8004294:	4603      	mov	r3, r0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3738      	adds	r7, #56	; 0x38
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b096      	sub	sp, #88	; 0x58
 80042a2:	af08      	add	r7, sp, #32
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80042b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042b4:	4313      	orrs	r3, r2
 80042b6:	d103      	bne.n	80042c0 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 80042b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ba:	f023 0310 	bic.w	r3, r3, #16
 80042be:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80042c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <_ntoa_long_long+0x34>
 80042ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80042ce:	4313      	orrs	r3, r2
 80042d0:	d037      	beq.n	8004342 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 80042d2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80042d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042da:	f7fc fcdd 	bl	8000c98 <__aeabi_uldivmod>
 80042de:	4613      	mov	r3, r2
 80042e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80042e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042e8:	2b09      	cmp	r3, #9
 80042ea:	d804      	bhi.n	80042f6 <_ntoa_long_long+0x58>
 80042ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042f0:	3330      	adds	r3, #48	; 0x30
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	e00d      	b.n	8004312 <_ntoa_long_long+0x74>
 80042f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <_ntoa_long_long+0x66>
 8004300:	2241      	movs	r2, #65	; 0x41
 8004302:	e000      	b.n	8004306 <_ntoa_long_long+0x68>
 8004304:	2261      	movs	r2, #97	; 0x61
 8004306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800430a:	4413      	add	r3, r2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	3b0a      	subs	r3, #10
 8004310:	b2da      	uxtb	r2, r3
 8004312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004314:	1c59      	adds	r1, r3, #1
 8004316:	6379      	str	r1, [r7, #52]	; 0x34
 8004318:	3338      	adds	r3, #56	; 0x38
 800431a:	443b      	add	r3, r7
 800431c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004320:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004324:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004328:	f7fc fcb6 	bl	8000c98 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004334:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004338:	4313      	orrs	r3, r2
 800433a:	d002      	beq.n	8004342 <_ntoa_long_long+0xa4>
 800433c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800433e:	2b1f      	cmp	r3, #31
 8004340:	d9c7      	bls.n	80042d2 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004344:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004346:	9206      	str	r2, [sp, #24]
 8004348:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800434a:	9205      	str	r2, [sp, #20]
 800434c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800434e:	9204      	str	r2, [sp, #16]
 8004350:	9303      	str	r3, [sp, #12]
 8004352:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004356:	9302      	str	r3, [sp, #8]
 8004358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	f107 0310 	add.w	r3, r7, #16
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	68b9      	ldr	r1, [r7, #8]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f7ff fe56 	bl	800401a <_ntoa_format>
 800436e:	4603      	mov	r3, r0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3738      	adds	r7, #56	; 0x38
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}

08004378 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b09d      	sub	sp, #116	; 0x74
 800437c:	af04      	add	r7, sp, #16
 800437e:	6178      	str	r0, [r7, #20]
 8004380:	6139      	str	r1, [r7, #16]
 8004382:	60fa      	str	r2, [r7, #12]
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800439a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800439e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043a2:	f7fc fb99 	bl	8000ad8 <__aeabi_dcmpeq>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10f      	bne.n	80043cc <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80043ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043ae:	9303      	str	r3, [sp, #12]
 80043b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043b2:	9302      	str	r3, [sp, #8]
 80043b4:	2303      	movs	r3, #3
 80043b6:	9301      	str	r3, [sp, #4]
 80043b8:	4ba7      	ldr	r3, [pc, #668]	; (8004658 <_ftoa+0x2e0>)
 80043ba:	9300      	str	r3, [sp, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	6939      	ldr	r1, [r7, #16]
 80043c2:	6978      	ldr	r0, [r7, #20]
 80043c4:	f7ff fdd9 	bl	8003f7a <_out_rev>
 80043c8:	4603      	mov	r3, r0
 80043ca:	e222      	b.n	8004812 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 80043cc:	f04f 32ff 	mov.w	r2, #4294967295
 80043d0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80043d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043d8:	f7fc fb88 	bl	8000aec <__aeabi_dcmplt>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00f      	beq.n	8004402 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80043e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e4:	9303      	str	r3, [sp, #12]
 80043e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043e8:	9302      	str	r3, [sp, #8]
 80043ea:	2304      	movs	r3, #4
 80043ec:	9301      	str	r3, [sp, #4]
 80043ee:	4b9b      	ldr	r3, [pc, #620]	; (800465c <_ftoa+0x2e4>)
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	f7ff fdbe 	bl	8003f7a <_out_rev>
 80043fe:	4603      	mov	r3, r0
 8004400:	e207      	b.n	8004812 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8004402:	f04f 32ff 	mov.w	r2, #4294967295
 8004406:	4b96      	ldr	r3, [pc, #600]	; (8004660 <_ftoa+0x2e8>)
 8004408:	e9d7 0100 	ldrd	r0, r1, [r7]
 800440c:	f7fc fb8c 	bl	8000b28 <__aeabi_dcmpgt>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d01d      	beq.n	8004452 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8004416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <_ftoa+0xac>
 8004420:	4b90      	ldr	r3, [pc, #576]	; (8004664 <_ftoa+0x2ec>)
 8004422:	e000      	b.n	8004426 <_ftoa+0xae>
 8004424:	4b90      	ldr	r3, [pc, #576]	; (8004668 <_ftoa+0x2f0>)
 8004426:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004428:	f002 0204 	and.w	r2, r2, #4
 800442c:	2a00      	cmp	r2, #0
 800442e:	d001      	beq.n	8004434 <_ftoa+0xbc>
 8004430:	2204      	movs	r2, #4
 8004432:	e000      	b.n	8004436 <_ftoa+0xbe>
 8004434:	2203      	movs	r2, #3
 8004436:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004438:	9103      	str	r1, [sp, #12]
 800443a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800443c:	9102      	str	r1, [sp, #8]
 800443e:	9201      	str	r2, [sp, #4]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	6939      	ldr	r1, [r7, #16]
 8004448:	6978      	ldr	r0, [r7, #20]
 800444a:	f7ff fd96 	bl	8003f7a <_out_rev>
 800444e:	4603      	mov	r3, r0
 8004450:	e1df      	b.n	8004812 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8004452:	a37d      	add	r3, pc, #500	; (adr r3, 8004648 <_ftoa+0x2d0>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	e9d7 0100 	ldrd	r0, r1, [r7]
 800445c:	f7fc fb64 	bl	8000b28 <__aeabi_dcmpgt>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <_ftoa+0x102>
 8004466:	a37a      	add	r3, pc, #488	; (adr r3, 8004650 <_ftoa+0x2d8>)
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004470:	f7fc fb3c 	bl	8000aec <__aeabi_dcmplt>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00f      	beq.n	800449a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800447a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800447c:	9302      	str	r3, [sp, #8]
 800447e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004480:	9301      	str	r3, [sp, #4]
 8004482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	ed97 0b00 	vldr	d0, [r7]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	6939      	ldr	r1, [r7, #16]
 8004490:	6978      	ldr	r0, [r7, #20]
 8004492:	f000 f9c9 	bl	8004828 <_etoa>
 8004496:	4603      	mov	r3, r0
 8004498:	e1bb      	b.n	8004812 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800449a:	2300      	movs	r3, #0
 800449c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044ac:	f7fc fb1e 	bl	8000aec <__aeabi_dcmplt>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00e      	beq.n	80044d4 <_ftoa+0x15c>
    negative = true;
 80044b6:	2301      	movs	r3, #1
 80044b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80044bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044c0:	f04f 0000 	mov.w	r0, #0
 80044c4:	f04f 0100 	mov.w	r1, #0
 80044c8:	f7fb fee6 	bl	8000298 <__aeabi_dsub>
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80044d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10d      	bne.n	80044fa <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80044de:	2306      	movs	r3, #6
 80044e0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80044e2:	e00a      	b.n	80044fa <_ftoa+0x182>
    buf[len++] = '0';
 80044e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80044ea:	3360      	adds	r3, #96	; 0x60
 80044ec:	443b      	add	r3, r7
 80044ee:	2230      	movs	r2, #48	; 0x30
 80044f0:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80044f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f6:	3b01      	subs	r3, #1
 80044f8:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80044fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044fc:	2b1f      	cmp	r3, #31
 80044fe:	d802      	bhi.n	8004506 <_ftoa+0x18e>
 8004500:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004502:	2b09      	cmp	r3, #9
 8004504:	d8ee      	bhi.n	80044e4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8004506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800450a:	f7fc fb2d 	bl	8000b68 <__aeabi_d2iz>
 800450e:	4603      	mov	r3, r0
 8004510:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8004512:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004514:	f7fc f80e 	bl	8000534 <__aeabi_i2d>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004520:	f7fb feba 	bl	8000298 <__aeabi_dsub>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4610      	mov	r0, r2
 800452a:	4619      	mov	r1, r3
 800452c:	4a4f      	ldr	r2, [pc, #316]	; (800466c <_ftoa+0x2f4>)
 800452e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004530:	00db      	lsls	r3, r3, #3
 8004532:	4413      	add	r3, r2
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f7fc f866 	bl	8000608 <__aeabi_dmul>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8004544:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004548:	f7fc fb36 	bl	8000bb8 <__aeabi_d2uiz>
 800454c:	4603      	mov	r3, r0
 800454e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8004550:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004552:	f7fb ffdf 	bl	8000514 <__aeabi_ui2d>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800455e:	f7fb fe9b 	bl	8000298 <__aeabi_dsub>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	4b40      	ldr	r3, [pc, #256]	; (8004670 <_ftoa+0x2f8>)
 8004570:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004574:	f7fc fad8 	bl	8000b28 <__aeabi_dcmpgt>
 8004578:	4603      	mov	r3, r0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d016      	beq.n	80045ac <_ftoa+0x234>
    ++frac;
 800457e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004580:	3301      	adds	r3, #1
 8004582:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8004584:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004586:	f7fb ffc5 	bl	8000514 <__aeabi_ui2d>
 800458a:	4a38      	ldr	r2, [pc, #224]	; (800466c <_ftoa+0x2f4>)
 800458c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4413      	add	r3, r2
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	f7fc fabd 	bl	8000b14 <__aeabi_dcmpge>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01a      	beq.n	80045d6 <_ftoa+0x25e>
      frac = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80045a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a6:	3301      	adds	r3, #1
 80045a8:	657b      	str	r3, [r7, #84]	; 0x54
 80045aa:	e014      	b.n	80045d6 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80045ac:	f04f 0200 	mov.w	r2, #0
 80045b0:	4b2f      	ldr	r3, [pc, #188]	; (8004670 <_ftoa+0x2f8>)
 80045b2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80045b6:	f7fc fa99 	bl	8000aec <__aeabi_dcmplt>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10a      	bne.n	80045d6 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80045c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <_ftoa+0x258>
 80045c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80045d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045d2:	3301      	adds	r3, #1
 80045d4:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80045d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d14b      	bne.n	8004674 <_ftoa+0x2fc>
    diff = value - (double)whole;
 80045dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80045de:	f7fb ffa9 	bl	8000534 <__aeabi_i2d>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045ea:	f7fb fe55 	bl	8000298 <__aeabi_dsub>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 80045f6:	2301      	movs	r3, #1
 80045f8:	461c      	mov	r4, r3
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	4b1c      	ldr	r3, [pc, #112]	; (8004670 <_ftoa+0x2f8>)
 8004600:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004604:	f7fc fa72 	bl	8000aec <__aeabi_dcmplt>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <_ftoa+0x29a>
 800460e:	2300      	movs	r3, #0
 8004610:	461c      	mov	r4, r3
 8004612:	b2e3      	uxtb	r3, r4
 8004614:	f083 0301 	eor.w	r3, r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <_ftoa+0x2ba>
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <_ftoa+0x2f8>)
 8004624:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004628:	f7fc fa7e 	bl	8000b28 <__aeabi_dcmpgt>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d064      	beq.n	80046fc <_ftoa+0x384>
 8004632:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8081 	beq.w	8004740 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800463e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004640:	3301      	adds	r3, #1
 8004642:	657b      	str	r3, [r7, #84]	; 0x54
 8004644:	e07c      	b.n	8004740 <_ftoa+0x3c8>
 8004646:	bf00      	nop
 8004648:	00000000 	.word	0x00000000
 800464c:	41cdcd65 	.word	0x41cdcd65
 8004650:	00000000 	.word	0x00000000
 8004654:	c1cdcd65 	.word	0xc1cdcd65
 8004658:	08015e60 	.word	0x08015e60
 800465c:	08015e64 	.word	0x08015e64
 8004660:	7fefffff 	.word	0x7fefffff
 8004664:	08015e6c 	.word	0x08015e6c
 8004668:	08015e74 	.word	0x08015e74
 800466c:	08016418 	.word	0x08016418
 8004670:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8004674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004676:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004678:	e01f      	b.n	80046ba <_ftoa+0x342>
      --count;
 800467a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800467c:	3b01      	subs	r3, #1
 800467e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8004680:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004682:	4b66      	ldr	r3, [pc, #408]	; (800481c <_ftoa+0x4a4>)
 8004684:	fba3 2301 	umull	r2, r3, r3, r1
 8004688:	08da      	lsrs	r2, r3, #3
 800468a:	4613      	mov	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	1aca      	subs	r2, r1, r3
 8004694:	b2d2      	uxtb	r2, r2
 8004696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004698:	1c59      	adds	r1, r3, #1
 800469a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800469c:	3230      	adds	r2, #48	; 0x30
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	3360      	adds	r3, #96	; 0x60
 80046a2:	443b      	add	r3, r7
 80046a4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80046a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046aa:	4a5c      	ldr	r2, [pc, #368]	; (800481c <_ftoa+0x4a4>)
 80046ac:	fba2 2303 	umull	r2, r3, r2, r3
 80046b0:	08db      	lsrs	r3, r3, #3
 80046b2:	653b      	str	r3, [r7, #80]	; 0x50
 80046b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046bc:	2b1f      	cmp	r3, #31
 80046be:	d9dc      	bls.n	800467a <_ftoa+0x302>
 80046c0:	e009      	b.n	80046d6 <_ftoa+0x35e>
        break;
 80046c2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80046c4:	e007      	b.n	80046d6 <_ftoa+0x35e>
      buf[len++] = '0';
 80046c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80046cc:	3360      	adds	r3, #96	; 0x60
 80046ce:	443b      	add	r3, r7
 80046d0:	2230      	movs	r2, #48	; 0x30
 80046d2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80046d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046d8:	2b1f      	cmp	r3, #31
 80046da:	d804      	bhi.n	80046e6 <_ftoa+0x36e>
 80046dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046de:	1e5a      	subs	r2, r3, #1
 80046e0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1ef      	bne.n	80046c6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046e8:	2b1f      	cmp	r3, #31
 80046ea:	d829      	bhi.n	8004740 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80046ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80046f2:	3360      	adds	r3, #96	; 0x60
 80046f4:	443b      	add	r3, r7
 80046f6:	222e      	movs	r2, #46	; 0x2e
 80046f8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80046fc:	e020      	b.n	8004740 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 80046fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004700:	4b47      	ldr	r3, [pc, #284]	; (8004820 <_ftoa+0x4a8>)
 8004702:	fb83 1302 	smull	r1, r3, r3, r2
 8004706:	1099      	asrs	r1, r3, #2
 8004708:	17d3      	asrs	r3, r2, #31
 800470a:	1ac9      	subs	r1, r1, r3
 800470c:	460b      	mov	r3, r1
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	1ad1      	subs	r1, r2, r3
 8004716:	b2ca      	uxtb	r2, r1
 8004718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800471e:	3230      	adds	r2, #48	; 0x30
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	3360      	adds	r3, #96	; 0x60
 8004724:	443b      	add	r3, r7
 8004726:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800472a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800472c:	4a3c      	ldr	r2, [pc, #240]	; (8004820 <_ftoa+0x4a8>)
 800472e:	fb82 1203 	smull	r1, r2, r2, r3
 8004732:	1092      	asrs	r2, r2, #2
 8004734:	17db      	asrs	r3, r3, #31
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	657b      	str	r3, [r7, #84]	; 0x54
 800473a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004742:	2b1f      	cmp	r3, #31
 8004744:	d9db      	bls.n	80046fe <_ftoa+0x386>
 8004746:	e000      	b.n	800474a <_ftoa+0x3d2>
      break;
 8004748:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800474a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d123      	bne.n	800479c <_ftoa+0x424>
 8004754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d01e      	beq.n	800479c <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800475e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004760:	2b00      	cmp	r3, #0
 8004762:	d014      	beq.n	800478e <_ftoa+0x416>
 8004764:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8004768:	2b00      	cmp	r3, #0
 800476a:	d104      	bne.n	8004776 <_ftoa+0x3fe>
 800476c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800476e:	f003 030c 	and.w	r3, r3, #12
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00b      	beq.n	800478e <_ftoa+0x416>
      width--;
 8004776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004778:	3b01      	subs	r3, #1
 800477a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800477c:	e007      	b.n	800478e <_ftoa+0x416>
      buf[len++] = '0';
 800477e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004784:	3360      	adds	r3, #96	; 0x60
 8004786:	443b      	add	r3, r7
 8004788:	2230      	movs	r2, #48	; 0x30
 800478a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800478e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004790:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004792:	429a      	cmp	r2, r3
 8004794:	d202      	bcs.n	800479c <_ftoa+0x424>
 8004796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004798:	2b1f      	cmp	r3, #31
 800479a:	d9f0      	bls.n	800477e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	2b1f      	cmp	r3, #31
 80047a0:	d827      	bhi.n	80047f2 <_ftoa+0x47a>
    if (negative) {
 80047a2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <_ftoa+0x444>
      buf[len++] = '-';
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 80047b0:	3360      	adds	r3, #96	; 0x60
 80047b2:	443b      	add	r3, r7
 80047b4:	222d      	movs	r2, #45	; 0x2d
 80047b6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80047ba:	e01a      	b.n	80047f2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80047bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80047c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	65fa      	str	r2, [r7, #92]	; 0x5c
 80047cc:	3360      	adds	r3, #96	; 0x60
 80047ce:	443b      	add	r3, r7
 80047d0:	222b      	movs	r2, #43	; 0x2b
 80047d2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80047d6:	e00c      	b.n	80047f2 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 80047d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <_ftoa+0x47a>
      buf[len++] = ' ';
 80047e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80047e8:	3360      	adds	r3, #96	; 0x60
 80047ea:	443b      	add	r3, r7
 80047ec:	2220      	movs	r2, #32
 80047ee:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80047f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047f4:	9303      	str	r3, [sp, #12]
 80047f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047f8:	9302      	str	r3, [sp, #8]
 80047fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	f107 0318 	add.w	r3, r7, #24
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	6939      	ldr	r1, [r7, #16]
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f7ff fbb5 	bl	8003f7a <_out_rev>
 8004810:	4603      	mov	r3, r0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3764      	adds	r7, #100	; 0x64
 8004816:	46bd      	mov	sp, r7
 8004818:	bd90      	pop	{r4, r7, pc}
 800481a:	bf00      	nop
 800481c:	cccccccd 	.word	0xcccccccd
 8004820:	66666667 	.word	0x66666667
 8004824:	00000000 	.word	0x00000000

08004828 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482c:	b09f      	sub	sp, #124	; 0x7c
 800482e:	af06      	add	r7, sp, #24
 8004830:	6278      	str	r0, [r7, #36]	; 0x24
 8004832:	6239      	str	r1, [r7, #32]
 8004834:	61fa      	str	r2, [r7, #28]
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800483c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004840:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004844:	f7fc f948 	bl	8000ad8 <__aeabi_dcmpeq>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d014      	beq.n	8004878 <_etoa+0x50>
 800484e:	f04f 32ff 	mov.w	r2, #4294967295
 8004852:	4bc1      	ldr	r3, [pc, #772]	; (8004b58 <_etoa+0x330>)
 8004854:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004858:	f7fc f966 	bl	8000b28 <__aeabi_dcmpgt>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <_etoa+0x50>
 8004862:	f04f 32ff 	mov.w	r2, #4294967295
 8004866:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800486a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800486e:	f7fc f93d 	bl	8000aec <__aeabi_dcmplt>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d012      	beq.n	800489e <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004878:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800487c:	9302      	str	r3, [sp, #8]
 800487e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004882:	9301      	str	r3, [sp, #4]
 8004884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	ed97 0b04 	vldr	d0, [r7, #16]
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	6a39      	ldr	r1, [r7, #32]
 8004894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004896:	f7ff fd6f 	bl	8004378 <_ftoa>
 800489a:	4603      	mov	r3, r0
 800489c:	e23f      	b.n	8004d1e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800489e:	2301      	movs	r3, #1
 80048a0:	461e      	mov	r6, r3
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80048ae:	f7fc f91d 	bl	8000aec <__aeabi_dcmplt>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <_etoa+0x94>
 80048b8:	2300      	movs	r3, #0
 80048ba:	461e      	mov	r6, r3
 80048bc:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 80048c0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <_etoa+0xb4>
    value = -value;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80048d2:	607b      	str	r3, [r7, #4]
 80048d4:	ed97 7b00 	vldr	d7, [r7]
 80048d8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80048dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d102      	bne.n	80048ee <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80048e8:	2306      	movs	r3, #6
 80048ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80048ee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80048f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	0d0a      	lsrs	r2, r1, #20
 8004904:	2300      	movs	r3, #0
 8004906:	4613      	mov	r3, r2
 8004908:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800490c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004910:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8004912:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004916:	4690      	mov	r8, r2
 8004918:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800491c:	4644      	mov	r4, r8
 800491e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8004922:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004926:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800492a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800492c:	f7fb fe02 	bl	8000534 <__aeabi_i2d>
 8004930:	a37d      	add	r3, pc, #500	; (adr r3, 8004b28 <_etoa+0x300>)
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	f7fb fe67 	bl	8000608 <__aeabi_dmul>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	a37b      	add	r3, pc, #492	; (adr r3, 8004b30 <_etoa+0x308>)
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	f7fb fca8 	bl	800029c <__adddf3>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4614      	mov	r4, r2
 8004952:	461d      	mov	r5, r3
 8004954:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	4b7f      	ldr	r3, [pc, #508]	; (8004b5c <_etoa+0x334>)
 800495e:	f7fb fc9b 	bl	8000298 <__aeabi_dsub>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4610      	mov	r0, r2
 8004968:	4619      	mov	r1, r3
 800496a:	a373      	add	r3, pc, #460	; (adr r3, 8004b38 <_etoa+0x310>)
 800496c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004970:	f7fb fe4a 	bl	8000608 <__aeabi_dmul>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4620      	mov	r0, r4
 800497a:	4629      	mov	r1, r5
 800497c:	f7fb fc8e 	bl	800029c <__adddf3>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4610      	mov	r0, r2
 8004986:	4619      	mov	r1, r3
 8004988:	f7fc f8ee 	bl	8000b68 <__aeabi_d2iz>
 800498c:	4603      	mov	r3, r0
 800498e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004990:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004992:	f7fb fdcf 	bl	8000534 <__aeabi_i2d>
 8004996:	a36a      	add	r3, pc, #424	; (adr r3, 8004b40 <_etoa+0x318>)
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	f7fb fe34 	bl	8000608 <__aeabi_dmul>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4610      	mov	r0, r2
 80049a6:	4619      	mov	r1, r3
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	4b6c      	ldr	r3, [pc, #432]	; (8004b60 <_etoa+0x338>)
 80049ae:	f7fb fc75 	bl	800029c <__adddf3>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4610      	mov	r0, r2
 80049b8:	4619      	mov	r1, r3
 80049ba:	f7fc f8d5 	bl	8000b68 <__aeabi_d2iz>
 80049be:	4603      	mov	r3, r0
 80049c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80049c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80049c4:	f7fb fdb6 	bl	8000534 <__aeabi_i2d>
 80049c8:	a35f      	add	r3, pc, #380	; (adr r3, 8004b48 <_etoa+0x320>)
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	f7fb fe1b 	bl	8000608 <__aeabi_dmul>
 80049d2:	4602      	mov	r2, r0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4614      	mov	r4, r2
 80049d8:	461d      	mov	r5, r3
 80049da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80049dc:	f7fb fdaa 	bl	8000534 <__aeabi_i2d>
 80049e0:	a35b      	add	r3, pc, #364	; (adr r3, 8004b50 <_etoa+0x328>)
 80049e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e6:	f7fb fe0f 	bl	8000608 <__aeabi_dmul>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	4620      	mov	r0, r4
 80049f0:	4629      	mov	r1, r5
 80049f2:	f7fb fc51 	bl	8000298 <__aeabi_dsub>
 80049f6:	4602      	mov	r2, r0
 80049f8:	460b      	mov	r3, r1
 80049fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 80049fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a02:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004a06:	f7fb fdff 	bl	8000608 <__aeabi_dmul>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8004a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a14:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8004a18:	17da      	asrs	r2, r3, #31
 8004a1a:	469a      	mov	sl, r3
 8004a1c:	4693      	mov	fp, r2
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8004a30:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004a34:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	f7fb fc2e 	bl	800029c <__adddf3>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4690      	mov	r8, r2
 8004a46:	4699      	mov	r9, r3
 8004a48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a4c:	f04f 0000 	mov.w	r0, #0
 8004a50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004a54:	f7fb fc20 	bl	8000298 <__aeabi_dsub>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4692      	mov	sl, r2
 8004a5e:	469b      	mov	fp, r3
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <_etoa+0x33c>)
 8004a66:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004a6a:	f7fb fef7 	bl	800085c <__aeabi_ddiv>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4610      	mov	r0, r2
 8004a74:	4619      	mov	r1, r3
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	4b3b      	ldr	r3, [pc, #236]	; (8004b68 <_etoa+0x340>)
 8004a7c:	f7fb fc0e 	bl	800029c <__adddf3>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004a88:	f7fb fee8 	bl	800085c <__aeabi_ddiv>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4610      	mov	r0, r2
 8004a92:	4619      	mov	r1, r3
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	4b34      	ldr	r3, [pc, #208]	; (8004b6c <_etoa+0x344>)
 8004a9a:	f7fb fbff 	bl	800029c <__adddf3>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004aa6:	f7fb fed9 	bl	800085c <__aeabi_ddiv>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4650      	mov	r0, sl
 8004ab0:	4659      	mov	r1, fp
 8004ab2:	f7fb fbf3 	bl	800029c <__adddf3>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	460b      	mov	r3, r1
 8004aba:	4640      	mov	r0, r8
 8004abc:	4649      	mov	r1, r9
 8004abe:	f7fb fecd 	bl	800085c <__aeabi_ddiv>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	4619      	mov	r1, r3
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <_etoa+0x348>)
 8004ad0:	f7fb fbe4 	bl	800029c <__adddf3>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4620      	mov	r0, r4
 8004ada:	4629      	mov	r1, r5
 8004adc:	f7fb fd94 	bl	8000608 <__aeabi_dmul>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8004ae8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004aec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004af0:	f7fb fffc 	bl	8000aec <__aeabi_dcmplt>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00d      	beq.n	8004b16 <_etoa+0x2ee>
    expval--;
 8004afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afc:	3b01      	subs	r3, #1
 8004afe:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8004b00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <_etoa+0x340>)
 8004b0a:	f7fb fea7 	bl	800085c <__aeabi_ddiv>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	460b      	mov	r3, r1
 8004b12:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8004b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b18:	2b63      	cmp	r3, #99	; 0x63
 8004b1a:	dc2b      	bgt.n	8004b74 <_etoa+0x34c>
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8004b22:	db27      	blt.n	8004b74 <_etoa+0x34c>
 8004b24:	2304      	movs	r3, #4
 8004b26:	e026      	b.n	8004b76 <_etoa+0x34e>
 8004b28:	509f79fb 	.word	0x509f79fb
 8004b2c:	3fd34413 	.word	0x3fd34413
 8004b30:	8b60c8b3 	.word	0x8b60c8b3
 8004b34:	3fc68a28 	.word	0x3fc68a28
 8004b38:	636f4361 	.word	0x636f4361
 8004b3c:	3fd287a7 	.word	0x3fd287a7
 8004b40:	0979a371 	.word	0x0979a371
 8004b44:	400a934f 	.word	0x400a934f
 8004b48:	bbb55516 	.word	0xbbb55516
 8004b4c:	40026bb1 	.word	0x40026bb1
 8004b50:	fefa39ef 	.word	0xfefa39ef
 8004b54:	3fe62e42 	.word	0x3fe62e42
 8004b58:	7fefffff 	.word	0x7fefffff
 8004b5c:	3ff80000 	.word	0x3ff80000
 8004b60:	3fe00000 	.word	0x3fe00000
 8004b64:	402c0000 	.word	0x402c0000
 8004b68:	40240000 	.word	0x40240000
 8004b6c:	40180000 	.word	0x40180000
 8004b70:	3ff00000 	.word	0x3ff00000
 8004b74:	2305      	movs	r3, #5
 8004b76:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004b78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d03d      	beq.n	8004c00 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8004b84:	a368      	add	r3, pc, #416	; (adr r3, 8004d28 <_etoa+0x500>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b8e:	f7fb ffc1 	bl	8000b14 <__aeabi_dcmpge>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d024      	beq.n	8004be2 <_etoa+0x3ba>
 8004b98:	a365      	add	r3, pc, #404	; (adr r3, 8004d30 <_etoa+0x508>)
 8004b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ba2:	f7fb ffa3 	bl	8000aec <__aeabi_dcmplt>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d01a      	beq.n	8004be2 <_etoa+0x3ba>
      if ((int)prec > expval) {
 8004bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	da07      	bge.n	8004bc6 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8004bb6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004bba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004bc4:	e002      	b.n	8004bcc <_etoa+0x3a4>
      }
      else {
        prec = 0;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004bcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004be0:	e00e      	b.n	8004c00 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8004be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <_etoa+0x3d8>
 8004bea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d004      	beq.n	8004c00 <_etoa+0x3d8>
        --prec;
 8004bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004c00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c04:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8004c06:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004c0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d904      	bls.n	8004c1a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8004c10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	657b      	str	r3, [r7, #84]	; 0x54
 8004c18:	e001      	b.n	8004c1e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8004c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d004      	beq.n	8004c34 <_etoa+0x40c>
 8004c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8004c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <_etoa+0x426>
    value /= conv.F;
 8004c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c42:	f7fb fe0b 	bl	800085c <__aeabi_ddiv>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8004c52:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d006      	beq.n	8004c68 <_etoa+0x440>
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	60bb      	str	r3, [r7, #8]
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	e003      	b.n	8004c70 <_etoa+0x448>
 8004c68:	ed97 7b04 	vldr	d7, [r7, #16]
 8004c6c:	ed87 7b02 	vstr	d7, [r7, #8]
 8004c70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c78:	9302      	str	r3, [sp, #8]
 8004c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	ed97 0b02 	vldr	d0, [r7, #8]
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	69fa      	ldr	r2, [r7, #28]
 8004c8c:	6a39      	ldr	r1, [r7, #32]
 8004c8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c90:	f7ff fb72 	bl	8004378 <_ftoa>
 8004c94:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8004c96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d03f      	beq.n	8004d1c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004c9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ca0:	f003 0320 	and.w	r3, r3, #32
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d001      	beq.n	8004cac <_etoa+0x484>
 8004ca8:	2045      	movs	r0, #69	; 0x45
 8004caa:	e000      	b.n	8004cae <_etoa+0x486>
 8004cac:	2065      	movs	r0, #101	; 0x65
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	1c53      	adds	r3, r2, #1
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	6a39      	ldr	r1, [r7, #32]
 8004cba:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bfb8      	it	lt
 8004cc2:	425b      	neglt	r3, r3
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc8:	0fdb      	lsrs	r3, r3, #31
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cce:	3a01      	subs	r2, #1
 8004cd0:	2105      	movs	r1, #5
 8004cd2:	9105      	str	r1, [sp, #20]
 8004cd4:	9204      	str	r2, [sp, #16]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	9203      	str	r2, [sp, #12]
 8004cda:	220a      	movs	r2, #10
 8004cdc:	9202      	str	r2, [sp, #8]
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	9000      	str	r0, [sp, #0]
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	69fa      	ldr	r2, [r7, #28]
 8004ce6:	6a39      	ldr	r1, [r7, #32]
 8004ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cea:	f7ff fa72 	bl	80041d2 <_ntoa_long>
 8004cee:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00f      	beq.n	8004d1c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004cfc:	e007      	b.n	8004d0e <_etoa+0x4e6>
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	1c53      	adds	r3, r2, #1
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	6a39      	ldr	r1, [r7, #32]
 8004d0a:	2020      	movs	r0, #32
 8004d0c:	47a0      	blx	r4
 8004d0e:	69fa      	ldr	r2, [r7, #28]
 8004d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d8f0      	bhi.n	8004cfe <_etoa+0x4d6>
    }
  }
  return idx;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3764      	adds	r7, #100	; 0x64
 8004d22:	46bd      	mov	sp, r7
 8004d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d28:	eb1c432d 	.word	0xeb1c432d
 8004d2c:	3f1a36e2 	.word	0x3f1a36e2
 8004d30:	00000000 	.word	0x00000000
 8004d34:	412e8480 	.word	0x412e8480

08004d38 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	b0a3      	sub	sp, #140	; 0x8c
 8004d3e:	af0a      	add	r7, sp, #40	; 0x28
 8004d40:	6178      	str	r0, [r7, #20]
 8004d42:	6139      	str	r1, [r7, #16]
 8004d44:	60fa      	str	r2, [r7, #12]
 8004d46:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 84cf 	bne.w	80056f2 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8004d54:	4ba8      	ldr	r3, [pc, #672]	; (8004ff8 <_vsnprintf+0x2c0>)
 8004d56:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004d58:	f000 bccb 	b.w	80056f2 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b25      	cmp	r3, #37	; 0x25
 8004d62:	d00d      	beq.n	8004d80 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	7818      	ldrb	r0, [r3, #0]
 8004d68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d6a:	1c53      	adds	r3, r2, #1
 8004d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6e:	697c      	ldr	r4, [r7, #20]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6939      	ldr	r1, [r7, #16]
 8004d74:	47a0      	blx	r4
      format++;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60bb      	str	r3, [r7, #8]
      continue;
 8004d7c:	f000 bcb9 	b.w	80056f2 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	3b20      	subs	r3, #32
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d857      	bhi.n	8004e44 <_vsnprintf+0x10c>
 8004d94:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <_vsnprintf+0x64>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004e1d 	.word	0x08004e1d
 8004da0:	08004e45 	.word	0x08004e45
 8004da4:	08004e45 	.word	0x08004e45
 8004da8:	08004e31 	.word	0x08004e31
 8004dac:	08004e45 	.word	0x08004e45
 8004db0:	08004e45 	.word	0x08004e45
 8004db4:	08004e45 	.word	0x08004e45
 8004db8:	08004e45 	.word	0x08004e45
 8004dbc:	08004e45 	.word	0x08004e45
 8004dc0:	08004e45 	.word	0x08004e45
 8004dc4:	08004e45 	.word	0x08004e45
 8004dc8:	08004e09 	.word	0x08004e09
 8004dcc:	08004e45 	.word	0x08004e45
 8004dd0:	08004df5 	.word	0x08004df5
 8004dd4:	08004e45 	.word	0x08004e45
 8004dd8:	08004e45 	.word	0x08004e45
 8004ddc:	08004de1 	.word	0x08004de1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3301      	adds	r3, #1
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	2301      	movs	r3, #1
 8004df0:	653b      	str	r3, [r7, #80]	; 0x50
 8004df2:	e02a      	b.n	8004e4a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8004df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df6:	f043 0302 	orr.w	r3, r3, #2
 8004dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	2301      	movs	r3, #1
 8004e04:	653b      	str	r3, [r7, #80]	; 0x50
 8004e06:	e020      	b.n	8004e4a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8004e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e0a:	f043 0304 	orr.w	r3, r3, #4
 8004e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	3301      	adds	r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	2301      	movs	r3, #1
 8004e18:	653b      	str	r3, [r7, #80]	; 0x50
 8004e1a:	e016      	b.n	8004e4a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8004e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e1e:	f043 0308 	orr.w	r3, r3, #8
 8004e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	3301      	adds	r3, #1
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e2e:	e00c      	b.n	8004e4a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004e30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e32:	f043 0310 	orr.w	r3, r3, #16
 8004e36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	653b      	str	r3, [r7, #80]	; 0x50
 8004e42:	e002      	b.n	8004e4a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8004e44:	2300      	movs	r3, #0
 8004e46:	653b      	str	r3, [r7, #80]	; 0x50
 8004e48:	bf00      	nop
      }
    } while (n);
 8004e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d19c      	bne.n	8004d8a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7ff f853 	bl	8003f04 <_is_digit>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d006      	beq.n	8004e72 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8004e64:	f107 0308 	add.w	r3, r7, #8
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff f862 	bl	8003f32 <_atoi>
 8004e6e:	65b8      	str	r0, [r7, #88]	; 0x58
 8004e70:	e01a      	b.n	8004ea8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b2a      	cmp	r3, #42	; 0x2a
 8004e78:	d116      	bne.n	8004ea8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004e7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e7e:	1d1a      	adds	r2, r3, #4
 8004e80:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	da07      	bge.n	8004e9e <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	425b      	negs	r3, r3
 8004e9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e9c:	e001      	b.n	8004ea2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	3301      	adds	r3, #1
 8004ea6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8004eb2:	d127      	bne.n	8004f04 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 8004eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eba:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f7ff f81c 	bl	8003f04 <_is_digit>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d006      	beq.n	8004ee0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 8004ed2:	f107 0308 	add.w	r3, r7, #8
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff f82b 	bl	8003f32 <_atoi>
 8004edc:	6578      	str	r0, [r7, #84]	; 0x54
 8004ede:	e011      	b.n	8004f04 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ee6:	d10d      	bne.n	8004f04 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004eec:	1d1a      	adds	r2, r3, #4
 8004eee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004efc:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	3b68      	subs	r3, #104	; 0x68
 8004f0a:	2b12      	cmp	r3, #18
 8004f0c:	d866      	bhi.n	8004fdc <_vsnprintf+0x2a4>
 8004f0e:	a201      	add	r2, pc, #4	; (adr r2, 8004f14 <_vsnprintf+0x1dc>)
 8004f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f14:	08004f87 	.word	0x08004f87
 8004f18:	08004fdd 	.word	0x08004fdd
 8004f1c:	08004fbd 	.word	0x08004fbd
 8004f20:	08004fdd 	.word	0x08004fdd
 8004f24:	08004f61 	.word	0x08004f61
 8004f28:	08004fdd 	.word	0x08004fdd
 8004f2c:	08004fdd 	.word	0x08004fdd
 8004f30:	08004fdd 	.word	0x08004fdd
 8004f34:	08004fdd 	.word	0x08004fdd
 8004f38:	08004fdd 	.word	0x08004fdd
 8004f3c:	08004fdd 	.word	0x08004fdd
 8004f40:	08004fdd 	.word	0x08004fdd
 8004f44:	08004fad 	.word	0x08004fad
 8004f48:	08004fdd 	.word	0x08004fdd
 8004f4c:	08004fdd 	.word	0x08004fdd
 8004f50:	08004fdd 	.word	0x08004fdd
 8004f54:	08004fdd 	.word	0x08004fdd
 8004f58:	08004fdd 	.word	0x08004fdd
 8004f5c:	08004fcd 	.word	0x08004fcd
      case 'l' :
        flags |= FLAGS_LONG;
 8004f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f66:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b6c      	cmp	r3, #108	; 0x6c
 8004f74:	d134      	bne.n	8004fe0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8004f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	3301      	adds	r3, #1
 8004f82:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004f84:	e02c      	b.n	8004fe0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8004f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b68      	cmp	r3, #104	; 0x68
 8004f9a:	d123      	bne.n	8004fe4 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8004f9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004faa:	e01b      	b.n	8004fe4 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60bb      	str	r3, [r7, #8]
        break;
 8004fba:	e014      	b.n	8004fe6 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fc2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	60bb      	str	r3, [r7, #8]
        break;
 8004fca:	e00c      	b.n	8004fe6 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004fcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	60bb      	str	r3, [r7, #8]
        break;
 8004fda:	e004      	b.n	8004fe6 <_vsnprintf+0x2ae>
      default :
        break;
 8004fdc:	bf00      	nop
 8004fde:	e002      	b.n	8004fe6 <_vsnprintf+0x2ae>
        break;
 8004fe0:	bf00      	nop
 8004fe2:	e000      	b.n	8004fe6 <_vsnprintf+0x2ae>
        break;
 8004fe4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b67      	cmp	r3, #103	; 0x67
 8004fec:	f300 80b8 	bgt.w	8005160 <_vsnprintf+0x428>
 8004ff0:	2b25      	cmp	r3, #37	; 0x25
 8004ff2:	da27      	bge.n	8005044 <_vsnprintf+0x30c>
 8004ff4:	e370      	b.n	80056d8 <_vsnprintf+0x9a0>
 8004ff6:	bf00      	nop
 8004ff8:	08003e89 	.word	0x08003e89
 8004ffc:	3b69      	subs	r3, #105	; 0x69
 8004ffe:	2201      	movs	r2, #1
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	f249 0241 	movw	r2, #36929	; 0x9041
 8005008:	401a      	ands	r2, r3
 800500a:	2a00      	cmp	r2, #0
 800500c:	bf14      	ite	ne
 800500e:	2201      	movne	r2, #1
 8005010:	2200      	moveq	r2, #0
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	2a00      	cmp	r2, #0
 8005016:	f040 80aa 	bne.w	800516e <_vsnprintf+0x436>
 800501a:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800501e:	2a00      	cmp	r2, #0
 8005020:	bf14      	ite	ne
 8005022:	2201      	movne	r2, #1
 8005024:	2200      	moveq	r2, #0
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	2a00      	cmp	r2, #0
 800502a:	f040 82fb 	bne.w	8005624 <_vsnprintf+0x8ec>
 800502e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005032:	2b00      	cmp	r3, #0
 8005034:	bf14      	ite	ne
 8005036:	2301      	movne	r3, #1
 8005038:	2300      	moveq	r3, #0
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	f040 828d 	bne.w	800555c <_vsnprintf+0x824>
 8005042:	e349      	b.n	80056d8 <_vsnprintf+0x9a0>
 8005044:	3b25      	subs	r3, #37	; 0x25
 8005046:	2b42      	cmp	r3, #66	; 0x42
 8005048:	f200 8346 	bhi.w	80056d8 <_vsnprintf+0x9a0>
 800504c:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <_vsnprintf+0x31c>)
 800504e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005052:	bf00      	nop
 8005054:	080056c1 	.word	0x080056c1
 8005058:	080056d9 	.word	0x080056d9
 800505c:	080056d9 	.word	0x080056d9
 8005060:	080056d9 	.word	0x080056d9
 8005064:	080056d9 	.word	0x080056d9
 8005068:	080056d9 	.word	0x080056d9
 800506c:	080056d9 	.word	0x080056d9
 8005070:	080056d9 	.word	0x080056d9
 8005074:	080056d9 	.word	0x080056d9
 8005078:	080056d9 	.word	0x080056d9
 800507c:	080056d9 	.word	0x080056d9
 8005080:	080056d9 	.word	0x080056d9
 8005084:	080056d9 	.word	0x080056d9
 8005088:	080056d9 	.word	0x080056d9
 800508c:	080056d9 	.word	0x080056d9
 8005090:	080056d9 	.word	0x080056d9
 8005094:	080056d9 	.word	0x080056d9
 8005098:	080056d9 	.word	0x080056d9
 800509c:	080056d9 	.word	0x080056d9
 80050a0:	080056d9 	.word	0x080056d9
 80050a4:	080056d9 	.word	0x080056d9
 80050a8:	080056d9 	.word	0x080056d9
 80050ac:	080056d9 	.word	0x080056d9
 80050b0:	080056d9 	.word	0x080056d9
 80050b4:	080056d9 	.word	0x080056d9
 80050b8:	080056d9 	.word	0x080056d9
 80050bc:	080056d9 	.word	0x080056d9
 80050c0:	080056d9 	.word	0x080056d9
 80050c4:	080056d9 	.word	0x080056d9
 80050c8:	080056d9 	.word	0x080056d9
 80050cc:	080056d9 	.word	0x080056d9
 80050d0:	080056d9 	.word	0x080056d9
 80050d4:	08005475 	.word	0x08005475
 80050d8:	08005425 	.word	0x08005425
 80050dc:	08005475 	.word	0x08005475
 80050e0:	080056d9 	.word	0x080056d9
 80050e4:	080056d9 	.word	0x080056d9
 80050e8:	080056d9 	.word	0x080056d9
 80050ec:	080056d9 	.word	0x080056d9
 80050f0:	080056d9 	.word	0x080056d9
 80050f4:	080056d9 	.word	0x080056d9
 80050f8:	080056d9 	.word	0x080056d9
 80050fc:	080056d9 	.word	0x080056d9
 8005100:	080056d9 	.word	0x080056d9
 8005104:	080056d9 	.word	0x080056d9
 8005108:	080056d9 	.word	0x080056d9
 800510c:	080056d9 	.word	0x080056d9
 8005110:	080056d9 	.word	0x080056d9
 8005114:	080056d9 	.word	0x080056d9
 8005118:	080056d9 	.word	0x080056d9
 800511c:	080056d9 	.word	0x080056d9
 8005120:	0800516f 	.word	0x0800516f
 8005124:	080056d9 	.word	0x080056d9
 8005128:	080056d9 	.word	0x080056d9
 800512c:	080056d9 	.word	0x080056d9
 8005130:	080056d9 	.word	0x080056d9
 8005134:	080056d9 	.word	0x080056d9
 8005138:	080056d9 	.word	0x080056d9
 800513c:	080056d9 	.word	0x080056d9
 8005140:	080056d9 	.word	0x080056d9
 8005144:	080056d9 	.word	0x080056d9
 8005148:	0800516f 	.word	0x0800516f
 800514c:	080054e5 	.word	0x080054e5
 8005150:	0800516f 	.word	0x0800516f
 8005154:	08005475 	.word	0x08005475
 8005158:	08005425 	.word	0x08005425
 800515c:	08005475 	.word	0x08005475
 8005160:	2b78      	cmp	r3, #120	; 0x78
 8005162:	f300 82b9 	bgt.w	80056d8 <_vsnprintf+0x9a0>
 8005166:	2b69      	cmp	r3, #105	; 0x69
 8005168:	f6bf af48 	bge.w	8004ffc <_vsnprintf+0x2c4>
 800516c:	e2b4      	b.n	80056d8 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b78      	cmp	r3, #120	; 0x78
 8005174:	d003      	beq.n	800517e <_vsnprintf+0x446>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	2b58      	cmp	r3, #88	; 0x58
 800517c:	d102      	bne.n	8005184 <_vsnprintf+0x44c>
          base = 16U;
 800517e:	2310      	movs	r3, #16
 8005180:	64bb      	str	r3, [r7, #72]	; 0x48
 8005182:	e013      	b.n	80051ac <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b6f      	cmp	r3, #111	; 0x6f
 800518a:	d102      	bne.n	8005192 <_vsnprintf+0x45a>
          base =  8U;
 800518c:	2308      	movs	r3, #8
 800518e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005190:	e00c      	b.n	80051ac <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b62      	cmp	r3, #98	; 0x62
 8005198:	d102      	bne.n	80051a0 <_vsnprintf+0x468>
          base =  2U;
 800519a:	2302      	movs	r3, #2
 800519c:	64bb      	str	r3, [r7, #72]	; 0x48
 800519e:	e005      	b.n	80051ac <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 80051a0:	230a      	movs	r3, #10
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80051a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a6:	f023 0310 	bic.w	r3, r3, #16
 80051aa:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b58      	cmp	r3, #88	; 0x58
 80051b2:	d103      	bne.n	80051bc <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 80051b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b6:	f043 0320 	orr.w	r3, r3, #32
 80051ba:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b69      	cmp	r3, #105	; 0x69
 80051c2:	d007      	beq.n	80051d4 <_vsnprintf+0x49c>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b64      	cmp	r3, #100	; 0x64
 80051ca:	d003      	beq.n	80051d4 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80051cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ce:	f023 030c 	bic.w	r3, r3, #12
 80051d2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80051d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 80051de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e0:	f023 0301 	bic.w	r3, r3, #1
 80051e4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b69      	cmp	r3, #105	; 0x69
 80051ec:	d004      	beq.n	80051f8 <_vsnprintf+0x4c0>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b64      	cmp	r3, #100	; 0x64
 80051f4:	f040 8098 	bne.w	8005328 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80051f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d031      	beq.n	8005266 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005202:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005206:	3307      	adds	r3, #7
 8005208:	f023 0307 	bic.w	r3, r3, #7
 800520c:	f103 0208 	add.w	r2, r3, #8
 8005210:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800521c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005220:	2b00      	cmp	r3, #0
 8005222:	da06      	bge.n	8005232 <_vsnprintf+0x4fa>
 8005224:	2100      	movs	r1, #0
 8005226:	f1d2 0800 	rsbs	r8, r2, #0
 800522a:	eb61 0903 	sbc.w	r9, r1, r3
 800522e:	4642      	mov	r2, r8
 8005230:	464b      	mov	r3, r9
 8005232:	69f9      	ldr	r1, [r7, #28]
 8005234:	0fc9      	lsrs	r1, r1, #31
 8005236:	b2c9      	uxtb	r1, r1
 8005238:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800523a:	2400      	movs	r4, #0
 800523c:	4682      	mov	sl, r0
 800523e:	46a3      	mov	fp, r4
 8005240:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005242:	9008      	str	r0, [sp, #32]
 8005244:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005246:	9007      	str	r0, [sp, #28]
 8005248:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800524a:	9006      	str	r0, [sp, #24]
 800524c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8005250:	9102      	str	r1, [sp, #8]
 8005252:	e9cd 2300 	strd	r2, r3, [sp]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800525a:	6939      	ldr	r1, [r7, #16]
 800525c:	6978      	ldr	r0, [r7, #20]
 800525e:	f7ff f81e 	bl	800429e <_ntoa_long_long>
 8005262:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005264:	e0da      	b.n	800541c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526c:	2b00      	cmp	r3, #0
 800526e:	d020      	beq.n	80052b2 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8005270:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005274:	1d1a      	adds	r2, r3, #4
 8005276:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	bfb8      	it	lt
 8005284:	425b      	neglt	r3, r3
 8005286:	4619      	mov	r1, r3
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	0fdb      	lsrs	r3, r3, #31
 800528c:	b2db      	uxtb	r3, r3
 800528e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005290:	9205      	str	r2, [sp, #20]
 8005292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005294:	9204      	str	r2, [sp, #16]
 8005296:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005298:	9203      	str	r2, [sp, #12]
 800529a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800529c:	9202      	str	r2, [sp, #8]
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	9100      	str	r1, [sp, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052a6:	6939      	ldr	r1, [r7, #16]
 80052a8:	6978      	ldr	r0, [r7, #20]
 80052aa:	f7fe ff92 	bl	80041d2 <_ntoa_long>
 80052ae:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80052b0:	e0b4      	b.n	800541c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80052b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d007      	beq.n	80052cc <_vsnprintf+0x594>
 80052bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e012      	b.n	80052f2 <_vsnprintf+0x5ba>
 80052cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <_vsnprintf+0x5ae>
 80052d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052da:	1d1a      	adds	r2, r3, #4
 80052dc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	b21b      	sxth	r3, r3
 80052e4:	e005      	b.n	80052f2 <_vsnprintf+0x5ba>
 80052e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052ea:	1d1a      	adds	r2, r3, #4
 80052ec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfb8      	it	lt
 80052fa:	425b      	neglt	r3, r3
 80052fc:	4619      	mov	r1, r3
 80052fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005300:	0fdb      	lsrs	r3, r3, #31
 8005302:	b2db      	uxtb	r3, r3
 8005304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005306:	9205      	str	r2, [sp, #20]
 8005308:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800530a:	9204      	str	r2, [sp, #16]
 800530c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800530e:	9203      	str	r2, [sp, #12]
 8005310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005312:	9202      	str	r2, [sp, #8]
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	9100      	str	r1, [sp, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800531c:	6939      	ldr	r1, [r7, #16]
 800531e:	6978      	ldr	r0, [r7, #20]
 8005320:	f7fe ff57 	bl	80041d2 <_ntoa_long>
 8005324:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8005326:	e079      	b.n	800541c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800532a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800532e:	2b00      	cmp	r3, #0
 8005330:	d022      	beq.n	8005378 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8005332:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005336:	3307      	adds	r3, #7
 8005338:	f023 0307 	bic.w	r3, r3, #7
 800533c:	f103 0208 	add.w	r2, r3, #8
 8005340:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005348:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800534a:	2000      	movs	r0, #0
 800534c:	460d      	mov	r5, r1
 800534e:	4606      	mov	r6, r0
 8005350:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8005352:	9108      	str	r1, [sp, #32]
 8005354:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005356:	9107      	str	r1, [sp, #28]
 8005358:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800535a:	9106      	str	r1, [sp, #24]
 800535c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8005360:	2100      	movs	r1, #0
 8005362:	9102      	str	r1, [sp, #8]
 8005364:	e9cd 2300 	strd	r2, r3, [sp]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800536c:	6939      	ldr	r1, [r7, #16]
 800536e:	6978      	ldr	r0, [r7, #20]
 8005370:	f7fe ff95 	bl	800429e <_ntoa_long_long>
 8005374:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005376:	e051      	b.n	800541c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d018      	beq.n	80053b4 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005386:	1d1a      	adds	r2, r3, #4
 8005388:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005390:	9205      	str	r2, [sp, #20]
 8005392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005394:	9204      	str	r2, [sp, #16]
 8005396:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005398:	9203      	str	r2, [sp, #12]
 800539a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800539c:	9202      	str	r2, [sp, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	9201      	str	r2, [sp, #4]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053a8:	6939      	ldr	r1, [r7, #16]
 80053aa:	6978      	ldr	r0, [r7, #20]
 80053ac:	f7fe ff11 	bl	80041d2 <_ntoa_long>
 80053b0:	64f8      	str	r0, [r7, #76]	; 0x4c
 80053b2:	e033      	b.n	800541c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80053b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <_vsnprintf+0x696>
 80053be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053c2:	1d1a      	adds	r2, r3, #4
 80053c4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	e012      	b.n	80053f4 <_vsnprintf+0x6bc>
 80053ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <_vsnprintf+0x6b0>
 80053d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053dc:	1d1a      	adds	r2, r3, #4
 80053de:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	e005      	b.n	80053f4 <_vsnprintf+0x6bc>
 80053e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053ec:	1d1a      	adds	r2, r3, #4
 80053ee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 80053f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f8:	9305      	str	r3, [sp, #20]
 80053fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053fc:	9304      	str	r3, [sp, #16]
 80053fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005400:	9303      	str	r3, [sp, #12]
 8005402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005404:	9302      	str	r3, [sp, #8]
 8005406:	2300      	movs	r3, #0
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005412:	6939      	ldr	r1, [r7, #16]
 8005414:	6978      	ldr	r0, [r7, #20]
 8005416:	f7fe fedc 	bl	80041d2 <_ntoa_long>
 800541a:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	3301      	adds	r3, #1
 8005420:	60bb      	str	r3, [r7, #8]
        break;
 8005422:	e166      	b.n	80056f2 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b46      	cmp	r3, #70	; 0x46
 800542a:	d103      	bne.n	8005434 <_vsnprintf+0x6fc>
 800542c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800542e:	f043 0320 	orr.w	r3, r3, #32
 8005432:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005438:	3307      	adds	r3, #7
 800543a:	f023 0307 	bic.w	r3, r3, #7
 800543e:	f103 0208 	add.w	r2, r3, #8
 8005442:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005446:	ed93 7b00 	vldr	d7, [r3]
 800544a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800544c:	9302      	str	r3, [sp, #8]
 800544e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	eeb0 0a47 	vmov.f32	s0, s14
 800545a:	eef0 0a67 	vmov.f32	s1, s15
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005462:	6939      	ldr	r1, [r7, #16]
 8005464:	6978      	ldr	r0, [r7, #20]
 8005466:	f7fe ff87 	bl	8004378 <_ftoa>
 800546a:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	3301      	adds	r3, #1
 8005470:	60bb      	str	r3, [r7, #8]
        break;
 8005472:	e13e      	b.n	80056f2 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	2b67      	cmp	r3, #103	; 0x67
 800547a:	d003      	beq.n	8005484 <_vsnprintf+0x74c>
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	2b47      	cmp	r3, #71	; 0x47
 8005482:	d103      	bne.n	800548c <_vsnprintf+0x754>
 8005484:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800548a:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b45      	cmp	r3, #69	; 0x45
 8005492:	d003      	beq.n	800549c <_vsnprintf+0x764>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	2b47      	cmp	r3, #71	; 0x47
 800549a:	d103      	bne.n	80054a4 <_vsnprintf+0x76c>
 800549c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549e:	f043 0320 	orr.w	r3, r3, #32
 80054a2:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 80054a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054a8:	3307      	adds	r3, #7
 80054aa:	f023 0307 	bic.w	r3, r3, #7
 80054ae:	f103 0208 	add.w	r2, r3, #8
 80054b2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80054b6:	ed93 7b00 	vldr	d7, [r3]
 80054ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054bc:	9302      	str	r3, [sp, #8]
 80054be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	eeb0 0a47 	vmov.f32	s0, s14
 80054ca:	eef0 0a67 	vmov.f32	s1, s15
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054d2:	6939      	ldr	r1, [r7, #16]
 80054d4:	6978      	ldr	r0, [r7, #20]
 80054d6:	f7ff f9a7 	bl	8004828 <_etoa>
 80054da:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	3301      	adds	r3, #1
 80054e0:	60bb      	str	r3, [r7, #8]
        break;
 80054e2:	e106      	b.n	80056f2 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80054e4:	2301      	movs	r3, #1
 80054e6:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80054e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10e      	bne.n	8005510 <_vsnprintf+0x7d8>
          while (l++ < width) {
 80054f2:	e007      	b.n	8005504 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 80054f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054f6:	1c53      	adds	r3, r2, #1
 80054f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054fa:	697c      	ldr	r4, [r7, #20]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6939      	ldr	r1, [r7, #16]
 8005500:	2020      	movs	r0, #32
 8005502:	47a0      	blx	r4
          while (l++ < width) {
 8005504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005506:	1c5a      	adds	r2, r3, #1
 8005508:	647a      	str	r2, [r7, #68]	; 0x44
 800550a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800550c:	429a      	cmp	r2, r3
 800550e:	d8f1      	bhi.n	80054f4 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005514:	1d1a      	adds	r2, r3, #4
 8005516:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	b2d8      	uxtb	r0, r3
 800551e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005520:	1c53      	adds	r3, r2, #1
 8005522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005524:	697c      	ldr	r4, [r7, #20]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6939      	ldr	r1, [r7, #16]
 800552a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800552c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00e      	beq.n	8005554 <_vsnprintf+0x81c>
          while (l++ < width) {
 8005536:	e007      	b.n	8005548 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8005538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800553a:	1c53      	adds	r3, r2, #1
 800553c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800553e:	697c      	ldr	r4, [r7, #20]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6939      	ldr	r1, [r7, #16]
 8005544:	2020      	movs	r0, #32
 8005546:	47a0      	blx	r4
          while (l++ < width) {
 8005548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	647a      	str	r2, [r7, #68]	; 0x44
 800554e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005550:	429a      	cmp	r2, r3
 8005552:	d8f1      	bhi.n	8005538 <_vsnprintf+0x800>
          }
        }
        format++;
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	3301      	adds	r3, #1
 8005558:	60bb      	str	r3, [r7, #8]
        break;
 800555a:	e0ca      	b.n	80056f2 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800555c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005560:	1d1a      	adds	r2, r3, #4
 8005562:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800556a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <_vsnprintf+0x83c>
 8005570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005572:	e001      	b.n	8005578 <_vsnprintf+0x840>
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	4619      	mov	r1, r3
 800557a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800557c:	f7fe fca5 	bl	8003eca <_strnlen_s>
 8005580:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8005582:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005588:	2b00      	cmp	r3, #0
 800558a:	d005      	beq.n	8005598 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 800558c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800558e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005590:	4293      	cmp	r3, r2
 8005592:	bf28      	it	cs
 8005594:	4613      	movcs	r3, r2
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8005598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800559a:	f003 0302 	and.w	r3, r3, #2
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d11a      	bne.n	80055d8 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80055a2:	e007      	b.n	80055b4 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80055a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055a6:	1c53      	adds	r3, r2, #1
 80055a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055aa:	697c      	ldr	r4, [r7, #20]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6939      	ldr	r1, [r7, #16]
 80055b0:	2020      	movs	r0, #32
 80055b2:	47a0      	blx	r4
          while (l++ < width) {
 80055b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80055ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80055bc:	429a      	cmp	r2, r3
 80055be:	d8f1      	bhi.n	80055a4 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80055c0:	e00a      	b.n	80055d8 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 80055c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	643a      	str	r2, [r7, #64]	; 0x40
 80055c8:	7818      	ldrb	r0, [r3, #0]
 80055ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055cc:	1c53      	adds	r3, r2, #1
 80055ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055d0:	697c      	ldr	r4, [r7, #20]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6939      	ldr	r1, [r7, #16]
 80055d6:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80055d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <_vsnprintf+0x8bc>
 80055e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0eb      	beq.n	80055c2 <_vsnprintf+0x88a>
 80055ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ec:	1e5a      	subs	r2, r3, #1
 80055ee:	657a      	str	r2, [r7, #84]	; 0x54
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e6      	bne.n	80055c2 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80055f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00e      	beq.n	800561c <_vsnprintf+0x8e4>
          while (l++ < width) {
 80055fe:	e007      	b.n	8005610 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8005600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005602:	1c53      	adds	r3, r2, #1
 8005604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005606:	697c      	ldr	r4, [r7, #20]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6939      	ldr	r1, [r7, #16]
 800560c:	2020      	movs	r0, #32
 800560e:	47a0      	blx	r4
          while (l++ < width) {
 8005610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005616:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005618:	429a      	cmp	r2, r3
 800561a:	d8f1      	bhi.n	8005600 <_vsnprintf+0x8c8>
          }
        }
        format++;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	3301      	adds	r3, #1
 8005620:	60bb      	str	r3, [r7, #8]
        break;
 8005622:	e066      	b.n	80056f2 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8005624:	2308      	movs	r3, #8
 8005626:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8005628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800562a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800562e:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005630:	2300      	movs	r3, #0
 8005632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8005636:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800563a:	2b00      	cmp	r3, #0
 800563c:	d023      	beq.n	8005686 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800563e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005642:	1d1a      	adds	r2, r3, #4
 8005644:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	2300      	movs	r3, #0
 800564e:	603a      	str	r2, [r7, #0]
 8005650:	607b      	str	r3, [r7, #4]
 8005652:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005654:	9308      	str	r3, [sp, #32]
 8005656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005658:	9307      	str	r3, [sp, #28]
 800565a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800565c:	9306      	str	r3, [sp, #24]
 800565e:	f04f 0210 	mov.w	r2, #16
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800566a:	2300      	movs	r3, #0
 800566c:	9302      	str	r3, [sp, #8]
 800566e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005672:	e9cd 3400 	strd	r3, r4, [sp]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800567a:	6939      	ldr	r1, [r7, #16]
 800567c:	6978      	ldr	r0, [r7, #20]
 800567e:	f7fe fe0e 	bl	800429e <_ntoa_long_long>
 8005682:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005684:	e018      	b.n	80056b8 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8005686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800568a:	1d1a      	adds	r2, r3, #4
 800568c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005696:	9305      	str	r3, [sp, #20]
 8005698:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800569e:	9303      	str	r3, [sp, #12]
 80056a0:	2310      	movs	r3, #16
 80056a2:	9302      	str	r3, [sp, #8]
 80056a4:	2300      	movs	r3, #0
 80056a6:	9301      	str	r3, [sp, #4]
 80056a8:	9200      	str	r2, [sp, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056ae:	6939      	ldr	r1, [r7, #16]
 80056b0:	6978      	ldr	r0, [r7, #20]
 80056b2:	f7fe fd8e 	bl	80041d2 <_ntoa_long>
 80056b6:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	3301      	adds	r3, #1
 80056bc:	60bb      	str	r3, [r7, #8]
        break;
 80056be:	e018      	b.n	80056f2 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80056c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056c2:	1c53      	adds	r3, r2, #1
 80056c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c6:	697c      	ldr	r4, [r7, #20]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6939      	ldr	r1, [r7, #16]
 80056cc:	2025      	movs	r0, #37	; 0x25
 80056ce:	47a0      	blx	r4
        format++;
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	3301      	adds	r3, #1
 80056d4:	60bb      	str	r3, [r7, #8]
        break;
 80056d6:	e00c      	b.n	80056f2 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	7818      	ldrb	r0, [r3, #0]
 80056dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056de:	1c53      	adds	r3, r2, #1
 80056e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056e2:	697c      	ldr	r4, [r7, #20]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6939      	ldr	r1, [r7, #16]
 80056e8:	47a0      	blx	r4
        format++;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	3301      	adds	r3, #1
 80056ee:	60bb      	str	r3, [r7, #8]
        break;
 80056f0:	bf00      	nop
  while (*format)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f47f ab30 	bne.w	8004d5c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80056fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	429a      	cmp	r2, r3
 8005702:	d302      	bcc.n	800570a <_vsnprintf+0x9d2>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	1e5a      	subs	r2, r3, #1
 8005708:	e000      	b.n	800570c <_vsnprintf+0x9d4>
 800570a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800570c:	697c      	ldr	r4, [r7, #20]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6939      	ldr	r1, [r7, #16]
 8005712:	2000      	movs	r0, #0
 8005714:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8005716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005718:	4618      	mov	r0, r3
 800571a:	3764      	adds	r7, #100	; 0x64
 800571c:	46bd      	mov	sp, r7
 800571e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005722:	bf00      	nop

08005724 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8005724:	b40f      	push	{r0, r1, r2, r3}
 8005726:	b580      	push	{r7, lr}
 8005728:	b086      	sub	sp, #24
 800572a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800572c:	f107 031c 	add.w	r3, r7, #28
 8005730:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8005732:	1d39      	adds	r1, r7, #4
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f04f 32ff 	mov.w	r2, #4294967295
 800573e:	4806      	ldr	r0, [pc, #24]	; (8005758 <printf_+0x34>)
 8005740:	f7ff fafa 	bl	8004d38 <_vsnprintf>
 8005744:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8005746:	68fb      	ldr	r3, [r7, #12]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005752:	b004      	add	sp, #16
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	08003ea5 	.word	0x08003ea5

0800575c <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 800575c:	b40e      	push	{r1, r2, r3}
 800575e:	b580      	push	{r7, lr}
 8005760:	b087      	sub	sp, #28
 8005762:	af02      	add	r7, sp, #8
 8005764:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8005766:	f107 0320 	add.w	r3, r7, #32
 800576a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f04f 32ff 	mov.w	r2, #4294967295
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4805      	ldr	r0, [pc, #20]	; (8005790 <sprintf_+0x34>)
 800577a:	f7ff fadd 	bl	8004d38 <_vsnprintf>
 800577e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8005780:	68fb      	ldr	r3, [r7, #12]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800578c:	b003      	add	sp, #12
 800578e:	4770      	bx	lr
 8005790:	08003e5b 	.word	0x08003e5b

08005794 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800579a:	1d3b      	adds	r3, r7, #4
 800579c:	2200      	movs	r2, #0
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	605a      	str	r2, [r3, #4]
 80057a2:	609a      	str	r2, [r3, #8]
 80057a4:	60da      	str	r2, [r3, #12]
 80057a6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80057a8:	2300      	movs	r3, #0
 80057aa:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80057ac:	4b24      	ldr	r3, [pc, #144]	; (8005840 <MX_RTC_Init+0xac>)
 80057ae:	4a25      	ldr	r2, [pc, #148]	; (8005844 <MX_RTC_Init+0xb0>)
 80057b0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80057b2:	4b23      	ldr	r3, [pc, #140]	; (8005840 <MX_RTC_Init+0xac>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80057b8:	4b21      	ldr	r3, [pc, #132]	; (8005840 <MX_RTC_Init+0xac>)
 80057ba:	227f      	movs	r2, #127	; 0x7f
 80057bc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80057be:	4b20      	ldr	r3, [pc, #128]	; (8005840 <MX_RTC_Init+0xac>)
 80057c0:	22ff      	movs	r2, #255	; 0xff
 80057c2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80057c4:	4b1e      	ldr	r3, [pc, #120]	; (8005840 <MX_RTC_Init+0xac>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <MX_RTC_Init+0xac>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80057d0:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <MX_RTC_Init+0xac>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80057d6:	481a      	ldr	r0, [pc, #104]	; (8005840 <MX_RTC_Init+0xac>)
 80057d8:	f003 fb5e 	bl	8008e98 <HAL_RTC_Init>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80057e2:	f7fe fb35 	bl	8003e50 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 80057e6:	2307      	movs	r3, #7
 80057e8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 80057ea:	233b      	movs	r3, #59	; 0x3b
 80057ec:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 80057ee:	231e      	movs	r3, #30
 80057f0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80057fa:	1d3b      	adds	r3, r7, #4
 80057fc:	2200      	movs	r2, #0
 80057fe:	4619      	mov	r1, r3
 8005800:	480f      	ldr	r0, [pc, #60]	; (8005840 <MX_RTC_Init+0xac>)
 8005802:	f003 fbbf 	bl	8008f84 <HAL_RTC_SetTime>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800580c:	f7fe fb20 	bl	8003e50 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8005810:	2307      	movs	r3, #7
 8005812:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8005814:	2307      	movs	r3, #7
 8005816:	707b      	strb	r3, [r7, #1]
  sDate.Date = 7;
 8005818:	2307      	movs	r3, #7
 800581a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 800581c:	2318      	movs	r3, #24
 800581e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005820:	463b      	mov	r3, r7
 8005822:	2200      	movs	r2, #0
 8005824:	4619      	mov	r1, r3
 8005826:	4806      	ldr	r0, [pc, #24]	; (8005840 <MX_RTC_Init+0xac>)
 8005828:	f003 fca4 	bl	8009174 <HAL_RTC_SetDate>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8005832:	f7fe fb0d 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005836:	bf00      	nop
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	2000079c 	.word	0x2000079c
 8005844:	40002800 	.word	0x40002800

08005848 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b088      	sub	sp, #32
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005850:	f107 0308 	add.w	r3, r7, #8
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	605a      	str	r2, [r3, #4]
 800585a:	609a      	str	r2, [r3, #8]
 800585c:	60da      	str	r2, [r3, #12]
 800585e:	611a      	str	r2, [r3, #16]
 8005860:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a0c      	ldr	r2, [pc, #48]	; (8005898 <HAL_RTC_MspInit+0x50>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d111      	bne.n	8005890 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800586c:	2302      	movs	r3, #2
 800586e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005874:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	4618      	mov	r0, r3
 800587c:	f003 fa1c 	bl	8008cb8 <HAL_RCCEx_PeriphCLKConfig>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8005886:	f7fe fae3 	bl	8003e50 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800588a:	4b04      	ldr	r3, [pc, #16]	; (800589c <HAL_RTC_MspInit+0x54>)
 800588c:	2201      	movs	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005890:	bf00      	nop
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40002800 	.word	0x40002800
 800589c:	42470e3c 	.word	0x42470e3c

080058a0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <MX_SPI3_Init+0x64>)
 80058a6:	4a18      	ldr	r2, [pc, #96]	; (8005908 <MX_SPI3_Init+0x68>)
 80058a8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80058aa:	4b16      	ldr	r3, [pc, #88]	; (8005904 <MX_SPI3_Init+0x64>)
 80058ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80058b0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80058b2:	4b14      	ldr	r3, [pc, #80]	; (8005904 <MX_SPI3_Init+0x64>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80058b8:	4b12      	ldr	r3, [pc, #72]	; (8005904 <MX_SPI3_Init+0x64>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <MX_SPI3_Init+0x64>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80058c4:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <MX_SPI3_Init+0x64>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <MX_SPI3_Init+0x64>)
 80058cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058d0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80058d2:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <MX_SPI3_Init+0x64>)
 80058d4:	2230      	movs	r2, #48	; 0x30
 80058d6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80058d8:	4b0a      	ldr	r3, [pc, #40]	; (8005904 <MX_SPI3_Init+0x64>)
 80058da:	2200      	movs	r2, #0
 80058dc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80058de:	4b09      	ldr	r3, [pc, #36]	; (8005904 <MX_SPI3_Init+0x64>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e4:	4b07      	ldr	r3, [pc, #28]	; (8005904 <MX_SPI3_Init+0x64>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80058ea:	4b06      	ldr	r3, [pc, #24]	; (8005904 <MX_SPI3_Init+0x64>)
 80058ec:	220a      	movs	r2, #10
 80058ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80058f0:	4804      	ldr	r0, [pc, #16]	; (8005904 <MX_SPI3_Init+0x64>)
 80058f2:	f003 fef9 	bl	80096e8 <HAL_SPI_Init>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80058fc:	f7fe faa8 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005900:	bf00      	nop
 8005902:	bd80      	pop	{r7, pc}
 8005904:	200007bc 	.word	0x200007bc
 8005908:	40003c00 	.word	0x40003c00

0800590c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08a      	sub	sp, #40	; 0x28
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005914:	f107 0314 	add.w	r3, r7, #20
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
 800591c:	605a      	str	r2, [r3, #4]
 800591e:	609a      	str	r2, [r3, #8]
 8005920:	60da      	str	r2, [r3, #12]
 8005922:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a19      	ldr	r2, [pc, #100]	; (8005990 <HAL_SPI_MspInit+0x84>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d12c      	bne.n	8005988 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800592e:	2300      	movs	r3, #0
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	4b18      	ldr	r3, [pc, #96]	; (8005994 <HAL_SPI_MspInit+0x88>)
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	4a17      	ldr	r2, [pc, #92]	; (8005994 <HAL_SPI_MspInit+0x88>)
 8005938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800593c:	6413      	str	r3, [r2, #64]	; 0x40
 800593e:	4b15      	ldr	r3, [pc, #84]	; (8005994 <HAL_SPI_MspInit+0x88>)
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
 800594e:	4b11      	ldr	r3, [pc, #68]	; (8005994 <HAL_SPI_MspInit+0x88>)
 8005950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005952:	4a10      	ldr	r2, [pc, #64]	; (8005994 <HAL_SPI_MspInit+0x88>)
 8005954:	f043 0304 	orr.w	r3, r3, #4
 8005958:	6313      	str	r3, [r2, #48]	; 0x30
 800595a:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <HAL_SPI_MspInit+0x88>)
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	f003 0304 	and.w	r3, r3, #4
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005966:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800596a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800596c:	2302      	movs	r3, #2
 800596e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005970:	2300      	movs	r3, #0
 8005972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005974:	2303      	movs	r3, #3
 8005976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005978:	2306      	movs	r3, #6
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800597c:	f107 0314 	add.w	r3, r7, #20
 8005980:	4619      	mov	r1, r3
 8005982:	4805      	ldr	r0, [pc, #20]	; (8005998 <HAL_SPI_MspInit+0x8c>)
 8005984:	f000 fdb6 	bl	80064f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005988:	bf00      	nop
 800598a:	3728      	adds	r7, #40	; 0x28
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40003c00 	.word	0x40003c00
 8005994:	40023800 	.word	0x40023800
 8005998:	40020800 	.word	0x40020800

0800599c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059a2:	2300      	movs	r3, #0
 80059a4:	607b      	str	r3, [r7, #4]
 80059a6:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <HAL_MspInit+0x54>)
 80059a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059aa:	4a11      	ldr	r2, [pc, #68]	; (80059f0 <HAL_MspInit+0x54>)
 80059ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059b0:	6453      	str	r3, [r2, #68]	; 0x44
 80059b2:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <HAL_MspInit+0x54>)
 80059b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ba:	607b      	str	r3, [r7, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059be:	2300      	movs	r3, #0
 80059c0:	603b      	str	r3, [r7, #0]
 80059c2:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <HAL_MspInit+0x54>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	4a0a      	ldr	r2, [pc, #40]	; (80059f0 <HAL_MspInit+0x54>)
 80059c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059cc:	6413      	str	r3, [r2, #64]	; 0x40
 80059ce:	4b08      	ldr	r3, [pc, #32]	; (80059f0 <HAL_MspInit+0x54>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d6:	603b      	str	r3, [r7, #0]
 80059d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80059da:	2200      	movs	r2, #0
 80059dc:	210f      	movs	r1, #15
 80059de:	f06f 0001 	mvn.w	r0, #1
 80059e2:	f000 fbfd 	bl	80061e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800

080059f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80059fc:	2300      	movs	r3, #0
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8005a04:	2300      	movs	r3, #0
 8005a06:	60bb      	str	r3, [r7, #8]
 8005a08:	4b2e      	ldr	r3, [pc, #184]	; (8005ac4 <HAL_InitTick+0xd0>)
 8005a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0c:	4a2d      	ldr	r2, [pc, #180]	; (8005ac4 <HAL_InitTick+0xd0>)
 8005a0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a12:	6453      	str	r3, [r2, #68]	; 0x44
 8005a14:	4b2b      	ldr	r3, [pc, #172]	; (8005ac4 <HAL_InitTick+0xd0>)
 8005a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1c:	60bb      	str	r3, [r7, #8]
 8005a1e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005a20:	f107 020c 	add.w	r2, r7, #12
 8005a24:	f107 0310 	add.w	r3, r7, #16
 8005a28:	4611      	mov	r1, r2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f003 f912 	bl	8008c54 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005a30:	f003 f8fc 	bl	8008c2c <HAL_RCC_GetPCLK2Freq>
 8005a34:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	4a23      	ldr	r2, [pc, #140]	; (8005ac8 <HAL_InitTick+0xd4>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	0c9b      	lsrs	r3, r3, #18
 8005a40:	3b01      	subs	r3, #1
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8005a44:	4b21      	ldr	r3, [pc, #132]	; (8005acc <HAL_InitTick+0xd8>)
 8005a46:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <HAL_InitTick+0xdc>)
 8005a48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8005a4a:	4b20      	ldr	r3, [pc, #128]	; (8005acc <HAL_InitTick+0xd8>)
 8005a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a50:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8005a52:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <HAL_InitTick+0xd8>)
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8005a58:	4b1c      	ldr	r3, [pc, #112]	; (8005acc <HAL_InitTick+0xd8>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a5e:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <HAL_InitTick+0xd8>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a64:	4b19      	ldr	r3, [pc, #100]	; (8005acc <HAL_InitTick+0xd8>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8005a6a:	4818      	ldr	r0, [pc, #96]	; (8005acc <HAL_InitTick+0xd8>)
 8005a6c:	f004 f932 	bl	8009cd4 <HAL_TIM_Base_Init>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d11b      	bne.n	8005ab6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8005a7e:	4813      	ldr	r0, [pc, #76]	; (8005acc <HAL_InitTick+0xd8>)
 8005a80:	f004 f978 	bl	8009d74 <HAL_TIM_Base_Start_IT>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d111      	bne.n	8005ab6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005a92:	2019      	movs	r0, #25
 8005a94:	f000 fbc0 	bl	8006218 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b0f      	cmp	r3, #15
 8005a9c:	d808      	bhi.n	8005ab0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	2019      	movs	r0, #25
 8005aa4:	f000 fb9c 	bl	80061e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005aa8:	4a0a      	ldr	r2, [pc, #40]	; (8005ad4 <HAL_InitTick+0xe0>)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e002      	b.n	8005ab6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3730      	adds	r7, #48	; 0x30
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	40023800 	.word	0x40023800
 8005ac8:	431bde83 	.word	0x431bde83
 8005acc:	20000814 	.word	0x20000814
 8005ad0:	40014400 	.word	0x40014400
 8005ad4:	2000000c 	.word	0x2000000c

08005ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005adc:	e7fe      	b.n	8005adc <NMI_Handler+0x4>

08005ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ae2:	e7fe      	b.n	8005ae2 <HardFault_Handler+0x4>

08005ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ae8:	e7fe      	b.n	8005ae8 <MemManage_Handler+0x4>

08005aea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005aea:	b480      	push	{r7}
 8005aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005aee:	e7fe      	b.n	8005aee <BusFault_Handler+0x4>

08005af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005af4:	e7fe      	b.n	8005af4 <UsageFault_Handler+0x4>

08005af6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005af6:	b480      	push	{r7}
 8005af8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005afa:	bf00      	nop
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8005b08:	4802      	ldr	r0, [pc, #8]	; (8005b14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005b0a:	f004 fa9f 	bl	800a04c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005b0e:	bf00      	nop
 8005b10:	bd80      	pop	{r7, pc}
 8005b12:	bf00      	nop
 8005b14:	20000814 	.word	0x20000814

08005b18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	af00      	add	r7, sp, #0
  return 1;
 8005b1c:	2301      	movs	r3, #1
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <_kill>:

int _kill(int pid, int sig)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005b32:	f00e f84d 	bl	8013bd0 <__errno>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2216      	movs	r2, #22
 8005b3a:	601a      	str	r2, [r3, #0]
  return -1;
 8005b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <_exit>:

void _exit (int status)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005b50:	f04f 31ff 	mov.w	r1, #4294967295
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ffe7 	bl	8005b28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005b5a:	e7fe      	b.n	8005b5a <_exit+0x12>

08005b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	617b      	str	r3, [r7, #20]
 8005b6c:	e00a      	b.n	8005b84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005b6e:	f3af 8000 	nop.w
 8005b72:	4601      	mov	r1, r0
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	60ba      	str	r2, [r7, #8]
 8005b7a:	b2ca      	uxtb	r2, r1
 8005b7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	3301      	adds	r3, #1
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	dbf0      	blt.n	8005b6e <_read+0x12>
  }

  return len;
 8005b8c:	687b      	ldr	r3, [r7, #4]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b086      	sub	sp, #24
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	e009      	b.n	8005bbc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	60ba      	str	r2, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	dbf1      	blt.n	8005ba8 <_write+0x12>
  }
  return len;
 8005bc4:	687b      	ldr	r3, [r7, #4]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3718      	adds	r7, #24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <_close>:

int _close(int file)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <_isatty>:

int _isatty(int file)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c0e:	2301      	movs	r3, #1
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
	...

08005c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <_sbrk+0x5c>)
 8005c42:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <_sbrk+0x60>)
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <_sbrk+0x64>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <_sbrk+0x64>)
 8005c56:	4a12      	ldr	r2, [pc, #72]	; (8005ca0 <_sbrk+0x68>)
 8005c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005c5a:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <_sbrk+0x64>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4413      	add	r3, r2
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d207      	bcs.n	8005c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005c68:	f00d ffb2 	bl	8013bd0 <__errno>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	220c      	movs	r2, #12
 8005c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005c72:	f04f 33ff 	mov.w	r3, #4294967295
 8005c76:	e009      	b.n	8005c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005c78:	4b08      	ldr	r3, [pc, #32]	; (8005c9c <_sbrk+0x64>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005c7e:	4b07      	ldr	r3, [pc, #28]	; (8005c9c <_sbrk+0x64>)
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4413      	add	r3, r2
 8005c86:	4a05      	ldr	r2, [pc, #20]	; (8005c9c <_sbrk+0x64>)
 8005c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	20020000 	.word	0x20020000
 8005c98:	00000800 	.word	0x00000800
 8005c9c:	2000085c 	.word	0x2000085c
 8005ca0:	2000dbc0 	.word	0x2000dbc0

08005ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <SystemInit+0x20>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	4a05      	ldr	r2, [pc, #20]	; (8005cc4 <SystemInit+0x20>)
 8005cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cb8:	bf00      	nop
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	e000ed00 	.word	0xe000ed00

08005cc8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08e      	sub	sp, #56	; 0x38
 8005ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005cce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	605a      	str	r2, [r3, #4]
 8005cd8:	609a      	str	r2, [r3, #8]
 8005cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cdc:	f107 0320 	add.w	r3, r7, #32
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ce6:	1d3b      	adds	r3, r7, #4
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	605a      	str	r2, [r3, #4]
 8005cee:	609a      	str	r2, [r3, #8]
 8005cf0:	60da      	str	r2, [r3, #12]
 8005cf2:	611a      	str	r2, [r3, #16]
 8005cf4:	615a      	str	r2, [r3, #20]
 8005cf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005cf8:	4b2c      	ldr	r3, [pc, #176]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005cfa:	4a2d      	ldr	r2, [pc, #180]	; (8005db0 <MX_TIM3_Init+0xe8>)
 8005cfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8005cfe:	4b2b      	ldr	r3, [pc, #172]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d00:	2253      	movs	r2, #83	; 0x53
 8005d02:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d04:	4b29      	ldr	r3, [pc, #164]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8005d0a:	4b28      	ldr	r3, [pc, #160]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d0c:	2263      	movs	r2, #99	; 0x63
 8005d0e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d10:	4b26      	ldr	r3, [pc, #152]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d12:	2200      	movs	r2, #0
 8005d14:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d16:	4b25      	ldr	r3, [pc, #148]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005d1c:	4823      	ldr	r0, [pc, #140]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d1e:	f003 ffd9 	bl	8009cd4 <HAL_TIM_Base_Init>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8005d28:	f7fe f892 	bl	8003e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d36:	4619      	mov	r1, r3
 8005d38:	481c      	ldr	r0, [pc, #112]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d3a:	f004 fb51 	bl	800a3e0 <HAL_TIM_ConfigClockSource>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8005d44:	f7fe f884 	bl	8003e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005d48:	4818      	ldr	r0, [pc, #96]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d4a:	f004 f875 	bl	8009e38 <HAL_TIM_PWM_Init>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8005d54:	f7fe f87c 	bl	8003e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005d58:	2320      	movs	r3, #32
 8005d5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005d60:	f107 0320 	add.w	r3, r7, #32
 8005d64:	4619      	mov	r1, r3
 8005d66:	4811      	ldr	r0, [pc, #68]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d68:	f004 fef6 	bl	800ab58 <HAL_TIMEx_MasterConfigSynchronization>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8005d72:	f7fe f86d 	bl	8003e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d76:	2360      	movs	r3, #96	; 0x60
 8005d78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d86:	1d3b      	adds	r3, r7, #4
 8005d88:	2200      	movs	r2, #0
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	4807      	ldr	r0, [pc, #28]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d8e:	f004 fa65 	bl	800a25c <HAL_TIM_PWM_ConfigChannel>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d001      	beq.n	8005d9c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8005d98:	f7fe f85a 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005d9c:	4803      	ldr	r0, [pc, #12]	; (8005dac <MX_TIM3_Init+0xe4>)
 8005d9e:	f000 f82b 	bl	8005df8 <HAL_TIM_MspPostInit>

}
 8005da2:	bf00      	nop
 8005da4:	3738      	adds	r7, #56	; 0x38
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000860 	.word	0x20000860
 8005db0:	40000400 	.word	0x40000400

08005db4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a0b      	ldr	r2, [pc, #44]	; (8005df0 <HAL_TIM_Base_MspInit+0x3c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d10d      	bne.n	8005de2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <HAL_TIM_Base_MspInit+0x40>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	4a09      	ldr	r2, [pc, #36]	; (8005df4 <HAL_TIM_Base_MspInit+0x40>)
 8005dd0:	f043 0302 	orr.w	r3, r3, #2
 8005dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd6:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <HAL_TIM_Base_MspInit+0x40>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005de2:	bf00      	nop
 8005de4:	3714      	adds	r7, #20
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40023800 	.word	0x40023800

08005df8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b088      	sub	sp, #32
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e00:	f107 030c 	add.w	r3, r7, #12
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	609a      	str	r2, [r3, #8]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a12      	ldr	r2, [pc, #72]	; (8005e60 <HAL_TIM_MspPostInit+0x68>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d11d      	bne.n	8005e56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	60bb      	str	r3, [r7, #8]
 8005e1e:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <HAL_TIM_MspPostInit+0x6c>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	4a10      	ldr	r2, [pc, #64]	; (8005e64 <HAL_TIM_MspPostInit+0x6c>)
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	6313      	str	r3, [r2, #48]	; 0x30
 8005e2a:	4b0e      	ldr	r3, [pc, #56]	; (8005e64 <HAL_TIM_MspPostInit+0x6c>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	60bb      	str	r3, [r7, #8]
 8005e34:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = AENABLE_Pin;
 8005e36:	2340      	movs	r3, #64	; 0x40
 8005e38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005e46:	2302      	movs	r3, #2
 8005e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AENABLE_GPIO_Port, &GPIO_InitStruct);
 8005e4a:	f107 030c 	add.w	r3, r7, #12
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4805      	ldr	r0, [pc, #20]	; (8005e68 <HAL_TIM_MspPostInit+0x70>)
 8005e52:	f000 fb4f 	bl	80064f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005e56:	bf00      	nop
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40023800 	.word	0x40023800
 8005e68:	40020000 	.word	0x40020000

08005e6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <MX_USART2_UART_Init+0x4c>)
 8005e72:	4a12      	ldr	r2, [pc, #72]	; (8005ebc <MX_USART2_UART_Init+0x50>)
 8005e74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e76:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <MX_USART2_UART_Init+0x4c>)
 8005e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <MX_USART2_UART_Init+0x4c>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e84:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <MX_USART2_UART_Init+0x4c>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <MX_USART2_UART_Init+0x4c>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005e90:	4b09      	ldr	r3, [pc, #36]	; (8005eb8 <MX_USART2_UART_Init+0x4c>)
 8005e92:	220c      	movs	r2, #12
 8005e94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e96:	4b08      	ldr	r3, [pc, #32]	; (8005eb8 <MX_USART2_UART_Init+0x4c>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <MX_USART2_UART_Init+0x4c>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005ea2:	4805      	ldr	r0, [pc, #20]	; (8005eb8 <MX_USART2_UART_Init+0x4c>)
 8005ea4:	f004 feda 	bl	800ac5c <HAL_UART_Init>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005eae:	f7fd ffcf 	bl	8003e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005eb2:	bf00      	nop
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	200008a8 	.word	0x200008a8
 8005ebc:	40004400 	.word	0x40004400

08005ec0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08a      	sub	sp, #40	; 0x28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ec8:	f107 0314 	add.w	r3, r7, #20
 8005ecc:	2200      	movs	r2, #0
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	605a      	str	r2, [r3, #4]
 8005ed2:	609a      	str	r2, [r3, #8]
 8005ed4:	60da      	str	r2, [r3, #12]
 8005ed6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a19      	ldr	r2, [pc, #100]	; (8005f44 <HAL_UART_MspInit+0x84>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d12b      	bne.n	8005f3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	4b18      	ldr	r3, [pc, #96]	; (8005f48 <HAL_UART_MspInit+0x88>)
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	4a17      	ldr	r2, [pc, #92]	; (8005f48 <HAL_UART_MspInit+0x88>)
 8005eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ef2:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <HAL_UART_MspInit+0x88>)
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
 8005f02:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <HAL_UART_MspInit+0x88>)
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	4a10      	ldr	r2, [pc, #64]	; (8005f48 <HAL_UART_MspInit+0x88>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	; (8005f48 <HAL_UART_MspInit+0x88>)
 8005f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005f1a:	230c      	movs	r3, #12
 8005f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f1e:	2302      	movs	r3, #2
 8005f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f26:	2303      	movs	r3, #3
 8005f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005f2a:	2307      	movs	r3, #7
 8005f2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f2e:	f107 0314 	add.w	r3, r7, #20
 8005f32:	4619      	mov	r1, r3
 8005f34:	4805      	ldr	r0, [pc, #20]	; (8005f4c <HAL_UART_MspInit+0x8c>)
 8005f36:	f000 fadd 	bl	80064f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005f3a:	bf00      	nop
 8005f3c:	3728      	adds	r7, #40	; 0x28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40004400 	.word	0x40004400
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	40020000 	.word	0x40020000

08005f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005f54:	480d      	ldr	r0, [pc, #52]	; (8005f8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005f56:	490e      	ldr	r1, [pc, #56]	; (8005f90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005f58:	4a0e      	ldr	r2, [pc, #56]	; (8005f94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f5c:	e002      	b.n	8005f64 <LoopCopyDataInit>

08005f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f62:	3304      	adds	r3, #4

08005f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f68:	d3f9      	bcc.n	8005f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f6a:	4a0b      	ldr	r2, [pc, #44]	; (8005f98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005f6c:	4c0b      	ldr	r4, [pc, #44]	; (8005f9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8005f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f70:	e001      	b.n	8005f76 <LoopFillZerobss>

08005f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f74:	3204      	adds	r2, #4

08005f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f78:	d3fb      	bcc.n	8005f72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005f7a:	f7ff fe93 	bl	8005ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005f7e:	f00d fe2d 	bl	8013bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f82:	f7fd fec9 	bl	8003d18 <main>
  bx  lr    
 8005f86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005f88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f90:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8005f94:	0801688c 	.word	0x0801688c
  ldr r2, =_sbss
 8005f98:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8005f9c:	2000dbbc 	.word	0x2000dbbc

08005fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005fa0:	e7fe      	b.n	8005fa0 <ADC_IRQHandler>
	...

08005fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	; (8005fe4 <HAL_Init+0x40>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a0d      	ldr	r2, [pc, #52]	; (8005fe4 <HAL_Init+0x40>)
 8005fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	; (8005fe4 <HAL_Init+0x40>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a0a      	ldr	r2, [pc, #40]	; (8005fe4 <HAL_Init+0x40>)
 8005fba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005fc0:	4b08      	ldr	r3, [pc, #32]	; (8005fe4 <HAL_Init+0x40>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a07      	ldr	r2, [pc, #28]	; (8005fe4 <HAL_Init+0x40>)
 8005fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fcc:	2003      	movs	r0, #3
 8005fce:	f000 f8fc 	bl	80061ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005fd2:	2005      	movs	r0, #5
 8005fd4:	f7ff fd0e 	bl	80059f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005fd8:	f7ff fce0 	bl	800599c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40023c00 	.word	0x40023c00

08005fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005fec:	4b06      	ldr	r3, [pc, #24]	; (8006008 <HAL_IncTick+0x20>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4b06      	ldr	r3, [pc, #24]	; (800600c <HAL_IncTick+0x24>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	4a04      	ldr	r2, [pc, #16]	; (800600c <HAL_IncTick+0x24>)
 8005ffa:	6013      	str	r3, [r2, #0]
}
 8005ffc:	bf00      	nop
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000010 	.word	0x20000010
 800600c:	200008ec 	.word	0x200008ec

08006010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006010:	b480      	push	{r7}
 8006012:	af00      	add	r7, sp, #0
  return uwTick;
 8006014:	4b03      	ldr	r3, [pc, #12]	; (8006024 <HAL_GetTick+0x14>)
 8006016:	681b      	ldr	r3, [r3, #0]
}
 8006018:	4618      	mov	r0, r3
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	200008ec 	.word	0x200008ec

08006028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006030:	f7ff ffee 	bl	8006010 <HAL_GetTick>
 8006034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006040:	d005      	beq.n	800604e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006042:	4b0a      	ldr	r3, [pc, #40]	; (800606c <HAL_Delay+0x44>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4413      	add	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800604e:	bf00      	nop
 8006050:	f7ff ffde 	bl	8006010 <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	429a      	cmp	r2, r3
 800605e:	d8f7      	bhi.n	8006050 <HAL_Delay+0x28>
  {
  }
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
 800606a:	bf00      	nop
 800606c:	20000010 	.word	0x20000010

08006070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006080:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <__NVIC_SetPriorityGrouping+0x44>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800608c:	4013      	ands	r3, r2
 800608e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800609c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060a2:	4a04      	ldr	r2, [pc, #16]	; (80060b4 <__NVIC_SetPriorityGrouping+0x44>)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	60d3      	str	r3, [r2, #12]
}
 80060a8:	bf00      	nop
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	e000ed00 	.word	0xe000ed00

080060b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060bc:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <__NVIC_GetPriorityGrouping+0x18>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	0a1b      	lsrs	r3, r3, #8
 80060c2:	f003 0307 	and.w	r3, r3, #7
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	e000ed00 	.word	0xe000ed00

080060d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	db0b      	blt.n	80060fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060e6:	79fb      	ldrb	r3, [r7, #7]
 80060e8:	f003 021f 	and.w	r2, r3, #31
 80060ec:	4907      	ldr	r1, [pc, #28]	; (800610c <__NVIC_EnableIRQ+0x38>)
 80060ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	2001      	movs	r0, #1
 80060f6:	fa00 f202 	lsl.w	r2, r0, r2
 80060fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	e000e100 	.word	0xe000e100

08006110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800611c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006120:	2b00      	cmp	r3, #0
 8006122:	db0a      	blt.n	800613a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	490c      	ldr	r1, [pc, #48]	; (800615c <__NVIC_SetPriority+0x4c>)
 800612a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800612e:	0112      	lsls	r2, r2, #4
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	440b      	add	r3, r1
 8006134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006138:	e00a      	b.n	8006150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4908      	ldr	r1, [pc, #32]	; (8006160 <__NVIC_SetPriority+0x50>)
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	3b04      	subs	r3, #4
 8006148:	0112      	lsls	r2, r2, #4
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	440b      	add	r3, r1
 800614e:	761a      	strb	r2, [r3, #24]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	e000e100 	.word	0xe000e100
 8006160:	e000ed00 	.word	0xe000ed00

08006164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006164:	b480      	push	{r7}
 8006166:	b089      	sub	sp, #36	; 0x24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f1c3 0307 	rsb	r3, r3, #7
 800617e:	2b04      	cmp	r3, #4
 8006180:	bf28      	it	cs
 8006182:	2304      	movcs	r3, #4
 8006184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3304      	adds	r3, #4
 800618a:	2b06      	cmp	r3, #6
 800618c:	d902      	bls.n	8006194 <NVIC_EncodePriority+0x30>
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	3b03      	subs	r3, #3
 8006192:	e000      	b.n	8006196 <NVIC_EncodePriority+0x32>
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006198:	f04f 32ff 	mov.w	r2, #4294967295
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43da      	mvns	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	401a      	ands	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061ac:	f04f 31ff 	mov.w	r1, #4294967295
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	fa01 f303 	lsl.w	r3, r1, r3
 80061b6:	43d9      	mvns	r1, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061bc:	4313      	orrs	r3, r2
         );
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3724      	adds	r7, #36	; 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff ff4c 	bl	8006070 <__NVIC_SetPriorityGrouping>
}
 80061d8:	bf00      	nop
 80061da:	3708      	adds	r7, #8
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	4603      	mov	r3, r0
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80061f2:	f7ff ff61 	bl	80060b8 <__NVIC_GetPriorityGrouping>
 80061f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	6978      	ldr	r0, [r7, #20]
 80061fe:	f7ff ffb1 	bl	8006164 <NVIC_EncodePriority>
 8006202:	4602      	mov	r2, r0
 8006204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f7ff ff80 	bl	8006110 <__NVIC_SetPriority>
}
 8006210:	bf00      	nop
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff ff54 	bl	80060d4 <__NVIC_EnableIRQ>
}
 800622c:	bf00      	nop
 800622e:	3708      	adds	r7, #8
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006240:	f7ff fee6 	bl	8006010 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e099      	b.n	8006384 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006270:	e00f      	b.n	8006292 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006272:	f7ff fecd 	bl	8006010 <HAL_GetTick>
 8006276:	4602      	mov	r2, r0
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	2b05      	cmp	r3, #5
 800627e:	d908      	bls.n	8006292 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2220      	movs	r2, #32
 8006284:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2203      	movs	r2, #3
 800628a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e078      	b.n	8006384 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e8      	bne.n	8006272 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4b38      	ldr	r3, [pc, #224]	; (800638c <HAL_DMA_Init+0x158>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80062ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80062d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b04      	cmp	r3, #4
 80062ea:	d107      	bne.n	80062fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f4:	4313      	orrs	r3, r2
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	f023 0307 	bic.w	r3, r3, #7
 8006312:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	2b04      	cmp	r3, #4
 8006324:	d117      	bne.n	8006356 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00e      	beq.n	8006356 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f85f 	bl	80063fc <DMA_CheckFifoParam>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	d008      	beq.n	8006356 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2240      	movs	r2, #64	; 0x40
 8006348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006352:	2301      	movs	r3, #1
 8006354:	e016      	b.n	8006384 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f816 	bl	8006390 <DMA_CalcBaseAndBitshift>
 8006364:	4603      	mov	r3, r0
 8006366:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800636c:	223f      	movs	r2, #63	; 0x3f
 800636e:	409a      	lsls	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	f010803f 	.word	0xf010803f

08006390 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	b2db      	uxtb	r3, r3
 800639e:	3b10      	subs	r3, #16
 80063a0:	4a14      	ldr	r2, [pc, #80]	; (80063f4 <DMA_CalcBaseAndBitshift+0x64>)
 80063a2:	fba2 2303 	umull	r2, r3, r2, r3
 80063a6:	091b      	lsrs	r3, r3, #4
 80063a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063aa:	4a13      	ldr	r2, [pc, #76]	; (80063f8 <DMA_CalcBaseAndBitshift+0x68>)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	4413      	add	r3, r2
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d909      	bls.n	80063d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	1d1a      	adds	r2, r3, #4
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	659a      	str	r2, [r3, #88]	; 0x58
 80063d0:	e007      	b.n	80063e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	aaaaaaab 	.word	0xaaaaaaab
 80063f8:	08016480 	.word	0x08016480

080063fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d11f      	bne.n	8006456 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b03      	cmp	r3, #3
 800641a:	d856      	bhi.n	80064ca <DMA_CheckFifoParam+0xce>
 800641c:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <DMA_CheckFifoParam+0x28>)
 800641e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006422:	bf00      	nop
 8006424:	08006435 	.word	0x08006435
 8006428:	08006447 	.word	0x08006447
 800642c:	08006435 	.word	0x08006435
 8006430:	080064cb 	.word	0x080064cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d046      	beq.n	80064ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006444:	e043      	b.n	80064ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800644e:	d140      	bne.n	80064d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006454:	e03d      	b.n	80064d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645e:	d121      	bne.n	80064a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b03      	cmp	r3, #3
 8006464:	d837      	bhi.n	80064d6 <DMA_CheckFifoParam+0xda>
 8006466:	a201      	add	r2, pc, #4	; (adr r2, 800646c <DMA_CheckFifoParam+0x70>)
 8006468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800646c:	0800647d 	.word	0x0800647d
 8006470:	08006483 	.word	0x08006483
 8006474:	0800647d 	.word	0x0800647d
 8006478:	08006495 	.word	0x08006495
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	73fb      	strb	r3, [r7, #15]
      break;
 8006480:	e030      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006486:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d025      	beq.n	80064da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006492:	e022      	b.n	80064da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800649c:	d11f      	bne.n	80064de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064a2:	e01c      	b.n	80064de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d903      	bls.n	80064b2 <DMA_CheckFifoParam+0xb6>
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d003      	beq.n	80064b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80064b0:	e018      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	73fb      	strb	r3, [r7, #15]
      break;
 80064b6:	e015      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00e      	beq.n	80064e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	73fb      	strb	r3, [r7, #15]
      break;
 80064c8:	e00b      	b.n	80064e2 <DMA_CheckFifoParam+0xe6>
      break;
 80064ca:	bf00      	nop
 80064cc:	e00a      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064ce:	bf00      	nop
 80064d0:	e008      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064d2:	bf00      	nop
 80064d4:	e006      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064d6:	bf00      	nop
 80064d8:	e004      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064da:	bf00      	nop
 80064dc:	e002      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80064de:	bf00      	nop
 80064e0:	e000      	b.n	80064e4 <DMA_CheckFifoParam+0xe8>
      break;
 80064e2:	bf00      	nop
    }
  } 
  
  return status; 
 80064e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3714      	adds	r7, #20
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop

080064f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b089      	sub	sp, #36	; 0x24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006506:	2300      	movs	r3, #0
 8006508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800650a:	2300      	movs	r3, #0
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	e159      	b.n	80067c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006510:	2201      	movs	r2, #1
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4013      	ands	r3, r2
 8006522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	429a      	cmp	r2, r3
 800652a:	f040 8148 	bne.w	80067be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b01      	cmp	r3, #1
 8006538:	d005      	beq.n	8006546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006542:	2b02      	cmp	r3, #2
 8006544:	d130      	bne.n	80065a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	2203      	movs	r2, #3
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	43db      	mvns	r3, r3
 8006558:	69ba      	ldr	r2, [r7, #24]
 800655a:	4013      	ands	r3, r2
 800655c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800657c:	2201      	movs	r2, #1
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4013      	ands	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	091b      	lsrs	r3, r3, #4
 8006592:	f003 0201 	and.w	r2, r3, #1
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	fa02 f303 	lsl.w	r3, r2, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4313      	orrs	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f003 0303 	and.w	r3, r3, #3
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	d017      	beq.n	80065e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	2203      	movs	r2, #3
 80065c0:	fa02 f303 	lsl.w	r3, r2, r3
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689a      	ldr	r2, [r3, #8]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	005b      	lsls	r3, r3, #1
 80065d4:	fa02 f303 	lsl.w	r3, r2, r3
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	4313      	orrs	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d123      	bne.n	8006638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	08da      	lsrs	r2, r3, #3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3208      	adds	r2, #8
 80065f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	220f      	movs	r2, #15
 8006608:	fa02 f303 	lsl.w	r3, r2, r3
 800660c:	43db      	mvns	r3, r3
 800660e:	69ba      	ldr	r2, [r7, #24]
 8006610:	4013      	ands	r3, r2
 8006612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	fa02 f303 	lsl.w	r3, r2, r3
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	4313      	orrs	r3, r2
 8006628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	08da      	lsrs	r2, r3, #3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3208      	adds	r2, #8
 8006632:	69b9      	ldr	r1, [r7, #24]
 8006634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	2203      	movs	r2, #3
 8006644:	fa02 f303 	lsl.w	r3, r2, r3
 8006648:	43db      	mvns	r3, r3
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4013      	ands	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 0203 	and.w	r2, r3, #3
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	fa02 f303 	lsl.w	r3, r2, r3
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	4313      	orrs	r3, r2
 8006664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69ba      	ldr	r2, [r7, #24]
 800666a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 80a2 	beq.w	80067be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	4b57      	ldr	r3, [pc, #348]	; (80067dc <HAL_GPIO_Init+0x2e8>)
 8006680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006682:	4a56      	ldr	r2, [pc, #344]	; (80067dc <HAL_GPIO_Init+0x2e8>)
 8006684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006688:	6453      	str	r3, [r2, #68]	; 0x44
 800668a:	4b54      	ldr	r3, [pc, #336]	; (80067dc <HAL_GPIO_Init+0x2e8>)
 800668c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800668e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006696:	4a52      	ldr	r2, [pc, #328]	; (80067e0 <HAL_GPIO_Init+0x2ec>)
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	089b      	lsrs	r3, r3, #2
 800669c:	3302      	adds	r3, #2
 800669e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	f003 0303 	and.w	r3, r3, #3
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	220f      	movs	r2, #15
 80066ae:	fa02 f303 	lsl.w	r3, r2, r3
 80066b2:	43db      	mvns	r3, r3
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	4013      	ands	r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a49      	ldr	r2, [pc, #292]	; (80067e4 <HAL_GPIO_Init+0x2f0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d019      	beq.n	80066f6 <HAL_GPIO_Init+0x202>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a48      	ldr	r2, [pc, #288]	; (80067e8 <HAL_GPIO_Init+0x2f4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_GPIO_Init+0x1fe>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a47      	ldr	r2, [pc, #284]	; (80067ec <HAL_GPIO_Init+0x2f8>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00d      	beq.n	80066ee <HAL_GPIO_Init+0x1fa>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a46      	ldr	r2, [pc, #280]	; (80067f0 <HAL_GPIO_Init+0x2fc>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <HAL_GPIO_Init+0x1f6>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a45      	ldr	r2, [pc, #276]	; (80067f4 <HAL_GPIO_Init+0x300>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_GPIO_Init+0x1f2>
 80066e2:	2304      	movs	r3, #4
 80066e4:	e008      	b.n	80066f8 <HAL_GPIO_Init+0x204>
 80066e6:	2307      	movs	r3, #7
 80066e8:	e006      	b.n	80066f8 <HAL_GPIO_Init+0x204>
 80066ea:	2303      	movs	r3, #3
 80066ec:	e004      	b.n	80066f8 <HAL_GPIO_Init+0x204>
 80066ee:	2302      	movs	r3, #2
 80066f0:	e002      	b.n	80066f8 <HAL_GPIO_Init+0x204>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <HAL_GPIO_Init+0x204>
 80066f6:	2300      	movs	r3, #0
 80066f8:	69fa      	ldr	r2, [r7, #28]
 80066fa:	f002 0203 	and.w	r2, r2, #3
 80066fe:	0092      	lsls	r2, r2, #2
 8006700:	4093      	lsls	r3, r2
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	4313      	orrs	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006708:	4935      	ldr	r1, [pc, #212]	; (80067e0 <HAL_GPIO_Init+0x2ec>)
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	089b      	lsrs	r3, r3, #2
 800670e:	3302      	adds	r3, #2
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006716:	4b38      	ldr	r3, [pc, #224]	; (80067f8 <HAL_GPIO_Init+0x304>)
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	43db      	mvns	r3, r3
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	4013      	ands	r3, r2
 8006724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800673a:	4a2f      	ldr	r2, [pc, #188]	; (80067f8 <HAL_GPIO_Init+0x304>)
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006740:	4b2d      	ldr	r3, [pc, #180]	; (80067f8 <HAL_GPIO_Init+0x304>)
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	43db      	mvns	r3, r3
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	4013      	ands	r3, r2
 800674e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4313      	orrs	r3, r2
 8006762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006764:	4a24      	ldr	r2, [pc, #144]	; (80067f8 <HAL_GPIO_Init+0x304>)
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800676a:	4b23      	ldr	r3, [pc, #140]	; (80067f8 <HAL_GPIO_Init+0x304>)
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	43db      	mvns	r3, r3
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4013      	ands	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800678e:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <HAL_GPIO_Init+0x304>)
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006794:	4b18      	ldr	r3, [pc, #96]	; (80067f8 <HAL_GPIO_Init+0x304>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	43db      	mvns	r3, r3
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	4013      	ands	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067b8:	4a0f      	ldr	r2, [pc, #60]	; (80067f8 <HAL_GPIO_Init+0x304>)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	3301      	adds	r3, #1
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	f67f aea2 	bls.w	8006510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80067cc:	bf00      	nop
 80067ce:	bf00      	nop
 80067d0:	3724      	adds	r7, #36	; 0x24
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	40023800 	.word	0x40023800
 80067e0:	40013800 	.word	0x40013800
 80067e4:	40020000 	.word	0x40020000
 80067e8:	40020400 	.word	0x40020400
 80067ec:	40020800 	.word	0x40020800
 80067f0:	40020c00 	.word	0x40020c00
 80067f4:	40021000 	.word	0x40021000
 80067f8:	40013c00 	.word	0x40013c00

080067fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691a      	ldr	r2, [r3, #16]
 800680c:	887b      	ldrh	r3, [r7, #2]
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006814:	2301      	movs	r3, #1
 8006816:	73fb      	strb	r3, [r7, #15]
 8006818:	e001      	b.n	800681e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800681a:	2300      	movs	r3, #0
 800681c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	807b      	strh	r3, [r7, #2]
 8006838:	4613      	mov	r3, r2
 800683a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800683c:	787b      	ldrb	r3, [r7, #1]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006842:	887a      	ldrh	r2, [r7, #2]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006848:	e003      	b.n	8006852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800684a:	887b      	ldrh	r3, [r7, #2]
 800684c:	041a      	lsls	r2, r3, #16
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	619a      	str	r2, [r3, #24]
}
 8006852:	bf00      	nop
 8006854:	370c      	adds	r7, #12
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e12b      	b.n	8006aca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006878:	b2db      	uxtb	r3, r3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fd f9fe 	bl	8003c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2224      	movs	r2, #36	; 0x24
 8006890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 0201 	bic.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068c4:	f002 f99e 	bl	8008c04 <HAL_RCC_GetPCLK1Freq>
 80068c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4a81      	ldr	r2, [pc, #516]	; (8006ad4 <HAL_I2C_Init+0x274>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d807      	bhi.n	80068e4 <HAL_I2C_Init+0x84>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4a80      	ldr	r2, [pc, #512]	; (8006ad8 <HAL_I2C_Init+0x278>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	bf94      	ite	ls
 80068dc:	2301      	movls	r3, #1
 80068de:	2300      	movhi	r3, #0
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	e006      	b.n	80068f2 <HAL_I2C_Init+0x92>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4a7d      	ldr	r2, [pc, #500]	; (8006adc <HAL_I2C_Init+0x27c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	bf94      	ite	ls
 80068ec:	2301      	movls	r3, #1
 80068ee:	2300      	movhi	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d001      	beq.n	80068fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e0e7      	b.n	8006aca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	4a78      	ldr	r2, [pc, #480]	; (8006ae0 <HAL_I2C_Init+0x280>)
 80068fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006902:	0c9b      	lsrs	r3, r3, #18
 8006904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	430a      	orrs	r2, r1
 8006918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	4a6a      	ldr	r2, [pc, #424]	; (8006ad4 <HAL_I2C_Init+0x274>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d802      	bhi.n	8006934 <HAL_I2C_Init+0xd4>
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	3301      	adds	r3, #1
 8006932:	e009      	b.n	8006948 <HAL_I2C_Init+0xe8>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800693a:	fb02 f303 	mul.w	r3, r2, r3
 800693e:	4a69      	ldr	r2, [pc, #420]	; (8006ae4 <HAL_I2C_Init+0x284>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	099b      	lsrs	r3, r3, #6
 8006946:	3301      	adds	r3, #1
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	430b      	orrs	r3, r1
 800694e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800695a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	495c      	ldr	r1, [pc, #368]	; (8006ad4 <HAL_I2C_Init+0x274>)
 8006964:	428b      	cmp	r3, r1
 8006966:	d819      	bhi.n	800699c <HAL_I2C_Init+0x13c>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	1e59      	subs	r1, r3, #1
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	fbb1 f3f3 	udiv	r3, r1, r3
 8006976:	1c59      	adds	r1, r3, #1
 8006978:	f640 73fc 	movw	r3, #4092	; 0xffc
 800697c:	400b      	ands	r3, r1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00a      	beq.n	8006998 <HAL_I2C_Init+0x138>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1e59      	subs	r1, r3, #1
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006990:	3301      	adds	r3, #1
 8006992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006996:	e051      	b.n	8006a3c <HAL_I2C_Init+0x1dc>
 8006998:	2304      	movs	r3, #4
 800699a:	e04f      	b.n	8006a3c <HAL_I2C_Init+0x1dc>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d111      	bne.n	80069c8 <HAL_I2C_Init+0x168>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	1e58      	subs	r0, r3, #1
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6859      	ldr	r1, [r3, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	005b      	lsls	r3, r3, #1
 80069b0:	440b      	add	r3, r1
 80069b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b6:	3301      	adds	r3, #1
 80069b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bf0c      	ite	eq
 80069c0:	2301      	moveq	r3, #1
 80069c2:	2300      	movne	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e012      	b.n	80069ee <HAL_I2C_Init+0x18e>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	1e58      	subs	r0, r3, #1
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6859      	ldr	r1, [r3, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	440b      	add	r3, r1
 80069d6:	0099      	lsls	r1, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	fbb0 f3f3 	udiv	r3, r0, r3
 80069de:	3301      	adds	r3, #1
 80069e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <HAL_I2C_Init+0x196>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e022      	b.n	8006a3c <HAL_I2C_Init+0x1dc>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10e      	bne.n	8006a1c <HAL_I2C_Init+0x1bc>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	1e58      	subs	r0, r3, #1
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6859      	ldr	r1, [r3, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	440b      	add	r3, r1
 8006a0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a10:	3301      	adds	r3, #1
 8006a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a1a:	e00f      	b.n	8006a3c <HAL_I2C_Init+0x1dc>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	1e58      	subs	r0, r3, #1
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6859      	ldr	r1, [r3, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	0099      	lsls	r1, r3, #2
 8006a2c:	440b      	add	r3, r1
 8006a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a32:	3301      	adds	r3, #1
 8006a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	6809      	ldr	r1, [r1, #0]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	69da      	ldr	r2, [r3, #28]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6911      	ldr	r1, [r2, #16]
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	68d2      	ldr	r2, [r2, #12]
 8006a76:	4311      	orrs	r1, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6812      	ldr	r2, [r2, #0]
 8006a7c:	430b      	orrs	r3, r1
 8006a7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	695a      	ldr	r2, [r3, #20]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	431a      	orrs	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0201 	orr.w	r2, r2, #1
 8006aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	000186a0 	.word	0x000186a0
 8006ad8:	001e847f 	.word	0x001e847f
 8006adc:	003d08ff 	.word	0x003d08ff
 8006ae0:	431bde83 	.word	0x431bde83
 8006ae4:	10624dd3 	.word	0x10624dd3

08006ae8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af02      	add	r7, sp, #8
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	607a      	str	r2, [r7, #4]
 8006af2:	461a      	mov	r2, r3
 8006af4:	460b      	mov	r3, r1
 8006af6:	817b      	strh	r3, [r7, #10]
 8006af8:	4613      	mov	r3, r2
 8006afa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006afc:	f7ff fa88 	bl	8006010 <HAL_GetTick>
 8006b00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	f040 80e0 	bne.w	8006cd0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	2319      	movs	r3, #25
 8006b16:	2201      	movs	r2, #1
 8006b18:	4970      	ldr	r1, [pc, #448]	; (8006cdc <HAL_I2C_Master_Transmit+0x1f4>)
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f001 fa24 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d001      	beq.n	8006b2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006b26:	2302      	movs	r3, #2
 8006b28:	e0d3      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_I2C_Master_Transmit+0x50>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e0cc      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d007      	beq.n	8006b5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2221      	movs	r2, #33	; 0x21
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2210      	movs	r2, #16
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	893a      	ldrh	r2, [r7, #8]
 8006b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	4a50      	ldr	r2, [pc, #320]	; (8006ce0 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006ba0:	8979      	ldrh	r1, [r7, #10]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 ff10 	bl	80079cc <I2C_MasterRequestWrite>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e08d      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	613b      	str	r3, [r7, #16]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	695b      	ldr	r3, [r3, #20]
 8006bc0:	613b      	str	r3, [r7, #16]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	613b      	str	r3, [r7, #16]
 8006bca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006bcc:	e066      	b.n	8006c9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	6a39      	ldr	r1, [r7, #32]
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f001 fa9e 	bl	8008114 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b04      	cmp	r3, #4
 8006be4:	d107      	bne.n	8006bf6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e06b      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	781a      	ldrb	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	1c5a      	adds	r2, r3, #1
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	3b01      	subs	r3, #1
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695b      	ldr	r3, [r3, #20]
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	2b04      	cmp	r3, #4
 8006c36:	d11b      	bne.n	8006c70 <HAL_I2C_Master_Transmit+0x188>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d017      	beq.n	8006c70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	781a      	ldrb	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	6a39      	ldr	r1, [r7, #32]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f001 fa8e 	bl	8008196 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00d      	beq.n	8006c9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d107      	bne.n	8006c98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e01a      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d194      	bne.n	8006bce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e000      	b.n	8006cd2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
  }
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	00100002 	.word	0x00100002
 8006ce0:	ffff0000 	.word	0xffff0000

08006ce4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08c      	sub	sp, #48	; 0x30
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	607a      	str	r2, [r7, #4]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	817b      	strh	r3, [r7, #10]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006cf8:	f7ff f98a 	bl	8006010 <HAL_GetTick>
 8006cfc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b20      	cmp	r3, #32
 8006d08:	f040 820b 	bne.w	8007122 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	2319      	movs	r3, #25
 8006d12:	2201      	movs	r2, #1
 8006d14:	497c      	ldr	r1, [pc, #496]	; (8006f08 <HAL_I2C_Master_Receive+0x224>)
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f001 f926 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006d22:	2302      	movs	r3, #2
 8006d24:	e1fe      	b.n	8007124 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_I2C_Master_Receive+0x50>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e1f7      	b.n	8007124 <HAL_I2C_Master_Receive+0x440>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d007      	beq.n	8006d5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2222      	movs	r2, #34	; 0x22
 8006d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2210      	movs	r2, #16
 8006d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	893a      	ldrh	r2, [r7, #8]
 8006d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4a5c      	ldr	r2, [pc, #368]	; (8006f0c <HAL_I2C_Master_Receive+0x228>)
 8006d9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006d9c:	8979      	ldrh	r1, [r7, #10]
 8006d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fe94 	bl	8007ad0 <I2C_MasterRequestRead>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e1b8      	b.n	8007124 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d113      	bne.n	8006de2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dba:	2300      	movs	r3, #0
 8006dbc:	623b      	str	r3, [r7, #32]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	623b      	str	r3, [r7, #32]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	623b      	str	r3, [r7, #32]
 8006dce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	e18c      	b.n	80070fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d11b      	bne.n	8006e22 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	61fb      	str	r3, [r7, #28]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	695b      	ldr	r3, [r3, #20]
 8006e04:	61fb      	str	r3, [r7, #28]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	61fb      	str	r3, [r7, #28]
 8006e0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e16c      	b.n	80070fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d11b      	bne.n	8006e62 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e38:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e48:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	61bb      	str	r3, [r7, #24]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	e14c      	b.n	80070fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e72:	2300      	movs	r3, #0
 8006e74:	617b      	str	r3, [r7, #20]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	617b      	str	r3, [r7, #20]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006e88:	e138      	b.n	80070fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	f200 80f1 	bhi.w	8007076 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d123      	bne.n	8006ee4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f001 f9b9 	bl	8008218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e139      	b.n	8007124 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691a      	ldr	r2, [r3, #16]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	3b01      	subs	r3, #1
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ee2:	e10b      	b.n	80070fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d14e      	bne.n	8006f8a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	4906      	ldr	r1, [pc, #24]	; (8006f10 <HAL_I2C_Master_Receive+0x22c>)
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f001 f836 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d008      	beq.n	8006f14 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e10e      	b.n	8007124 <HAL_I2C_Master_Receive+0x440>
 8006f06:	bf00      	nop
 8006f08:	00100002 	.word	0x00100002
 8006f0c:	ffff0000 	.word	0xffff0000
 8006f10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f40:	3b01      	subs	r3, #1
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	1c5a      	adds	r2, r3, #1
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f72:	3b01      	subs	r3, #1
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f88:	e0b8      	b.n	80070fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2200      	movs	r2, #0
 8006f92:	4966      	ldr	r1, [pc, #408]	; (800712c <HAL_I2C_Master_Receive+0x448>)
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 ffe7 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0bf      	b.n	8007124 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	2200      	movs	r2, #0
 8006fee:	494f      	ldr	r1, [pc, #316]	; (800712c <HAL_I2C_Master_Receive+0x448>)
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 ffb9 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e091      	b.n	8007124 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691a      	ldr	r2, [r3, #16]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701a:	b2d2      	uxtb	r2, r2
 800701c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	691a      	ldr	r2, [r3, #16]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	b2d2      	uxtb	r2, r2
 800704e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	1c5a      	adds	r2, r3, #1
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706a:	b29b      	uxth	r3, r3
 800706c:	3b01      	subs	r3, #1
 800706e:	b29a      	uxth	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007074:	e042      	b.n	80070fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f001 f8cc 	bl	8008218 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e04c      	b.n	8007124 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	b2d2      	uxtb	r2, r2
 8007096:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d118      	bne.n	80070fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691a      	ldr	r2, [r3, #16]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070e6:	3b01      	subs	r3, #1
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	3b01      	subs	r3, #1
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007100:	2b00      	cmp	r3, #0
 8007102:	f47f aec2 	bne.w	8006e8a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800711e:	2300      	movs	r3, #0
 8007120:	e000      	b.n	8007124 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007122:	2302      	movs	r3, #2
  }
}
 8007124:	4618      	mov	r0, r3
 8007126:	3728      	adds	r7, #40	; 0x28
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	00010004 	.word	0x00010004

08007130 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b088      	sub	sp, #32
 8007134:	af02      	add	r7, sp, #8
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	4608      	mov	r0, r1
 800713a:	4611      	mov	r1, r2
 800713c:	461a      	mov	r2, r3
 800713e:	4603      	mov	r3, r0
 8007140:	817b      	strh	r3, [r7, #10]
 8007142:	460b      	mov	r3, r1
 8007144:	813b      	strh	r3, [r7, #8]
 8007146:	4613      	mov	r3, r2
 8007148:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800714a:	f7fe ff61 	bl	8006010 <HAL_GetTick>
 800714e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b20      	cmp	r3, #32
 800715a:	f040 80d9 	bne.w	8007310 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	2319      	movs	r3, #25
 8007164:	2201      	movs	r2, #1
 8007166:	496d      	ldr	r1, [pc, #436]	; (800731c <HAL_I2C_Mem_Write+0x1ec>)
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 fefd 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007174:	2302      	movs	r3, #2
 8007176:	e0cc      	b.n	8007312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_I2C_Mem_Write+0x56>
 8007182:	2302      	movs	r3, #2
 8007184:	e0c5      	b.n	8007312 <HAL_I2C_Mem_Write+0x1e2>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0301 	and.w	r3, r3, #1
 8007198:	2b01      	cmp	r3, #1
 800719a:	d007      	beq.n	80071ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2221      	movs	r2, #33	; 0x21
 80071c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2240      	movs	r2, #64	; 0x40
 80071c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2200      	movs	r2, #0
 80071d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a3a      	ldr	r2, [r7, #32]
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80071dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a4d      	ldr	r2, [pc, #308]	; (8007320 <HAL_I2C_Mem_Write+0x1f0>)
 80071ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80071ee:	88f8      	ldrh	r0, [r7, #6]
 80071f0:	893a      	ldrh	r2, [r7, #8]
 80071f2:	8979      	ldrh	r1, [r7, #10]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	4603      	mov	r3, r0
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 fd34 	bl	8007c6c <I2C_RequestMemoryWrite>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d052      	beq.n	80072b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e081      	b.n	8007312 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 ff7e 	bl	8008114 <I2C_WaitOnTXEFlagUntilTimeout>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00d      	beq.n	800723a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007222:	2b04      	cmp	r3, #4
 8007224:	d107      	bne.n	8007236 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e06b      	b.n	8007312 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007260:	b29b      	uxth	r3, r3
 8007262:	3b01      	subs	r3, #1
 8007264:	b29a      	uxth	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b04      	cmp	r3, #4
 8007276:	d11b      	bne.n	80072b0 <HAL_I2C_Mem_Write+0x180>
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800727c:	2b00      	cmp	r3, #0
 800727e:	d017      	beq.n	80072b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	781a      	ldrb	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007290:	1c5a      	adds	r2, r3, #1
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	3b01      	subs	r3, #1
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1aa      	bne.n	800720e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f000 ff6a 	bl	8008196 <I2C_WaitOnBTFFlagUntilTimeout>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00d      	beq.n	80072e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072cc:	2b04      	cmp	r3, #4
 80072ce:	d107      	bne.n	80072e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e016      	b.n	8007312 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	e000      	b.n	8007312 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007310:	2302      	movs	r3, #2
  }
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	00100002 	.word	0x00100002
 8007320:	ffff0000 	.word	0xffff0000

08007324 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08c      	sub	sp, #48	; 0x30
 8007328:	af02      	add	r7, sp, #8
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	4608      	mov	r0, r1
 800732e:	4611      	mov	r1, r2
 8007330:	461a      	mov	r2, r3
 8007332:	4603      	mov	r3, r0
 8007334:	817b      	strh	r3, [r7, #10]
 8007336:	460b      	mov	r3, r1
 8007338:	813b      	strh	r3, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800733e:	f7fe fe67 	bl	8006010 <HAL_GetTick>
 8007342:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b20      	cmp	r3, #32
 800734e:	f040 8208 	bne.w	8007762 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007354:	9300      	str	r3, [sp, #0]
 8007356:	2319      	movs	r3, #25
 8007358:	2201      	movs	r2, #1
 800735a:	497b      	ldr	r1, [pc, #492]	; (8007548 <HAL_I2C_Mem_Read+0x224>)
 800735c:	68f8      	ldr	r0, [r7, #12]
 800735e:	f000 fe03 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d001      	beq.n	800736c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007368:	2302      	movs	r3, #2
 800736a:	e1fb      	b.n	8007764 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007372:	2b01      	cmp	r3, #1
 8007374:	d101      	bne.n	800737a <HAL_I2C_Mem_Read+0x56>
 8007376:	2302      	movs	r3, #2
 8007378:	e1f4      	b.n	8007764 <HAL_I2C_Mem_Read+0x440>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b01      	cmp	r3, #1
 800738e:	d007      	beq.n	80073a0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2222      	movs	r2, #34	; 0x22
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2240      	movs	r2, #64	; 0x40
 80073bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80073d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4a5b      	ldr	r2, [pc, #364]	; (800754c <HAL_I2C_Mem_Read+0x228>)
 80073e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073e2:	88f8      	ldrh	r0, [r7, #6]
 80073e4:	893a      	ldrh	r2, [r7, #8]
 80073e6:	8979      	ldrh	r1, [r7, #10]
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	4603      	mov	r3, r0
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f000 fcd0 	bl	8007d98 <I2C_RequestMemoryRead>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d001      	beq.n	8007402 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e1b0      	b.n	8007764 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007406:	2b00      	cmp	r3, #0
 8007408:	d113      	bne.n	8007432 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800740a:	2300      	movs	r3, #0
 800740c:	623b      	str	r3, [r7, #32]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	695b      	ldr	r3, [r3, #20]
 8007414:	623b      	str	r3, [r7, #32]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	623b      	str	r3, [r7, #32]
 800741e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e184      	b.n	800773c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007436:	2b01      	cmp	r3, #1
 8007438:	d11b      	bne.n	8007472 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	695b      	ldr	r3, [r3, #20]
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800746e:	601a      	str	r2, [r3, #0]
 8007470:	e164      	b.n	800773c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007476:	2b02      	cmp	r3, #2
 8007478:	d11b      	bne.n	80074b2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007488:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007498:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800749a:	2300      	movs	r3, #0
 800749c:	61bb      	str	r3, [r7, #24]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	61bb      	str	r3, [r7, #24]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	61bb      	str	r3, [r7, #24]
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	e144      	b.n	800773c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074b2:	2300      	movs	r3, #0
 80074b4:	617b      	str	r3, [r7, #20]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	617b      	str	r3, [r7, #20]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80074c8:	e138      	b.n	800773c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	f200 80f1 	bhi.w	80076b6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d123      	bne.n	8007524 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f000 fe99 	bl	8008218 <I2C_WaitOnRXNEFlagUntilTimeout>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d001      	beq.n	80074f0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e139      	b.n	8007764 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007502:	1c5a      	adds	r2, r3, #1
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750c:	3b01      	subs	r3, #1
 800750e:	b29a      	uxth	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	3b01      	subs	r3, #1
 800751c:	b29a      	uxth	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007522:	e10b      	b.n	800773c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007528:	2b02      	cmp	r3, #2
 800752a:	d14e      	bne.n	80075ca <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800752c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007532:	2200      	movs	r2, #0
 8007534:	4906      	ldr	r1, [pc, #24]	; (8007550 <HAL_I2C_Mem_Read+0x22c>)
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 fd16 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d008      	beq.n	8007554 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e10e      	b.n	8007764 <HAL_I2C_Mem_Read+0x440>
 8007546:	bf00      	nop
 8007548:	00100002 	.word	0x00100002
 800754c:	ffff0000 	.word	0xffff0000
 8007550:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007562:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691a      	ldr	r2, [r3, #16]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	b2d2      	uxtb	r2, r2
 80075a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075c8:	e0b8      	b.n	800773c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	2200      	movs	r2, #0
 80075d2:	4966      	ldr	r1, [pc, #408]	; (800776c <HAL_I2C_Mem_Read+0x448>)
 80075d4:	68f8      	ldr	r0, [r7, #12]
 80075d6:	f000 fcc7 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	e0bf      	b.n	8007764 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	691a      	ldr	r2, [r3, #16]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007610:	3b01      	subs	r3, #1
 8007612:	b29a      	uxth	r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761c:	b29b      	uxth	r3, r3
 800761e:	3b01      	subs	r3, #1
 8007620:	b29a      	uxth	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	2200      	movs	r2, #0
 800762e:	494f      	ldr	r1, [pc, #316]	; (800776c <HAL_I2C_Mem_Read+0x448>)
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 fc99 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e091      	b.n	8007764 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800764e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765a:	b2d2      	uxtb	r2, r2
 800765c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	691a      	ldr	r2, [r3, #16]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768c:	b2d2      	uxtb	r2, r2
 800768e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076b4:	e042      	b.n	800773c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076ba:	68f8      	ldr	r0, [r7, #12]
 80076bc:	f000 fdac 	bl	8008218 <I2C_WaitOnRXNEFlagUntilTimeout>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	e04c      	b.n	8007764 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691a      	ldr	r2, [r3, #16]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	b2d2      	uxtb	r2, r2
 80076d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076e6:	3b01      	subs	r3, #1
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	3b01      	subs	r3, #1
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f003 0304 	and.w	r3, r3, #4
 8007706:	2b04      	cmp	r3, #4
 8007708:	d118      	bne.n	800773c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	b2d2      	uxtb	r2, r2
 8007716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007726:	3b01      	subs	r3, #1
 8007728:	b29a      	uxth	r2, r3
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007732:	b29b      	uxth	r3, r3
 8007734:	3b01      	subs	r3, #1
 8007736:	b29a      	uxth	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007740:	2b00      	cmp	r3, #0
 8007742:	f47f aec2 	bne.w	80074ca <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2220      	movs	r2, #32
 800774a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	e000      	b.n	8007764 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007762:	2302      	movs	r3, #2
  }
}
 8007764:	4618      	mov	r0, r3
 8007766:	3728      	adds	r7, #40	; 0x28
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	00010004 	.word	0x00010004

08007770 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08a      	sub	sp, #40	; 0x28
 8007774:	af02      	add	r7, sp, #8
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	607a      	str	r2, [r7, #4]
 800777a:	603b      	str	r3, [r7, #0]
 800777c:	460b      	mov	r3, r1
 800777e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007780:	f7fe fc46 	bl	8006010 <HAL_GetTick>
 8007784:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b20      	cmp	r3, #32
 8007794:	f040 8111 	bne.w	80079ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	2319      	movs	r3, #25
 800779e:	2201      	movs	r2, #1
 80077a0:	4988      	ldr	r1, [pc, #544]	; (80079c4 <HAL_I2C_IsDeviceReady+0x254>)
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 fbe0 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80077ae:	2302      	movs	r3, #2
 80077b0:	e104      	b.n	80079bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d101      	bne.n	80077c0 <HAL_I2C_IsDeviceReady+0x50>
 80077bc:	2302      	movs	r3, #2
 80077be:	e0fd      	b.n	80079bc <HAL_I2C_IsDeviceReady+0x24c>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0301 	and.w	r3, r3, #1
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d007      	beq.n	80077e6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f042 0201 	orr.w	r2, r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2224      	movs	r2, #36	; 0x24
 80077fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a70      	ldr	r2, [pc, #448]	; (80079c8 <HAL_I2C_IsDeviceReady+0x258>)
 8007808:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007818:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	9300      	str	r3, [sp, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2200      	movs	r2, #0
 8007822:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fb9e 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00d      	beq.n	800784e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007840:	d103      	bne.n	800784a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007848:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800784a:	2303      	movs	r3, #3
 800784c:	e0b6      	b.n	80079bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800784e:	897b      	ldrh	r3, [r7, #10]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800785c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800785e:	f7fe fbd7 	bl	8006010 <HAL_GetTick>
 8007862:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b02      	cmp	r3, #2
 8007870:	bf0c      	ite	eq
 8007872:	2301      	moveq	r3, #1
 8007874:	2300      	movne	r3, #0
 8007876:	b2db      	uxtb	r3, r3
 8007878:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007888:	bf0c      	ite	eq
 800788a:	2301      	moveq	r3, #1
 800788c:	2300      	movne	r3, #0
 800788e:	b2db      	uxtb	r3, r3
 8007890:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007892:	e025      	b.n	80078e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007894:	f7fe fbbc 	bl	8006010 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d302      	bcc.n	80078aa <HAL_I2C_IsDeviceReady+0x13a>
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d103      	bne.n	80078b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	22a0      	movs	r2, #160	; 0xa0
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	695b      	ldr	r3, [r3, #20]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b02      	cmp	r3, #2
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078d6:	bf0c      	ite	eq
 80078d8:	2301      	moveq	r3, #1
 80078da:	2300      	movne	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2ba0      	cmp	r3, #160	; 0xa0
 80078ea:	d005      	beq.n	80078f8 <HAL_I2C_IsDeviceReady+0x188>
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d102      	bne.n	80078f8 <HAL_I2C_IsDeviceReady+0x188>
 80078f2:	7dbb      	ldrb	r3, [r7, #22]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0cd      	beq.n	8007894 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	f003 0302 	and.w	r3, r3, #2
 800790a:	2b02      	cmp	r3, #2
 800790c:	d129      	bne.n	8007962 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800791c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800791e:	2300      	movs	r3, #0
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	613b      	str	r3, [r7, #16]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	2319      	movs	r3, #25
 800793a:	2201      	movs	r2, #1
 800793c:	4921      	ldr	r1, [pc, #132]	; (80079c4 <HAL_I2C_IsDeviceReady+0x254>)
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fb12 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e036      	b.n	80079bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	e02c      	b.n	80079bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007970:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800797a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2319      	movs	r3, #25
 8007982:	2201      	movs	r2, #1
 8007984:	490f      	ldr	r1, [pc, #60]	; (80079c4 <HAL_I2C_IsDeviceReady+0x254>)
 8007986:	68f8      	ldr	r0, [r7, #12]
 8007988:	f000 faee 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e012      	b.n	80079bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	3301      	adds	r3, #1
 800799a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	f4ff af32 	bcc.w	800780a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80079ba:	2302      	movs	r3, #2
  }
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3720      	adds	r7, #32
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	00100002 	.word	0x00100002
 80079c8:	ffff0000 	.word	0xffff0000

080079cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	607a      	str	r2, [r7, #4]
 80079d6:	603b      	str	r3, [r7, #0]
 80079d8:	460b      	mov	r3, r1
 80079da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d006      	beq.n	80079f6 <I2C_MasterRequestWrite+0x2a>
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d003      	beq.n	80079f6 <I2C_MasterRequestWrite+0x2a>
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80079f4:	d108      	bne.n	8007a08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a04:	601a      	str	r2, [r3, #0]
 8007a06:	e00b      	b.n	8007a20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0c:	2b12      	cmp	r3, #18
 8007a0e:	d107      	bne.n	8007a20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 fa9b 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00d      	beq.n	8007a54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a46:	d103      	bne.n	8007a50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e035      	b.n	8007ac0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a5c:	d108      	bne.n	8007a70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007a5e:	897b      	ldrh	r3, [r7, #10]
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	461a      	mov	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007a6c:	611a      	str	r2, [r3, #16]
 8007a6e:	e01b      	b.n	8007aa8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007a70:	897b      	ldrh	r3, [r7, #10]
 8007a72:	11db      	asrs	r3, r3, #7
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	f003 0306 	and.w	r3, r3, #6
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f063 030f 	orn	r3, r3, #15
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	490e      	ldr	r1, [pc, #56]	; (8007ac8 <I2C_MasterRequestWrite+0xfc>)
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fac1 	bl	8008016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e010      	b.n	8007ac0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007a9e:	897b      	ldrh	r3, [r7, #10]
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	4907      	ldr	r1, [pc, #28]	; (8007acc <I2C_MasterRequestWrite+0x100>)
 8007aae:	68f8      	ldr	r0, [r7, #12]
 8007ab0:	f000 fab1 	bl	8008016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	e000      	b.n	8007ac0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	00010008 	.word	0x00010008
 8007acc:	00010002 	.word	0x00010002

08007ad0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	607a      	str	r2, [r7, #4]
 8007ada:	603b      	str	r3, [r7, #0]
 8007adc:	460b      	mov	r3, r1
 8007ade:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007af4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d006      	beq.n	8007b0a <I2C_MasterRequestRead+0x3a>
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d003      	beq.n	8007b0a <I2C_MasterRequestRead+0x3a>
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b08:	d108      	bne.n	8007b1c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	e00b      	b.n	8007b34 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b20:	2b11      	cmp	r3, #17
 8007b22:	d107      	bne.n	8007b34 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b32:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fa11 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00d      	beq.n	8007b68 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b5a:	d103      	bne.n	8007b64 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e079      	b.n	8007c5c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b70:	d108      	bne.n	8007b84 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007b72:	897b      	ldrh	r3, [r7, #10]
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	f043 0301 	orr.w	r3, r3, #1
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	611a      	str	r2, [r3, #16]
 8007b82:	e05f      	b.n	8007c44 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b84:	897b      	ldrh	r3, [r7, #10]
 8007b86:	11db      	asrs	r3, r3, #7
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	f003 0306 	and.w	r3, r3, #6
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f063 030f 	orn	r3, r3, #15
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	4930      	ldr	r1, [pc, #192]	; (8007c64 <I2C_MasterRequestRead+0x194>)
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f000 fa37 	bl	8008016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d001      	beq.n	8007bb2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e054      	b.n	8007c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007bb2:	897b      	ldrh	r3, [r7, #10]
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4929      	ldr	r1, [pc, #164]	; (8007c68 <I2C_MasterRequestRead+0x198>)
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fa27 	bl	8008016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e044      	b.n	8007c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	613b      	str	r3, [r7, #16]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	613b      	str	r3, [r7, #16]
 8007be6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bf6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	9300      	str	r3, [sp, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007c04:	68f8      	ldr	r0, [r7, #12]
 8007c06:	f000 f9af 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00d      	beq.n	8007c2c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c1e:	d103      	bne.n	8007c28 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c26:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e017      	b.n	8007c5c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007c2c:	897b      	ldrh	r3, [r7, #10]
 8007c2e:	11db      	asrs	r3, r3, #7
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	f003 0306 	and.w	r3, r3, #6
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f063 030e 	orn	r3, r3, #14
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	4907      	ldr	r1, [pc, #28]	; (8007c68 <I2C_MasterRequestRead+0x198>)
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 f9e3 	bl	8008016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	00010008 	.word	0x00010008
 8007c68:	00010002 	.word	0x00010002

08007c6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b088      	sub	sp, #32
 8007c70:	af02      	add	r7, sp, #8
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	4608      	mov	r0, r1
 8007c76:	4611      	mov	r1, r2
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	817b      	strh	r3, [r7, #10]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	813b      	strh	r3, [r7, #8]
 8007c82:	4613      	mov	r3, r2
 8007c84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f000 f960 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00d      	beq.n	8007cca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cbc:	d103      	bne.n	8007cc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e05f      	b.n	8007d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cca:	897b      	ldrh	r3, [r7, #10]
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007cd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	6a3a      	ldr	r2, [r7, #32]
 8007cde:	492d      	ldr	r1, [pc, #180]	; (8007d94 <I2C_RequestMemoryWrite+0x128>)
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f000 f998 	bl	8008016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d001      	beq.n	8007cf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e04c      	b.n	8007d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d08:	6a39      	ldr	r1, [r7, #32]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 fa02 	bl	8008114 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00d      	beq.n	8007d32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	d107      	bne.n	8007d2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e02b      	b.n	8007d8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d32:	88fb      	ldrh	r3, [r7, #6]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d105      	bne.n	8007d44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d38:	893b      	ldrh	r3, [r7, #8]
 8007d3a:	b2da      	uxtb	r2, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	611a      	str	r2, [r3, #16]
 8007d42:	e021      	b.n	8007d88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d44:	893b      	ldrh	r3, [r7, #8]
 8007d46:	0a1b      	lsrs	r3, r3, #8
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d54:	6a39      	ldr	r1, [r7, #32]
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f000 f9dc 	bl	8008114 <I2C_WaitOnTXEFlagUntilTimeout>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00d      	beq.n	8007d7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d107      	bne.n	8007d7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e005      	b.n	8007d8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d7e:	893b      	ldrh	r3, [r7, #8]
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3718      	adds	r7, #24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	00010002 	.word	0x00010002

08007d98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b088      	sub	sp, #32
 8007d9c:	af02      	add	r7, sp, #8
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	4608      	mov	r0, r1
 8007da2:	4611      	mov	r1, r2
 8007da4:	461a      	mov	r2, r3
 8007da6:	4603      	mov	r3, r0
 8007da8:	817b      	strh	r3, [r7, #10]
 8007daa:	460b      	mov	r3, r1
 8007dac:	813b      	strh	r3, [r7, #8]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dc0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007dde:	68f8      	ldr	r0, [r7, #12]
 8007de0:	f000 f8c2 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00d      	beq.n	8007e06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007df8:	d103      	bne.n	8007e02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e0aa      	b.n	8007f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007e06:	897b      	ldrh	r3, [r7, #10]
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	461a      	mov	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	6a3a      	ldr	r2, [r7, #32]
 8007e1a:	4952      	ldr	r1, [pc, #328]	; (8007f64 <I2C_RequestMemoryRead+0x1cc>)
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f8fa 	bl	8008016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e097      	b.n	8007f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	617b      	str	r3, [r7, #20]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	617b      	str	r3, [r7, #20]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e44:	6a39      	ldr	r1, [r7, #32]
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 f964 	bl	8008114 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00d      	beq.n	8007e6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d107      	bne.n	8007e6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e076      	b.n	8007f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d105      	bne.n	8007e80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007e74:	893b      	ldrh	r3, [r7, #8]
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	611a      	str	r2, [r3, #16]
 8007e7e:	e021      	b.n	8007ec4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007e80:	893b      	ldrh	r3, [r7, #8]
 8007e82:	0a1b      	lsrs	r3, r3, #8
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e90:	6a39      	ldr	r1, [r7, #32]
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 f93e 	bl	8008114 <I2C_WaitOnTXEFlagUntilTimeout>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00d      	beq.n	8007eba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	2b04      	cmp	r3, #4
 8007ea4:	d107      	bne.n	8007eb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e050      	b.n	8007f5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007eba:	893b      	ldrh	r3, [r7, #8]
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec6:	6a39      	ldr	r1, [r7, #32]
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 f923 	bl	8008114 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00d      	beq.n	8007ef0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed8:	2b04      	cmp	r3, #4
 8007eda:	d107      	bne.n	8007eec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007eec:	2301      	movs	r3, #1
 8007eee:	e035      	b.n	8007f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007efe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	2200      	movs	r2, #0
 8007f08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f82b 	bl	8007f68 <I2C_WaitOnFlagUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00d      	beq.n	8007f34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f26:	d103      	bne.n	8007f30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e013      	b.n	8007f5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007f34:	897b      	ldrh	r3, [r7, #10]
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f043 0301 	orr.w	r3, r3, #1
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	4906      	ldr	r1, [pc, #24]	; (8007f64 <I2C_RequestMemoryRead+0x1cc>)
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f863 	bl	8008016 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e000      	b.n	8007f5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	00010002 	.word	0x00010002

08007f68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b084      	sub	sp, #16
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	603b      	str	r3, [r7, #0]
 8007f74:	4613      	mov	r3, r2
 8007f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f78:	e025      	b.n	8007fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f80:	d021      	beq.n	8007fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f82:	f7fe f845 	bl	8006010 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d116      	bne.n	8007fc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	f043 0220 	orr.w	r2, r3, #32
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e023      	b.n	800800e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	0c1b      	lsrs	r3, r3, #16
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d10d      	bne.n	8007fec <I2C_WaitOnFlagUntilTimeout+0x84>
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	43da      	mvns	r2, r3
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	4013      	ands	r3, r2
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bf0c      	ite	eq
 8007fe2:	2301      	moveq	r3, #1
 8007fe4:	2300      	movne	r3, #0
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	461a      	mov	r2, r3
 8007fea:	e00c      	b.n	8008006 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	43da      	mvns	r2, r3
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4013      	ands	r3, r2
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	bf0c      	ite	eq
 8007ffe:	2301      	moveq	r3, #1
 8008000:	2300      	movne	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	461a      	mov	r2, r3
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	429a      	cmp	r2, r3
 800800a:	d0b6      	beq.n	8007f7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3710      	adds	r7, #16
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b084      	sub	sp, #16
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	607a      	str	r2, [r7, #4]
 8008022:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008024:	e051      	b.n	80080ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008034:	d123      	bne.n	800807e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008044:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800804e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2200      	movs	r2, #0
 8008054:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806a:	f043 0204 	orr.w	r2, r3, #4
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e046      	b.n	800810c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008084:	d021      	beq.n	80080ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008086:	f7fd ffc3 	bl	8006010 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	429a      	cmp	r2, r3
 8008094:	d302      	bcc.n	800809c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d116      	bne.n	80080ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b6:	f043 0220 	orr.w	r2, r3, #32
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
 80080c8:	e020      	b.n	800810c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	0c1b      	lsrs	r3, r3, #16
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d10c      	bne.n	80080ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	43da      	mvns	r2, r3
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4013      	ands	r3, r2
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	bf14      	ite	ne
 80080e6:	2301      	movne	r3, #1
 80080e8:	2300      	moveq	r3, #0
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	e00b      	b.n	8008106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	43da      	mvns	r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	4013      	ands	r3, r2
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	bf14      	ite	ne
 8008100:	2301      	movne	r3, #1
 8008102:	2300      	moveq	r3, #0
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d18d      	bne.n	8008026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b084      	sub	sp, #16
 8008118:	af00      	add	r7, sp, #0
 800811a:	60f8      	str	r0, [r7, #12]
 800811c:	60b9      	str	r1, [r7, #8]
 800811e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008120:	e02d      	b.n	800817e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008122:	68f8      	ldr	r0, [r7, #12]
 8008124:	f000 f8ce 	bl	80082c4 <I2C_IsAcknowledgeFailed>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d001      	beq.n	8008132 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e02d      	b.n	800818e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008138:	d021      	beq.n	800817e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800813a:	f7fd ff69 	bl	8006010 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	429a      	cmp	r2, r3
 8008148:	d302      	bcc.n	8008150 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d116      	bne.n	800817e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2220      	movs	r2, #32
 800815a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f043 0220 	orr.w	r2, r3, #32
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e007      	b.n	800818e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008188:	2b80      	cmp	r3, #128	; 0x80
 800818a:	d1ca      	bne.n	8008122 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b084      	sub	sp, #16
 800819a:	af00      	add	r7, sp, #0
 800819c:	60f8      	str	r0, [r7, #12]
 800819e:	60b9      	str	r1, [r7, #8]
 80081a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081a2:	e02d      	b.n	8008200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f88d 	bl	80082c4 <I2C_IsAcknowledgeFailed>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e02d      	b.n	8008210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ba:	d021      	beq.n	8008200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081bc:	f7fd ff28 	bl	8006010 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	68ba      	ldr	r2, [r7, #8]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d302      	bcc.n	80081d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d116      	bne.n	8008200 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ec:	f043 0220 	orr.w	r2, r3, #32
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e007      	b.n	8008210 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	f003 0304 	and.w	r3, r3, #4
 800820a:	2b04      	cmp	r3, #4
 800820c:	d1ca      	bne.n	80081a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008224:	e042      	b.n	80082ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
 800822c:	f003 0310 	and.w	r3, r3, #16
 8008230:	2b10      	cmp	r3, #16
 8008232:	d119      	bne.n	8008268 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f06f 0210 	mvn.w	r2, #16
 800823c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2220      	movs	r2, #32
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e029      	b.n	80082bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008268:	f7fd fed2 	bl	8006010 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	429a      	cmp	r2, r3
 8008276:	d302      	bcc.n	800827e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d116      	bne.n	80082ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2200      	movs	r2, #0
 8008282:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008298:	f043 0220 	orr.w	r2, r3, #32
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e007      	b.n	80082bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b6:	2b40      	cmp	r3, #64	; 0x40
 80082b8:	d1b5      	bne.n	8008226 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082da:	d11b      	bne.n	8008314 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008300:	f043 0204 	orr.w	r2, r3, #4
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e000      	b.n	8008316 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e267      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0301 	and.w	r3, r3, #1
 800833e:	2b00      	cmp	r3, #0
 8008340:	d075      	beq.n	800842e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008342:	4b88      	ldr	r3, [pc, #544]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 030c 	and.w	r3, r3, #12
 800834a:	2b04      	cmp	r3, #4
 800834c:	d00c      	beq.n	8008368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800834e:	4b85      	ldr	r3, [pc, #532]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008356:	2b08      	cmp	r3, #8
 8008358:	d112      	bne.n	8008380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800835a:	4b82      	ldr	r3, [pc, #520]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008366:	d10b      	bne.n	8008380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008368:	4b7e      	ldr	r3, [pc, #504]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d05b      	beq.n	800842c <HAL_RCC_OscConfig+0x108>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d157      	bne.n	800842c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e242      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008388:	d106      	bne.n	8008398 <HAL_RCC_OscConfig+0x74>
 800838a:	4b76      	ldr	r3, [pc, #472]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a75      	ldr	r2, [pc, #468]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	e01d      	b.n	80083d4 <HAL_RCC_OscConfig+0xb0>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083a0:	d10c      	bne.n	80083bc <HAL_RCC_OscConfig+0x98>
 80083a2:	4b70      	ldr	r3, [pc, #448]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a6f      	ldr	r2, [pc, #444]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80083a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	4b6d      	ldr	r3, [pc, #436]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a6c      	ldr	r2, [pc, #432]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80083b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	e00b      	b.n	80083d4 <HAL_RCC_OscConfig+0xb0>
 80083bc:	4b69      	ldr	r3, [pc, #420]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a68      	ldr	r2, [pc, #416]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80083c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	4b66      	ldr	r3, [pc, #408]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a65      	ldr	r2, [pc, #404]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80083ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d013      	beq.n	8008404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083dc:	f7fd fe18 	bl	8006010 <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80083e4:	f7fd fe14 	bl	8006010 <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b64      	cmp	r3, #100	; 0x64
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e207      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083f6:	4b5b      	ldr	r3, [pc, #364]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0f0      	beq.n	80083e4 <HAL_RCC_OscConfig+0xc0>
 8008402:	e014      	b.n	800842e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008404:	f7fd fe04 	bl	8006010 <HAL_GetTick>
 8008408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800840c:	f7fd fe00 	bl	8006010 <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b64      	cmp	r3, #100	; 0x64
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e1f3      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800841e:	4b51      	ldr	r3, [pc, #324]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f0      	bne.n	800840c <HAL_RCC_OscConfig+0xe8>
 800842a:	e000      	b.n	800842e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800842c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d063      	beq.n	8008502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800843a:	4b4a      	ldr	r3, [pc, #296]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 030c 	and.w	r3, r3, #12
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008446:	4b47      	ldr	r3, [pc, #284]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800844e:	2b08      	cmp	r3, #8
 8008450:	d11c      	bne.n	800848c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008452:	4b44      	ldr	r3, [pc, #272]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d116      	bne.n	800848c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800845e:	4b41      	ldr	r3, [pc, #260]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <HAL_RCC_OscConfig+0x152>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d001      	beq.n	8008476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e1c7      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008476:	4b3b      	ldr	r3, [pc, #236]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4937      	ldr	r1, [pc, #220]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008486:	4313      	orrs	r3, r2
 8008488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800848a:	e03a      	b.n	8008502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d020      	beq.n	80084d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008494:	4b34      	ldr	r3, [pc, #208]	; (8008568 <HAL_RCC_OscConfig+0x244>)
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849a:	f7fd fdb9 	bl	8006010 <HAL_GetTick>
 800849e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a0:	e008      	b.n	80084b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084a2:	f7fd fdb5 	bl	8006010 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e1a8      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084b4:	4b2b      	ldr	r3, [pc, #172]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d0f0      	beq.n	80084a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c0:	4b28      	ldr	r3, [pc, #160]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	00db      	lsls	r3, r3, #3
 80084ce:	4925      	ldr	r1, [pc, #148]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	600b      	str	r3, [r1, #0]
 80084d4:	e015      	b.n	8008502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084d6:	4b24      	ldr	r3, [pc, #144]	; (8008568 <HAL_RCC_OscConfig+0x244>)
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084dc:	f7fd fd98 	bl	8006010 <HAL_GetTick>
 80084e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084e2:	e008      	b.n	80084f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80084e4:	f7fd fd94 	bl	8006010 <HAL_GetTick>
 80084e8:	4602      	mov	r2, r0
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d901      	bls.n	80084f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e187      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084f6:	4b1b      	ldr	r3, [pc, #108]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f0      	bne.n	80084e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0308 	and.w	r3, r3, #8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d036      	beq.n	800857c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d016      	beq.n	8008544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008516:	4b15      	ldr	r3, [pc, #84]	; (800856c <HAL_RCC_OscConfig+0x248>)
 8008518:	2201      	movs	r2, #1
 800851a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800851c:	f7fd fd78 	bl	8006010 <HAL_GetTick>
 8008520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008522:	e008      	b.n	8008536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008524:	f7fd fd74 	bl	8006010 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e167      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008536:	4b0b      	ldr	r3, [pc, #44]	; (8008564 <HAL_RCC_OscConfig+0x240>)
 8008538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0f0      	beq.n	8008524 <HAL_RCC_OscConfig+0x200>
 8008542:	e01b      	b.n	800857c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008544:	4b09      	ldr	r3, [pc, #36]	; (800856c <HAL_RCC_OscConfig+0x248>)
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800854a:	f7fd fd61 	bl	8006010 <HAL_GetTick>
 800854e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008550:	e00e      	b.n	8008570 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008552:	f7fd fd5d 	bl	8006010 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b02      	cmp	r3, #2
 800855e:	d907      	bls.n	8008570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e150      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
 8008564:	40023800 	.word	0x40023800
 8008568:	42470000 	.word	0x42470000
 800856c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008570:	4b88      	ldr	r3, [pc, #544]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008574:	f003 0302 	and.w	r3, r3, #2
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1ea      	bne.n	8008552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0304 	and.w	r3, r3, #4
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 8097 	beq.w	80086b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800858e:	4b81      	ldr	r3, [pc, #516]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10f      	bne.n	80085ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800859a:	2300      	movs	r3, #0
 800859c:	60bb      	str	r3, [r7, #8]
 800859e:	4b7d      	ldr	r3, [pc, #500]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	4a7c      	ldr	r2, [pc, #496]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 80085a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a8:	6413      	str	r3, [r2, #64]	; 0x40
 80085aa:	4b7a      	ldr	r3, [pc, #488]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 80085ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085b2:	60bb      	str	r3, [r7, #8]
 80085b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085b6:	2301      	movs	r3, #1
 80085b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085ba:	4b77      	ldr	r3, [pc, #476]	; (8008798 <HAL_RCC_OscConfig+0x474>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d118      	bne.n	80085f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80085c6:	4b74      	ldr	r3, [pc, #464]	; (8008798 <HAL_RCC_OscConfig+0x474>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a73      	ldr	r2, [pc, #460]	; (8008798 <HAL_RCC_OscConfig+0x474>)
 80085cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085d2:	f7fd fd1d 	bl	8006010 <HAL_GetTick>
 80085d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085d8:	e008      	b.n	80085ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085da:	f7fd fd19 	bl	8006010 <HAL_GetTick>
 80085de:	4602      	mov	r2, r0
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	1ad3      	subs	r3, r2, r3
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d901      	bls.n	80085ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e10c      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80085ec:	4b6a      	ldr	r3, [pc, #424]	; (8008798 <HAL_RCC_OscConfig+0x474>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d0f0      	beq.n	80085da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d106      	bne.n	800860e <HAL_RCC_OscConfig+0x2ea>
 8008600:	4b64      	ldr	r3, [pc, #400]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008604:	4a63      	ldr	r2, [pc, #396]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	6713      	str	r3, [r2, #112]	; 0x70
 800860c:	e01c      	b.n	8008648 <HAL_RCC_OscConfig+0x324>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	2b05      	cmp	r3, #5
 8008614:	d10c      	bne.n	8008630 <HAL_RCC_OscConfig+0x30c>
 8008616:	4b5f      	ldr	r3, [pc, #380]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800861a:	4a5e      	ldr	r2, [pc, #376]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 800861c:	f043 0304 	orr.w	r3, r3, #4
 8008620:	6713      	str	r3, [r2, #112]	; 0x70
 8008622:	4b5c      	ldr	r3, [pc, #368]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008626:	4a5b      	ldr	r2, [pc, #364]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008628:	f043 0301 	orr.w	r3, r3, #1
 800862c:	6713      	str	r3, [r2, #112]	; 0x70
 800862e:	e00b      	b.n	8008648 <HAL_RCC_OscConfig+0x324>
 8008630:	4b58      	ldr	r3, [pc, #352]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008634:	4a57      	ldr	r2, [pc, #348]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008636:	f023 0301 	bic.w	r3, r3, #1
 800863a:	6713      	str	r3, [r2, #112]	; 0x70
 800863c:	4b55      	ldr	r3, [pc, #340]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 800863e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008640:	4a54      	ldr	r2, [pc, #336]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008642:	f023 0304 	bic.w	r3, r3, #4
 8008646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d015      	beq.n	800867c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008650:	f7fd fcde 	bl	8006010 <HAL_GetTick>
 8008654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008656:	e00a      	b.n	800866e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008658:	f7fd fcda 	bl	8006010 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	f241 3288 	movw	r2, #5000	; 0x1388
 8008666:	4293      	cmp	r3, r2
 8008668:	d901      	bls.n	800866e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800866a:	2303      	movs	r3, #3
 800866c:	e0cb      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800866e:	4b49      	ldr	r3, [pc, #292]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0ee      	beq.n	8008658 <HAL_RCC_OscConfig+0x334>
 800867a:	e014      	b.n	80086a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800867c:	f7fd fcc8 	bl	8006010 <HAL_GetTick>
 8008680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008682:	e00a      	b.n	800869a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008684:	f7fd fcc4 	bl	8006010 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008692:	4293      	cmp	r3, r2
 8008694:	d901      	bls.n	800869a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e0b5      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800869a:	4b3e      	ldr	r3, [pc, #248]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 800869c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1ee      	bne.n	8008684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80086a6:	7dfb      	ldrb	r3, [r7, #23]
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d105      	bne.n	80086b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086ac:	4b39      	ldr	r3, [pc, #228]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 80086ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b0:	4a38      	ldr	r2, [pc, #224]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 80086b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 80a1 	beq.w	8008804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80086c2:	4b34      	ldr	r3, [pc, #208]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 030c 	and.w	r3, r3, #12
 80086ca:	2b08      	cmp	r3, #8
 80086cc:	d05c      	beq.n	8008788 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	2b02      	cmp	r3, #2
 80086d4:	d141      	bne.n	800875a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086d6:	4b31      	ldr	r3, [pc, #196]	; (800879c <HAL_RCC_OscConfig+0x478>)
 80086d8:	2200      	movs	r2, #0
 80086da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086dc:	f7fd fc98 	bl	8006010 <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80086e4:	f7fd fc94 	bl	8006010 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e087      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086f6:	4b27      	ldr	r3, [pc, #156]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1f0      	bne.n	80086e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	69da      	ldr	r2, [r3, #28]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	019b      	lsls	r3, r3, #6
 8008712:	431a      	orrs	r2, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	085b      	lsrs	r3, r3, #1
 800871a:	3b01      	subs	r3, #1
 800871c:	041b      	lsls	r3, r3, #16
 800871e:	431a      	orrs	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	061b      	lsls	r3, r3, #24
 8008726:	491b      	ldr	r1, [pc, #108]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 8008728:	4313      	orrs	r3, r2
 800872a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800872c:	4b1b      	ldr	r3, [pc, #108]	; (800879c <HAL_RCC_OscConfig+0x478>)
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008732:	f7fd fc6d 	bl	8006010 <HAL_GetTick>
 8008736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008738:	e008      	b.n	800874c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800873a:	f7fd fc69 	bl	8006010 <HAL_GetTick>
 800873e:	4602      	mov	r2, r0
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	2b02      	cmp	r3, #2
 8008746:	d901      	bls.n	800874c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008748:	2303      	movs	r3, #3
 800874a:	e05c      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800874c:	4b11      	ldr	r3, [pc, #68]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d0f0      	beq.n	800873a <HAL_RCC_OscConfig+0x416>
 8008758:	e054      	b.n	8008804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800875a:	4b10      	ldr	r3, [pc, #64]	; (800879c <HAL_RCC_OscConfig+0x478>)
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008760:	f7fd fc56 	bl	8006010 <HAL_GetTick>
 8008764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008766:	e008      	b.n	800877a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008768:	f7fd fc52 	bl	8006010 <HAL_GetTick>
 800876c:	4602      	mov	r2, r0
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	2b02      	cmp	r3, #2
 8008774:	d901      	bls.n	800877a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008776:	2303      	movs	r3, #3
 8008778:	e045      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800877a:	4b06      	ldr	r3, [pc, #24]	; (8008794 <HAL_RCC_OscConfig+0x470>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d1f0      	bne.n	8008768 <HAL_RCC_OscConfig+0x444>
 8008786:	e03d      	b.n	8008804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d107      	bne.n	80087a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e038      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
 8008794:	40023800 	.word	0x40023800
 8008798:	40007000 	.word	0x40007000
 800879c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80087a0:	4b1b      	ldr	r3, [pc, #108]	; (8008810 <HAL_RCC_OscConfig+0x4ec>)
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d028      	beq.n	8008800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d121      	bne.n	8008800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d11a      	bne.n	8008800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087ca:	68fa      	ldr	r2, [r7, #12]
 80087cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80087d0:	4013      	ands	r3, r2
 80087d2:	687a      	ldr	r2, [r7, #4]
 80087d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80087d8:	4293      	cmp	r3, r2
 80087da:	d111      	bne.n	8008800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e6:	085b      	lsrs	r3, r3, #1
 80087e8:	3b01      	subs	r3, #1
 80087ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d107      	bne.n	8008800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d001      	beq.n	8008804 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e000      	b.n	8008806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	40023800 	.word	0x40023800

08008814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b084      	sub	sp, #16
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d101      	bne.n	8008828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e0cc      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008828:	4b68      	ldr	r3, [pc, #416]	; (80089cc <HAL_RCC_ClockConfig+0x1b8>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 0307 	and.w	r3, r3, #7
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	429a      	cmp	r2, r3
 8008834:	d90c      	bls.n	8008850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008836:	4b65      	ldr	r3, [pc, #404]	; (80089cc <HAL_RCC_ClockConfig+0x1b8>)
 8008838:	683a      	ldr	r2, [r7, #0]
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800883e:	4b63      	ldr	r3, [pc, #396]	; (80089cc <HAL_RCC_ClockConfig+0x1b8>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	429a      	cmp	r2, r3
 800884a:	d001      	beq.n	8008850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e0b8      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0302 	and.w	r3, r3, #2
 8008858:	2b00      	cmp	r3, #0
 800885a:	d020      	beq.n	800889e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d005      	beq.n	8008874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008868:	4b59      	ldr	r3, [pc, #356]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	4a58      	ldr	r2, [pc, #352]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 800886e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0308 	and.w	r3, r3, #8
 800887c:	2b00      	cmp	r3, #0
 800887e:	d005      	beq.n	800888c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008880:	4b53      	ldr	r3, [pc, #332]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	4a52      	ldr	r2, [pc, #328]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800888a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800888c:	4b50      	ldr	r3, [pc, #320]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	689b      	ldr	r3, [r3, #8]
 8008898:	494d      	ldr	r1, [pc, #308]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 800889a:	4313      	orrs	r3, r2
 800889c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0301 	and.w	r3, r3, #1
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d044      	beq.n	8008934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d107      	bne.n	80088c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088b2:	4b47      	ldr	r3, [pc, #284]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d119      	bne.n	80088f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e07f      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d003      	beq.n	80088d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80088ce:	2b03      	cmp	r3, #3
 80088d0:	d107      	bne.n	80088e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088d2:	4b3f      	ldr	r3, [pc, #252]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d109      	bne.n	80088f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e06f      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088e2:	4b3b      	ldr	r3, [pc, #236]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e067      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088f2:	4b37      	ldr	r3, [pc, #220]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f023 0203 	bic.w	r2, r3, #3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	4934      	ldr	r1, [pc, #208]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008900:	4313      	orrs	r3, r2
 8008902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008904:	f7fd fb84 	bl	8006010 <HAL_GetTick>
 8008908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800890a:	e00a      	b.n	8008922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800890c:	f7fd fb80 	bl	8006010 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	f241 3288 	movw	r2, #5000	; 0x1388
 800891a:	4293      	cmp	r3, r2
 800891c:	d901      	bls.n	8008922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e04f      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008922:	4b2b      	ldr	r3, [pc, #172]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f003 020c 	and.w	r2, r3, #12
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	009b      	lsls	r3, r3, #2
 8008930:	429a      	cmp	r2, r3
 8008932:	d1eb      	bne.n	800890c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008934:	4b25      	ldr	r3, [pc, #148]	; (80089cc <HAL_RCC_ClockConfig+0x1b8>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0307 	and.w	r3, r3, #7
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	429a      	cmp	r2, r3
 8008940:	d20c      	bcs.n	800895c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008942:	4b22      	ldr	r3, [pc, #136]	; (80089cc <HAL_RCC_ClockConfig+0x1b8>)
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	b2d2      	uxtb	r2, r2
 8008948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800894a:	4b20      	ldr	r3, [pc, #128]	; (80089cc <HAL_RCC_ClockConfig+0x1b8>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f003 0307 	and.w	r3, r3, #7
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	429a      	cmp	r2, r3
 8008956:	d001      	beq.n	800895c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e032      	b.n	80089c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b00      	cmp	r3, #0
 8008966:	d008      	beq.n	800897a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008968:	4b19      	ldr	r3, [pc, #100]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	4916      	ldr	r1, [pc, #88]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008976:	4313      	orrs	r3, r2
 8008978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d009      	beq.n	800899a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008986:	4b12      	ldr	r3, [pc, #72]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	00db      	lsls	r3, r3, #3
 8008994:	490e      	ldr	r1, [pc, #56]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 8008996:	4313      	orrs	r3, r2
 8008998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800899a:	f000 f821 	bl	80089e0 <HAL_RCC_GetSysClockFreq>
 800899e:	4602      	mov	r2, r0
 80089a0:	4b0b      	ldr	r3, [pc, #44]	; (80089d0 <HAL_RCC_ClockConfig+0x1bc>)
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	091b      	lsrs	r3, r3, #4
 80089a6:	f003 030f 	and.w	r3, r3, #15
 80089aa:	490a      	ldr	r1, [pc, #40]	; (80089d4 <HAL_RCC_ClockConfig+0x1c0>)
 80089ac:	5ccb      	ldrb	r3, [r1, r3]
 80089ae:	fa22 f303 	lsr.w	r3, r2, r3
 80089b2:	4a09      	ldr	r2, [pc, #36]	; (80089d8 <HAL_RCC_ClockConfig+0x1c4>)
 80089b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80089b6:	4b09      	ldr	r3, [pc, #36]	; (80089dc <HAL_RCC_ClockConfig+0x1c8>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fd f81a 	bl	80059f4 <HAL_InitTick>

  return HAL_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	40023c00 	.word	0x40023c00
 80089d0:	40023800 	.word	0x40023800
 80089d4:	08016468 	.word	0x08016468
 80089d8:	20000008 	.word	0x20000008
 80089dc:	2000000c 	.word	0x2000000c

080089e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80089e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089e4:	b094      	sub	sp, #80	; 0x50
 80089e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80089e8:	2300      	movs	r3, #0
 80089ea:	647b      	str	r3, [r7, #68]	; 0x44
 80089ec:	2300      	movs	r3, #0
 80089ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f0:	2300      	movs	r3, #0
 80089f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80089f4:	2300      	movs	r3, #0
 80089f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089f8:	4b79      	ldr	r3, [pc, #484]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f003 030c 	and.w	r3, r3, #12
 8008a00:	2b08      	cmp	r3, #8
 8008a02:	d00d      	beq.n	8008a20 <HAL_RCC_GetSysClockFreq+0x40>
 8008a04:	2b08      	cmp	r3, #8
 8008a06:	f200 80e1 	bhi.w	8008bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <HAL_RCC_GetSysClockFreq+0x34>
 8008a0e:	2b04      	cmp	r3, #4
 8008a10:	d003      	beq.n	8008a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8008a12:	e0db      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a14:	4b73      	ldr	r3, [pc, #460]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008a16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008a18:	e0db      	b.n	8008bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a1a:	4b73      	ldr	r3, [pc, #460]	; (8008be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8008a1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008a1e:	e0d8      	b.n	8008bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a20:	4b6f      	ldr	r3, [pc, #444]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a2a:	4b6d      	ldr	r3, [pc, #436]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d063      	beq.n	8008afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a36:	4b6a      	ldr	r3, [pc, #424]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	099b      	lsrs	r3, r3, #6
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a48:	633b      	str	r3, [r7, #48]	; 0x30
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008a52:	4622      	mov	r2, r4
 8008a54:	462b      	mov	r3, r5
 8008a56:	f04f 0000 	mov.w	r0, #0
 8008a5a:	f04f 0100 	mov.w	r1, #0
 8008a5e:	0159      	lsls	r1, r3, #5
 8008a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008a64:	0150      	lsls	r0, r2, #5
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	1a51      	subs	r1, r2, r1
 8008a6e:	6139      	str	r1, [r7, #16]
 8008a70:	4629      	mov	r1, r5
 8008a72:	eb63 0301 	sbc.w	r3, r3, r1
 8008a76:	617b      	str	r3, [r7, #20]
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	f04f 0300 	mov.w	r3, #0
 8008a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a84:	4659      	mov	r1, fp
 8008a86:	018b      	lsls	r3, r1, #6
 8008a88:	4651      	mov	r1, sl
 8008a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008a8e:	4651      	mov	r1, sl
 8008a90:	018a      	lsls	r2, r1, #6
 8008a92:	4651      	mov	r1, sl
 8008a94:	ebb2 0801 	subs.w	r8, r2, r1
 8008a98:	4659      	mov	r1, fp
 8008a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8008a9e:	f04f 0200 	mov.w	r2, #0
 8008aa2:	f04f 0300 	mov.w	r3, #0
 8008aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ab2:	4690      	mov	r8, r2
 8008ab4:	4699      	mov	r9, r3
 8008ab6:	4623      	mov	r3, r4
 8008ab8:	eb18 0303 	adds.w	r3, r8, r3
 8008abc:	60bb      	str	r3, [r7, #8]
 8008abe:	462b      	mov	r3, r5
 8008ac0:	eb49 0303 	adc.w	r3, r9, r3
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	f04f 0200 	mov.w	r2, #0
 8008aca:	f04f 0300 	mov.w	r3, #0
 8008ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	024b      	lsls	r3, r1, #9
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008adc:	4621      	mov	r1, r4
 8008ade:	024a      	lsls	r2, r1, #9
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008af0:	f7f8 f8d2 	bl	8000c98 <__aeabi_uldivmod>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4613      	mov	r3, r2
 8008afa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008afc:	e058      	b.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008afe:	4b38      	ldr	r3, [pc, #224]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	099b      	lsrs	r3, r3, #6
 8008b04:	2200      	movs	r2, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	4611      	mov	r1, r2
 8008b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008b0e:	623b      	str	r3, [r7, #32]
 8008b10:	2300      	movs	r3, #0
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
 8008b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008b18:	4642      	mov	r2, r8
 8008b1a:	464b      	mov	r3, r9
 8008b1c:	f04f 0000 	mov.w	r0, #0
 8008b20:	f04f 0100 	mov.w	r1, #0
 8008b24:	0159      	lsls	r1, r3, #5
 8008b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b2a:	0150      	lsls	r0, r2, #5
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	4641      	mov	r1, r8
 8008b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8008b36:	4649      	mov	r1, r9
 8008b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8008b3c:	f04f 0200 	mov.w	r2, #0
 8008b40:	f04f 0300 	mov.w	r3, #0
 8008b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008b50:	ebb2 040a 	subs.w	r4, r2, sl
 8008b54:	eb63 050b 	sbc.w	r5, r3, fp
 8008b58:	f04f 0200 	mov.w	r2, #0
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	00eb      	lsls	r3, r5, #3
 8008b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b66:	00e2      	lsls	r2, r4, #3
 8008b68:	4614      	mov	r4, r2
 8008b6a:	461d      	mov	r5, r3
 8008b6c:	4643      	mov	r3, r8
 8008b6e:	18e3      	adds	r3, r4, r3
 8008b70:	603b      	str	r3, [r7, #0]
 8008b72:	464b      	mov	r3, r9
 8008b74:	eb45 0303 	adc.w	r3, r5, r3
 8008b78:	607b      	str	r3, [r7, #4]
 8008b7a:	f04f 0200 	mov.w	r2, #0
 8008b7e:	f04f 0300 	mov.w	r3, #0
 8008b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008b86:	4629      	mov	r1, r5
 8008b88:	028b      	lsls	r3, r1, #10
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008b90:	4621      	mov	r1, r4
 8008b92:	028a      	lsls	r2, r1, #10
 8008b94:	4610      	mov	r0, r2
 8008b96:	4619      	mov	r1, r3
 8008b98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	61bb      	str	r3, [r7, #24]
 8008b9e:	61fa      	str	r2, [r7, #28]
 8008ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ba4:	f7f8 f878 	bl	8000c98 <__aeabi_uldivmod>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	460b      	mov	r3, r1
 8008bac:	4613      	mov	r3, r2
 8008bae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008bb0:	4b0b      	ldr	r3, [pc, #44]	; (8008be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	0c1b      	lsrs	r3, r3, #16
 8008bb6:	f003 0303 	and.w	r3, r3, #3
 8008bba:	3301      	adds	r3, #1
 8008bbc:	005b      	lsls	r3, r3, #1
 8008bbe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008bc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bca:	e002      	b.n	8008bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008bcc:	4b05      	ldr	r3, [pc, #20]	; (8008be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8008bce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3750      	adds	r7, #80	; 0x50
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bde:	bf00      	nop
 8008be0:	40023800 	.word	0x40023800
 8008be4:	00f42400 	.word	0x00f42400
 8008be8:	007a1200 	.word	0x007a1200

08008bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bf0:	4b03      	ldr	r3, [pc, #12]	; (8008c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	20000008 	.word	0x20000008

08008c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c08:	f7ff fff0 	bl	8008bec <HAL_RCC_GetHCLKFreq>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	4b05      	ldr	r3, [pc, #20]	; (8008c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c10:	689b      	ldr	r3, [r3, #8]
 8008c12:	0a9b      	lsrs	r3, r3, #10
 8008c14:	f003 0307 	and.w	r3, r3, #7
 8008c18:	4903      	ldr	r1, [pc, #12]	; (8008c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c1a:	5ccb      	ldrb	r3, [r1, r3]
 8008c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	40023800 	.word	0x40023800
 8008c28:	08016478 	.word	0x08016478

08008c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c30:	f7ff ffdc 	bl	8008bec <HAL_RCC_GetHCLKFreq>
 8008c34:	4602      	mov	r2, r0
 8008c36:	4b05      	ldr	r3, [pc, #20]	; (8008c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	0b5b      	lsrs	r3, r3, #13
 8008c3c:	f003 0307 	and.w	r3, r3, #7
 8008c40:	4903      	ldr	r1, [pc, #12]	; (8008c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c42:	5ccb      	ldrb	r3, [r1, r3]
 8008c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	40023800 	.word	0x40023800
 8008c50:	08016478 	.word	0x08016478

08008c54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	220f      	movs	r2, #15
 8008c62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c64:	4b12      	ldr	r3, [pc, #72]	; (8008cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8008c66:	689b      	ldr	r3, [r3, #8]
 8008c68:	f003 0203 	and.w	r2, r3, #3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008c70:	4b0f      	ldr	r3, [pc, #60]	; (8008cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008c7c:	4b0c      	ldr	r3, [pc, #48]	; (8008cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008c88:	4b09      	ldr	r3, [pc, #36]	; (8008cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	08db      	lsrs	r3, r3, #3
 8008c8e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c96:	4b07      	ldr	r3, [pc, #28]	; (8008cb4 <HAL_RCC_GetClockConfig+0x60>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 0207 	and.w	r2, r3, #7
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	601a      	str	r2, [r3, #0]
}
 8008ca2:	bf00      	nop
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	40023800 	.word	0x40023800
 8008cb4:	40023c00 	.word	0x40023c00

08008cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d105      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d038      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ce0:	4b68      	ldr	r3, [pc, #416]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ce6:	f7fd f993 	bl	8006010 <HAL_GetTick>
 8008cea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cec:	e008      	b.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008cee:	f7fd f98f 	bl	8006010 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e0bd      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d00:	4b61      	ldr	r3, [pc, #388]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d1f0      	bne.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	019b      	lsls	r3, r3, #6
 8008d16:	431a      	orrs	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	071b      	lsls	r3, r3, #28
 8008d1e:	495a      	ldr	r1, [pc, #360]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008d26:	4b57      	ldr	r3, [pc, #348]	; (8008e84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008d28:	2201      	movs	r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d2c:	f7fd f970 	bl	8006010 <HAL_GetTick>
 8008d30:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d32:	e008      	b.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008d34:	f7fd f96c 	bl	8006010 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d901      	bls.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e09a      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008d46:	4b50      	ldr	r3, [pc, #320]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d0f0      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 8083 	beq.w	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d60:	2300      	movs	r3, #0
 8008d62:	60fb      	str	r3, [r7, #12]
 8008d64:	4b48      	ldr	r3, [pc, #288]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d68:	4a47      	ldr	r2, [pc, #284]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8008d70:	4b45      	ldr	r3, [pc, #276]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008d7c:	4b43      	ldr	r3, [pc, #268]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a42      	ldr	r2, [pc, #264]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d86:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d88:	f7fd f942 	bl	8006010 <HAL_GetTick>
 8008d8c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008d8e:	e008      	b.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008d90:	f7fd f93e 	bl	8006010 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e06c      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008da2:	4b3a      	ldr	r3, [pc, #232]	; (8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d0f0      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008dae:	4b36      	ldr	r3, [pc, #216]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008db6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d02f      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d028      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008dcc:	4b2e      	ldr	r3, [pc, #184]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dd4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008dd6:	4b2e      	ldr	r3, [pc, #184]	; (8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ddc:	4b2c      	ldr	r3, [pc, #176]	; (8008e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008de2:	4a29      	ldr	r2, [pc, #164]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008de8:	4b27      	ldr	r3, [pc, #156]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d114      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008df4:	f7fd f90c 	bl	8006010 <HAL_GetTick>
 8008df8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dfa:	e00a      	b.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dfc:	f7fd f908 	bl	8006010 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e034      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e12:	4b1d      	ldr	r3, [pc, #116]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e16:	f003 0302 	and.w	r3, r3, #2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0ee      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e2a:	d10d      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8008e2c:	4b16      	ldr	r3, [pc, #88]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008e3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e40:	4911      	ldr	r1, [pc, #68]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	608b      	str	r3, [r1, #8]
 8008e46:	e005      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008e48:	4b0f      	ldr	r3, [pc, #60]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	4a0e      	ldr	r2, [pc, #56]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008e52:	6093      	str	r3, [r2, #8]
 8008e54:	4b0c      	ldr	r3, [pc, #48]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e60:	4909      	ldr	r1, [pc, #36]	; (8008e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e62:	4313      	orrs	r3, r2
 8008e64:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0308 	and.w	r3, r3, #8
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d003      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	7d1a      	ldrb	r2, [r3, #20]
 8008e76:	4b07      	ldr	r3, [pc, #28]	; (8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8008e78:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	42470068 	.word	0x42470068
 8008e88:	40023800 	.word	0x40023800
 8008e8c:	40007000 	.word	0x40007000
 8008e90:	42470e40 	.word	0x42470e40
 8008e94:	424711e0 	.word	0x424711e0

08008e98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e066      	b.n	8008f7c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	7f5b      	ldrb	r3, [r3, #29]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d105      	bne.n	8008ec4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f7fc fcc2 	bl	8005848 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	22ca      	movs	r2, #202	; 0xca
 8008ed0:	625a      	str	r2, [r3, #36]	; 0x24
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2253      	movs	r2, #83	; 0x53
 8008ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fb6f 	bl	80095be <RTC_EnterInitMode>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008ee4:	7bfb      	ldrb	r3, [r7, #15]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d12c      	bne.n	8008f44 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	6812      	ldr	r2, [r2, #0]
 8008ef4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008efc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6899      	ldr	r1, [r3, #8]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	691b      	ldr	r3, [r3, #16]
 8008f0c:	431a      	orrs	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	695b      	ldr	r3, [r3, #20]
 8008f12:	431a      	orrs	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	430a      	orrs	r2, r1
 8008f1a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	68d2      	ldr	r2, [r2, #12]
 8008f24:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	6919      	ldr	r1, [r3, #16]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	041a      	lsls	r2, r3, #16
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fb76 	bl	800962c <RTC_ExitInitMode>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d113      	bne.n	8008f72 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008f58:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	699a      	ldr	r2, [r3, #24]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	22ff      	movs	r2, #255	; 0xff
 8008f78:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008f84:	b590      	push	{r4, r7, lr}
 8008f86:	b087      	sub	sp, #28
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008f90:	2300      	movs	r3, #0
 8008f92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	7f1b      	ldrb	r3, [r3, #28]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_RTC_SetTime+0x1c>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e087      	b.n	80090b0 <HAL_RTC_SetTime+0x12c>
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2202      	movs	r2, #2
 8008faa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d126      	bne.n	8009000 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d102      	bne.n	8008fc6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fb53 	bl	8009676 <RTC_ByteToBcd2>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f000 fb4c 	bl	8009676 <RTC_ByteToBcd2>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008fe2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	789b      	ldrb	r3, [r3, #2]
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fb44 	bl	8009676 <RTC_ByteToBcd2>
 8008fee:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ff0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	78db      	ldrb	r3, [r3, #3]
 8008ff8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	617b      	str	r3, [r7, #20]
 8008ffe:	e018      	b.n	8009032 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	d102      	bne.n	8009014 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2200      	movs	r2, #0
 8009012:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	785b      	ldrb	r3, [r3, #1]
 800901e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009020:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009022:	68ba      	ldr	r2, [r7, #8]
 8009024:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009026:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	78db      	ldrb	r3, [r3, #3]
 800902c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800902e:	4313      	orrs	r3, r2
 8009030:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	22ca      	movs	r2, #202	; 0xca
 8009038:	625a      	str	r2, [r3, #36]	; 0x24
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2253      	movs	r2, #83	; 0x53
 8009040:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	f000 fabb 	bl	80095be <RTC_EnterInitMode>
 8009048:	4603      	mov	r3, r0
 800904a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800904c:	7cfb      	ldrb	r3, [r7, #19]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d120      	bne.n	8009094 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800905c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009060:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009070:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6899      	ldr	r1, [r3, #8]
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	431a      	orrs	r2, r3
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 face 	bl	800962c <RTC_ExitInitMode>
 8009090:	4603      	mov	r3, r0
 8009092:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009094:	7cfb      	ldrb	r3, [r7, #19]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d102      	bne.n	80090a0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	22ff      	movs	r2, #255	; 0xff
 80090a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	771a      	strb	r2, [r3, #28]

  return status;
 80090ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	371c      	adds	r7, #28
 80090b4:	46bd      	mov	sp, r7
 80090b6:	bd90      	pop	{r4, r7, pc}

080090b8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80090c4:	2300      	movs	r3, #0
 80090c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80090ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80090ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	0c1b      	lsrs	r3, r3, #16
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	0a1b      	lsrs	r3, r3, #8
 8009104:	b2db      	uxtb	r3, r3
 8009106:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800910a:	b2da      	uxtb	r2, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009118:	b2da      	uxtb	r2, r3
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	0d9b      	lsrs	r3, r3, #22
 8009122:	b2db      	uxtb	r3, r3
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	b2da      	uxtb	r2, r3
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d11a      	bne.n	800916a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f000 fab9 	bl	80096b0 <RTC_Bcd2ToByte>
 800913e:	4603      	mov	r3, r0
 8009140:	461a      	mov	r2, r3
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fab0 	bl	80096b0 <RTC_Bcd2ToByte>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	789b      	ldrb	r3, [r3, #2]
 800915c:	4618      	mov	r0, r3
 800915e:	f000 faa7 	bl	80096b0 <RTC_Bcd2ToByte>
 8009162:	4603      	mov	r3, r0
 8009164:	461a      	mov	r2, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3718      	adds	r7, #24
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009174:	b590      	push	{r4, r7, lr}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	7f1b      	ldrb	r3, [r3, #28]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d101      	bne.n	8009190 <HAL_RTC_SetDate+0x1c>
 800918c:	2302      	movs	r3, #2
 800918e:	e071      	b.n	8009274 <HAL_RTC_SetDate+0x100>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2201      	movs	r2, #1
 8009194:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2202      	movs	r2, #2
 800919a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10e      	bne.n	80091c0 <HAL_RTC_SetDate+0x4c>
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	f003 0310 	and.w	r3, r3, #16
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d008      	beq.n	80091c0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	785b      	ldrb	r3, [r3, #1]
 80091b2:	f023 0310 	bic.w	r3, r3, #16
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	330a      	adds	r3, #10
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d11c      	bne.n	8009200 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	78db      	ldrb	r3, [r3, #3]
 80091ca:	4618      	mov	r0, r3
 80091cc:	f000 fa53 	bl	8009676 <RTC_ByteToBcd2>
 80091d0:	4603      	mov	r3, r0
 80091d2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	785b      	ldrb	r3, [r3, #1]
 80091d8:	4618      	mov	r0, r3
 80091da:	f000 fa4c 	bl	8009676 <RTC_ByteToBcd2>
 80091de:	4603      	mov	r3, r0
 80091e0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091e2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	789b      	ldrb	r3, [r3, #2]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f000 fa44 	bl	8009676 <RTC_ByteToBcd2>
 80091ee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80091f0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80091fa:	4313      	orrs	r3, r2
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	e00e      	b.n	800921e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	78db      	ldrb	r3, [r3, #3]
 8009204:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	785b      	ldrb	r3, [r3, #1]
 800920a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800920c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009212:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800921a:	4313      	orrs	r3, r2
 800921c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	22ca      	movs	r2, #202	; 0xca
 8009224:	625a      	str	r2, [r3, #36]	; 0x24
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	2253      	movs	r2, #83	; 0x53
 800922c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800922e:	68f8      	ldr	r0, [r7, #12]
 8009230:	f000 f9c5 	bl	80095be <RTC_EnterInitMode>
 8009234:	4603      	mov	r3, r0
 8009236:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009238:	7cfb      	ldrb	r3, [r7, #19]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10c      	bne.n	8009258 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009248:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800924c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800924e:	68f8      	ldr	r0, [r7, #12]
 8009250:	f000 f9ec 	bl	800962c <RTC_ExitInitMode>
 8009254:	4603      	mov	r3, r0
 8009256:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009258:	7cfb      	ldrb	r3, [r7, #19]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d102      	bne.n	8009264 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	22ff      	movs	r2, #255	; 0xff
 800926a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	771a      	strb	r2, [r3, #28]

  return status;
 8009272:	7cfb      	ldrb	r3, [r7, #19]
}
 8009274:	4618      	mov	r0, r3
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	bd90      	pop	{r4, r7, pc}

0800927c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b086      	sub	sp, #24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009296:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800929a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	0c1b      	lsrs	r3, r3, #16
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	0a1b      	lsrs	r3, r3, #8
 80092aa:	b2db      	uxtb	r3, r3
 80092ac:	f003 031f 	and.w	r3, r3, #31
 80092b0:	b2da      	uxtb	r2, r3
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	0b5b      	lsrs	r3, r3, #13
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	f003 0307 	and.w	r3, r3, #7
 80092ce:	b2da      	uxtb	r2, r3
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d11a      	bne.n	8009310 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	78db      	ldrb	r3, [r3, #3]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 f9e6 	bl	80096b0 <RTC_Bcd2ToByte>
 80092e4:	4603      	mov	r3, r0
 80092e6:	461a      	mov	r2, r3
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	785b      	ldrb	r3, [r3, #1]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f000 f9dd 	bl	80096b0 <RTC_Bcd2ToByte>
 80092f6:	4603      	mov	r3, r0
 80092f8:	461a      	mov	r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	789b      	ldrb	r3, [r3, #2]
 8009302:	4618      	mov	r0, r3
 8009304:	f000 f9d4 	bl	80096b0 <RTC_Bcd2ToByte>
 8009308:	4603      	mov	r3, r0
 800930a:	461a      	mov	r2, r3
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800931a:	b590      	push	{r4, r7, lr}
 800931c:	b089      	sub	sp, #36	; 0x24
 800931e:	af00      	add	r7, sp, #0
 8009320:	60f8      	str	r0, [r7, #12]
 8009322:	60b9      	str	r1, [r7, #8]
 8009324:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009326:	2300      	movs	r3, #0
 8009328:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800932a:	2300      	movs	r3, #0
 800932c:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800932e:	2300      	movs	r3, #0
 8009330:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	7f1b      	ldrb	r3, [r3, #28]
 8009336:	2b01      	cmp	r3, #1
 8009338:	d101      	bne.n	800933e <HAL_RTC_SetAlarm+0x24>
 800933a:	2302      	movs	r3, #2
 800933c:	e113      	b.n	8009566 <HAL_RTC_SetAlarm+0x24c>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2201      	movs	r2, #1
 8009342:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2202      	movs	r2, #2
 8009348:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d137      	bne.n	80093c0 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935a:	2b00      	cmp	r3, #0
 800935c:	d102      	bne.n	8009364 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	2200      	movs	r2, #0
 8009362:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	4618      	mov	r0, r3
 800936a:	f000 f984 	bl	8009676 <RTC_ByteToBcd2>
 800936e:	4603      	mov	r3, r0
 8009370:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	785b      	ldrb	r3, [r3, #1]
 8009376:	4618      	mov	r0, r3
 8009378:	f000 f97d 	bl	8009676 <RTC_ByteToBcd2>
 800937c:	4603      	mov	r3, r0
 800937e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009380:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	789b      	ldrb	r3, [r3, #2]
 8009386:	4618      	mov	r0, r3
 8009388:	f000 f975 	bl	8009676 <RTC_ByteToBcd2>
 800938c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800938e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	78db      	ldrb	r3, [r3, #3]
 8009396:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009398:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 f967 	bl	8009676 <RTC_ByteToBcd2>
 80093a8:	4603      	mov	r3, r0
 80093aa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80093ac:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80093b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80093ba:	4313      	orrs	r3, r2
 80093bc:	61fb      	str	r3, [r7, #28]
 80093be:	e023      	b.n	8009408 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d102      	bne.n	80093d4 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2200      	movs	r2, #0
 80093d2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	785b      	ldrb	r3, [r3, #1]
 80093de:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80093e0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80093e6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	78db      	ldrb	r3, [r3, #3]
 80093ec:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80093ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093f6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80093f8:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80093fe:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009404:	4313      	orrs	r3, r2
 8009406:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009410:	4313      	orrs	r3, r2
 8009412:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	22ca      	movs	r2, #202	; 0xca
 800941a:	625a      	str	r2, [r3, #36]	; 0x24
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2253      	movs	r2, #83	; 0x53
 8009422:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800942c:	d148      	bne.n	80094c0 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689a      	ldr	r2, [r3, #8]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800943c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800944c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	b2da      	uxtb	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800945e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009460:	f7fc fdd6 	bl	8006010 <HAL_GetTick>
 8009464:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009466:	e013      	b.n	8009490 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009468:	f7fc fdd2 	bl	8006010 <HAL_GetTick>
 800946c:	4602      	mov	r2, r0
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009476:	d90b      	bls.n	8009490 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	22ff      	movs	r2, #255	; 0xff
 800947e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2203      	movs	r2, #3
 8009484:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e06a      	b.n	8009566 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0e4      	beq.n	8009468 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	69fa      	ldr	r2, [r7, #28]
 80094a4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	697a      	ldr	r2, [r7, #20]
 80094ac:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094bc:	609a      	str	r2, [r3, #8]
 80094be:	e047      	b.n	8009550 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689a      	ldr	r2, [r3, #8]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80094ce:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	689a      	ldr	r2, [r3, #8]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094de:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	b2da      	uxtb	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f462 7220 	orn	r2, r2, #640	; 0x280
 80094f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80094f2:	f7fc fd8d 	bl	8006010 <HAL_GetTick>
 80094f6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80094f8:	e013      	b.n	8009522 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094fa:	f7fc fd89 	bl	8006010 <HAL_GetTick>
 80094fe:	4602      	mov	r2, r0
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	1ad3      	subs	r3, r2, r3
 8009504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009508:	d90b      	bls.n	8009522 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	22ff      	movs	r2, #255	; 0xff
 8009510:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2203      	movs	r2, #3
 8009516:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2200      	movs	r2, #0
 800951c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e021      	b.n	8009566 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0e4      	beq.n	80094fa <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69fa      	ldr	r2, [r7, #28]
 8009536:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	689a      	ldr	r2, [r3, #8]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	22ff      	movs	r2, #255	; 0xff
 8009556:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3724      	adds	r7, #36	; 0x24
 800956a:	46bd      	mov	sp, r7
 800956c:	bd90      	pop	{r4, r7, pc}

0800956e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b084      	sub	sp, #16
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68da      	ldr	r2, [r3, #12]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009588:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800958a:	f7fc fd41 	bl	8006010 <HAL_GetTick>
 800958e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009590:	e009      	b.n	80095a6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009592:	f7fc fd3d 	bl	8006010 <HAL_GetTick>
 8009596:	4602      	mov	r2, r0
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095a0:	d901      	bls.n	80095a6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e007      	b.n	80095b6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68db      	ldr	r3, [r3, #12]
 80095ac:	f003 0320 	and.w	r3, r3, #32
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d0ee      	beq.n	8009592 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80095ca:	2300      	movs	r3, #0
 80095cc:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d122      	bne.n	8009622 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80095ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095ec:	f7fc fd10 	bl	8006010 <HAL_GetTick>
 80095f0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80095f2:	e00c      	b.n	800960e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80095f4:	f7fc fd0c 	bl	8006010 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009602:	d904      	bls.n	800960e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2204      	movs	r2, #4
 8009608:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009618:	2b00      	cmp	r3, #0
 800961a:	d102      	bne.n	8009622 <RTC_EnterInitMode+0x64>
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	2b01      	cmp	r3, #1
 8009620:	d1e8      	bne.n	80095f4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009622:	7bfb      	ldrb	r3, [r7, #15]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009634:	2300      	movs	r3, #0
 8009636:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68da      	ldr	r2, [r3, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009646:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f003 0320 	and.w	r3, r3, #32
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff ff89 	bl	800956e <HAL_RTC_WaitForSynchro>
 800965c:	4603      	mov	r3, r0
 800965e:	2b00      	cmp	r3, #0
 8009660:	d004      	beq.n	800966c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2204      	movs	r2, #4
 8009666:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800966c:	7bfb      	ldrb	r3, [r7, #15]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	4603      	mov	r3, r0
 800967e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009684:	e005      	b.n	8009692 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	3301      	adds	r3, #1
 800968a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	3b0a      	subs	r3, #10
 8009690:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009692:	79fb      	ldrb	r3, [r7, #7]
 8009694:	2b09      	cmp	r3, #9
 8009696:	d8f6      	bhi.n	8009686 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009698:	7bfb      	ldrb	r3, [r7, #15]
 800969a:	011b      	lsls	r3, r3, #4
 800969c:	b2da      	uxtb	r2, r3
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	b2db      	uxtb	r3, r3
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	3714      	adds	r7, #20
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	4603      	mov	r3, r0
 80096b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80096ba:	2300      	movs	r3, #0
 80096bc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	091b      	lsrs	r3, r3, #4
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	461a      	mov	r2, r3
 80096c6:	0092      	lsls	r2, r2, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	005b      	lsls	r3, r3, #1
 80096cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	f003 030f 	and.w	r3, r3, #15
 80096d4:	b2da      	uxtb	r2, r3
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
 80096d8:	4413      	add	r3, r2
 80096da:	b2db      	uxtb	r3, r3
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e07b      	b.n	80097f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d108      	bne.n	8009714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800970a:	d009      	beq.n	8009720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	61da      	str	r2, [r3, #28]
 8009712:	e005      	b.n	8009720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2200      	movs	r2, #0
 800971e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b00      	cmp	r3, #0
 8009730:	d106      	bne.n	8009740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7fc f8e6 	bl	800590c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2202      	movs	r2, #2
 8009744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009768:	431a      	orrs	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009772:	431a      	orrs	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	f003 0302 	and.w	r3, r3, #2
 800977c:	431a      	orrs	r2, r3
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695b      	ldr	r3, [r3, #20]
 8009782:	f003 0301 	and.w	r3, r3, #1
 8009786:	431a      	orrs	r2, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009790:	431a      	orrs	r2, r3
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800979a:	431a      	orrs	r2, r3
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a1b      	ldr	r3, [r3, #32]
 80097a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097a4:	ea42 0103 	orr.w	r1, r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	430a      	orrs	r2, r1
 80097b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	0c1b      	lsrs	r3, r3, #16
 80097be:	f003 0104 	and.w	r1, r3, #4
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	f003 0210 	and.w	r2, r3, #16
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69da      	ldr	r2, [r3, #28]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b08c      	sub	sp, #48	; 0x30
 80097fe:	af00      	add	r7, sp, #0
 8009800:	60f8      	str	r0, [r7, #12]
 8009802:	60b9      	str	r1, [r7, #8]
 8009804:	607a      	str	r2, [r7, #4]
 8009806:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009808:	2301      	movs	r3, #1
 800980a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009818:	2b01      	cmp	r3, #1
 800981a:	d101      	bne.n	8009820 <HAL_SPI_TransmitReceive+0x26>
 800981c:	2302      	movs	r3, #2
 800981e:	e18a      	b.n	8009b36 <HAL_SPI_TransmitReceive+0x33c>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009828:	f7fc fbf2 	bl	8006010 <HAL_GetTick>
 800982c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800983e:	887b      	ldrh	r3, [r7, #2]
 8009840:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009846:	2b01      	cmp	r3, #1
 8009848:	d00f      	beq.n	800986a <HAL_SPI_TransmitReceive+0x70>
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009850:	d107      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d103      	bne.n	8009862 <HAL_SPI_TransmitReceive+0x68>
 800985a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800985e:	2b04      	cmp	r3, #4
 8009860:	d003      	beq.n	800986a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009862:	2302      	movs	r3, #2
 8009864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009868:	e15b      	b.n	8009b22 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d005      	beq.n	800987c <HAL_SPI_TransmitReceive+0x82>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d002      	beq.n	800987c <HAL_SPI_TransmitReceive+0x82>
 8009876:	887b      	ldrh	r3, [r7, #2]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d103      	bne.n	8009884 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009882:	e14e      	b.n	8009b22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b04      	cmp	r3, #4
 800988e:	d003      	beq.n	8009898 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2205      	movs	r2, #5
 8009894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2200      	movs	r2, #0
 800989c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	887a      	ldrh	r2, [r7, #2]
 80098a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	887a      	ldrh	r2, [r7, #2]
 80098ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	887a      	ldrh	r2, [r7, #2]
 80098ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	887a      	ldrh	r2, [r7, #2]
 80098c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d8:	2b40      	cmp	r3, #64	; 0x40
 80098da:	d007      	beq.n	80098ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098f4:	d178      	bne.n	80099e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <HAL_SPI_TransmitReceive+0x10a>
 80098fe:	8b7b      	ldrh	r3, [r7, #26]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d166      	bne.n	80099d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009908:	881a      	ldrh	r2, [r3, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009914:	1c9a      	adds	r2, r3, #2
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800991e:	b29b      	uxth	r3, r3
 8009920:	3b01      	subs	r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009928:	e053      	b.n	80099d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b02      	cmp	r3, #2
 8009936:	d11b      	bne.n	8009970 <HAL_SPI_TransmitReceive+0x176>
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d016      	beq.n	8009970 <HAL_SPI_TransmitReceive+0x176>
 8009942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009944:	2b01      	cmp	r3, #1
 8009946:	d113      	bne.n	8009970 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800994c:	881a      	ldrh	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009958:	1c9a      	adds	r2, r3, #2
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009962:	b29b      	uxth	r3, r3
 8009964:	3b01      	subs	r3, #1
 8009966:	b29a      	uxth	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800996c:	2300      	movs	r3, #0
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b01      	cmp	r3, #1
 800997c:	d119      	bne.n	80099b2 <HAL_SPI_TransmitReceive+0x1b8>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009982:	b29b      	uxth	r3, r3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d014      	beq.n	80099b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	68da      	ldr	r2, [r3, #12]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009992:	b292      	uxth	r2, r2
 8009994:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	1c9a      	adds	r2, r3, #2
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	3b01      	subs	r3, #1
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80099ae:	2301      	movs	r3, #1
 80099b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80099b2:	f7fc fb2d 	bl	8006010 <HAL_GetTick>
 80099b6:	4602      	mov	r2, r0
 80099b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ba:	1ad3      	subs	r3, r2, r3
 80099bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099be:	429a      	cmp	r2, r3
 80099c0:	d807      	bhi.n	80099d2 <HAL_SPI_TransmitReceive+0x1d8>
 80099c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c8:	d003      	beq.n	80099d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80099d0:	e0a7      	b.n	8009b22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1a6      	bne.n	800992a <HAL_SPI_TransmitReceive+0x130>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1a1      	bne.n	800992a <HAL_SPI_TransmitReceive+0x130>
 80099e6:	e07c      	b.n	8009ae2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d002      	beq.n	80099f6 <HAL_SPI_TransmitReceive+0x1fc>
 80099f0:	8b7b      	ldrh	r3, [r7, #26]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d16b      	bne.n	8009ace <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	330c      	adds	r3, #12
 8009a00:	7812      	ldrb	r2, [r2, #0]
 8009a02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a1c:	e057      	b.n	8009ace <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d11c      	bne.n	8009a66 <HAL_SPI_TransmitReceive+0x26c>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d017      	beq.n	8009a66 <HAL_SPI_TransmitReceive+0x26c>
 8009a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d114      	bne.n	8009a66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	330c      	adds	r3, #12
 8009a46:	7812      	ldrb	r2, [r2, #0]
 8009a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	3b01      	subs	r3, #1
 8009a5c:	b29a      	uxth	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a62:	2300      	movs	r3, #0
 8009a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d119      	bne.n	8009aa8 <HAL_SPI_TransmitReceive+0x2ae>
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d014      	beq.n	8009aa8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68da      	ldr	r2, [r3, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a88:	b2d2      	uxtb	r2, r2
 8009a8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a90:	1c5a      	adds	r2, r3, #1
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009aa8:	f7fc fab2 	bl	8006010 <HAL_GetTick>
 8009aac:	4602      	mov	r2, r0
 8009aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d803      	bhi.n	8009ac0 <HAL_SPI_TransmitReceive+0x2c6>
 8009ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abe:	d102      	bne.n	8009ac6 <HAL_SPI_TransmitReceive+0x2cc>
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d103      	bne.n	8009ace <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009acc:	e029      	b.n	8009b22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d1a2      	bne.n	8009a1e <HAL_SPI_TransmitReceive+0x224>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d19d      	bne.n	8009a1e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 f8b2 	bl	8009c50 <SPI_EndRxTxTransaction>
 8009aec:	4603      	mov	r3, r0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d006      	beq.n	8009b00 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2220      	movs	r2, #32
 8009afc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009afe:	e010      	b.n	8009b22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d10b      	bne.n	8009b20 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b08:	2300      	movs	r3, #0
 8009b0a:	617b      	str	r3, [r7, #20]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	617b      	str	r3, [r7, #20]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	e000      	b.n	8009b22 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009b20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3730      	adds	r7, #48	; 0x30
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b088      	sub	sp, #32
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b50:	f7fc fa5e 	bl	8006010 <HAL_GetTick>
 8009b54:	4602      	mov	r2, r0
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	1a9b      	subs	r3, r3, r2
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b60:	f7fc fa56 	bl	8006010 <HAL_GetTick>
 8009b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b66:	4b39      	ldr	r3, [pc, #228]	; (8009c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	015b      	lsls	r3, r3, #5
 8009b6c:	0d1b      	lsrs	r3, r3, #20
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	fb02 f303 	mul.w	r3, r2, r3
 8009b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b76:	e054      	b.n	8009c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7e:	d050      	beq.n	8009c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b80:	f7fc fa46 	bl	8006010 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d902      	bls.n	8009b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d13d      	bne.n	8009c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009bae:	d111      	bne.n	8009bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009bb8:	d004      	beq.n	8009bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc2:	d107      	bne.n	8009bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bdc:	d10f      	bne.n	8009bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	681a      	ldr	r2, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bec:	601a      	str	r2, [r3, #0]
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2201      	movs	r2, #1
 8009c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009c0e:	2303      	movs	r3, #3
 8009c10:	e017      	b.n	8009c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	3b01      	subs	r3, #1
 8009c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689a      	ldr	r2, [r3, #8]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	bf0c      	ite	eq
 8009c32:	2301      	moveq	r3, #1
 8009c34:	2300      	movne	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d19b      	bne.n	8009b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3720      	adds	r7, #32
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000008 	.word	0x20000008

08009c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b088      	sub	sp, #32
 8009c54:	af02      	add	r7, sp, #8
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009c5c:	4b1b      	ldr	r3, [pc, #108]	; (8009ccc <SPI_EndRxTxTransaction+0x7c>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a1b      	ldr	r2, [pc, #108]	; (8009cd0 <SPI_EndRxTxTransaction+0x80>)
 8009c62:	fba2 2303 	umull	r2, r3, r2, r3
 8009c66:	0d5b      	lsrs	r3, r3, #21
 8009c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009c6c:	fb02 f303 	mul.w	r3, r2, r3
 8009c70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c7a:	d112      	bne.n	8009ca2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2200      	movs	r2, #0
 8009c84:	2180      	movs	r1, #128	; 0x80
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f7ff ff5a 	bl	8009b40 <SPI_WaitFlagStateUntilTimeout>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d016      	beq.n	8009cc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c96:	f043 0220 	orr.w	r2, r3, #32
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e00f      	b.n	8009cc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00a      	beq.n	8009cbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb8:	2b80      	cmp	r3, #128	; 0x80
 8009cba:	d0f2      	beq.n	8009ca2 <SPI_EndRxTxTransaction+0x52>
 8009cbc:	e000      	b.n	8009cc0 <SPI_EndRxTxTransaction+0x70>
        break;
 8009cbe:	bf00      	nop
  }

  return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3718      	adds	r7, #24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000008 	.word	0x20000008
 8009cd0:	165e9f81 	.word	0x165e9f81

08009cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e041      	b.n	8009d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d106      	bne.n	8009d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7fc f85a 	bl	8005db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2202      	movs	r2, #2
 8009d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f000 fc54 	bl	800a5c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3708      	adds	r7, #8
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
	...

08009d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d001      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e044      	b.n	8009e16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2202      	movs	r2, #2
 8009d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	68da      	ldr	r2, [r3, #12]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f042 0201 	orr.w	r2, r2, #1
 8009da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a1e      	ldr	r2, [pc, #120]	; (8009e24 <HAL_TIM_Base_Start_IT+0xb0>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d018      	beq.n	8009de0 <HAL_TIM_Base_Start_IT+0x6c>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009db6:	d013      	beq.n	8009de0 <HAL_TIM_Base_Start_IT+0x6c>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1a      	ldr	r2, [pc, #104]	; (8009e28 <HAL_TIM_Base_Start_IT+0xb4>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d00e      	beq.n	8009de0 <HAL_TIM_Base_Start_IT+0x6c>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a19      	ldr	r2, [pc, #100]	; (8009e2c <HAL_TIM_Base_Start_IT+0xb8>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d009      	beq.n	8009de0 <HAL_TIM_Base_Start_IT+0x6c>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4a17      	ldr	r2, [pc, #92]	; (8009e30 <HAL_TIM_Base_Start_IT+0xbc>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d004      	beq.n	8009de0 <HAL_TIM_Base_Start_IT+0x6c>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a16      	ldr	r2, [pc, #88]	; (8009e34 <HAL_TIM_Base_Start_IT+0xc0>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d111      	bne.n	8009e04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b06      	cmp	r3, #6
 8009df0:	d010      	beq.n	8009e14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f042 0201 	orr.w	r2, r2, #1
 8009e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e02:	e007      	b.n	8009e14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f042 0201 	orr.w	r2, r2, #1
 8009e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3714      	adds	r7, #20
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr
 8009e22:	bf00      	nop
 8009e24:	40010000 	.word	0x40010000
 8009e28:	40000400 	.word	0x40000400
 8009e2c:	40000800 	.word	0x40000800
 8009e30:	40000c00 	.word	0x40000c00
 8009e34:	40014000 	.word	0x40014000

08009e38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e041      	b.n	8009ece <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d106      	bne.n	8009e64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f000 f839 	bl	8009ed6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4619      	mov	r1, r3
 8009e76:	4610      	mov	r0, r2
 8009e78:	f000 fba2 	bl	800a5c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2201      	movs	r2, #1
 8009e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009ede:	bf00      	nop
 8009ee0:	370c      	adds	r7, #12
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
	...

08009eec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d109      	bne.n	8009f10 <HAL_TIM_PWM_Start+0x24>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	bf14      	ite	ne
 8009f08:	2301      	movne	r3, #1
 8009f0a:	2300      	moveq	r3, #0
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	e022      	b.n	8009f56 <HAL_TIM_PWM_Start+0x6a>
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d109      	bne.n	8009f2a <HAL_TIM_PWM_Start+0x3e>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f1c:	b2db      	uxtb	r3, r3
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	bf14      	ite	ne
 8009f22:	2301      	movne	r3, #1
 8009f24:	2300      	moveq	r3, #0
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	e015      	b.n	8009f56 <HAL_TIM_PWM_Start+0x6a>
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d109      	bne.n	8009f44 <HAL_TIM_PWM_Start+0x58>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	bf14      	ite	ne
 8009f3c:	2301      	movne	r3, #1
 8009f3e:	2300      	moveq	r3, #0
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	e008      	b.n	8009f56 <HAL_TIM_PWM_Start+0x6a>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	bf14      	ite	ne
 8009f50:	2301      	movne	r3, #1
 8009f52:	2300      	moveq	r3, #0
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e068      	b.n	800a030 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d104      	bne.n	8009f6e <HAL_TIM_PWM_Start+0x82>
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2202      	movs	r2, #2
 8009f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f6c:	e013      	b.n	8009f96 <HAL_TIM_PWM_Start+0xaa>
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	d104      	bne.n	8009f7e <HAL_TIM_PWM_Start+0x92>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f7c:	e00b      	b.n	8009f96 <HAL_TIM_PWM_Start+0xaa>
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d104      	bne.n	8009f8e <HAL_TIM_PWM_Start+0xa2>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2202      	movs	r2, #2
 8009f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f8c:	e003      	b.n	8009f96 <HAL_TIM_PWM_Start+0xaa>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2202      	movs	r2, #2
 8009f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	6839      	ldr	r1, [r7, #0]
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f000 fdb4 	bl	800ab0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a23      	ldr	r2, [pc, #140]	; (800a038 <HAL_TIM_PWM_Start+0x14c>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d107      	bne.n	8009fbe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a1d      	ldr	r2, [pc, #116]	; (800a038 <HAL_TIM_PWM_Start+0x14c>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d018      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x10e>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fd0:	d013      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x10e>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a19      	ldr	r2, [pc, #100]	; (800a03c <HAL_TIM_PWM_Start+0x150>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d00e      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x10e>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a17      	ldr	r2, [pc, #92]	; (800a040 <HAL_TIM_PWM_Start+0x154>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d009      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x10e>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a16      	ldr	r2, [pc, #88]	; (800a044 <HAL_TIM_PWM_Start+0x158>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d004      	beq.n	8009ffa <HAL_TIM_PWM_Start+0x10e>
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a14      	ldr	r2, [pc, #80]	; (800a048 <HAL_TIM_PWM_Start+0x15c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d111      	bne.n	800a01e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f003 0307 	and.w	r3, r3, #7
 800a004:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2b06      	cmp	r3, #6
 800a00a:	d010      	beq.n	800a02e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f042 0201 	orr.w	r2, r2, #1
 800a01a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01c:	e007      	b.n	800a02e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f042 0201 	orr.w	r2, r2, #1
 800a02c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	40010000 	.word	0x40010000
 800a03c:	40000400 	.word	0x40000400
 800a040:	40000800 	.word	0x40000800
 800a044:	40000c00 	.word	0x40000c00
 800a048:	40014000 	.word	0x40014000

0800a04c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b02      	cmp	r3, #2
 800a060:	d122      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	f003 0302 	and.w	r3, r3, #2
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	d11b      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f06f 0202 	mvn.w	r2, #2
 800a078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	f003 0303 	and.w	r3, r3, #3
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d003      	beq.n	800a096 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 fa77 	bl	800a582 <HAL_TIM_IC_CaptureCallback>
 800a094:	e005      	b.n	800a0a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 fa69 	bl	800a56e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fa7a 	bl	800a596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0304 	and.w	r3, r3, #4
 800a0b2:	2b04      	cmp	r3, #4
 800a0b4:	d122      	bne.n	800a0fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f003 0304 	and.w	r3, r3, #4
 800a0c0:	2b04      	cmp	r3, #4
 800a0c2:	d11b      	bne.n	800a0fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f06f 0204 	mvn.w	r2, #4
 800a0cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	699b      	ldr	r3, [r3, #24]
 800a0da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d003      	beq.n	800a0ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 fa4d 	bl	800a582 <HAL_TIM_IC_CaptureCallback>
 800a0e8:	e005      	b.n	800a0f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 fa3f 	bl	800a56e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fa50 	bl	800a596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f003 0308 	and.w	r3, r3, #8
 800a106:	2b08      	cmp	r3, #8
 800a108:	d122      	bne.n	800a150 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f003 0308 	and.w	r3, r3, #8
 800a114:	2b08      	cmp	r3, #8
 800a116:	d11b      	bne.n	800a150 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f06f 0208 	mvn.w	r2, #8
 800a120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2204      	movs	r2, #4
 800a126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	69db      	ldr	r3, [r3, #28]
 800a12e:	f003 0303 	and.w	r3, r3, #3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fa23 	bl	800a582 <HAL_TIM_IC_CaptureCallback>
 800a13c:	e005      	b.n	800a14a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa15 	bl	800a56e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 fa26 	bl	800a596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	f003 0310 	and.w	r3, r3, #16
 800a15a:	2b10      	cmp	r3, #16
 800a15c:	d122      	bne.n	800a1a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f003 0310 	and.w	r3, r3, #16
 800a168:	2b10      	cmp	r3, #16
 800a16a:	d11b      	bne.n	800a1a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f06f 0210 	mvn.w	r2, #16
 800a174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2208      	movs	r2, #8
 800a17a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	69db      	ldr	r3, [r3, #28]
 800a182:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a186:	2b00      	cmp	r3, #0
 800a188:	d003      	beq.n	800a192 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f9f9 	bl	800a582 <HAL_TIM_IC_CaptureCallback>
 800a190:	e005      	b.n	800a19e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f9eb 	bl	800a56e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f9fc 	bl	800a596 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	2b01      	cmp	r3, #1
 800a1b0:	d10e      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d107      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f06f 0201 	mvn.w	r2, #1
 800a1c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7f9 fe2e 	bl	8003e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1da:	2b80      	cmp	r3, #128	; 0x80
 800a1dc:	d10e      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1e8:	2b80      	cmp	r3, #128	; 0x80
 800a1ea:	d107      	bne.n	800a1fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fd26 	bl	800ac48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	691b      	ldr	r3, [r3, #16]
 800a202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a206:	2b40      	cmp	r3, #64	; 0x40
 800a208:	d10e      	bne.n	800a228 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a214:	2b40      	cmp	r3, #64	; 0x40
 800a216:	d107      	bne.n	800a228 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f9c1 	bl	800a5aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	f003 0320 	and.w	r3, r3, #32
 800a232:	2b20      	cmp	r3, #32
 800a234:	d10e      	bne.n	800a254 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f003 0320 	and.w	r3, r3, #32
 800a240:	2b20      	cmp	r3, #32
 800a242:	d107      	bne.n	800a254 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f06f 0220 	mvn.w	r2, #32
 800a24c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fcf0 	bl	800ac34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a254:	bf00      	nop
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	60b9      	str	r1, [r7, #8]
 800a266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a268:	2300      	movs	r3, #0
 800a26a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a272:	2b01      	cmp	r3, #1
 800a274:	d101      	bne.n	800a27a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a276:	2302      	movs	r3, #2
 800a278:	e0ae      	b.n	800a3d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2b0c      	cmp	r3, #12
 800a286:	f200 809f 	bhi.w	800a3c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a28a:	a201      	add	r2, pc, #4	; (adr r2, 800a290 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a290:	0800a2c5 	.word	0x0800a2c5
 800a294:	0800a3c9 	.word	0x0800a3c9
 800a298:	0800a3c9 	.word	0x0800a3c9
 800a29c:	0800a3c9 	.word	0x0800a3c9
 800a2a0:	0800a305 	.word	0x0800a305
 800a2a4:	0800a3c9 	.word	0x0800a3c9
 800a2a8:	0800a3c9 	.word	0x0800a3c9
 800a2ac:	0800a3c9 	.word	0x0800a3c9
 800a2b0:	0800a347 	.word	0x0800a347
 800a2b4:	0800a3c9 	.word	0x0800a3c9
 800a2b8:	0800a3c9 	.word	0x0800a3c9
 800a2bc:	0800a3c9 	.word	0x0800a3c9
 800a2c0:	0800a387 	.word	0x0800a387
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	68b9      	ldr	r1, [r7, #8]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f000 f9f8 	bl	800a6c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	699a      	ldr	r2, [r3, #24]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0208 	orr.w	r2, r2, #8
 800a2de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	699a      	ldr	r2, [r3, #24]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f022 0204 	bic.w	r2, r2, #4
 800a2ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6999      	ldr	r1, [r3, #24]
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	691a      	ldr	r2, [r3, #16]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	430a      	orrs	r2, r1
 800a300:	619a      	str	r2, [r3, #24]
      break;
 800a302:	e064      	b.n	800a3ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	68b9      	ldr	r1, [r7, #8]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 fa3e 	bl	800a78c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	699a      	ldr	r2, [r3, #24]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a31e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	699a      	ldr	r2, [r3, #24]
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a32e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6999      	ldr	r1, [r3, #24]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	021a      	lsls	r2, r3, #8
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	430a      	orrs	r2, r1
 800a342:	619a      	str	r2, [r3, #24]
      break;
 800a344:	e043      	b.n	800a3ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 fa89 	bl	800a864 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	69da      	ldr	r2, [r3, #28]
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f042 0208 	orr.w	r2, r2, #8
 800a360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69da      	ldr	r2, [r3, #28]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f022 0204 	bic.w	r2, r2, #4
 800a370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	69d9      	ldr	r1, [r3, #28]
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	691a      	ldr	r2, [r3, #16]
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	430a      	orrs	r2, r1
 800a382:	61da      	str	r2, [r3, #28]
      break;
 800a384:	e023      	b.n	800a3ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	68b9      	ldr	r1, [r7, #8]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f000 fad3 	bl	800a938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	69da      	ldr	r2, [r3, #28]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	69da      	ldr	r2, [r3, #28]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	69d9      	ldr	r1, [r3, #28]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	021a      	lsls	r2, r3, #8
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	61da      	str	r2, [r3, #28]
      break;
 800a3c6:	e002      	b.n	800a3ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	75fb      	strb	r3, [r7, #23]
      break;
 800a3cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3718      	adds	r7, #24
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d101      	bne.n	800a3fc <HAL_TIM_ConfigClockSource+0x1c>
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e0b4      	b.n	800a566 <HAL_TIM_ConfigClockSource+0x186>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a41a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a422:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a434:	d03e      	beq.n	800a4b4 <HAL_TIM_ConfigClockSource+0xd4>
 800a436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a43a:	f200 8087 	bhi.w	800a54c <HAL_TIM_ConfigClockSource+0x16c>
 800a43e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a442:	f000 8086 	beq.w	800a552 <HAL_TIM_ConfigClockSource+0x172>
 800a446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a44a:	d87f      	bhi.n	800a54c <HAL_TIM_ConfigClockSource+0x16c>
 800a44c:	2b70      	cmp	r3, #112	; 0x70
 800a44e:	d01a      	beq.n	800a486 <HAL_TIM_ConfigClockSource+0xa6>
 800a450:	2b70      	cmp	r3, #112	; 0x70
 800a452:	d87b      	bhi.n	800a54c <HAL_TIM_ConfigClockSource+0x16c>
 800a454:	2b60      	cmp	r3, #96	; 0x60
 800a456:	d050      	beq.n	800a4fa <HAL_TIM_ConfigClockSource+0x11a>
 800a458:	2b60      	cmp	r3, #96	; 0x60
 800a45a:	d877      	bhi.n	800a54c <HAL_TIM_ConfigClockSource+0x16c>
 800a45c:	2b50      	cmp	r3, #80	; 0x50
 800a45e:	d03c      	beq.n	800a4da <HAL_TIM_ConfigClockSource+0xfa>
 800a460:	2b50      	cmp	r3, #80	; 0x50
 800a462:	d873      	bhi.n	800a54c <HAL_TIM_ConfigClockSource+0x16c>
 800a464:	2b40      	cmp	r3, #64	; 0x40
 800a466:	d058      	beq.n	800a51a <HAL_TIM_ConfigClockSource+0x13a>
 800a468:	2b40      	cmp	r3, #64	; 0x40
 800a46a:	d86f      	bhi.n	800a54c <HAL_TIM_ConfigClockSource+0x16c>
 800a46c:	2b30      	cmp	r3, #48	; 0x30
 800a46e:	d064      	beq.n	800a53a <HAL_TIM_ConfigClockSource+0x15a>
 800a470:	2b30      	cmp	r3, #48	; 0x30
 800a472:	d86b      	bhi.n	800a54c <HAL_TIM_ConfigClockSource+0x16c>
 800a474:	2b20      	cmp	r3, #32
 800a476:	d060      	beq.n	800a53a <HAL_TIM_ConfigClockSource+0x15a>
 800a478:	2b20      	cmp	r3, #32
 800a47a:	d867      	bhi.n	800a54c <HAL_TIM_ConfigClockSource+0x16c>
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d05c      	beq.n	800a53a <HAL_TIM_ConfigClockSource+0x15a>
 800a480:	2b10      	cmp	r3, #16
 800a482:	d05a      	beq.n	800a53a <HAL_TIM_ConfigClockSource+0x15a>
 800a484:	e062      	b.n	800a54c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	6899      	ldr	r1, [r3, #8]
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	685a      	ldr	r2, [r3, #4]
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	68db      	ldr	r3, [r3, #12]
 800a496:	f000 fb19 	bl	800aacc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a4a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	68ba      	ldr	r2, [r7, #8]
 800a4b0:	609a      	str	r2, [r3, #8]
      break;
 800a4b2:	e04f      	b.n	800a554 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6818      	ldr	r0, [r3, #0]
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	6899      	ldr	r1, [r3, #8]
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	f000 fb02 	bl	800aacc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	689a      	ldr	r2, [r3, #8]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4d6:	609a      	str	r2, [r3, #8]
      break;
 800a4d8:	e03c      	b.n	800a554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6818      	ldr	r0, [r3, #0]
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	6859      	ldr	r1, [r3, #4]
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f000 fa76 	bl	800a9d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2150      	movs	r1, #80	; 0x50
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f000 facf 	bl	800aa96 <TIM_ITRx_SetConfig>
      break;
 800a4f8:	e02c      	b.n	800a554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	6859      	ldr	r1, [r3, #4]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	461a      	mov	r2, r3
 800a508:	f000 fa95 	bl	800aa36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	2160      	movs	r1, #96	; 0x60
 800a512:	4618      	mov	r0, r3
 800a514:	f000 fabf 	bl	800aa96 <TIM_ITRx_SetConfig>
      break;
 800a518:	e01c      	b.n	800a554 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6818      	ldr	r0, [r3, #0]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	6859      	ldr	r1, [r3, #4]
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	461a      	mov	r2, r3
 800a528:	f000 fa56 	bl	800a9d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2140      	movs	r1, #64	; 0x40
 800a532:	4618      	mov	r0, r3
 800a534:	f000 faaf 	bl	800aa96 <TIM_ITRx_SetConfig>
      break;
 800a538:	e00c      	b.n	800a554 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4619      	mov	r1, r3
 800a544:	4610      	mov	r0, r2
 800a546:	f000 faa6 	bl	800aa96 <TIM_ITRx_SetConfig>
      break;
 800a54a:	e003      	b.n	800a554 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	73fb      	strb	r3, [r7, #15]
      break;
 800a550:	e000      	b.n	800a554 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a564:	7bfb      	ldrb	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3710      	adds	r7, #16
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a56e:	b480      	push	{r7}
 800a570:	b083      	sub	sp, #12
 800a572:	af00      	add	r7, sp, #0
 800a574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a576:	bf00      	nop
 800a578:	370c      	adds	r7, #12
 800a57a:	46bd      	mov	sp, r7
 800a57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a580:	4770      	bx	lr

0800a582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a582:	b480      	push	{r7}
 800a584:	b083      	sub	sp, #12
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a58a:	bf00      	nop
 800a58c:	370c      	adds	r7, #12
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a59e:	bf00      	nop
 800a5a0:	370c      	adds	r7, #12
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5aa:	b480      	push	{r7}
 800a5ac:	b083      	sub	sp, #12
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5b2:	bf00      	nop
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
	...

0800a5c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
 800a5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a34      	ldr	r2, [pc, #208]	; (800a6a4 <TIM_Base_SetConfig+0xe4>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d00f      	beq.n	800a5f8 <TIM_Base_SetConfig+0x38>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5de:	d00b      	beq.n	800a5f8 <TIM_Base_SetConfig+0x38>
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4a31      	ldr	r2, [pc, #196]	; (800a6a8 <TIM_Base_SetConfig+0xe8>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d007      	beq.n	800a5f8 <TIM_Base_SetConfig+0x38>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a30      	ldr	r2, [pc, #192]	; (800a6ac <TIM_Base_SetConfig+0xec>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d003      	beq.n	800a5f8 <TIM_Base_SetConfig+0x38>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a2f      	ldr	r2, [pc, #188]	; (800a6b0 <TIM_Base_SetConfig+0xf0>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d108      	bne.n	800a60a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	68fa      	ldr	r2, [r7, #12]
 800a606:	4313      	orrs	r3, r2
 800a608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a25      	ldr	r2, [pc, #148]	; (800a6a4 <TIM_Base_SetConfig+0xe4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d01b      	beq.n	800a64a <TIM_Base_SetConfig+0x8a>
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a618:	d017      	beq.n	800a64a <TIM_Base_SetConfig+0x8a>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	4a22      	ldr	r2, [pc, #136]	; (800a6a8 <TIM_Base_SetConfig+0xe8>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d013      	beq.n	800a64a <TIM_Base_SetConfig+0x8a>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a21      	ldr	r2, [pc, #132]	; (800a6ac <TIM_Base_SetConfig+0xec>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d00f      	beq.n	800a64a <TIM_Base_SetConfig+0x8a>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a20      	ldr	r2, [pc, #128]	; (800a6b0 <TIM_Base_SetConfig+0xf0>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d00b      	beq.n	800a64a <TIM_Base_SetConfig+0x8a>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	4a1f      	ldr	r2, [pc, #124]	; (800a6b4 <TIM_Base_SetConfig+0xf4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d007      	beq.n	800a64a <TIM_Base_SetConfig+0x8a>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4a1e      	ldr	r2, [pc, #120]	; (800a6b8 <TIM_Base_SetConfig+0xf8>)
 800a63e:	4293      	cmp	r3, r2
 800a640:	d003      	beq.n	800a64a <TIM_Base_SetConfig+0x8a>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	4a1d      	ldr	r2, [pc, #116]	; (800a6bc <TIM_Base_SetConfig+0xfc>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d108      	bne.n	800a65c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4313      	orrs	r3, r2
 800a65a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	695b      	ldr	r3, [r3, #20]
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a08      	ldr	r2, [pc, #32]	; (800a6a4 <TIM_Base_SetConfig+0xe4>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d103      	bne.n	800a690 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	691a      	ldr	r2, [r3, #16]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	615a      	str	r2, [r3, #20]
}
 800a696:	bf00      	nop
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	40010000 	.word	0x40010000
 800a6a8:	40000400 	.word	0x40000400
 800a6ac:	40000800 	.word	0x40000800
 800a6b0:	40000c00 	.word	0x40000c00
 800a6b4:	40014000 	.word	0x40014000
 800a6b8:	40014400 	.word	0x40014400
 800a6bc:	40014800 	.word	0x40014800

0800a6c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b087      	sub	sp, #28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	f023 0201 	bic.w	r2, r3, #1
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a1b      	ldr	r3, [r3, #32]
 800a6da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	699b      	ldr	r3, [r3, #24]
 800a6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f023 0303 	bic.w	r3, r3, #3
 800a6f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f023 0302 	bic.w	r3, r3, #2
 800a708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	689b      	ldr	r3, [r3, #8]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	4313      	orrs	r3, r2
 800a712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a1c      	ldr	r2, [pc, #112]	; (800a788 <TIM_OC1_SetConfig+0xc8>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d10c      	bne.n	800a736 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	f023 0308 	bic.w	r3, r3, #8
 800a722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	f023 0304 	bic.w	r3, r3, #4
 800a734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4a13      	ldr	r2, [pc, #76]	; (800a788 <TIM_OC1_SetConfig+0xc8>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d111      	bne.n	800a762 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a746:	693b      	ldr	r3, [r7, #16]
 800a748:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a74c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	693a      	ldr	r2, [r7, #16]
 800a754:	4313      	orrs	r3, r2
 800a756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	699b      	ldr	r3, [r3, #24]
 800a75c:	693a      	ldr	r2, [r7, #16]
 800a75e:	4313      	orrs	r3, r2
 800a760:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	68fa      	ldr	r2, [r7, #12]
 800a76c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	697a      	ldr	r2, [r7, #20]
 800a77a:	621a      	str	r2, [r3, #32]
}
 800a77c:	bf00      	nop
 800a77e:	371c      	adds	r7, #28
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr
 800a788:	40010000 	.word	0x40010000

0800a78c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b087      	sub	sp, #28
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
 800a794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a1b      	ldr	r3, [r3, #32]
 800a79a:	f023 0210 	bic.w	r2, r3, #16
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6a1b      	ldr	r3, [r3, #32]
 800a7a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	699b      	ldr	r3, [r3, #24]
 800a7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	021b      	lsls	r3, r3, #8
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f023 0320 	bic.w	r3, r3, #32
 800a7d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	011b      	lsls	r3, r3, #4
 800a7de:	697a      	ldr	r2, [r7, #20]
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	4a1e      	ldr	r2, [pc, #120]	; (800a860 <TIM_OC2_SetConfig+0xd4>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d10d      	bne.n	800a808 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	011b      	lsls	r3, r3, #4
 800a7fa:	697a      	ldr	r2, [r7, #20]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a15      	ldr	r2, [pc, #84]	; (800a860 <TIM_OC2_SetConfig+0xd4>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d113      	bne.n	800a838 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a816:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a81e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	695b      	ldr	r3, [r3, #20]
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	4313      	orrs	r3, r2
 800a82a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	699b      	ldr	r3, [r3, #24]
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	4313      	orrs	r3, r2
 800a836:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	685a      	ldr	r2, [r3, #4]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	621a      	str	r2, [r3, #32]
}
 800a852:	bf00      	nop
 800a854:	371c      	adds	r7, #28
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr
 800a85e:	bf00      	nop
 800a860:	40010000 	.word	0x40010000

0800a864 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a864:	b480      	push	{r7}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685b      	ldr	r3, [r3, #4]
 800a884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	69db      	ldr	r3, [r3, #28]
 800a88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	f023 0303 	bic.w	r3, r3, #3
 800a89a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68fa      	ldr	r2, [r7, #12]
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	021b      	lsls	r3, r3, #8
 800a8b4:	697a      	ldr	r2, [r7, #20]
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a1d      	ldr	r2, [pc, #116]	; (800a934 <TIM_OC3_SetConfig+0xd0>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d10d      	bne.n	800a8de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	021b      	lsls	r3, r3, #8
 800a8d0:	697a      	ldr	r2, [r7, #20]
 800a8d2:	4313      	orrs	r3, r2
 800a8d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a14      	ldr	r2, [pc, #80]	; (800a934 <TIM_OC3_SetConfig+0xd0>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d113      	bne.n	800a90e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	621a      	str	r2, [r3, #32]
}
 800a928:	bf00      	nop
 800a92a:	371c      	adds	r7, #28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	40010000 	.word	0x40010000

0800a938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a938:	b480      	push	{r7}
 800a93a:	b087      	sub	sp, #28
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
 800a940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a1b      	ldr	r3, [r3, #32]
 800a946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	685b      	ldr	r3, [r3, #4]
 800a958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a96e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	021b      	lsls	r3, r3, #8
 800a976:	68fa      	ldr	r2, [r7, #12]
 800a978:	4313      	orrs	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	031b      	lsls	r3, r3, #12
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a10      	ldr	r2, [pc, #64]	; (800a9d4 <TIM_OC4_SetConfig+0x9c>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d109      	bne.n	800a9ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a99e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	019b      	lsls	r3, r3, #6
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	693a      	ldr	r2, [r7, #16]
 800a9c4:	621a      	str	r2, [r3, #32]
}
 800a9c6:	bf00      	nop
 800a9c8:	371c      	adds	r7, #28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	40010000 	.word	0x40010000

0800a9d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b087      	sub	sp, #28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	6a1b      	ldr	r3, [r3, #32]
 800a9ee:	f023 0201 	bic.w	r2, r3, #1
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	699b      	ldr	r3, [r3, #24]
 800a9fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	011b      	lsls	r3, r3, #4
 800aa08:	693a      	ldr	r2, [r7, #16]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f023 030a 	bic.w	r3, r3, #10
 800aa14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	621a      	str	r2, [r3, #32]
}
 800aa2a:	bf00      	nop
 800aa2c:	371c      	adds	r7, #28
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b087      	sub	sp, #28
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	60f8      	str	r0, [r7, #12]
 800aa3e:	60b9      	str	r1, [r7, #8]
 800aa40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6a1b      	ldr	r3, [r3, #32]
 800aa46:	f023 0210 	bic.w	r2, r3, #16
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	699b      	ldr	r3, [r3, #24]
 800aa52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6a1b      	ldr	r3, [r3, #32]
 800aa58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	031b      	lsls	r3, r3, #12
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	011b      	lsls	r3, r3, #4
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	697a      	ldr	r2, [r7, #20]
 800aa82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	621a      	str	r2, [r3, #32]
}
 800aa8a:	bf00      	nop
 800aa8c:	371c      	adds	r7, #28
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaae:	683a      	ldr	r2, [r7, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	f043 0307 	orr.w	r3, r3, #7
 800aab8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	609a      	str	r2, [r3, #8]
}
 800aac0:	bf00      	nop
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aacc:	b480      	push	{r7}
 800aace:	b087      	sub	sp, #28
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	689b      	ldr	r3, [r3, #8]
 800aade:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aae6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	021a      	lsls	r2, r3, #8
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	609a      	str	r2, [r3, #8]
}
 800ab00:	bf00      	nop
 800ab02:	371c      	adds	r7, #28
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	f003 031f 	and.w	r3, r3, #31
 800ab1e:	2201      	movs	r2, #1
 800ab20:	fa02 f303 	lsl.w	r3, r2, r3
 800ab24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6a1a      	ldr	r2, [r3, #32]
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	43db      	mvns	r3, r3
 800ab2e:	401a      	ands	r2, r3
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6a1a      	ldr	r2, [r3, #32]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f003 031f 	and.w	r3, r3, #31
 800ab3e:	6879      	ldr	r1, [r7, #4]
 800ab40:	fa01 f303 	lsl.w	r3, r1, r3
 800ab44:	431a      	orrs	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	621a      	str	r2, [r3, #32]
}
 800ab4a:	bf00      	nop
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
	...

0800ab58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d101      	bne.n	800ab70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e050      	b.n	800ac12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a1c      	ldr	r2, [pc, #112]	; (800ac20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d018      	beq.n	800abe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abbc:	d013      	beq.n	800abe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a18      	ldr	r2, [pc, #96]	; (800ac24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d00e      	beq.n	800abe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a16      	ldr	r2, [pc, #88]	; (800ac28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d009      	beq.n	800abe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a15      	ldr	r2, [pc, #84]	; (800ac2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d004      	beq.n	800abe6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	4a13      	ldr	r2, [pc, #76]	; (800ac30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d10c      	bne.n	800ac00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2201      	movs	r2, #1
 800ac04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	40010000 	.word	0x40010000
 800ac24:	40000400 	.word	0x40000400
 800ac28:	40000800 	.word	0x40000800
 800ac2c:	40000c00 	.word	0x40000c00
 800ac30:	40014000 	.word	0x40014000

0800ac34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac3c:	bf00      	nop
 800ac3e:	370c      	adds	r7, #12
 800ac40:	46bd      	mov	sp, r7
 800ac42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac46:	4770      	bx	lr

0800ac48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b083      	sub	sp, #12
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e03f      	b.n	800acee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac74:	b2db      	uxtb	r3, r3
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d106      	bne.n	800ac88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f7fb f91c 	bl	8005ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2224      	movs	r2, #36	; 0x24
 800ac8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68da      	ldr	r2, [r3, #12]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ac9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f929 	bl	800aef8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	691a      	ldr	r2, [r3, #16]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	695a      	ldr	r2, [r3, #20]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	68da      	ldr	r2, [r3, #12]
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800acd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2220      	movs	r2, #32
 800ace0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2220      	movs	r2, #32
 800ace8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}

0800acf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acf6:	b580      	push	{r7, lr}
 800acf8:	b08a      	sub	sp, #40	; 0x28
 800acfa:	af02      	add	r7, sp, #8
 800acfc:	60f8      	str	r0, [r7, #12]
 800acfe:	60b9      	str	r1, [r7, #8]
 800ad00:	603b      	str	r3, [r7, #0]
 800ad02:	4613      	mov	r3, r2
 800ad04:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	2b20      	cmp	r3, #32
 800ad14:	d17c      	bne.n	800ae10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <HAL_UART_Transmit+0x2c>
 800ad1c:	88fb      	ldrh	r3, [r7, #6]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e075      	b.n	800ae12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d101      	bne.n	800ad34 <HAL_UART_Transmit+0x3e>
 800ad30:	2302      	movs	r3, #2
 800ad32:	e06e      	b.n	800ae12 <HAL_UART_Transmit+0x11c>
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2200      	movs	r2, #0
 800ad40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2221      	movs	r2, #33	; 0x21
 800ad46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad4a:	f7fb f961 	bl	8006010 <HAL_GetTick>
 800ad4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	88fa      	ldrh	r2, [r7, #6]
 800ad54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	88fa      	ldrh	r2, [r7, #6]
 800ad5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad64:	d108      	bne.n	800ad78 <HAL_UART_Transmit+0x82>
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d104      	bne.n	800ad78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	61bb      	str	r3, [r7, #24]
 800ad76:	e003      	b.n	800ad80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800ad88:	e02a      	b.n	800ade0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	2200      	movs	r2, #0
 800ad92:	2180      	movs	r1, #128	; 0x80
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f000 f840 	bl	800ae1a <UART_WaitOnFlagUntilTimeout>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d001      	beq.n	800ada4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e036      	b.n	800ae12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10b      	bne.n	800adc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	3302      	adds	r3, #2
 800adbe:	61bb      	str	r3, [r7, #24]
 800adc0:	e007      	b.n	800add2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	781a      	ldrb	r2, [r3, #0]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	3301      	adds	r3, #1
 800add0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800add6:	b29b      	uxth	r3, r3
 800add8:	3b01      	subs	r3, #1
 800adda:	b29a      	uxth	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1cf      	bne.n	800ad8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2200      	movs	r2, #0
 800adf2:	2140      	movs	r1, #64	; 0x40
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f810 	bl	800ae1a <UART_WaitOnFlagUntilTimeout>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d001      	beq.n	800ae04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e006      	b.n	800ae12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2220      	movs	r2, #32
 800ae08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	e000      	b.n	800ae12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800ae10:	2302      	movs	r3, #2
  }
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b090      	sub	sp, #64	; 0x40
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	603b      	str	r3, [r7, #0]
 800ae26:	4613      	mov	r3, r2
 800ae28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae2a:	e050      	b.n	800aece <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae32:	d04c      	beq.n	800aece <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ae34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d007      	beq.n	800ae4a <UART_WaitOnFlagUntilTimeout+0x30>
 800ae3a:	f7fb f8e9 	bl	8006010 <HAL_GetTick>
 800ae3e:	4602      	mov	r2, r0
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d241      	bcs.n	800aece <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	330c      	adds	r3, #12
 800ae50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	330c      	adds	r3, #12
 800ae68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae6a:	637a      	str	r2, [r7, #52]	; 0x34
 800ae6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae72:	e841 2300 	strex	r3, r2, [r1]
 800ae76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d1e5      	bne.n	800ae4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3314      	adds	r3, #20
 800ae84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	e853 3f00 	ldrex	r3, [r3]
 800ae8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f023 0301 	bic.w	r3, r3, #1
 800ae94:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	3314      	adds	r3, #20
 800ae9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae9e:	623a      	str	r2, [r7, #32]
 800aea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea2:	69f9      	ldr	r1, [r7, #28]
 800aea4:	6a3a      	ldr	r2, [r7, #32]
 800aea6:	e841 2300 	strex	r3, r2, [r1]
 800aeaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeac:	69bb      	ldr	r3, [r7, #24]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1e5      	bne.n	800ae7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2220      	movs	r2, #32
 800aeb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2220      	movs	r2, #32
 800aebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e00f      	b.n	800aeee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	4013      	ands	r3, r2
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	429a      	cmp	r2, r3
 800aedc:	bf0c      	ite	eq
 800aede:	2301      	moveq	r3, #1
 800aee0:	2300      	movne	r3, #0
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	461a      	mov	r2, r3
 800aee6:	79fb      	ldrb	r3, [r7, #7]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d09f      	beq.n	800ae2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800aeec:	2300      	movs	r3, #0
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3740      	adds	r7, #64	; 0x40
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
	...

0800aef8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aefc:	b0c0      	sub	sp, #256	; 0x100
 800aefe:	af00      	add	r7, sp, #0
 800af00:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800af10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af14:	68d9      	ldr	r1, [r3, #12]
 800af16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	ea40 0301 	orr.w	r3, r0, r1
 800af20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800af22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af26:	689a      	ldr	r2, [r3, #8]
 800af28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	431a      	orrs	r2, r3
 800af30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	431a      	orrs	r2, r3
 800af38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	4313      	orrs	r3, r2
 800af40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800af44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800af50:	f021 010c 	bic.w	r1, r1, #12
 800af54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af58:	681a      	ldr	r2, [r3, #0]
 800af5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800af5e:	430b      	orrs	r3, r1
 800af60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800af62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800af6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af72:	6999      	ldr	r1, [r3, #24]
 800af74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	ea40 0301 	orr.w	r3, r0, r1
 800af7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800af80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af84:	681a      	ldr	r2, [r3, #0]
 800af86:	4b8f      	ldr	r3, [pc, #572]	; (800b1c4 <UART_SetConfig+0x2cc>)
 800af88:	429a      	cmp	r2, r3
 800af8a:	d005      	beq.n	800af98 <UART_SetConfig+0xa0>
 800af8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800af90:	681a      	ldr	r2, [r3, #0]
 800af92:	4b8d      	ldr	r3, [pc, #564]	; (800b1c8 <UART_SetConfig+0x2d0>)
 800af94:	429a      	cmp	r2, r3
 800af96:	d104      	bne.n	800afa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800af98:	f7fd fe48 	bl	8008c2c <HAL_RCC_GetPCLK2Freq>
 800af9c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800afa0:	e003      	b.n	800afaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800afa2:	f7fd fe2f 	bl	8008c04 <HAL_RCC_GetPCLK1Freq>
 800afa6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800afae:	69db      	ldr	r3, [r3, #28]
 800afb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afb4:	f040 810c 	bne.w	800b1d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800afb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800afbc:	2200      	movs	r2, #0
 800afbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800afc2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800afc6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800afca:	4622      	mov	r2, r4
 800afcc:	462b      	mov	r3, r5
 800afce:	1891      	adds	r1, r2, r2
 800afd0:	65b9      	str	r1, [r7, #88]	; 0x58
 800afd2:	415b      	adcs	r3, r3
 800afd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afd6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800afda:	4621      	mov	r1, r4
 800afdc:	eb12 0801 	adds.w	r8, r2, r1
 800afe0:	4629      	mov	r1, r5
 800afe2:	eb43 0901 	adc.w	r9, r3, r1
 800afe6:	f04f 0200 	mov.w	r2, #0
 800afea:	f04f 0300 	mov.w	r3, #0
 800afee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800aff2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800aff6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800affa:	4690      	mov	r8, r2
 800affc:	4699      	mov	r9, r3
 800affe:	4623      	mov	r3, r4
 800b000:	eb18 0303 	adds.w	r3, r8, r3
 800b004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b008:	462b      	mov	r3, r5
 800b00a:	eb49 0303 	adc.w	r3, r9, r3
 800b00e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b01e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b022:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b026:	460b      	mov	r3, r1
 800b028:	18db      	adds	r3, r3, r3
 800b02a:	653b      	str	r3, [r7, #80]	; 0x50
 800b02c:	4613      	mov	r3, r2
 800b02e:	eb42 0303 	adc.w	r3, r2, r3
 800b032:	657b      	str	r3, [r7, #84]	; 0x54
 800b034:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b038:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b03c:	f7f5 fe2c 	bl	8000c98 <__aeabi_uldivmod>
 800b040:	4602      	mov	r2, r0
 800b042:	460b      	mov	r3, r1
 800b044:	4b61      	ldr	r3, [pc, #388]	; (800b1cc <UART_SetConfig+0x2d4>)
 800b046:	fba3 2302 	umull	r2, r3, r3, r2
 800b04a:	095b      	lsrs	r3, r3, #5
 800b04c:	011c      	lsls	r4, r3, #4
 800b04e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b052:	2200      	movs	r2, #0
 800b054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b058:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b05c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b060:	4642      	mov	r2, r8
 800b062:	464b      	mov	r3, r9
 800b064:	1891      	adds	r1, r2, r2
 800b066:	64b9      	str	r1, [r7, #72]	; 0x48
 800b068:	415b      	adcs	r3, r3
 800b06a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b06c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b070:	4641      	mov	r1, r8
 800b072:	eb12 0a01 	adds.w	sl, r2, r1
 800b076:	4649      	mov	r1, r9
 800b078:	eb43 0b01 	adc.w	fp, r3, r1
 800b07c:	f04f 0200 	mov.w	r2, #0
 800b080:	f04f 0300 	mov.w	r3, #0
 800b084:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b088:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b08c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b090:	4692      	mov	sl, r2
 800b092:	469b      	mov	fp, r3
 800b094:	4643      	mov	r3, r8
 800b096:	eb1a 0303 	adds.w	r3, sl, r3
 800b09a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b09e:	464b      	mov	r3, r9
 800b0a0:	eb4b 0303 	adc.w	r3, fp, r3
 800b0a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b0b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b0b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b0bc:	460b      	mov	r3, r1
 800b0be:	18db      	adds	r3, r3, r3
 800b0c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b0c2:	4613      	mov	r3, r2
 800b0c4:	eb42 0303 	adc.w	r3, r2, r3
 800b0c8:	647b      	str	r3, [r7, #68]	; 0x44
 800b0ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b0ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b0d2:	f7f5 fde1 	bl	8000c98 <__aeabi_uldivmod>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	460b      	mov	r3, r1
 800b0da:	4611      	mov	r1, r2
 800b0dc:	4b3b      	ldr	r3, [pc, #236]	; (800b1cc <UART_SetConfig+0x2d4>)
 800b0de:	fba3 2301 	umull	r2, r3, r3, r1
 800b0e2:	095b      	lsrs	r3, r3, #5
 800b0e4:	2264      	movs	r2, #100	; 0x64
 800b0e6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ea:	1acb      	subs	r3, r1, r3
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b0f2:	4b36      	ldr	r3, [pc, #216]	; (800b1cc <UART_SetConfig+0x2d4>)
 800b0f4:	fba3 2302 	umull	r2, r3, r3, r2
 800b0f8:	095b      	lsrs	r3, r3, #5
 800b0fa:	005b      	lsls	r3, r3, #1
 800b0fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b100:	441c      	add	r4, r3
 800b102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b106:	2200      	movs	r2, #0
 800b108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b10c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b110:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b114:	4642      	mov	r2, r8
 800b116:	464b      	mov	r3, r9
 800b118:	1891      	adds	r1, r2, r2
 800b11a:	63b9      	str	r1, [r7, #56]	; 0x38
 800b11c:	415b      	adcs	r3, r3
 800b11e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b124:	4641      	mov	r1, r8
 800b126:	1851      	adds	r1, r2, r1
 800b128:	6339      	str	r1, [r7, #48]	; 0x30
 800b12a:	4649      	mov	r1, r9
 800b12c:	414b      	adcs	r3, r1
 800b12e:	637b      	str	r3, [r7, #52]	; 0x34
 800b130:	f04f 0200 	mov.w	r2, #0
 800b134:	f04f 0300 	mov.w	r3, #0
 800b138:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b13c:	4659      	mov	r1, fp
 800b13e:	00cb      	lsls	r3, r1, #3
 800b140:	4651      	mov	r1, sl
 800b142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b146:	4651      	mov	r1, sl
 800b148:	00ca      	lsls	r2, r1, #3
 800b14a:	4610      	mov	r0, r2
 800b14c:	4619      	mov	r1, r3
 800b14e:	4603      	mov	r3, r0
 800b150:	4642      	mov	r2, r8
 800b152:	189b      	adds	r3, r3, r2
 800b154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b158:	464b      	mov	r3, r9
 800b15a:	460a      	mov	r2, r1
 800b15c:	eb42 0303 	adc.w	r3, r2, r3
 800b160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b170:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b174:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b178:	460b      	mov	r3, r1
 800b17a:	18db      	adds	r3, r3, r3
 800b17c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b17e:	4613      	mov	r3, r2
 800b180:	eb42 0303 	adc.w	r3, r2, r3
 800b184:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b18a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b18e:	f7f5 fd83 	bl	8000c98 <__aeabi_uldivmod>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	4b0d      	ldr	r3, [pc, #52]	; (800b1cc <UART_SetConfig+0x2d4>)
 800b198:	fba3 1302 	umull	r1, r3, r3, r2
 800b19c:	095b      	lsrs	r3, r3, #5
 800b19e:	2164      	movs	r1, #100	; 0x64
 800b1a0:	fb01 f303 	mul.w	r3, r1, r3
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	00db      	lsls	r3, r3, #3
 800b1a8:	3332      	adds	r3, #50	; 0x32
 800b1aa:	4a08      	ldr	r2, [pc, #32]	; (800b1cc <UART_SetConfig+0x2d4>)
 800b1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b0:	095b      	lsrs	r3, r3, #5
 800b1b2:	f003 0207 	and.w	r2, r3, #7
 800b1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4422      	add	r2, r4
 800b1be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b1c0:	e106      	b.n	800b3d0 <UART_SetConfig+0x4d8>
 800b1c2:	bf00      	nop
 800b1c4:	40011000 	.word	0x40011000
 800b1c8:	40011400 	.word	0x40011400
 800b1cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b1d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b1da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b1de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b1e2:	4642      	mov	r2, r8
 800b1e4:	464b      	mov	r3, r9
 800b1e6:	1891      	adds	r1, r2, r2
 800b1e8:	6239      	str	r1, [r7, #32]
 800b1ea:	415b      	adcs	r3, r3
 800b1ec:	627b      	str	r3, [r7, #36]	; 0x24
 800b1ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b1f2:	4641      	mov	r1, r8
 800b1f4:	1854      	adds	r4, r2, r1
 800b1f6:	4649      	mov	r1, r9
 800b1f8:	eb43 0501 	adc.w	r5, r3, r1
 800b1fc:	f04f 0200 	mov.w	r2, #0
 800b200:	f04f 0300 	mov.w	r3, #0
 800b204:	00eb      	lsls	r3, r5, #3
 800b206:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b20a:	00e2      	lsls	r2, r4, #3
 800b20c:	4614      	mov	r4, r2
 800b20e:	461d      	mov	r5, r3
 800b210:	4643      	mov	r3, r8
 800b212:	18e3      	adds	r3, r4, r3
 800b214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b218:	464b      	mov	r3, r9
 800b21a:	eb45 0303 	adc.w	r3, r5, r3
 800b21e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b22e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b232:	f04f 0200 	mov.w	r2, #0
 800b236:	f04f 0300 	mov.w	r3, #0
 800b23a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b23e:	4629      	mov	r1, r5
 800b240:	008b      	lsls	r3, r1, #2
 800b242:	4621      	mov	r1, r4
 800b244:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b248:	4621      	mov	r1, r4
 800b24a:	008a      	lsls	r2, r1, #2
 800b24c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b250:	f7f5 fd22 	bl	8000c98 <__aeabi_uldivmod>
 800b254:	4602      	mov	r2, r0
 800b256:	460b      	mov	r3, r1
 800b258:	4b60      	ldr	r3, [pc, #384]	; (800b3dc <UART_SetConfig+0x4e4>)
 800b25a:	fba3 2302 	umull	r2, r3, r3, r2
 800b25e:	095b      	lsrs	r3, r3, #5
 800b260:	011c      	lsls	r4, r3, #4
 800b262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b266:	2200      	movs	r2, #0
 800b268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b26c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b270:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b274:	4642      	mov	r2, r8
 800b276:	464b      	mov	r3, r9
 800b278:	1891      	adds	r1, r2, r2
 800b27a:	61b9      	str	r1, [r7, #24]
 800b27c:	415b      	adcs	r3, r3
 800b27e:	61fb      	str	r3, [r7, #28]
 800b280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b284:	4641      	mov	r1, r8
 800b286:	1851      	adds	r1, r2, r1
 800b288:	6139      	str	r1, [r7, #16]
 800b28a:	4649      	mov	r1, r9
 800b28c:	414b      	adcs	r3, r1
 800b28e:	617b      	str	r3, [r7, #20]
 800b290:	f04f 0200 	mov.w	r2, #0
 800b294:	f04f 0300 	mov.w	r3, #0
 800b298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b29c:	4659      	mov	r1, fp
 800b29e:	00cb      	lsls	r3, r1, #3
 800b2a0:	4651      	mov	r1, sl
 800b2a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b2a6:	4651      	mov	r1, sl
 800b2a8:	00ca      	lsls	r2, r1, #3
 800b2aa:	4610      	mov	r0, r2
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	4642      	mov	r2, r8
 800b2b2:	189b      	adds	r3, r3, r2
 800b2b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	460a      	mov	r2, r1
 800b2bc:	eb42 0303 	adc.w	r3, r2, r3
 800b2c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b2c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b2ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b2d0:	f04f 0200 	mov.w	r2, #0
 800b2d4:	f04f 0300 	mov.w	r3, #0
 800b2d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b2dc:	4649      	mov	r1, r9
 800b2de:	008b      	lsls	r3, r1, #2
 800b2e0:	4641      	mov	r1, r8
 800b2e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b2e6:	4641      	mov	r1, r8
 800b2e8:	008a      	lsls	r2, r1, #2
 800b2ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b2ee:	f7f5 fcd3 	bl	8000c98 <__aeabi_uldivmod>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	4b38      	ldr	r3, [pc, #224]	; (800b3dc <UART_SetConfig+0x4e4>)
 800b2fa:	fba3 2301 	umull	r2, r3, r3, r1
 800b2fe:	095b      	lsrs	r3, r3, #5
 800b300:	2264      	movs	r2, #100	; 0x64
 800b302:	fb02 f303 	mul.w	r3, r2, r3
 800b306:	1acb      	subs	r3, r1, r3
 800b308:	011b      	lsls	r3, r3, #4
 800b30a:	3332      	adds	r3, #50	; 0x32
 800b30c:	4a33      	ldr	r2, [pc, #204]	; (800b3dc <UART_SetConfig+0x4e4>)
 800b30e:	fba2 2303 	umull	r2, r3, r2, r3
 800b312:	095b      	lsrs	r3, r3, #5
 800b314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b318:	441c      	add	r4, r3
 800b31a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b31e:	2200      	movs	r2, #0
 800b320:	673b      	str	r3, [r7, #112]	; 0x70
 800b322:	677a      	str	r2, [r7, #116]	; 0x74
 800b324:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b328:	4642      	mov	r2, r8
 800b32a:	464b      	mov	r3, r9
 800b32c:	1891      	adds	r1, r2, r2
 800b32e:	60b9      	str	r1, [r7, #8]
 800b330:	415b      	adcs	r3, r3
 800b332:	60fb      	str	r3, [r7, #12]
 800b334:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b338:	4641      	mov	r1, r8
 800b33a:	1851      	adds	r1, r2, r1
 800b33c:	6039      	str	r1, [r7, #0]
 800b33e:	4649      	mov	r1, r9
 800b340:	414b      	adcs	r3, r1
 800b342:	607b      	str	r3, [r7, #4]
 800b344:	f04f 0200 	mov.w	r2, #0
 800b348:	f04f 0300 	mov.w	r3, #0
 800b34c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b350:	4659      	mov	r1, fp
 800b352:	00cb      	lsls	r3, r1, #3
 800b354:	4651      	mov	r1, sl
 800b356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b35a:	4651      	mov	r1, sl
 800b35c:	00ca      	lsls	r2, r1, #3
 800b35e:	4610      	mov	r0, r2
 800b360:	4619      	mov	r1, r3
 800b362:	4603      	mov	r3, r0
 800b364:	4642      	mov	r2, r8
 800b366:	189b      	adds	r3, r3, r2
 800b368:	66bb      	str	r3, [r7, #104]	; 0x68
 800b36a:	464b      	mov	r3, r9
 800b36c:	460a      	mov	r2, r1
 800b36e:	eb42 0303 	adc.w	r3, r2, r3
 800b372:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	663b      	str	r3, [r7, #96]	; 0x60
 800b37e:	667a      	str	r2, [r7, #100]	; 0x64
 800b380:	f04f 0200 	mov.w	r2, #0
 800b384:	f04f 0300 	mov.w	r3, #0
 800b388:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b38c:	4649      	mov	r1, r9
 800b38e:	008b      	lsls	r3, r1, #2
 800b390:	4641      	mov	r1, r8
 800b392:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b396:	4641      	mov	r1, r8
 800b398:	008a      	lsls	r2, r1, #2
 800b39a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b39e:	f7f5 fc7b 	bl	8000c98 <__aeabi_uldivmod>
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	4b0d      	ldr	r3, [pc, #52]	; (800b3dc <UART_SetConfig+0x4e4>)
 800b3a8:	fba3 1302 	umull	r1, r3, r3, r2
 800b3ac:	095b      	lsrs	r3, r3, #5
 800b3ae:	2164      	movs	r1, #100	; 0x64
 800b3b0:	fb01 f303 	mul.w	r3, r1, r3
 800b3b4:	1ad3      	subs	r3, r2, r3
 800b3b6:	011b      	lsls	r3, r3, #4
 800b3b8:	3332      	adds	r3, #50	; 0x32
 800b3ba:	4a08      	ldr	r2, [pc, #32]	; (800b3dc <UART_SetConfig+0x4e4>)
 800b3bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b3c0:	095b      	lsrs	r3, r3, #5
 800b3c2:	f003 020f 	and.w	r2, r3, #15
 800b3c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4422      	add	r2, r4
 800b3ce:	609a      	str	r2, [r3, #8]
}
 800b3d0:	bf00      	nop
 800b3d2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3dc:	51eb851f 	.word	0x51eb851f

0800b3e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800b3e4:	4904      	ldr	r1, [pc, #16]	; (800b3f8 <MX_FATFS_Init+0x18>)
 800b3e6:	4805      	ldr	r0, [pc, #20]	; (800b3fc <MX_FATFS_Init+0x1c>)
 800b3e8:	f003 fa3c 	bl	800e864 <FATFS_LinkDriver>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	4b03      	ldr	r3, [pc, #12]	; (800b400 <MX_FATFS_Init+0x20>)
 800b3f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b3f4:	bf00      	nop
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	200008f4 	.word	0x200008f4
 800b3fc:	20000014 	.word	0x20000014
 800b400:	200008f0 	.word	0x200008f0

0800b404 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b404:	b480      	push	{r7}
 800b406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b408:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b082      	sub	sp, #8
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	4618      	mov	r0, r3
 800b422:	f000 f9dd 	bl	800b7e0 <USER_SPI_initialize>
 800b426:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	4603      	mov	r3, r0
 800b438:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800b43a:	79fb      	ldrb	r3, [r7, #7]
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 fabb 	bl	800b9b8 <USER_SPI_status>
 800b442:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b444:	4618      	mov	r0, r3
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	607a      	str	r2, [r7, #4]
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	4603      	mov	r3, r0
 800b45a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800b45c:	7bf8      	ldrb	r0, [r7, #15]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	68b9      	ldr	r1, [r7, #8]
 800b464:	f000 fabe 	bl	800b9e4 <USER_SPI_read>
 800b468:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}

0800b472 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b472:	b580      	push	{r7, lr}
 800b474:	b084      	sub	sp, #16
 800b476:	af00      	add	r7, sp, #0
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	603b      	str	r3, [r7, #0]
 800b47e:	4603      	mov	r3, r0
 800b480:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800b482:	7bf8      	ldrb	r0, [r7, #15]
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	68b9      	ldr	r1, [r7, #8]
 800b48a:	f000 fb11 	bl	800bab0 <USER_SPI_write>
 800b48e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b490:	4618      	mov	r0, r3
 800b492:	3710      	adds	r7, #16
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	4603      	mov	r3, r0
 800b4a0:	603a      	str	r2, [r7, #0]
 800b4a2:	71fb      	strb	r3, [r7, #7]
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800b4a8:	79b9      	ldrb	r1, [r7, #6]
 800b4aa:	79fb      	ldrb	r3, [r7, #7]
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f000 fb7a 	bl	800bba8 <USER_SPI_ioctl>
 800b4b4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
	...

0800b4c0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800b4c8:	f7fa fda2 	bl	8006010 <HAL_GetTick>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	4a04      	ldr	r2, [pc, #16]	; (800b4e0 <SPI_Timer_On+0x20>)
 800b4d0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800b4d2:	4a04      	ldr	r2, [pc, #16]	; (800b4e4 <SPI_Timer_On+0x24>)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6013      	str	r3, [r2, #0]
}
 800b4d8:	bf00      	nop
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	200008fc 	.word	0x200008fc
 800b4e4:	20000900 	.word	0x20000900

0800b4e8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800b4ec:	f7fa fd90 	bl	8006010 <HAL_GetTick>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	4b06      	ldr	r3, [pc, #24]	; (800b50c <SPI_Timer_Status+0x24>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	1ad2      	subs	r2, r2, r3
 800b4f8:	4b05      	ldr	r3, [pc, #20]	; (800b510 <SPI_Timer_Status+0x28>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	bf34      	ite	cc
 800b500:	2301      	movcc	r3, #1
 800b502:	2300      	movcs	r3, #0
 800b504:	b2db      	uxtb	r3, r3
}
 800b506:	4618      	mov	r0, r3
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	200008fc 	.word	0x200008fc
 800b510:	20000900 	.word	0x20000900

0800b514 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b086      	sub	sp, #24
 800b518:	af02      	add	r7, sp, #8
 800b51a:	4603      	mov	r3, r0
 800b51c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi3, &dat, &rxDat, 1, 50);
 800b51e:	f107 020f 	add.w	r2, r7, #15
 800b522:	1df9      	adds	r1, r7, #7
 800b524:	2332      	movs	r3, #50	; 0x32
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	2301      	movs	r3, #1
 800b52a:	4804      	ldr	r0, [pc, #16]	; (800b53c <xchg_spi+0x28>)
 800b52c:	f7fe f965 	bl	80097fa <HAL_SPI_TransmitReceive>
    return rxDat;
 800b530:	7bfb      	ldrb	r3, [r7, #15]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}
 800b53a:	bf00      	nop
 800b53c:	200007bc 	.word	0x200007bc

0800b540 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800b540:	b590      	push	{r4, r7, lr}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	e00a      	b.n	800b566 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	18d4      	adds	r4, r2, r3
 800b556:	20ff      	movs	r0, #255	; 0xff
 800b558:	f7ff ffdc 	bl	800b514 <xchg_spi>
 800b55c:	4603      	mov	r3, r0
 800b55e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	3301      	adds	r3, #1
 800b564:	60fb      	str	r3, [r7, #12]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d3f0      	bcc.n	800b550 <rcvr_spi_multi+0x10>
	}
}
 800b56e:	bf00      	nop
 800b570:	bf00      	nop
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	bd90      	pop	{r4, r7, pc}

0800b578 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800b582:	2300      	movs	r3, #0
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	e009      	b.n	800b59c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	4413      	add	r3, r2
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	4618      	mov	r0, r3
 800b592:	f7ff ffbf 	bl	800b514 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	3301      	adds	r3, #1
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d3f1      	bcc.n	800b588 <xmit_spi_multi+0x10>
	}
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b086      	sub	sp, #24
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800b5b6:	f7fa fd2b 	bl	8006010 <HAL_GetTick>
 800b5ba:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800b5c0:	20ff      	movs	r0, #255	; 0xff
 800b5c2:	f7ff ffa7 	bl	800b514 <xchg_spi>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800b5ca:	7bfb      	ldrb	r3, [r7, #15]
 800b5cc:	2bff      	cmp	r3, #255	; 0xff
 800b5ce:	d007      	beq.n	800b5e0 <wait_ready+0x32>
 800b5d0:	f7fa fd1e 	bl	8006010 <HAL_GetTick>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	693a      	ldr	r2, [r7, #16]
 800b5dc:	429a      	cmp	r2, r3
 800b5de:	d8ef      	bhi.n	800b5c0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800b5e0:	7bfb      	ldrb	r3, [r7, #15]
 800b5e2:	2bff      	cmp	r3, #255	; 0xff
 800b5e4:	bf0c      	ite	eq
 800b5e6:	2301      	moveq	r3, #1
 800b5e8:	2300      	movne	r3, #0
 800b5ea:	b2db      	uxtb	r3, r3
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3718      	adds	r7, #24
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800b5f8:	2201      	movs	r2, #1
 800b5fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b5fe:	4804      	ldr	r0, [pc, #16]	; (800b610 <despiselect+0x1c>)
 800b600:	f7fb f914 	bl	800682c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800b604:	20ff      	movs	r0, #255	; 0xff
 800b606:	f7ff ff85 	bl	800b514 <xchg_spi>

}
 800b60a:	bf00      	nop
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	40020400 	.word	0x40020400

0800b614 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800b618:	2200      	movs	r2, #0
 800b61a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b61e:	480a      	ldr	r0, [pc, #40]	; (800b648 <spiselect+0x34>)
 800b620:	f7fb f904 	bl	800682c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800b624:	20ff      	movs	r0, #255	; 0xff
 800b626:	f7ff ff75 	bl	800b514 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800b62a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b62e:	f7ff ffbe 	bl	800b5ae <wait_ready>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <spiselect+0x28>
 800b638:	2301      	movs	r3, #1
 800b63a:	e002      	b.n	800b642 <spiselect+0x2e>

	despiselect();
 800b63c:	f7ff ffda 	bl	800b5f4 <despiselect>
	return 0;	/* Timeout */
 800b640:	2300      	movs	r3, #0
}
 800b642:	4618      	mov	r0, r3
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	40020400 	.word	0x40020400

0800b64c <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800b656:	20c8      	movs	r0, #200	; 0xc8
 800b658:	f7ff ff32 	bl	800b4c0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800b65c:	20ff      	movs	r0, #255	; 0xff
 800b65e:	f7ff ff59 	bl	800b514 <xchg_spi>
 800b662:	4603      	mov	r3, r0
 800b664:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800b666:	7bfb      	ldrb	r3, [r7, #15]
 800b668:	2bff      	cmp	r3, #255	; 0xff
 800b66a:	d104      	bne.n	800b676 <rcvr_datablock+0x2a>
 800b66c:	f7ff ff3c 	bl	800b4e8 <SPI_Timer_Status>
 800b670:	4603      	mov	r3, r0
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1f2      	bne.n	800b65c <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	2bfe      	cmp	r3, #254	; 0xfe
 800b67a:	d001      	beq.n	800b680 <rcvr_datablock+0x34>
 800b67c:	2300      	movs	r3, #0
 800b67e:	e00a      	b.n	800b696 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800b680:	6839      	ldr	r1, [r7, #0]
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff ff5c 	bl	800b540 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800b688:	20ff      	movs	r0, #255	; 0xff
 800b68a:	f7ff ff43 	bl	800b514 <xchg_spi>
 800b68e:	20ff      	movs	r0, #255	; 0xff
 800b690:	f7ff ff40 	bl	800b514 <xchg_spi>

	return 1;						/* Function succeeded */
 800b694:	2301      	movs	r3, #1
}
 800b696:	4618      	mov	r0, r3
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
 800b6a6:	460b      	mov	r3, r1
 800b6a8:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800b6aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b6ae:	f7ff ff7e 	bl	800b5ae <wait_ready>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <xmit_datablock+0x1e>
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	e01e      	b.n	800b6fa <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800b6bc:	78fb      	ldrb	r3, [r7, #3]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff ff28 	bl	800b514 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800b6c4:	78fb      	ldrb	r3, [r7, #3]
 800b6c6:	2bfd      	cmp	r3, #253	; 0xfd
 800b6c8:	d016      	beq.n	800b6f8 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800b6ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f7ff ff52 	bl	800b578 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800b6d4:	20ff      	movs	r0, #255	; 0xff
 800b6d6:	f7ff ff1d 	bl	800b514 <xchg_spi>
 800b6da:	20ff      	movs	r0, #255	; 0xff
 800b6dc:	f7ff ff1a 	bl	800b514 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800b6e0:	20ff      	movs	r0, #255	; 0xff
 800b6e2:	f7ff ff17 	bl	800b514 <xchg_spi>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	f003 031f 	and.w	r3, r3, #31
 800b6f0:	2b05      	cmp	r3, #5
 800b6f2:	d001      	beq.n	800b6f8 <xmit_datablock+0x5a>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	e000      	b.n	800b6fa <xmit_datablock+0x5c>
	}
	return 1;
 800b6f8:	2301      	movs	r3, #1
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3710      	adds	r7, #16
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}

0800b702 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800b702:	b580      	push	{r7, lr}
 800b704:	b084      	sub	sp, #16
 800b706:	af00      	add	r7, sp, #0
 800b708:	4603      	mov	r3, r0
 800b70a:	6039      	str	r1, [r7, #0]
 800b70c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800b70e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b712:	2b00      	cmp	r3, #0
 800b714:	da0e      	bge.n	800b734 <send_cmd+0x32>
		cmd &= 0x7F;
 800b716:	79fb      	ldrb	r3, [r7, #7]
 800b718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b71c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800b71e:	2100      	movs	r1, #0
 800b720:	2037      	movs	r0, #55	; 0x37
 800b722:	f7ff ffee 	bl	800b702 <send_cmd>
 800b726:	4603      	mov	r3, r0
 800b728:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d901      	bls.n	800b734 <send_cmd+0x32>
 800b730:	7bbb      	ldrb	r3, [r7, #14]
 800b732:	e051      	b.n	800b7d8 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800b734:	79fb      	ldrb	r3, [r7, #7]
 800b736:	2b0c      	cmp	r3, #12
 800b738:	d008      	beq.n	800b74c <send_cmd+0x4a>
		despiselect();
 800b73a:	f7ff ff5b 	bl	800b5f4 <despiselect>
		if (!spiselect()) return 0xFF;
 800b73e:	f7ff ff69 	bl	800b614 <spiselect>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d101      	bne.n	800b74c <send_cmd+0x4a>
 800b748:	23ff      	movs	r3, #255	; 0xff
 800b74a:	e045      	b.n	800b7d8 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800b74c:	79fb      	ldrb	r3, [r7, #7]
 800b74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b752:	b2db      	uxtb	r3, r3
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff fedd 	bl	800b514 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	0e1b      	lsrs	r3, r3, #24
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	4618      	mov	r0, r3
 800b762:	f7ff fed7 	bl	800b514 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	0c1b      	lsrs	r3, r3, #16
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff fed1 	bl	800b514 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	0a1b      	lsrs	r3, r3, #8
 800b776:	b2db      	uxtb	r3, r3
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff fecb 	bl	800b514 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	b2db      	uxtb	r3, r3
 800b782:	4618      	mov	r0, r3
 800b784:	f7ff fec6 	bl	800b514 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800b788:	2301      	movs	r3, #1
 800b78a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800b78c:	79fb      	ldrb	r3, [r7, #7]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <send_cmd+0x94>
 800b792:	2395      	movs	r3, #149	; 0x95
 800b794:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800b796:	79fb      	ldrb	r3, [r7, #7]
 800b798:	2b08      	cmp	r3, #8
 800b79a:	d101      	bne.n	800b7a0 <send_cmd+0x9e>
 800b79c:	2387      	movs	r3, #135	; 0x87
 800b79e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7ff feb6 	bl	800b514 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800b7a8:	79fb      	ldrb	r3, [r7, #7]
 800b7aa:	2b0c      	cmp	r3, #12
 800b7ac:	d102      	bne.n	800b7b4 <send_cmd+0xb2>
 800b7ae:	20ff      	movs	r0, #255	; 0xff
 800b7b0:	f7ff feb0 	bl	800b514 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800b7b4:	230a      	movs	r3, #10
 800b7b6:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800b7b8:	20ff      	movs	r0, #255	; 0xff
 800b7ba:	f7ff feab 	bl	800b514 <xchg_spi>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800b7c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	da05      	bge.n	800b7d6 <send_cmd+0xd4>
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	73fb      	strb	r3, [r7, #15]
 800b7d0:	7bfb      	ldrb	r3, [r7, #15]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1f0      	bne.n	800b7b8 <send_cmd+0xb6>

	return res;							/* Return received response */
 800b7d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b7e0:	b590      	push	{r4, r7, lr}
 800b7e2:	b085      	sub	sp, #20
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800b7ea:	79fb      	ldrb	r3, [r7, #7]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <USER_SPI_initialize+0x14>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	e0d6      	b.n	800b9a2 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800b7f4:	4b6d      	ldr	r3, [pc, #436]	; (800b9ac <USER_SPI_initialize+0x1cc>)
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	f003 0302 	and.w	r3, r3, #2
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d003      	beq.n	800b80a <USER_SPI_initialize+0x2a>
 800b802:	4b6a      	ldr	r3, [pc, #424]	; (800b9ac <USER_SPI_initialize+0x1cc>)
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	b2db      	uxtb	r3, r3
 800b808:	e0cb      	b.n	800b9a2 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800b80a:	4b69      	ldr	r3, [pc, #420]	; (800b9b0 <USER_SPI_initialize+0x1d0>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b814:	4b66      	ldr	r3, [pc, #408]	; (800b9b0 <USER_SPI_initialize+0x1d0>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800b81c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800b81e:	230a      	movs	r3, #10
 800b820:	73fb      	strb	r3, [r7, #15]
 800b822:	e005      	b.n	800b830 <USER_SPI_initialize+0x50>
 800b824:	20ff      	movs	r0, #255	; 0xff
 800b826:	f7ff fe75 	bl	800b514 <xchg_spi>
 800b82a:	7bfb      	ldrb	r3, [r7, #15]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	73fb      	strb	r3, [r7, #15]
 800b830:	7bfb      	ldrb	r3, [r7, #15]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d1f6      	bne.n	800b824 <USER_SPI_initialize+0x44>

	ty = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800b83a:	2100      	movs	r1, #0
 800b83c:	2000      	movs	r0, #0
 800b83e:	f7ff ff60 	bl	800b702 <send_cmd>
 800b842:	4603      	mov	r3, r0
 800b844:	2b01      	cmp	r3, #1
 800b846:	f040 808b 	bne.w	800b960 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800b84a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b84e:	f7ff fe37 	bl	800b4c0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800b852:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b856:	2008      	movs	r0, #8
 800b858:	f7ff ff53 	bl	800b702 <send_cmd>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d151      	bne.n	800b906 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800b862:	2300      	movs	r3, #0
 800b864:	73fb      	strb	r3, [r7, #15]
 800b866:	e00d      	b.n	800b884 <USER_SPI_initialize+0xa4>
 800b868:	7bfc      	ldrb	r4, [r7, #15]
 800b86a:	20ff      	movs	r0, #255	; 0xff
 800b86c:	f7ff fe52 	bl	800b514 <xchg_spi>
 800b870:	4603      	mov	r3, r0
 800b872:	461a      	mov	r2, r3
 800b874:	f104 0310 	add.w	r3, r4, #16
 800b878:	443b      	add	r3, r7
 800b87a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
 800b880:	3301      	adds	r3, #1
 800b882:	73fb      	strb	r3, [r7, #15]
 800b884:	7bfb      	ldrb	r3, [r7, #15]
 800b886:	2b03      	cmp	r3, #3
 800b888:	d9ee      	bls.n	800b868 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800b88a:	7abb      	ldrb	r3, [r7, #10]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d167      	bne.n	800b960 <USER_SPI_initialize+0x180>
 800b890:	7afb      	ldrb	r3, [r7, #11]
 800b892:	2baa      	cmp	r3, #170	; 0xaa
 800b894:	d164      	bne.n	800b960 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800b896:	bf00      	nop
 800b898:	f7ff fe26 	bl	800b4e8 <SPI_Timer_Status>
 800b89c:	4603      	mov	r3, r0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d007      	beq.n	800b8b2 <USER_SPI_initialize+0xd2>
 800b8a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b8a6:	20a9      	movs	r0, #169	; 0xa9
 800b8a8:	f7ff ff2b 	bl	800b702 <send_cmd>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1f2      	bne.n	800b898 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800b8b2:	f7ff fe19 	bl	800b4e8 <SPI_Timer_Status>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d051      	beq.n	800b960 <USER_SPI_initialize+0x180>
 800b8bc:	2100      	movs	r1, #0
 800b8be:	203a      	movs	r0, #58	; 0x3a
 800b8c0:	f7ff ff1f 	bl	800b702 <send_cmd>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d14a      	bne.n	800b960 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	73fb      	strb	r3, [r7, #15]
 800b8ce:	e00d      	b.n	800b8ec <USER_SPI_initialize+0x10c>
 800b8d0:	7bfc      	ldrb	r4, [r7, #15]
 800b8d2:	20ff      	movs	r0, #255	; 0xff
 800b8d4:	f7ff fe1e 	bl	800b514 <xchg_spi>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f104 0310 	add.w	r3, r4, #16
 800b8e0:	443b      	add	r3, r7
 800b8e2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	73fb      	strb	r3, [r7, #15]
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
 800b8ee:	2b03      	cmp	r3, #3
 800b8f0:	d9ee      	bls.n	800b8d0 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800b8f2:	7a3b      	ldrb	r3, [r7, #8]
 800b8f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <USER_SPI_initialize+0x120>
 800b8fc:	230c      	movs	r3, #12
 800b8fe:	e000      	b.n	800b902 <USER_SPI_initialize+0x122>
 800b900:	2304      	movs	r3, #4
 800b902:	737b      	strb	r3, [r7, #13]
 800b904:	e02c      	b.n	800b960 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800b906:	2100      	movs	r1, #0
 800b908:	20a9      	movs	r0, #169	; 0xa9
 800b90a:	f7ff fefa 	bl	800b702 <send_cmd>
 800b90e:	4603      	mov	r3, r0
 800b910:	2b01      	cmp	r3, #1
 800b912:	d804      	bhi.n	800b91e <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800b914:	2302      	movs	r3, #2
 800b916:	737b      	strb	r3, [r7, #13]
 800b918:	23a9      	movs	r3, #169	; 0xa9
 800b91a:	73bb      	strb	r3, [r7, #14]
 800b91c:	e003      	b.n	800b926 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800b91e:	2301      	movs	r3, #1
 800b920:	737b      	strb	r3, [r7, #13]
 800b922:	2301      	movs	r3, #1
 800b924:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800b926:	bf00      	nop
 800b928:	f7ff fdde 	bl	800b4e8 <SPI_Timer_Status>
 800b92c:	4603      	mov	r3, r0
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d007      	beq.n	800b942 <USER_SPI_initialize+0x162>
 800b932:	7bbb      	ldrb	r3, [r7, #14]
 800b934:	2100      	movs	r1, #0
 800b936:	4618      	mov	r0, r3
 800b938:	f7ff fee3 	bl	800b702 <send_cmd>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d1f2      	bne.n	800b928 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800b942:	f7ff fdd1 	bl	800b4e8 <SPI_Timer_Status>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d007      	beq.n	800b95c <USER_SPI_initialize+0x17c>
 800b94c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b950:	2010      	movs	r0, #16
 800b952:	f7ff fed6 	bl	800b702 <send_cmd>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <USER_SPI_initialize+0x180>
				ty = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	737b      	strb	r3, [r7, #13]
		}
	} 
	CardType = ty;	/* Card type */
 800b960:	4a14      	ldr	r2, [pc, #80]	; (800b9b4 <USER_SPI_initialize+0x1d4>)
 800b962:	7b7b      	ldrb	r3, [r7, #13]
 800b964:	7013      	strb	r3, [r2, #0]
	despiselect();
 800b966:	f7ff fe45 	bl	800b5f4 <despiselect>

	if (ty) {			/* OK */
 800b96a:	7b7b      	ldrb	r3, [r7, #13]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d012      	beq.n	800b996 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800b970:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <USER_SPI_initialize+0x1d0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b97a:	4b0d      	ldr	r3, [pc, #52]	; (800b9b0 <USER_SPI_initialize+0x1d0>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f042 0210 	orr.w	r2, r2, #16
 800b982:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800b984:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <USER_SPI_initialize+0x1cc>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	f023 0301 	bic.w	r3, r3, #1
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <USER_SPI_initialize+0x1cc>)
 800b992:	701a      	strb	r2, [r3, #0]
 800b994:	e002      	b.n	800b99c <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800b996:	4b05      	ldr	r3, [pc, #20]	; (800b9ac <USER_SPI_initialize+0x1cc>)
 800b998:	2201      	movs	r2, #1
 800b99a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800b99c:	4b03      	ldr	r3, [pc, #12]	; (800b9ac <USER_SPI_initialize+0x1cc>)
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	b2db      	uxtb	r3, r3
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd90      	pop	{r4, r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	20000028 	.word	0x20000028
 800b9b0:	200007bc 	.word	0x200007bc
 800b9b4:	200008f8 	.word	0x200008f8

0800b9b8 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	4603      	mov	r3, r0
 800b9c0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <USER_SPI_status+0x14>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e002      	b.n	800b9d2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800b9cc:	4b04      	ldr	r3, [pc, #16]	; (800b9e0 <USER_SPI_status+0x28>)
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	b2db      	uxtb	r3, r3
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	20000028 	.word	0x20000028

0800b9e4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	607a      	str	r2, [r7, #4]
 800b9ee:	603b      	str	r3, [r7, #0]
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b9f4:	7bfb      	ldrb	r3, [r7, #15]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d102      	bne.n	800ba00 <USER_SPI_read+0x1c>
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d101      	bne.n	800ba04 <USER_SPI_read+0x20>
 800ba00:	2304      	movs	r3, #4
 800ba02:	e04d      	b.n	800baa0 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ba04:	4b28      	ldr	r3, [pc, #160]	; (800baa8 <USER_SPI_read+0xc4>)
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <USER_SPI_read+0x32>
 800ba12:	2303      	movs	r3, #3
 800ba14:	e044      	b.n	800baa0 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ba16:	4b25      	ldr	r3, [pc, #148]	; (800baac <USER_SPI_read+0xc8>)
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	f003 0308 	and.w	r3, r3, #8
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d102      	bne.n	800ba28 <USER_SPI_read+0x44>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	025b      	lsls	r3, r3, #9
 800ba26:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d111      	bne.n	800ba52 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800ba2e:	6879      	ldr	r1, [r7, #4]
 800ba30:	2011      	movs	r0, #17
 800ba32:	f7ff fe66 	bl	800b702 <send_cmd>
 800ba36:	4603      	mov	r3, r0
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d129      	bne.n	800ba90 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ba3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba40:	68b8      	ldr	r0, [r7, #8]
 800ba42:	f7ff fe03 	bl	800b64c <rcvr_datablock>
 800ba46:	4603      	mov	r3, r0
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d021      	beq.n	800ba90 <USER_SPI_read+0xac>
			count = 0;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	e01e      	b.n	800ba90 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ba52:	6879      	ldr	r1, [r7, #4]
 800ba54:	2012      	movs	r0, #18
 800ba56:	f7ff fe54 	bl	800b702 <send_cmd>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d117      	bne.n	800ba90 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ba60:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba64:	68b8      	ldr	r0, [r7, #8]
 800ba66:	f7ff fdf1 	bl	800b64c <rcvr_datablock>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00a      	beq.n	800ba86 <USER_SPI_read+0xa2>
				buff += 512;
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ba76:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	603b      	str	r3, [r7, #0]
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1ed      	bne.n	800ba60 <USER_SPI_read+0x7c>
 800ba84:	e000      	b.n	800ba88 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800ba86:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800ba88:	2100      	movs	r1, #0
 800ba8a:	200c      	movs	r0, #12
 800ba8c:	f7ff fe39 	bl	800b702 <send_cmd>
		}
	}
	despiselect();
 800ba90:	f7ff fdb0 	bl	800b5f4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	bf14      	ite	ne
 800ba9a:	2301      	movne	r3, #1
 800ba9c:	2300      	moveq	r3, #0
 800ba9e:	b2db      	uxtb	r3, r3
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	20000028 	.word	0x20000028
 800baac:	200008f8 	.word	0x200008f8

0800bab0 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
 800baba:	603b      	str	r3, [r7, #0]
 800babc:	4603      	mov	r3, r0
 800babe:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d102      	bne.n	800bacc <USER_SPI_write+0x1c>
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d101      	bne.n	800bad0 <USER_SPI_write+0x20>
 800bacc:	2304      	movs	r3, #4
 800bace:	e063      	b.n	800bb98 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800bad0:	4b33      	ldr	r3, [pc, #204]	; (800bba0 <USER_SPI_write+0xf0>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d001      	beq.n	800bae2 <USER_SPI_write+0x32>
 800bade:	2303      	movs	r3, #3
 800bae0:	e05a      	b.n	800bb98 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800bae2:	4b2f      	ldr	r3, [pc, #188]	; (800bba0 <USER_SPI_write+0xf0>)
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	f003 0304 	and.w	r3, r3, #4
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <USER_SPI_write+0x44>
 800baf0:	2302      	movs	r3, #2
 800baf2:	e051      	b.n	800bb98 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800baf4:	4b2b      	ldr	r3, [pc, #172]	; (800bba4 <USER_SPI_write+0xf4>)
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f003 0308 	and.w	r3, r3, #8
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d102      	bne.n	800bb06 <USER_SPI_write+0x56>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	025b      	lsls	r3, r3, #9
 800bb04:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d110      	bne.n	800bb2e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800bb0c:	6879      	ldr	r1, [r7, #4]
 800bb0e:	2018      	movs	r0, #24
 800bb10:	f7ff fdf7 	bl	800b702 <send_cmd>
 800bb14:	4603      	mov	r3, r0
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d136      	bne.n	800bb88 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800bb1a:	21fe      	movs	r1, #254	; 0xfe
 800bb1c:	68b8      	ldr	r0, [r7, #8]
 800bb1e:	f7ff fdbe 	bl	800b69e <xmit_datablock>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d02f      	beq.n	800bb88 <USER_SPI_write+0xd8>
			count = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	603b      	str	r3, [r7, #0]
 800bb2c:	e02c      	b.n	800bb88 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800bb2e:	4b1d      	ldr	r3, [pc, #116]	; (800bba4 <USER_SPI_write+0xf4>)
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	f003 0306 	and.w	r3, r3, #6
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d003      	beq.n	800bb42 <USER_SPI_write+0x92>
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	2097      	movs	r0, #151	; 0x97
 800bb3e:	f7ff fde0 	bl	800b702 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800bb42:	6879      	ldr	r1, [r7, #4]
 800bb44:	2019      	movs	r0, #25
 800bb46:	f7ff fddc 	bl	800b702 <send_cmd>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d11b      	bne.n	800bb88 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800bb50:	21fc      	movs	r1, #252	; 0xfc
 800bb52:	68b8      	ldr	r0, [r7, #8]
 800bb54:	f7ff fda3 	bl	800b69e <xmit_datablock>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d00a      	beq.n	800bb74 <USER_SPI_write+0xc4>
				buff += 512;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800bb64:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	603b      	str	r3, [r7, #0]
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d1ee      	bne.n	800bb50 <USER_SPI_write+0xa0>
 800bb72:	e000      	b.n	800bb76 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800bb74:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800bb76:	21fd      	movs	r1, #253	; 0xfd
 800bb78:	2000      	movs	r0, #0
 800bb7a:	f7ff fd90 	bl	800b69e <xmit_datablock>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d101      	bne.n	800bb88 <USER_SPI_write+0xd8>
 800bb84:	2301      	movs	r3, #1
 800bb86:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800bb88:	f7ff fd34 	bl	800b5f4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	bf14      	ite	ne
 800bb92:	2301      	movne	r3, #1
 800bb94:	2300      	moveq	r3, #0
 800bb96:	b2db      	uxtb	r3, r3
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3710      	adds	r7, #16
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}
 800bba0:	20000028 	.word	0x20000028
 800bba4:	200008f8 	.word	0x200008f8

0800bba8 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b08c      	sub	sp, #48	; 0x30
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	603a      	str	r2, [r7, #0]
 800bbb2:	71fb      	strb	r3, [r7, #7]
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800bbb8:	79fb      	ldrb	r3, [r7, #7]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <USER_SPI_ioctl+0x1a>
 800bbbe:	2304      	movs	r3, #4
 800bbc0:	e15a      	b.n	800be78 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800bbc2:	4baf      	ldr	r3, [pc, #700]	; (800be80 <USER_SPI_ioctl+0x2d8>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	f003 0301 	and.w	r3, r3, #1
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d001      	beq.n	800bbd4 <USER_SPI_ioctl+0x2c>
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	e151      	b.n	800be78 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800bbda:	79bb      	ldrb	r3, [r7, #6]
 800bbdc:	2b04      	cmp	r3, #4
 800bbde:	f200 8136 	bhi.w	800be4e <USER_SPI_ioctl+0x2a6>
 800bbe2:	a201      	add	r2, pc, #4	; (adr r2, 800bbe8 <USER_SPI_ioctl+0x40>)
 800bbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe8:	0800bbfd 	.word	0x0800bbfd
 800bbec:	0800bc11 	.word	0x0800bc11
 800bbf0:	0800be4f 	.word	0x0800be4f
 800bbf4:	0800bcbd 	.word	0x0800bcbd
 800bbf8:	0800bdb3 	.word	0x0800bdb3
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800bbfc:	f7ff fd0a 	bl	800b614 <spiselect>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 8127 	beq.w	800be56 <USER_SPI_ioctl+0x2ae>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800bc0e:	e122      	b.n	800be56 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800bc10:	2100      	movs	r1, #0
 800bc12:	2009      	movs	r0, #9
 800bc14:	f7ff fd75 	bl	800b702 <send_cmd>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f040 811d 	bne.w	800be5a <USER_SPI_ioctl+0x2b2>
 800bc20:	f107 030c 	add.w	r3, r7, #12
 800bc24:	2110      	movs	r1, #16
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff fd10 	bl	800b64c <rcvr_datablock>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	f000 8113 	beq.w	800be5a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800bc34:	7b3b      	ldrb	r3, [r7, #12]
 800bc36:	099b      	lsrs	r3, r3, #6
 800bc38:	b2db      	uxtb	r3, r3
 800bc3a:	2b01      	cmp	r3, #1
 800bc3c:	d111      	bne.n	800bc62 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800bc3e:	7d7b      	ldrb	r3, [r7, #21]
 800bc40:	461a      	mov	r2, r3
 800bc42:	7d3b      	ldrb	r3, [r7, #20]
 800bc44:	021b      	lsls	r3, r3, #8
 800bc46:	4413      	add	r3, r2
 800bc48:	461a      	mov	r2, r3
 800bc4a:	7cfb      	ldrb	r3, [r7, #19]
 800bc4c:	041b      	lsls	r3, r3, #16
 800bc4e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800bc52:	4413      	add	r3, r2
 800bc54:	3301      	adds	r3, #1
 800bc56:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800bc58:	69fb      	ldr	r3, [r7, #28]
 800bc5a:	029a      	lsls	r2, r3, #10
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	601a      	str	r2, [r3, #0]
 800bc60:	e028      	b.n	800bcb4 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800bc62:	7c7b      	ldrb	r3, [r7, #17]
 800bc64:	f003 030f 	and.w	r3, r3, #15
 800bc68:	b2da      	uxtb	r2, r3
 800bc6a:	7dbb      	ldrb	r3, [r7, #22]
 800bc6c:	09db      	lsrs	r3, r3, #7
 800bc6e:	b2db      	uxtb	r3, r3
 800bc70:	4413      	add	r3, r2
 800bc72:	b2da      	uxtb	r2, r3
 800bc74:	7d7b      	ldrb	r3, [r7, #21]
 800bc76:	005b      	lsls	r3, r3, #1
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	f003 0306 	and.w	r3, r3, #6
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	4413      	add	r3, r2
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	3302      	adds	r3, #2
 800bc86:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800bc8a:	7d3b      	ldrb	r3, [r7, #20]
 800bc8c:	099b      	lsrs	r3, r3, #6
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	461a      	mov	r2, r3
 800bc92:	7cfb      	ldrb	r3, [r7, #19]
 800bc94:	009b      	lsls	r3, r3, #2
 800bc96:	441a      	add	r2, r3
 800bc98:	7cbb      	ldrb	r3, [r7, #18]
 800bc9a:	029b      	lsls	r3, r3, #10
 800bc9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bca0:	4413      	add	r3, r2
 800bca2:	3301      	adds	r3, #1
 800bca4:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800bca6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bcaa:	3b09      	subs	r3, #9
 800bcac:	69fa      	ldr	r2, [r7, #28]
 800bcae:	409a      	lsls	r2, r3
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800bcba:	e0ce      	b.n	800be5a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800bcbc:	4b71      	ldr	r3, [pc, #452]	; (800be84 <USER_SPI_ioctl+0x2dc>)
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	f003 0304 	and.w	r3, r3, #4
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d031      	beq.n	800bd2c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800bcc8:	2100      	movs	r1, #0
 800bcca:	208d      	movs	r0, #141	; 0x8d
 800bccc:	f7ff fd19 	bl	800b702 <send_cmd>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f040 80c3 	bne.w	800be5e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800bcd8:	20ff      	movs	r0, #255	; 0xff
 800bcda:	f7ff fc1b 	bl	800b514 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800bcde:	f107 030c 	add.w	r3, r7, #12
 800bce2:	2110      	movs	r1, #16
 800bce4:	4618      	mov	r0, r3
 800bce6:	f7ff fcb1 	bl	800b64c <rcvr_datablock>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	f000 80b6 	beq.w	800be5e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800bcf2:	2330      	movs	r3, #48	; 0x30
 800bcf4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800bcf8:	e007      	b.n	800bd0a <USER_SPI_ioctl+0x162>
 800bcfa:	20ff      	movs	r0, #255	; 0xff
 800bcfc:	f7ff fc0a 	bl	800b514 <xchg_spi>
 800bd00:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bd04:	3b01      	subs	r3, #1
 800bd06:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800bd0a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d1f3      	bne.n	800bcfa <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800bd12:	7dbb      	ldrb	r3, [r7, #22]
 800bd14:	091b      	lsrs	r3, r3, #4
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	461a      	mov	r2, r3
 800bd1a:	2310      	movs	r3, #16
 800bd1c:	fa03 f202 	lsl.w	r2, r3, r2
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800bd24:	2300      	movs	r3, #0
 800bd26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800bd2a:	e098      	b.n	800be5e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	2009      	movs	r0, #9
 800bd30:	f7ff fce7 	bl	800b702 <send_cmd>
 800bd34:	4603      	mov	r3, r0
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	f040 8091 	bne.w	800be5e <USER_SPI_ioctl+0x2b6>
 800bd3c:	f107 030c 	add.w	r3, r7, #12
 800bd40:	2110      	movs	r1, #16
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7ff fc82 	bl	800b64c <rcvr_datablock>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f000 8087 	beq.w	800be5e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800bd50:	4b4c      	ldr	r3, [pc, #304]	; (800be84 <USER_SPI_ioctl+0x2dc>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	f003 0302 	and.w	r3, r3, #2
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d012      	beq.n	800bd82 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800bd5c:	7dbb      	ldrb	r3, [r7, #22]
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800bd64:	7dfa      	ldrb	r2, [r7, #23]
 800bd66:	09d2      	lsrs	r2, r2, #7
 800bd68:	b2d2      	uxtb	r2, r2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	7e7b      	ldrb	r3, [r7, #25]
 800bd70:	099b      	lsrs	r3, r3, #6
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	3b01      	subs	r3, #1
 800bd76:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	601a      	str	r2, [r3, #0]
 800bd80:	e013      	b.n	800bdaa <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800bd82:	7dbb      	ldrb	r3, [r7, #22]
 800bd84:	109b      	asrs	r3, r3, #2
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	f003 031f 	and.w	r3, r3, #31
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	7dfa      	ldrb	r2, [r7, #23]
 800bd90:	00d2      	lsls	r2, r2, #3
 800bd92:	f002 0218 	and.w	r2, r2, #24
 800bd96:	7df9      	ldrb	r1, [r7, #23]
 800bd98:	0949      	lsrs	r1, r1, #5
 800bd9a:	b2c9      	uxtb	r1, r1
 800bd9c:	440a      	add	r2, r1
 800bd9e:	3201      	adds	r2, #1
 800bda0:	fb02 f303 	mul.w	r3, r2, r3
 800bda4:	461a      	mov	r2, r3
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800bdb0:	e055      	b.n	800be5e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800bdb2:	4b34      	ldr	r3, [pc, #208]	; (800be84 <USER_SPI_ioctl+0x2dc>)
 800bdb4:	781b      	ldrb	r3, [r3, #0]
 800bdb6:	f003 0306 	and.w	r3, r3, #6
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d051      	beq.n	800be62 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800bdbe:	f107 020c 	add.w	r2, r7, #12
 800bdc2:	79fb      	ldrb	r3, [r7, #7]
 800bdc4:	210b      	movs	r1, #11
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7ff feee 	bl	800bba8 <USER_SPI_ioctl>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d149      	bne.n	800be66 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800bdd2:	7b3b      	ldrb	r3, [r7, #12]
 800bdd4:	099b      	lsrs	r3, r3, #6
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d104      	bne.n	800bde6 <USER_SPI_ioctl+0x23e>
 800bddc:	7dbb      	ldrb	r3, [r7, #22]
 800bdde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d041      	beq.n	800be6a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	623b      	str	r3, [r7, #32]
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf0:	6a3b      	ldr	r3, [r7, #32]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800bdf6:	4b23      	ldr	r3, [pc, #140]	; (800be84 <USER_SPI_ioctl+0x2dc>)
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	f003 0308 	and.w	r3, r3, #8
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d105      	bne.n	800be0e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800be02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be04:	025b      	lsls	r3, r3, #9
 800be06:	62bb      	str	r3, [r7, #40]	; 0x28
 800be08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0a:	025b      	lsls	r3, r3, #9
 800be0c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800be0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800be10:	2020      	movs	r0, #32
 800be12:	f7ff fc76 	bl	800b702 <send_cmd>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d128      	bne.n	800be6e <USER_SPI_ioctl+0x2c6>
 800be1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be1e:	2021      	movs	r0, #33	; 0x21
 800be20:	f7ff fc6f 	bl	800b702 <send_cmd>
 800be24:	4603      	mov	r3, r0
 800be26:	2b00      	cmp	r3, #0
 800be28:	d121      	bne.n	800be6e <USER_SPI_ioctl+0x2c6>
 800be2a:	2100      	movs	r1, #0
 800be2c:	2026      	movs	r0, #38	; 0x26
 800be2e:	f7ff fc68 	bl	800b702 <send_cmd>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	d11a      	bne.n	800be6e <USER_SPI_ioctl+0x2c6>
 800be38:	f247 5030 	movw	r0, #30000	; 0x7530
 800be3c:	f7ff fbb7 	bl	800b5ae <wait_ready>
 800be40:	4603      	mov	r3, r0
 800be42:	2b00      	cmp	r3, #0
 800be44:	d013      	beq.n	800be6e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800be46:	2300      	movs	r3, #0
 800be48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800be4c:	e00f      	b.n	800be6e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800be4e:	2304      	movs	r3, #4
 800be50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800be54:	e00c      	b.n	800be70 <USER_SPI_ioctl+0x2c8>
		break;
 800be56:	bf00      	nop
 800be58:	e00a      	b.n	800be70 <USER_SPI_ioctl+0x2c8>
		break;
 800be5a:	bf00      	nop
 800be5c:	e008      	b.n	800be70 <USER_SPI_ioctl+0x2c8>
		break;
 800be5e:	bf00      	nop
 800be60:	e006      	b.n	800be70 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800be62:	bf00      	nop
 800be64:	e004      	b.n	800be70 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800be66:	bf00      	nop
 800be68:	e002      	b.n	800be70 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800be6a:	bf00      	nop
 800be6c:	e000      	b.n	800be70 <USER_SPI_ioctl+0x2c8>
		break;
 800be6e:	bf00      	nop
	}

	despiselect();
 800be70:	f7ff fbc0 	bl	800b5f4 <despiselect>

	return res;
 800be74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3730      	adds	r7, #48	; 0x30
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bd80      	pop	{r7, pc}
 800be80:	20000028 	.word	0x20000028
 800be84:	200008f8 	.word	0x200008f8

0800be88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	4603      	mov	r3, r0
 800be90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800be92:	79fb      	ldrb	r3, [r7, #7]
 800be94:	4a08      	ldr	r2, [pc, #32]	; (800beb8 <disk_status+0x30>)
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	79fa      	ldrb	r2, [r7, #7]
 800bea0:	4905      	ldr	r1, [pc, #20]	; (800beb8 <disk_status+0x30>)
 800bea2:	440a      	add	r2, r1
 800bea4:	7a12      	ldrb	r2, [r2, #8]
 800bea6:	4610      	mov	r0, r2
 800bea8:	4798      	blx	r3
 800beaa:	4603      	mov	r3, r0
 800beac:	73fb      	strb	r3, [r7, #15]
  return stat;
 800beae:	7bfb      	ldrb	r3, [r7, #15]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	2000092c 	.word	0x2000092c

0800bebc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	4603      	mov	r3, r0
 800bec4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800beca:	79fb      	ldrb	r3, [r7, #7]
 800becc:	4a0d      	ldr	r2, [pc, #52]	; (800bf04 <disk_initialize+0x48>)
 800bece:	5cd3      	ldrb	r3, [r2, r3]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d111      	bne.n	800bef8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bed4:	79fb      	ldrb	r3, [r7, #7]
 800bed6:	4a0b      	ldr	r2, [pc, #44]	; (800bf04 <disk_initialize+0x48>)
 800bed8:	2101      	movs	r1, #1
 800beda:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	4a09      	ldr	r2, [pc, #36]	; (800bf04 <disk_initialize+0x48>)
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	4413      	add	r3, r2
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	79fa      	ldrb	r2, [r7, #7]
 800beea:	4906      	ldr	r1, [pc, #24]	; (800bf04 <disk_initialize+0x48>)
 800beec:	440a      	add	r2, r1
 800beee:	7a12      	ldrb	r2, [r2, #8]
 800bef0:	4610      	mov	r0, r2
 800bef2:	4798      	blx	r3
 800bef4:	4603      	mov	r3, r0
 800bef6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	2000092c 	.word	0x2000092c

0800bf08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bf08:	b590      	push	{r4, r7, lr}
 800bf0a:	b087      	sub	sp, #28
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	60b9      	str	r1, [r7, #8]
 800bf10:	607a      	str	r2, [r7, #4]
 800bf12:	603b      	str	r3, [r7, #0]
 800bf14:	4603      	mov	r3, r0
 800bf16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bf18:	7bfb      	ldrb	r3, [r7, #15]
 800bf1a:	4a0a      	ldr	r2, [pc, #40]	; (800bf44 <disk_read+0x3c>)
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	685b      	ldr	r3, [r3, #4]
 800bf22:	689c      	ldr	r4, [r3, #8]
 800bf24:	7bfb      	ldrb	r3, [r7, #15]
 800bf26:	4a07      	ldr	r2, [pc, #28]	; (800bf44 <disk_read+0x3c>)
 800bf28:	4413      	add	r3, r2
 800bf2a:	7a18      	ldrb	r0, [r3, #8]
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	47a0      	blx	r4
 800bf34:	4603      	mov	r3, r0
 800bf36:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	371c      	adds	r7, #28
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd90      	pop	{r4, r7, pc}
 800bf42:	bf00      	nop
 800bf44:	2000092c 	.word	0x2000092c

0800bf48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bf48:	b590      	push	{r4, r7, lr}
 800bf4a:	b087      	sub	sp, #28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60b9      	str	r1, [r7, #8]
 800bf50:	607a      	str	r2, [r7, #4]
 800bf52:	603b      	str	r3, [r7, #0]
 800bf54:	4603      	mov	r3, r0
 800bf56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bf58:	7bfb      	ldrb	r3, [r7, #15]
 800bf5a:	4a0a      	ldr	r2, [pc, #40]	; (800bf84 <disk_write+0x3c>)
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	68dc      	ldr	r4, [r3, #12]
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
 800bf66:	4a07      	ldr	r2, [pc, #28]	; (800bf84 <disk_write+0x3c>)
 800bf68:	4413      	add	r3, r2
 800bf6a:	7a18      	ldrb	r0, [r3, #8]
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	68b9      	ldr	r1, [r7, #8]
 800bf72:	47a0      	blx	r4
 800bf74:	4603      	mov	r3, r0
 800bf76:	75fb      	strb	r3, [r7, #23]
  return res;
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	371c      	adds	r7, #28
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd90      	pop	{r4, r7, pc}
 800bf82:	bf00      	nop
 800bf84:	2000092c 	.word	0x2000092c

0800bf88 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	603a      	str	r2, [r7, #0]
 800bf92:	71fb      	strb	r3, [r7, #7]
 800bf94:	460b      	mov	r3, r1
 800bf96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	4a09      	ldr	r2, [pc, #36]	; (800bfc0 <disk_ioctl+0x38>)
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	691b      	ldr	r3, [r3, #16]
 800bfa4:	79fa      	ldrb	r2, [r7, #7]
 800bfa6:	4906      	ldr	r1, [pc, #24]	; (800bfc0 <disk_ioctl+0x38>)
 800bfa8:	440a      	add	r2, r1
 800bfaa:	7a10      	ldrb	r0, [r2, #8]
 800bfac:	79b9      	ldrb	r1, [r7, #6]
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	4798      	blx	r3
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	73fb      	strb	r3, [r7, #15]
  return res;
 800bfb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3710      	adds	r7, #16
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}
 800bfc0:	2000092c 	.word	0x2000092c

0800bfc4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	3301      	adds	r3, #1
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bfd4:	89fb      	ldrh	r3, [r7, #14]
 800bfd6:	021b      	lsls	r3, r3, #8
 800bfd8:	b21a      	sxth	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	781b      	ldrb	r3, [r3, #0]
 800bfde:	b21b      	sxth	r3, r3
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	b21b      	sxth	r3, r3
 800bfe4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bfe6:	89fb      	ldrh	r3, [r7, #14]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3714      	adds	r7, #20
 800bfec:	46bd      	mov	sp, r7
 800bfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	3303      	adds	r3, #3
 800c000:	781b      	ldrb	r3, [r3, #0]
 800c002:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	021b      	lsls	r3, r3, #8
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	3202      	adds	r2, #2
 800c00c:	7812      	ldrb	r2, [r2, #0]
 800c00e:	4313      	orrs	r3, r2
 800c010:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	021b      	lsls	r3, r3, #8
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	3201      	adds	r2, #1
 800c01a:	7812      	ldrb	r2, [r2, #0]
 800c01c:	4313      	orrs	r3, r2
 800c01e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	021b      	lsls	r3, r3, #8
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	7812      	ldrb	r2, [r2, #0]
 800c028:	4313      	orrs	r3, r2
 800c02a:	60fb      	str	r3, [r7, #12]
	return rv;
 800c02c:	68fb      	ldr	r3, [r7, #12]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c03a:	b480      	push	{r7}
 800c03c:	b083      	sub	sp, #12
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	460b      	mov	r3, r1
 800c044:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	1c5a      	adds	r2, r3, #1
 800c04a:	607a      	str	r2, [r7, #4]
 800c04c:	887a      	ldrh	r2, [r7, #2]
 800c04e:	b2d2      	uxtb	r2, r2
 800c050:	701a      	strb	r2, [r3, #0]
 800c052:	887b      	ldrh	r3, [r7, #2]
 800c054:	0a1b      	lsrs	r3, r3, #8
 800c056:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	607a      	str	r2, [r7, #4]
 800c05e:	887a      	ldrh	r2, [r7, #2]
 800c060:	b2d2      	uxtb	r2, r2
 800c062:	701a      	strb	r2, [r3, #0]
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	1c5a      	adds	r2, r3, #1
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	b2d2      	uxtb	r2, r2
 800c084:	701a      	strb	r2, [r3, #0]
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	0a1b      	lsrs	r3, r3, #8
 800c08a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	607a      	str	r2, [r7, #4]
 800c092:	683a      	ldr	r2, [r7, #0]
 800c094:	b2d2      	uxtb	r2, r2
 800c096:	701a      	strb	r2, [r3, #0]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	0a1b      	lsrs	r3, r3, #8
 800c09c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	1c5a      	adds	r2, r3, #1
 800c0a2:	607a      	str	r2, [r7, #4]
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	b2d2      	uxtb	r2, r2
 800c0a8:	701a      	strb	r2, [r3, #0]
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	0a1b      	lsrs	r3, r3, #8
 800c0ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	1c5a      	adds	r2, r3, #1
 800c0b4:	607a      	str	r2, [r7, #4]
 800c0b6:	683a      	ldr	r2, [r7, #0]
 800c0b8:	b2d2      	uxtb	r2, r2
 800c0ba:	701a      	strb	r2, [r3, #0]
}
 800c0bc:	bf00      	nop
 800c0be:	370c      	adds	r7, #12
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c0c8:	b480      	push	{r7}
 800c0ca:	b087      	sub	sp, #28
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00d      	beq.n	800c0fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	1c53      	adds	r3, r2, #1
 800c0e6:	613b      	str	r3, [r7, #16]
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	1c59      	adds	r1, r3, #1
 800c0ec:	6179      	str	r1, [r7, #20]
 800c0ee:	7812      	ldrb	r2, [r2, #0]
 800c0f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	3b01      	subs	r3, #1
 800c0f6:	607b      	str	r3, [r7, #4]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d1f1      	bne.n	800c0e2 <mem_cpy+0x1a>
	}
}
 800c0fe:	bf00      	nop
 800c100:	371c      	adds	r7, #28
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c10a:	b480      	push	{r7}
 800c10c:	b087      	sub	sp, #28
 800c10e:	af00      	add	r7, sp, #0
 800c110:	60f8      	str	r0, [r7, #12]
 800c112:	60b9      	str	r1, [r7, #8]
 800c114:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	617a      	str	r2, [r7, #20]
 800c120:	68ba      	ldr	r2, [r7, #8]
 800c122:	b2d2      	uxtb	r2, r2
 800c124:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	3b01      	subs	r3, #1
 800c12a:	607b      	str	r3, [r7, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d1f3      	bne.n	800c11a <mem_set+0x10>
}
 800c132:	bf00      	nop
 800c134:	bf00      	nop
 800c136:	371c      	adds	r7, #28
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c140:	b480      	push	{r7}
 800c142:	b089      	sub	sp, #36	; 0x24
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	61fb      	str	r3, [r7, #28]
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c154:	2300      	movs	r3, #0
 800c156:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	1c5a      	adds	r2, r3, #1
 800c15c:	61fa      	str	r2, [r7, #28]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	4619      	mov	r1, r3
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	61ba      	str	r2, [r7, #24]
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	1acb      	subs	r3, r1, r3
 800c16c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3b01      	subs	r3, #1
 800c172:	607b      	str	r3, [r7, #4]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d002      	beq.n	800c180 <mem_cmp+0x40>
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d0eb      	beq.n	800c158 <mem_cmp+0x18>

	return r;
 800c180:	697b      	ldr	r3, [r7, #20]
}
 800c182:	4618      	mov	r0, r3
 800c184:	3724      	adds	r7, #36	; 0x24
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr

0800c18e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c18e:	b480      	push	{r7}
 800c190:	b083      	sub	sp, #12
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
 800c196:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c198:	e002      	b.n	800c1a0 <chk_chr+0x12>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	3301      	adds	r3, #1
 800c19e:	607b      	str	r3, [r7, #4]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d005      	beq.n	800c1b4 <chk_chr+0x26>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	781b      	ldrb	r3, [r3, #0]
 800c1ac:	461a      	mov	r2, r3
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d1f2      	bne.n	800c19a <chk_chr+0xc>
	return *str;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	781b      	ldrb	r3, [r3, #0]
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	370c      	adds	r7, #12
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d009      	beq.n	800c1e6 <lock_fs+0x22>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	68db      	ldr	r3, [r3, #12]
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f002 fb78 	bl	800e8cc <ff_req_grant>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <lock_fs+0x22>
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e000      	b.n	800c1e8 <lock_fs+0x24>
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00d      	beq.n	800c21e <unlock_fs+0x2e>
 800c202:	78fb      	ldrb	r3, [r7, #3]
 800c204:	2b0c      	cmp	r3, #12
 800c206:	d00a      	beq.n	800c21e <unlock_fs+0x2e>
 800c208:	78fb      	ldrb	r3, [r7, #3]
 800c20a:	2b0b      	cmp	r3, #11
 800c20c:	d007      	beq.n	800c21e <unlock_fs+0x2e>
 800c20e:	78fb      	ldrb	r3, [r7, #3]
 800c210:	2b0f      	cmp	r3, #15
 800c212:	d004      	beq.n	800c21e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	4618      	mov	r0, r3
 800c21a:	f002 fb6c 	bl	800e8f6 <ff_rel_grant>
	}
}
 800c21e:	bf00      	nop
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
	...

0800c228 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c232:	2300      	movs	r3, #0
 800c234:	60bb      	str	r3, [r7, #8]
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	e029      	b.n	800c290 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c23c:	4a27      	ldr	r2, [pc, #156]	; (800c2dc <chk_lock+0xb4>)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	011b      	lsls	r3, r3, #4
 800c242:	4413      	add	r3, r2
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d01d      	beq.n	800c286 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c24a:	4a24      	ldr	r2, [pc, #144]	; (800c2dc <chk_lock+0xb4>)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	011b      	lsls	r3, r3, #4
 800c250:	4413      	add	r3, r2
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	429a      	cmp	r2, r3
 800c25a:	d116      	bne.n	800c28a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c25c:	4a1f      	ldr	r2, [pc, #124]	; (800c2dc <chk_lock+0xb4>)
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	011b      	lsls	r3, r3, #4
 800c262:	4413      	add	r3, r2
 800c264:	3304      	adds	r3, #4
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d10c      	bne.n	800c28a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c270:	4a1a      	ldr	r2, [pc, #104]	; (800c2dc <chk_lock+0xb4>)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	011b      	lsls	r3, r3, #4
 800c276:	4413      	add	r3, r2
 800c278:	3308      	adds	r3, #8
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c280:	429a      	cmp	r2, r3
 800c282:	d102      	bne.n	800c28a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c284:	e007      	b.n	800c296 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c286:	2301      	movs	r3, #1
 800c288:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	3301      	adds	r3, #1
 800c28e:	60fb      	str	r3, [r7, #12]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d9d2      	bls.n	800c23c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	2b02      	cmp	r3, #2
 800c29a:	d109      	bne.n	800c2b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d102      	bne.n	800c2a8 <chk_lock+0x80>
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d101      	bne.n	800c2ac <chk_lock+0x84>
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	e010      	b.n	800c2ce <chk_lock+0xa6>
 800c2ac:	2312      	movs	r3, #18
 800c2ae:	e00e      	b.n	800c2ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d108      	bne.n	800c2c8 <chk_lock+0xa0>
 800c2b6:	4a09      	ldr	r2, [pc, #36]	; (800c2dc <chk_lock+0xb4>)
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	011b      	lsls	r3, r3, #4
 800c2bc:	4413      	add	r3, r2
 800c2be:	330c      	adds	r3, #12
 800c2c0:	881b      	ldrh	r3, [r3, #0]
 800c2c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2c6:	d101      	bne.n	800c2cc <chk_lock+0xa4>
 800c2c8:	2310      	movs	r3, #16
 800c2ca:	e000      	b.n	800c2ce <chk_lock+0xa6>
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3714      	adds	r7, #20
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d8:	4770      	bx	lr
 800c2da:	bf00      	nop
 800c2dc:	2000090c 	.word	0x2000090c

0800c2e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b083      	sub	sp, #12
 800c2e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	607b      	str	r3, [r7, #4]
 800c2ea:	e002      	b.n	800c2f2 <enq_lock+0x12>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	607b      	str	r3, [r7, #4]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d806      	bhi.n	800c306 <enq_lock+0x26>
 800c2f8:	4a09      	ldr	r2, [pc, #36]	; (800c320 <enq_lock+0x40>)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	011b      	lsls	r3, r3, #4
 800c2fe:	4413      	add	r3, r2
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d1f2      	bne.n	800c2ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2b02      	cmp	r3, #2
 800c30a:	bf14      	ite	ne
 800c30c:	2301      	movne	r3, #1
 800c30e:	2300      	moveq	r3, #0
 800c310:	b2db      	uxtb	r3, r3
}
 800c312:	4618      	mov	r0, r3
 800c314:	370c      	adds	r7, #12
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr
 800c31e:	bf00      	nop
 800c320:	2000090c 	.word	0x2000090c

0800c324 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c32e:	2300      	movs	r3, #0
 800c330:	60fb      	str	r3, [r7, #12]
 800c332:	e01f      	b.n	800c374 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c334:	4a41      	ldr	r2, [pc, #260]	; (800c43c <inc_lock+0x118>)
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	011b      	lsls	r3, r3, #4
 800c33a:	4413      	add	r3, r2
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	429a      	cmp	r2, r3
 800c344:	d113      	bne.n	800c36e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c346:	4a3d      	ldr	r2, [pc, #244]	; (800c43c <inc_lock+0x118>)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	011b      	lsls	r3, r3, #4
 800c34c:	4413      	add	r3, r2
 800c34e:	3304      	adds	r3, #4
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c356:	429a      	cmp	r2, r3
 800c358:	d109      	bne.n	800c36e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c35a:	4a38      	ldr	r2, [pc, #224]	; (800c43c <inc_lock+0x118>)
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	011b      	lsls	r3, r3, #4
 800c360:	4413      	add	r3, r2
 800c362:	3308      	adds	r3, #8
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d006      	beq.n	800c37c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3301      	adds	r3, #1
 800c372:	60fb      	str	r3, [r7, #12]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2b01      	cmp	r3, #1
 800c378:	d9dc      	bls.n	800c334 <inc_lock+0x10>
 800c37a:	e000      	b.n	800c37e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c37c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b02      	cmp	r3, #2
 800c382:	d132      	bne.n	800c3ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c384:	2300      	movs	r3, #0
 800c386:	60fb      	str	r3, [r7, #12]
 800c388:	e002      	b.n	800c390 <inc_lock+0x6c>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3301      	adds	r3, #1
 800c38e:	60fb      	str	r3, [r7, #12]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2b01      	cmp	r3, #1
 800c394:	d806      	bhi.n	800c3a4 <inc_lock+0x80>
 800c396:	4a29      	ldr	r2, [pc, #164]	; (800c43c <inc_lock+0x118>)
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	011b      	lsls	r3, r3, #4
 800c39c:	4413      	add	r3, r2
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d1f2      	bne.n	800c38a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	d101      	bne.n	800c3ae <inc_lock+0x8a>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e040      	b.n	800c430 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	4922      	ldr	r1, [pc, #136]	; (800c43c <inc_lock+0x118>)
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	011b      	lsls	r3, r3, #4
 800c3b8:	440b      	add	r3, r1
 800c3ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	689a      	ldr	r2, [r3, #8]
 800c3c0:	491e      	ldr	r1, [pc, #120]	; (800c43c <inc_lock+0x118>)
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	011b      	lsls	r3, r3, #4
 800c3c6:	440b      	add	r3, r1
 800c3c8:	3304      	adds	r3, #4
 800c3ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	695a      	ldr	r2, [r3, #20]
 800c3d0:	491a      	ldr	r1, [pc, #104]	; (800c43c <inc_lock+0x118>)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	011b      	lsls	r3, r3, #4
 800c3d6:	440b      	add	r3, r1
 800c3d8:	3308      	adds	r3, #8
 800c3da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c3dc:	4a17      	ldr	r2, [pc, #92]	; (800c43c <inc_lock+0x118>)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	011b      	lsls	r3, r3, #4
 800c3e2:	4413      	add	r3, r2
 800c3e4:	330c      	adds	r3, #12
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d009      	beq.n	800c404 <inc_lock+0xe0>
 800c3f0:	4a12      	ldr	r2, [pc, #72]	; (800c43c <inc_lock+0x118>)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	011b      	lsls	r3, r3, #4
 800c3f6:	4413      	add	r3, r2
 800c3f8:	330c      	adds	r3, #12
 800c3fa:	881b      	ldrh	r3, [r3, #0]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d001      	beq.n	800c404 <inc_lock+0xe0>
 800c400:	2300      	movs	r3, #0
 800c402:	e015      	b.n	800c430 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d108      	bne.n	800c41c <inc_lock+0xf8>
 800c40a:	4a0c      	ldr	r2, [pc, #48]	; (800c43c <inc_lock+0x118>)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	011b      	lsls	r3, r3, #4
 800c410:	4413      	add	r3, r2
 800c412:	330c      	adds	r3, #12
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	3301      	adds	r3, #1
 800c418:	b29a      	uxth	r2, r3
 800c41a:	e001      	b.n	800c420 <inc_lock+0xfc>
 800c41c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c420:	4906      	ldr	r1, [pc, #24]	; (800c43c <inc_lock+0x118>)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	011b      	lsls	r3, r3, #4
 800c426:	440b      	add	r3, r1
 800c428:	330c      	adds	r3, #12
 800c42a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3301      	adds	r3, #1
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	2000090c 	.word	0x2000090c

0800c440 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c440:	b480      	push	{r7}
 800c442:	b085      	sub	sp, #20
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	607b      	str	r3, [r7, #4]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d825      	bhi.n	800c4a0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c454:	4a17      	ldr	r2, [pc, #92]	; (800c4b4 <dec_lock+0x74>)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	011b      	lsls	r3, r3, #4
 800c45a:	4413      	add	r3, r2
 800c45c:	330c      	adds	r3, #12
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c462:	89fb      	ldrh	r3, [r7, #14]
 800c464:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c468:	d101      	bne.n	800c46e <dec_lock+0x2e>
 800c46a:	2300      	movs	r3, #0
 800c46c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c46e:	89fb      	ldrh	r3, [r7, #14]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <dec_lock+0x3a>
 800c474:	89fb      	ldrh	r3, [r7, #14]
 800c476:	3b01      	subs	r3, #1
 800c478:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c47a:	4a0e      	ldr	r2, [pc, #56]	; (800c4b4 <dec_lock+0x74>)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	011b      	lsls	r3, r3, #4
 800c480:	4413      	add	r3, r2
 800c482:	330c      	adds	r3, #12
 800c484:	89fa      	ldrh	r2, [r7, #14]
 800c486:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c488:	89fb      	ldrh	r3, [r7, #14]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d105      	bne.n	800c49a <dec_lock+0x5a>
 800c48e:	4a09      	ldr	r2, [pc, #36]	; (800c4b4 <dec_lock+0x74>)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	011b      	lsls	r3, r3, #4
 800c494:	4413      	add	r3, r2
 800c496:	2200      	movs	r2, #0
 800c498:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	737b      	strb	r3, [r7, #13]
 800c49e:	e001      	b.n	800c4a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c4a0:	2302      	movs	r3, #2
 800c4a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c4a4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3714      	adds	r7, #20
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	2000090c 	.word	0x2000090c

0800c4b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	60fb      	str	r3, [r7, #12]
 800c4c4:	e010      	b.n	800c4e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c4c6:	4a0d      	ldr	r2, [pc, #52]	; (800c4fc <clear_lock+0x44>)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	011b      	lsls	r3, r3, #4
 800c4cc:	4413      	add	r3, r2
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	429a      	cmp	r2, r3
 800c4d4:	d105      	bne.n	800c4e2 <clear_lock+0x2a>
 800c4d6:	4a09      	ldr	r2, [pc, #36]	; (800c4fc <clear_lock+0x44>)
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	011b      	lsls	r3, r3, #4
 800c4dc:	4413      	add	r3, r2
 800c4de:	2200      	movs	r2, #0
 800c4e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	60fb      	str	r3, [r7, #12]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2b01      	cmp	r3, #1
 800c4ec:	d9eb      	bls.n	800c4c6 <clear_lock+0xe>
	}
}
 800c4ee:	bf00      	nop
 800c4f0:	bf00      	nop
 800c4f2:	3714      	adds	r7, #20
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	2000090c 	.word	0x2000090c

0800c500 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c508:	2300      	movs	r3, #0
 800c50a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	78db      	ldrb	r3, [r3, #3]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d034      	beq.n	800c57e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c518:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	7858      	ldrb	r0, [r3, #1]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c524:	2301      	movs	r3, #1
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	f7ff fd0e 	bl	800bf48 <disk_write>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d002      	beq.n	800c538 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c532:	2301      	movs	r3, #1
 800c534:	73fb      	strb	r3, [r7, #15]
 800c536:	e022      	b.n	800c57e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c542:	697a      	ldr	r2, [r7, #20]
 800c544:	1ad2      	subs	r2, r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	69db      	ldr	r3, [r3, #28]
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d217      	bcs.n	800c57e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	789b      	ldrb	r3, [r3, #2]
 800c552:	613b      	str	r3, [r7, #16]
 800c554:	e010      	b.n	800c578 <sync_window+0x78>
					wsect += fs->fsize;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	69db      	ldr	r3, [r3, #28]
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	4413      	add	r3, r2
 800c55e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	7858      	ldrb	r0, [r3, #1]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c56a:	2301      	movs	r3, #1
 800c56c:	697a      	ldr	r2, [r7, #20]
 800c56e:	f7ff fceb 	bl	800bf48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c572:	693b      	ldr	r3, [r7, #16]
 800c574:	3b01      	subs	r3, #1
 800c576:	613b      	str	r3, [r7, #16]
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d8eb      	bhi.n	800c556 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c580:	4618      	mov	r0, r3
 800c582:	3718      	adds	r7, #24
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d01b      	beq.n	800c5d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7ff ffad 	bl	800c500 <sync_window>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d113      	bne.n	800c5d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	7858      	ldrb	r0, [r3, #1]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	f7ff fca3 	bl	800bf08 <disk_read>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d004      	beq.n	800c5d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c5c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800c5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5da:	4618      	mov	r0, r3
 800c5dc:	3710      	adds	r7, #16
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	bd80      	pop	{r7, pc}
	...

0800c5e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f7ff ff87 	bl	800c500 <sync_window>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d158      	bne.n	800c6ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	2b03      	cmp	r3, #3
 800c602:	d148      	bne.n	800c696 <sync_fs+0xb2>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	791b      	ldrb	r3, [r3, #4]
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d144      	bne.n	800c696 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	3334      	adds	r3, #52	; 0x34
 800c610:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c614:	2100      	movs	r1, #0
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff fd77 	bl	800c10a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3334      	adds	r3, #52	; 0x34
 800c620:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c624:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c628:	4618      	mov	r0, r3
 800c62a:	f7ff fd06 	bl	800c03a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	3334      	adds	r3, #52	; 0x34
 800c632:	4921      	ldr	r1, [pc, #132]	; (800c6b8 <sync_fs+0xd4>)
 800c634:	4618      	mov	r0, r3
 800c636:	f7ff fd1b 	bl	800c070 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	3334      	adds	r3, #52	; 0x34
 800c63e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c642:	491e      	ldr	r1, [pc, #120]	; (800c6bc <sync_fs+0xd8>)
 800c644:	4618      	mov	r0, r3
 800c646:	f7ff fd13 	bl	800c070 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	3334      	adds	r3, #52	; 0x34
 800c64e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	695b      	ldr	r3, [r3, #20]
 800c656:	4619      	mov	r1, r3
 800c658:	4610      	mov	r0, r2
 800c65a:	f7ff fd09 	bl	800c070 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	3334      	adds	r3, #52	; 0x34
 800c662:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	691b      	ldr	r3, [r3, #16]
 800c66a:	4619      	mov	r1, r3
 800c66c:	4610      	mov	r0, r2
 800c66e:	f7ff fcff 	bl	800c070 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a1b      	ldr	r3, [r3, #32]
 800c676:	1c5a      	adds	r2, r3, #1
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	7858      	ldrb	r0, [r3, #1]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c68a:	2301      	movs	r3, #1
 800c68c:	f7ff fc5c 	bl	800bf48 <disk_write>
			fs->fsi_flag = 0;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2200      	movs	r2, #0
 800c694:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	785b      	ldrb	r3, [r3, #1]
 800c69a:	2200      	movs	r2, #0
 800c69c:	2100      	movs	r1, #0
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f7ff fc72 	bl	800bf88 <disk_ioctl>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d001      	beq.n	800c6ae <sync_fs+0xca>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c6ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	41615252 	.word	0x41615252
 800c6bc:	61417272 	.word	0x61417272

0800c6c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b083      	sub	sp, #12
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	3b02      	subs	r3, #2
 800c6ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	699b      	ldr	r3, [r3, #24]
 800c6d4:	3b02      	subs	r3, #2
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d301      	bcc.n	800c6e0 <clust2sect+0x20>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	e008      	b.n	800c6f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	895b      	ldrh	r3, [r3, #10]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	fb03 f202 	mul.w	r2, r3, r2
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f0:	4413      	add	r3, r2
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	370c      	adds	r7, #12
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b086      	sub	sp, #24
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d904      	bls.n	800c71e <get_fat+0x20>
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	683a      	ldr	r2, [r7, #0]
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d302      	bcc.n	800c724 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c71e:	2301      	movs	r3, #1
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	e08f      	b.n	800c844 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c724:	f04f 33ff 	mov.w	r3, #4294967295
 800c728:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	2b03      	cmp	r3, #3
 800c730:	d062      	beq.n	800c7f8 <get_fat+0xfa>
 800c732:	2b03      	cmp	r3, #3
 800c734:	dc7c      	bgt.n	800c830 <get_fat+0x132>
 800c736:	2b01      	cmp	r3, #1
 800c738:	d002      	beq.n	800c740 <get_fat+0x42>
 800c73a:	2b02      	cmp	r3, #2
 800c73c:	d042      	beq.n	800c7c4 <get_fat+0xc6>
 800c73e:	e077      	b.n	800c830 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	085b      	lsrs	r3, r3, #1
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	4413      	add	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	0a5b      	lsrs	r3, r3, #9
 800c756:	4413      	add	r3, r2
 800c758:	4619      	mov	r1, r3
 800c75a:	6938      	ldr	r0, [r7, #16]
 800c75c:	f7ff ff14 	bl	800c588 <move_window>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d167      	bne.n	800c836 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	60fa      	str	r2, [r7, #12]
 800c76c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c770:	693a      	ldr	r2, [r7, #16]
 800c772:	4413      	add	r3, r2
 800c774:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c778:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	0a5b      	lsrs	r3, r3, #9
 800c782:	4413      	add	r3, r2
 800c784:	4619      	mov	r1, r3
 800c786:	6938      	ldr	r0, [r7, #16]
 800c788:	f7ff fefe 	bl	800c588 <move_window>
 800c78c:	4603      	mov	r3, r0
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d153      	bne.n	800c83a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c798:	693a      	ldr	r2, [r7, #16]
 800c79a:	4413      	add	r3, r2
 800c79c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c7a0:	021b      	lsls	r3, r3, #8
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	f003 0301 	and.w	r3, r3, #1
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d002      	beq.n	800c7ba <get_fat+0xbc>
 800c7b4:	68bb      	ldr	r3, [r7, #8]
 800c7b6:	091b      	lsrs	r3, r3, #4
 800c7b8:	e002      	b.n	800c7c0 <get_fat+0xc2>
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7c0:	617b      	str	r3, [r7, #20]
			break;
 800c7c2:	e03f      	b.n	800c844 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c7c4:	693b      	ldr	r3, [r7, #16]
 800c7c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	0a1b      	lsrs	r3, r3, #8
 800c7cc:	4413      	add	r3, r2
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6938      	ldr	r0, [r7, #16]
 800c7d2:	f7ff fed9 	bl	800c588 <move_window>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d130      	bne.n	800c83e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	005b      	lsls	r3, r3, #1
 800c7e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c7ea:	4413      	add	r3, r2
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7ff fbe9 	bl	800bfc4 <ld_word>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	617b      	str	r3, [r7, #20]
			break;
 800c7f6:	e025      	b.n	800c844 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	09db      	lsrs	r3, r3, #7
 800c800:	4413      	add	r3, r2
 800c802:	4619      	mov	r1, r3
 800c804:	6938      	ldr	r0, [r7, #16]
 800c806:	f7ff febf 	bl	800c588 <move_window>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d118      	bne.n	800c842 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c81e:	4413      	add	r3, r2
 800c820:	4618      	mov	r0, r3
 800c822:	f7ff fbe7 	bl	800bff4 <ld_dword>
 800c826:	4603      	mov	r3, r0
 800c828:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c82c:	617b      	str	r3, [r7, #20]
			break;
 800c82e:	e009      	b.n	800c844 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c830:	2301      	movs	r3, #1
 800c832:	617b      	str	r3, [r7, #20]
 800c834:	e006      	b.n	800c844 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c836:	bf00      	nop
 800c838:	e004      	b.n	800c844 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c83a:	bf00      	nop
 800c83c:	e002      	b.n	800c844 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c83e:	bf00      	nop
 800c840:	e000      	b.n	800c844 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c842:	bf00      	nop
		}
	}

	return val;
 800c844:	697b      	ldr	r3, [r7, #20]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c84e:	b590      	push	{r4, r7, lr}
 800c850:	b089      	sub	sp, #36	; 0x24
 800c852:	af00      	add	r7, sp, #0
 800c854:	60f8      	str	r0, [r7, #12]
 800c856:	60b9      	str	r1, [r7, #8]
 800c858:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c85a:	2302      	movs	r3, #2
 800c85c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2b01      	cmp	r3, #1
 800c862:	f240 80d9 	bls.w	800ca18 <put_fat+0x1ca>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	699b      	ldr	r3, [r3, #24]
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	f080 80d3 	bcs.w	800ca18 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	2b03      	cmp	r3, #3
 800c878:	f000 8096 	beq.w	800c9a8 <put_fat+0x15a>
 800c87c:	2b03      	cmp	r3, #3
 800c87e:	f300 80cb 	bgt.w	800ca18 <put_fat+0x1ca>
 800c882:	2b01      	cmp	r3, #1
 800c884:	d002      	beq.n	800c88c <put_fat+0x3e>
 800c886:	2b02      	cmp	r3, #2
 800c888:	d06e      	beq.n	800c968 <put_fat+0x11a>
 800c88a:	e0c5      	b.n	800ca18 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	61bb      	str	r3, [r7, #24]
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	085b      	lsrs	r3, r3, #1
 800c894:	69ba      	ldr	r2, [r7, #24]
 800c896:	4413      	add	r3, r2
 800c898:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	0a5b      	lsrs	r3, r3, #9
 800c8a2:	4413      	add	r3, r2
 800c8a4:	4619      	mov	r1, r3
 800c8a6:	68f8      	ldr	r0, [r7, #12]
 800c8a8:	f7ff fe6e 	bl	800c588 <move_window>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c8b0:	7ffb      	ldrb	r3, [r7, #31]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f040 80a9 	bne.w	800ca0a <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	1c59      	adds	r1, r3, #1
 800c8c2:	61b9      	str	r1, [r7, #24]
 800c8c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8c8:	4413      	add	r3, r2
 800c8ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	f003 0301 	and.w	r3, r3, #1
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00d      	beq.n	800c8f2 <put_fat+0xa4>
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	b25b      	sxtb	r3, r3
 800c8dc:	f003 030f 	and.w	r3, r3, #15
 800c8e0:	b25a      	sxtb	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	011b      	lsls	r3, r3, #4
 800c8e8:	b25b      	sxtb	r3, r3
 800c8ea:	4313      	orrs	r3, r2
 800c8ec:	b25b      	sxtb	r3, r3
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	e001      	b.n	800c8f6 <put_fat+0xa8>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	697a      	ldr	r2, [r7, #20]
 800c8f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2201      	movs	r2, #1
 800c8fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c904:	69bb      	ldr	r3, [r7, #24]
 800c906:	0a5b      	lsrs	r3, r3, #9
 800c908:	4413      	add	r3, r2
 800c90a:	4619      	mov	r1, r3
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f7ff fe3b 	bl	800c588 <move_window>
 800c912:	4603      	mov	r3, r0
 800c914:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c916:	7ffb      	ldrb	r3, [r7, #31]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d178      	bne.n	800ca0e <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c928:	4413      	add	r3, r2
 800c92a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	f003 0301 	and.w	r3, r3, #1
 800c932:	2b00      	cmp	r3, #0
 800c934:	d003      	beq.n	800c93e <put_fat+0xf0>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	091b      	lsrs	r3, r3, #4
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	e00e      	b.n	800c95c <put_fat+0x10e>
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	b25b      	sxtb	r3, r3
 800c944:	f023 030f 	bic.w	r3, r3, #15
 800c948:	b25a      	sxtb	r2, r3
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	0a1b      	lsrs	r3, r3, #8
 800c94e:	b25b      	sxtb	r3, r3
 800c950:	f003 030f 	and.w	r3, r3, #15
 800c954:	b25b      	sxtb	r3, r3
 800c956:	4313      	orrs	r3, r2
 800c958:	b25b      	sxtb	r3, r3
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	697a      	ldr	r2, [r7, #20]
 800c95e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2201      	movs	r2, #1
 800c964:	70da      	strb	r2, [r3, #3]
			break;
 800c966:	e057      	b.n	800ca18 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	0a1b      	lsrs	r3, r3, #8
 800c970:	4413      	add	r3, r2
 800c972:	4619      	mov	r1, r3
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f7ff fe07 	bl	800c588 <move_window>
 800c97a:	4603      	mov	r3, r0
 800c97c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c97e:	7ffb      	ldrb	r3, [r7, #31]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d146      	bne.n	800ca12 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	005b      	lsls	r3, r3, #1
 800c98e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c992:	4413      	add	r3, r2
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	b292      	uxth	r2, r2
 800c998:	4611      	mov	r1, r2
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff fb4d 	bl	800c03a <st_word>
			fs->wflag = 1;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	70da      	strb	r2, [r3, #3]
			break;
 800c9a6:	e037      	b.n	800ca18 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	09db      	lsrs	r3, r3, #7
 800c9b0:	4413      	add	r3, r2
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	f7ff fde7 	bl	800c588 <move_window>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c9be:	7ffb      	ldrb	r3, [r7, #31]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d128      	bne.n	800ca16 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c9d8:	4413      	add	r3, r2
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff fb0a 	bl	800bff4 <ld_dword>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c9e6:	4323      	orrs	r3, r4
 800c9e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	009b      	lsls	r3, r3, #2
 800c9f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c9f8:	4413      	add	r3, r2
 800c9fa:	6879      	ldr	r1, [r7, #4]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f7ff fb37 	bl	800c070 <st_dword>
			fs->wflag = 1;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2201      	movs	r2, #1
 800ca06:	70da      	strb	r2, [r3, #3]
			break;
 800ca08:	e006      	b.n	800ca18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca0a:	bf00      	nop
 800ca0c:	e004      	b.n	800ca18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca0e:	bf00      	nop
 800ca10:	e002      	b.n	800ca18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca12:	bf00      	nop
 800ca14:	e000      	b.n	800ca18 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ca16:	bf00      	nop
		}
	}
	return res;
 800ca18:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3724      	adds	r7, #36	; 0x24
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd90      	pop	{r4, r7, pc}

0800ca22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b088      	sub	sp, #32
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	60b9      	str	r1, [r7, #8]
 800ca2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	2b01      	cmp	r3, #1
 800ca3c:	d904      	bls.n	800ca48 <remove_chain+0x26>
 800ca3e:	69bb      	ldr	r3, [r7, #24]
 800ca40:	699b      	ldr	r3, [r3, #24]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d301      	bcc.n	800ca4c <remove_chain+0x2a>
 800ca48:	2302      	movs	r3, #2
 800ca4a:	e04b      	b.n	800cae4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00c      	beq.n	800ca6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ca52:	f04f 32ff 	mov.w	r2, #4294967295
 800ca56:	6879      	ldr	r1, [r7, #4]
 800ca58:	69b8      	ldr	r0, [r7, #24]
 800ca5a:	f7ff fef8 	bl	800c84e <put_fat>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ca62:	7ffb      	ldrb	r3, [r7, #31]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <remove_chain+0x4a>
 800ca68:	7ffb      	ldrb	r3, [r7, #31]
 800ca6a:	e03b      	b.n	800cae4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ca6c:	68b9      	ldr	r1, [r7, #8]
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f7ff fe45 	bl	800c6fe <get_fat>
 800ca74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d031      	beq.n	800cae0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d101      	bne.n	800ca86 <remove_chain+0x64>
 800ca82:	2302      	movs	r3, #2
 800ca84:	e02e      	b.n	800cae4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca8c:	d101      	bne.n	800ca92 <remove_chain+0x70>
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e028      	b.n	800cae4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ca92:	2200      	movs	r2, #0
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	69b8      	ldr	r0, [r7, #24]
 800ca98:	f7ff fed9 	bl	800c84e <put_fat>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800caa0:	7ffb      	ldrb	r3, [r7, #31]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <remove_chain+0x88>
 800caa6:	7ffb      	ldrb	r3, [r7, #31]
 800caa8:	e01c      	b.n	800cae4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	695a      	ldr	r2, [r3, #20]
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	699b      	ldr	r3, [r3, #24]
 800cab2:	3b02      	subs	r3, #2
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d20b      	bcs.n	800cad0 <remove_chain+0xae>
			fs->free_clst++;
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	695b      	ldr	r3, [r3, #20]
 800cabc:	1c5a      	adds	r2, r3, #1
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800cac2:	69bb      	ldr	r3, [r7, #24]
 800cac4:	791b      	ldrb	r3, [r3, #4]
 800cac6:	f043 0301 	orr.w	r3, r3, #1
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	699b      	ldr	r3, [r3, #24]
 800cad8:	68ba      	ldr	r2, [r7, #8]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d3c6      	bcc.n	800ca6c <remove_chain+0x4a>
 800cade:	e000      	b.n	800cae2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800cae0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3720      	adds	r7, #32
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b088      	sub	sp, #32
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
 800caf4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10d      	bne.n	800cb1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	691b      	ldr	r3, [r3, #16]
 800cb06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d004      	beq.n	800cb18 <create_chain+0x2c>
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	699b      	ldr	r3, [r3, #24]
 800cb12:	69ba      	ldr	r2, [r7, #24]
 800cb14:	429a      	cmp	r2, r3
 800cb16:	d31b      	bcc.n	800cb50 <create_chain+0x64>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	61bb      	str	r3, [r7, #24]
 800cb1c:	e018      	b.n	800cb50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800cb1e:	6839      	ldr	r1, [r7, #0]
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7ff fdec 	bl	800c6fe <get_fat>
 800cb26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d801      	bhi.n	800cb32 <create_chain+0x46>
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e070      	b.n	800cc14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb38:	d101      	bne.n	800cb3e <create_chain+0x52>
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	e06a      	b.n	800cc14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	699b      	ldr	r3, [r3, #24]
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d201      	bcs.n	800cb4c <create_chain+0x60>
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	e063      	b.n	800cc14 <create_chain+0x128>
		scl = clst;
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	3301      	adds	r3, #1
 800cb58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	699b      	ldr	r3, [r3, #24]
 800cb5e:	69fa      	ldr	r2, [r7, #28]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d307      	bcc.n	800cb74 <create_chain+0x88>
				ncl = 2;
 800cb64:	2302      	movs	r3, #2
 800cb66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800cb68:	69fa      	ldr	r2, [r7, #28]
 800cb6a:	69bb      	ldr	r3, [r7, #24]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d901      	bls.n	800cb74 <create_chain+0x88>
 800cb70:	2300      	movs	r3, #0
 800cb72:	e04f      	b.n	800cc14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800cb74:	69f9      	ldr	r1, [r7, #28]
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff fdc1 	bl	800c6fe <get_fat>
 800cb7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00e      	beq.n	800cba2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d003      	beq.n	800cb92 <create_chain+0xa6>
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb90:	d101      	bne.n	800cb96 <create_chain+0xaa>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	e03e      	b.n	800cc14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800cb96:	69fa      	ldr	r2, [r7, #28]
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	429a      	cmp	r2, r3
 800cb9c:	d1da      	bne.n	800cb54 <create_chain+0x68>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	e038      	b.n	800cc14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800cba2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800cba4:	f04f 32ff 	mov.w	r2, #4294967295
 800cba8:	69f9      	ldr	r1, [r7, #28]
 800cbaa:	6938      	ldr	r0, [r7, #16]
 800cbac:	f7ff fe4f 	bl	800c84e <put_fat>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800cbb4:	7dfb      	ldrb	r3, [r7, #23]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d109      	bne.n	800cbce <create_chain+0xe2>
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d006      	beq.n	800cbce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800cbc0:	69fa      	ldr	r2, [r7, #28]
 800cbc2:	6839      	ldr	r1, [r7, #0]
 800cbc4:	6938      	ldr	r0, [r7, #16]
 800cbc6:	f7ff fe42 	bl	800c84e <put_fat>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800cbce:	7dfb      	ldrb	r3, [r7, #23]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d116      	bne.n	800cc02 <create_chain+0x116>
		fs->last_clst = ncl;
 800cbd4:	693b      	ldr	r3, [r7, #16]
 800cbd6:	69fa      	ldr	r2, [r7, #28]
 800cbd8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800cbda:	693b      	ldr	r3, [r7, #16]
 800cbdc:	695a      	ldr	r2, [r3, #20]
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	699b      	ldr	r3, [r3, #24]
 800cbe2:	3b02      	subs	r3, #2
 800cbe4:	429a      	cmp	r2, r3
 800cbe6:	d804      	bhi.n	800cbf2 <create_chain+0x106>
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	695b      	ldr	r3, [r3, #20]
 800cbec:	1e5a      	subs	r2, r3, #1
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	791b      	ldrb	r3, [r3, #4]
 800cbf6:	f043 0301 	orr.w	r3, r3, #1
 800cbfa:	b2da      	uxtb	r2, r3
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	711a      	strb	r2, [r3, #4]
 800cc00:	e007      	b.n	800cc12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800cc02:	7dfb      	ldrb	r3, [r7, #23]
 800cc04:	2b01      	cmp	r3, #1
 800cc06:	d102      	bne.n	800cc0e <create_chain+0x122>
 800cc08:	f04f 33ff 	mov.w	r3, #4294967295
 800cc0c:	e000      	b.n	800cc10 <create_chain+0x124>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800cc12:	69fb      	ldr	r3, [r7, #28]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3720      	adds	r7, #32
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b087      	sub	sp, #28
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc30:	3304      	adds	r3, #4
 800cc32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	0a5b      	lsrs	r3, r3, #9
 800cc38:	68fa      	ldr	r2, [r7, #12]
 800cc3a:	8952      	ldrh	r2, [r2, #10]
 800cc3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	1d1a      	adds	r2, r3, #4
 800cc46:	613a      	str	r2, [r7, #16]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <clmt_clust+0x3a>
 800cc52:	2300      	movs	r3, #0
 800cc54:	e010      	b.n	800cc78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800cc56:	697a      	ldr	r2, [r7, #20]
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d307      	bcc.n	800cc6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800cc5e:	697a      	ldr	r2, [r7, #20]
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	1ad3      	subs	r3, r2, r3
 800cc64:	617b      	str	r3, [r7, #20]
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	3304      	adds	r3, #4
 800cc6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cc6c:	e7e9      	b.n	800cc42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800cc6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	4413      	add	r3, r2
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	371c      	adds	r7, #28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc9a:	d204      	bcs.n	800cca6 <dir_sdi+0x22>
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	f003 031f 	and.w	r3, r3, #31
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d001      	beq.n	800ccaa <dir_sdi+0x26>
		return FR_INT_ERR;
 800cca6:	2302      	movs	r3, #2
 800cca8:	e063      	b.n	800cd72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d106      	bne.n	800ccca <dir_sdi+0x46>
 800ccbc:	693b      	ldr	r3, [r7, #16]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	2b02      	cmp	r3, #2
 800ccc2:	d902      	bls.n	800ccca <dir_sdi+0x46>
		clst = fs->dirbase;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d10c      	bne.n	800ccea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	095b      	lsrs	r3, r3, #5
 800ccd4:	693a      	ldr	r2, [r7, #16]
 800ccd6:	8912      	ldrh	r2, [r2, #8]
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d301      	bcc.n	800cce0 <dir_sdi+0x5c>
 800ccdc:	2302      	movs	r3, #2
 800ccde:	e048      	b.n	800cd72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	61da      	str	r2, [r3, #28]
 800cce8:	e029      	b.n	800cd3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	895b      	ldrh	r3, [r3, #10]
 800ccee:	025b      	lsls	r3, r3, #9
 800ccf0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ccf2:	e019      	b.n	800cd28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6979      	ldr	r1, [r7, #20]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff fd00 	bl	800c6fe <get_fat>
 800ccfe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd06:	d101      	bne.n	800cd0c <dir_sdi+0x88>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e032      	b.n	800cd72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2b01      	cmp	r3, #1
 800cd10:	d904      	bls.n	800cd1c <dir_sdi+0x98>
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	699b      	ldr	r3, [r3, #24]
 800cd16:	697a      	ldr	r2, [r7, #20]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d301      	bcc.n	800cd20 <dir_sdi+0x9c>
 800cd1c:	2302      	movs	r3, #2
 800cd1e:	e028      	b.n	800cd72 <dir_sdi+0xee>
			ofs -= csz;
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	1ad3      	subs	r3, r2, r3
 800cd26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800cd28:	683a      	ldr	r2, [r7, #0]
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d2e1      	bcs.n	800ccf4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800cd30:	6979      	ldr	r1, [r7, #20]
 800cd32:	6938      	ldr	r0, [r7, #16]
 800cd34:	f7ff fcc4 	bl	800c6c0 <clust2sect>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	697a      	ldr	r2, [r7, #20]
 800cd42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	69db      	ldr	r3, [r3, #28]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d101      	bne.n	800cd50 <dir_sdi+0xcc>
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	e010      	b.n	800cd72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	69da      	ldr	r2, [r3, #28]
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	0a5b      	lsrs	r3, r3, #9
 800cd58:	441a      	add	r2, r3
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd6a:	441a      	add	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cd70:	2300      	movs	r3, #0
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3718      	adds	r7, #24
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}

0800cd7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cd7a:	b580      	push	{r7, lr}
 800cd7c:	b086      	sub	sp, #24
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	6078      	str	r0, [r7, #4]
 800cd82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	695b      	ldr	r3, [r3, #20]
 800cd8e:	3320      	adds	r3, #32
 800cd90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	69db      	ldr	r3, [r3, #28]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d003      	beq.n	800cda2 <dir_next+0x28>
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cda0:	d301      	bcc.n	800cda6 <dir_next+0x2c>
 800cda2:	2304      	movs	r3, #4
 800cda4:	e0aa      	b.n	800cefc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cda6:	68bb      	ldr	r3, [r7, #8]
 800cda8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	f040 8098 	bne.w	800cee2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	699b      	ldr	r3, [r3, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10b      	bne.n	800cddc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	095b      	lsrs	r3, r3, #5
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	8912      	ldrh	r2, [r2, #8]
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	f0c0 8088 	bcc.w	800cee2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	61da      	str	r2, [r3, #28]
 800cdd8:	2304      	movs	r3, #4
 800cdda:	e08f      	b.n	800cefc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	0a5b      	lsrs	r3, r3, #9
 800cde0:	68fa      	ldr	r2, [r7, #12]
 800cde2:	8952      	ldrh	r2, [r2, #10]
 800cde4:	3a01      	subs	r2, #1
 800cde6:	4013      	ands	r3, r2
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d17a      	bne.n	800cee2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	f7ff fc82 	bl	800c6fe <get_fat>
 800cdfa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d801      	bhi.n	800ce06 <dir_next+0x8c>
 800ce02:	2302      	movs	r3, #2
 800ce04:	e07a      	b.n	800cefc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0c:	d101      	bne.n	800ce12 <dir_next+0x98>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e074      	b.n	800cefc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	699b      	ldr	r3, [r3, #24]
 800ce16:	697a      	ldr	r2, [r7, #20]
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d358      	bcc.n	800cece <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d104      	bne.n	800ce2c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2200      	movs	r2, #0
 800ce26:	61da      	str	r2, [r3, #28]
 800ce28:	2304      	movs	r3, #4
 800ce2a:	e067      	b.n	800cefc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	699b      	ldr	r3, [r3, #24]
 800ce32:	4619      	mov	r1, r3
 800ce34:	4610      	mov	r0, r2
 800ce36:	f7ff fe59 	bl	800caec <create_chain>
 800ce3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d101      	bne.n	800ce46 <dir_next+0xcc>
 800ce42:	2307      	movs	r3, #7
 800ce44:	e05a      	b.n	800cefc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d101      	bne.n	800ce50 <dir_next+0xd6>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e055      	b.n	800cefc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce56:	d101      	bne.n	800ce5c <dir_next+0xe2>
 800ce58:	2301      	movs	r3, #1
 800ce5a:	e04f      	b.n	800cefc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f7ff fb4f 	bl	800c500 <sync_window>
 800ce62:	4603      	mov	r3, r0
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d001      	beq.n	800ce6c <dir_next+0xf2>
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e047      	b.n	800cefc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	3334      	adds	r3, #52	; 0x34
 800ce70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce74:	2100      	movs	r1, #0
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7ff f947 	bl	800c10a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	613b      	str	r3, [r7, #16]
 800ce80:	6979      	ldr	r1, [r7, #20]
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f7ff fc1c 	bl	800c6c0 <clust2sect>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	631a      	str	r2, [r3, #48]	; 0x30
 800ce8e:	e012      	b.n	800ceb6 <dir_next+0x13c>
						fs->wflag = 1;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2201      	movs	r2, #1
 800ce94:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ce96:	68f8      	ldr	r0, [r7, #12]
 800ce98:	f7ff fb32 	bl	800c500 <sync_window>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d001      	beq.n	800cea6 <dir_next+0x12c>
 800cea2:	2301      	movs	r3, #1
 800cea4:	e02a      	b.n	800cefc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	3301      	adds	r3, #1
 800ceaa:	613b      	str	r3, [r7, #16]
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb0:	1c5a      	adds	r2, r3, #1
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	631a      	str	r2, [r3, #48]	; 0x30
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	895b      	ldrh	r3, [r3, #10]
 800ceba:	461a      	mov	r2, r3
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d3e6      	bcc.n	800ce90 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	1ad2      	subs	r2, r2, r3
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ced4:	6979      	ldr	r1, [r7, #20]
 800ced6:	68f8      	ldr	r0, [r7, #12]
 800ced8:	f7ff fbf2 	bl	800c6c0 <clust2sect>
 800cedc:	4602      	mov	r2, r0
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ceee:	68bb      	ldr	r3, [r7, #8]
 800cef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef4:	441a      	add	r2, r3
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3718      	adds	r7, #24
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b086      	sub	sp, #24
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
 800cf0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cf14:	2100      	movs	r1, #0
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f7ff feb4 	bl	800cc84 <dir_sdi>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf20:	7dfb      	ldrb	r3, [r7, #23]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d12b      	bne.n	800cf7e <dir_alloc+0x7a>
		n = 0;
 800cf26:	2300      	movs	r3, #0
 800cf28:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	68f8      	ldr	r0, [r7, #12]
 800cf32:	f7ff fb29 	bl	800c588 <move_window>
 800cf36:	4603      	mov	r3, r0
 800cf38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf3a:	7dfb      	ldrb	r3, [r7, #23]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d11d      	bne.n	800cf7c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6a1b      	ldr	r3, [r3, #32]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2be5      	cmp	r3, #229	; 0xe5
 800cf48:	d004      	beq.n	800cf54 <dir_alloc+0x50>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6a1b      	ldr	r3, [r3, #32]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d107      	bne.n	800cf64 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	3301      	adds	r3, #1
 800cf58:	613b      	str	r3, [r7, #16]
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d102      	bne.n	800cf68 <dir_alloc+0x64>
 800cf62:	e00c      	b.n	800cf7e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cf64:	2300      	movs	r3, #0
 800cf66:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cf68:	2101      	movs	r1, #1
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7ff ff05 	bl	800cd7a <dir_next>
 800cf70:	4603      	mov	r3, r0
 800cf72:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cf74:	7dfb      	ldrb	r3, [r7, #23]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d0d7      	beq.n	800cf2a <dir_alloc+0x26>
 800cf7a:	e000      	b.n	800cf7e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cf7c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cf7e:	7dfb      	ldrb	r3, [r7, #23]
 800cf80:	2b04      	cmp	r3, #4
 800cf82:	d101      	bne.n	800cf88 <dir_alloc+0x84>
 800cf84:	2307      	movs	r3, #7
 800cf86:	75fb      	strb	r3, [r7, #23]
	return res;
 800cf88:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3718      	adds	r7, #24
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b084      	sub	sp, #16
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
 800cf9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	331a      	adds	r3, #26
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7ff f80f 	bl	800bfc4 <ld_word>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b03      	cmp	r3, #3
 800cfb0:	d109      	bne.n	800cfc6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	3314      	adds	r3, #20
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7ff f804 	bl	800bfc4 <ld_word>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	041b      	lsls	r3, r3, #16
 800cfc0:	68fa      	ldr	r2, [r7, #12]
 800cfc2:	4313      	orrs	r3, r2
 800cfc4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3710      	adds	r7, #16
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	331a      	adds	r3, #26
 800cfe0:	687a      	ldr	r2, [r7, #4]
 800cfe2:	b292      	uxth	r2, r2
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f7ff f827 	bl	800c03a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	781b      	ldrb	r3, [r3, #0]
 800cff0:	2b03      	cmp	r3, #3
 800cff2:	d109      	bne.n	800d008 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	f103 0214 	add.w	r2, r3, #20
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	0c1b      	lsrs	r3, r3, #16
 800cffe:	b29b      	uxth	r3, r3
 800d000:	4619      	mov	r1, r3
 800d002:	4610      	mov	r0, r2
 800d004:	f7ff f819 	bl	800c03a <st_word>
	}
}
 800d008:	bf00      	nop
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d01e:	2100      	movs	r1, #0
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff fe2f 	bl	800cc84 <dir_sdi>
 800d026:	4603      	mov	r3, r0
 800d028:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d02a:	7dfb      	ldrb	r3, [r7, #23]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d001      	beq.n	800d034 <dir_find+0x24>
 800d030:	7dfb      	ldrb	r3, [r7, #23]
 800d032:	e03e      	b.n	800d0b2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	69db      	ldr	r3, [r3, #28]
 800d038:	4619      	mov	r1, r3
 800d03a:	6938      	ldr	r0, [r7, #16]
 800d03c:	f7ff faa4 	bl	800c588 <move_window>
 800d040:	4603      	mov	r3, r0
 800d042:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d044:	7dfb      	ldrb	r3, [r7, #23]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d12f      	bne.n	800d0aa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a1b      	ldr	r3, [r3, #32]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d052:	7bfb      	ldrb	r3, [r7, #15]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d102      	bne.n	800d05e <dir_find+0x4e>
 800d058:	2304      	movs	r3, #4
 800d05a:	75fb      	strb	r3, [r7, #23]
 800d05c:	e028      	b.n	800d0b0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	330b      	adds	r3, #11
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d06a:	b2da      	uxtb	r2, r3
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6a1b      	ldr	r3, [r3, #32]
 800d074:	330b      	adds	r3, #11
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	f003 0308 	and.w	r3, r3, #8
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10a      	bne.n	800d096 <dir_find+0x86>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	6a18      	ldr	r0, [r3, #32]
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	3324      	adds	r3, #36	; 0x24
 800d088:	220b      	movs	r2, #11
 800d08a:	4619      	mov	r1, r3
 800d08c:	f7ff f858 	bl	800c140 <mem_cmp>
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d00b      	beq.n	800d0ae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d096:	2100      	movs	r1, #0
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f7ff fe6e 	bl	800cd7a <dir_next>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d0a2:	7dfb      	ldrb	r3, [r7, #23]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0c5      	beq.n	800d034 <dir_find+0x24>
 800d0a8:	e002      	b.n	800d0b0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d0aa:	bf00      	nop
 800d0ac:	e000      	b.n	800d0b0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d0ae:	bf00      	nop

	return res;
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	3718      	adds	r7, #24
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b084      	sub	sp, #16
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7ff ff1a 	bl	800cf04 <dir_alloc>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d0d4:	7bfb      	ldrb	r3, [r7, #15]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d11c      	bne.n	800d114 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	69db      	ldr	r3, [r3, #28]
 800d0de:	4619      	mov	r1, r3
 800d0e0:	68b8      	ldr	r0, [r7, #8]
 800d0e2:	f7ff fa51 	bl	800c588 <move_window>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d111      	bne.n	800d114 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a1b      	ldr	r3, [r3, #32]
 800d0f4:	2220      	movs	r2, #32
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7ff f806 	bl	800c10a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a18      	ldr	r0, [r3, #32]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	3324      	adds	r3, #36	; 0x24
 800d106:	220b      	movs	r2, #11
 800d108:	4619      	mov	r1, r3
 800d10a:	f7fe ffdd 	bl	800c0c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	2201      	movs	r2, #1
 800d112:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d114:	7bfb      	ldrb	r3, [r7, #15]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3710      	adds	r7, #16
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
	...

0800d120 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	60fb      	str	r3, [r7, #12]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	3324      	adds	r3, #36	; 0x24
 800d134:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d136:	220b      	movs	r2, #11
 800d138:	2120      	movs	r1, #32
 800d13a:	68b8      	ldr	r0, [r7, #8]
 800d13c:	f7fe ffe5 	bl	800c10a <mem_set>
	si = i = 0; ni = 8;
 800d140:	2300      	movs	r3, #0
 800d142:	613b      	str	r3, [r7, #16]
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	61fb      	str	r3, [r7, #28]
 800d148:	2308      	movs	r3, #8
 800d14a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d14c:	69fb      	ldr	r3, [r7, #28]
 800d14e:	1c5a      	adds	r2, r3, #1
 800d150:	61fa      	str	r2, [r7, #28]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	4413      	add	r3, r2
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d15a:	7efb      	ldrb	r3, [r7, #27]
 800d15c:	2b20      	cmp	r3, #32
 800d15e:	d94e      	bls.n	800d1fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d160:	7efb      	ldrb	r3, [r7, #27]
 800d162:	2b2f      	cmp	r3, #47	; 0x2f
 800d164:	d006      	beq.n	800d174 <create_name+0x54>
 800d166:	7efb      	ldrb	r3, [r7, #27]
 800d168:	2b5c      	cmp	r3, #92	; 0x5c
 800d16a:	d110      	bne.n	800d18e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d16c:	e002      	b.n	800d174 <create_name+0x54>
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	3301      	adds	r3, #1
 800d172:	61fb      	str	r3, [r7, #28]
 800d174:	68fa      	ldr	r2, [r7, #12]
 800d176:	69fb      	ldr	r3, [r7, #28]
 800d178:	4413      	add	r3, r2
 800d17a:	781b      	ldrb	r3, [r3, #0]
 800d17c:	2b2f      	cmp	r3, #47	; 0x2f
 800d17e:	d0f6      	beq.n	800d16e <create_name+0x4e>
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	69fb      	ldr	r3, [r7, #28]
 800d184:	4413      	add	r3, r2
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	2b5c      	cmp	r3, #92	; 0x5c
 800d18a:	d0f0      	beq.n	800d16e <create_name+0x4e>
			break;
 800d18c:	e038      	b.n	800d200 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d18e:	7efb      	ldrb	r3, [r7, #27]
 800d190:	2b2e      	cmp	r3, #46	; 0x2e
 800d192:	d003      	beq.n	800d19c <create_name+0x7c>
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d30c      	bcc.n	800d1b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	2b0b      	cmp	r3, #11
 800d1a0:	d002      	beq.n	800d1a8 <create_name+0x88>
 800d1a2:	7efb      	ldrb	r3, [r7, #27]
 800d1a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d1a6:	d001      	beq.n	800d1ac <create_name+0x8c>
 800d1a8:	2306      	movs	r3, #6
 800d1aa:	e044      	b.n	800d236 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d1ac:	2308      	movs	r3, #8
 800d1ae:	613b      	str	r3, [r7, #16]
 800d1b0:	230b      	movs	r3, #11
 800d1b2:	617b      	str	r3, [r7, #20]
			continue;
 800d1b4:	e022      	b.n	800d1fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d1b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	da04      	bge.n	800d1c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d1be:	7efb      	ldrb	r3, [r7, #27]
 800d1c0:	3b80      	subs	r3, #128	; 0x80
 800d1c2:	4a1f      	ldr	r2, [pc, #124]	; (800d240 <create_name+0x120>)
 800d1c4:	5cd3      	ldrb	r3, [r2, r3]
 800d1c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d1c8:	7efb      	ldrb	r3, [r7, #27]
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	481d      	ldr	r0, [pc, #116]	; (800d244 <create_name+0x124>)
 800d1ce:	f7fe ffde 	bl	800c18e <chk_chr>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <create_name+0xbc>
 800d1d8:	2306      	movs	r3, #6
 800d1da:	e02c      	b.n	800d236 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d1dc:	7efb      	ldrb	r3, [r7, #27]
 800d1de:	2b60      	cmp	r3, #96	; 0x60
 800d1e0:	d905      	bls.n	800d1ee <create_name+0xce>
 800d1e2:	7efb      	ldrb	r3, [r7, #27]
 800d1e4:	2b7a      	cmp	r3, #122	; 0x7a
 800d1e6:	d802      	bhi.n	800d1ee <create_name+0xce>
 800d1e8:	7efb      	ldrb	r3, [r7, #27]
 800d1ea:	3b20      	subs	r3, #32
 800d1ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	1c5a      	adds	r2, r3, #1
 800d1f2:	613a      	str	r2, [r7, #16]
 800d1f4:	68ba      	ldr	r2, [r7, #8]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	7efa      	ldrb	r2, [r7, #27]
 800d1fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d1fc:	e7a6      	b.n	800d14c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d1fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d200:	68fa      	ldr	r2, [r7, #12]
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	441a      	add	r2, r3
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d20a:	693b      	ldr	r3, [r7, #16]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <create_name+0xf4>
 800d210:	2306      	movs	r3, #6
 800d212:	e010      	b.n	800d236 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	2be5      	cmp	r3, #229	; 0xe5
 800d21a:	d102      	bne.n	800d222 <create_name+0x102>
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	2205      	movs	r2, #5
 800d220:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d222:	7efb      	ldrb	r3, [r7, #27]
 800d224:	2b20      	cmp	r3, #32
 800d226:	d801      	bhi.n	800d22c <create_name+0x10c>
 800d228:	2204      	movs	r2, #4
 800d22a:	e000      	b.n	800d22e <create_name+0x10e>
 800d22c:	2200      	movs	r2, #0
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	330b      	adds	r3, #11
 800d232:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d234:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d236:	4618      	mov	r0, r3
 800d238:	3720      	adds	r7, #32
 800d23a:	46bd      	mov	sp, r7
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	08016488 	.word	0x08016488
 800d244:	08015e78 	.word	0x08015e78

0800d248 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b086      	sub	sp, #24
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d25c:	e002      	b.n	800d264 <follow_path+0x1c>
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	3301      	adds	r3, #1
 800d262:	603b      	str	r3, [r7, #0]
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b2f      	cmp	r3, #47	; 0x2f
 800d26a:	d0f8      	beq.n	800d25e <follow_path+0x16>
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	2b5c      	cmp	r3, #92	; 0x5c
 800d272:	d0f4      	beq.n	800d25e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	2200      	movs	r2, #0
 800d278:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b1f      	cmp	r3, #31
 800d280:	d80a      	bhi.n	800d298 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2280      	movs	r2, #128	; 0x80
 800d286:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d28a:	2100      	movs	r1, #0
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7ff fcf9 	bl	800cc84 <dir_sdi>
 800d292:	4603      	mov	r3, r0
 800d294:	75fb      	strb	r3, [r7, #23]
 800d296:	e043      	b.n	800d320 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d298:	463b      	mov	r3, r7
 800d29a:	4619      	mov	r1, r3
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f7ff ff3f 	bl	800d120 <create_name>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d2a6:	7dfb      	ldrb	r3, [r7, #23]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d134      	bne.n	800d316 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7ff feaf 	bl	800d010 <dir_find>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d2bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d2be:	7dfb      	ldrb	r3, [r7, #23]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00a      	beq.n	800d2da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d2c4:	7dfb      	ldrb	r3, [r7, #23]
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	d127      	bne.n	800d31a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d2ca:	7afb      	ldrb	r3, [r7, #11]
 800d2cc:	f003 0304 	and.w	r3, r3, #4
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d122      	bne.n	800d31a <follow_path+0xd2>
 800d2d4:	2305      	movs	r3, #5
 800d2d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d2d8:	e01f      	b.n	800d31a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d2da:	7afb      	ldrb	r3, [r7, #11]
 800d2dc:	f003 0304 	and.w	r3, r3, #4
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d11c      	bne.n	800d31e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d2e4:	693b      	ldr	r3, [r7, #16]
 800d2e6:	799b      	ldrb	r3, [r3, #6]
 800d2e8:	f003 0310 	and.w	r3, r3, #16
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d102      	bne.n	800d2f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d2f0:	2305      	movs	r3, #5
 800d2f2:	75fb      	strb	r3, [r7, #23]
 800d2f4:	e014      	b.n	800d320 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	695b      	ldr	r3, [r3, #20]
 800d300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d304:	4413      	add	r3, r2
 800d306:	4619      	mov	r1, r3
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f7ff fe42 	bl	800cf92 <ld_clust>
 800d30e:	4602      	mov	r2, r0
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d314:	e7c0      	b.n	800d298 <follow_path+0x50>
			if (res != FR_OK) break;
 800d316:	bf00      	nop
 800d318:	e002      	b.n	800d320 <follow_path+0xd8>
				break;
 800d31a:	bf00      	nop
 800d31c:	e000      	b.n	800d320 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d31e:	bf00      	nop
			}
		}
	}

	return res;
 800d320:	7dfb      	ldrb	r3, [r7, #23]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3718      	adds	r7, #24
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d32a:	b480      	push	{r7}
 800d32c:	b087      	sub	sp, #28
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d332:	f04f 33ff 	mov.w	r3, #4294967295
 800d336:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d031      	beq.n	800d3a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	617b      	str	r3, [r7, #20]
 800d346:	e002      	b.n	800d34e <get_ldnumber+0x24>
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	3301      	adds	r3, #1
 800d34c:	617b      	str	r3, [r7, #20]
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	781b      	ldrb	r3, [r3, #0]
 800d352:	2b20      	cmp	r3, #32
 800d354:	d903      	bls.n	800d35e <get_ldnumber+0x34>
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	2b3a      	cmp	r3, #58	; 0x3a
 800d35c:	d1f4      	bne.n	800d348 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	781b      	ldrb	r3, [r3, #0]
 800d362:	2b3a      	cmp	r3, #58	; 0x3a
 800d364:	d11c      	bne.n	800d3a0 <get_ldnumber+0x76>
			tp = *path;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	1c5a      	adds	r2, r3, #1
 800d370:	60fa      	str	r2, [r7, #12]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	3b30      	subs	r3, #48	; 0x30
 800d376:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2b09      	cmp	r3, #9
 800d37c:	d80e      	bhi.n	800d39c <get_ldnumber+0x72>
 800d37e:	68fa      	ldr	r2, [r7, #12]
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	429a      	cmp	r2, r3
 800d384:	d10a      	bne.n	800d39c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d386:	68bb      	ldr	r3, [r7, #8]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d107      	bne.n	800d39c <get_ldnumber+0x72>
					vol = (int)i;
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	3301      	adds	r3, #1
 800d394:	617b      	str	r3, [r7, #20]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	697a      	ldr	r2, [r7, #20]
 800d39a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	e002      	b.n	800d3a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d3a4:	693b      	ldr	r3, [r7, #16]
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	371c      	adds	r7, #28
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b0:	4770      	bx	lr
	...

0800d3b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	70da      	strb	r2, [r3, #3]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d3ca:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d3cc:	6839      	ldr	r1, [r7, #0]
 800d3ce:	6878      	ldr	r0, [r7, #4]
 800d3d0:	f7ff f8da 	bl	800c588 <move_window>
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d001      	beq.n	800d3de <check_fs+0x2a>
 800d3da:	2304      	movs	r3, #4
 800d3dc:	e038      	b.n	800d450 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	3334      	adds	r3, #52	; 0x34
 800d3e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7fe fdec 	bl	800bfc4 <ld_word>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d001      	beq.n	800d3fc <check_fs+0x48>
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	e029      	b.n	800d450 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d402:	2be9      	cmp	r3, #233	; 0xe9
 800d404:	d009      	beq.n	800d41a <check_fs+0x66>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d40c:	2beb      	cmp	r3, #235	; 0xeb
 800d40e:	d11e      	bne.n	800d44e <check_fs+0x9a>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800d416:	2b90      	cmp	r3, #144	; 0x90
 800d418:	d119      	bne.n	800d44e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	3334      	adds	r3, #52	; 0x34
 800d41e:	3336      	adds	r3, #54	; 0x36
 800d420:	4618      	mov	r0, r3
 800d422:	f7fe fde7 	bl	800bff4 <ld_dword>
 800d426:	4603      	mov	r3, r0
 800d428:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d42c:	4a0a      	ldr	r2, [pc, #40]	; (800d458 <check_fs+0xa4>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d101      	bne.n	800d436 <check_fs+0x82>
 800d432:	2300      	movs	r3, #0
 800d434:	e00c      	b.n	800d450 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	3334      	adds	r3, #52	; 0x34
 800d43a:	3352      	adds	r3, #82	; 0x52
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe fdd9 	bl	800bff4 <ld_dword>
 800d442:	4603      	mov	r3, r0
 800d444:	4a05      	ldr	r2, [pc, #20]	; (800d45c <check_fs+0xa8>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d101      	bne.n	800d44e <check_fs+0x9a>
 800d44a:	2300      	movs	r3, #0
 800d44c:	e000      	b.n	800d450 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d44e:	2302      	movs	r3, #2
}
 800d450:	4618      	mov	r0, r3
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	00544146 	.word	0x00544146
 800d45c:	33544146 	.word	0x33544146

0800d460 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b096      	sub	sp, #88	; 0x58
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	4613      	mov	r3, r2
 800d46c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	2200      	movs	r2, #0
 800d472:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f7ff ff58 	bl	800d32a <get_ldnumber>
 800d47a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d47e:	2b00      	cmp	r3, #0
 800d480:	da01      	bge.n	800d486 <find_volume+0x26>
 800d482:	230b      	movs	r3, #11
 800d484:	e235      	b.n	800d8f2 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d486:	4aa5      	ldr	r2, [pc, #660]	; (800d71c <find_volume+0x2bc>)
 800d488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d48a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d48e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d492:	2b00      	cmp	r3, #0
 800d494:	d101      	bne.n	800d49a <find_volume+0x3a>
 800d496:	230c      	movs	r3, #12
 800d498:	e22b      	b.n	800d8f2 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800d49a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d49c:	f7fe fe92 	bl	800c1c4 <lock_fs>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d101      	bne.n	800d4aa <find_volume+0x4a>
 800d4a6:	230f      	movs	r3, #15
 800d4a8:	e223      	b.n	800d8f2 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d4ae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d4b0:	79fb      	ldrb	r3, [r7, #7]
 800d4b2:	f023 0301 	bic.w	r3, r3, #1
 800d4b6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d01a      	beq.n	800d4f6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	785b      	ldrb	r3, [r3, #1]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fe fcdf 	bl	800be88 <disk_status>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d4d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4d4:	f003 0301 	and.w	r3, r3, #1
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d10c      	bne.n	800d4f6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d4dc:	79fb      	ldrb	r3, [r7, #7]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d007      	beq.n	800d4f2 <find_volume+0x92>
 800d4e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d4e6:	f003 0304 	and.w	r3, r3, #4
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800d4ee:	230a      	movs	r3, #10
 800d4f0:	e1ff      	b.n	800d8f2 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	e1fd      	b.n	800d8f2 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4fe:	b2da      	uxtb	r2, r3
 800d500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d502:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d506:	785b      	ldrb	r3, [r3, #1]
 800d508:	4618      	mov	r0, r3
 800d50a:	f7fe fcd7 	bl	800bebc <disk_initialize>
 800d50e:	4603      	mov	r3, r0
 800d510:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d518:	f003 0301 	and.w	r3, r3, #1
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d520:	2303      	movs	r3, #3
 800d522:	e1e6      	b.n	800d8f2 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d007      	beq.n	800d53a <find_volume+0xda>
 800d52a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d52e:	f003 0304 	and.w	r3, r3, #4
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800d536:	230a      	movs	r3, #10
 800d538:	e1db      	b.n	800d8f2 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d53a:	2300      	movs	r3, #0
 800d53c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d53e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d540:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d542:	f7ff ff37 	bl	800d3b4 <check_fs>
 800d546:	4603      	mov	r3, r0
 800d548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d54c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d550:	2b02      	cmp	r3, #2
 800d552:	d149      	bne.n	800d5e8 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d554:	2300      	movs	r3, #0
 800d556:	643b      	str	r3, [r7, #64]	; 0x40
 800d558:	e01e      	b.n	800d598 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800d560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d562:	011b      	lsls	r3, r3, #4
 800d564:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d568:	4413      	add	r3, r2
 800d56a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d56c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56e:	3304      	adds	r3, #4
 800d570:	781b      	ldrb	r3, [r3, #0]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d006      	beq.n	800d584 <find_volume+0x124>
 800d576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d578:	3308      	adds	r3, #8
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fe fd3a 	bl	800bff4 <ld_dword>
 800d580:	4602      	mov	r2, r0
 800d582:	e000      	b.n	800d586 <find_volume+0x126>
 800d584:	2200      	movs	r2, #0
 800d586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	3358      	adds	r3, #88	; 0x58
 800d58c:	443b      	add	r3, r7
 800d58e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d594:	3301      	adds	r3, #1
 800d596:	643b      	str	r3, [r7, #64]	; 0x40
 800d598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	d9dd      	bls.n	800d55a <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d59e:	2300      	movs	r3, #0
 800d5a0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d002      	beq.n	800d5ae <find_volume+0x14e>
 800d5a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5aa:	3b01      	subs	r3, #1
 800d5ac:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5b0:	009b      	lsls	r3, r3, #2
 800d5b2:	3358      	adds	r3, #88	; 0x58
 800d5b4:	443b      	add	r3, r7
 800d5b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d5ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d5bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d005      	beq.n	800d5ce <find_volume+0x16e>
 800d5c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5c6:	f7ff fef5 	bl	800d3b4 <check_fs>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	e000      	b.n	800d5d0 <find_volume+0x170>
 800d5ce:	2303      	movs	r3, #3
 800d5d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d5d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5d8:	2b01      	cmp	r3, #1
 800d5da:	d905      	bls.n	800d5e8 <find_volume+0x188>
 800d5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5de:	3301      	adds	r3, #1
 800d5e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e4:	2b03      	cmp	r3, #3
 800d5e6:	d9e2      	bls.n	800d5ae <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d5e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5ec:	2b04      	cmp	r3, #4
 800d5ee:	d101      	bne.n	800d5f4 <find_volume+0x194>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e17e      	b.n	800d8f2 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d5f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d5f8:	2b01      	cmp	r3, #1
 800d5fa:	d901      	bls.n	800d600 <find_volume+0x1a0>
 800d5fc:	230d      	movs	r3, #13
 800d5fe:	e178      	b.n	800d8f2 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d602:	3334      	adds	r3, #52	; 0x34
 800d604:	330b      	adds	r3, #11
 800d606:	4618      	mov	r0, r3
 800d608:	f7fe fcdc 	bl	800bfc4 <ld_word>
 800d60c:	4603      	mov	r3, r0
 800d60e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d612:	d001      	beq.n	800d618 <find_volume+0x1b8>
 800d614:	230d      	movs	r3, #13
 800d616:	e16c      	b.n	800d8f2 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d61a:	3334      	adds	r3, #52	; 0x34
 800d61c:	3316      	adds	r3, #22
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fe fcd0 	bl	800bfc4 <ld_word>
 800d624:	4603      	mov	r3, r0
 800d626:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d106      	bne.n	800d63c <find_volume+0x1dc>
 800d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d630:	3334      	adds	r3, #52	; 0x34
 800d632:	3324      	adds	r3, #36	; 0x24
 800d634:	4618      	mov	r0, r3
 800d636:	f7fe fcdd 	bl	800bff4 <ld_dword>
 800d63a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d63c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d63e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d640:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d644:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d64e:	789b      	ldrb	r3, [r3, #2]
 800d650:	2b01      	cmp	r3, #1
 800d652:	d005      	beq.n	800d660 <find_volume+0x200>
 800d654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d656:	789b      	ldrb	r3, [r3, #2]
 800d658:	2b02      	cmp	r3, #2
 800d65a:	d001      	beq.n	800d660 <find_volume+0x200>
 800d65c:	230d      	movs	r3, #13
 800d65e:	e148      	b.n	800d8f2 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d662:	789b      	ldrb	r3, [r3, #2]
 800d664:	461a      	mov	r2, r3
 800d666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d668:	fb02 f303 	mul.w	r3, r2, r3
 800d66c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d674:	b29a      	uxth	r2, r3
 800d676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d678:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d67a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d67c:	895b      	ldrh	r3, [r3, #10]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d008      	beq.n	800d694 <find_volume+0x234>
 800d682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d684:	895b      	ldrh	r3, [r3, #10]
 800d686:	461a      	mov	r2, r3
 800d688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d68a:	895b      	ldrh	r3, [r3, #10]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	4013      	ands	r3, r2
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <find_volume+0x238>
 800d694:	230d      	movs	r3, #13
 800d696:	e12c      	b.n	800d8f2 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d69a:	3334      	adds	r3, #52	; 0x34
 800d69c:	3311      	adds	r3, #17
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f7fe fc90 	bl	800bfc4 <ld_word>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ae:	891b      	ldrh	r3, [r3, #8]
 800d6b0:	f003 030f 	and.w	r3, r3, #15
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <find_volume+0x25e>
 800d6ba:	230d      	movs	r3, #13
 800d6bc:	e119      	b.n	800d8f2 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c0:	3334      	adds	r3, #52	; 0x34
 800d6c2:	3313      	adds	r3, #19
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fe fc7d 	bl	800bfc4 <ld_word>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d6ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d106      	bne.n	800d6e2 <find_volume+0x282>
 800d6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d6:	3334      	adds	r3, #52	; 0x34
 800d6d8:	3320      	adds	r3, #32
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fe fc8a 	bl	800bff4 <ld_dword>
 800d6e0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e4:	3334      	adds	r3, #52	; 0x34
 800d6e6:	330e      	adds	r3, #14
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f7fe fc6b 	bl	800bfc4 <ld_word>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d6f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d101      	bne.n	800d6fc <find_volume+0x29c>
 800d6f8:	230d      	movs	r3, #13
 800d6fa:	e0fa      	b.n	800d8f2 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d6fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d6fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d700:	4413      	add	r3, r2
 800d702:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d704:	8912      	ldrh	r2, [r2, #8]
 800d706:	0912      	lsrs	r2, r2, #4
 800d708:	b292      	uxth	r2, r2
 800d70a:	4413      	add	r3, r2
 800d70c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d70e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d712:	429a      	cmp	r2, r3
 800d714:	d204      	bcs.n	800d720 <find_volume+0x2c0>
 800d716:	230d      	movs	r3, #13
 800d718:	e0eb      	b.n	800d8f2 <find_volume+0x492>
 800d71a:	bf00      	nop
 800d71c:	20000904 	.word	0x20000904
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d720:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d724:	1ad3      	subs	r3, r2, r3
 800d726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d728:	8952      	ldrh	r2, [r2, #10]
 800d72a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d72e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d732:	2b00      	cmp	r3, #0
 800d734:	d101      	bne.n	800d73a <find_volume+0x2da>
 800d736:	230d      	movs	r3, #13
 800d738:	e0db      	b.n	800d8f2 <find_volume+0x492>
		fmt = FS_FAT32;
 800d73a:	2303      	movs	r3, #3
 800d73c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d746:	4293      	cmp	r3, r2
 800d748:	d802      	bhi.n	800d750 <find_volume+0x2f0>
 800d74a:	2302      	movs	r3, #2
 800d74c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d752:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d756:	4293      	cmp	r3, r2
 800d758:	d802      	bhi.n	800d760 <find_volume+0x300>
 800d75a:	2301      	movs	r3, #1
 800d75c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	1c9a      	adds	r2, r3, #2
 800d764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d766:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d76a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d76c:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d76e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d772:	441a      	add	r2, r3
 800d774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d776:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d778:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77c:	441a      	add	r2, r3
 800d77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d780:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d782:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d786:	2b03      	cmp	r3, #3
 800d788:	d11e      	bne.n	800d7c8 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d78a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78c:	3334      	adds	r3, #52	; 0x34
 800d78e:	332a      	adds	r3, #42	; 0x2a
 800d790:	4618      	mov	r0, r3
 800d792:	f7fe fc17 	bl	800bfc4 <ld_word>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <find_volume+0x340>
 800d79c:	230d      	movs	r3, #13
 800d79e:	e0a8      	b.n	800d8f2 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a2:	891b      	ldrh	r3, [r3, #8]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d001      	beq.n	800d7ac <find_volume+0x34c>
 800d7a8:	230d      	movs	r3, #13
 800d7aa:	e0a2      	b.n	800d8f2 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d7ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ae:	3334      	adds	r3, #52	; 0x34
 800d7b0:	332c      	adds	r3, #44	; 0x2c
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fe fc1e 	bl	800bff4 <ld_dword>
 800d7b8:	4602      	mov	r2, r0
 800d7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7bc:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c0:	699b      	ldr	r3, [r3, #24]
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	647b      	str	r3, [r7, #68]	; 0x44
 800d7c6:	e01f      	b.n	800d808 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	891b      	ldrh	r3, [r3, #8]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d101      	bne.n	800d7d4 <find_volume+0x374>
 800d7d0:	230d      	movs	r3, #13
 800d7d2:	e08e      	b.n	800d8f2 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7da:	441a      	add	r2, r3
 800d7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7de:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d7e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d7e4:	2b02      	cmp	r3, #2
 800d7e6:	d103      	bne.n	800d7f0 <find_volume+0x390>
 800d7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ea:	699b      	ldr	r3, [r3, #24]
 800d7ec:	005b      	lsls	r3, r3, #1
 800d7ee:	e00a      	b.n	800d806 <find_volume+0x3a6>
 800d7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7f2:	699a      	ldr	r2, [r3, #24]
 800d7f4:	4613      	mov	r3, r2
 800d7f6:	005b      	lsls	r3, r3, #1
 800d7f8:	4413      	add	r3, r2
 800d7fa:	085a      	lsrs	r2, r3, #1
 800d7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	f003 0301 	and.w	r3, r3, #1
 800d804:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d806:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d80a:	69da      	ldr	r2, [r3, #28]
 800d80c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d80e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d812:	0a5b      	lsrs	r3, r3, #9
 800d814:	429a      	cmp	r2, r3
 800d816:	d201      	bcs.n	800d81c <find_volume+0x3bc>
 800d818:	230d      	movs	r3, #13
 800d81a:	e06a      	b.n	800d8f2 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81e:	f04f 32ff 	mov.w	r2, #4294967295
 800d822:	615a      	str	r2, [r3, #20]
 800d824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d826:	695a      	ldr	r2, [r3, #20]
 800d828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d82c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82e:	2280      	movs	r2, #128	; 0x80
 800d830:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d832:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d836:	2b03      	cmp	r3, #3
 800d838:	d149      	bne.n	800d8ce <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d83c:	3334      	adds	r3, #52	; 0x34
 800d83e:	3330      	adds	r3, #48	; 0x30
 800d840:	4618      	mov	r0, r3
 800d842:	f7fe fbbf 	bl	800bfc4 <ld_word>
 800d846:	4603      	mov	r3, r0
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d140      	bne.n	800d8ce <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d84e:	3301      	adds	r3, #1
 800d850:	4619      	mov	r1, r3
 800d852:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d854:	f7fe fe98 	bl	800c588 <move_window>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d137      	bne.n	800d8ce <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800d85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d860:	2200      	movs	r2, #0
 800d862:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d866:	3334      	adds	r3, #52	; 0x34
 800d868:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d86c:	4618      	mov	r0, r3
 800d86e:	f7fe fba9 	bl	800bfc4 <ld_word>
 800d872:	4603      	mov	r3, r0
 800d874:	461a      	mov	r2, r3
 800d876:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d127      	bne.n	800d8ce <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d880:	3334      	adds	r3, #52	; 0x34
 800d882:	4618      	mov	r0, r3
 800d884:	f7fe fbb6 	bl	800bff4 <ld_dword>
 800d888:	4603      	mov	r3, r0
 800d88a:	4a1c      	ldr	r2, [pc, #112]	; (800d8fc <find_volume+0x49c>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d11e      	bne.n	800d8ce <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d892:	3334      	adds	r3, #52	; 0x34
 800d894:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d898:	4618      	mov	r0, r3
 800d89a:	f7fe fbab 	bl	800bff4 <ld_dword>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	4a17      	ldr	r2, [pc, #92]	; (800d900 <find_volume+0x4a0>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d113      	bne.n	800d8ce <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d8a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8a8:	3334      	adds	r3, #52	; 0x34
 800d8aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fe fba0 	bl	800bff4 <ld_dword>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8b8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d8ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8bc:	3334      	adds	r3, #52	; 0x34
 800d8be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fe fb96 	bl	800bff4 <ld_dword>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8cc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d8d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d8d6:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <find_volume+0x4a4>)
 800d8d8:	881b      	ldrh	r3, [r3, #0]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	4b09      	ldr	r3, [pc, #36]	; (800d904 <find_volume+0x4a4>)
 800d8e0:	801a      	strh	r2, [r3, #0]
 800d8e2:	4b08      	ldr	r3, [pc, #32]	; (800d904 <find_volume+0x4a4>)
 800d8e4:	881a      	ldrh	r2, [r3, #0]
 800d8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8e8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d8ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d8ec:	f7fe fde4 	bl	800c4b8 <clear_lock>
#endif
	return FR_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3758      	adds	r7, #88	; 0x58
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	41615252 	.word	0x41615252
 800d900:	61417272 	.word	0x61417272
 800d904:	20000908 	.word	0x20000908

0800d908 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d912:	2309      	movs	r3, #9
 800d914:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d02e      	beq.n	800d97a <validate+0x72>
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d02a      	beq.n	800d97a <validate+0x72>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d025      	beq.n	800d97a <validate+0x72>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	889a      	ldrh	r2, [r3, #4]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	88db      	ldrh	r3, [r3, #6]
 800d938:	429a      	cmp	r2, r3
 800d93a:	d11e      	bne.n	800d97a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4618      	mov	r0, r3
 800d942:	f7fe fc3f 	bl	800c1c4 <lock_fs>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d014      	beq.n	800d976 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	785b      	ldrb	r3, [r3, #1]
 800d952:	4618      	mov	r0, r3
 800d954:	f7fe fa98 	bl	800be88 <disk_status>
 800d958:	4603      	mov	r3, r0
 800d95a:	f003 0301 	and.w	r3, r3, #1
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d102      	bne.n	800d968 <validate+0x60>
				res = FR_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	73fb      	strb	r3, [r7, #15]
 800d966:	e008      	b.n	800d97a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2100      	movs	r1, #0
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe fc3e 	bl	800c1f0 <unlock_fs>
 800d974:	e001      	b.n	800d97a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d976:	230f      	movs	r3, #15
 800d978:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d97a:	7bfb      	ldrb	r3, [r7, #15]
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d102      	bne.n	800d986 <validate+0x7e>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	e000      	b.n	800d988 <validate+0x80>
 800d986:	2300      	movs	r3, #0
 800d988:	683a      	ldr	r2, [r7, #0]
 800d98a:	6013      	str	r3, [r2, #0]
	return res;
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3710      	adds	r7, #16
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
	...

0800d998 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b088      	sub	sp, #32
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d9aa:	f107 0310 	add.w	r3, r7, #16
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff fcbb 	bl	800d32a <get_ldnumber>
 800d9b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	da01      	bge.n	800d9c0 <f_mount+0x28>
 800d9bc:	230b      	movs	r3, #11
 800d9be:	e048      	b.n	800da52 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d9c0:	4a26      	ldr	r2, [pc, #152]	; (800da5c <f_mount+0xc4>)
 800d9c2:	69fb      	ldr	r3, [r7, #28]
 800d9c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00f      	beq.n	800d9f0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d9d0:	69b8      	ldr	r0, [r7, #24]
 800d9d2:	f7fe fd71 	bl	800c4b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	68db      	ldr	r3, [r3, #12]
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f000 ff6a 	bl	800e8b4 <ff_del_syncobj>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d101      	bne.n	800d9ea <f_mount+0x52>
 800d9e6:	2302      	movs	r3, #2
 800d9e8:	e033      	b.n	800da52 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00f      	beq.n	800da16 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d9fc:	69fb      	ldr	r3, [r7, #28]
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	330c      	adds	r3, #12
 800da04:	4619      	mov	r1, r3
 800da06:	4610      	mov	r0, r2
 800da08:	f000 ff3b 	bl	800e882 <ff_cre_syncobj>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d101      	bne.n	800da16 <f_mount+0x7e>
 800da12:	2302      	movs	r3, #2
 800da14:	e01d      	b.n	800da52 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	4910      	ldr	r1, [pc, #64]	; (800da5c <f_mount+0xc4>)
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d002      	beq.n	800da2c <f_mount+0x94>
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d001      	beq.n	800da30 <f_mount+0x98>
 800da2c:	2300      	movs	r3, #0
 800da2e:	e010      	b.n	800da52 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800da30:	f107 010c 	add.w	r1, r7, #12
 800da34:	f107 0308 	add.w	r3, r7, #8
 800da38:	2200      	movs	r2, #0
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff fd10 	bl	800d460 <find_volume>
 800da40:	4603      	mov	r3, r0
 800da42:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	7dfa      	ldrb	r2, [r7, #23]
 800da48:	4611      	mov	r1, r2
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7fe fbd0 	bl	800c1f0 <unlock_fs>
 800da50:	7dfb      	ldrb	r3, [r7, #23]
}
 800da52:	4618      	mov	r0, r3
 800da54:	3720      	adds	r7, #32
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	20000904 	.word	0x20000904

0800da60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b098      	sub	sp, #96	; 0x60
 800da64:	af00      	add	r7, sp, #0
 800da66:	60f8      	str	r0, [r7, #12]
 800da68:	60b9      	str	r1, [r7, #8]
 800da6a:	4613      	mov	r3, r2
 800da6c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d101      	bne.n	800da78 <f_open+0x18>
 800da74:	2309      	movs	r3, #9
 800da76:	e1b4      	b.n	800dde2 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800da78:	79fb      	ldrb	r3, [r7, #7]
 800da7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da7e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800da80:	79fa      	ldrb	r2, [r7, #7]
 800da82:	f107 0110 	add.w	r1, r7, #16
 800da86:	f107 0308 	add.w	r3, r7, #8
 800da8a:	4618      	mov	r0, r3
 800da8c:	f7ff fce8 	bl	800d460 <find_volume>
 800da90:	4603      	mov	r3, r0
 800da92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800da96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f040 8191 	bne.w	800ddc2 <f_open+0x362>
		dj.obj.fs = fs;
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800daa4:	68ba      	ldr	r2, [r7, #8]
 800daa6:	f107 0314 	add.w	r3, r7, #20
 800daaa:	4611      	mov	r1, r2
 800daac:	4618      	mov	r0, r3
 800daae:	f7ff fbcb 	bl	800d248 <follow_path>
 800dab2:	4603      	mov	r3, r0
 800dab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800dab8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d11a      	bne.n	800daf6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800dac0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dac4:	b25b      	sxtb	r3, r3
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	da03      	bge.n	800dad2 <f_open+0x72>
				res = FR_INVALID_NAME;
 800daca:	2306      	movs	r3, #6
 800dacc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dad0:	e011      	b.n	800daf6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dad2:	79fb      	ldrb	r3, [r7, #7]
 800dad4:	f023 0301 	bic.w	r3, r3, #1
 800dad8:	2b00      	cmp	r3, #0
 800dada:	bf14      	ite	ne
 800dadc:	2301      	movne	r3, #1
 800dade:	2300      	moveq	r3, #0
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	461a      	mov	r2, r3
 800dae4:	f107 0314 	add.w	r3, r7, #20
 800dae8:	4611      	mov	r1, r2
 800daea:	4618      	mov	r0, r3
 800daec:	f7fe fb9c 	bl	800c228 <chk_lock>
 800daf0:	4603      	mov	r3, r0
 800daf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800daf6:	79fb      	ldrb	r3, [r7, #7]
 800daf8:	f003 031c 	and.w	r3, r3, #28
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d07f      	beq.n	800dc00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800db00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db04:	2b00      	cmp	r3, #0
 800db06:	d017      	beq.n	800db38 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800db08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db0c:	2b04      	cmp	r3, #4
 800db0e:	d10e      	bne.n	800db2e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800db10:	f7fe fbe6 	bl	800c2e0 <enq_lock>
 800db14:	4603      	mov	r3, r0
 800db16:	2b00      	cmp	r3, #0
 800db18:	d006      	beq.n	800db28 <f_open+0xc8>
 800db1a:	f107 0314 	add.w	r3, r7, #20
 800db1e:	4618      	mov	r0, r3
 800db20:	f7ff facb 	bl	800d0ba <dir_register>
 800db24:	4603      	mov	r3, r0
 800db26:	e000      	b.n	800db2a <f_open+0xca>
 800db28:	2312      	movs	r3, #18
 800db2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800db2e:	79fb      	ldrb	r3, [r7, #7]
 800db30:	f043 0308 	orr.w	r3, r3, #8
 800db34:	71fb      	strb	r3, [r7, #7]
 800db36:	e010      	b.n	800db5a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800db38:	7ebb      	ldrb	r3, [r7, #26]
 800db3a:	f003 0311 	and.w	r3, r3, #17
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d003      	beq.n	800db4a <f_open+0xea>
					res = FR_DENIED;
 800db42:	2307      	movs	r3, #7
 800db44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800db48:	e007      	b.n	800db5a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800db4a:	79fb      	ldrb	r3, [r7, #7]
 800db4c:	f003 0304 	and.w	r3, r3, #4
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <f_open+0xfa>
 800db54:	2308      	movs	r3, #8
 800db56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800db5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d168      	bne.n	800dc34 <f_open+0x1d4>
 800db62:	79fb      	ldrb	r3, [r7, #7]
 800db64:	f003 0308 	and.w	r3, r3, #8
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d063      	beq.n	800dc34 <f_open+0x1d4>
				dw = GET_FATTIME();
 800db6c:	f7fd fc4a 	bl	800b404 <get_fattime>
 800db70:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800db72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db74:	330e      	adds	r3, #14
 800db76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db78:	4618      	mov	r0, r3
 800db7a:	f7fe fa79 	bl	800c070 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800db7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db80:	3316      	adds	r3, #22
 800db82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800db84:	4618      	mov	r0, r3
 800db86:	f7fe fa73 	bl	800c070 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800db8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db8c:	330b      	adds	r3, #11
 800db8e:	2220      	movs	r2, #32
 800db90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800db92:	693b      	ldr	r3, [r7, #16]
 800db94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db96:	4611      	mov	r1, r2
 800db98:	4618      	mov	r0, r3
 800db9a:	f7ff f9fa 	bl	800cf92 <ld_clust>
 800db9e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dba4:	2200      	movs	r2, #0
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff fa12 	bl	800cfd0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800dbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbae:	331c      	adds	r3, #28
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe fa5c 	bl	800c070 <st_dword>
					fs->wflag = 1;
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	2201      	movs	r2, #1
 800dbbc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800dbbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d037      	beq.n	800dc34 <f_open+0x1d4>
						dw = fs->winsect;
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbc8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800dbca:	f107 0314 	add.w	r3, r7, #20
 800dbce:	2200      	movs	r2, #0
 800dbd0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7fe ff25 	bl	800ca22 <remove_chain>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800dbde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d126      	bne.n	800dc34 <f_open+0x1d4>
							res = move_window(fs, dw);
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dbea:	4618      	mov	r0, r3
 800dbec:	f7fe fccc 	bl	800c588 <move_window>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dbfa:	3a01      	subs	r2, #1
 800dbfc:	611a      	str	r2, [r3, #16]
 800dbfe:	e019      	b.n	800dc34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dc00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d115      	bne.n	800dc34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dc08:	7ebb      	ldrb	r3, [r7, #26]
 800dc0a:	f003 0310 	and.w	r3, r3, #16
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d003      	beq.n	800dc1a <f_open+0x1ba>
					res = FR_NO_FILE;
 800dc12:	2304      	movs	r3, #4
 800dc14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dc18:	e00c      	b.n	800dc34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dc1a:	79fb      	ldrb	r3, [r7, #7]
 800dc1c:	f003 0302 	and.w	r3, r3, #2
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d007      	beq.n	800dc34 <f_open+0x1d4>
 800dc24:	7ebb      	ldrb	r3, [r7, #26]
 800dc26:	f003 0301 	and.w	r3, r3, #1
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d002      	beq.n	800dc34 <f_open+0x1d4>
						res = FR_DENIED;
 800dc2e:	2307      	movs	r3, #7
 800dc30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800dc34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d128      	bne.n	800dc8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800dc3c:	79fb      	ldrb	r3, [r7, #7]
 800dc3e:	f003 0308 	and.w	r3, r3, #8
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d003      	beq.n	800dc4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800dc46:	79fb      	ldrb	r3, [r7, #7]
 800dc48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800dc56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800dc5c:	79fb      	ldrb	r3, [r7, #7]
 800dc5e:	f023 0301 	bic.w	r3, r3, #1
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	bf14      	ite	ne
 800dc66:	2301      	movne	r3, #1
 800dc68:	2300      	moveq	r3, #0
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	f107 0314 	add.w	r3, r7, #20
 800dc72:	4611      	mov	r1, r2
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7fe fb55 	bl	800c324 <inc_lock>
 800dc7a:	4602      	mov	r2, r0
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	691b      	ldr	r3, [r3, #16]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d102      	bne.n	800dc8e <f_open+0x22e>
 800dc88:	2302      	movs	r3, #2
 800dc8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800dc8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f040 8095 	bne.w	800ddc2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7ff f977 	bl	800cf92 <ld_clust>
 800dca4:	4602      	mov	r2, r0
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dcaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcac:	331c      	adds	r3, #28
 800dcae:	4618      	mov	r0, r3
 800dcb0:	f7fe f9a0 	bl	800bff4 <ld_dword>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dcc0:	693a      	ldr	r2, [r7, #16]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	88da      	ldrh	r2, [r3, #6]
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	79fa      	ldrb	r2, [r7, #7]
 800dcd2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2200      	movs	r2, #0
 800dce4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	3330      	adds	r3, #48	; 0x30
 800dcea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dcee:	2100      	movs	r1, #0
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fe fa0a 	bl	800c10a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dcf6:	79fb      	ldrb	r3, [r7, #7]
 800dcf8:	f003 0320 	and.w	r3, r3, #32
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d060      	beq.n	800ddc2 <f_open+0x362>
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	68db      	ldr	r3, [r3, #12]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d05c      	beq.n	800ddc2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	68da      	ldr	r2, [r3, #12]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	895b      	ldrh	r3, [r3, #10]
 800dd14:	025b      	lsls	r3, r3, #9
 800dd16:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	657b      	str	r3, [r7, #84]	; 0x54
 800dd24:	e016      	b.n	800dd54 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7fe fce7 	bl	800c6fe <get_fat>
 800dd30:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800dd32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d802      	bhi.n	800dd3e <f_open+0x2de>
 800dd38:	2302      	movs	r3, #2
 800dd3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800dd3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd44:	d102      	bne.n	800dd4c <f_open+0x2ec>
 800dd46:	2301      	movs	r3, #1
 800dd48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd50:	1ad3      	subs	r3, r2, r3
 800dd52:	657b      	str	r3, [r7, #84]	; 0x54
 800dd54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d103      	bne.n	800dd64 <f_open+0x304>
 800dd5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d8e0      	bhi.n	800dd26 <f_open+0x2c6>
				}
				fp->clust = clst;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800dd6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d127      	bne.n	800ddc2 <f_open+0x362>
 800dd72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d022      	beq.n	800ddc2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe fc9d 	bl	800c6c0 <clust2sect>
 800dd86:	6478      	str	r0, [r7, #68]	; 0x44
 800dd88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d103      	bne.n	800dd96 <f_open+0x336>
						res = FR_INT_ERR;
 800dd8e:	2302      	movs	r3, #2
 800dd90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dd94:	e015      	b.n	800ddc2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800dd96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd98:	0a5a      	lsrs	r2, r3, #9
 800dd9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd9c:	441a      	add	r2, r3
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	7858      	ldrb	r0, [r3, #1]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	6a1a      	ldr	r2, [r3, #32]
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	f7fe f8a9 	bl	800bf08 <disk_read>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d002      	beq.n	800ddc2 <f_open+0x362>
 800ddbc:	2301      	movs	r3, #1
 800ddbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ddc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d002      	beq.n	800ddd0 <f_open+0x370>
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ddd0:	693b      	ldr	r3, [r7, #16]
 800ddd2:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7fe fa09 	bl	800c1f0 <unlock_fs>
 800ddde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3760      	adds	r7, #96	; 0x60
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}

0800ddea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b08c      	sub	sp, #48	; 0x30
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	60f8      	str	r0, [r7, #12]
 800ddf2:	60b9      	str	r1, [r7, #8]
 800ddf4:	607a      	str	r2, [r7, #4]
 800ddf6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2200      	movs	r2, #0
 800de00:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f107 0210 	add.w	r2, r7, #16
 800de08:	4611      	mov	r1, r2
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7ff fd7c 	bl	800d908 <validate>
 800de10:	4603      	mov	r3, r0
 800de12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800de16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d107      	bne.n	800de2e <f_write+0x44>
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	7d5b      	ldrb	r3, [r3, #21]
 800de22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800de26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d009      	beq.n	800de42 <f_write+0x58>
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800de34:	4611      	mov	r1, r2
 800de36:	4618      	mov	r0, r3
 800de38:	f7fe f9da 	bl	800c1f0 <unlock_fs>
 800de3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de40:	e173      	b.n	800e12a <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	7d1b      	ldrb	r3, [r3, #20]
 800de46:	f003 0302 	and.w	r3, r3, #2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d106      	bne.n	800de5c <f_write+0x72>
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	2107      	movs	r1, #7
 800de52:	4618      	mov	r0, r3
 800de54:	f7fe f9cc 	bl	800c1f0 <unlock_fs>
 800de58:	2307      	movs	r3, #7
 800de5a:	e166      	b.n	800e12a <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	699a      	ldr	r2, [r3, #24]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	441a      	add	r2, r3
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	699b      	ldr	r3, [r3, #24]
 800de68:	429a      	cmp	r2, r3
 800de6a:	f080 814b 	bcs.w	800e104 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	699b      	ldr	r3, [r3, #24]
 800de72:	43db      	mvns	r3, r3
 800de74:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800de76:	e145      	b.n	800e104 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	699b      	ldr	r3, [r3, #24]
 800de7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de80:	2b00      	cmp	r3, #0
 800de82:	f040 8101 	bne.w	800e088 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	699b      	ldr	r3, [r3, #24]
 800de8a:	0a5b      	lsrs	r3, r3, #9
 800de8c:	693a      	ldr	r2, [r7, #16]
 800de8e:	8952      	ldrh	r2, [r2, #10]
 800de90:	3a01      	subs	r2, #1
 800de92:	4013      	ands	r3, r2
 800de94:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d14d      	bne.n	800df38 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	699b      	ldr	r3, [r3, #24]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10c      	bne.n	800debe <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	689b      	ldr	r3, [r3, #8]
 800dea8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800deaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deac:	2b00      	cmp	r3, #0
 800deae:	d11a      	bne.n	800dee6 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	2100      	movs	r1, #0
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7fe fe19 	bl	800caec <create_chain>
 800deba:	62b8      	str	r0, [r7, #40]	; 0x28
 800debc:	e013      	b.n	800dee6 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d007      	beq.n	800ded6 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	699b      	ldr	r3, [r3, #24]
 800deca:	4619      	mov	r1, r3
 800decc:	68f8      	ldr	r0, [r7, #12]
 800dece:	f7fe fea5 	bl	800cc1c <clmt_clust>
 800ded2:	62b8      	str	r0, [r7, #40]	; 0x28
 800ded4:	e007      	b.n	800dee6 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ded6:	68fa      	ldr	r2, [r7, #12]
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	69db      	ldr	r3, [r3, #28]
 800dedc:	4619      	mov	r1, r3
 800dede:	4610      	mov	r0, r2
 800dee0:	f7fe fe04 	bl	800caec <create_chain>
 800dee4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800dee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f000 8110 	beq.w	800e10e <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	2b01      	cmp	r3, #1
 800def2:	d109      	bne.n	800df08 <f_write+0x11e>
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2202      	movs	r2, #2
 800def8:	755a      	strb	r2, [r3, #21]
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	2102      	movs	r1, #2
 800defe:	4618      	mov	r0, r3
 800df00:	f7fe f976 	bl	800c1f0 <unlock_fs>
 800df04:	2302      	movs	r3, #2
 800df06:	e110      	b.n	800e12a <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df0e:	d109      	bne.n	800df24 <f_write+0x13a>
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2201      	movs	r2, #1
 800df14:	755a      	strb	r2, [r3, #21]
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	2101      	movs	r1, #1
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe f968 	bl	800c1f0 <unlock_fs>
 800df20:	2301      	movs	r3, #1
 800df22:	e102      	b.n	800e12a <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df28:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d102      	bne.n	800df38 <f_write+0x14e>
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df36:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	7d1b      	ldrb	r3, [r3, #20]
 800df3c:	b25b      	sxtb	r3, r3
 800df3e:	2b00      	cmp	r3, #0
 800df40:	da1d      	bge.n	800df7e <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	7858      	ldrb	r0, [r3, #1]
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	6a1a      	ldr	r2, [r3, #32]
 800df50:	2301      	movs	r3, #1
 800df52:	f7fd fff9 	bl	800bf48 <disk_write>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d009      	beq.n	800df70 <f_write+0x186>
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2201      	movs	r2, #1
 800df60:	755a      	strb	r2, [r3, #21]
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	2101      	movs	r1, #1
 800df66:	4618      	mov	r0, r3
 800df68:	f7fe f942 	bl	800c1f0 <unlock_fs>
 800df6c:	2301      	movs	r3, #1
 800df6e:	e0dc      	b.n	800e12a <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	7d1b      	ldrb	r3, [r3, #20]
 800df74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df78:	b2da      	uxtb	r2, r3
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	69db      	ldr	r3, [r3, #28]
 800df84:	4619      	mov	r1, r3
 800df86:	4610      	mov	r0, r2
 800df88:	f7fe fb9a 	bl	800c6c0 <clust2sect>
 800df8c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d109      	bne.n	800dfa8 <f_write+0x1be>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2202      	movs	r2, #2
 800df98:	755a      	strb	r2, [r3, #21]
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	2102      	movs	r1, #2
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe f926 	bl	800c1f0 <unlock_fs>
 800dfa4:	2302      	movs	r3, #2
 800dfa6:	e0c0      	b.n	800e12a <f_write+0x340>
			sect += csect;
 800dfa8:	697a      	ldr	r2, [r7, #20]
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	4413      	add	r3, r2
 800dfae:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	0a5b      	lsrs	r3, r3, #9
 800dfb4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800dfb6:	6a3b      	ldr	r3, [r7, #32]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d041      	beq.n	800e040 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800dfbc:	69ba      	ldr	r2, [r7, #24]
 800dfbe:	6a3b      	ldr	r3, [r7, #32]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	693a      	ldr	r2, [r7, #16]
 800dfc4:	8952      	ldrh	r2, [r2, #10]
 800dfc6:	4293      	cmp	r3, r2
 800dfc8:	d905      	bls.n	800dfd6 <f_write+0x1ec>
					cc = fs->csize - csect;
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	895b      	ldrh	r3, [r3, #10]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	69bb      	ldr	r3, [r7, #24]
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	7858      	ldrb	r0, [r3, #1]
 800dfda:	6a3b      	ldr	r3, [r7, #32]
 800dfdc:	697a      	ldr	r2, [r7, #20]
 800dfde:	69f9      	ldr	r1, [r7, #28]
 800dfe0:	f7fd ffb2 	bl	800bf48 <disk_write>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d009      	beq.n	800dffe <f_write+0x214>
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2201      	movs	r2, #1
 800dfee:	755a      	strb	r2, [r3, #21]
 800dff0:	693b      	ldr	r3, [r7, #16]
 800dff2:	2101      	movs	r1, #1
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fe f8fb 	bl	800c1f0 <unlock_fs>
 800dffa:	2301      	movs	r3, #1
 800dffc:	e095      	b.n	800e12a <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6a1a      	ldr	r2, [r3, #32]
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	6a3a      	ldr	r2, [r7, #32]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d915      	bls.n	800e038 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	6a1a      	ldr	r2, [r3, #32]
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	1ad3      	subs	r3, r2, r3
 800e01a:	025b      	lsls	r3, r3, #9
 800e01c:	69fa      	ldr	r2, [r7, #28]
 800e01e:	4413      	add	r3, r2
 800e020:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e024:	4619      	mov	r1, r3
 800e026:	f7fe f84f 	bl	800c0c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	7d1b      	ldrb	r3, [r3, #20]
 800e02e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e032:	b2da      	uxtb	r2, r3
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e038:	6a3b      	ldr	r3, [r7, #32]
 800e03a:	025b      	lsls	r3, r3, #9
 800e03c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e03e:	e044      	b.n	800e0ca <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6a1b      	ldr	r3, [r3, #32]
 800e044:	697a      	ldr	r2, [r7, #20]
 800e046:	429a      	cmp	r2, r3
 800e048:	d01b      	beq.n	800e082 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	699a      	ldr	r2, [r3, #24]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e052:	429a      	cmp	r2, r3
 800e054:	d215      	bcs.n	800e082 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	7858      	ldrb	r0, [r3, #1]
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e060:	2301      	movs	r3, #1
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	f7fd ff50 	bl	800bf08 <disk_read>
 800e068:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d009      	beq.n	800e082 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2201      	movs	r2, #1
 800e072:	755a      	strb	r2, [r3, #21]
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	2101      	movs	r1, #1
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fe f8b9 	bl	800c1f0 <unlock_fs>
 800e07e:	2301      	movs	r3, #1
 800e080:	e053      	b.n	800e12a <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	697a      	ldr	r2, [r7, #20]
 800e086:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e090:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e094:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d901      	bls.n	800e0a2 <f_write+0x2b8>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	699b      	ldr	r3, [r3, #24]
 800e0ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0b0:	4413      	add	r3, r2
 800e0b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0b4:	69f9      	ldr	r1, [r7, #28]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7fe f806 	bl	800c0c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	7d1b      	ldrb	r3, [r3, #20]
 800e0c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0c4:	b2da      	uxtb	r2, r3
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e0ca:	69fa      	ldr	r2, [r7, #28]
 800e0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ce:	4413      	add	r3, r2
 800e0d0:	61fb      	str	r3, [r7, #28]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	699a      	ldr	r2, [r3, #24]
 800e0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d8:	441a      	add	r2, r3
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	619a      	str	r2, [r3, #24]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	68da      	ldr	r2, [r3, #12]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	699b      	ldr	r3, [r3, #24]
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	bf38      	it	cc
 800e0ea:	461a      	movcc	r2, r3
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	60da      	str	r2, [r3, #12]
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	681a      	ldr	r2, [r3, #0]
 800e0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0f6:	441a      	add	r2, r3
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	687a      	ldr	r2, [r7, #4]
 800e0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e100:	1ad3      	subs	r3, r2, r3
 800e102:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2b00      	cmp	r3, #0
 800e108:	f47f aeb6 	bne.w	800de78 <f_write+0x8e>
 800e10c:	e000      	b.n	800e110 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e10e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	7d1b      	ldrb	r3, [r3, #20]
 800e114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e118:	b2da      	uxtb	r2, r3
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	2100      	movs	r1, #0
 800e122:	4618      	mov	r0, r3
 800e124:	f7fe f864 	bl	800c1f0 <unlock_fs>
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3730      	adds	r7, #48	; 0x30
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e132:	b580      	push	{r7, lr}
 800e134:	b086      	sub	sp, #24
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f107 0208 	add.w	r2, r7, #8
 800e140:	4611      	mov	r1, r2
 800e142:	4618      	mov	r0, r3
 800e144:	f7ff fbe0 	bl	800d908 <validate>
 800e148:	4603      	mov	r3, r0
 800e14a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e14c:	7dfb      	ldrb	r3, [r7, #23]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d16d      	bne.n	800e22e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	7d1b      	ldrb	r3, [r3, #20]
 800e156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d067      	beq.n	800e22e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	7d1b      	ldrb	r3, [r3, #20]
 800e162:	b25b      	sxtb	r3, r3
 800e164:	2b00      	cmp	r3, #0
 800e166:	da1a      	bge.n	800e19e <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	7858      	ldrb	r0, [r3, #1]
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6a1a      	ldr	r2, [r3, #32]
 800e176:	2301      	movs	r3, #1
 800e178:	f7fd fee6 	bl	800bf48 <disk_write>
 800e17c:	4603      	mov	r3, r0
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d006      	beq.n	800e190 <f_sync+0x5e>
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	2101      	movs	r1, #1
 800e186:	4618      	mov	r0, r3
 800e188:	f7fe f832 	bl	800c1f0 <unlock_fs>
 800e18c:	2301      	movs	r3, #1
 800e18e:	e055      	b.n	800e23c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	7d1b      	ldrb	r3, [r3, #20]
 800e194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e198:	b2da      	uxtb	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e19e:	f7fd f931 	bl	800b404 <get_fattime>
 800e1a2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e1a4:	68ba      	ldr	r2, [r7, #8]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1aa:	4619      	mov	r1, r3
 800e1ac:	4610      	mov	r0, r2
 800e1ae:	f7fe f9eb 	bl	800c588 <move_window>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e1b6:	7dfb      	ldrb	r3, [r7, #23]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d138      	bne.n	800e22e <f_sync+0xfc>
					dir = fp->dir_ptr;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	330b      	adds	r3, #11
 800e1c6:	781a      	ldrb	r2, [r3, #0]
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	330b      	adds	r3, #11
 800e1cc:	f042 0220 	orr.w	r2, r2, #32
 800e1d0:	b2d2      	uxtb	r2, r2
 800e1d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6818      	ldr	r0, [r3, #0]
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	461a      	mov	r2, r3
 800e1de:	68f9      	ldr	r1, [r7, #12]
 800e1e0:	f7fe fef6 	bl	800cfd0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	f103 021c 	add.w	r2, r3, #28
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	f7fd ff3d 	bl	800c070 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	3316      	adds	r3, #22
 800e1fa:	6939      	ldr	r1, [r7, #16]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fd ff37 	bl	800c070 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	3312      	adds	r3, #18
 800e206:	2100      	movs	r1, #0
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fd ff16 	bl	800c03a <st_word>
					fs->wflag = 1;
 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	2201      	movs	r2, #1
 800e212:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	4618      	mov	r0, r3
 800e218:	f7fe f9e4 	bl	800c5e4 <sync_fs>
 800e21c:	4603      	mov	r3, r0
 800e21e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7d1b      	ldrb	r3, [r3, #20]
 800e224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	7dfa      	ldrb	r2, [r7, #23]
 800e232:	4611      	mov	r1, r2
 800e234:	4618      	mov	r0, r3
 800e236:	f7fd ffdb 	bl	800c1f0 <unlock_fs>
 800e23a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	3718      	adds	r7, #24
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7ff ff70 	bl	800e132 <f_sync>
 800e252:	4603      	mov	r3, r0
 800e254:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e256:	7bfb      	ldrb	r3, [r7, #15]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d11d      	bne.n	800e298 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f107 0208 	add.w	r2, r7, #8
 800e262:	4611      	mov	r1, r2
 800e264:	4618      	mov	r0, r3
 800e266:	f7ff fb4f 	bl	800d908 <validate>
 800e26a:	4603      	mov	r3, r0
 800e26c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e26e:	7bfb      	ldrb	r3, [r7, #15]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d111      	bne.n	800e298 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	691b      	ldr	r3, [r3, #16]
 800e278:	4618      	mov	r0, r3
 800e27a:	f7fe f8e1 	bl	800c440 <dec_lock>
 800e27e:	4603      	mov	r3, r0
 800e280:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e282:	7bfb      	ldrb	r3, [r7, #15]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d102      	bne.n	800e28e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	2100      	movs	r1, #0
 800e292:	4618      	mov	r0, r3
 800e294:	f7fd ffac 	bl	800c1f0 <unlock_fs>
#endif
		}
	}
	return res;
 800e298:	7bfb      	ldrb	r3, [r7, #15]
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3710      	adds	r7, #16
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}

0800e2a2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800e2a2:	b580      	push	{r7, lr}
 800e2a4:	b084      	sub	sp, #16
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	6078      	str	r0, [r7, #4]
 800e2aa:	460b      	mov	r3, r1
 800e2ac:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800e2ae:	78fb      	ldrb	r3, [r7, #3]
 800e2b0:	2b0a      	cmp	r3, #10
 800e2b2:	d103      	bne.n	800e2bc <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800e2b4:	210d      	movs	r1, #13
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f7ff fff3 	bl	800e2a2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	685b      	ldr	r3, [r3, #4]
 800e2c0:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	db25      	blt.n	800e314 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	1c5a      	adds	r2, r3, #1
 800e2cc:	60fa      	str	r2, [r7, #12]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	78fa      	ldrb	r2, [r7, #3]
 800e2d4:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2b3c      	cmp	r3, #60	; 0x3c
 800e2da:	dd12      	ble.n	800e302 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6818      	ldr	r0, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f103 010c 	add.w	r1, r3, #12
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	f107 0308 	add.w	r3, r7, #8
 800e2ec:	f7ff fd7d 	bl	800ddea <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800e2f0:	68ba      	ldr	r2, [r7, #8]
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d101      	bne.n	800e2fc <putc_bfd+0x5a>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	e001      	b.n	800e300 <putc_bfd+0x5e>
 800e2fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e300:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68fa      	ldr	r2, [r7, #12]
 800e306:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	689b      	ldr	r3, [r3, #8]
 800e30c:	1c5a      	adds	r2, r3, #1
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	609a      	str	r2, [r3, #8]
 800e312:	e000      	b.n	800e316 <putc_bfd+0x74>
	if (i < 0) return;
 800e314:	bf00      	nop
}
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	db16      	blt.n	800e35a <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6818      	ldr	r0, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f103 010c 	add.w	r1, r3, #12
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	461a      	mov	r2, r3
 800e33c:	f107 030c 	add.w	r3, r7, #12
 800e340:	f7ff fd53 	bl	800ddea <f_write>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d107      	bne.n	800e35a <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	68fa      	ldr	r2, [r7, #12]
 800e350:	4293      	cmp	r3, r2
 800e352:	d102      	bne.n	800e35a <putc_flush+0x3e>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	689b      	ldr	r3, [r3, #8]
 800e358:	e001      	b.n	800e35e <putc_flush+0x42>
	return EOF;
 800e35a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800e366:	b480      	push	{r7}
 800e368:	b083      	sub	sp, #12
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
 800e36e:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	683a      	ldr	r2, [r7, #0]
 800e374:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	605a      	str	r2, [r3, #4]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	685a      	ldr	r2, [r3, #4]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	609a      	str	r2, [r3, #8]
}
 800e384:	bf00      	nop
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800e390:	b40e      	push	{r1, r2, r3}
 800e392:	b580      	push	{r7, lr}
 800e394:	b0a7      	sub	sp, #156	; 0x9c
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800e39a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e39e:	6879      	ldr	r1, [r7, #4]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7ff ffe0 	bl	800e366 <putc_init>

	va_start(arp, fmt);
 800e3a6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e3aa:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800e3ac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e3b0:	1c5a      	adds	r2, r3, #1
 800e3b2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800e3bc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 81f2 	beq.w	800e7aa <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800e3c6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e3ca:	2b25      	cmp	r3, #37	; 0x25
 800e3cc:	d008      	beq.n	800e3e0 <f_printf+0x50>
			putc_bfd(&pb, c);
 800e3ce:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800e3d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e3d6:	4611      	mov	r1, r2
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7ff ff62 	bl	800e2a2 <putc_bfd>
			continue;
 800e3de:	e1e3      	b.n	800e7a8 <f_printf+0x418>
		}
		w = f = 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800e3ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e3f0:	1c5a      	adds	r2, r3, #1
 800e3f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800e3fc:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e400:	2b30      	cmp	r3, #48	; 0x30
 800e402:	d10b      	bne.n	800e41c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800e404:	2301      	movs	r3, #1
 800e406:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e40a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e40e:	1c5a      	adds	r2, r3, #1
 800e410:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800e41a:	e024      	b.n	800e466 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800e41c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e420:	2b2d      	cmp	r3, #45	; 0x2d
 800e422:	d120      	bne.n	800e466 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800e424:	2302      	movs	r3, #2
 800e426:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e42a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e42e:	1c5a      	adds	r2, r3, #1
 800e430:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800e43a:	e014      	b.n	800e466 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800e43c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e440:	4613      	mov	r3, r2
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	4413      	add	r3, r2
 800e446:	005b      	lsls	r3, r3, #1
 800e448:	461a      	mov	r2, r3
 800e44a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e44e:	4413      	add	r3, r2
 800e450:	3b30      	subs	r3, #48	; 0x30
 800e452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800e456:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e45a:	1c5a      	adds	r2, r3, #1
 800e45c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800e466:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e46a:	2b2f      	cmp	r3, #47	; 0x2f
 800e46c:	d903      	bls.n	800e476 <f_printf+0xe6>
 800e46e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e472:	2b39      	cmp	r3, #57	; 0x39
 800e474:	d9e2      	bls.n	800e43c <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800e476:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e47a:	2b6c      	cmp	r3, #108	; 0x6c
 800e47c:	d003      	beq.n	800e486 <f_printf+0xf6>
 800e47e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e482:	2b4c      	cmp	r3, #76	; 0x4c
 800e484:	d10d      	bne.n	800e4a2 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800e486:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e48a:	f043 0304 	orr.w	r3, r3, #4
 800e48e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800e492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800e496:	1c5a      	adds	r2, r3, #1
 800e498:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800e4a2:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	f000 8181 	beq.w	800e7ae <f_printf+0x41e>
		d = c;
 800e4ac:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e4b0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800e4b4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e4b8:	2b60      	cmp	r3, #96	; 0x60
 800e4ba:	d908      	bls.n	800e4ce <f_printf+0x13e>
 800e4bc:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e4c0:	2b7a      	cmp	r3, #122	; 0x7a
 800e4c2:	d804      	bhi.n	800e4ce <f_printf+0x13e>
 800e4c4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e4c8:	3b20      	subs	r3, #32
 800e4ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800e4ce:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e4d2:	3b42      	subs	r3, #66	; 0x42
 800e4d4:	2b16      	cmp	r3, #22
 800e4d6:	f200 8098 	bhi.w	800e60a <f_printf+0x27a>
 800e4da:	a201      	add	r2, pc, #4	; (adr r2, 800e4e0 <f_printf+0x150>)
 800e4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e0:	0800e5eb 	.word	0x0800e5eb
 800e4e4:	0800e5d3 	.word	0x0800e5d3
 800e4e8:	0800e5fb 	.word	0x0800e5fb
 800e4ec:	0800e60b 	.word	0x0800e60b
 800e4f0:	0800e60b 	.word	0x0800e60b
 800e4f4:	0800e60b 	.word	0x0800e60b
 800e4f8:	0800e60b 	.word	0x0800e60b
 800e4fc:	0800e60b 	.word	0x0800e60b
 800e500:	0800e60b 	.word	0x0800e60b
 800e504:	0800e60b 	.word	0x0800e60b
 800e508:	0800e60b 	.word	0x0800e60b
 800e50c:	0800e60b 	.word	0x0800e60b
 800e510:	0800e60b 	.word	0x0800e60b
 800e514:	0800e5f3 	.word	0x0800e5f3
 800e518:	0800e60b 	.word	0x0800e60b
 800e51c:	0800e60b 	.word	0x0800e60b
 800e520:	0800e60b 	.word	0x0800e60b
 800e524:	0800e53d 	.word	0x0800e53d
 800e528:	0800e60b 	.word	0x0800e60b
 800e52c:	0800e5fb 	.word	0x0800e5fb
 800e530:	0800e60b 	.word	0x0800e60b
 800e534:	0800e60b 	.word	0x0800e60b
 800e538:	0800e603 	.word	0x0800e603
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800e53c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e53e:	1d1a      	adds	r2, r3, #4
 800e540:	67ba      	str	r2, [r7, #120]	; 0x78
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800e546:	2300      	movs	r3, #0
 800e548:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e54c:	e004      	b.n	800e558 <f_printf+0x1c8>
 800e54e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e552:	3301      	adds	r3, #1
 800e554:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e558:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800e55a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e55e:	4413      	add	r3, r2
 800e560:	781b      	ldrb	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1f3      	bne.n	800e54e <f_printf+0x1be>
			if (!(f & 2)) {
 800e566:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e56a:	f003 0302 	and.w	r3, r3, #2
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d11a      	bne.n	800e5a8 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800e572:	e005      	b.n	800e580 <f_printf+0x1f0>
 800e574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e578:	2120      	movs	r1, #32
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7ff fe91 	bl	800e2a2 <putc_bfd>
 800e580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e584:	1c5a      	adds	r2, r3, #1
 800e586:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e58a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e58e:	429a      	cmp	r2, r3
 800e590:	d8f0      	bhi.n	800e574 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800e592:	e009      	b.n	800e5a8 <f_printf+0x218>
 800e594:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e596:	1c5a      	adds	r2, r3, #1
 800e598:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e59a:	781a      	ldrb	r2, [r3, #0]
 800e59c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f7ff fe7d 	bl	800e2a2 <putc_bfd>
 800e5a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d1f1      	bne.n	800e594 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800e5b0:	e005      	b.n	800e5be <f_printf+0x22e>
 800e5b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e5b6:	2120      	movs	r1, #32
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7ff fe72 	bl	800e2a2 <putc_bfd>
 800e5be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e5c2:	1c5a      	adds	r2, r3, #1
 800e5c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e5c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d8f0      	bhi.n	800e5b2 <f_printf+0x222>
			continue;
 800e5d0:	e0ea      	b.n	800e7a8 <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800e5d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e5d4:	1d1a      	adds	r2, r3, #4
 800e5d6:	67ba      	str	r2, [r7, #120]	; 0x78
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	b2da      	uxtb	r2, r3
 800e5dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e5e0:	4611      	mov	r1, r2
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	f7ff fe5d 	bl	800e2a2 <putc_bfd>
 800e5e8:	e0de      	b.n	800e7a8 <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e5f0:	e014      	b.n	800e61c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800e5f2:	2308      	movs	r3, #8
 800e5f4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e5f8:	e010      	b.n	800e61c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800e5fa:	230a      	movs	r3, #10
 800e5fc:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e600:	e00c      	b.n	800e61c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800e602:	2310      	movs	r3, #16
 800e604:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800e608:	e008      	b.n	800e61c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800e60a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800e60e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e612:	4611      	mov	r1, r2
 800e614:	4618      	mov	r0, r3
 800e616:	f7ff fe44 	bl	800e2a2 <putc_bfd>
 800e61a:	e0c5      	b.n	800e7a8 <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800e61c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e620:	f003 0304 	and.w	r3, r3, #4
 800e624:	2b00      	cmp	r3, #0
 800e626:	d004      	beq.n	800e632 <f_printf+0x2a2>
 800e628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e62a:	1d1a      	adds	r2, r3, #4
 800e62c:	67ba      	str	r2, [r7, #120]	; 0x78
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	e00c      	b.n	800e64c <f_printf+0x2bc>
 800e632:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e636:	2b44      	cmp	r3, #68	; 0x44
 800e638:	d104      	bne.n	800e644 <f_printf+0x2b4>
 800e63a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e63c:	1d1a      	adds	r2, r3, #4
 800e63e:	67ba      	str	r2, [r7, #120]	; 0x78
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	e003      	b.n	800e64c <f_printf+0x2bc>
 800e644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e646:	1d1a      	adds	r2, r3, #4
 800e648:	67ba      	str	r2, [r7, #120]	; 0x78
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800e650:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e654:	2b44      	cmp	r3, #68	; 0x44
 800e656:	d10e      	bne.n	800e676 <f_printf+0x2e6>
 800e658:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	da0a      	bge.n	800e676 <f_printf+0x2e6>
			v = 0 - v;
 800e660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e664:	425b      	negs	r3, r3
 800e666:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800e66a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e66e:	f043 0308 	orr.w	r3, r3, #8
 800e672:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800e67c:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800e680:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e684:	fbb3 f1f2 	udiv	r1, r3, r2
 800e688:	fb01 f202 	mul.w	r2, r1, r2
 800e68c:	1a9b      	subs	r3, r3, r2
 800e68e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800e692:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800e696:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e69a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e69e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800e6a2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e6a6:	2b09      	cmp	r3, #9
 800e6a8:	d90b      	bls.n	800e6c2 <f_printf+0x332>
 800e6aa:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800e6ae:	2b78      	cmp	r3, #120	; 0x78
 800e6b0:	d101      	bne.n	800e6b6 <f_printf+0x326>
 800e6b2:	2227      	movs	r2, #39	; 0x27
 800e6b4:	e000      	b.n	800e6b8 <f_printf+0x328>
 800e6b6:	2207      	movs	r2, #7
 800e6b8:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800e6bc:	4413      	add	r3, r2
 800e6be:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800e6c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e6c6:	1c5a      	adds	r2, r3, #1
 800e6c8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e6cc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800e6d0:	3230      	adds	r2, #48	; 0x30
 800e6d2:	b2d2      	uxtb	r2, r2
 800e6d4:	3398      	adds	r3, #152	; 0x98
 800e6d6:	443b      	add	r3, r7
 800e6d8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800e6dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d003      	beq.n	800e6ec <f_printf+0x35c>
 800e6e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e6e8:	2b1f      	cmp	r3, #31
 800e6ea:	d9c7      	bls.n	800e67c <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800e6ec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e6f0:	f003 0308 	and.w	r3, r3, #8
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d009      	beq.n	800e70c <f_printf+0x37c>
 800e6f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800e702:	3398      	adds	r3, #152	; 0x98
 800e704:	443b      	add	r3, r7
 800e706:	222d      	movs	r2, #45	; 0x2d
 800e708:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800e70c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800e714:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e718:	f003 0301 	and.w	r3, r3, #1
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d001      	beq.n	800e724 <f_printf+0x394>
 800e720:	2330      	movs	r3, #48	; 0x30
 800e722:	e000      	b.n	800e726 <f_printf+0x396>
 800e724:	2320      	movs	r3, #32
 800e726:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800e72a:	e007      	b.n	800e73c <f_printf+0x3ac>
 800e72c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800e730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e734:	4611      	mov	r1, r2
 800e736:	4618      	mov	r0, r3
 800e738:	f7ff fdb3 	bl	800e2a2 <putc_bfd>
 800e73c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800e740:	f003 0302 	and.w	r3, r3, #2
 800e744:	2b00      	cmp	r3, #0
 800e746:	d108      	bne.n	800e75a <f_printf+0x3ca>
 800e748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e74c:	1c5a      	adds	r2, r3, #1
 800e74e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e752:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e756:	429a      	cmp	r2, r3
 800e758:	d8e8      	bhi.n	800e72c <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 800e75a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e75e:	3b01      	subs	r3, #1
 800e760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e764:	f107 020c 	add.w	r2, r7, #12
 800e768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e76c:	4413      	add	r3, r2
 800e76e:	781a      	ldrb	r2, [r3, #0]
 800e770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e774:	4611      	mov	r1, r2
 800e776:	4618      	mov	r0, r3
 800e778:	f7ff fd93 	bl	800e2a2 <putc_bfd>
		} while (i);
 800e77c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e780:	2b00      	cmp	r3, #0
 800e782:	d1ea      	bne.n	800e75a <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 800e784:	e007      	b.n	800e796 <f_printf+0x406>
 800e786:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800e78a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e78e:	4611      	mov	r1, r2
 800e790:	4618      	mov	r0, r3
 800e792:	f7ff fd86 	bl	800e2a2 <putc_bfd>
 800e796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e79a:	1c5a      	adds	r2, r3, #1
 800e79c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e7a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d8ee      	bhi.n	800e786 <f_printf+0x3f6>
		c = *fmt++;
 800e7a8:	e600      	b.n	800e3ac <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800e7aa:	bf00      	nop
 800e7ac:	e000      	b.n	800e7b0 <f_printf+0x420>
		if (!c) break;
 800e7ae:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800e7b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f7ff fdb1 	bl	800e31c <putc_flush>
 800e7ba:	4603      	mov	r3, r0
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	379c      	adds	r7, #156	; 0x9c
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e7c6:	b003      	add	sp, #12
 800e7c8:	4770      	bx	lr
 800e7ca:	bf00      	nop

0800e7cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e7cc:	b480      	push	{r7}
 800e7ce:	b087      	sub	sp, #28
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e7da:	2301      	movs	r3, #1
 800e7dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e7de:	2300      	movs	r3, #0
 800e7e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e7e2:	4b1f      	ldr	r3, [pc, #124]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e7e4:	7a5b      	ldrb	r3, [r3, #9]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d131      	bne.n	800e850 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e7ec:	4b1c      	ldr	r3, [pc, #112]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e7ee:	7a5b      	ldrb	r3, [r3, #9]
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	4b1a      	ldr	r3, [pc, #104]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e7f6:	2100      	movs	r1, #0
 800e7f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e7fa:	4b19      	ldr	r3, [pc, #100]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e7fc:	7a5b      	ldrb	r3, [r3, #9]
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	4a17      	ldr	r2, [pc, #92]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	4413      	add	r3, r2
 800e806:	68fa      	ldr	r2, [r7, #12]
 800e808:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e80a:	4b15      	ldr	r3, [pc, #84]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e80c:	7a5b      	ldrb	r3, [r3, #9]
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	461a      	mov	r2, r3
 800e812:	4b13      	ldr	r3, [pc, #76]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e814:	4413      	add	r3, r2
 800e816:	79fa      	ldrb	r2, [r7, #7]
 800e818:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e81a:	4b11      	ldr	r3, [pc, #68]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e81c:	7a5b      	ldrb	r3, [r3, #9]
 800e81e:	b2db      	uxtb	r3, r3
 800e820:	1c5a      	adds	r2, r3, #1
 800e822:	b2d1      	uxtb	r1, r2
 800e824:	4a0e      	ldr	r2, [pc, #56]	; (800e860 <FATFS_LinkDriverEx+0x94>)
 800e826:	7251      	strb	r1, [r2, #9]
 800e828:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e82a:	7dbb      	ldrb	r3, [r7, #22]
 800e82c:	3330      	adds	r3, #48	; 0x30
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	3301      	adds	r3, #1
 800e838:	223a      	movs	r2, #58	; 0x3a
 800e83a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	3302      	adds	r3, #2
 800e840:	222f      	movs	r2, #47	; 0x2f
 800e842:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	3303      	adds	r3, #3
 800e848:	2200      	movs	r2, #0
 800e84a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e84c:	2300      	movs	r3, #0
 800e84e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e850:	7dfb      	ldrb	r3, [r7, #23]
}
 800e852:	4618      	mov	r0, r3
 800e854:	371c      	adds	r7, #28
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop
 800e860:	2000092c 	.word	0x2000092c

0800e864 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b082      	sub	sp, #8
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e86e:	2200      	movs	r2, #0
 800e870:	6839      	ldr	r1, [r7, #0]
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7ff ffaa 	bl	800e7cc <FATFS_LinkDriverEx>
 800e878:	4603      	mov	r3, r0
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}

0800e882 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800e882:	b580      	push	{r7, lr}
 800e884:	b084      	sub	sp, #16
 800e886:	af00      	add	r7, sp, #0
 800e888:	4603      	mov	r3, r0
 800e88a:	6039      	str	r1, [r7, #0]
 800e88c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osMutexDef(MTX);
    *sobj = osMutexCreate(osMutex(MTX));
#else
    *sobj = osMutexNew(NULL);
 800e88e:	2000      	movs	r0, #0
 800e890:	f000 fb94 	bl	800efbc <osMutexNew>
 800e894:	4602      	mov	r2, r0
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	bf14      	ite	ne
 800e8a2:	2301      	movne	r3, #1
 800e8a4:	2300      	moveq	r3, #0
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	60fb      	str	r3, [r7, #12]

    return ret;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3710      	adds	r7, #16
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}

0800e8b4 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 fc8b 	bl	800f1d8 <osMutexDelete>
#else
    osSemaphoreDelete (sobj);
#endif
    return 1;
 800e8c2:	2301      	movs	r3, #1
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}

0800e8cc <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	60fb      	str	r3, [r7, #12]
#endif

#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
 800e8d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 fbf3 	bl	800f0c8 <osMutexAcquire>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d101      	bne.n	800e8ec <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b082      	sub	sp, #8
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f000 fc2d 	bl	800f15e <osMutexRelease>
#else
  osSemaphoreRelease(sobj);
#endif
}
 800e904:	bf00      	nop
 800e906:	3708      	adds	r7, #8
 800e908:	46bd      	mov	sp, r7
 800e90a:	bd80      	pop	{r7, pc}

0800e90c <__NVIC_SetPriority>:
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	6039      	str	r1, [r7, #0]
 800e916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	db0a      	blt.n	800e936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	b2da      	uxtb	r2, r3
 800e924:	490c      	ldr	r1, [pc, #48]	; (800e958 <__NVIC_SetPriority+0x4c>)
 800e926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e92a:	0112      	lsls	r2, r2, #4
 800e92c:	b2d2      	uxtb	r2, r2
 800e92e:	440b      	add	r3, r1
 800e930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e934:	e00a      	b.n	800e94c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	4908      	ldr	r1, [pc, #32]	; (800e95c <__NVIC_SetPriority+0x50>)
 800e93c:	79fb      	ldrb	r3, [r7, #7]
 800e93e:	f003 030f 	and.w	r3, r3, #15
 800e942:	3b04      	subs	r3, #4
 800e944:	0112      	lsls	r2, r2, #4
 800e946:	b2d2      	uxtb	r2, r2
 800e948:	440b      	add	r3, r1
 800e94a:	761a      	strb	r2, [r3, #24]
}
 800e94c:	bf00      	nop
 800e94e:	370c      	adds	r7, #12
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	e000e100 	.word	0xe000e100
 800e95c:	e000ed00 	.word	0xe000ed00

0800e960 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e960:	b580      	push	{r7, lr}
 800e962:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e964:	4b05      	ldr	r3, [pc, #20]	; (800e97c <SysTick_Handler+0x1c>)
 800e966:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e968:	f002 ff0e 	bl	8011788 <xTaskGetSchedulerState>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b01      	cmp	r3, #1
 800e970:	d001      	beq.n	800e976 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e972:	f004 f8b1 	bl	8012ad8 <xPortSysTickHandler>
  }
}
 800e976:	bf00      	nop
 800e978:	bd80      	pop	{r7, pc}
 800e97a:	bf00      	nop
 800e97c:	e000e010 	.word	0xe000e010

0800e980 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e980:	b580      	push	{r7, lr}
 800e982:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e984:	2100      	movs	r1, #0
 800e986:	f06f 0004 	mvn.w	r0, #4
 800e98a:	f7ff ffbf 	bl	800e90c <__NVIC_SetPriority>
#endif
}
 800e98e:	bf00      	nop
 800e990:	bd80      	pop	{r7, pc}
	...

0800e994 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e994:	b480      	push	{r7}
 800e996:	b083      	sub	sp, #12
 800e998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e99a:	f3ef 8305 	mrs	r3, IPSR
 800e99e:	603b      	str	r3, [r7, #0]
  return(result);
 800e9a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d003      	beq.n	800e9ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e9a6:	f06f 0305 	mvn.w	r3, #5
 800e9aa:	607b      	str	r3, [r7, #4]
 800e9ac:	e00c      	b.n	800e9c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e9ae:	4b0a      	ldr	r3, [pc, #40]	; (800e9d8 <osKernelInitialize+0x44>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d105      	bne.n	800e9c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e9b6:	4b08      	ldr	r3, [pc, #32]	; (800e9d8 <osKernelInitialize+0x44>)
 800e9b8:	2201      	movs	r2, #1
 800e9ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e9bc:	2300      	movs	r3, #0
 800e9be:	607b      	str	r3, [r7, #4]
 800e9c0:	e002      	b.n	800e9c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e9c8:	687b      	ldr	r3, [r7, #4]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	370c      	adds	r7, #12
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	20000938 	.word	0x20000938

0800e9dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9e2:	f3ef 8305 	mrs	r3, IPSR
 800e9e6:	603b      	str	r3, [r7, #0]
  return(result);
 800e9e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d003      	beq.n	800e9f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e9ee:	f06f 0305 	mvn.w	r3, #5
 800e9f2:	607b      	str	r3, [r7, #4]
 800e9f4:	e010      	b.n	800ea18 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e9f6:	4b0b      	ldr	r3, [pc, #44]	; (800ea24 <osKernelStart+0x48>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d109      	bne.n	800ea12 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e9fe:	f7ff ffbf 	bl	800e980 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ea02:	4b08      	ldr	r3, [pc, #32]	; (800ea24 <osKernelStart+0x48>)
 800ea04:	2202      	movs	r2, #2
 800ea06:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ea08:	f002 fa40 	bl	8010e8c <vTaskStartScheduler>
      stat = osOK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	607b      	str	r3, [r7, #4]
 800ea10:	e002      	b.n	800ea18 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ea12:	f04f 33ff 	mov.w	r3, #4294967295
 800ea16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ea18:	687b      	ldr	r3, [r7, #4]
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3708      	adds	r7, #8
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	20000938 	.word	0x20000938

0800ea28 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea2e:	f3ef 8305 	mrs	r3, IPSR
 800ea32:	603b      	str	r3, [r7, #0]
  return(result);
 800ea34:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d003      	beq.n	800ea42 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800ea3a:	f002 fb53 	bl	80110e4 <xTaskGetTickCountFromISR>
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	e002      	b.n	800ea48 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800ea42:	f002 fb3f 	bl	80110c4 <xTaskGetTickCount>
 800ea46:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800ea48:	687b      	ldr	r3, [r7, #4]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800ea52:	b480      	push	{r7}
 800ea54:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800ea56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea62:	4770      	bx	lr

0800ea64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b08e      	sub	sp, #56	; 0x38
 800ea68:	af04      	add	r7, sp, #16
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ea70:	2300      	movs	r3, #0
 800ea72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea74:	f3ef 8305 	mrs	r3, IPSR
 800ea78:	617b      	str	r3, [r7, #20]
  return(result);
 800ea7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d17e      	bne.n	800eb7e <osThreadNew+0x11a>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d07b      	beq.n	800eb7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ea86:	2380      	movs	r3, #128	; 0x80
 800ea88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ea8a:	2318      	movs	r3, #24
 800ea8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ea92:	f04f 33ff 	mov.w	r3, #4294967295
 800ea96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d045      	beq.n	800eb2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d002      	beq.n	800eaac <osThreadNew+0x48>
        name = attr->name;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	699b      	ldr	r3, [r3, #24]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d002      	beq.n	800eaba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	699b      	ldr	r3, [r3, #24]
 800eab8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d008      	beq.n	800ead2 <osThreadNew+0x6e>
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	2b38      	cmp	r3, #56	; 0x38
 800eac4:	d805      	bhi.n	800ead2 <osThreadNew+0x6e>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	f003 0301 	and.w	r3, r3, #1
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d001      	beq.n	800ead6 <osThreadNew+0x72>
        return (NULL);
 800ead2:	2300      	movs	r3, #0
 800ead4:	e054      	b.n	800eb80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	695b      	ldr	r3, [r3, #20]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d003      	beq.n	800eae6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	695b      	ldr	r3, [r3, #20]
 800eae2:	089b      	lsrs	r3, r3, #2
 800eae4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	689b      	ldr	r3, [r3, #8]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d00e      	beq.n	800eb0c <osThreadNew+0xa8>
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	2ba7      	cmp	r3, #167	; 0xa7
 800eaf4:	d90a      	bls.n	800eb0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d006      	beq.n	800eb0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	695b      	ldr	r3, [r3, #20]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d002      	beq.n	800eb0c <osThreadNew+0xa8>
        mem = 1;
 800eb06:	2301      	movs	r3, #1
 800eb08:	61bb      	str	r3, [r7, #24]
 800eb0a:	e010      	b.n	800eb2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d10c      	bne.n	800eb2e <osThreadNew+0xca>
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d108      	bne.n	800eb2e <osThreadNew+0xca>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	691b      	ldr	r3, [r3, #16]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d104      	bne.n	800eb2e <osThreadNew+0xca>
          mem = 0;
 800eb24:	2300      	movs	r3, #0
 800eb26:	61bb      	str	r3, [r7, #24]
 800eb28:	e001      	b.n	800eb2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d110      	bne.n	800eb56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800eb3c:	9202      	str	r2, [sp, #8]
 800eb3e:	9301      	str	r3, [sp, #4]
 800eb40:	69fb      	ldr	r3, [r7, #28]
 800eb42:	9300      	str	r3, [sp, #0]
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	6a3a      	ldr	r2, [r7, #32]
 800eb48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f001 ff68 	bl	8010a20 <xTaskCreateStatic>
 800eb50:	4603      	mov	r3, r0
 800eb52:	613b      	str	r3, [r7, #16]
 800eb54:	e013      	b.n	800eb7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800eb56:	69bb      	ldr	r3, [r7, #24]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d110      	bne.n	800eb7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800eb5c:	6a3b      	ldr	r3, [r7, #32]
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	f107 0310 	add.w	r3, r7, #16
 800eb64:	9301      	str	r3, [sp, #4]
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	9300      	str	r3, [sp, #0]
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eb6e:	68f8      	ldr	r0, [r7, #12]
 800eb70:	f001 ffb3 	bl	8010ada <xTaskCreate>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d001      	beq.n	800eb7e <osThreadNew+0x11a>
            hTask = NULL;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800eb7e:	693b      	ldr	r3, [r7, #16]
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	3728      	adds	r7, #40	; 0x28
 800eb84:	46bd      	mov	sp, r7
 800eb86:	bd80      	pop	{r7, pc}

0800eb88 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb8e:	f3ef 8305 	mrs	r3, IPSR
 800eb92:	603b      	str	r3, [r7, #0]
  return(result);
 800eb94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d003      	beq.n	800eba2 <osThreadYield+0x1a>
    stat = osErrorISR;
 800eb9a:	f06f 0305 	mvn.w	r3, #5
 800eb9e:	607b      	str	r3, [r7, #4]
 800eba0:	e009      	b.n	800ebb6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800eba2:	2300      	movs	r3, #0
 800eba4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800eba6:	4b07      	ldr	r3, [pc, #28]	; (800ebc4 <osThreadYield+0x3c>)
 800eba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebac:	601a      	str	r2, [r3, #0]
 800ebae:	f3bf 8f4f 	dsb	sy
 800ebb2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800ebb6:	687b      	ldr	r3, [r7, #4]
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr
 800ebc4:	e000ed04 	.word	0xe000ed04

0800ebc8 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b088      	sub	sp, #32
 800ebcc:	af02      	add	r7, sp, #8
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800ebd6:	697b      	ldr	r3, [r7, #20]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d002      	beq.n	800ebe2 <osThreadFlagsSet+0x1a>
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	da03      	bge.n	800ebea <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800ebe2:	f06f 0303 	mvn.w	r3, #3
 800ebe6:	60fb      	str	r3, [r7, #12]
 800ebe8:	e035      	b.n	800ec56 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800ebea:	f04f 33ff 	mov.w	r3, #4294967295
 800ebee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebf0:	f3ef 8305 	mrs	r3, IPSR
 800ebf4:	613b      	str	r3, [r7, #16]
  return(result);
 800ebf6:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d01f      	beq.n	800ec3c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800ec00:	f107 0308 	add.w	r3, r7, #8
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	2300      	movs	r3, #0
 800ec08:	2201      	movs	r2, #1
 800ec0a:	6839      	ldr	r1, [r7, #0]
 800ec0c:	6978      	ldr	r0, [r7, #20]
 800ec0e:	f003 f863 	bl	8011cd8 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800ec12:	f107 030c 	add.w	r3, r7, #12
 800ec16:	2200      	movs	r2, #0
 800ec18:	9200      	str	r2, [sp, #0]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	2100      	movs	r1, #0
 800ec1e:	6978      	ldr	r0, [r7, #20]
 800ec20:	f003 f85a 	bl	8011cd8 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d015      	beq.n	800ec56 <osThreadFlagsSet+0x8e>
 800ec2a:	4b0d      	ldr	r3, [pc, #52]	; (800ec60 <osThreadFlagsSet+0x98>)
 800ec2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec30:	601a      	str	r2, [r3, #0]
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	e00c      	b.n	800ec56 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	2201      	movs	r2, #1
 800ec40:	6839      	ldr	r1, [r7, #0]
 800ec42:	6978      	ldr	r0, [r7, #20]
 800ec44:	f002 ff8a 	bl	8011b5c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800ec48:	f107 030c 	add.w	r3, r7, #12
 800ec4c:	2200      	movs	r2, #0
 800ec4e:	2100      	movs	r1, #0
 800ec50:	6978      	ldr	r0, [r7, #20]
 800ec52:	f002 ff83 	bl	8011b5c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800ec56:	68fb      	ldr	r3, [r7, #12]
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	3718      	adds	r7, #24
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	bd80      	pop	{r7, pc}
 800ec60:	e000ed04 	.word	0xe000ed04

0800ec64 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec6c:	f3ef 8305 	mrs	r3, IPSR
 800ec70:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec72:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d003      	beq.n	800ec80 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 800ec78:	f06f 0305 	mvn.w	r3, #5
 800ec7c:	617b      	str	r3, [r7, #20]
 800ec7e:	e02a      	b.n	800ecd6 <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	da03      	bge.n	800ec8e <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800ec86:	f06f 0303 	mvn.w	r3, #3
 800ec8a:	617b      	str	r3, [r7, #20]
 800ec8c:	e023      	b.n	800ecd6 <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800ec8e:	f002 fd6b 	bl	8011768 <xTaskGetCurrentTaskHandle>
 800ec92:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800ec94:	f107 0308 	add.w	r3, r7, #8
 800ec98:	2200      	movs	r2, #0
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	6938      	ldr	r0, [r7, #16]
 800ec9e:	f002 ff5d 	bl	8011b5c <xTaskGenericNotify>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	d113      	bne.n	800ecd0 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	43da      	mvns	r2, r3
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	4013      	ands	r3, r2
 800ecb4:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800ecb6:	68b9      	ldr	r1, [r7, #8]
 800ecb8:	2300      	movs	r3, #0
 800ecba:	2203      	movs	r2, #3
 800ecbc:	6938      	ldr	r0, [r7, #16]
 800ecbe:	f002 ff4d 	bl	8011b5c <xTaskGenericNotify>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d006      	beq.n	800ecd6 <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 800ecc8:	f04f 33ff 	mov.w	r3, #4294967295
 800eccc:	617b      	str	r3, [r7, #20]
 800ecce:	e002      	b.n	800ecd6 <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800ecd0:	f04f 33ff 	mov.w	r3, #4294967295
 800ecd4:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800ecd6:	697b      	ldr	r3, [r7, #20]
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3718      	adds	r7, #24
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b08c      	sub	sp, #48	; 0x30
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	60f8      	str	r0, [r7, #12]
 800ece8:	60b9      	str	r1, [r7, #8]
 800ecea:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecec:	f3ef 8305 	mrs	r3, IPSR
 800ecf0:	617b      	str	r3, [r7, #20]
  return(result);
 800ecf2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d003      	beq.n	800ed00 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800ecf8:	f06f 0305 	mvn.w	r3, #5
 800ecfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecfe:	e06b      	b.n	800edd8 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	da03      	bge.n	800ed0e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800ed06:	f06f 0303 	mvn.w	r3, #3
 800ed0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ed0c:	e064      	b.n	800edd8 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	f003 0302 	and.w	r3, r3, #2
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <osThreadFlagsWait+0x3e>
      clear = 0U;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed1c:	e001      	b.n	800ed22 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800ed22:	2300      	movs	r3, #0
 800ed24:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800ed2a:	f002 f9cb 	bl	80110c4 <xTaskGetTickCount>
 800ed2e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ed30:	f107 0210 	add.w	r2, r7, #16
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ed38:	2000      	movs	r0, #0
 800ed3a:	f002 feaf 	bl	8011a9c <xTaskNotifyWait>
 800ed3e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d137      	bne.n	800edb6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800ed46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800ed4e:	693b      	ldr	r3, [r7, #16]
 800ed50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed52:	4313      	orrs	r3, r2
 800ed54:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	f003 0301 	and.w	r3, r3, #1
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d00c      	beq.n	800ed7a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed64:	4013      	ands	r3, r2
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d032      	beq.n	800edd2 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d10f      	bne.n	800ed92 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ed72:	f06f 0302 	mvn.w	r3, #2
 800ed76:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800ed78:	e02e      	b.n	800edd8 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7e:	4013      	ands	r3, r2
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d128      	bne.n	800edd6 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d103      	bne.n	800ed92 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800ed8a:	f06f 0302 	mvn.w	r3, #2
 800ed8e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800ed90:	e022      	b.n	800edd8 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800ed92:	f002 f997 	bl	80110c4 <xTaskGetTickCount>
 800ed96:	4602      	mov	r2, r0
 800ed98:	6a3b      	ldr	r3, [r7, #32]
 800ed9a:	1ad3      	subs	r3, r2, r3
 800ed9c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800ed9e:	69ba      	ldr	r2, [r7, #24]
 800eda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d902      	bls.n	800edac <osThreadFlagsWait+0xcc>
          tout  = 0;
 800eda6:	2300      	movs	r3, #0
 800eda8:	627b      	str	r3, [r7, #36]	; 0x24
 800edaa:	e00e      	b.n	800edca <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800edac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	627b      	str	r3, [r7, #36]	; 0x24
 800edb4:	e009      	b.n	800edca <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d103      	bne.n	800edc4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800edbc:	f06f 0302 	mvn.w	r3, #2
 800edc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edc2:	e002      	b.n	800edca <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800edc4:	f06f 0301 	mvn.w	r3, #1
 800edc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d1af      	bne.n	800ed30 <osThreadFlagsWait+0x50>
 800edd0:	e002      	b.n	800edd8 <osThreadFlagsWait+0xf8>
            break;
 800edd2:	bf00      	nop
 800edd4:	e000      	b.n	800edd8 <osThreadFlagsWait+0xf8>
            break;
 800edd6:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800edd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800edda:	4618      	mov	r0, r3
 800eddc:	3730      	adds	r7, #48	; 0x30
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b086      	sub	sp, #24
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edea:	f3ef 8305 	mrs	r3, IPSR
 800edee:	60fb      	str	r3, [r7, #12]
  return(result);
 800edf0:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d003      	beq.n	800edfe <osDelayUntil+0x1c>
    stat = osErrorISR;
 800edf6:	f06f 0305 	mvn.w	r3, #5
 800edfa:	617b      	str	r3, [r7, #20]
 800edfc:	e019      	b.n	800ee32 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800edfe:	2300      	movs	r3, #0
 800ee00:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ee02:	f002 f95f 	bl	80110c4 <xTaskGetTickCount>
 800ee06:	4603      	mov	r3, r0
 800ee08:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	1ad3      	subs	r3, r2, r3
 800ee10:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d009      	beq.n	800ee2c <osDelayUntil+0x4a>
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	db06      	blt.n	800ee2c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800ee1e:	f107 0308 	add.w	r3, r7, #8
 800ee22:	6939      	ldr	r1, [r7, #16]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f001 ffb3 	bl	8010d90 <vTaskDelayUntil>
 800ee2a:	e002      	b.n	800ee32 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ee2c:	f06f 0303 	mvn.w	r3, #3
 800ee30:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ee32:	697b      	ldr	r3, [r7, #20]
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3718      	adds	r7, #24
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}

0800ee3c <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f003 fc67 	bl	8012718 <pvTimerGetTimerID>
 800ee4a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d005      	beq.n	800ee5e <TimerCallback+0x22>
    callb->func (callb->arg);
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68fa      	ldr	r2, [r7, #12]
 800ee58:	6852      	ldr	r2, [r2, #4]
 800ee5a:	4610      	mov	r0, r2
 800ee5c:	4798      	blx	r3
  }
}
 800ee5e:	bf00      	nop
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
	...

0800ee68 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08c      	sub	sp, #48	; 0x30
 800ee6c:	af02      	add	r7, sp, #8
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	607a      	str	r2, [r7, #4]
 800ee72:	603b      	str	r3, [r7, #0]
 800ee74:	460b      	mov	r3, r1
 800ee76:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee7c:	f3ef 8305 	mrs	r3, IPSR
 800ee80:	613b      	str	r3, [r7, #16]
  return(result);
 800ee82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d163      	bne.n	800ef50 <osTimerNew+0xe8>
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d060      	beq.n	800ef50 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800ee8e:	2008      	movs	r0, #8
 800ee90:	f003 feb2 	bl	8012bf8 <pvPortMalloc>
 800ee94:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d059      	beq.n	800ef50 <osTimerNew+0xe8>
      callb->func = func;
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800eea8:	7afb      	ldrb	r3, [r7, #11]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d102      	bne.n	800eeb4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	61fb      	str	r3, [r7, #28]
 800eeb2:	e001      	b.n	800eeb8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800eeb8:	f04f 33ff 	mov.w	r3, #4294967295
 800eebc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800eebe:	2300      	movs	r3, #0
 800eec0:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d01c      	beq.n	800ef02 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d002      	beq.n	800eed6 <osTimerNew+0x6e>
          name = attr->name;
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d006      	beq.n	800eeec <osTimerNew+0x84>
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	2b2b      	cmp	r3, #43	; 0x2b
 800eee4:	d902      	bls.n	800eeec <osTimerNew+0x84>
          mem = 1;
 800eee6:	2301      	movs	r3, #1
 800eee8:	61bb      	str	r3, [r7, #24]
 800eeea:	e00c      	b.n	800ef06 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d108      	bne.n	800ef06 <osTimerNew+0x9e>
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	68db      	ldr	r3, [r3, #12]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d104      	bne.n	800ef06 <osTimerNew+0x9e>
            mem = 0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	61bb      	str	r3, [r7, #24]
 800ef00:	e001      	b.n	800ef06 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ef02:	2300      	movs	r3, #0
 800ef04:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ef06:	69bb      	ldr	r3, [r7, #24]
 800ef08:	2b01      	cmp	r3, #1
 800ef0a:	d10c      	bne.n	800ef26 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	9301      	str	r3, [sp, #4]
 800ef12:	4b12      	ldr	r3, [pc, #72]	; (800ef5c <osTimerNew+0xf4>)
 800ef14:	9300      	str	r3, [sp, #0]
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	69fa      	ldr	r2, [r7, #28]
 800ef1a:	2101      	movs	r1, #1
 800ef1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef1e:	f003 f87c 	bl	801201a <xTimerCreateStatic>
 800ef22:	6238      	str	r0, [r7, #32]
 800ef24:	e00b      	b.n	800ef3e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800ef26:	69bb      	ldr	r3, [r7, #24]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d108      	bne.n	800ef3e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ef2c:	4b0b      	ldr	r3, [pc, #44]	; (800ef5c <osTimerNew+0xf4>)
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	697b      	ldr	r3, [r7, #20]
 800ef32:	69fa      	ldr	r2, [r7, #28]
 800ef34:	2101      	movs	r1, #1
 800ef36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef38:	f003 f84e 	bl	8011fd8 <xTimerCreate>
 800ef3c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800ef3e:	6a3b      	ldr	r3, [r7, #32]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d105      	bne.n	800ef50 <osTimerNew+0xe8>
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d002      	beq.n	800ef50 <osTimerNew+0xe8>
        vPortFree (callb);
 800ef4a:	6978      	ldr	r0, [r7, #20]
 800ef4c:	f003 ff20 	bl	8012d90 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ef50:	6a3b      	ldr	r3, [r7, #32]
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3728      	adds	r7, #40	; 0x28
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bd80      	pop	{r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	0800ee3d 	.word	0x0800ee3d

0800ef60 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b088      	sub	sp, #32
 800ef64:	af02      	add	r7, sp, #8
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef6e:	f3ef 8305 	mrs	r3, IPSR
 800ef72:	60fb      	str	r3, [r7, #12]
  return(result);
 800ef74:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d003      	beq.n	800ef82 <osTimerStart+0x22>
    stat = osErrorISR;
 800ef7a:	f06f 0305 	mvn.w	r3, #5
 800ef7e:	617b      	str	r3, [r7, #20]
 800ef80:	e017      	b.n	800efb2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d103      	bne.n	800ef90 <osTimerStart+0x30>
    stat = osErrorParameter;
 800ef88:	f06f 0303 	mvn.w	r3, #3
 800ef8c:	617b      	str	r3, [r7, #20]
 800ef8e:	e010      	b.n	800efb2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800ef90:	2300      	movs	r3, #0
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	2300      	movs	r3, #0
 800ef96:	683a      	ldr	r2, [r7, #0]
 800ef98:	2104      	movs	r1, #4
 800ef9a:	6938      	ldr	r0, [r7, #16]
 800ef9c:	f003 f8b6 	bl	801210c <xTimerGenericCommand>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d102      	bne.n	800efac <osTimerStart+0x4c>
      stat = osOK;
 800efa6:	2300      	movs	r3, #0
 800efa8:	617b      	str	r3, [r7, #20]
 800efaa:	e002      	b.n	800efb2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800efac:	f06f 0302 	mvn.w	r3, #2
 800efb0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800efb2:	697b      	ldr	r3, [r7, #20]
}
 800efb4:	4618      	mov	r0, r3
 800efb6:	3718      	adds	r7, #24
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b088      	sub	sp, #32
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800efc4:	2300      	movs	r3, #0
 800efc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efc8:	f3ef 8305 	mrs	r3, IPSR
 800efcc:	60bb      	str	r3, [r7, #8]
  return(result);
 800efce:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d174      	bne.n	800f0be <osMutexNew+0x102>
    if (attr != NULL) {
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d003      	beq.n	800efe2 <osMutexNew+0x26>
      type = attr->attr_bits;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	61bb      	str	r3, [r7, #24]
 800efe0:	e001      	b.n	800efe6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800efe2:	2300      	movs	r3, #0
 800efe4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	f003 0301 	and.w	r3, r3, #1
 800efec:	2b00      	cmp	r3, #0
 800efee:	d002      	beq.n	800eff6 <osMutexNew+0x3a>
      rmtx = 1U;
 800eff0:	2301      	movs	r3, #1
 800eff2:	617b      	str	r3, [r7, #20]
 800eff4:	e001      	b.n	800effa <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800eff6:	2300      	movs	r3, #0
 800eff8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800effa:	69bb      	ldr	r3, [r7, #24]
 800effc:	f003 0308 	and.w	r3, r3, #8
 800f000:	2b00      	cmp	r3, #0
 800f002:	d15c      	bne.n	800f0be <osMutexNew+0x102>
      mem = -1;
 800f004:	f04f 33ff 	mov.w	r3, #4294967295
 800f008:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d015      	beq.n	800f03c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	689b      	ldr	r3, [r3, #8]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d006      	beq.n	800f026 <osMutexNew+0x6a>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	2b4f      	cmp	r3, #79	; 0x4f
 800f01e:	d902      	bls.n	800f026 <osMutexNew+0x6a>
          mem = 1;
 800f020:	2301      	movs	r3, #1
 800f022:	613b      	str	r3, [r7, #16]
 800f024:	e00c      	b.n	800f040 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	689b      	ldr	r3, [r3, #8]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d108      	bne.n	800f040 <osMutexNew+0x84>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	68db      	ldr	r3, [r3, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d104      	bne.n	800f040 <osMutexNew+0x84>
            mem = 0;
 800f036:	2300      	movs	r3, #0
 800f038:	613b      	str	r3, [r7, #16]
 800f03a:	e001      	b.n	800f040 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800f03c:	2300      	movs	r3, #0
 800f03e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	2b01      	cmp	r3, #1
 800f044:	d112      	bne.n	800f06c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d007      	beq.n	800f05c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	4619      	mov	r1, r3
 800f052:	2004      	movs	r0, #4
 800f054:	f000 fd8f 	bl	800fb76 <xQueueCreateMutexStatic>
 800f058:	61f8      	str	r0, [r7, #28]
 800f05a:	e016      	b.n	800f08a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	4619      	mov	r1, r3
 800f062:	2001      	movs	r0, #1
 800f064:	f000 fd87 	bl	800fb76 <xQueueCreateMutexStatic>
 800f068:	61f8      	str	r0, [r7, #28]
 800f06a:	e00e      	b.n	800f08a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d10b      	bne.n	800f08a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d004      	beq.n	800f082 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800f078:	2004      	movs	r0, #4
 800f07a:	f000 fd64 	bl	800fb46 <xQueueCreateMutex>
 800f07e:	61f8      	str	r0, [r7, #28]
 800f080:	e003      	b.n	800f08a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800f082:	2001      	movs	r0, #1
 800f084:	f000 fd5f 	bl	800fb46 <xQueueCreateMutex>
 800f088:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f08a:	69fb      	ldr	r3, [r7, #28]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00c      	beq.n	800f0aa <osMutexNew+0xee>
        if (attr != NULL) {
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d003      	beq.n	800f09e <osMutexNew+0xe2>
          name = attr->name;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	60fb      	str	r3, [r7, #12]
 800f09c:	e001      	b.n	800f0a2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800f0a2:	68f9      	ldr	r1, [r7, #12]
 800f0a4:	69f8      	ldr	r0, [r7, #28]
 800f0a6:	f001 fc33 	bl	8010910 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f0aa:	69fb      	ldr	r3, [r7, #28]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d006      	beq.n	800f0be <osMutexNew+0x102>
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d003      	beq.n	800f0be <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f0b6:	69fb      	ldr	r3, [r7, #28]
 800f0b8:	f043 0301 	orr.w	r3, r3, #1
 800f0bc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f0be:	69fb      	ldr	r3, [r7, #28]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3720      	adds	r7, #32
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b086      	sub	sp, #24
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f023 0301 	bic.w	r3, r3, #1
 800f0d8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f003 0301 	and.w	r3, r3, #1
 800f0e0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0e6:	f3ef 8305 	mrs	r3, IPSR
 800f0ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800f0ec:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d003      	beq.n	800f0fa <osMutexAcquire+0x32>
    stat = osErrorISR;
 800f0f2:	f06f 0305 	mvn.w	r3, #5
 800f0f6:	617b      	str	r3, [r7, #20]
 800f0f8:	e02c      	b.n	800f154 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d103      	bne.n	800f108 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800f100:	f06f 0303 	mvn.w	r3, #3
 800f104:	617b      	str	r3, [r7, #20]
 800f106:	e025      	b.n	800f154 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d011      	beq.n	800f132 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800f10e:	6839      	ldr	r1, [r7, #0]
 800f110:	6938      	ldr	r0, [r7, #16]
 800f112:	f000 fd7f 	bl	800fc14 <xQueueTakeMutexRecursive>
 800f116:	4603      	mov	r3, r0
 800f118:	2b01      	cmp	r3, #1
 800f11a:	d01b      	beq.n	800f154 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d003      	beq.n	800f12a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800f122:	f06f 0301 	mvn.w	r3, #1
 800f126:	617b      	str	r3, [r7, #20]
 800f128:	e014      	b.n	800f154 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f12a:	f06f 0302 	mvn.w	r3, #2
 800f12e:	617b      	str	r3, [r7, #20]
 800f130:	e010      	b.n	800f154 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800f132:	6839      	ldr	r1, [r7, #0]
 800f134:	6938      	ldr	r0, [r7, #16]
 800f136:	f001 f913 	bl	8010360 <xQueueSemaphoreTake>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d009      	beq.n	800f154 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d003      	beq.n	800f14e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800f146:	f06f 0301 	mvn.w	r3, #1
 800f14a:	617b      	str	r3, [r7, #20]
 800f14c:	e002      	b.n	800f154 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800f14e:	f06f 0302 	mvn.w	r3, #2
 800f152:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800f154:	697b      	ldr	r3, [r7, #20]
}
 800f156:	4618      	mov	r0, r3
 800f158:	3718      	adds	r7, #24
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}

0800f15e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800f15e:	b580      	push	{r7, lr}
 800f160:	b086      	sub	sp, #24
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f023 0301 	bic.w	r3, r3, #1
 800f16c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f003 0301 	and.w	r3, r3, #1
 800f174:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800f176:	2300      	movs	r3, #0
 800f178:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f17a:	f3ef 8305 	mrs	r3, IPSR
 800f17e:	60bb      	str	r3, [r7, #8]
  return(result);
 800f180:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800f182:	2b00      	cmp	r3, #0
 800f184:	d003      	beq.n	800f18e <osMutexRelease+0x30>
    stat = osErrorISR;
 800f186:	f06f 0305 	mvn.w	r3, #5
 800f18a:	617b      	str	r3, [r7, #20]
 800f18c:	e01f      	b.n	800f1ce <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d103      	bne.n	800f19c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800f194:	f06f 0303 	mvn.w	r3, #3
 800f198:	617b      	str	r3, [r7, #20]
 800f19a:	e018      	b.n	800f1ce <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d009      	beq.n	800f1b6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800f1a2:	6938      	ldr	r0, [r7, #16]
 800f1a4:	f000 fd02 	bl	800fbac <xQueueGiveMutexRecursive>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d00f      	beq.n	800f1ce <osMutexRelease+0x70>
        stat = osErrorResource;
 800f1ae:	f06f 0302 	mvn.w	r3, #2
 800f1b2:	617b      	str	r3, [r7, #20]
 800f1b4:	e00b      	b.n	800f1ce <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	6938      	ldr	r0, [r7, #16]
 800f1be:	f000 fdc9 	bl	800fd54 <xQueueGenericSend>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b01      	cmp	r3, #1
 800f1c6:	d002      	beq.n	800f1ce <osMutexRelease+0x70>
        stat = osErrorResource;
 800f1c8:	f06f 0302 	mvn.w	r3, #2
 800f1cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f1ce:	697b      	ldr	r3, [r7, #20]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3718      	adds	r7, #24
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <osMutexDelete>:
  }

  return (owner);
}

osStatus_t osMutexDelete (osMutexId_t mutex_id) {
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b086      	sub	sp, #24
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  SemaphoreHandle_t hMutex;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f023 0301 	bic.w	r3, r3, #1
 800f1e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1e8:	f3ef 8305 	mrs	r3, IPSR
 800f1ec:	60fb      	str	r3, [r7, #12]
  return(result);
 800f1ee:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d003      	beq.n	800f1fc <osMutexDelete+0x24>
    stat = osErrorISR;
 800f1f4:	f06f 0305 	mvn.w	r3, #5
 800f1f8:	617b      	str	r3, [r7, #20]
 800f1fa:	e00e      	b.n	800f21a <osMutexDelete+0x42>
  }
  else if (hMutex == NULL) {
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d103      	bne.n	800f20a <osMutexDelete+0x32>
    stat = osErrorParameter;
 800f202:	f06f 0303 	mvn.w	r3, #3
 800f206:	617b      	str	r3, [r7, #20]
 800f208:	e007      	b.n	800f21a <osMutexDelete+0x42>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hMutex);
 800f20a:	6938      	ldr	r0, [r7, #16]
 800f20c:	f001 fbaa 	bl	8010964 <vQueueUnregisterQueue>
    #endif
    stat = osOK;
 800f210:	2300      	movs	r3, #0
 800f212:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hMutex);
 800f214:	6938      	ldr	r0, [r7, #16]
 800f216:	f001 fa2f 	bl	8010678 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f21a:	697b      	ldr	r3, [r7, #20]
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3718      	adds	r7, #24
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <osSemaphoreNew>:
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f224:	b580      	push	{r7, lr}
 800f226:	b08a      	sub	sp, #40	; 0x28
 800f228:	af02      	add	r7, sp, #8
 800f22a:	60f8      	str	r0, [r7, #12]
 800f22c:	60b9      	str	r1, [r7, #8]
 800f22e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f230:	2300      	movs	r3, #0
 800f232:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f234:	f3ef 8305 	mrs	r3, IPSR
 800f238:	613b      	str	r3, [r7, #16]
  return(result);
 800f23a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d175      	bne.n	800f32c <osSemaphoreNew+0x108>
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d072      	beq.n	800f32c <osSemaphoreNew+0x108>
 800f246:	68ba      	ldr	r2, [r7, #8]
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	429a      	cmp	r2, r3
 800f24c:	d86e      	bhi.n	800f32c <osSemaphoreNew+0x108>
    mem = -1;
 800f24e:	f04f 33ff 	mov.w	r3, #4294967295
 800f252:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d015      	beq.n	800f286 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	689b      	ldr	r3, [r3, #8]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d006      	beq.n	800f270 <osSemaphoreNew+0x4c>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	2b4f      	cmp	r3, #79	; 0x4f
 800f268:	d902      	bls.n	800f270 <osSemaphoreNew+0x4c>
        mem = 1;
 800f26a:	2301      	movs	r3, #1
 800f26c:	61bb      	str	r3, [r7, #24]
 800f26e:	e00c      	b.n	800f28a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d108      	bne.n	800f28a <osSemaphoreNew+0x66>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d104      	bne.n	800f28a <osSemaphoreNew+0x66>
          mem = 0;
 800f280:	2300      	movs	r3, #0
 800f282:	61bb      	str	r3, [r7, #24]
 800f284:	e001      	b.n	800f28a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f286:	2300      	movs	r3, #0
 800f288:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f28a:	69bb      	ldr	r3, [r7, #24]
 800f28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f290:	d04c      	beq.n	800f32c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2b01      	cmp	r3, #1
 800f296:	d128      	bne.n	800f2ea <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	2b01      	cmp	r3, #1
 800f29c:	d10a      	bne.n	800f2b4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	689b      	ldr	r3, [r3, #8]
 800f2a2:	2203      	movs	r2, #3
 800f2a4:	9200      	str	r2, [sp, #0]
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	2100      	movs	r1, #0
 800f2aa:	2001      	movs	r0, #1
 800f2ac:	f000 fb5c 	bl	800f968 <xQueueGenericCreateStatic>
 800f2b0:	61f8      	str	r0, [r7, #28]
 800f2b2:	e005      	b.n	800f2c0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f2b4:	2203      	movs	r2, #3
 800f2b6:	2100      	movs	r1, #0
 800f2b8:	2001      	movs	r0, #1
 800f2ba:	f000 fbcd 	bl	800fa58 <xQueueGenericCreate>
 800f2be:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f2c0:	69fb      	ldr	r3, [r7, #28]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d022      	beq.n	800f30c <osSemaphoreNew+0xe8>
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d01f      	beq.n	800f30c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	2100      	movs	r1, #0
 800f2d2:	69f8      	ldr	r0, [r7, #28]
 800f2d4:	f000 fd3e 	bl	800fd54 <xQueueGenericSend>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d016      	beq.n	800f30c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f2de:	69f8      	ldr	r0, [r7, #28]
 800f2e0:	f001 f9ca 	bl	8010678 <vQueueDelete>
            hSemaphore = NULL;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	61fb      	str	r3, [r7, #28]
 800f2e8:	e010      	b.n	800f30c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f2ea:	69bb      	ldr	r3, [r7, #24]
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d108      	bne.n	800f302 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	68b9      	ldr	r1, [r7, #8]
 800f2f8:	68f8      	ldr	r0, [r7, #12]
 800f2fa:	f000 fcc1 	bl	800fc80 <xQueueCreateCountingSemaphoreStatic>
 800f2fe:	61f8      	str	r0, [r7, #28]
 800f300:	e004      	b.n	800f30c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f302:	68b9      	ldr	r1, [r7, #8]
 800f304:	68f8      	ldr	r0, [r7, #12]
 800f306:	f000 fcf2 	bl	800fcee <xQueueCreateCountingSemaphore>
 800f30a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00c      	beq.n	800f32c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d003      	beq.n	800f320 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	617b      	str	r3, [r7, #20]
 800f31e:	e001      	b.n	800f324 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f320:	2300      	movs	r3, #0
 800f322:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f324:	6979      	ldr	r1, [r7, #20]
 800f326:	69f8      	ldr	r0, [r7, #28]
 800f328:	f001 faf2 	bl	8010910 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f32c:	69fb      	ldr	r3, [r7, #28]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3720      	adds	r7, #32
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}
	...

0800f338 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f338:	b580      	push	{r7, lr}
 800f33a:	b086      	sub	sp, #24
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f346:	2300      	movs	r3, #0
 800f348:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d103      	bne.n	800f358 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f350:	f06f 0303 	mvn.w	r3, #3
 800f354:	617b      	str	r3, [r7, #20]
 800f356:	e039      	b.n	800f3cc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f358:	f3ef 8305 	mrs	r3, IPSR
 800f35c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f35e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f360:	2b00      	cmp	r3, #0
 800f362:	d022      	beq.n	800f3aa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d003      	beq.n	800f372 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f36a:	f06f 0303 	mvn.w	r3, #3
 800f36e:	617b      	str	r3, [r7, #20]
 800f370:	e02c      	b.n	800f3cc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f372:	2300      	movs	r3, #0
 800f374:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f376:	f107 0308 	add.w	r3, r7, #8
 800f37a:	461a      	mov	r2, r3
 800f37c:	2100      	movs	r1, #0
 800f37e:	6938      	ldr	r0, [r7, #16]
 800f380:	f001 f8fa 	bl	8010578 <xQueueReceiveFromISR>
 800f384:	4603      	mov	r3, r0
 800f386:	2b01      	cmp	r3, #1
 800f388:	d003      	beq.n	800f392 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f38a:	f06f 0302 	mvn.w	r3, #2
 800f38e:	617b      	str	r3, [r7, #20]
 800f390:	e01c      	b.n	800f3cc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d019      	beq.n	800f3cc <osSemaphoreAcquire+0x94>
 800f398:	4b0f      	ldr	r3, [pc, #60]	; (800f3d8 <osSemaphoreAcquire+0xa0>)
 800f39a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f39e:	601a      	str	r2, [r3, #0]
 800f3a0:	f3bf 8f4f 	dsb	sy
 800f3a4:	f3bf 8f6f 	isb	sy
 800f3a8:	e010      	b.n	800f3cc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	6938      	ldr	r0, [r7, #16]
 800f3ae:	f000 ffd7 	bl	8010360 <xQueueSemaphoreTake>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d009      	beq.n	800f3cc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d003      	beq.n	800f3c6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f3be:	f06f 0301 	mvn.w	r3, #1
 800f3c2:	617b      	str	r3, [r7, #20]
 800f3c4:	e002      	b.n	800f3cc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f3c6:	f06f 0302 	mvn.w	r3, #2
 800f3ca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f3cc:	697b      	ldr	r3, [r7, #20]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3718      	adds	r7, #24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	e000ed04 	.word	0xe000ed04

0800f3dc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f3ec:	693b      	ldr	r3, [r7, #16]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d103      	bne.n	800f3fa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f3f2:	f06f 0303 	mvn.w	r3, #3
 800f3f6:	617b      	str	r3, [r7, #20]
 800f3f8:	e02c      	b.n	800f454 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3fa:	f3ef 8305 	mrs	r3, IPSR
 800f3fe:	60fb      	str	r3, [r7, #12]
  return(result);
 800f400:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f402:	2b00      	cmp	r3, #0
 800f404:	d01a      	beq.n	800f43c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f406:	2300      	movs	r3, #0
 800f408:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f40a:	f107 0308 	add.w	r3, r7, #8
 800f40e:	4619      	mov	r1, r3
 800f410:	6938      	ldr	r0, [r7, #16]
 800f412:	f000 fe38 	bl	8010086 <xQueueGiveFromISR>
 800f416:	4603      	mov	r3, r0
 800f418:	2b01      	cmp	r3, #1
 800f41a:	d003      	beq.n	800f424 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f41c:	f06f 0302 	mvn.w	r3, #2
 800f420:	617b      	str	r3, [r7, #20]
 800f422:	e017      	b.n	800f454 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f424:	68bb      	ldr	r3, [r7, #8]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d014      	beq.n	800f454 <osSemaphoreRelease+0x78>
 800f42a:	4b0d      	ldr	r3, [pc, #52]	; (800f460 <osSemaphoreRelease+0x84>)
 800f42c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f430:	601a      	str	r2, [r3, #0]
 800f432:	f3bf 8f4f 	dsb	sy
 800f436:	f3bf 8f6f 	isb	sy
 800f43a:	e00b      	b.n	800f454 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f43c:	2300      	movs	r3, #0
 800f43e:	2200      	movs	r2, #0
 800f440:	2100      	movs	r1, #0
 800f442:	6938      	ldr	r0, [r7, #16]
 800f444:	f000 fc86 	bl	800fd54 <xQueueGenericSend>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d002      	beq.n	800f454 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f44e:	f06f 0302 	mvn.w	r3, #2
 800f452:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f454:	697b      	ldr	r3, [r7, #20]
}
 800f456:	4618      	mov	r0, r3
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	e000ed04 	.word	0xe000ed04

0800f464 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f464:	b580      	push	{r7, lr}
 800f466:	b08a      	sub	sp, #40	; 0x28
 800f468:	af02      	add	r7, sp, #8
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	60b9      	str	r1, [r7, #8]
 800f46e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f470:	2300      	movs	r3, #0
 800f472:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f474:	f3ef 8305 	mrs	r3, IPSR
 800f478:	613b      	str	r3, [r7, #16]
  return(result);
 800f47a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d15f      	bne.n	800f540 <osMessageQueueNew+0xdc>
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d05c      	beq.n	800f540 <osMessageQueueNew+0xdc>
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d059      	beq.n	800f540 <osMessageQueueNew+0xdc>
    mem = -1;
 800f48c:	f04f 33ff 	mov.w	r3, #4294967295
 800f490:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d029      	beq.n	800f4ec <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	689b      	ldr	r3, [r3, #8]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d012      	beq.n	800f4c6 <osMessageQueueNew+0x62>
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	2b4f      	cmp	r3, #79	; 0x4f
 800f4a6:	d90e      	bls.n	800f4c6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d00a      	beq.n	800f4c6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	695a      	ldr	r2, [r3, #20]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	68b9      	ldr	r1, [r7, #8]
 800f4b8:	fb01 f303 	mul.w	r3, r1, r3
 800f4bc:	429a      	cmp	r2, r3
 800f4be:	d302      	bcc.n	800f4c6 <osMessageQueueNew+0x62>
        mem = 1;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	61bb      	str	r3, [r7, #24]
 800f4c4:	e014      	b.n	800f4f0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	689b      	ldr	r3, [r3, #8]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d110      	bne.n	800f4f0 <osMessageQueueNew+0x8c>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10c      	bne.n	800f4f0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d108      	bne.n	800f4f0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	695b      	ldr	r3, [r3, #20]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d104      	bne.n	800f4f0 <osMessageQueueNew+0x8c>
          mem = 0;
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	61bb      	str	r3, [r7, #24]
 800f4ea:	e001      	b.n	800f4f0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f4f0:	69bb      	ldr	r3, [r7, #24]
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	d10b      	bne.n	800f50e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	691a      	ldr	r2, [r3, #16]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	2100      	movs	r1, #0
 800f500:	9100      	str	r1, [sp, #0]
 800f502:	68b9      	ldr	r1, [r7, #8]
 800f504:	68f8      	ldr	r0, [r7, #12]
 800f506:	f000 fa2f 	bl	800f968 <xQueueGenericCreateStatic>
 800f50a:	61f8      	str	r0, [r7, #28]
 800f50c:	e008      	b.n	800f520 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f50e:	69bb      	ldr	r3, [r7, #24]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d105      	bne.n	800f520 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f514:	2200      	movs	r2, #0
 800f516:	68b9      	ldr	r1, [r7, #8]
 800f518:	68f8      	ldr	r0, [r7, #12]
 800f51a:	f000 fa9d 	bl	800fa58 <xQueueGenericCreate>
 800f51e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f520:	69fb      	ldr	r3, [r7, #28]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d00c      	beq.n	800f540 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d003      	beq.n	800f534 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	617b      	str	r3, [r7, #20]
 800f532:	e001      	b.n	800f538 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f534:	2300      	movs	r3, #0
 800f536:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f538:	6979      	ldr	r1, [r7, #20]
 800f53a:	69f8      	ldr	r0, [r7, #28]
 800f53c:	f001 f9e8 	bl	8010910 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f540:	69fb      	ldr	r3, [r7, #28]
}
 800f542:	4618      	mov	r0, r3
 800f544:	3720      	adds	r7, #32
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
	...

0800f54c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b088      	sub	sp, #32
 800f550:	af00      	add	r7, sp, #0
 800f552:	60f8      	str	r0, [r7, #12]
 800f554:	60b9      	str	r1, [r7, #8]
 800f556:	603b      	str	r3, [r7, #0]
 800f558:	4613      	mov	r3, r2
 800f55a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f560:	2300      	movs	r3, #0
 800f562:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f564:	f3ef 8305 	mrs	r3, IPSR
 800f568:	617b      	str	r3, [r7, #20]
  return(result);
 800f56a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d028      	beq.n	800f5c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d005      	beq.n	800f582 <osMessageQueuePut+0x36>
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d002      	beq.n	800f582 <osMessageQueuePut+0x36>
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d003      	beq.n	800f58a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f582:	f06f 0303 	mvn.w	r3, #3
 800f586:	61fb      	str	r3, [r7, #28]
 800f588:	e038      	b.n	800f5fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f58a:	2300      	movs	r3, #0
 800f58c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f58e:	f107 0210 	add.w	r2, r7, #16
 800f592:	2300      	movs	r3, #0
 800f594:	68b9      	ldr	r1, [r7, #8]
 800f596:	69b8      	ldr	r0, [r7, #24]
 800f598:	f000 fcda 	bl	800ff50 <xQueueGenericSendFromISR>
 800f59c:	4603      	mov	r3, r0
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d003      	beq.n	800f5aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f5a2:	f06f 0302 	mvn.w	r3, #2
 800f5a6:	61fb      	str	r3, [r7, #28]
 800f5a8:	e028      	b.n	800f5fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d025      	beq.n	800f5fc <osMessageQueuePut+0xb0>
 800f5b0:	4b15      	ldr	r3, [pc, #84]	; (800f608 <osMessageQueuePut+0xbc>)
 800f5b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5b6:	601a      	str	r2, [r3, #0]
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	f3bf 8f6f 	isb	sy
 800f5c0:	e01c      	b.n	800f5fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d002      	beq.n	800f5ce <osMessageQueuePut+0x82>
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d103      	bne.n	800f5d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f5ce:	f06f 0303 	mvn.w	r3, #3
 800f5d2:	61fb      	str	r3, [r7, #28]
 800f5d4:	e012      	b.n	800f5fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	683a      	ldr	r2, [r7, #0]
 800f5da:	68b9      	ldr	r1, [r7, #8]
 800f5dc:	69b8      	ldr	r0, [r7, #24]
 800f5de:	f000 fbb9 	bl	800fd54 <xQueueGenericSend>
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	2b01      	cmp	r3, #1
 800f5e6:	d009      	beq.n	800f5fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d003      	beq.n	800f5f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f5ee:	f06f 0301 	mvn.w	r3, #1
 800f5f2:	61fb      	str	r3, [r7, #28]
 800f5f4:	e002      	b.n	800f5fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f5f6:	f06f 0302 	mvn.w	r3, #2
 800f5fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f5fc:	69fb      	ldr	r3, [r7, #28]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3720      	adds	r7, #32
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	e000ed04 	.word	0xe000ed04

0800f60c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b088      	sub	sp, #32
 800f610:	af00      	add	r7, sp, #0
 800f612:	60f8      	str	r0, [r7, #12]
 800f614:	60b9      	str	r1, [r7, #8]
 800f616:	607a      	str	r2, [r7, #4]
 800f618:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f61e:	2300      	movs	r3, #0
 800f620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f622:	f3ef 8305 	mrs	r3, IPSR
 800f626:	617b      	str	r3, [r7, #20]
  return(result);
 800f628:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d028      	beq.n	800f680 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f62e:	69bb      	ldr	r3, [r7, #24]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d005      	beq.n	800f640 <osMessageQueueGet+0x34>
 800f634:	68bb      	ldr	r3, [r7, #8]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d002      	beq.n	800f640 <osMessageQueueGet+0x34>
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d003      	beq.n	800f648 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f640:	f06f 0303 	mvn.w	r3, #3
 800f644:	61fb      	str	r3, [r7, #28]
 800f646:	e037      	b.n	800f6b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f648:	2300      	movs	r3, #0
 800f64a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f64c:	f107 0310 	add.w	r3, r7, #16
 800f650:	461a      	mov	r2, r3
 800f652:	68b9      	ldr	r1, [r7, #8]
 800f654:	69b8      	ldr	r0, [r7, #24]
 800f656:	f000 ff8f 	bl	8010578 <xQueueReceiveFromISR>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d003      	beq.n	800f668 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f660:	f06f 0302 	mvn.w	r3, #2
 800f664:	61fb      	str	r3, [r7, #28]
 800f666:	e027      	b.n	800f6b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d024      	beq.n	800f6b8 <osMessageQueueGet+0xac>
 800f66e:	4b15      	ldr	r3, [pc, #84]	; (800f6c4 <osMessageQueueGet+0xb8>)
 800f670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f674:	601a      	str	r2, [r3, #0]
 800f676:	f3bf 8f4f 	dsb	sy
 800f67a:	f3bf 8f6f 	isb	sy
 800f67e:	e01b      	b.n	800f6b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d002      	beq.n	800f68c <osMessageQueueGet+0x80>
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d103      	bne.n	800f694 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f68c:	f06f 0303 	mvn.w	r3, #3
 800f690:	61fb      	str	r3, [r7, #28]
 800f692:	e011      	b.n	800f6b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f694:	683a      	ldr	r2, [r7, #0]
 800f696:	68b9      	ldr	r1, [r7, #8]
 800f698:	69b8      	ldr	r0, [r7, #24]
 800f69a:	f000 fd81 	bl	80101a0 <xQueueReceive>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d009      	beq.n	800f6b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d003      	beq.n	800f6b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f6aa:	f06f 0301 	mvn.w	r3, #1
 800f6ae:	61fb      	str	r3, [r7, #28]
 800f6b0:	e002      	b.n	800f6b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f6b2:	f06f 0302 	mvn.w	r3, #2
 800f6b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f6b8:	69fb      	ldr	r3, [r7, #28]
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3720      	adds	r7, #32
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	e000ed04 	.word	0xe000ed04

0800f6c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f6c8:	b480      	push	{r7}
 800f6ca:	b085      	sub	sp, #20
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	4a07      	ldr	r2, [pc, #28]	; (800f6f4 <vApplicationGetIdleTaskMemory+0x2c>)
 800f6d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	4a06      	ldr	r2, [pc, #24]	; (800f6f8 <vApplicationGetIdleTaskMemory+0x30>)
 800f6de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2280      	movs	r2, #128	; 0x80
 800f6e4:	601a      	str	r2, [r3, #0]
}
 800f6e6:	bf00      	nop
 800f6e8:	3714      	adds	r7, #20
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f0:	4770      	bx	lr
 800f6f2:	bf00      	nop
 800f6f4:	2000093c 	.word	0x2000093c
 800f6f8:	200009e4 	.word	0x200009e4

0800f6fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	4a07      	ldr	r2, [pc, #28]	; (800f728 <vApplicationGetTimerTaskMemory+0x2c>)
 800f70c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f70e:	68bb      	ldr	r3, [r7, #8]
 800f710:	4a06      	ldr	r2, [pc, #24]	; (800f72c <vApplicationGetTimerTaskMemory+0x30>)
 800f712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f71a:	601a      	str	r2, [r3, #0]
}
 800f71c:	bf00      	nop
 800f71e:	3714      	adds	r7, #20
 800f720:	46bd      	mov	sp, r7
 800f722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f726:	4770      	bx	lr
 800f728:	20000be4 	.word	0x20000be4
 800f72c:	20000c8c 	.word	0x20000c8c

0800f730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f103 0208 	add.w	r2, r3, #8
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f04f 32ff 	mov.w	r2, #4294967295
 800f748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f103 0208 	add.w	r2, r3, #8
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f103 0208 	add.w	r2, r3, #8
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f764:	bf00      	nop
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f77e:	bf00      	nop
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f78a:	b480      	push	{r7}
 800f78c:	b085      	sub	sp, #20
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
 800f792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	689a      	ldr	r2, [r3, #8]
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	689b      	ldr	r3, [r3, #8]
 800f7ac:	683a      	ldr	r2, [r7, #0]
 800f7ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	683a      	ldr	r2, [r7, #0]
 800f7b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	1c5a      	adds	r2, r3, #1
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	601a      	str	r2, [r3, #0]
}
 800f7c6:	bf00      	nop
 800f7c8:	3714      	adds	r7, #20
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr

0800f7d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f7d2:	b480      	push	{r7}
 800f7d4:	b085      	sub	sp, #20
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
 800f7da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e8:	d103      	bne.n	800f7f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	691b      	ldr	r3, [r3, #16]
 800f7ee:	60fb      	str	r3, [r7, #12]
 800f7f0:	e00c      	b.n	800f80c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	3308      	adds	r3, #8
 800f7f6:	60fb      	str	r3, [r7, #12]
 800f7f8:	e002      	b.n	800f800 <vListInsert+0x2e>
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	60fb      	str	r3, [r7, #12]
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	685b      	ldr	r3, [r3, #4]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	68ba      	ldr	r2, [r7, #8]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d2f6      	bcs.n	800f7fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	685a      	ldr	r2, [r3, #4]
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	683a      	ldr	r2, [r7, #0]
 800f81a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f81c:	683b      	ldr	r3, [r7, #0]
 800f81e:	68fa      	ldr	r2, [r7, #12]
 800f820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	683a      	ldr	r2, [r7, #0]
 800f826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	1c5a      	adds	r2, r3, #1
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	601a      	str	r2, [r3, #0]
}
 800f838:	bf00      	nop
 800f83a:	3714      	adds	r7, #20
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f844:	b480      	push	{r7}
 800f846:	b085      	sub	sp, #20
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	685b      	ldr	r3, [r3, #4]
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	6892      	ldr	r2, [r2, #8]
 800f85a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	689b      	ldr	r3, [r3, #8]
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	6852      	ldr	r2, [r2, #4]
 800f864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d103      	bne.n	800f878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	689a      	ldr	r2, [r3, #8]
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2200      	movs	r2, #0
 800f87c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	1e5a      	subs	r2, r3, #1
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3714      	adds	r7, #20
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr

0800f898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f898:	b580      	push	{r7, lr}
 800f89a:	b084      	sub	sp, #16
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10a      	bne.n	800f8c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b0:	f383 8811 	msr	BASEPRI, r3
 800f8b4:	f3bf 8f6f 	isb	sy
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f8be:	bf00      	nop
 800f8c0:	e7fe      	b.n	800f8c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f8c2:	f003 f877 	bl	80129b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	681a      	ldr	r2, [r3, #0]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8ce:	68f9      	ldr	r1, [r7, #12]
 800f8d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f8d2:	fb01 f303 	mul.w	r3, r1, r3
 800f8d6:	441a      	add	r2, r3
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2200      	movs	r2, #0
 800f8e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681a      	ldr	r2, [r3, #0]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681a      	ldr	r2, [r3, #0]
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	68f9      	ldr	r1, [r7, #12]
 800f8f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f8f8:	fb01 f303 	mul.w	r3, r1, r3
 800f8fc:	441a      	add	r2, r3
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	22ff      	movs	r2, #255	; 0xff
 800f906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	22ff      	movs	r2, #255	; 0xff
 800f90e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d114      	bne.n	800f942 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	691b      	ldr	r3, [r3, #16]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d01a      	beq.n	800f956 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	3310      	adds	r3, #16
 800f924:	4618      	mov	r0, r3
 800f926:	f001 fd5d 	bl	80113e4 <xTaskRemoveFromEventList>
 800f92a:	4603      	mov	r3, r0
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d012      	beq.n	800f956 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f930:	4b0c      	ldr	r3, [pc, #48]	; (800f964 <xQueueGenericReset+0xcc>)
 800f932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f936:	601a      	str	r2, [r3, #0]
 800f938:	f3bf 8f4f 	dsb	sy
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	e009      	b.n	800f956 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	3310      	adds	r3, #16
 800f946:	4618      	mov	r0, r3
 800f948:	f7ff fef2 	bl	800f730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	3324      	adds	r3, #36	; 0x24
 800f950:	4618      	mov	r0, r3
 800f952:	f7ff feed 	bl	800f730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f956:	f003 f85d 	bl	8012a14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f95a:	2301      	movs	r3, #1
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3710      	adds	r7, #16
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}
 800f964:	e000ed04 	.word	0xe000ed04

0800f968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b08e      	sub	sp, #56	; 0x38
 800f96c:	af02      	add	r7, sp, #8
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d10a      	bne.n	800f992 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f980:	f383 8811 	msr	BASEPRI, r3
 800f984:	f3bf 8f6f 	isb	sy
 800f988:	f3bf 8f4f 	dsb	sy
 800f98c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f98e:	bf00      	nop
 800f990:	e7fe      	b.n	800f990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d10a      	bne.n	800f9ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f99c:	f383 8811 	msr	BASEPRI, r3
 800f9a0:	f3bf 8f6f 	isb	sy
 800f9a4:	f3bf 8f4f 	dsb	sy
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f9aa:	bf00      	nop
 800f9ac:	e7fe      	b.n	800f9ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d002      	beq.n	800f9ba <xQueueGenericCreateStatic+0x52>
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d001      	beq.n	800f9be <xQueueGenericCreateStatic+0x56>
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	e000      	b.n	800f9c0 <xQueueGenericCreateStatic+0x58>
 800f9be:	2300      	movs	r3, #0
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d10a      	bne.n	800f9da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c8:	f383 8811 	msr	BASEPRI, r3
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	f3bf 8f4f 	dsb	sy
 800f9d4:	623b      	str	r3, [r7, #32]
}
 800f9d6:	bf00      	nop
 800f9d8:	e7fe      	b.n	800f9d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d102      	bne.n	800f9e6 <xQueueGenericCreateStatic+0x7e>
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d101      	bne.n	800f9ea <xQueueGenericCreateStatic+0x82>
 800f9e6:	2301      	movs	r3, #1
 800f9e8:	e000      	b.n	800f9ec <xQueueGenericCreateStatic+0x84>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d10a      	bne.n	800fa06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f4:	f383 8811 	msr	BASEPRI, r3
 800f9f8:	f3bf 8f6f 	isb	sy
 800f9fc:	f3bf 8f4f 	dsb	sy
 800fa00:	61fb      	str	r3, [r7, #28]
}
 800fa02:	bf00      	nop
 800fa04:	e7fe      	b.n	800fa04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fa06:	2350      	movs	r3, #80	; 0x50
 800fa08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	2b50      	cmp	r3, #80	; 0x50
 800fa0e:	d00a      	beq.n	800fa26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa14:	f383 8811 	msr	BASEPRI, r3
 800fa18:	f3bf 8f6f 	isb	sy
 800fa1c:	f3bf 8f4f 	dsb	sy
 800fa20:	61bb      	str	r3, [r7, #24]
}
 800fa22:	bf00      	nop
 800fa24:	e7fe      	b.n	800fa24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fa26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d00d      	beq.n	800fa4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa34:	2201      	movs	r2, #1
 800fa36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa40:	9300      	str	r3, [sp, #0]
 800fa42:	4613      	mov	r3, r2
 800fa44:	687a      	ldr	r2, [r7, #4]
 800fa46:	68b9      	ldr	r1, [r7, #8]
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f000 f83f 	bl	800facc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fa50:	4618      	mov	r0, r3
 800fa52:	3730      	adds	r7, #48	; 0x30
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}

0800fa58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b08a      	sub	sp, #40	; 0x28
 800fa5c:	af02      	add	r7, sp, #8
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	4613      	mov	r3, r2
 800fa64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10a      	bne.n	800fa82 <xQueueGenericCreate+0x2a>
	__asm volatile
 800fa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa70:	f383 8811 	msr	BASEPRI, r3
 800fa74:	f3bf 8f6f 	isb	sy
 800fa78:	f3bf 8f4f 	dsb	sy
 800fa7c:	613b      	str	r3, [r7, #16]
}
 800fa7e:	bf00      	nop
 800fa80:	e7fe      	b.n	800fa80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	fb02 f303 	mul.w	r3, r2, r3
 800fa8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	3350      	adds	r3, #80	; 0x50
 800fa90:	4618      	mov	r0, r3
 800fa92:	f003 f8b1 	bl	8012bf8 <pvPortMalloc>
 800fa96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fa98:	69bb      	ldr	r3, [r7, #24]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d011      	beq.n	800fac2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	3350      	adds	r3, #80	; 0x50
 800faa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800faa8:	69bb      	ldr	r3, [r7, #24]
 800faaa:	2200      	movs	r2, #0
 800faac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fab0:	79fa      	ldrb	r2, [r7, #7]
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	4613      	mov	r3, r2
 800fab8:	697a      	ldr	r2, [r7, #20]
 800faba:	68b9      	ldr	r1, [r7, #8]
 800fabc:	68f8      	ldr	r0, [r7, #12]
 800fabe:	f000 f805 	bl	800facc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fac2:	69bb      	ldr	r3, [r7, #24]
	}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3720      	adds	r7, #32
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	60f8      	str	r0, [r7, #12]
 800fad4:	60b9      	str	r1, [r7, #8]
 800fad6:	607a      	str	r2, [r7, #4]
 800fad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d103      	bne.n	800fae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fae0:	69bb      	ldr	r3, [r7, #24]
 800fae2:	69ba      	ldr	r2, [r7, #24]
 800fae4:	601a      	str	r2, [r3, #0]
 800fae6:	e002      	b.n	800faee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fae8:	69bb      	ldr	r3, [r7, #24]
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	68fa      	ldr	r2, [r7, #12]
 800faf2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	68ba      	ldr	r2, [r7, #8]
 800faf8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fafa:	2101      	movs	r1, #1
 800fafc:	69b8      	ldr	r0, [r7, #24]
 800fafe:	f7ff fecb 	bl	800f898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fb02:	69bb      	ldr	r3, [r7, #24]
 800fb04:	78fa      	ldrb	r2, [r7, #3]
 800fb06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fb0a:	bf00      	nop
 800fb0c:	3710      	adds	r7, #16
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b082      	sub	sp, #8
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00e      	beq.n	800fb3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2200      	movs	r2, #0
 800fb24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	2200      	movs	r2, #0
 800fb2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fb32:	2300      	movs	r3, #0
 800fb34:	2200      	movs	r2, #0
 800fb36:	2100      	movs	r1, #0
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 f90b 	bl	800fd54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fb3e:	bf00      	nop
 800fb40:	3708      	adds	r7, #8
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}

0800fb46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fb46:	b580      	push	{r7, lr}
 800fb48:	b086      	sub	sp, #24
 800fb4a:	af00      	add	r7, sp, #0
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fb50:	2301      	movs	r3, #1
 800fb52:	617b      	str	r3, [r7, #20]
 800fb54:	2300      	movs	r3, #0
 800fb56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fb58:	79fb      	ldrb	r3, [r7, #7]
 800fb5a:	461a      	mov	r2, r3
 800fb5c:	6939      	ldr	r1, [r7, #16]
 800fb5e:	6978      	ldr	r0, [r7, #20]
 800fb60:	f7ff ff7a 	bl	800fa58 <xQueueGenericCreate>
 800fb64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fb66:	68f8      	ldr	r0, [r7, #12]
 800fb68:	f7ff ffd3 	bl	800fb12 <prvInitialiseMutex>

		return xNewQueue;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
	}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3718      	adds	r7, #24
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}

0800fb76 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fb76:	b580      	push	{r7, lr}
 800fb78:	b088      	sub	sp, #32
 800fb7a:	af02      	add	r7, sp, #8
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	6039      	str	r1, [r7, #0]
 800fb80:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fb82:	2301      	movs	r3, #1
 800fb84:	617b      	str	r3, [r7, #20]
 800fb86:	2300      	movs	r3, #0
 800fb88:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fb8a:	79fb      	ldrb	r3, [r7, #7]
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	2200      	movs	r2, #0
 800fb92:	6939      	ldr	r1, [r7, #16]
 800fb94:	6978      	ldr	r0, [r7, #20]
 800fb96:	f7ff fee7 	bl	800f968 <xQueueGenericCreateStatic>
 800fb9a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fb9c:	68f8      	ldr	r0, [r7, #12]
 800fb9e:	f7ff ffb8 	bl	800fb12 <prvInitialiseMutex>

		return xNewQueue;
 800fba2:	68fb      	ldr	r3, [r7, #12]
	}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3718      	adds	r7, #24
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800fbac:	b590      	push	{r4, r7, lr}
 800fbae:	b087      	sub	sp, #28
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fbb8:	693b      	ldr	r3, [r7, #16]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d10a      	bne.n	800fbd4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	60fb      	str	r3, [r7, #12]
}
 800fbd0:	bf00      	nop
 800fbd2:	e7fe      	b.n	800fbd2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	689c      	ldr	r4, [r3, #8]
 800fbd8:	f001 fdc6 	bl	8011768 <xTaskGetCurrentTaskHandle>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	429c      	cmp	r4, r3
 800fbe0:	d111      	bne.n	800fc06 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	68db      	ldr	r3, [r3, #12]
 800fbe6:	1e5a      	subs	r2, r3, #1
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800fbec:	693b      	ldr	r3, [r7, #16]
 800fbee:	68db      	ldr	r3, [r3, #12]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d105      	bne.n	800fc00 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	6938      	ldr	r0, [r7, #16]
 800fbfc:	f000 f8aa 	bl	800fd54 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800fc00:	2301      	movs	r3, #1
 800fc02:	617b      	str	r3, [r7, #20]
 800fc04:	e001      	b.n	800fc0a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800fc06:	2300      	movs	r3, #0
 800fc08:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800fc0a:	697b      	ldr	r3, [r7, #20]
	}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	371c      	adds	r7, #28
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd90      	pop	{r4, r7, pc}

0800fc14 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800fc14:	b590      	push	{r4, r7, lr}
 800fc16:	b087      	sub	sp, #28
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d10a      	bne.n	800fc3e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800fc28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc2c:	f383 8811 	msr	BASEPRI, r3
 800fc30:	f3bf 8f6f 	isb	sy
 800fc34:	f3bf 8f4f 	dsb	sy
 800fc38:	60fb      	str	r3, [r7, #12]
}
 800fc3a:	bf00      	nop
 800fc3c:	e7fe      	b.n	800fc3c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	689c      	ldr	r4, [r3, #8]
 800fc42:	f001 fd91 	bl	8011768 <xTaskGetCurrentTaskHandle>
 800fc46:	4603      	mov	r3, r0
 800fc48:	429c      	cmp	r4, r3
 800fc4a:	d107      	bne.n	800fc5c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fc4c:	693b      	ldr	r3, [r7, #16]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	1c5a      	adds	r2, r3, #1
 800fc52:	693b      	ldr	r3, [r7, #16]
 800fc54:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fc56:	2301      	movs	r3, #1
 800fc58:	617b      	str	r3, [r7, #20]
 800fc5a:	e00c      	b.n	800fc76 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	6938      	ldr	r0, [r7, #16]
 800fc60:	f000 fb7e 	bl	8010360 <xQueueSemaphoreTake>
 800fc64:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d004      	beq.n	800fc76 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fc6c:	693b      	ldr	r3, [r7, #16]
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	1c5a      	adds	r2, r3, #1
 800fc72:	693b      	ldr	r3, [r7, #16]
 800fc74:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fc76:	697b      	ldr	r3, [r7, #20]
	}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	371c      	adds	r7, #28
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd90      	pop	{r4, r7, pc}

0800fc80 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b08a      	sub	sp, #40	; 0x28
 800fc84:	af02      	add	r7, sp, #8
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d10a      	bne.n	800fca8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800fc92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc96:	f383 8811 	msr	BASEPRI, r3
 800fc9a:	f3bf 8f6f 	isb	sy
 800fc9e:	f3bf 8f4f 	dsb	sy
 800fca2:	61bb      	str	r3, [r7, #24]
}
 800fca4:	bf00      	nop
 800fca6:	e7fe      	b.n	800fca6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fca8:	68ba      	ldr	r2, [r7, #8]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d90a      	bls.n	800fcc6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800fcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcb4:	f383 8811 	msr	BASEPRI, r3
 800fcb8:	f3bf 8f6f 	isb	sy
 800fcbc:	f3bf 8f4f 	dsb	sy
 800fcc0:	617b      	str	r3, [r7, #20]
}
 800fcc2:	bf00      	nop
 800fcc4:	e7fe      	b.n	800fcc4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fcc6:	2302      	movs	r3, #2
 800fcc8:	9300      	str	r3, [sp, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2200      	movs	r2, #0
 800fcce:	2100      	movs	r1, #0
 800fcd0:	68f8      	ldr	r0, [r7, #12]
 800fcd2:	f7ff fe49 	bl	800f968 <xQueueGenericCreateStatic>
 800fcd6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d002      	beq.n	800fce4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fcde:	69fb      	ldr	r3, [r7, #28]
 800fce0:	68ba      	ldr	r2, [r7, #8]
 800fce2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fce4:	69fb      	ldr	r3, [r7, #28]
	}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3720      	adds	r7, #32
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}

0800fcee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fcee:	b580      	push	{r7, lr}
 800fcf0:	b086      	sub	sp, #24
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
 800fcf6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d10a      	bne.n	800fd14 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800fcfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd02:	f383 8811 	msr	BASEPRI, r3
 800fd06:	f3bf 8f6f 	isb	sy
 800fd0a:	f3bf 8f4f 	dsb	sy
 800fd0e:	613b      	str	r3, [r7, #16]
}
 800fd10:	bf00      	nop
 800fd12:	e7fe      	b.n	800fd12 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fd14:	683a      	ldr	r2, [r7, #0]
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d90a      	bls.n	800fd32 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800fd1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd20:	f383 8811 	msr	BASEPRI, r3
 800fd24:	f3bf 8f6f 	isb	sy
 800fd28:	f3bf 8f4f 	dsb	sy
 800fd2c:	60fb      	str	r3, [r7, #12]
}
 800fd2e:	bf00      	nop
 800fd30:	e7fe      	b.n	800fd30 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fd32:	2202      	movs	r2, #2
 800fd34:	2100      	movs	r1, #0
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f7ff fe8e 	bl	800fa58 <xQueueGenericCreate>
 800fd3c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d002      	beq.n	800fd4a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	683a      	ldr	r2, [r7, #0]
 800fd48:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fd4a:	697b      	ldr	r3, [r7, #20]
	}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	3718      	adds	r7, #24
 800fd50:	46bd      	mov	sp, r7
 800fd52:	bd80      	pop	{r7, pc}

0800fd54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b08e      	sub	sp, #56	; 0x38
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	607a      	str	r2, [r7, #4]
 800fd60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fd62:	2300      	movs	r3, #0
 800fd64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10a      	bne.n	800fd86 <xQueueGenericSend+0x32>
	__asm volatile
 800fd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd82:	bf00      	nop
 800fd84:	e7fe      	b.n	800fd84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d103      	bne.n	800fd94 <xQueueGenericSend+0x40>
 800fd8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d101      	bne.n	800fd98 <xQueueGenericSend+0x44>
 800fd94:	2301      	movs	r3, #1
 800fd96:	e000      	b.n	800fd9a <xQueueGenericSend+0x46>
 800fd98:	2300      	movs	r3, #0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d10a      	bne.n	800fdb4 <xQueueGenericSend+0x60>
	__asm volatile
 800fd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fda2:	f383 8811 	msr	BASEPRI, r3
 800fda6:	f3bf 8f6f 	isb	sy
 800fdaa:	f3bf 8f4f 	dsb	sy
 800fdae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fdb0:	bf00      	nop
 800fdb2:	e7fe      	b.n	800fdb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	d103      	bne.n	800fdc2 <xQueueGenericSend+0x6e>
 800fdba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdbe:	2b01      	cmp	r3, #1
 800fdc0:	d101      	bne.n	800fdc6 <xQueueGenericSend+0x72>
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	e000      	b.n	800fdc8 <xQueueGenericSend+0x74>
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d10a      	bne.n	800fde2 <xQueueGenericSend+0x8e>
	__asm volatile
 800fdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd0:	f383 8811 	msr	BASEPRI, r3
 800fdd4:	f3bf 8f6f 	isb	sy
 800fdd8:	f3bf 8f4f 	dsb	sy
 800fddc:	623b      	str	r3, [r7, #32]
}
 800fdde:	bf00      	nop
 800fde0:	e7fe      	b.n	800fde0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fde2:	f001 fcd1 	bl	8011788 <xTaskGetSchedulerState>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d102      	bne.n	800fdf2 <xQueueGenericSend+0x9e>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d101      	bne.n	800fdf6 <xQueueGenericSend+0xa2>
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	e000      	b.n	800fdf8 <xQueueGenericSend+0xa4>
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d10a      	bne.n	800fe12 <xQueueGenericSend+0xbe>
	__asm volatile
 800fdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe00:	f383 8811 	msr	BASEPRI, r3
 800fe04:	f3bf 8f6f 	isb	sy
 800fe08:	f3bf 8f4f 	dsb	sy
 800fe0c:	61fb      	str	r3, [r7, #28]
}
 800fe0e:	bf00      	nop
 800fe10:	e7fe      	b.n	800fe10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe12:	f002 fdcf 	bl	80129b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d302      	bcc.n	800fe28 <xQueueGenericSend+0xd4>
 800fe22:	683b      	ldr	r3, [r7, #0]
 800fe24:	2b02      	cmp	r3, #2
 800fe26:	d129      	bne.n	800fe7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe28:	683a      	ldr	r2, [r7, #0]
 800fe2a:	68b9      	ldr	r1, [r7, #8]
 800fe2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe2e:	f000 fc5e 	bl	80106ee <prvCopyDataToQueue>
 800fe32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d010      	beq.n	800fe5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3e:	3324      	adds	r3, #36	; 0x24
 800fe40:	4618      	mov	r0, r3
 800fe42:	f001 facf 	bl	80113e4 <xTaskRemoveFromEventList>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d013      	beq.n	800fe74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fe4c:	4b3f      	ldr	r3, [pc, #252]	; (800ff4c <xQueueGenericSend+0x1f8>)
 800fe4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe52:	601a      	str	r2, [r3, #0]
 800fe54:	f3bf 8f4f 	dsb	sy
 800fe58:	f3bf 8f6f 	isb	sy
 800fe5c:	e00a      	b.n	800fe74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fe5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d007      	beq.n	800fe74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fe64:	4b39      	ldr	r3, [pc, #228]	; (800ff4c <xQueueGenericSend+0x1f8>)
 800fe66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	f3bf 8f4f 	dsb	sy
 800fe70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fe74:	f002 fdce 	bl	8012a14 <vPortExitCritical>
				return pdPASS;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	e063      	b.n	800ff44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d103      	bne.n	800fe8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fe82:	f002 fdc7 	bl	8012a14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fe86:	2300      	movs	r3, #0
 800fe88:	e05c      	b.n	800ff44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fe8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d106      	bne.n	800fe9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fe90:	f107 0314 	add.w	r3, r7, #20
 800fe94:	4618      	mov	r0, r3
 800fe96:	f001 fb09 	bl	80114ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fe9e:	f002 fdb9 	bl	8012a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fea2:	f001 f863 	bl	8010f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fea6:	f002 fd85 	bl	80129b4 <vPortEnterCritical>
 800feaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800feb0:	b25b      	sxtb	r3, r3
 800feb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800feb6:	d103      	bne.n	800fec0 <xQueueGenericSend+0x16c>
 800feb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feba:	2200      	movs	r2, #0
 800febc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fec6:	b25b      	sxtb	r3, r3
 800fec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fecc:	d103      	bne.n	800fed6 <xQueueGenericSend+0x182>
 800fece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fed0:	2200      	movs	r2, #0
 800fed2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fed6:	f002 fd9d 	bl	8012a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800feda:	1d3a      	adds	r2, r7, #4
 800fedc:	f107 0314 	add.w	r3, r7, #20
 800fee0:	4611      	mov	r1, r2
 800fee2:	4618      	mov	r0, r3
 800fee4:	f001 faf8 	bl	80114d8 <xTaskCheckForTimeOut>
 800fee8:	4603      	mov	r3, r0
 800feea:	2b00      	cmp	r3, #0
 800feec:	d124      	bne.n	800ff38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800feee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fef0:	f000 fcf5 	bl	80108de <prvIsQueueFull>
 800fef4:	4603      	mov	r3, r0
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d018      	beq.n	800ff2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	3310      	adds	r3, #16
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	4611      	mov	r1, r2
 800ff02:	4618      	mov	r0, r3
 800ff04:	f001 fa1e 	bl	8011344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ff08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff0a:	f000 fc80 	bl	801080e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ff0e:	f001 f83b 	bl	8010f88 <xTaskResumeAll>
 800ff12:	4603      	mov	r3, r0
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f47f af7c 	bne.w	800fe12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ff1a:	4b0c      	ldr	r3, [pc, #48]	; (800ff4c <xQueueGenericSend+0x1f8>)
 800ff1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff20:	601a      	str	r2, [r3, #0]
 800ff22:	f3bf 8f4f 	dsb	sy
 800ff26:	f3bf 8f6f 	isb	sy
 800ff2a:	e772      	b.n	800fe12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ff2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff2e:	f000 fc6e 	bl	801080e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ff32:	f001 f829 	bl	8010f88 <xTaskResumeAll>
 800ff36:	e76c      	b.n	800fe12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ff38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff3a:	f000 fc68 	bl	801080e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ff3e:	f001 f823 	bl	8010f88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ff42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3738      	adds	r7, #56	; 0x38
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	e000ed04 	.word	0xe000ed04

0800ff50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b090      	sub	sp, #64	; 0x40
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
 800ff5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ff62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d10a      	bne.n	800ff7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ff68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6c:	f383 8811 	msr	BASEPRI, r3
 800ff70:	f3bf 8f6f 	isb	sy
 800ff74:	f3bf 8f4f 	dsb	sy
 800ff78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ff7a:	bf00      	nop
 800ff7c:	e7fe      	b.n	800ff7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d103      	bne.n	800ff8c <xQueueGenericSendFromISR+0x3c>
 800ff84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d101      	bne.n	800ff90 <xQueueGenericSendFromISR+0x40>
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e000      	b.n	800ff92 <xQueueGenericSendFromISR+0x42>
 800ff90:	2300      	movs	r3, #0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d10a      	bne.n	800ffac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ff96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff9a:	f383 8811 	msr	BASEPRI, r3
 800ff9e:	f3bf 8f6f 	isb	sy
 800ffa2:	f3bf 8f4f 	dsb	sy
 800ffa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ffa8:	bf00      	nop
 800ffaa:	e7fe      	b.n	800ffaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	2b02      	cmp	r3, #2
 800ffb0:	d103      	bne.n	800ffba <xQueueGenericSendFromISR+0x6a>
 800ffb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d101      	bne.n	800ffbe <xQueueGenericSendFromISR+0x6e>
 800ffba:	2301      	movs	r3, #1
 800ffbc:	e000      	b.n	800ffc0 <xQueueGenericSendFromISR+0x70>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d10a      	bne.n	800ffda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ffc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc8:	f383 8811 	msr	BASEPRI, r3
 800ffcc:	f3bf 8f6f 	isb	sy
 800ffd0:	f3bf 8f4f 	dsb	sy
 800ffd4:	623b      	str	r3, [r7, #32]
}
 800ffd6:	bf00      	nop
 800ffd8:	e7fe      	b.n	800ffd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ffda:	f002 fdcd 	bl	8012b78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ffde:	f3ef 8211 	mrs	r2, BASEPRI
 800ffe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffe6:	f383 8811 	msr	BASEPRI, r3
 800ffea:	f3bf 8f6f 	isb	sy
 800ffee:	f3bf 8f4f 	dsb	sy
 800fff2:	61fa      	str	r2, [r7, #28]
 800fff4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fff6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fff8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010002:	429a      	cmp	r2, r3
 8010004:	d302      	bcc.n	801000c <xQueueGenericSendFromISR+0xbc>
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	2b02      	cmp	r3, #2
 801000a:	d12f      	bne.n	801006c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801000c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801001a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801001c:	683a      	ldr	r2, [r7, #0]
 801001e:	68b9      	ldr	r1, [r7, #8]
 8010020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010022:	f000 fb64 	bl	80106ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010026:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801002a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801002e:	d112      	bne.n	8010056 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010034:	2b00      	cmp	r3, #0
 8010036:	d016      	beq.n	8010066 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003a:	3324      	adds	r3, #36	; 0x24
 801003c:	4618      	mov	r0, r3
 801003e:	f001 f9d1 	bl	80113e4 <xTaskRemoveFromEventList>
 8010042:	4603      	mov	r3, r0
 8010044:	2b00      	cmp	r3, #0
 8010046:	d00e      	beq.n	8010066 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d00b      	beq.n	8010066 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2201      	movs	r2, #1
 8010052:	601a      	str	r2, [r3, #0]
 8010054:	e007      	b.n	8010066 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010056:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801005a:	3301      	adds	r3, #1
 801005c:	b2db      	uxtb	r3, r3
 801005e:	b25a      	sxtb	r2, r3
 8010060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010066:	2301      	movs	r3, #1
 8010068:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801006a:	e001      	b.n	8010070 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801006c:	2300      	movs	r3, #0
 801006e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010072:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010074:	697b      	ldr	r3, [r7, #20]
 8010076:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801007a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801007c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801007e:	4618      	mov	r0, r3
 8010080:	3740      	adds	r7, #64	; 0x40
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}

08010086 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010086:	b580      	push	{r7, lr}
 8010088:	b08e      	sub	sp, #56	; 0x38
 801008a:	af00      	add	r7, sp, #0
 801008c:	6078      	str	r0, [r7, #4]
 801008e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010096:	2b00      	cmp	r3, #0
 8010098:	d10a      	bne.n	80100b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801009a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801009e:	f383 8811 	msr	BASEPRI, r3
 80100a2:	f3bf 8f6f 	isb	sy
 80100a6:	f3bf 8f4f 	dsb	sy
 80100aa:	623b      	str	r3, [r7, #32]
}
 80100ac:	bf00      	nop
 80100ae:	e7fe      	b.n	80100ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80100b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00a      	beq.n	80100ce <xQueueGiveFromISR+0x48>
	__asm volatile
 80100b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100bc:	f383 8811 	msr	BASEPRI, r3
 80100c0:	f3bf 8f6f 	isb	sy
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	61fb      	str	r3, [r7, #28]
}
 80100ca:	bf00      	nop
 80100cc:	e7fe      	b.n	80100cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80100ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d103      	bne.n	80100de <xQueueGiveFromISR+0x58>
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	689b      	ldr	r3, [r3, #8]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d101      	bne.n	80100e2 <xQueueGiveFromISR+0x5c>
 80100de:	2301      	movs	r3, #1
 80100e0:	e000      	b.n	80100e4 <xQueueGiveFromISR+0x5e>
 80100e2:	2300      	movs	r3, #0
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d10a      	bne.n	80100fe <xQueueGiveFromISR+0x78>
	__asm volatile
 80100e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ec:	f383 8811 	msr	BASEPRI, r3
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	f3bf 8f4f 	dsb	sy
 80100f8:	61bb      	str	r3, [r7, #24]
}
 80100fa:	bf00      	nop
 80100fc:	e7fe      	b.n	80100fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80100fe:	f002 fd3b 	bl	8012b78 <vPortValidateInterruptPriority>
	__asm volatile
 8010102:	f3ef 8211 	mrs	r2, BASEPRI
 8010106:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010a:	f383 8811 	msr	BASEPRI, r3
 801010e:	f3bf 8f6f 	isb	sy
 8010112:	f3bf 8f4f 	dsb	sy
 8010116:	617a      	str	r2, [r7, #20]
 8010118:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801011a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801011c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801011e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010122:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801012a:	429a      	cmp	r2, r3
 801012c:	d22b      	bcs.n	8010186 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801012e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801013a:	1c5a      	adds	r2, r3, #1
 801013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010140:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010148:	d112      	bne.n	8010170 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801014a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801014e:	2b00      	cmp	r3, #0
 8010150:	d016      	beq.n	8010180 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	3324      	adds	r3, #36	; 0x24
 8010156:	4618      	mov	r0, r3
 8010158:	f001 f944 	bl	80113e4 <xTaskRemoveFromEventList>
 801015c:	4603      	mov	r3, r0
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00e      	beq.n	8010180 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d00b      	beq.n	8010180 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010168:	683b      	ldr	r3, [r7, #0]
 801016a:	2201      	movs	r2, #1
 801016c:	601a      	str	r2, [r3, #0]
 801016e:	e007      	b.n	8010180 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010174:	3301      	adds	r3, #1
 8010176:	b2db      	uxtb	r3, r3
 8010178:	b25a      	sxtb	r2, r3
 801017a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010180:	2301      	movs	r3, #1
 8010182:	637b      	str	r3, [r7, #52]	; 0x34
 8010184:	e001      	b.n	801018a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010186:	2300      	movs	r3, #0
 8010188:	637b      	str	r3, [r7, #52]	; 0x34
 801018a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	f383 8811 	msr	BASEPRI, r3
}
 8010194:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010198:	4618      	mov	r0, r3
 801019a:	3738      	adds	r7, #56	; 0x38
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}

080101a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b08c      	sub	sp, #48	; 0x30
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	60f8      	str	r0, [r7, #12]
 80101a8:	60b9      	str	r1, [r7, #8]
 80101aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80101ac:	2300      	movs	r3, #0
 80101ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80101b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d10a      	bne.n	80101d0 <xQueueReceive+0x30>
	__asm volatile
 80101ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101be:	f383 8811 	msr	BASEPRI, r3
 80101c2:	f3bf 8f6f 	isb	sy
 80101c6:	f3bf 8f4f 	dsb	sy
 80101ca:	623b      	str	r3, [r7, #32]
}
 80101cc:	bf00      	nop
 80101ce:	e7fe      	b.n	80101ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d103      	bne.n	80101de <xQueueReceive+0x3e>
 80101d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d101      	bne.n	80101e2 <xQueueReceive+0x42>
 80101de:	2301      	movs	r3, #1
 80101e0:	e000      	b.n	80101e4 <xQueueReceive+0x44>
 80101e2:	2300      	movs	r3, #0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d10a      	bne.n	80101fe <xQueueReceive+0x5e>
	__asm volatile
 80101e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101ec:	f383 8811 	msr	BASEPRI, r3
 80101f0:	f3bf 8f6f 	isb	sy
 80101f4:	f3bf 8f4f 	dsb	sy
 80101f8:	61fb      	str	r3, [r7, #28]
}
 80101fa:	bf00      	nop
 80101fc:	e7fe      	b.n	80101fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101fe:	f001 fac3 	bl	8011788 <xTaskGetSchedulerState>
 8010202:	4603      	mov	r3, r0
 8010204:	2b00      	cmp	r3, #0
 8010206:	d102      	bne.n	801020e <xQueueReceive+0x6e>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d101      	bne.n	8010212 <xQueueReceive+0x72>
 801020e:	2301      	movs	r3, #1
 8010210:	e000      	b.n	8010214 <xQueueReceive+0x74>
 8010212:	2300      	movs	r3, #0
 8010214:	2b00      	cmp	r3, #0
 8010216:	d10a      	bne.n	801022e <xQueueReceive+0x8e>
	__asm volatile
 8010218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021c:	f383 8811 	msr	BASEPRI, r3
 8010220:	f3bf 8f6f 	isb	sy
 8010224:	f3bf 8f4f 	dsb	sy
 8010228:	61bb      	str	r3, [r7, #24]
}
 801022a:	bf00      	nop
 801022c:	e7fe      	b.n	801022c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801022e:	f002 fbc1 	bl	80129b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010236:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801023a:	2b00      	cmp	r3, #0
 801023c:	d01f      	beq.n	801027e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801023e:	68b9      	ldr	r1, [r7, #8]
 8010240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010242:	f000 fabe 	bl	80107c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010248:	1e5a      	subs	r2, r3, #1
 801024a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801024e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010250:	691b      	ldr	r3, [r3, #16]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d00f      	beq.n	8010276 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010258:	3310      	adds	r3, #16
 801025a:	4618      	mov	r0, r3
 801025c:	f001 f8c2 	bl	80113e4 <xTaskRemoveFromEventList>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d007      	beq.n	8010276 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010266:	4b3d      	ldr	r3, [pc, #244]	; (801035c <xQueueReceive+0x1bc>)
 8010268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801026c:	601a      	str	r2, [r3, #0]
 801026e:	f3bf 8f4f 	dsb	sy
 8010272:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010276:	f002 fbcd 	bl	8012a14 <vPortExitCritical>
				return pdPASS;
 801027a:	2301      	movs	r3, #1
 801027c:	e069      	b.n	8010352 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d103      	bne.n	801028c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010284:	f002 fbc6 	bl	8012a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010288:	2300      	movs	r3, #0
 801028a:	e062      	b.n	8010352 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801028c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801028e:	2b00      	cmp	r3, #0
 8010290:	d106      	bne.n	80102a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010292:	f107 0310 	add.w	r3, r7, #16
 8010296:	4618      	mov	r0, r3
 8010298:	f001 f908 	bl	80114ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801029c:	2301      	movs	r3, #1
 801029e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102a0:	f002 fbb8 	bl	8012a14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102a4:	f000 fe62 	bl	8010f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80102a8:	f002 fb84 	bl	80129b4 <vPortEnterCritical>
 80102ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80102b2:	b25b      	sxtb	r3, r3
 80102b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102b8:	d103      	bne.n	80102c2 <xQueueReceive+0x122>
 80102ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102bc:	2200      	movs	r2, #0
 80102be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102c8:	b25b      	sxtb	r3, r3
 80102ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102ce:	d103      	bne.n	80102d8 <xQueueReceive+0x138>
 80102d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d2:	2200      	movs	r2, #0
 80102d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102d8:	f002 fb9c 	bl	8012a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102dc:	1d3a      	adds	r2, r7, #4
 80102de:	f107 0310 	add.w	r3, r7, #16
 80102e2:	4611      	mov	r1, r2
 80102e4:	4618      	mov	r0, r3
 80102e6:	f001 f8f7 	bl	80114d8 <xTaskCheckForTimeOut>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d123      	bne.n	8010338 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80102f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102f2:	f000 fade 	bl	80108b2 <prvIsQueueEmpty>
 80102f6:	4603      	mov	r3, r0
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d017      	beq.n	801032c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80102fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102fe:	3324      	adds	r3, #36	; 0x24
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	4611      	mov	r1, r2
 8010304:	4618      	mov	r0, r3
 8010306:	f001 f81d 	bl	8011344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801030a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801030c:	f000 fa7f 	bl	801080e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010310:	f000 fe3a 	bl	8010f88 <xTaskResumeAll>
 8010314:	4603      	mov	r3, r0
 8010316:	2b00      	cmp	r3, #0
 8010318:	d189      	bne.n	801022e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801031a:	4b10      	ldr	r3, [pc, #64]	; (801035c <xQueueReceive+0x1bc>)
 801031c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010320:	601a      	str	r2, [r3, #0]
 8010322:	f3bf 8f4f 	dsb	sy
 8010326:	f3bf 8f6f 	isb	sy
 801032a:	e780      	b.n	801022e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801032c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801032e:	f000 fa6e 	bl	801080e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010332:	f000 fe29 	bl	8010f88 <xTaskResumeAll>
 8010336:	e77a      	b.n	801022e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801033a:	f000 fa68 	bl	801080e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801033e:	f000 fe23 	bl	8010f88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010344:	f000 fab5 	bl	80108b2 <prvIsQueueEmpty>
 8010348:	4603      	mov	r3, r0
 801034a:	2b00      	cmp	r3, #0
 801034c:	f43f af6f 	beq.w	801022e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010350:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010352:	4618      	mov	r0, r3
 8010354:	3730      	adds	r7, #48	; 0x30
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	e000ed04 	.word	0xe000ed04

08010360 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010360:	b580      	push	{r7, lr}
 8010362:	b08e      	sub	sp, #56	; 0x38
 8010364:	af00      	add	r7, sp, #0
 8010366:	6078      	str	r0, [r7, #4]
 8010368:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801036a:	2300      	movs	r3, #0
 801036c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010372:	2300      	movs	r3, #0
 8010374:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010378:	2b00      	cmp	r3, #0
 801037a:	d10a      	bne.n	8010392 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801037c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010380:	f383 8811 	msr	BASEPRI, r3
 8010384:	f3bf 8f6f 	isb	sy
 8010388:	f3bf 8f4f 	dsb	sy
 801038c:	623b      	str	r3, [r7, #32]
}
 801038e:	bf00      	nop
 8010390:	e7fe      	b.n	8010390 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010396:	2b00      	cmp	r3, #0
 8010398:	d00a      	beq.n	80103b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801039a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039e:	f383 8811 	msr	BASEPRI, r3
 80103a2:	f3bf 8f6f 	isb	sy
 80103a6:	f3bf 8f4f 	dsb	sy
 80103aa:	61fb      	str	r3, [r7, #28]
}
 80103ac:	bf00      	nop
 80103ae:	e7fe      	b.n	80103ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80103b0:	f001 f9ea 	bl	8011788 <xTaskGetSchedulerState>
 80103b4:	4603      	mov	r3, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d102      	bne.n	80103c0 <xQueueSemaphoreTake+0x60>
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d101      	bne.n	80103c4 <xQueueSemaphoreTake+0x64>
 80103c0:	2301      	movs	r3, #1
 80103c2:	e000      	b.n	80103c6 <xQueueSemaphoreTake+0x66>
 80103c4:	2300      	movs	r3, #0
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d10a      	bne.n	80103e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80103ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ce:	f383 8811 	msr	BASEPRI, r3
 80103d2:	f3bf 8f6f 	isb	sy
 80103d6:	f3bf 8f4f 	dsb	sy
 80103da:	61bb      	str	r3, [r7, #24]
}
 80103dc:	bf00      	nop
 80103de:	e7fe      	b.n	80103de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80103e0:	f002 fae8 	bl	80129b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80103e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80103ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d024      	beq.n	801043a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80103f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f2:	1e5a      	subs	r2, r3, #1
 80103f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80103f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d104      	bne.n	801040a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010400:	f001 fb38 	bl	8011a74 <pvTaskIncrementMutexHeldCount>
 8010404:	4602      	mov	r2, r0
 8010406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010408:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040c:	691b      	ldr	r3, [r3, #16]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d00f      	beq.n	8010432 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010414:	3310      	adds	r3, #16
 8010416:	4618      	mov	r0, r3
 8010418:	f000 ffe4 	bl	80113e4 <xTaskRemoveFromEventList>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d007      	beq.n	8010432 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010422:	4b54      	ldr	r3, [pc, #336]	; (8010574 <xQueueSemaphoreTake+0x214>)
 8010424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010428:	601a      	str	r2, [r3, #0]
 801042a:	f3bf 8f4f 	dsb	sy
 801042e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010432:	f002 faef 	bl	8012a14 <vPortExitCritical>
				return pdPASS;
 8010436:	2301      	movs	r3, #1
 8010438:	e097      	b.n	801056a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801043a:	683b      	ldr	r3, [r7, #0]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d111      	bne.n	8010464 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00a      	beq.n	801045c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8010446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801044a:	f383 8811 	msr	BASEPRI, r3
 801044e:	f3bf 8f6f 	isb	sy
 8010452:	f3bf 8f4f 	dsb	sy
 8010456:	617b      	str	r3, [r7, #20]
}
 8010458:	bf00      	nop
 801045a:	e7fe      	b.n	801045a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801045c:	f002 fada 	bl	8012a14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010460:	2300      	movs	r3, #0
 8010462:	e082      	b.n	801056a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010466:	2b00      	cmp	r3, #0
 8010468:	d106      	bne.n	8010478 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801046a:	f107 030c 	add.w	r3, r7, #12
 801046e:	4618      	mov	r0, r3
 8010470:	f001 f81c 	bl	80114ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010474:	2301      	movs	r3, #1
 8010476:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010478:	f002 facc 	bl	8012a14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801047c:	f000 fd76 	bl	8010f6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010480:	f002 fa98 	bl	80129b4 <vPortEnterCritical>
 8010484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801048a:	b25b      	sxtb	r3, r3
 801048c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010490:	d103      	bne.n	801049a <xQueueSemaphoreTake+0x13a>
 8010492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010494:	2200      	movs	r2, #0
 8010496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104a0:	b25b      	sxtb	r3, r3
 80104a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a6:	d103      	bne.n	80104b0 <xQueueSemaphoreTake+0x150>
 80104a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104aa:	2200      	movs	r2, #0
 80104ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104b0:	f002 fab0 	bl	8012a14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80104b4:	463a      	mov	r2, r7
 80104b6:	f107 030c 	add.w	r3, r7, #12
 80104ba:	4611      	mov	r1, r2
 80104bc:	4618      	mov	r0, r3
 80104be:	f001 f80b 	bl	80114d8 <xTaskCheckForTimeOut>
 80104c2:	4603      	mov	r3, r0
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d132      	bne.n	801052e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80104c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104ca:	f000 f9f2 	bl	80108b2 <prvIsQueueEmpty>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d026      	beq.n	8010522 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d109      	bne.n	80104f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80104dc:	f002 fa6a 	bl	80129b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80104e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e2:	689b      	ldr	r3, [r3, #8]
 80104e4:	4618      	mov	r0, r3
 80104e6:	f001 f96d 	bl	80117c4 <xTaskPriorityInherit>
 80104ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80104ec:	f002 fa92 	bl	8012a14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80104f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f2:	3324      	adds	r3, #36	; 0x24
 80104f4:	683a      	ldr	r2, [r7, #0]
 80104f6:	4611      	mov	r1, r2
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 ff23 	bl	8011344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80104fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010500:	f000 f985 	bl	801080e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010504:	f000 fd40 	bl	8010f88 <xTaskResumeAll>
 8010508:	4603      	mov	r3, r0
 801050a:	2b00      	cmp	r3, #0
 801050c:	f47f af68 	bne.w	80103e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010510:	4b18      	ldr	r3, [pc, #96]	; (8010574 <xQueueSemaphoreTake+0x214>)
 8010512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010516:	601a      	str	r2, [r3, #0]
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	f3bf 8f6f 	isb	sy
 8010520:	e75e      	b.n	80103e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010522:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010524:	f000 f973 	bl	801080e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010528:	f000 fd2e 	bl	8010f88 <xTaskResumeAll>
 801052c:	e758      	b.n	80103e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801052e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010530:	f000 f96d 	bl	801080e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010534:	f000 fd28 	bl	8010f88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801053a:	f000 f9ba 	bl	80108b2 <prvIsQueueEmpty>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	f43f af4d 	beq.w	80103e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8010546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010548:	2b00      	cmp	r3, #0
 801054a:	d00d      	beq.n	8010568 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801054c:	f002 fa32 	bl	80129b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010552:	f000 f8b4 	bl	80106be <prvGetDisinheritPriorityAfterTimeout>
 8010556:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055a:	689b      	ldr	r3, [r3, #8]
 801055c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801055e:	4618      	mov	r0, r3
 8010560:	f001 fa06 	bl	8011970 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010564:	f002 fa56 	bl	8012a14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010568:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801056a:	4618      	mov	r0, r3
 801056c:	3738      	adds	r7, #56	; 0x38
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
 8010572:	bf00      	nop
 8010574:	e000ed04 	.word	0xe000ed04

08010578 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b08e      	sub	sp, #56	; 0x38
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058a:	2b00      	cmp	r3, #0
 801058c:	d10a      	bne.n	80105a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801058e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010592:	f383 8811 	msr	BASEPRI, r3
 8010596:	f3bf 8f6f 	isb	sy
 801059a:	f3bf 8f4f 	dsb	sy
 801059e:	623b      	str	r3, [r7, #32]
}
 80105a0:	bf00      	nop
 80105a2:	e7fe      	b.n	80105a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d103      	bne.n	80105b2 <xQueueReceiveFromISR+0x3a>
 80105aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d101      	bne.n	80105b6 <xQueueReceiveFromISR+0x3e>
 80105b2:	2301      	movs	r3, #1
 80105b4:	e000      	b.n	80105b8 <xQueueReceiveFromISR+0x40>
 80105b6:	2300      	movs	r3, #0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10a      	bne.n	80105d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80105bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c0:	f383 8811 	msr	BASEPRI, r3
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	61fb      	str	r3, [r7, #28]
}
 80105ce:	bf00      	nop
 80105d0:	e7fe      	b.n	80105d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80105d2:	f002 fad1 	bl	8012b78 <vPortValidateInterruptPriority>
	__asm volatile
 80105d6:	f3ef 8211 	mrs	r2, BASEPRI
 80105da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105de:	f383 8811 	msr	BASEPRI, r3
 80105e2:	f3bf 8f6f 	isb	sy
 80105e6:	f3bf 8f4f 	dsb	sy
 80105ea:	61ba      	str	r2, [r7, #24]
 80105ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80105ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80105f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80105f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d02f      	beq.n	801065e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80105fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010600:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010608:	68b9      	ldr	r1, [r7, #8]
 801060a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801060c:	f000 f8d9 	bl	80107c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010612:	1e5a      	subs	r2, r3, #1
 8010614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010616:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010618:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801061c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010620:	d112      	bne.n	8010648 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010624:	691b      	ldr	r3, [r3, #16]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d016      	beq.n	8010658 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801062a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801062c:	3310      	adds	r3, #16
 801062e:	4618      	mov	r0, r3
 8010630:	f000 fed8 	bl	80113e4 <xTaskRemoveFromEventList>
 8010634:	4603      	mov	r3, r0
 8010636:	2b00      	cmp	r3, #0
 8010638:	d00e      	beq.n	8010658 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d00b      	beq.n	8010658 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2201      	movs	r2, #1
 8010644:	601a      	str	r2, [r3, #0]
 8010646:	e007      	b.n	8010658 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801064c:	3301      	adds	r3, #1
 801064e:	b2db      	uxtb	r3, r3
 8010650:	b25a      	sxtb	r2, r3
 8010652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010654:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010658:	2301      	movs	r3, #1
 801065a:	637b      	str	r3, [r7, #52]	; 0x34
 801065c:	e001      	b.n	8010662 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801065e:	2300      	movs	r3, #0
 8010660:	637b      	str	r3, [r7, #52]	; 0x34
 8010662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010664:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	f383 8811 	msr	BASEPRI, r3
}
 801066c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801066e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010670:	4618      	mov	r0, r3
 8010672:	3738      	adds	r7, #56	; 0x38
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}

08010678 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d10a      	bne.n	80106a0 <vQueueDelete+0x28>
	__asm volatile
 801068a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801068e:	f383 8811 	msr	BASEPRI, r3
 8010692:	f3bf 8f6f 	isb	sy
 8010696:	f3bf 8f4f 	dsb	sy
 801069a:	60bb      	str	r3, [r7, #8]
}
 801069c:	bf00      	nop
 801069e:	e7fe      	b.n	801069e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80106a0:	68f8      	ldr	r0, [r7, #12]
 80106a2:	f000 f95f 	bl	8010964 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d102      	bne.n	80106b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80106b0:	68f8      	ldr	r0, [r7, #12]
 80106b2:	f002 fb6d 	bl	8012d90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80106b6:	bf00      	nop
 80106b8:	3710      	adds	r7, #16
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}

080106be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80106be:	b480      	push	{r7}
 80106c0:	b085      	sub	sp, #20
 80106c2:	af00      	add	r7, sp, #0
 80106c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d006      	beq.n	80106dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80106d8:	60fb      	str	r3, [r7, #12]
 80106da:	e001      	b.n	80106e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80106dc:	2300      	movs	r3, #0
 80106de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80106e0:	68fb      	ldr	r3, [r7, #12]
	}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3714      	adds	r7, #20
 80106e6:	46bd      	mov	sp, r7
 80106e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ec:	4770      	bx	lr

080106ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80106ee:	b580      	push	{r7, lr}
 80106f0:	b086      	sub	sp, #24
 80106f2:	af00      	add	r7, sp, #0
 80106f4:	60f8      	str	r0, [r7, #12]
 80106f6:	60b9      	str	r1, [r7, #8]
 80106f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80106fa:	2300      	movs	r3, #0
 80106fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010702:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010708:	2b00      	cmp	r3, #0
 801070a:	d10d      	bne.n	8010728 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d14d      	bne.n	80107b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	689b      	ldr	r3, [r3, #8]
 8010718:	4618      	mov	r0, r3
 801071a:	f001 f8bb 	bl	8011894 <xTaskPriorityDisinherit>
 801071e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2200      	movs	r2, #0
 8010724:	609a      	str	r2, [r3, #8]
 8010726:	e043      	b.n	80107b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d119      	bne.n	8010762 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6858      	ldr	r0, [r3, #4]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010736:	461a      	mov	r2, r3
 8010738:	68b9      	ldr	r1, [r7, #8]
 801073a:	f003 fa75 	bl	8013c28 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	685a      	ldr	r2, [r3, #4]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010746:	441a      	add	r2, r3
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	685a      	ldr	r2, [r3, #4]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	689b      	ldr	r3, [r3, #8]
 8010754:	429a      	cmp	r2, r3
 8010756:	d32b      	bcc.n	80107b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	605a      	str	r2, [r3, #4]
 8010760:	e026      	b.n	80107b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	68d8      	ldr	r0, [r3, #12]
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801076a:	461a      	mov	r2, r3
 801076c:	68b9      	ldr	r1, [r7, #8]
 801076e:	f003 fa5b 	bl	8013c28 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	68da      	ldr	r2, [r3, #12]
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801077a:	425b      	negs	r3, r3
 801077c:	441a      	add	r2, r3
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	68da      	ldr	r2, [r3, #12]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	429a      	cmp	r2, r3
 801078c:	d207      	bcs.n	801079e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	689a      	ldr	r2, [r3, #8]
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010796:	425b      	negs	r3, r3
 8010798:	441a      	add	r2, r3
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2b02      	cmp	r3, #2
 80107a2:	d105      	bne.n	80107b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d002      	beq.n	80107b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	3b01      	subs	r3, #1
 80107ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	1c5a      	adds	r2, r3, #1
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80107b8:	697b      	ldr	r3, [r7, #20]
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	3718      	adds	r7, #24
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b082      	sub	sp, #8
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
 80107ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d018      	beq.n	8010806 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	68da      	ldr	r2, [r3, #12]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107dc:	441a      	add	r2, r3
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	68da      	ldr	r2, [r3, #12]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	689b      	ldr	r3, [r3, #8]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	d303      	bcc.n	80107f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	68d9      	ldr	r1, [r3, #12]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fe:	461a      	mov	r2, r3
 8010800:	6838      	ldr	r0, [r7, #0]
 8010802:	f003 fa11 	bl	8013c28 <memcpy>
	}
}
 8010806:	bf00      	nop
 8010808:	3708      	adds	r7, #8
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}

0801080e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801080e:	b580      	push	{r7, lr}
 8010810:	b084      	sub	sp, #16
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010816:	f002 f8cd 	bl	80129b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010820:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010822:	e011      	b.n	8010848 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010828:	2b00      	cmp	r3, #0
 801082a:	d012      	beq.n	8010852 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	3324      	adds	r3, #36	; 0x24
 8010830:	4618      	mov	r0, r3
 8010832:	f000 fdd7 	bl	80113e4 <xTaskRemoveFromEventList>
 8010836:	4603      	mov	r3, r0
 8010838:	2b00      	cmp	r3, #0
 801083a:	d001      	beq.n	8010840 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801083c:	f000 feae 	bl	801159c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010840:	7bfb      	ldrb	r3, [r7, #15]
 8010842:	3b01      	subs	r3, #1
 8010844:	b2db      	uxtb	r3, r3
 8010846:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801084c:	2b00      	cmp	r3, #0
 801084e:	dce9      	bgt.n	8010824 <prvUnlockQueue+0x16>
 8010850:	e000      	b.n	8010854 <prvUnlockQueue+0x46>
					break;
 8010852:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	22ff      	movs	r2, #255	; 0xff
 8010858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801085c:	f002 f8da 	bl	8012a14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010860:	f002 f8a8 	bl	80129b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801086a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801086c:	e011      	b.n	8010892 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	691b      	ldr	r3, [r3, #16]
 8010872:	2b00      	cmp	r3, #0
 8010874:	d012      	beq.n	801089c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	3310      	adds	r3, #16
 801087a:	4618      	mov	r0, r3
 801087c:	f000 fdb2 	bl	80113e4 <xTaskRemoveFromEventList>
 8010880:	4603      	mov	r3, r0
 8010882:	2b00      	cmp	r3, #0
 8010884:	d001      	beq.n	801088a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010886:	f000 fe89 	bl	801159c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801088a:	7bbb      	ldrb	r3, [r7, #14]
 801088c:	3b01      	subs	r3, #1
 801088e:	b2db      	uxtb	r3, r3
 8010890:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010892:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010896:	2b00      	cmp	r3, #0
 8010898:	dce9      	bgt.n	801086e <prvUnlockQueue+0x60>
 801089a:	e000      	b.n	801089e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801089c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	22ff      	movs	r2, #255	; 0xff
 80108a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80108a6:	f002 f8b5 	bl	8012a14 <vPortExitCritical>
}
 80108aa:	bf00      	nop
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}

080108b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80108b2:	b580      	push	{r7, lr}
 80108b4:	b084      	sub	sp, #16
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80108ba:	f002 f87b 	bl	80129b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d102      	bne.n	80108cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80108c6:	2301      	movs	r3, #1
 80108c8:	60fb      	str	r3, [r7, #12]
 80108ca:	e001      	b.n	80108d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80108cc:	2300      	movs	r3, #0
 80108ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80108d0:	f002 f8a0 	bl	8012a14 <vPortExitCritical>

	return xReturn;
 80108d4:	68fb      	ldr	r3, [r7, #12]
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b084      	sub	sp, #16
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80108e6:	f002 f865 	bl	80129b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d102      	bne.n	80108fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80108f6:	2301      	movs	r3, #1
 80108f8:	60fb      	str	r3, [r7, #12]
 80108fa:	e001      	b.n	8010900 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80108fc:	2300      	movs	r3, #0
 80108fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010900:	f002 f888 	bl	8012a14 <vPortExitCritical>

	return xReturn;
 8010904:	68fb      	ldr	r3, [r7, #12]
}
 8010906:	4618      	mov	r0, r3
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
	...

08010910 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010910:	b480      	push	{r7}
 8010912:	b085      	sub	sp, #20
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
 8010918:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801091a:	2300      	movs	r3, #0
 801091c:	60fb      	str	r3, [r7, #12]
 801091e:	e014      	b.n	801094a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010920:	4a0f      	ldr	r2, [pc, #60]	; (8010960 <vQueueAddToRegistry+0x50>)
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d10b      	bne.n	8010944 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801092c:	490c      	ldr	r1, [pc, #48]	; (8010960 <vQueueAddToRegistry+0x50>)
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	683a      	ldr	r2, [r7, #0]
 8010932:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010936:	4a0a      	ldr	r2, [pc, #40]	; (8010960 <vQueueAddToRegistry+0x50>)
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	00db      	lsls	r3, r3, #3
 801093c:	4413      	add	r3, r2
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010942:	e006      	b.n	8010952 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	3301      	adds	r3, #1
 8010948:	60fb      	str	r3, [r7, #12]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2b07      	cmp	r3, #7
 801094e:	d9e7      	bls.n	8010920 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010950:	bf00      	nop
 8010952:	bf00      	nop
 8010954:	3714      	adds	r7, #20
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	2000108c 	.word	0x2000108c

08010964 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010964:	b480      	push	{r7}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801096c:	2300      	movs	r3, #0
 801096e:	60fb      	str	r3, [r7, #12]
 8010970:	e016      	b.n	80109a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010972:	4a10      	ldr	r2, [pc, #64]	; (80109b4 <vQueueUnregisterQueue+0x50>)
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	00db      	lsls	r3, r3, #3
 8010978:	4413      	add	r3, r2
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	429a      	cmp	r2, r3
 8010980:	d10b      	bne.n	801099a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010982:	4a0c      	ldr	r2, [pc, #48]	; (80109b4 <vQueueUnregisterQueue+0x50>)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	2100      	movs	r1, #0
 8010988:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801098c:	4a09      	ldr	r2, [pc, #36]	; (80109b4 <vQueueUnregisterQueue+0x50>)
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	00db      	lsls	r3, r3, #3
 8010992:	4413      	add	r3, r2
 8010994:	2200      	movs	r2, #0
 8010996:	605a      	str	r2, [r3, #4]
				break;
 8010998:	e006      	b.n	80109a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	3301      	adds	r3, #1
 801099e:	60fb      	str	r3, [r7, #12]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	2b07      	cmp	r3, #7
 80109a4:	d9e5      	bls.n	8010972 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80109a6:	bf00      	nop
 80109a8:	bf00      	nop
 80109aa:	3714      	adds	r7, #20
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr
 80109b4:	2000108c 	.word	0x2000108c

080109b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b086      	sub	sp, #24
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80109c8:	f001 fff4 	bl	80129b4 <vPortEnterCritical>
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109d2:	b25b      	sxtb	r3, r3
 80109d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109d8:	d103      	bne.n	80109e2 <vQueueWaitForMessageRestricted+0x2a>
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	2200      	movs	r2, #0
 80109de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80109e2:	697b      	ldr	r3, [r7, #20]
 80109e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80109e8:	b25b      	sxtb	r3, r3
 80109ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109ee:	d103      	bne.n	80109f8 <vQueueWaitForMessageRestricted+0x40>
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	2200      	movs	r2, #0
 80109f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80109f8:	f002 f80c 	bl	8012a14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80109fc:	697b      	ldr	r3, [r7, #20]
 80109fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d106      	bne.n	8010a12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	3324      	adds	r3, #36	; 0x24
 8010a08:	687a      	ldr	r2, [r7, #4]
 8010a0a:	68b9      	ldr	r1, [r7, #8]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f000 fcbd 	bl	801138c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010a12:	6978      	ldr	r0, [r7, #20]
 8010a14:	f7ff fefb 	bl	801080e <prvUnlockQueue>
	}
 8010a18:	bf00      	nop
 8010a1a:	3718      	adds	r7, #24
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}

08010a20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b08e      	sub	sp, #56	; 0x38
 8010a24:	af04      	add	r7, sp, #16
 8010a26:	60f8      	str	r0, [r7, #12]
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	607a      	str	r2, [r7, #4]
 8010a2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d10a      	bne.n	8010a4a <xTaskCreateStatic+0x2a>
	__asm volatile
 8010a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a38:	f383 8811 	msr	BASEPRI, r3
 8010a3c:	f3bf 8f6f 	isb	sy
 8010a40:	f3bf 8f4f 	dsb	sy
 8010a44:	623b      	str	r3, [r7, #32]
}
 8010a46:	bf00      	nop
 8010a48:	e7fe      	b.n	8010a48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d10a      	bne.n	8010a66 <xTaskCreateStatic+0x46>
	__asm volatile
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	f383 8811 	msr	BASEPRI, r3
 8010a58:	f3bf 8f6f 	isb	sy
 8010a5c:	f3bf 8f4f 	dsb	sy
 8010a60:	61fb      	str	r3, [r7, #28]
}
 8010a62:	bf00      	nop
 8010a64:	e7fe      	b.n	8010a64 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010a66:	23a8      	movs	r3, #168	; 0xa8
 8010a68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010a6a:	693b      	ldr	r3, [r7, #16]
 8010a6c:	2ba8      	cmp	r3, #168	; 0xa8
 8010a6e:	d00a      	beq.n	8010a86 <xTaskCreateStatic+0x66>
	__asm volatile
 8010a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a74:	f383 8811 	msr	BASEPRI, r3
 8010a78:	f3bf 8f6f 	isb	sy
 8010a7c:	f3bf 8f4f 	dsb	sy
 8010a80:	61bb      	str	r3, [r7, #24]
}
 8010a82:	bf00      	nop
 8010a84:	e7fe      	b.n	8010a84 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010a86:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d01e      	beq.n	8010acc <xTaskCreateStatic+0xac>
 8010a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d01b      	beq.n	8010acc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a96:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a9c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa0:	2202      	movs	r2, #2
 8010aa2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	9303      	str	r3, [sp, #12]
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	9302      	str	r3, [sp, #8]
 8010aae:	f107 0314 	add.w	r3, r7, #20
 8010ab2:	9301      	str	r3, [sp, #4]
 8010ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab6:	9300      	str	r3, [sp, #0]
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	68b9      	ldr	r1, [r7, #8]
 8010abe:	68f8      	ldr	r0, [r7, #12]
 8010ac0:	f000 f850 	bl	8010b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ac4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ac6:	f000 f8f3 	bl	8010cb0 <prvAddNewTaskToReadyList>
 8010aca:	e001      	b.n	8010ad0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010acc:	2300      	movs	r3, #0
 8010ace:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010ad0:	697b      	ldr	r3, [r7, #20]
	}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3728      	adds	r7, #40	; 0x28
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b08c      	sub	sp, #48	; 0x30
 8010ade:	af04      	add	r7, sp, #16
 8010ae0:	60f8      	str	r0, [r7, #12]
 8010ae2:	60b9      	str	r1, [r7, #8]
 8010ae4:	603b      	str	r3, [r7, #0]
 8010ae6:	4613      	mov	r3, r2
 8010ae8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010aea:	88fb      	ldrh	r3, [r7, #6]
 8010aec:	009b      	lsls	r3, r3, #2
 8010aee:	4618      	mov	r0, r3
 8010af0:	f002 f882 	bl	8012bf8 <pvPortMalloc>
 8010af4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d00e      	beq.n	8010b1a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010afc:	20a8      	movs	r0, #168	; 0xa8
 8010afe:	f002 f87b 	bl	8012bf8 <pvPortMalloc>
 8010b02:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d003      	beq.n	8010b12 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b0a:	69fb      	ldr	r3, [r7, #28]
 8010b0c:	697a      	ldr	r2, [r7, #20]
 8010b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8010b10:	e005      	b.n	8010b1e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010b12:	6978      	ldr	r0, [r7, #20]
 8010b14:	f002 f93c 	bl	8012d90 <vPortFree>
 8010b18:	e001      	b.n	8010b1e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d017      	beq.n	8010b54 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	2200      	movs	r2, #0
 8010b28:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010b2c:	88fa      	ldrh	r2, [r7, #6]
 8010b2e:	2300      	movs	r3, #0
 8010b30:	9303      	str	r3, [sp, #12]
 8010b32:	69fb      	ldr	r3, [r7, #28]
 8010b34:	9302      	str	r3, [sp, #8]
 8010b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b38:	9301      	str	r3, [sp, #4]
 8010b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3c:	9300      	str	r3, [sp, #0]
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	68b9      	ldr	r1, [r7, #8]
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f000 f80e 	bl	8010b64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b48:	69f8      	ldr	r0, [r7, #28]
 8010b4a:	f000 f8b1 	bl	8010cb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	61bb      	str	r3, [r7, #24]
 8010b52:	e002      	b.n	8010b5a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010b54:	f04f 33ff 	mov.w	r3, #4294967295
 8010b58:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3720      	adds	r7, #32
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b088      	sub	sp, #32
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	607a      	str	r2, [r7, #4]
 8010b70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	461a      	mov	r2, r3
 8010b7c:	21a5      	movs	r1, #165	; 0xa5
 8010b7e:	f002 ff7e 	bl	8013a7e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010b8c:	3b01      	subs	r3, #1
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	4413      	add	r3, r2
 8010b92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010b94:	69bb      	ldr	r3, [r7, #24]
 8010b96:	f023 0307 	bic.w	r3, r3, #7
 8010b9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010b9c:	69bb      	ldr	r3, [r7, #24]
 8010b9e:	f003 0307 	and.w	r3, r3, #7
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00a      	beq.n	8010bbc <prvInitialiseNewTask+0x58>
	__asm volatile
 8010ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010baa:	f383 8811 	msr	BASEPRI, r3
 8010bae:	f3bf 8f6f 	isb	sy
 8010bb2:	f3bf 8f4f 	dsb	sy
 8010bb6:	617b      	str	r3, [r7, #20]
}
 8010bb8:	bf00      	nop
 8010bba:	e7fe      	b.n	8010bba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d01f      	beq.n	8010c02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	61fb      	str	r3, [r7, #28]
 8010bc6:	e012      	b.n	8010bee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010bc8:	68ba      	ldr	r2, [r7, #8]
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	4413      	add	r3, r2
 8010bce:	7819      	ldrb	r1, [r3, #0]
 8010bd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	3334      	adds	r3, #52	; 0x34
 8010bd8:	460a      	mov	r2, r1
 8010bda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010bdc:	68ba      	ldr	r2, [r7, #8]
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	4413      	add	r3, r2
 8010be2:	781b      	ldrb	r3, [r3, #0]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d006      	beq.n	8010bf6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	3301      	adds	r3, #1
 8010bec:	61fb      	str	r3, [r7, #28]
 8010bee:	69fb      	ldr	r3, [r7, #28]
 8010bf0:	2b0f      	cmp	r3, #15
 8010bf2:	d9e9      	bls.n	8010bc8 <prvInitialiseNewTask+0x64>
 8010bf4:	e000      	b.n	8010bf8 <prvInitialiseNewTask+0x94>
			{
				break;
 8010bf6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c00:	e003      	b.n	8010c0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c04:	2200      	movs	r2, #0
 8010c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c0c:	2b37      	cmp	r3, #55	; 0x37
 8010c0e:	d901      	bls.n	8010c14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010c10:	2337      	movs	r3, #55	; 0x37
 8010c12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c22:	2200      	movs	r2, #0
 8010c24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c28:	3304      	adds	r3, #4
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fe fda0 	bl	800f770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c32:	3318      	adds	r3, #24
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7fe fd9b 	bl	800f770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c52:	2200      	movs	r2, #0
 8010c54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c62:	3354      	adds	r3, #84	; 0x54
 8010c64:	224c      	movs	r2, #76	; 0x4c
 8010c66:	2100      	movs	r1, #0
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f002 ff08 	bl	8013a7e <memset>
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c70:	4a0c      	ldr	r2, [pc, #48]	; (8010ca4 <prvInitialiseNewTask+0x140>)
 8010c72:	659a      	str	r2, [r3, #88]	; 0x58
 8010c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c76:	4a0c      	ldr	r2, [pc, #48]	; (8010ca8 <prvInitialiseNewTask+0x144>)
 8010c78:	65da      	str	r2, [r3, #92]	; 0x5c
 8010c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7c:	4a0b      	ldr	r2, [pc, #44]	; (8010cac <prvInitialiseNewTask+0x148>)
 8010c7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010c80:	683a      	ldr	r2, [r7, #0]
 8010c82:	68f9      	ldr	r1, [r7, #12]
 8010c84:	69b8      	ldr	r0, [r7, #24]
 8010c86:	f001 fd67 	bl	8012758 <pxPortInitialiseStack>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d002      	beq.n	8010c9c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c9c:	bf00      	nop
 8010c9e:	3720      	adds	r7, #32
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}
 8010ca4:	2000da70 	.word	0x2000da70
 8010ca8:	2000dad8 	.word	0x2000dad8
 8010cac:	2000db40 	.word	0x2000db40

08010cb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010cb8:	f001 fe7c 	bl	80129b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010cbc:	4b2d      	ldr	r3, [pc, #180]	; (8010d74 <prvAddNewTaskToReadyList+0xc4>)
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	4a2c      	ldr	r2, [pc, #176]	; (8010d74 <prvAddNewTaskToReadyList+0xc4>)
 8010cc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010cc6:	4b2c      	ldr	r3, [pc, #176]	; (8010d78 <prvAddNewTaskToReadyList+0xc8>)
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d109      	bne.n	8010ce2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010cce:	4a2a      	ldr	r2, [pc, #168]	; (8010d78 <prvAddNewTaskToReadyList+0xc8>)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010cd4:	4b27      	ldr	r3, [pc, #156]	; (8010d74 <prvAddNewTaskToReadyList+0xc4>)
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	2b01      	cmp	r3, #1
 8010cda:	d110      	bne.n	8010cfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010cdc:	f000 fc82 	bl	80115e4 <prvInitialiseTaskLists>
 8010ce0:	e00d      	b.n	8010cfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ce2:	4b26      	ldr	r3, [pc, #152]	; (8010d7c <prvAddNewTaskToReadyList+0xcc>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d109      	bne.n	8010cfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010cea:	4b23      	ldr	r3, [pc, #140]	; (8010d78 <prvAddNewTaskToReadyList+0xc8>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cf4:	429a      	cmp	r2, r3
 8010cf6:	d802      	bhi.n	8010cfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010cf8:	4a1f      	ldr	r2, [pc, #124]	; (8010d78 <prvAddNewTaskToReadyList+0xc8>)
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010cfe:	4b20      	ldr	r3, [pc, #128]	; (8010d80 <prvAddNewTaskToReadyList+0xd0>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	3301      	adds	r3, #1
 8010d04:	4a1e      	ldr	r2, [pc, #120]	; (8010d80 <prvAddNewTaskToReadyList+0xd0>)
 8010d06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010d08:	4b1d      	ldr	r3, [pc, #116]	; (8010d80 <prvAddNewTaskToReadyList+0xd0>)
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d14:	4b1b      	ldr	r3, [pc, #108]	; (8010d84 <prvAddNewTaskToReadyList+0xd4>)
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d903      	bls.n	8010d24 <prvAddNewTaskToReadyList+0x74>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d20:	4a18      	ldr	r2, [pc, #96]	; (8010d84 <prvAddNewTaskToReadyList+0xd4>)
 8010d22:	6013      	str	r3, [r2, #0]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d28:	4613      	mov	r3, r2
 8010d2a:	009b      	lsls	r3, r3, #2
 8010d2c:	4413      	add	r3, r2
 8010d2e:	009b      	lsls	r3, r3, #2
 8010d30:	4a15      	ldr	r2, [pc, #84]	; (8010d88 <prvAddNewTaskToReadyList+0xd8>)
 8010d32:	441a      	add	r2, r3
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	3304      	adds	r3, #4
 8010d38:	4619      	mov	r1, r3
 8010d3a:	4610      	mov	r0, r2
 8010d3c:	f7fe fd25 	bl	800f78a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010d40:	f001 fe68 	bl	8012a14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010d44:	4b0d      	ldr	r3, [pc, #52]	; (8010d7c <prvAddNewTaskToReadyList+0xcc>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00e      	beq.n	8010d6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010d4c:	4b0a      	ldr	r3, [pc, #40]	; (8010d78 <prvAddNewTaskToReadyList+0xc8>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d207      	bcs.n	8010d6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010d5a:	4b0c      	ldr	r3, [pc, #48]	; (8010d8c <prvAddNewTaskToReadyList+0xdc>)
 8010d5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d60:	601a      	str	r2, [r3, #0]
 8010d62:	f3bf 8f4f 	dsb	sy
 8010d66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d6a:	bf00      	nop
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	200015a0 	.word	0x200015a0
 8010d78:	200010cc 	.word	0x200010cc
 8010d7c:	200015ac 	.word	0x200015ac
 8010d80:	200015bc 	.word	0x200015bc
 8010d84:	200015a8 	.word	0x200015a8
 8010d88:	200010d0 	.word	0x200010d0
 8010d8c:	e000ed04 	.word	0xe000ed04

08010d90 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b08a      	sub	sp, #40	; 0x28
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d10a      	bne.n	8010dba <vTaskDelayUntil+0x2a>
	__asm volatile
 8010da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da8:	f383 8811 	msr	BASEPRI, r3
 8010dac:	f3bf 8f6f 	isb	sy
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	617b      	str	r3, [r7, #20]
}
 8010db6:	bf00      	nop
 8010db8:	e7fe      	b.n	8010db8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010dba:	683b      	ldr	r3, [r7, #0]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d10a      	bne.n	8010dd6 <vTaskDelayUntil+0x46>
	__asm volatile
 8010dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc4:	f383 8811 	msr	BASEPRI, r3
 8010dc8:	f3bf 8f6f 	isb	sy
 8010dcc:	f3bf 8f4f 	dsb	sy
 8010dd0:	613b      	str	r3, [r7, #16]
}
 8010dd2:	bf00      	nop
 8010dd4:	e7fe      	b.n	8010dd4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8010dd6:	4b2a      	ldr	r3, [pc, #168]	; (8010e80 <vTaskDelayUntil+0xf0>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00a      	beq.n	8010df4 <vTaskDelayUntil+0x64>
	__asm volatile
 8010dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de2:	f383 8811 	msr	BASEPRI, r3
 8010de6:	f3bf 8f6f 	isb	sy
 8010dea:	f3bf 8f4f 	dsb	sy
 8010dee:	60fb      	str	r3, [r7, #12]
}
 8010df0:	bf00      	nop
 8010df2:	e7fe      	b.n	8010df2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8010df4:	f000 f8ba 	bl	8010f6c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010df8:	4b22      	ldr	r3, [pc, #136]	; (8010e84 <vTaskDelayUntil+0xf4>)
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	683a      	ldr	r2, [r7, #0]
 8010e04:	4413      	add	r3, r2
 8010e06:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	6a3a      	ldr	r2, [r7, #32]
 8010e0e:	429a      	cmp	r2, r3
 8010e10:	d20b      	bcs.n	8010e2a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	69fa      	ldr	r2, [r7, #28]
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d211      	bcs.n	8010e40 <vTaskDelayUntil+0xb0>
 8010e1c:	69fa      	ldr	r2, [r7, #28]
 8010e1e:	6a3b      	ldr	r3, [r7, #32]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d90d      	bls.n	8010e40 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8010e24:	2301      	movs	r3, #1
 8010e26:	627b      	str	r3, [r7, #36]	; 0x24
 8010e28:	e00a      	b.n	8010e40 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	69fa      	ldr	r2, [r7, #28]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	d303      	bcc.n	8010e3c <vTaskDelayUntil+0xac>
 8010e34:	69fa      	ldr	r2, [r7, #28]
 8010e36:	6a3b      	ldr	r3, [r7, #32]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d901      	bls.n	8010e40 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8010e3c:	2301      	movs	r3, #1
 8010e3e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	69fa      	ldr	r2, [r7, #28]
 8010e44:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8010e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d006      	beq.n	8010e5a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010e4c:	69fa      	ldr	r2, [r7, #28]
 8010e4e:	6a3b      	ldr	r3, [r7, #32]
 8010e50:	1ad3      	subs	r3, r2, r3
 8010e52:	2100      	movs	r1, #0
 8010e54:	4618      	mov	r0, r3
 8010e56:	f001 f823 	bl	8011ea0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010e5a:	f000 f895 	bl	8010f88 <xTaskResumeAll>
 8010e5e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010e60:	69bb      	ldr	r3, [r7, #24]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d107      	bne.n	8010e76 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8010e66:	4b08      	ldr	r3, [pc, #32]	; (8010e88 <vTaskDelayUntil+0xf8>)
 8010e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e6c:	601a      	str	r2, [r3, #0]
 8010e6e:	f3bf 8f4f 	dsb	sy
 8010e72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e76:	bf00      	nop
 8010e78:	3728      	adds	r7, #40	; 0x28
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	200015c8 	.word	0x200015c8
 8010e84:	200015a4 	.word	0x200015a4
 8010e88:	e000ed04 	.word	0xe000ed04

08010e8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b08a      	sub	sp, #40	; 0x28
 8010e90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010e92:	2300      	movs	r3, #0
 8010e94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010e96:	2300      	movs	r3, #0
 8010e98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e9a:	463a      	mov	r2, r7
 8010e9c:	1d39      	adds	r1, r7, #4
 8010e9e:	f107 0308 	add.w	r3, r7, #8
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fe fc10 	bl	800f6c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010ea8:	6839      	ldr	r1, [r7, #0]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	68ba      	ldr	r2, [r7, #8]
 8010eae:	9202      	str	r2, [sp, #8]
 8010eb0:	9301      	str	r3, [sp, #4]
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	9300      	str	r3, [sp, #0]
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	460a      	mov	r2, r1
 8010eba:	4924      	ldr	r1, [pc, #144]	; (8010f4c <vTaskStartScheduler+0xc0>)
 8010ebc:	4824      	ldr	r0, [pc, #144]	; (8010f50 <vTaskStartScheduler+0xc4>)
 8010ebe:	f7ff fdaf 	bl	8010a20 <xTaskCreateStatic>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	4a23      	ldr	r2, [pc, #140]	; (8010f54 <vTaskStartScheduler+0xc8>)
 8010ec6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ec8:	4b22      	ldr	r3, [pc, #136]	; (8010f54 <vTaskStartScheduler+0xc8>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d002      	beq.n	8010ed6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	617b      	str	r3, [r7, #20]
 8010ed4:	e001      	b.n	8010eda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	2b01      	cmp	r3, #1
 8010ede:	d102      	bne.n	8010ee6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010ee0:	f001 f832 	bl	8011f48 <xTimerCreateTimerTask>
 8010ee4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	2b01      	cmp	r3, #1
 8010eea:	d11b      	bne.n	8010f24 <vTaskStartScheduler+0x98>
	__asm volatile
 8010eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef0:	f383 8811 	msr	BASEPRI, r3
 8010ef4:	f3bf 8f6f 	isb	sy
 8010ef8:	f3bf 8f4f 	dsb	sy
 8010efc:	613b      	str	r3, [r7, #16]
}
 8010efe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010f00:	4b15      	ldr	r3, [pc, #84]	; (8010f58 <vTaskStartScheduler+0xcc>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	3354      	adds	r3, #84	; 0x54
 8010f06:	4a15      	ldr	r2, [pc, #84]	; (8010f5c <vTaskStartScheduler+0xd0>)
 8010f08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010f0a:	4b15      	ldr	r3, [pc, #84]	; (8010f60 <vTaskStartScheduler+0xd4>)
 8010f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8010f10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010f12:	4b14      	ldr	r3, [pc, #80]	; (8010f64 <vTaskStartScheduler+0xd8>)
 8010f14:	2201      	movs	r2, #1
 8010f16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010f18:	4b13      	ldr	r3, [pc, #76]	; (8010f68 <vTaskStartScheduler+0xdc>)
 8010f1a:	2200      	movs	r2, #0
 8010f1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010f1e:	f001 fca7 	bl	8012870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010f22:	e00e      	b.n	8010f42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f2a:	d10a      	bne.n	8010f42 <vTaskStartScheduler+0xb6>
	__asm volatile
 8010f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f30:	f383 8811 	msr	BASEPRI, r3
 8010f34:	f3bf 8f6f 	isb	sy
 8010f38:	f3bf 8f4f 	dsb	sy
 8010f3c:	60fb      	str	r3, [r7, #12]
}
 8010f3e:	bf00      	nop
 8010f40:	e7fe      	b.n	8010f40 <vTaskStartScheduler+0xb4>
}
 8010f42:	bf00      	nop
 8010f44:	3718      	adds	r7, #24
 8010f46:	46bd      	mov	sp, r7
 8010f48:	bd80      	pop	{r7, pc}
 8010f4a:	bf00      	nop
 8010f4c:	08015ebc 	.word	0x08015ebc
 8010f50:	080115b5 	.word	0x080115b5
 8010f54:	200015c4 	.word	0x200015c4
 8010f58:	200010cc 	.word	0x200010cc
 8010f5c:	20000088 	.word	0x20000088
 8010f60:	200015c0 	.word	0x200015c0
 8010f64:	200015ac 	.word	0x200015ac
 8010f68:	200015a4 	.word	0x200015a4

08010f6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010f70:	4b04      	ldr	r3, [pc, #16]	; (8010f84 <vTaskSuspendAll+0x18>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	3301      	adds	r3, #1
 8010f76:	4a03      	ldr	r2, [pc, #12]	; (8010f84 <vTaskSuspendAll+0x18>)
 8010f78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010f7a:	bf00      	nop
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f82:	4770      	bx	lr
 8010f84:	200015c8 	.word	0x200015c8

08010f88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b084      	sub	sp, #16
 8010f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010f92:	2300      	movs	r3, #0
 8010f94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010f96:	4b42      	ldr	r3, [pc, #264]	; (80110a0 <xTaskResumeAll+0x118>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d10a      	bne.n	8010fb4 <xTaskResumeAll+0x2c>
	__asm volatile
 8010f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa2:	f383 8811 	msr	BASEPRI, r3
 8010fa6:	f3bf 8f6f 	isb	sy
 8010faa:	f3bf 8f4f 	dsb	sy
 8010fae:	603b      	str	r3, [r7, #0]
}
 8010fb0:	bf00      	nop
 8010fb2:	e7fe      	b.n	8010fb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010fb4:	f001 fcfe 	bl	80129b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010fb8:	4b39      	ldr	r3, [pc, #228]	; (80110a0 <xTaskResumeAll+0x118>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	4a38      	ldr	r2, [pc, #224]	; (80110a0 <xTaskResumeAll+0x118>)
 8010fc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fc2:	4b37      	ldr	r3, [pc, #220]	; (80110a0 <xTaskResumeAll+0x118>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d162      	bne.n	8011090 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010fca:	4b36      	ldr	r3, [pc, #216]	; (80110a4 <xTaskResumeAll+0x11c>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d05e      	beq.n	8011090 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010fd2:	e02f      	b.n	8011034 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fd4:	4b34      	ldr	r3, [pc, #208]	; (80110a8 <xTaskResumeAll+0x120>)
 8010fd6:	68db      	ldr	r3, [r3, #12]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	3318      	adds	r3, #24
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fe fc2f 	bl	800f844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	3304      	adds	r3, #4
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7fe fc2a 	bl	800f844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ff4:	4b2d      	ldr	r3, [pc, #180]	; (80110ac <xTaskResumeAll+0x124>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	429a      	cmp	r2, r3
 8010ffa:	d903      	bls.n	8011004 <xTaskResumeAll+0x7c>
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011000:	4a2a      	ldr	r2, [pc, #168]	; (80110ac <xTaskResumeAll+0x124>)
 8011002:	6013      	str	r3, [r2, #0]
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011008:	4613      	mov	r3, r2
 801100a:	009b      	lsls	r3, r3, #2
 801100c:	4413      	add	r3, r2
 801100e:	009b      	lsls	r3, r3, #2
 8011010:	4a27      	ldr	r2, [pc, #156]	; (80110b0 <xTaskResumeAll+0x128>)
 8011012:	441a      	add	r2, r3
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	3304      	adds	r3, #4
 8011018:	4619      	mov	r1, r3
 801101a:	4610      	mov	r0, r2
 801101c:	f7fe fbb5 	bl	800f78a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011024:	4b23      	ldr	r3, [pc, #140]	; (80110b4 <xTaskResumeAll+0x12c>)
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801102a:	429a      	cmp	r2, r3
 801102c:	d302      	bcc.n	8011034 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801102e:	4b22      	ldr	r3, [pc, #136]	; (80110b8 <xTaskResumeAll+0x130>)
 8011030:	2201      	movs	r2, #1
 8011032:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011034:	4b1c      	ldr	r3, [pc, #112]	; (80110a8 <xTaskResumeAll+0x120>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d1cb      	bne.n	8010fd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d001      	beq.n	8011046 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011042:	f000 fb71 	bl	8011728 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011046:	4b1d      	ldr	r3, [pc, #116]	; (80110bc <xTaskResumeAll+0x134>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d010      	beq.n	8011074 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011052:	f000 f859 	bl	8011108 <xTaskIncrementTick>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d002      	beq.n	8011062 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801105c:	4b16      	ldr	r3, [pc, #88]	; (80110b8 <xTaskResumeAll+0x130>)
 801105e:	2201      	movs	r2, #1
 8011060:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	3b01      	subs	r3, #1
 8011066:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1f1      	bne.n	8011052 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801106e:	4b13      	ldr	r3, [pc, #76]	; (80110bc <xTaskResumeAll+0x134>)
 8011070:	2200      	movs	r2, #0
 8011072:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011074:	4b10      	ldr	r3, [pc, #64]	; (80110b8 <xTaskResumeAll+0x130>)
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d009      	beq.n	8011090 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801107c:	2301      	movs	r3, #1
 801107e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011080:	4b0f      	ldr	r3, [pc, #60]	; (80110c0 <xTaskResumeAll+0x138>)
 8011082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011086:	601a      	str	r2, [r3, #0]
 8011088:	f3bf 8f4f 	dsb	sy
 801108c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011090:	f001 fcc0 	bl	8012a14 <vPortExitCritical>

	return xAlreadyYielded;
 8011094:	68bb      	ldr	r3, [r7, #8]
}
 8011096:	4618      	mov	r0, r3
 8011098:	3710      	adds	r7, #16
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	200015c8 	.word	0x200015c8
 80110a4:	200015a0 	.word	0x200015a0
 80110a8:	20001560 	.word	0x20001560
 80110ac:	200015a8 	.word	0x200015a8
 80110b0:	200010d0 	.word	0x200010d0
 80110b4:	200010cc 	.word	0x200010cc
 80110b8:	200015b4 	.word	0x200015b4
 80110bc:	200015b0 	.word	0x200015b0
 80110c0:	e000ed04 	.word	0xe000ed04

080110c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80110ca:	4b05      	ldr	r3, [pc, #20]	; (80110e0 <xTaskGetTickCount+0x1c>)
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80110d0:	687b      	ldr	r3, [r7, #4]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	370c      	adds	r7, #12
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop
 80110e0:	200015a4 	.word	0x200015a4

080110e4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80110ea:	f001 fd45 	bl	8012b78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80110ee:	2300      	movs	r3, #0
 80110f0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80110f2:	4b04      	ldr	r3, [pc, #16]	; (8011104 <xTaskGetTickCountFromISR+0x20>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80110f8:	683b      	ldr	r3, [r7, #0]
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3708      	adds	r7, #8
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	200015a4 	.word	0x200015a4

08011108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b086      	sub	sp, #24
 801110c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801110e:	2300      	movs	r3, #0
 8011110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011112:	4b4f      	ldr	r3, [pc, #316]	; (8011250 <xTaskIncrementTick+0x148>)
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	f040 808f 	bne.w	801123a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801111c:	4b4d      	ldr	r3, [pc, #308]	; (8011254 <xTaskIncrementTick+0x14c>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	3301      	adds	r3, #1
 8011122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011124:	4a4b      	ldr	r2, [pc, #300]	; (8011254 <xTaskIncrementTick+0x14c>)
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801112a:	693b      	ldr	r3, [r7, #16]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d120      	bne.n	8011172 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011130:	4b49      	ldr	r3, [pc, #292]	; (8011258 <xTaskIncrementTick+0x150>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d00a      	beq.n	8011150 <xTaskIncrementTick+0x48>
	__asm volatile
 801113a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801113e:	f383 8811 	msr	BASEPRI, r3
 8011142:	f3bf 8f6f 	isb	sy
 8011146:	f3bf 8f4f 	dsb	sy
 801114a:	603b      	str	r3, [r7, #0]
}
 801114c:	bf00      	nop
 801114e:	e7fe      	b.n	801114e <xTaskIncrementTick+0x46>
 8011150:	4b41      	ldr	r3, [pc, #260]	; (8011258 <xTaskIncrementTick+0x150>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	60fb      	str	r3, [r7, #12]
 8011156:	4b41      	ldr	r3, [pc, #260]	; (801125c <xTaskIncrementTick+0x154>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	4a3f      	ldr	r2, [pc, #252]	; (8011258 <xTaskIncrementTick+0x150>)
 801115c:	6013      	str	r3, [r2, #0]
 801115e:	4a3f      	ldr	r2, [pc, #252]	; (801125c <xTaskIncrementTick+0x154>)
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	6013      	str	r3, [r2, #0]
 8011164:	4b3e      	ldr	r3, [pc, #248]	; (8011260 <xTaskIncrementTick+0x158>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	3301      	adds	r3, #1
 801116a:	4a3d      	ldr	r2, [pc, #244]	; (8011260 <xTaskIncrementTick+0x158>)
 801116c:	6013      	str	r3, [r2, #0]
 801116e:	f000 fadb 	bl	8011728 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011172:	4b3c      	ldr	r3, [pc, #240]	; (8011264 <xTaskIncrementTick+0x15c>)
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	693a      	ldr	r2, [r7, #16]
 8011178:	429a      	cmp	r2, r3
 801117a:	d349      	bcc.n	8011210 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801117c:	4b36      	ldr	r3, [pc, #216]	; (8011258 <xTaskIncrementTick+0x150>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d104      	bne.n	8011190 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011186:	4b37      	ldr	r3, [pc, #220]	; (8011264 <xTaskIncrementTick+0x15c>)
 8011188:	f04f 32ff 	mov.w	r2, #4294967295
 801118c:	601a      	str	r2, [r3, #0]
					break;
 801118e:	e03f      	b.n	8011210 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011190:	4b31      	ldr	r3, [pc, #196]	; (8011258 <xTaskIncrementTick+0x150>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	68db      	ldr	r3, [r3, #12]
 8011198:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80111a0:	693a      	ldr	r2, [r7, #16]
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	429a      	cmp	r2, r3
 80111a6:	d203      	bcs.n	80111b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80111a8:	4a2e      	ldr	r2, [pc, #184]	; (8011264 <xTaskIncrementTick+0x15c>)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80111ae:	e02f      	b.n	8011210 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	3304      	adds	r3, #4
 80111b4:	4618      	mov	r0, r3
 80111b6:	f7fe fb45 	bl	800f844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d004      	beq.n	80111cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	3318      	adds	r3, #24
 80111c6:	4618      	mov	r0, r3
 80111c8:	f7fe fb3c 	bl	800f844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111d0:	4b25      	ldr	r3, [pc, #148]	; (8011268 <xTaskIncrementTick+0x160>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	429a      	cmp	r2, r3
 80111d6:	d903      	bls.n	80111e0 <xTaskIncrementTick+0xd8>
 80111d8:	68bb      	ldr	r3, [r7, #8]
 80111da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111dc:	4a22      	ldr	r2, [pc, #136]	; (8011268 <xTaskIncrementTick+0x160>)
 80111de:	6013      	str	r3, [r2, #0]
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e4:	4613      	mov	r3, r2
 80111e6:	009b      	lsls	r3, r3, #2
 80111e8:	4413      	add	r3, r2
 80111ea:	009b      	lsls	r3, r3, #2
 80111ec:	4a1f      	ldr	r2, [pc, #124]	; (801126c <xTaskIncrementTick+0x164>)
 80111ee:	441a      	add	r2, r3
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	3304      	adds	r3, #4
 80111f4:	4619      	mov	r1, r3
 80111f6:	4610      	mov	r0, r2
 80111f8:	f7fe fac7 	bl	800f78a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011200:	4b1b      	ldr	r3, [pc, #108]	; (8011270 <xTaskIncrementTick+0x168>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011206:	429a      	cmp	r2, r3
 8011208:	d3b8      	bcc.n	801117c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801120a:	2301      	movs	r3, #1
 801120c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801120e:	e7b5      	b.n	801117c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011210:	4b17      	ldr	r3, [pc, #92]	; (8011270 <xTaskIncrementTick+0x168>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011216:	4915      	ldr	r1, [pc, #84]	; (801126c <xTaskIncrementTick+0x164>)
 8011218:	4613      	mov	r3, r2
 801121a:	009b      	lsls	r3, r3, #2
 801121c:	4413      	add	r3, r2
 801121e:	009b      	lsls	r3, r3, #2
 8011220:	440b      	add	r3, r1
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	2b01      	cmp	r3, #1
 8011226:	d901      	bls.n	801122c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011228:	2301      	movs	r3, #1
 801122a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801122c:	4b11      	ldr	r3, [pc, #68]	; (8011274 <xTaskIncrementTick+0x16c>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d007      	beq.n	8011244 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011234:	2301      	movs	r3, #1
 8011236:	617b      	str	r3, [r7, #20]
 8011238:	e004      	b.n	8011244 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801123a:	4b0f      	ldr	r3, [pc, #60]	; (8011278 <xTaskIncrementTick+0x170>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3301      	adds	r3, #1
 8011240:	4a0d      	ldr	r2, [pc, #52]	; (8011278 <xTaskIncrementTick+0x170>)
 8011242:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011244:	697b      	ldr	r3, [r7, #20]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3718      	adds	r7, #24
 801124a:	46bd      	mov	sp, r7
 801124c:	bd80      	pop	{r7, pc}
 801124e:	bf00      	nop
 8011250:	200015c8 	.word	0x200015c8
 8011254:	200015a4 	.word	0x200015a4
 8011258:	20001558 	.word	0x20001558
 801125c:	2000155c 	.word	0x2000155c
 8011260:	200015b8 	.word	0x200015b8
 8011264:	200015c0 	.word	0x200015c0
 8011268:	200015a8 	.word	0x200015a8
 801126c:	200010d0 	.word	0x200010d0
 8011270:	200010cc 	.word	0x200010cc
 8011274:	200015b4 	.word	0x200015b4
 8011278:	200015b0 	.word	0x200015b0

0801127c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801127c:	b480      	push	{r7}
 801127e:	b085      	sub	sp, #20
 8011280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011282:	4b2a      	ldr	r3, [pc, #168]	; (801132c <vTaskSwitchContext+0xb0>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d003      	beq.n	8011292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801128a:	4b29      	ldr	r3, [pc, #164]	; (8011330 <vTaskSwitchContext+0xb4>)
 801128c:	2201      	movs	r2, #1
 801128e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011290:	e046      	b.n	8011320 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011292:	4b27      	ldr	r3, [pc, #156]	; (8011330 <vTaskSwitchContext+0xb4>)
 8011294:	2200      	movs	r2, #0
 8011296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011298:	4b26      	ldr	r3, [pc, #152]	; (8011334 <vTaskSwitchContext+0xb8>)
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	60fb      	str	r3, [r7, #12]
 801129e:	e010      	b.n	80112c2 <vTaskSwitchContext+0x46>
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d10a      	bne.n	80112bc <vTaskSwitchContext+0x40>
	__asm volatile
 80112a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112aa:	f383 8811 	msr	BASEPRI, r3
 80112ae:	f3bf 8f6f 	isb	sy
 80112b2:	f3bf 8f4f 	dsb	sy
 80112b6:	607b      	str	r3, [r7, #4]
}
 80112b8:	bf00      	nop
 80112ba:	e7fe      	b.n	80112ba <vTaskSwitchContext+0x3e>
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	3b01      	subs	r3, #1
 80112c0:	60fb      	str	r3, [r7, #12]
 80112c2:	491d      	ldr	r1, [pc, #116]	; (8011338 <vTaskSwitchContext+0xbc>)
 80112c4:	68fa      	ldr	r2, [r7, #12]
 80112c6:	4613      	mov	r3, r2
 80112c8:	009b      	lsls	r3, r3, #2
 80112ca:	4413      	add	r3, r2
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	440b      	add	r3, r1
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d0e4      	beq.n	80112a0 <vTaskSwitchContext+0x24>
 80112d6:	68fa      	ldr	r2, [r7, #12]
 80112d8:	4613      	mov	r3, r2
 80112da:	009b      	lsls	r3, r3, #2
 80112dc:	4413      	add	r3, r2
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	4a15      	ldr	r2, [pc, #84]	; (8011338 <vTaskSwitchContext+0xbc>)
 80112e2:	4413      	add	r3, r2
 80112e4:	60bb      	str	r3, [r7, #8]
 80112e6:	68bb      	ldr	r3, [r7, #8]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	685a      	ldr	r2, [r3, #4]
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	605a      	str	r2, [r3, #4]
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	685a      	ldr	r2, [r3, #4]
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	3308      	adds	r3, #8
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d104      	bne.n	8011306 <vTaskSwitchContext+0x8a>
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	685a      	ldr	r2, [r3, #4]
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	605a      	str	r2, [r3, #4]
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	68db      	ldr	r3, [r3, #12]
 801130c:	4a0b      	ldr	r2, [pc, #44]	; (801133c <vTaskSwitchContext+0xc0>)
 801130e:	6013      	str	r3, [r2, #0]
 8011310:	4a08      	ldr	r2, [pc, #32]	; (8011334 <vTaskSwitchContext+0xb8>)
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011316:	4b09      	ldr	r3, [pc, #36]	; (801133c <vTaskSwitchContext+0xc0>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	3354      	adds	r3, #84	; 0x54
 801131c:	4a08      	ldr	r2, [pc, #32]	; (8011340 <vTaskSwitchContext+0xc4>)
 801131e:	6013      	str	r3, [r2, #0]
}
 8011320:	bf00      	nop
 8011322:	3714      	adds	r7, #20
 8011324:	46bd      	mov	sp, r7
 8011326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132a:	4770      	bx	lr
 801132c:	200015c8 	.word	0x200015c8
 8011330:	200015b4 	.word	0x200015b4
 8011334:	200015a8 	.word	0x200015a8
 8011338:	200010d0 	.word	0x200010d0
 801133c:	200010cc 	.word	0x200010cc
 8011340:	20000088 	.word	0x20000088

08011344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d10a      	bne.n	801136a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011358:	f383 8811 	msr	BASEPRI, r3
 801135c:	f3bf 8f6f 	isb	sy
 8011360:	f3bf 8f4f 	dsb	sy
 8011364:	60fb      	str	r3, [r7, #12]
}
 8011366:	bf00      	nop
 8011368:	e7fe      	b.n	8011368 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801136a:	4b07      	ldr	r3, [pc, #28]	; (8011388 <vTaskPlaceOnEventList+0x44>)
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	3318      	adds	r3, #24
 8011370:	4619      	mov	r1, r3
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f7fe fa2d 	bl	800f7d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011378:	2101      	movs	r1, #1
 801137a:	6838      	ldr	r0, [r7, #0]
 801137c:	f000 fd90 	bl	8011ea0 <prvAddCurrentTaskToDelayedList>
}
 8011380:	bf00      	nop
 8011382:	3710      	adds	r7, #16
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}
 8011388:	200010cc 	.word	0x200010cc

0801138c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801138c:	b580      	push	{r7, lr}
 801138e:	b086      	sub	sp, #24
 8011390:	af00      	add	r7, sp, #0
 8011392:	60f8      	str	r0, [r7, #12]
 8011394:	60b9      	str	r1, [r7, #8]
 8011396:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d10a      	bne.n	80113b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801139e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a2:	f383 8811 	msr	BASEPRI, r3
 80113a6:	f3bf 8f6f 	isb	sy
 80113aa:	f3bf 8f4f 	dsb	sy
 80113ae:	617b      	str	r3, [r7, #20]
}
 80113b0:	bf00      	nop
 80113b2:	e7fe      	b.n	80113b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80113b4:	4b0a      	ldr	r3, [pc, #40]	; (80113e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	3318      	adds	r3, #24
 80113ba:	4619      	mov	r1, r3
 80113bc:	68f8      	ldr	r0, [r7, #12]
 80113be:	f7fe f9e4 	bl	800f78a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d002      	beq.n	80113ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80113c8:	f04f 33ff 	mov.w	r3, #4294967295
 80113cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80113ce:	6879      	ldr	r1, [r7, #4]
 80113d0:	68b8      	ldr	r0, [r7, #8]
 80113d2:	f000 fd65 	bl	8011ea0 <prvAddCurrentTaskToDelayedList>
	}
 80113d6:	bf00      	nop
 80113d8:	3718      	adds	r7, #24
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}
 80113de:	bf00      	nop
 80113e0:	200010cc 	.word	0x200010cc

080113e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b086      	sub	sp, #24
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	68db      	ldr	r3, [r3, #12]
 80113f0:	68db      	ldr	r3, [r3, #12]
 80113f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80113f4:	693b      	ldr	r3, [r7, #16]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d10a      	bne.n	8011410 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80113fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113fe:	f383 8811 	msr	BASEPRI, r3
 8011402:	f3bf 8f6f 	isb	sy
 8011406:	f3bf 8f4f 	dsb	sy
 801140a:	60fb      	str	r3, [r7, #12]
}
 801140c:	bf00      	nop
 801140e:	e7fe      	b.n	801140e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011410:	693b      	ldr	r3, [r7, #16]
 8011412:	3318      	adds	r3, #24
 8011414:	4618      	mov	r0, r3
 8011416:	f7fe fa15 	bl	800f844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801141a:	4b1e      	ldr	r3, [pc, #120]	; (8011494 <xTaskRemoveFromEventList+0xb0>)
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d11d      	bne.n	801145e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011422:	693b      	ldr	r3, [r7, #16]
 8011424:	3304      	adds	r3, #4
 8011426:	4618      	mov	r0, r3
 8011428:	f7fe fa0c 	bl	800f844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801142c:	693b      	ldr	r3, [r7, #16]
 801142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011430:	4b19      	ldr	r3, [pc, #100]	; (8011498 <xTaskRemoveFromEventList+0xb4>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	429a      	cmp	r2, r3
 8011436:	d903      	bls.n	8011440 <xTaskRemoveFromEventList+0x5c>
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801143c:	4a16      	ldr	r2, [pc, #88]	; (8011498 <xTaskRemoveFromEventList+0xb4>)
 801143e:	6013      	str	r3, [r2, #0]
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011444:	4613      	mov	r3, r2
 8011446:	009b      	lsls	r3, r3, #2
 8011448:	4413      	add	r3, r2
 801144a:	009b      	lsls	r3, r3, #2
 801144c:	4a13      	ldr	r2, [pc, #76]	; (801149c <xTaskRemoveFromEventList+0xb8>)
 801144e:	441a      	add	r2, r3
 8011450:	693b      	ldr	r3, [r7, #16]
 8011452:	3304      	adds	r3, #4
 8011454:	4619      	mov	r1, r3
 8011456:	4610      	mov	r0, r2
 8011458:	f7fe f997 	bl	800f78a <vListInsertEnd>
 801145c:	e005      	b.n	801146a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	3318      	adds	r3, #24
 8011462:	4619      	mov	r1, r3
 8011464:	480e      	ldr	r0, [pc, #56]	; (80114a0 <xTaskRemoveFromEventList+0xbc>)
 8011466:	f7fe f990 	bl	800f78a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801146a:	693b      	ldr	r3, [r7, #16]
 801146c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801146e:	4b0d      	ldr	r3, [pc, #52]	; (80114a4 <xTaskRemoveFromEventList+0xc0>)
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011474:	429a      	cmp	r2, r3
 8011476:	d905      	bls.n	8011484 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011478:	2301      	movs	r3, #1
 801147a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801147c:	4b0a      	ldr	r3, [pc, #40]	; (80114a8 <xTaskRemoveFromEventList+0xc4>)
 801147e:	2201      	movs	r2, #1
 8011480:	601a      	str	r2, [r3, #0]
 8011482:	e001      	b.n	8011488 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011484:	2300      	movs	r3, #0
 8011486:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011488:	697b      	ldr	r3, [r7, #20]
}
 801148a:	4618      	mov	r0, r3
 801148c:	3718      	adds	r7, #24
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	200015c8 	.word	0x200015c8
 8011498:	200015a8 	.word	0x200015a8
 801149c:	200010d0 	.word	0x200010d0
 80114a0:	20001560 	.word	0x20001560
 80114a4:	200010cc 	.word	0x200010cc
 80114a8:	200015b4 	.word	0x200015b4

080114ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80114ac:	b480      	push	{r7}
 80114ae:	b083      	sub	sp, #12
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80114b4:	4b06      	ldr	r3, [pc, #24]	; (80114d0 <vTaskInternalSetTimeOutState+0x24>)
 80114b6:	681a      	ldr	r2, [r3, #0]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80114bc:	4b05      	ldr	r3, [pc, #20]	; (80114d4 <vTaskInternalSetTimeOutState+0x28>)
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	605a      	str	r2, [r3, #4]
}
 80114c4:	bf00      	nop
 80114c6:	370c      	adds	r7, #12
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr
 80114d0:	200015b8 	.word	0x200015b8
 80114d4:	200015a4 	.word	0x200015a4

080114d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b088      	sub	sp, #32
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d10a      	bne.n	80114fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80114e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114ec:	f383 8811 	msr	BASEPRI, r3
 80114f0:	f3bf 8f6f 	isb	sy
 80114f4:	f3bf 8f4f 	dsb	sy
 80114f8:	613b      	str	r3, [r7, #16]
}
 80114fa:	bf00      	nop
 80114fc:	e7fe      	b.n	80114fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d10a      	bne.n	801151a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	60fb      	str	r3, [r7, #12]
}
 8011516:	bf00      	nop
 8011518:	e7fe      	b.n	8011518 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801151a:	f001 fa4b 	bl	80129b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801151e:	4b1d      	ldr	r3, [pc, #116]	; (8011594 <xTaskCheckForTimeOut+0xbc>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	685b      	ldr	r3, [r3, #4]
 8011528:	69ba      	ldr	r2, [r7, #24]
 801152a:	1ad3      	subs	r3, r2, r3
 801152c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011536:	d102      	bne.n	801153e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011538:	2300      	movs	r3, #0
 801153a:	61fb      	str	r3, [r7, #28]
 801153c:	e023      	b.n	8011586 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	4b15      	ldr	r3, [pc, #84]	; (8011598 <xTaskCheckForTimeOut+0xc0>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	429a      	cmp	r2, r3
 8011548:	d007      	beq.n	801155a <xTaskCheckForTimeOut+0x82>
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	69ba      	ldr	r2, [r7, #24]
 8011550:	429a      	cmp	r2, r3
 8011552:	d302      	bcc.n	801155a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011554:	2301      	movs	r3, #1
 8011556:	61fb      	str	r3, [r7, #28]
 8011558:	e015      	b.n	8011586 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	697a      	ldr	r2, [r7, #20]
 8011560:	429a      	cmp	r2, r3
 8011562:	d20b      	bcs.n	801157c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	681a      	ldr	r2, [r3, #0]
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	1ad2      	subs	r2, r2, r3
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f7ff ff9b 	bl	80114ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011576:	2300      	movs	r3, #0
 8011578:	61fb      	str	r3, [r7, #28]
 801157a:	e004      	b.n	8011586 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801157c:	683b      	ldr	r3, [r7, #0]
 801157e:	2200      	movs	r2, #0
 8011580:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011582:	2301      	movs	r3, #1
 8011584:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011586:	f001 fa45 	bl	8012a14 <vPortExitCritical>

	return xReturn;
 801158a:	69fb      	ldr	r3, [r7, #28]
}
 801158c:	4618      	mov	r0, r3
 801158e:	3720      	adds	r7, #32
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}
 8011594:	200015a4 	.word	0x200015a4
 8011598:	200015b8 	.word	0x200015b8

0801159c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801159c:	b480      	push	{r7}
 801159e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80115a0:	4b03      	ldr	r3, [pc, #12]	; (80115b0 <vTaskMissedYield+0x14>)
 80115a2:	2201      	movs	r2, #1
 80115a4:	601a      	str	r2, [r3, #0]
}
 80115a6:	bf00      	nop
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr
 80115b0:	200015b4 	.word	0x200015b4

080115b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80115bc:	f000 f852 	bl	8011664 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80115c0:	4b06      	ldr	r3, [pc, #24]	; (80115dc <prvIdleTask+0x28>)
 80115c2:	681b      	ldr	r3, [r3, #0]
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d9f9      	bls.n	80115bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80115c8:	4b05      	ldr	r3, [pc, #20]	; (80115e0 <prvIdleTask+0x2c>)
 80115ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115ce:	601a      	str	r2, [r3, #0]
 80115d0:	f3bf 8f4f 	dsb	sy
 80115d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80115d8:	e7f0      	b.n	80115bc <prvIdleTask+0x8>
 80115da:	bf00      	nop
 80115dc:	200010d0 	.word	0x200010d0
 80115e0:	e000ed04 	.word	0xe000ed04

080115e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80115ea:	2300      	movs	r3, #0
 80115ec:	607b      	str	r3, [r7, #4]
 80115ee:	e00c      	b.n	801160a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80115f0:	687a      	ldr	r2, [r7, #4]
 80115f2:	4613      	mov	r3, r2
 80115f4:	009b      	lsls	r3, r3, #2
 80115f6:	4413      	add	r3, r2
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	4a12      	ldr	r2, [pc, #72]	; (8011644 <prvInitialiseTaskLists+0x60>)
 80115fc:	4413      	add	r3, r2
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fe f896 	bl	800f730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	3301      	adds	r3, #1
 8011608:	607b      	str	r3, [r7, #4]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	2b37      	cmp	r3, #55	; 0x37
 801160e:	d9ef      	bls.n	80115f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011610:	480d      	ldr	r0, [pc, #52]	; (8011648 <prvInitialiseTaskLists+0x64>)
 8011612:	f7fe f88d 	bl	800f730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011616:	480d      	ldr	r0, [pc, #52]	; (801164c <prvInitialiseTaskLists+0x68>)
 8011618:	f7fe f88a 	bl	800f730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801161c:	480c      	ldr	r0, [pc, #48]	; (8011650 <prvInitialiseTaskLists+0x6c>)
 801161e:	f7fe f887 	bl	800f730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011622:	480c      	ldr	r0, [pc, #48]	; (8011654 <prvInitialiseTaskLists+0x70>)
 8011624:	f7fe f884 	bl	800f730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011628:	480b      	ldr	r0, [pc, #44]	; (8011658 <prvInitialiseTaskLists+0x74>)
 801162a:	f7fe f881 	bl	800f730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801162e:	4b0b      	ldr	r3, [pc, #44]	; (801165c <prvInitialiseTaskLists+0x78>)
 8011630:	4a05      	ldr	r2, [pc, #20]	; (8011648 <prvInitialiseTaskLists+0x64>)
 8011632:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011634:	4b0a      	ldr	r3, [pc, #40]	; (8011660 <prvInitialiseTaskLists+0x7c>)
 8011636:	4a05      	ldr	r2, [pc, #20]	; (801164c <prvInitialiseTaskLists+0x68>)
 8011638:	601a      	str	r2, [r3, #0]
}
 801163a:	bf00      	nop
 801163c:	3708      	adds	r7, #8
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop
 8011644:	200010d0 	.word	0x200010d0
 8011648:	20001530 	.word	0x20001530
 801164c:	20001544 	.word	0x20001544
 8011650:	20001560 	.word	0x20001560
 8011654:	20001574 	.word	0x20001574
 8011658:	2000158c 	.word	0x2000158c
 801165c:	20001558 	.word	0x20001558
 8011660:	2000155c 	.word	0x2000155c

08011664 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b082      	sub	sp, #8
 8011668:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801166a:	e019      	b.n	80116a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801166c:	f001 f9a2 	bl	80129b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011670:	4b10      	ldr	r3, [pc, #64]	; (80116b4 <prvCheckTasksWaitingTermination+0x50>)
 8011672:	68db      	ldr	r3, [r3, #12]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	3304      	adds	r3, #4
 801167c:	4618      	mov	r0, r3
 801167e:	f7fe f8e1 	bl	800f844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011682:	4b0d      	ldr	r3, [pc, #52]	; (80116b8 <prvCheckTasksWaitingTermination+0x54>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	3b01      	subs	r3, #1
 8011688:	4a0b      	ldr	r2, [pc, #44]	; (80116b8 <prvCheckTasksWaitingTermination+0x54>)
 801168a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801168c:	4b0b      	ldr	r3, [pc, #44]	; (80116bc <prvCheckTasksWaitingTermination+0x58>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	3b01      	subs	r3, #1
 8011692:	4a0a      	ldr	r2, [pc, #40]	; (80116bc <prvCheckTasksWaitingTermination+0x58>)
 8011694:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011696:	f001 f9bd 	bl	8012a14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f000 f810 	bl	80116c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80116a0:	4b06      	ldr	r3, [pc, #24]	; (80116bc <prvCheckTasksWaitingTermination+0x58>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1e1      	bne.n	801166c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80116a8:	bf00      	nop
 80116aa:	bf00      	nop
 80116ac:	3708      	adds	r7, #8
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	20001574 	.word	0x20001574
 80116b8:	200015a0 	.word	0x200015a0
 80116bc:	20001588 	.word	0x20001588

080116c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	3354      	adds	r3, #84	; 0x54
 80116cc:	4618      	mov	r0, r3
 80116ce:	f002 f9f3 	bl	8013ab8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d108      	bne.n	80116ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116e0:	4618      	mov	r0, r3
 80116e2:	f001 fb55 	bl	8012d90 <vPortFree>
				vPortFree( pxTCB );
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f001 fb52 	bl	8012d90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80116ec:	e018      	b.n	8011720 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d103      	bne.n	8011700 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f001 fb49 	bl	8012d90 <vPortFree>
	}
 80116fe:	e00f      	b.n	8011720 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8011706:	2b02      	cmp	r3, #2
 8011708:	d00a      	beq.n	8011720 <prvDeleteTCB+0x60>
	__asm volatile
 801170a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170e:	f383 8811 	msr	BASEPRI, r3
 8011712:	f3bf 8f6f 	isb	sy
 8011716:	f3bf 8f4f 	dsb	sy
 801171a:	60fb      	str	r3, [r7, #12]
}
 801171c:	bf00      	nop
 801171e:	e7fe      	b.n	801171e <prvDeleteTCB+0x5e>
	}
 8011720:	bf00      	nop
 8011722:	3710      	adds	r7, #16
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011728:	b480      	push	{r7}
 801172a:	b083      	sub	sp, #12
 801172c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801172e:	4b0c      	ldr	r3, [pc, #48]	; (8011760 <prvResetNextTaskUnblockTime+0x38>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d104      	bne.n	8011742 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011738:	4b0a      	ldr	r3, [pc, #40]	; (8011764 <prvResetNextTaskUnblockTime+0x3c>)
 801173a:	f04f 32ff 	mov.w	r2, #4294967295
 801173e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011740:	e008      	b.n	8011754 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011742:	4b07      	ldr	r3, [pc, #28]	; (8011760 <prvResetNextTaskUnblockTime+0x38>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	68db      	ldr	r3, [r3, #12]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	4a04      	ldr	r2, [pc, #16]	; (8011764 <prvResetNextTaskUnblockTime+0x3c>)
 8011752:	6013      	str	r3, [r2, #0]
}
 8011754:	bf00      	nop
 8011756:	370c      	adds	r7, #12
 8011758:	46bd      	mov	sp, r7
 801175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175e:	4770      	bx	lr
 8011760:	20001558 	.word	0x20001558
 8011764:	200015c0 	.word	0x200015c0

08011768 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801176e:	4b05      	ldr	r3, [pc, #20]	; (8011784 <xTaskGetCurrentTaskHandle+0x1c>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011774:	687b      	ldr	r3, [r7, #4]
	}
 8011776:	4618      	mov	r0, r3
 8011778:	370c      	adds	r7, #12
 801177a:	46bd      	mov	sp, r7
 801177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop
 8011784:	200010cc 	.word	0x200010cc

08011788 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801178e:	4b0b      	ldr	r3, [pc, #44]	; (80117bc <xTaskGetSchedulerState+0x34>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d102      	bne.n	801179c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011796:	2301      	movs	r3, #1
 8011798:	607b      	str	r3, [r7, #4]
 801179a:	e008      	b.n	80117ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801179c:	4b08      	ldr	r3, [pc, #32]	; (80117c0 <xTaskGetSchedulerState+0x38>)
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d102      	bne.n	80117aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80117a4:	2302      	movs	r3, #2
 80117a6:	607b      	str	r3, [r7, #4]
 80117a8:	e001      	b.n	80117ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80117aa:	2300      	movs	r3, #0
 80117ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80117ae:	687b      	ldr	r3, [r7, #4]
	}
 80117b0:	4618      	mov	r0, r3
 80117b2:	370c      	adds	r7, #12
 80117b4:	46bd      	mov	sp, r7
 80117b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ba:	4770      	bx	lr
 80117bc:	200015ac 	.word	0x200015ac
 80117c0:	200015c8 	.word	0x200015c8

080117c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80117d0:	2300      	movs	r3, #0
 80117d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d051      	beq.n	801187e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117de:	4b2a      	ldr	r3, [pc, #168]	; (8011888 <xTaskPriorityInherit+0xc4>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117e4:	429a      	cmp	r2, r3
 80117e6:	d241      	bcs.n	801186c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	699b      	ldr	r3, [r3, #24]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	db06      	blt.n	80117fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117f0:	4b25      	ldr	r3, [pc, #148]	; (8011888 <xTaskPriorityInherit+0xc4>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80117fa:	68bb      	ldr	r3, [r7, #8]
 80117fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	6959      	ldr	r1, [r3, #20]
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011806:	4613      	mov	r3, r2
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	4413      	add	r3, r2
 801180c:	009b      	lsls	r3, r3, #2
 801180e:	4a1f      	ldr	r2, [pc, #124]	; (801188c <xTaskPriorityInherit+0xc8>)
 8011810:	4413      	add	r3, r2
 8011812:	4299      	cmp	r1, r3
 8011814:	d122      	bne.n	801185c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011816:	68bb      	ldr	r3, [r7, #8]
 8011818:	3304      	adds	r3, #4
 801181a:	4618      	mov	r0, r3
 801181c:	f7fe f812 	bl	800f844 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011820:	4b19      	ldr	r3, [pc, #100]	; (8011888 <xTaskPriorityInherit+0xc4>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011826:	68bb      	ldr	r3, [r7, #8]
 8011828:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801182a:	68bb      	ldr	r3, [r7, #8]
 801182c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801182e:	4b18      	ldr	r3, [pc, #96]	; (8011890 <xTaskPriorityInherit+0xcc>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	429a      	cmp	r2, r3
 8011834:	d903      	bls.n	801183e <xTaskPriorityInherit+0x7a>
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801183a:	4a15      	ldr	r2, [pc, #84]	; (8011890 <xTaskPriorityInherit+0xcc>)
 801183c:	6013      	str	r3, [r2, #0]
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011842:	4613      	mov	r3, r2
 8011844:	009b      	lsls	r3, r3, #2
 8011846:	4413      	add	r3, r2
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	4a10      	ldr	r2, [pc, #64]	; (801188c <xTaskPriorityInherit+0xc8>)
 801184c:	441a      	add	r2, r3
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	3304      	adds	r3, #4
 8011852:	4619      	mov	r1, r3
 8011854:	4610      	mov	r0, r2
 8011856:	f7fd ff98 	bl	800f78a <vListInsertEnd>
 801185a:	e004      	b.n	8011866 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801185c:	4b0a      	ldr	r3, [pc, #40]	; (8011888 <xTaskPriorityInherit+0xc4>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011866:	2301      	movs	r3, #1
 8011868:	60fb      	str	r3, [r7, #12]
 801186a:	e008      	b.n	801187e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011870:	4b05      	ldr	r3, [pc, #20]	; (8011888 <xTaskPriorityInherit+0xc4>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011876:	429a      	cmp	r2, r3
 8011878:	d201      	bcs.n	801187e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801187a:	2301      	movs	r3, #1
 801187c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801187e:	68fb      	ldr	r3, [r7, #12]
	}
 8011880:	4618      	mov	r0, r3
 8011882:	3710      	adds	r7, #16
 8011884:	46bd      	mov	sp, r7
 8011886:	bd80      	pop	{r7, pc}
 8011888:	200010cc 	.word	0x200010cc
 801188c:	200010d0 	.word	0x200010d0
 8011890:	200015a8 	.word	0x200015a8

08011894 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011894:	b580      	push	{r7, lr}
 8011896:	b086      	sub	sp, #24
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80118a0:	2300      	movs	r3, #0
 80118a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d056      	beq.n	8011958 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80118aa:	4b2e      	ldr	r3, [pc, #184]	; (8011964 <xTaskPriorityDisinherit+0xd0>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	693a      	ldr	r2, [r7, #16]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d00a      	beq.n	80118ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80118b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b8:	f383 8811 	msr	BASEPRI, r3
 80118bc:	f3bf 8f6f 	isb	sy
 80118c0:	f3bf 8f4f 	dsb	sy
 80118c4:	60fb      	str	r3, [r7, #12]
}
 80118c6:	bf00      	nop
 80118c8:	e7fe      	b.n	80118c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80118ca:	693b      	ldr	r3, [r7, #16]
 80118cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d10a      	bne.n	80118e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80118d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d6:	f383 8811 	msr	BASEPRI, r3
 80118da:	f3bf 8f6f 	isb	sy
 80118de:	f3bf 8f4f 	dsb	sy
 80118e2:	60bb      	str	r3, [r7, #8]
}
 80118e4:	bf00      	nop
 80118e6:	e7fe      	b.n	80118e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118ec:	1e5a      	subs	r2, r3, #1
 80118ee:	693b      	ldr	r3, [r7, #16]
 80118f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80118f2:	693b      	ldr	r3, [r7, #16]
 80118f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d02c      	beq.n	8011958 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80118fe:	693b      	ldr	r3, [r7, #16]
 8011900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011902:	2b00      	cmp	r3, #0
 8011904:	d128      	bne.n	8011958 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011906:	693b      	ldr	r3, [r7, #16]
 8011908:	3304      	adds	r3, #4
 801190a:	4618      	mov	r0, r3
 801190c:	f7fd ff9a 	bl	800f844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011918:	693b      	ldr	r3, [r7, #16]
 801191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801191c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011920:	693b      	ldr	r3, [r7, #16]
 8011922:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011928:	4b0f      	ldr	r3, [pc, #60]	; (8011968 <xTaskPriorityDisinherit+0xd4>)
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	429a      	cmp	r2, r3
 801192e:	d903      	bls.n	8011938 <xTaskPriorityDisinherit+0xa4>
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011934:	4a0c      	ldr	r2, [pc, #48]	; (8011968 <xTaskPriorityDisinherit+0xd4>)
 8011936:	6013      	str	r3, [r2, #0]
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801193c:	4613      	mov	r3, r2
 801193e:	009b      	lsls	r3, r3, #2
 8011940:	4413      	add	r3, r2
 8011942:	009b      	lsls	r3, r3, #2
 8011944:	4a09      	ldr	r2, [pc, #36]	; (801196c <xTaskPriorityDisinherit+0xd8>)
 8011946:	441a      	add	r2, r3
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	3304      	adds	r3, #4
 801194c:	4619      	mov	r1, r3
 801194e:	4610      	mov	r0, r2
 8011950:	f7fd ff1b 	bl	800f78a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011954:	2301      	movs	r3, #1
 8011956:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011958:	697b      	ldr	r3, [r7, #20]
	}
 801195a:	4618      	mov	r0, r3
 801195c:	3718      	adds	r7, #24
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	200010cc 	.word	0x200010cc
 8011968:	200015a8 	.word	0x200015a8
 801196c:	200010d0 	.word	0x200010d0

08011970 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011970:	b580      	push	{r7, lr}
 8011972:	b088      	sub	sp, #32
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801197e:	2301      	movs	r3, #1
 8011980:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d06a      	beq.n	8011a5e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801198c:	2b00      	cmp	r3, #0
 801198e:	d10a      	bne.n	80119a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011994:	f383 8811 	msr	BASEPRI, r3
 8011998:	f3bf 8f6f 	isb	sy
 801199c:	f3bf 8f4f 	dsb	sy
 80119a0:	60fb      	str	r3, [r7, #12]
}
 80119a2:	bf00      	nop
 80119a4:	e7fe      	b.n	80119a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	429a      	cmp	r2, r3
 80119ae:	d902      	bls.n	80119b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	61fb      	str	r3, [r7, #28]
 80119b4:	e002      	b.n	80119bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80119ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80119bc:	69bb      	ldr	r3, [r7, #24]
 80119be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c0:	69fa      	ldr	r2, [r7, #28]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d04b      	beq.n	8011a5e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80119c6:	69bb      	ldr	r3, [r7, #24]
 80119c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119ca:	697a      	ldr	r2, [r7, #20]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d146      	bne.n	8011a5e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80119d0:	4b25      	ldr	r3, [pc, #148]	; (8011a68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	69ba      	ldr	r2, [r7, #24]
 80119d6:	429a      	cmp	r2, r3
 80119d8:	d10a      	bne.n	80119f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80119da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119de:	f383 8811 	msr	BASEPRI, r3
 80119e2:	f3bf 8f6f 	isb	sy
 80119e6:	f3bf 8f4f 	dsb	sy
 80119ea:	60bb      	str	r3, [r7, #8]
}
 80119ec:	bf00      	nop
 80119ee:	e7fe      	b.n	80119ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80119f0:	69bb      	ldr	r3, [r7, #24]
 80119f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	69fa      	ldr	r2, [r7, #28]
 80119fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80119fc:	69bb      	ldr	r3, [r7, #24]
 80119fe:	699b      	ldr	r3, [r3, #24]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	db04      	blt.n	8011a0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a0a:	69bb      	ldr	r3, [r7, #24]
 8011a0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011a0e:	69bb      	ldr	r3, [r7, #24]
 8011a10:	6959      	ldr	r1, [r3, #20]
 8011a12:	693a      	ldr	r2, [r7, #16]
 8011a14:	4613      	mov	r3, r2
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	4413      	add	r3, r2
 8011a1a:	009b      	lsls	r3, r3, #2
 8011a1c:	4a13      	ldr	r2, [pc, #76]	; (8011a6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011a1e:	4413      	add	r3, r2
 8011a20:	4299      	cmp	r1, r3
 8011a22:	d11c      	bne.n	8011a5e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a24:	69bb      	ldr	r3, [r7, #24]
 8011a26:	3304      	adds	r3, #4
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7fd ff0b 	bl	800f844 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011a2e:	69bb      	ldr	r3, [r7, #24]
 8011a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a32:	4b0f      	ldr	r3, [pc, #60]	; (8011a70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	429a      	cmp	r2, r3
 8011a38:	d903      	bls.n	8011a42 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a3e:	4a0c      	ldr	r2, [pc, #48]	; (8011a70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011a40:	6013      	str	r3, [r2, #0]
 8011a42:	69bb      	ldr	r3, [r7, #24]
 8011a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a46:	4613      	mov	r3, r2
 8011a48:	009b      	lsls	r3, r3, #2
 8011a4a:	4413      	add	r3, r2
 8011a4c:	009b      	lsls	r3, r3, #2
 8011a4e:	4a07      	ldr	r2, [pc, #28]	; (8011a6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011a50:	441a      	add	r2, r3
 8011a52:	69bb      	ldr	r3, [r7, #24]
 8011a54:	3304      	adds	r3, #4
 8011a56:	4619      	mov	r1, r3
 8011a58:	4610      	mov	r0, r2
 8011a5a:	f7fd fe96 	bl	800f78a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011a5e:	bf00      	nop
 8011a60:	3720      	adds	r7, #32
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}
 8011a66:	bf00      	nop
 8011a68:	200010cc 	.word	0x200010cc
 8011a6c:	200010d0 	.word	0x200010d0
 8011a70:	200015a8 	.word	0x200015a8

08011a74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011a74:	b480      	push	{r7}
 8011a76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011a78:	4b07      	ldr	r3, [pc, #28]	; (8011a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d004      	beq.n	8011a8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011a80:	4b05      	ldr	r3, [pc, #20]	; (8011a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a86:	3201      	adds	r2, #1
 8011a88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011a8a:	4b03      	ldr	r3, [pc, #12]	; (8011a98 <pvTaskIncrementMutexHeldCount+0x24>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
	}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	46bd      	mov	sp, r7
 8011a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a96:	4770      	bx	lr
 8011a98:	200010cc 	.word	0x200010cc

08011a9c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b086      	sub	sp, #24
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	60f8      	str	r0, [r7, #12]
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]
 8011aa8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011aaa:	f000 ff83 	bl	80129b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011aae:	4b29      	ldr	r3, [pc, #164]	; (8011b54 <xTaskNotifyWait+0xb8>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	2b02      	cmp	r3, #2
 8011aba:	d01c      	beq.n	8011af6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011abc:	4b25      	ldr	r3, [pc, #148]	; (8011b54 <xTaskNotifyWait+0xb8>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8011ac4:	68fa      	ldr	r2, [r7, #12]
 8011ac6:	43d2      	mvns	r2, r2
 8011ac8:	400a      	ands	r2, r1
 8011aca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011ace:	4b21      	ldr	r3, [pc, #132]	; (8011b54 <xTaskNotifyWait+0xb8>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8011ad8:	683b      	ldr	r3, [r7, #0]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d00b      	beq.n	8011af6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ade:	2101      	movs	r1, #1
 8011ae0:	6838      	ldr	r0, [r7, #0]
 8011ae2:	f000 f9dd 	bl	8011ea0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011ae6:	4b1c      	ldr	r3, [pc, #112]	; (8011b58 <xTaskNotifyWait+0xbc>)
 8011ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011aec:	601a      	str	r2, [r3, #0]
 8011aee:	f3bf 8f4f 	dsb	sy
 8011af2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011af6:	f000 ff8d 	bl	8012a14 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011afa:	f000 ff5b 	bl	80129b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d005      	beq.n	8011b10 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011b04:	4b13      	ldr	r3, [pc, #76]	; (8011b54 <xTaskNotifyWait+0xb8>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011b10:	4b10      	ldr	r3, [pc, #64]	; (8011b54 <xTaskNotifyWait+0xb8>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	2b02      	cmp	r3, #2
 8011b1c:	d002      	beq.n	8011b24 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	617b      	str	r3, [r7, #20]
 8011b22:	e00a      	b.n	8011b3a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011b24:	4b0b      	ldr	r3, [pc, #44]	; (8011b54 <xTaskNotifyWait+0xb8>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8011b2c:	68ba      	ldr	r2, [r7, #8]
 8011b2e:	43d2      	mvns	r2, r2
 8011b30:	400a      	ands	r2, r1
 8011b32:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 8011b36:	2301      	movs	r3, #1
 8011b38:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011b3a:	4b06      	ldr	r3, [pc, #24]	; (8011b54 <xTaskNotifyWait+0xb8>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8011b44:	f000 ff66 	bl	8012a14 <vPortExitCritical>

		return xReturn;
 8011b48:	697b      	ldr	r3, [r7, #20]
	}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3718      	adds	r7, #24
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	200010cc 	.word	0x200010cc
 8011b58:	e000ed04 	.word	0xe000ed04

08011b5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b08a      	sub	sp, #40	; 0x28
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	60f8      	str	r0, [r7, #12]
 8011b64:	60b9      	str	r1, [r7, #8]
 8011b66:	603b      	str	r3, [r7, #0]
 8011b68:	4613      	mov	r3, r2
 8011b6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d10a      	bne.n	8011b8c <xTaskGenericNotify+0x30>
	__asm volatile
 8011b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b7a:	f383 8811 	msr	BASEPRI, r3
 8011b7e:	f3bf 8f6f 	isb	sy
 8011b82:	f3bf 8f4f 	dsb	sy
 8011b86:	61bb      	str	r3, [r7, #24]
}
 8011b88:	bf00      	nop
 8011b8a:	e7fe      	b.n	8011b8a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011b90:	f000 ff10 	bl	80129b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d004      	beq.n	8011ba4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011b9a:	6a3b      	ldr	r3, [r7, #32]
 8011b9c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011ba4:	6a3b      	ldr	r3, [r7, #32]
 8011ba6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8011baa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011bac:	6a3b      	ldr	r3, [r7, #32]
 8011bae:	2202      	movs	r2, #2
 8011bb0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8011bb4:	79fb      	ldrb	r3, [r7, #7]
 8011bb6:	2b04      	cmp	r3, #4
 8011bb8:	d82d      	bhi.n	8011c16 <xTaskGenericNotify+0xba>
 8011bba:	a201      	add	r2, pc, #4	; (adr r2, 8011bc0 <xTaskGenericNotify+0x64>)
 8011bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc0:	08011c39 	.word	0x08011c39
 8011bc4:	08011bd5 	.word	0x08011bd5
 8011bc8:	08011be7 	.word	0x08011be7
 8011bcc:	08011bf7 	.word	0x08011bf7
 8011bd0:	08011c01 	.word	0x08011c01
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011bd4:	6a3b      	ldr	r3, [r7, #32]
 8011bd6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011bda:	68bb      	ldr	r3, [r7, #8]
 8011bdc:	431a      	orrs	r2, r3
 8011bde:	6a3b      	ldr	r3, [r7, #32]
 8011be0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011be4:	e02b      	b.n	8011c3e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011be6:	6a3b      	ldr	r3, [r7, #32]
 8011be8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011bec:	1c5a      	adds	r2, r3, #1
 8011bee:	6a3b      	ldr	r3, [r7, #32]
 8011bf0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011bf4:	e023      	b.n	8011c3e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011bf6:	6a3b      	ldr	r3, [r7, #32]
 8011bf8:	68ba      	ldr	r2, [r7, #8]
 8011bfa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011bfe:	e01e      	b.n	8011c3e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011c00:	7ffb      	ldrb	r3, [r7, #31]
 8011c02:	2b02      	cmp	r3, #2
 8011c04:	d004      	beq.n	8011c10 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011c06:	6a3b      	ldr	r3, [r7, #32]
 8011c08:	68ba      	ldr	r2, [r7, #8]
 8011c0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011c0e:	e016      	b.n	8011c3e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8011c10:	2300      	movs	r3, #0
 8011c12:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011c14:	e013      	b.n	8011c3e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011c16:	6a3b      	ldr	r3, [r7, #32]
 8011c18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c20:	d00c      	beq.n	8011c3c <xTaskGenericNotify+0xe0>
	__asm volatile
 8011c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c26:	f383 8811 	msr	BASEPRI, r3
 8011c2a:	f3bf 8f6f 	isb	sy
 8011c2e:	f3bf 8f4f 	dsb	sy
 8011c32:	617b      	str	r3, [r7, #20]
}
 8011c34:	bf00      	nop
 8011c36:	e7fe      	b.n	8011c36 <xTaskGenericNotify+0xda>
					break;
 8011c38:	bf00      	nop
 8011c3a:	e000      	b.n	8011c3e <xTaskGenericNotify+0xe2>

					break;
 8011c3c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011c3e:	7ffb      	ldrb	r3, [r7, #31]
 8011c40:	2b01      	cmp	r3, #1
 8011c42:	d13a      	bne.n	8011cba <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c44:	6a3b      	ldr	r3, [r7, #32]
 8011c46:	3304      	adds	r3, #4
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f7fd fdfb 	bl	800f844 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011c4e:	6a3b      	ldr	r3, [r7, #32]
 8011c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c52:	4b1d      	ldr	r3, [pc, #116]	; (8011cc8 <xTaskGenericNotify+0x16c>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d903      	bls.n	8011c62 <xTaskGenericNotify+0x106>
 8011c5a:	6a3b      	ldr	r3, [r7, #32]
 8011c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c5e:	4a1a      	ldr	r2, [pc, #104]	; (8011cc8 <xTaskGenericNotify+0x16c>)
 8011c60:	6013      	str	r3, [r2, #0]
 8011c62:	6a3b      	ldr	r3, [r7, #32]
 8011c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c66:	4613      	mov	r3, r2
 8011c68:	009b      	lsls	r3, r3, #2
 8011c6a:	4413      	add	r3, r2
 8011c6c:	009b      	lsls	r3, r3, #2
 8011c6e:	4a17      	ldr	r2, [pc, #92]	; (8011ccc <xTaskGenericNotify+0x170>)
 8011c70:	441a      	add	r2, r3
 8011c72:	6a3b      	ldr	r3, [r7, #32]
 8011c74:	3304      	adds	r3, #4
 8011c76:	4619      	mov	r1, r3
 8011c78:	4610      	mov	r0, r2
 8011c7a:	f7fd fd86 	bl	800f78a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d00a      	beq.n	8011c9c <xTaskGenericNotify+0x140>
	__asm volatile
 8011c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c8a:	f383 8811 	msr	BASEPRI, r3
 8011c8e:	f3bf 8f6f 	isb	sy
 8011c92:	f3bf 8f4f 	dsb	sy
 8011c96:	613b      	str	r3, [r7, #16]
}
 8011c98:	bf00      	nop
 8011c9a:	e7fe      	b.n	8011c9a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011c9c:	6a3b      	ldr	r3, [r7, #32]
 8011c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ca0:	4b0b      	ldr	r3, [pc, #44]	; (8011cd0 <xTaskGenericNotify+0x174>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d907      	bls.n	8011cba <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011caa:	4b0a      	ldr	r3, [pc, #40]	; (8011cd4 <xTaskGenericNotify+0x178>)
 8011cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cb0:	601a      	str	r2, [r3, #0]
 8011cb2:	f3bf 8f4f 	dsb	sy
 8011cb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011cba:	f000 feab 	bl	8012a14 <vPortExitCritical>

		return xReturn;
 8011cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3728      	adds	r7, #40	; 0x28
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	200015a8 	.word	0x200015a8
 8011ccc:	200010d0 	.word	0x200010d0
 8011cd0:	200010cc 	.word	0x200010cc
 8011cd4:	e000ed04 	.word	0xe000ed04

08011cd8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b08e      	sub	sp, #56	; 0x38
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	60f8      	str	r0, [r7, #12]
 8011ce0:	60b9      	str	r1, [r7, #8]
 8011ce2:	603b      	str	r3, [r7, #0]
 8011ce4:	4613      	mov	r3, r2
 8011ce6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8011ce8:	2301      	movs	r3, #1
 8011cea:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d10a      	bne.n	8011d08 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8011cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf6:	f383 8811 	msr	BASEPRI, r3
 8011cfa:	f3bf 8f6f 	isb	sy
 8011cfe:	f3bf 8f4f 	dsb	sy
 8011d02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011d04:	bf00      	nop
 8011d06:	e7fe      	b.n	8011d06 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d08:	f000 ff36 	bl	8012b78 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8011d10:	f3ef 8211 	mrs	r2, BASEPRI
 8011d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d18:	f383 8811 	msr	BASEPRI, r3
 8011d1c:	f3bf 8f6f 	isb	sy
 8011d20:	f3bf 8f4f 	dsb	sy
 8011d24:	623a      	str	r2, [r7, #32]
 8011d26:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8011d28:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d004      	beq.n	8011d3c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d34:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8011d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d48:	2202      	movs	r2, #2
 8011d4a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8011d4e:	79fb      	ldrb	r3, [r7, #7]
 8011d50:	2b04      	cmp	r3, #4
 8011d52:	d82f      	bhi.n	8011db4 <xTaskGenericNotifyFromISR+0xdc>
 8011d54:	a201      	add	r2, pc, #4	; (adr r2, 8011d5c <xTaskGenericNotifyFromISR+0x84>)
 8011d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d5a:	bf00      	nop
 8011d5c:	08011dd7 	.word	0x08011dd7
 8011d60:	08011d71 	.word	0x08011d71
 8011d64:	08011d83 	.word	0x08011d83
 8011d68:	08011d93 	.word	0x08011d93
 8011d6c:	08011d9d 	.word	0x08011d9d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	431a      	orrs	r2, r3
 8011d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011d80:	e02c      	b.n	8011ddc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011d88:	1c5a      	adds	r2, r3, #1
 8011d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d8c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011d90:	e024      	b.n	8011ddc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d94:	68ba      	ldr	r2, [r7, #8]
 8011d96:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8011d9a:	e01f      	b.n	8011ddc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011d9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011da0:	2b02      	cmp	r3, #2
 8011da2:	d004      	beq.n	8011dae <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da6:	68ba      	ldr	r2, [r7, #8]
 8011da8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011dac:	e016      	b.n	8011ddc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8011dae:	2300      	movs	r3, #0
 8011db0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8011db2:	e013      	b.n	8011ddc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011db6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dbe:	d00c      	beq.n	8011dda <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8011dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc4:	f383 8811 	msr	BASEPRI, r3
 8011dc8:	f3bf 8f6f 	isb	sy
 8011dcc:	f3bf 8f4f 	dsb	sy
 8011dd0:	61bb      	str	r3, [r7, #24]
}
 8011dd2:	bf00      	nop
 8011dd4:	e7fe      	b.n	8011dd4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8011dd6:	bf00      	nop
 8011dd8:	e000      	b.n	8011ddc <xTaskGenericNotifyFromISR+0x104>
					break;
 8011dda:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011ddc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011de0:	2b01      	cmp	r3, #1
 8011de2:	d146      	bne.n	8011e72 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d00a      	beq.n	8011e02 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8011dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011df0:	f383 8811 	msr	BASEPRI, r3
 8011df4:	f3bf 8f6f 	isb	sy
 8011df8:	f3bf 8f4f 	dsb	sy
 8011dfc:	617b      	str	r3, [r7, #20]
}
 8011dfe:	bf00      	nop
 8011e00:	e7fe      	b.n	8011e00 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e02:	4b21      	ldr	r3, [pc, #132]	; (8011e88 <xTaskGenericNotifyFromISR+0x1b0>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d11d      	bne.n	8011e46 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0c:	3304      	adds	r3, #4
 8011e0e:	4618      	mov	r0, r3
 8011e10:	f7fd fd18 	bl	800f844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e18:	4b1c      	ldr	r3, [pc, #112]	; (8011e8c <xTaskGenericNotifyFromISR+0x1b4>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d903      	bls.n	8011e28 <xTaskGenericNotifyFromISR+0x150>
 8011e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e24:	4a19      	ldr	r2, [pc, #100]	; (8011e8c <xTaskGenericNotifyFromISR+0x1b4>)
 8011e26:	6013      	str	r3, [r2, #0]
 8011e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e2c:	4613      	mov	r3, r2
 8011e2e:	009b      	lsls	r3, r3, #2
 8011e30:	4413      	add	r3, r2
 8011e32:	009b      	lsls	r3, r3, #2
 8011e34:	4a16      	ldr	r2, [pc, #88]	; (8011e90 <xTaskGenericNotifyFromISR+0x1b8>)
 8011e36:	441a      	add	r2, r3
 8011e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e3a:	3304      	adds	r3, #4
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	4610      	mov	r0, r2
 8011e40:	f7fd fca3 	bl	800f78a <vListInsertEnd>
 8011e44:	e005      	b.n	8011e52 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8011e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e48:	3318      	adds	r3, #24
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	4811      	ldr	r0, [pc, #68]	; (8011e94 <xTaskGenericNotifyFromISR+0x1bc>)
 8011e4e:	f7fd fc9c 	bl	800f78a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e56:	4b10      	ldr	r3, [pc, #64]	; (8011e98 <xTaskGenericNotifyFromISR+0x1c0>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	d908      	bls.n	8011e72 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8011e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d002      	beq.n	8011e6c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8011e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011e68:	2201      	movs	r2, #1
 8011e6a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8011e6c:	4b0b      	ldr	r3, [pc, #44]	; (8011e9c <xTaskGenericNotifyFromISR+0x1c4>)
 8011e6e:	2201      	movs	r2, #1
 8011e70:	601a      	str	r2, [r3, #0]
 8011e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	f383 8811 	msr	BASEPRI, r3
}
 8011e7c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8011e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8011e80:	4618      	mov	r0, r3
 8011e82:	3738      	adds	r7, #56	; 0x38
 8011e84:	46bd      	mov	sp, r7
 8011e86:	bd80      	pop	{r7, pc}
 8011e88:	200015c8 	.word	0x200015c8
 8011e8c:	200015a8 	.word	0x200015a8
 8011e90:	200010d0 	.word	0x200010d0
 8011e94:	20001560 	.word	0x20001560
 8011e98:	200010cc 	.word	0x200010cc
 8011e9c:	200015b4 	.word	0x200015b4

08011ea0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011eaa:	4b21      	ldr	r3, [pc, #132]	; (8011f30 <prvAddCurrentTaskToDelayedList+0x90>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011eb0:	4b20      	ldr	r3, [pc, #128]	; (8011f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	3304      	adds	r3, #4
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fd fcc4 	bl	800f844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ec2:	d10a      	bne.n	8011eda <prvAddCurrentTaskToDelayedList+0x3a>
 8011ec4:	683b      	ldr	r3, [r7, #0]
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d007      	beq.n	8011eda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011eca:	4b1a      	ldr	r3, [pc, #104]	; (8011f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	3304      	adds	r3, #4
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	4819      	ldr	r0, [pc, #100]	; (8011f38 <prvAddCurrentTaskToDelayedList+0x98>)
 8011ed4:	f7fd fc59 	bl	800f78a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011ed8:	e026      	b.n	8011f28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011eda:	68fa      	ldr	r2, [r7, #12]
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	4413      	add	r3, r2
 8011ee0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011ee2:	4b14      	ldr	r3, [pc, #80]	; (8011f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	68ba      	ldr	r2, [r7, #8]
 8011ee8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011eea:	68ba      	ldr	r2, [r7, #8]
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	429a      	cmp	r2, r3
 8011ef0:	d209      	bcs.n	8011f06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ef2:	4b12      	ldr	r3, [pc, #72]	; (8011f3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8011ef4:	681a      	ldr	r2, [r3, #0]
 8011ef6:	4b0f      	ldr	r3, [pc, #60]	; (8011f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	3304      	adds	r3, #4
 8011efc:	4619      	mov	r1, r3
 8011efe:	4610      	mov	r0, r2
 8011f00:	f7fd fc67 	bl	800f7d2 <vListInsert>
}
 8011f04:	e010      	b.n	8011f28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f06:	4b0e      	ldr	r3, [pc, #56]	; (8011f40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f08:	681a      	ldr	r2, [r3, #0]
 8011f0a:	4b0a      	ldr	r3, [pc, #40]	; (8011f34 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	3304      	adds	r3, #4
 8011f10:	4619      	mov	r1, r3
 8011f12:	4610      	mov	r0, r2
 8011f14:	f7fd fc5d 	bl	800f7d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f18:	4b0a      	ldr	r3, [pc, #40]	; (8011f44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	68ba      	ldr	r2, [r7, #8]
 8011f1e:	429a      	cmp	r2, r3
 8011f20:	d202      	bcs.n	8011f28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011f22:	4a08      	ldr	r2, [pc, #32]	; (8011f44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	6013      	str	r3, [r2, #0]
}
 8011f28:	bf00      	nop
 8011f2a:	3710      	adds	r7, #16
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	bd80      	pop	{r7, pc}
 8011f30:	200015a4 	.word	0x200015a4
 8011f34:	200010cc 	.word	0x200010cc
 8011f38:	2000158c 	.word	0x2000158c
 8011f3c:	2000155c 	.word	0x2000155c
 8011f40:	20001558 	.word	0x20001558
 8011f44:	200015c0 	.word	0x200015c0

08011f48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b08a      	sub	sp, #40	; 0x28
 8011f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011f4e:	2300      	movs	r3, #0
 8011f50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011f52:	f000 fba1 	bl	8012698 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011f56:	4b1c      	ldr	r3, [pc, #112]	; (8011fc8 <xTimerCreateTimerTask+0x80>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d021      	beq.n	8011fa2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011f62:	2300      	movs	r3, #0
 8011f64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011f66:	1d3a      	adds	r2, r7, #4
 8011f68:	f107 0108 	add.w	r1, r7, #8
 8011f6c:	f107 030c 	add.w	r3, r7, #12
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7fd fbc3 	bl	800f6fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011f76:	6879      	ldr	r1, [r7, #4]
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	68fa      	ldr	r2, [r7, #12]
 8011f7c:	9202      	str	r2, [sp, #8]
 8011f7e:	9301      	str	r3, [sp, #4]
 8011f80:	2302      	movs	r3, #2
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	2300      	movs	r3, #0
 8011f86:	460a      	mov	r2, r1
 8011f88:	4910      	ldr	r1, [pc, #64]	; (8011fcc <xTimerCreateTimerTask+0x84>)
 8011f8a:	4811      	ldr	r0, [pc, #68]	; (8011fd0 <xTimerCreateTimerTask+0x88>)
 8011f8c:	f7fe fd48 	bl	8010a20 <xTaskCreateStatic>
 8011f90:	4603      	mov	r3, r0
 8011f92:	4a10      	ldr	r2, [pc, #64]	; (8011fd4 <xTimerCreateTimerTask+0x8c>)
 8011f94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011f96:	4b0f      	ldr	r3, [pc, #60]	; (8011fd4 <xTimerCreateTimerTask+0x8c>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d001      	beq.n	8011fa2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011f9e:	2301      	movs	r3, #1
 8011fa0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d10a      	bne.n	8011fbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fac:	f383 8811 	msr	BASEPRI, r3
 8011fb0:	f3bf 8f6f 	isb	sy
 8011fb4:	f3bf 8f4f 	dsb	sy
 8011fb8:	613b      	str	r3, [r7, #16]
}
 8011fba:	bf00      	nop
 8011fbc:	e7fe      	b.n	8011fbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011fbe:	697b      	ldr	r3, [r7, #20]
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3718      	adds	r7, #24
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	200015fc 	.word	0x200015fc
 8011fcc:	08015ec4 	.word	0x08015ec4
 8011fd0:	08012241 	.word	0x08012241
 8011fd4:	20001600 	.word	0x20001600

08011fd8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b088      	sub	sp, #32
 8011fdc:	af02      	add	r7, sp, #8
 8011fde:	60f8      	str	r0, [r7, #12]
 8011fe0:	60b9      	str	r1, [r7, #8]
 8011fe2:	607a      	str	r2, [r7, #4]
 8011fe4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8011fe6:	202c      	movs	r0, #44	; 0x2c
 8011fe8:	f000 fe06 	bl	8012bf8 <pvPortMalloc>
 8011fec:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8011fee:	697b      	ldr	r3, [r7, #20]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d00d      	beq.n	8012010 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8011ffc:	697b      	ldr	r3, [r7, #20]
 8011ffe:	9301      	str	r3, [sp, #4]
 8012000:	6a3b      	ldr	r3, [r7, #32]
 8012002:	9300      	str	r3, [sp, #0]
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	687a      	ldr	r2, [r7, #4]
 8012008:	68b9      	ldr	r1, [r7, #8]
 801200a:	68f8      	ldr	r0, [r7, #12]
 801200c:	f000 f843 	bl	8012096 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8012010:	697b      	ldr	r3, [r7, #20]
	}
 8012012:	4618      	mov	r0, r3
 8012014:	3718      	adds	r7, #24
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}

0801201a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801201a:	b580      	push	{r7, lr}
 801201c:	b08a      	sub	sp, #40	; 0x28
 801201e:	af02      	add	r7, sp, #8
 8012020:	60f8      	str	r0, [r7, #12]
 8012022:	60b9      	str	r1, [r7, #8]
 8012024:	607a      	str	r2, [r7, #4]
 8012026:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8012028:	232c      	movs	r3, #44	; 0x2c
 801202a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	2b2c      	cmp	r3, #44	; 0x2c
 8012030:	d00a      	beq.n	8012048 <xTimerCreateStatic+0x2e>
	__asm volatile
 8012032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012036:	f383 8811 	msr	BASEPRI, r3
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	61bb      	str	r3, [r7, #24]
}
 8012044:	bf00      	nop
 8012046:	e7fe      	b.n	8012046 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012048:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204c:	2b00      	cmp	r3, #0
 801204e:	d10a      	bne.n	8012066 <xTimerCreateStatic+0x4c>
	__asm volatile
 8012050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012054:	f383 8811 	msr	BASEPRI, r3
 8012058:	f3bf 8f6f 	isb	sy
 801205c:	f3bf 8f4f 	dsb	sy
 8012060:	617b      	str	r3, [r7, #20]
}
 8012062:	bf00      	nop
 8012064:	e7fe      	b.n	8012064 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8012066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012068:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 801206a:	69fb      	ldr	r3, [r7, #28]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d00d      	beq.n	801208c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	2202      	movs	r2, #2
 8012074:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	9301      	str	r3, [sp, #4]
 801207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207e:	9300      	str	r3, [sp, #0]
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	68b9      	ldr	r1, [r7, #8]
 8012086:	68f8      	ldr	r0, [r7, #12]
 8012088:	f000 f805 	bl	8012096 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 801208c:	69fb      	ldr	r3, [r7, #28]
	}
 801208e:	4618      	mov	r0, r3
 8012090:	3720      	adds	r7, #32
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}

08012096 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8012096:	b580      	push	{r7, lr}
 8012098:	b086      	sub	sp, #24
 801209a:	af00      	add	r7, sp, #0
 801209c:	60f8      	str	r0, [r7, #12]
 801209e:	60b9      	str	r1, [r7, #8]
 80120a0:	607a      	str	r2, [r7, #4]
 80120a2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d10a      	bne.n	80120c0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80120aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ae:	f383 8811 	msr	BASEPRI, r3
 80120b2:	f3bf 8f6f 	isb	sy
 80120b6:	f3bf 8f4f 	dsb	sy
 80120ba:	617b      	str	r3, [r7, #20]
}
 80120bc:	bf00      	nop
 80120be:	e7fe      	b.n	80120be <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80120c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d01e      	beq.n	8012104 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80120c6:	f000 fae7 	bl	8012698 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80120ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120cc:	68fa      	ldr	r2, [r7, #12]
 80120ce:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d2:	68ba      	ldr	r2, [r7, #8]
 80120d4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80120d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d8:	683a      	ldr	r2, [r7, #0]
 80120da:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80120dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120de:	6a3a      	ldr	r2, [r7, #32]
 80120e0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80120e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120e4:	3304      	adds	r3, #4
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fd fb42 	bl	800f770 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d008      	beq.n	8012104 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80120f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80120f8:	f043 0304 	orr.w	r3, r3, #4
 80120fc:	b2da      	uxtb	r2, r3
 80120fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012100:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8012104:	bf00      	nop
 8012106:	3718      	adds	r7, #24
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b08a      	sub	sp, #40	; 0x28
 8012110:	af00      	add	r7, sp, #0
 8012112:	60f8      	str	r0, [r7, #12]
 8012114:	60b9      	str	r1, [r7, #8]
 8012116:	607a      	str	r2, [r7, #4]
 8012118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801211a:	2300      	movs	r3, #0
 801211c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	2b00      	cmp	r3, #0
 8012122:	d10a      	bne.n	801213a <xTimerGenericCommand+0x2e>
	__asm volatile
 8012124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012128:	f383 8811 	msr	BASEPRI, r3
 801212c:	f3bf 8f6f 	isb	sy
 8012130:	f3bf 8f4f 	dsb	sy
 8012134:	623b      	str	r3, [r7, #32]
}
 8012136:	bf00      	nop
 8012138:	e7fe      	b.n	8012138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801213a:	4b1a      	ldr	r3, [pc, #104]	; (80121a4 <xTimerGenericCommand+0x98>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d02a      	beq.n	8012198 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	2b05      	cmp	r3, #5
 8012152:	dc18      	bgt.n	8012186 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012154:	f7ff fb18 	bl	8011788 <xTaskGetSchedulerState>
 8012158:	4603      	mov	r3, r0
 801215a:	2b02      	cmp	r3, #2
 801215c:	d109      	bne.n	8012172 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801215e:	4b11      	ldr	r3, [pc, #68]	; (80121a4 <xTimerGenericCommand+0x98>)
 8012160:	6818      	ldr	r0, [r3, #0]
 8012162:	f107 0110 	add.w	r1, r7, #16
 8012166:	2300      	movs	r3, #0
 8012168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801216a:	f7fd fdf3 	bl	800fd54 <xQueueGenericSend>
 801216e:	6278      	str	r0, [r7, #36]	; 0x24
 8012170:	e012      	b.n	8012198 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012172:	4b0c      	ldr	r3, [pc, #48]	; (80121a4 <xTimerGenericCommand+0x98>)
 8012174:	6818      	ldr	r0, [r3, #0]
 8012176:	f107 0110 	add.w	r1, r7, #16
 801217a:	2300      	movs	r3, #0
 801217c:	2200      	movs	r2, #0
 801217e:	f7fd fde9 	bl	800fd54 <xQueueGenericSend>
 8012182:	6278      	str	r0, [r7, #36]	; 0x24
 8012184:	e008      	b.n	8012198 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012186:	4b07      	ldr	r3, [pc, #28]	; (80121a4 <xTimerGenericCommand+0x98>)
 8012188:	6818      	ldr	r0, [r3, #0]
 801218a:	f107 0110 	add.w	r1, r7, #16
 801218e:	2300      	movs	r3, #0
 8012190:	683a      	ldr	r2, [r7, #0]
 8012192:	f7fd fedd 	bl	800ff50 <xQueueGenericSendFromISR>
 8012196:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801219a:	4618      	mov	r0, r3
 801219c:	3728      	adds	r7, #40	; 0x28
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	200015fc 	.word	0x200015fc

080121a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b088      	sub	sp, #32
 80121ac:	af02      	add	r7, sp, #8
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121b2:	4b22      	ldr	r3, [pc, #136]	; (801223c <prvProcessExpiredTimer+0x94>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	68db      	ldr	r3, [r3, #12]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	3304      	adds	r3, #4
 80121c0:	4618      	mov	r0, r3
 80121c2:	f7fd fb3f 	bl	800f844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80121c6:	697b      	ldr	r3, [r7, #20]
 80121c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121cc:	f003 0304 	and.w	r3, r3, #4
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d022      	beq.n	801221a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	699a      	ldr	r2, [r3, #24]
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	18d1      	adds	r1, r2, r3
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	6978      	ldr	r0, [r7, #20]
 80121e2:	f000 f8d1 	bl	8012388 <prvInsertTimerInActiveList>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d01f      	beq.n	801222c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80121ec:	2300      	movs	r3, #0
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	2300      	movs	r3, #0
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	2100      	movs	r1, #0
 80121f6:	6978      	ldr	r0, [r7, #20]
 80121f8:	f7ff ff88 	bl	801210c <xTimerGenericCommand>
 80121fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d113      	bne.n	801222c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012208:	f383 8811 	msr	BASEPRI, r3
 801220c:	f3bf 8f6f 	isb	sy
 8012210:	f3bf 8f4f 	dsb	sy
 8012214:	60fb      	str	r3, [r7, #12]
}
 8012216:	bf00      	nop
 8012218:	e7fe      	b.n	8012218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012220:	f023 0301 	bic.w	r3, r3, #1
 8012224:	b2da      	uxtb	r2, r3
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801222c:	697b      	ldr	r3, [r7, #20]
 801222e:	6a1b      	ldr	r3, [r3, #32]
 8012230:	6978      	ldr	r0, [r7, #20]
 8012232:	4798      	blx	r3
}
 8012234:	bf00      	nop
 8012236:	3718      	adds	r7, #24
 8012238:	46bd      	mov	sp, r7
 801223a:	bd80      	pop	{r7, pc}
 801223c:	200015f4 	.word	0x200015f4

08012240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012248:	f107 0308 	add.w	r3, r7, #8
 801224c:	4618      	mov	r0, r3
 801224e:	f000 f857 	bl	8012300 <prvGetNextExpireTime>
 8012252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	4619      	mov	r1, r3
 8012258:	68f8      	ldr	r0, [r7, #12]
 801225a:	f000 f803 	bl	8012264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801225e:	f000 f8d5 	bl	801240c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012262:	e7f1      	b.n	8012248 <prvTimerTask+0x8>

08012264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801226e:	f7fe fe7d 	bl	8010f6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012272:	f107 0308 	add.w	r3, r7, #8
 8012276:	4618      	mov	r0, r3
 8012278:	f000 f866 	bl	8012348 <prvSampleTimeNow>
 801227c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d130      	bne.n	80122e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d10a      	bne.n	80122a0 <prvProcessTimerOrBlockTask+0x3c>
 801228a:	687a      	ldr	r2, [r7, #4]
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	429a      	cmp	r2, r3
 8012290:	d806      	bhi.n	80122a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012292:	f7fe fe79 	bl	8010f88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012296:	68f9      	ldr	r1, [r7, #12]
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f7ff ff85 	bl	80121a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801229e:	e024      	b.n	80122ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d008      	beq.n	80122b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80122a6:	4b13      	ldr	r3, [pc, #76]	; (80122f4 <prvProcessTimerOrBlockTask+0x90>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d101      	bne.n	80122b4 <prvProcessTimerOrBlockTask+0x50>
 80122b0:	2301      	movs	r3, #1
 80122b2:	e000      	b.n	80122b6 <prvProcessTimerOrBlockTask+0x52>
 80122b4:	2300      	movs	r3, #0
 80122b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80122b8:	4b0f      	ldr	r3, [pc, #60]	; (80122f8 <prvProcessTimerOrBlockTask+0x94>)
 80122ba:	6818      	ldr	r0, [r3, #0]
 80122bc:	687a      	ldr	r2, [r7, #4]
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	1ad3      	subs	r3, r2, r3
 80122c2:	683a      	ldr	r2, [r7, #0]
 80122c4:	4619      	mov	r1, r3
 80122c6:	f7fe fb77 	bl	80109b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80122ca:	f7fe fe5d 	bl	8010f88 <xTaskResumeAll>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d10a      	bne.n	80122ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80122d4:	4b09      	ldr	r3, [pc, #36]	; (80122fc <prvProcessTimerOrBlockTask+0x98>)
 80122d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122da:	601a      	str	r2, [r3, #0]
 80122dc:	f3bf 8f4f 	dsb	sy
 80122e0:	f3bf 8f6f 	isb	sy
}
 80122e4:	e001      	b.n	80122ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80122e6:	f7fe fe4f 	bl	8010f88 <xTaskResumeAll>
}
 80122ea:	bf00      	nop
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	200015f8 	.word	0x200015f8
 80122f8:	200015fc 	.word	0x200015fc
 80122fc:	e000ed04 	.word	0xe000ed04

08012300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012300:	b480      	push	{r7}
 8012302:	b085      	sub	sp, #20
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012308:	4b0e      	ldr	r3, [pc, #56]	; (8012344 <prvGetNextExpireTime+0x44>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d101      	bne.n	8012316 <prvGetNextExpireTime+0x16>
 8012312:	2201      	movs	r2, #1
 8012314:	e000      	b.n	8012318 <prvGetNextExpireTime+0x18>
 8012316:	2200      	movs	r2, #0
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d105      	bne.n	8012330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012324:	4b07      	ldr	r3, [pc, #28]	; (8012344 <prvGetNextExpireTime+0x44>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	68db      	ldr	r3, [r3, #12]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	60fb      	str	r3, [r7, #12]
 801232e:	e001      	b.n	8012334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012330:	2300      	movs	r3, #0
 8012332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012334:	68fb      	ldr	r3, [r7, #12]
}
 8012336:	4618      	mov	r0, r3
 8012338:	3714      	adds	r7, #20
 801233a:	46bd      	mov	sp, r7
 801233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop
 8012344:	200015f4 	.word	0x200015f4

08012348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b084      	sub	sp, #16
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012350:	f7fe feb8 	bl	80110c4 <xTaskGetTickCount>
 8012354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8012356:	4b0b      	ldr	r3, [pc, #44]	; (8012384 <prvSampleTimeNow+0x3c>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	68fa      	ldr	r2, [r7, #12]
 801235c:	429a      	cmp	r2, r3
 801235e:	d205      	bcs.n	801236c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012360:	f000 f936 	bl	80125d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2201      	movs	r2, #1
 8012368:	601a      	str	r2, [r3, #0]
 801236a:	e002      	b.n	8012372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2200      	movs	r2, #0
 8012370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012372:	4a04      	ldr	r2, [pc, #16]	; (8012384 <prvSampleTimeNow+0x3c>)
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012378:	68fb      	ldr	r3, [r7, #12]
}
 801237a:	4618      	mov	r0, r3
 801237c:	3710      	adds	r7, #16
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	20001604 	.word	0x20001604

08012388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b086      	sub	sp, #24
 801238c:	af00      	add	r7, sp, #0
 801238e:	60f8      	str	r0, [r7, #12]
 8012390:	60b9      	str	r1, [r7, #8]
 8012392:	607a      	str	r2, [r7, #4]
 8012394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012396:	2300      	movs	r3, #0
 8012398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	68ba      	ldr	r2, [r7, #8]
 801239e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	68fa      	ldr	r2, [r7, #12]
 80123a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80123a6:	68ba      	ldr	r2, [r7, #8]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d812      	bhi.n	80123d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123ae:	687a      	ldr	r2, [r7, #4]
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	1ad2      	subs	r2, r2, r3
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	699b      	ldr	r3, [r3, #24]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d302      	bcc.n	80123c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80123bc:	2301      	movs	r3, #1
 80123be:	617b      	str	r3, [r7, #20]
 80123c0:	e01b      	b.n	80123fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80123c2:	4b10      	ldr	r3, [pc, #64]	; (8012404 <prvInsertTimerInActiveList+0x7c>)
 80123c4:	681a      	ldr	r2, [r3, #0]
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	3304      	adds	r3, #4
 80123ca:	4619      	mov	r1, r3
 80123cc:	4610      	mov	r0, r2
 80123ce:	f7fd fa00 	bl	800f7d2 <vListInsert>
 80123d2:	e012      	b.n	80123fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80123d4:	687a      	ldr	r2, [r7, #4]
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d206      	bcs.n	80123ea <prvInsertTimerInActiveList+0x62>
 80123dc:	68ba      	ldr	r2, [r7, #8]
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d302      	bcc.n	80123ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80123e4:	2301      	movs	r3, #1
 80123e6:	617b      	str	r3, [r7, #20]
 80123e8:	e007      	b.n	80123fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80123ea:	4b07      	ldr	r3, [pc, #28]	; (8012408 <prvInsertTimerInActiveList+0x80>)
 80123ec:	681a      	ldr	r2, [r3, #0]
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	3304      	adds	r3, #4
 80123f2:	4619      	mov	r1, r3
 80123f4:	4610      	mov	r0, r2
 80123f6:	f7fd f9ec 	bl	800f7d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80123fa:	697b      	ldr	r3, [r7, #20]
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	200015f8 	.word	0x200015f8
 8012408:	200015f4 	.word	0x200015f4

0801240c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b08e      	sub	sp, #56	; 0x38
 8012410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012412:	e0ca      	b.n	80125aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2b00      	cmp	r3, #0
 8012418:	da18      	bge.n	801244c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801241a:	1d3b      	adds	r3, r7, #4
 801241c:	3304      	adds	r3, #4
 801241e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012422:	2b00      	cmp	r3, #0
 8012424:	d10a      	bne.n	801243c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012426:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242a:	f383 8811 	msr	BASEPRI, r3
 801242e:	f3bf 8f6f 	isb	sy
 8012432:	f3bf 8f4f 	dsb	sy
 8012436:	61fb      	str	r3, [r7, #28]
}
 8012438:	bf00      	nop
 801243a:	e7fe      	b.n	801243a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801243c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012442:	6850      	ldr	r0, [r2, #4]
 8012444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012446:	6892      	ldr	r2, [r2, #8]
 8012448:	4611      	mov	r1, r2
 801244a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	2b00      	cmp	r3, #0
 8012450:	f2c0 80ab 	blt.w	80125aa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801245a:	695b      	ldr	r3, [r3, #20]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d004      	beq.n	801246a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012462:	3304      	adds	r3, #4
 8012464:	4618      	mov	r0, r3
 8012466:	f7fd f9ed 	bl	800f844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801246a:	463b      	mov	r3, r7
 801246c:	4618      	mov	r0, r3
 801246e:	f7ff ff6b 	bl	8012348 <prvSampleTimeNow>
 8012472:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2b09      	cmp	r3, #9
 8012478:	f200 8096 	bhi.w	80125a8 <prvProcessReceivedCommands+0x19c>
 801247c:	a201      	add	r2, pc, #4	; (adr r2, 8012484 <prvProcessReceivedCommands+0x78>)
 801247e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012482:	bf00      	nop
 8012484:	080124ad 	.word	0x080124ad
 8012488:	080124ad 	.word	0x080124ad
 801248c:	080124ad 	.word	0x080124ad
 8012490:	08012521 	.word	0x08012521
 8012494:	08012535 	.word	0x08012535
 8012498:	0801257f 	.word	0x0801257f
 801249c:	080124ad 	.word	0x080124ad
 80124a0:	080124ad 	.word	0x080124ad
 80124a4:	08012521 	.word	0x08012521
 80124a8:	08012535 	.word	0x08012535
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80124ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124b2:	f043 0301 	orr.w	r3, r3, #1
 80124b6:	b2da      	uxtb	r2, r3
 80124b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80124be:	68ba      	ldr	r2, [r7, #8]
 80124c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c2:	699b      	ldr	r3, [r3, #24]
 80124c4:	18d1      	adds	r1, r2, r3
 80124c6:	68bb      	ldr	r3, [r7, #8]
 80124c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124cc:	f7ff ff5c 	bl	8012388 <prvInsertTimerInActiveList>
 80124d0:	4603      	mov	r3, r0
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d069      	beq.n	80125aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d8:	6a1b      	ldr	r3, [r3, #32]
 80124da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80124de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124e4:	f003 0304 	and.w	r3, r3, #4
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d05e      	beq.n	80125aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80124ec:	68ba      	ldr	r2, [r7, #8]
 80124ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f0:	699b      	ldr	r3, [r3, #24]
 80124f2:	441a      	add	r2, r3
 80124f4:	2300      	movs	r3, #0
 80124f6:	9300      	str	r3, [sp, #0]
 80124f8:	2300      	movs	r3, #0
 80124fa:	2100      	movs	r1, #0
 80124fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124fe:	f7ff fe05 	bl	801210c <xTimerGenericCommand>
 8012502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012504:	6a3b      	ldr	r3, [r7, #32]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d14f      	bne.n	80125aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801250a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801250e:	f383 8811 	msr	BASEPRI, r3
 8012512:	f3bf 8f6f 	isb	sy
 8012516:	f3bf 8f4f 	dsb	sy
 801251a:	61bb      	str	r3, [r7, #24]
}
 801251c:	bf00      	nop
 801251e:	e7fe      	b.n	801251e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012526:	f023 0301 	bic.w	r3, r3, #1
 801252a:	b2da      	uxtb	r2, r3
 801252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801252e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012532:	e03a      	b.n	80125aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801253a:	f043 0301 	orr.w	r3, r3, #1
 801253e:	b2da      	uxtb	r2, r3
 8012540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012546:	68ba      	ldr	r2, [r7, #8]
 8012548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801254a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801254e:	699b      	ldr	r3, [r3, #24]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d10a      	bne.n	801256a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012558:	f383 8811 	msr	BASEPRI, r3
 801255c:	f3bf 8f6f 	isb	sy
 8012560:	f3bf 8f4f 	dsb	sy
 8012564:	617b      	str	r3, [r7, #20]
}
 8012566:	bf00      	nop
 8012568:	e7fe      	b.n	8012568 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801256a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801256c:	699a      	ldr	r2, [r3, #24]
 801256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012570:	18d1      	adds	r1, r2, r3
 8012572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012578:	f7ff ff06 	bl	8012388 <prvInsertTimerInActiveList>
					break;
 801257c:	e015      	b.n	80125aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801257e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012584:	f003 0302 	and.w	r3, r3, #2
 8012588:	2b00      	cmp	r3, #0
 801258a:	d103      	bne.n	8012594 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801258c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801258e:	f000 fbff 	bl	8012d90 <vPortFree>
 8012592:	e00a      	b.n	80125aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801259a:	f023 0301 	bic.w	r3, r3, #1
 801259e:	b2da      	uxtb	r2, r3
 80125a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80125a6:	e000      	b.n	80125aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80125a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80125aa:	4b08      	ldr	r3, [pc, #32]	; (80125cc <prvProcessReceivedCommands+0x1c0>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	1d39      	adds	r1, r7, #4
 80125b0:	2200      	movs	r2, #0
 80125b2:	4618      	mov	r0, r3
 80125b4:	f7fd fdf4 	bl	80101a0 <xQueueReceive>
 80125b8:	4603      	mov	r3, r0
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	f47f af2a 	bne.w	8012414 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80125c0:	bf00      	nop
 80125c2:	bf00      	nop
 80125c4:	3730      	adds	r7, #48	; 0x30
 80125c6:	46bd      	mov	sp, r7
 80125c8:	bd80      	pop	{r7, pc}
 80125ca:	bf00      	nop
 80125cc:	200015fc 	.word	0x200015fc

080125d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b088      	sub	sp, #32
 80125d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125d6:	e048      	b.n	801266a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125d8:	4b2d      	ldr	r3, [pc, #180]	; (8012690 <prvSwitchTimerLists+0xc0>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125e2:	4b2b      	ldr	r3, [pc, #172]	; (8012690 <prvSwitchTimerLists+0xc0>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	68db      	ldr	r3, [r3, #12]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	3304      	adds	r3, #4
 80125f0:	4618      	mov	r0, r3
 80125f2:	f7fd f927 	bl	800f844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	6a1b      	ldr	r3, [r3, #32]
 80125fa:	68f8      	ldr	r0, [r7, #12]
 80125fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012604:	f003 0304 	and.w	r3, r3, #4
 8012608:	2b00      	cmp	r3, #0
 801260a:	d02e      	beq.n	801266a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	699b      	ldr	r3, [r3, #24]
 8012610:	693a      	ldr	r2, [r7, #16]
 8012612:	4413      	add	r3, r2
 8012614:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012616:	68ba      	ldr	r2, [r7, #8]
 8012618:	693b      	ldr	r3, [r7, #16]
 801261a:	429a      	cmp	r2, r3
 801261c:	d90e      	bls.n	801263c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	68ba      	ldr	r2, [r7, #8]
 8012622:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801262a:	4b19      	ldr	r3, [pc, #100]	; (8012690 <prvSwitchTimerLists+0xc0>)
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	3304      	adds	r3, #4
 8012632:	4619      	mov	r1, r3
 8012634:	4610      	mov	r0, r2
 8012636:	f7fd f8cc 	bl	800f7d2 <vListInsert>
 801263a:	e016      	b.n	801266a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801263c:	2300      	movs	r3, #0
 801263e:	9300      	str	r3, [sp, #0]
 8012640:	2300      	movs	r3, #0
 8012642:	693a      	ldr	r2, [r7, #16]
 8012644:	2100      	movs	r1, #0
 8012646:	68f8      	ldr	r0, [r7, #12]
 8012648:	f7ff fd60 	bl	801210c <xTimerGenericCommand>
 801264c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d10a      	bne.n	801266a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012658:	f383 8811 	msr	BASEPRI, r3
 801265c:	f3bf 8f6f 	isb	sy
 8012660:	f3bf 8f4f 	dsb	sy
 8012664:	603b      	str	r3, [r7, #0]
}
 8012666:	bf00      	nop
 8012668:	e7fe      	b.n	8012668 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801266a:	4b09      	ldr	r3, [pc, #36]	; (8012690 <prvSwitchTimerLists+0xc0>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d1b1      	bne.n	80125d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012674:	4b06      	ldr	r3, [pc, #24]	; (8012690 <prvSwitchTimerLists+0xc0>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801267a:	4b06      	ldr	r3, [pc, #24]	; (8012694 <prvSwitchTimerLists+0xc4>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	4a04      	ldr	r2, [pc, #16]	; (8012690 <prvSwitchTimerLists+0xc0>)
 8012680:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012682:	4a04      	ldr	r2, [pc, #16]	; (8012694 <prvSwitchTimerLists+0xc4>)
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	6013      	str	r3, [r2, #0]
}
 8012688:	bf00      	nop
 801268a:	3718      	adds	r7, #24
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}
 8012690:	200015f4 	.word	0x200015f4
 8012694:	200015f8 	.word	0x200015f8

08012698 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801269e:	f000 f989 	bl	80129b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80126a2:	4b15      	ldr	r3, [pc, #84]	; (80126f8 <prvCheckForValidListAndQueue+0x60>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d120      	bne.n	80126ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80126aa:	4814      	ldr	r0, [pc, #80]	; (80126fc <prvCheckForValidListAndQueue+0x64>)
 80126ac:	f7fd f840 	bl	800f730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80126b0:	4813      	ldr	r0, [pc, #76]	; (8012700 <prvCheckForValidListAndQueue+0x68>)
 80126b2:	f7fd f83d 	bl	800f730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80126b6:	4b13      	ldr	r3, [pc, #76]	; (8012704 <prvCheckForValidListAndQueue+0x6c>)
 80126b8:	4a10      	ldr	r2, [pc, #64]	; (80126fc <prvCheckForValidListAndQueue+0x64>)
 80126ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80126bc:	4b12      	ldr	r3, [pc, #72]	; (8012708 <prvCheckForValidListAndQueue+0x70>)
 80126be:	4a10      	ldr	r2, [pc, #64]	; (8012700 <prvCheckForValidListAndQueue+0x68>)
 80126c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80126c2:	2300      	movs	r3, #0
 80126c4:	9300      	str	r3, [sp, #0]
 80126c6:	4b11      	ldr	r3, [pc, #68]	; (801270c <prvCheckForValidListAndQueue+0x74>)
 80126c8:	4a11      	ldr	r2, [pc, #68]	; (8012710 <prvCheckForValidListAndQueue+0x78>)
 80126ca:	2110      	movs	r1, #16
 80126cc:	200a      	movs	r0, #10
 80126ce:	f7fd f94b 	bl	800f968 <xQueueGenericCreateStatic>
 80126d2:	4603      	mov	r3, r0
 80126d4:	4a08      	ldr	r2, [pc, #32]	; (80126f8 <prvCheckForValidListAndQueue+0x60>)
 80126d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80126d8:	4b07      	ldr	r3, [pc, #28]	; (80126f8 <prvCheckForValidListAndQueue+0x60>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d005      	beq.n	80126ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80126e0:	4b05      	ldr	r3, [pc, #20]	; (80126f8 <prvCheckForValidListAndQueue+0x60>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	490b      	ldr	r1, [pc, #44]	; (8012714 <prvCheckForValidListAndQueue+0x7c>)
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fe f912 	bl	8010910 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80126ec:	f000 f992 	bl	8012a14 <vPortExitCritical>
}
 80126f0:	bf00      	nop
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd80      	pop	{r7, pc}
 80126f6:	bf00      	nop
 80126f8:	200015fc 	.word	0x200015fc
 80126fc:	200015cc 	.word	0x200015cc
 8012700:	200015e0 	.word	0x200015e0
 8012704:	200015f4 	.word	0x200015f4
 8012708:	200015f8 	.word	0x200015f8
 801270c:	200016a8 	.word	0x200016a8
 8012710:	20001608 	.word	0x20001608
 8012714:	08015ecc 	.word	0x08015ecc

08012718 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b086      	sub	sp, #24
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d10a      	bne.n	8012740 <pvTimerGetTimerID+0x28>
	__asm volatile
 801272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801272e:	f383 8811 	msr	BASEPRI, r3
 8012732:	f3bf 8f6f 	isb	sy
 8012736:	f3bf 8f4f 	dsb	sy
 801273a:	60fb      	str	r3, [r7, #12]
}
 801273c:	bf00      	nop
 801273e:	e7fe      	b.n	801273e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8012740:	f000 f938 	bl	80129b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	69db      	ldr	r3, [r3, #28]
 8012748:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801274a:	f000 f963 	bl	8012a14 <vPortExitCritical>

	return pvReturn;
 801274e:	693b      	ldr	r3, [r7, #16]
}
 8012750:	4618      	mov	r0, r3
 8012752:	3718      	adds	r7, #24
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012758:	b480      	push	{r7}
 801275a:	b085      	sub	sp, #20
 801275c:	af00      	add	r7, sp, #0
 801275e:	60f8      	str	r0, [r7, #12]
 8012760:	60b9      	str	r1, [r7, #8]
 8012762:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	3b04      	subs	r3, #4
 8012768:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	3b04      	subs	r3, #4
 8012776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	f023 0201 	bic.w	r2, r3, #1
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	3b04      	subs	r3, #4
 8012786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012788:	4a0c      	ldr	r2, [pc, #48]	; (80127bc <pxPortInitialiseStack+0x64>)
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	3b14      	subs	r3, #20
 8012792:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012794:	687a      	ldr	r2, [r7, #4]
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	3b04      	subs	r3, #4
 801279e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	f06f 0202 	mvn.w	r2, #2
 80127a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	3b20      	subs	r3, #32
 80127ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80127ae:	68fb      	ldr	r3, [r7, #12]
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	3714      	adds	r7, #20
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr
 80127bc:	080127c1 	.word	0x080127c1

080127c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80127c0:	b480      	push	{r7}
 80127c2:	b085      	sub	sp, #20
 80127c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80127c6:	2300      	movs	r3, #0
 80127c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80127ca:	4b12      	ldr	r3, [pc, #72]	; (8012814 <prvTaskExitError+0x54>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127d2:	d00a      	beq.n	80127ea <prvTaskExitError+0x2a>
	__asm volatile
 80127d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d8:	f383 8811 	msr	BASEPRI, r3
 80127dc:	f3bf 8f6f 	isb	sy
 80127e0:	f3bf 8f4f 	dsb	sy
 80127e4:	60fb      	str	r3, [r7, #12]
}
 80127e6:	bf00      	nop
 80127e8:	e7fe      	b.n	80127e8 <prvTaskExitError+0x28>
	__asm volatile
 80127ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ee:	f383 8811 	msr	BASEPRI, r3
 80127f2:	f3bf 8f6f 	isb	sy
 80127f6:	f3bf 8f4f 	dsb	sy
 80127fa:	60bb      	str	r3, [r7, #8]
}
 80127fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80127fe:	bf00      	nop
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d0fc      	beq.n	8012800 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012806:	bf00      	nop
 8012808:	bf00      	nop
 801280a:	3714      	adds	r7, #20
 801280c:	46bd      	mov	sp, r7
 801280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012812:	4770      	bx	lr
 8012814:	2000002c 	.word	0x2000002c
	...

08012820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012820:	4b07      	ldr	r3, [pc, #28]	; (8012840 <pxCurrentTCBConst2>)
 8012822:	6819      	ldr	r1, [r3, #0]
 8012824:	6808      	ldr	r0, [r1, #0]
 8012826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801282a:	f380 8809 	msr	PSP, r0
 801282e:	f3bf 8f6f 	isb	sy
 8012832:	f04f 0000 	mov.w	r0, #0
 8012836:	f380 8811 	msr	BASEPRI, r0
 801283a:	4770      	bx	lr
 801283c:	f3af 8000 	nop.w

08012840 <pxCurrentTCBConst2>:
 8012840:	200010cc 	.word	0x200010cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012844:	bf00      	nop
 8012846:	bf00      	nop

08012848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012848:	4808      	ldr	r0, [pc, #32]	; (801286c <prvPortStartFirstTask+0x24>)
 801284a:	6800      	ldr	r0, [r0, #0]
 801284c:	6800      	ldr	r0, [r0, #0]
 801284e:	f380 8808 	msr	MSP, r0
 8012852:	f04f 0000 	mov.w	r0, #0
 8012856:	f380 8814 	msr	CONTROL, r0
 801285a:	b662      	cpsie	i
 801285c:	b661      	cpsie	f
 801285e:	f3bf 8f4f 	dsb	sy
 8012862:	f3bf 8f6f 	isb	sy
 8012866:	df00      	svc	0
 8012868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801286a:	bf00      	nop
 801286c:	e000ed08 	.word	0xe000ed08

08012870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b086      	sub	sp, #24
 8012874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012876:	4b46      	ldr	r3, [pc, #280]	; (8012990 <xPortStartScheduler+0x120>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	4a46      	ldr	r2, [pc, #280]	; (8012994 <xPortStartScheduler+0x124>)
 801287c:	4293      	cmp	r3, r2
 801287e:	d10a      	bne.n	8012896 <xPortStartScheduler+0x26>
	__asm volatile
 8012880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012884:	f383 8811 	msr	BASEPRI, r3
 8012888:	f3bf 8f6f 	isb	sy
 801288c:	f3bf 8f4f 	dsb	sy
 8012890:	613b      	str	r3, [r7, #16]
}
 8012892:	bf00      	nop
 8012894:	e7fe      	b.n	8012894 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012896:	4b3e      	ldr	r3, [pc, #248]	; (8012990 <xPortStartScheduler+0x120>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4a3f      	ldr	r2, [pc, #252]	; (8012998 <xPortStartScheduler+0x128>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d10a      	bne.n	80128b6 <xPortStartScheduler+0x46>
	__asm volatile
 80128a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128a4:	f383 8811 	msr	BASEPRI, r3
 80128a8:	f3bf 8f6f 	isb	sy
 80128ac:	f3bf 8f4f 	dsb	sy
 80128b0:	60fb      	str	r3, [r7, #12]
}
 80128b2:	bf00      	nop
 80128b4:	e7fe      	b.n	80128b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80128b6:	4b39      	ldr	r3, [pc, #228]	; (801299c <xPortStartScheduler+0x12c>)
 80128b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	781b      	ldrb	r3, [r3, #0]
 80128be:	b2db      	uxtb	r3, r3
 80128c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	22ff      	movs	r2, #255	; 0xff
 80128c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80128d0:	78fb      	ldrb	r3, [r7, #3]
 80128d2:	b2db      	uxtb	r3, r3
 80128d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80128d8:	b2da      	uxtb	r2, r3
 80128da:	4b31      	ldr	r3, [pc, #196]	; (80129a0 <xPortStartScheduler+0x130>)
 80128dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80128de:	4b31      	ldr	r3, [pc, #196]	; (80129a4 <xPortStartScheduler+0x134>)
 80128e0:	2207      	movs	r2, #7
 80128e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80128e4:	e009      	b.n	80128fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80128e6:	4b2f      	ldr	r3, [pc, #188]	; (80129a4 <xPortStartScheduler+0x134>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	3b01      	subs	r3, #1
 80128ec:	4a2d      	ldr	r2, [pc, #180]	; (80129a4 <xPortStartScheduler+0x134>)
 80128ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80128f0:	78fb      	ldrb	r3, [r7, #3]
 80128f2:	b2db      	uxtb	r3, r3
 80128f4:	005b      	lsls	r3, r3, #1
 80128f6:	b2db      	uxtb	r3, r3
 80128f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80128fa:	78fb      	ldrb	r3, [r7, #3]
 80128fc:	b2db      	uxtb	r3, r3
 80128fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012902:	2b80      	cmp	r3, #128	; 0x80
 8012904:	d0ef      	beq.n	80128e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012906:	4b27      	ldr	r3, [pc, #156]	; (80129a4 <xPortStartScheduler+0x134>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	f1c3 0307 	rsb	r3, r3, #7
 801290e:	2b04      	cmp	r3, #4
 8012910:	d00a      	beq.n	8012928 <xPortStartScheduler+0xb8>
	__asm volatile
 8012912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012916:	f383 8811 	msr	BASEPRI, r3
 801291a:	f3bf 8f6f 	isb	sy
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	60bb      	str	r3, [r7, #8]
}
 8012924:	bf00      	nop
 8012926:	e7fe      	b.n	8012926 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012928:	4b1e      	ldr	r3, [pc, #120]	; (80129a4 <xPortStartScheduler+0x134>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	021b      	lsls	r3, r3, #8
 801292e:	4a1d      	ldr	r2, [pc, #116]	; (80129a4 <xPortStartScheduler+0x134>)
 8012930:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012932:	4b1c      	ldr	r3, [pc, #112]	; (80129a4 <xPortStartScheduler+0x134>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801293a:	4a1a      	ldr	r2, [pc, #104]	; (80129a4 <xPortStartScheduler+0x134>)
 801293c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	b2da      	uxtb	r2, r3
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012946:	4b18      	ldr	r3, [pc, #96]	; (80129a8 <xPortStartScheduler+0x138>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	4a17      	ldr	r2, [pc, #92]	; (80129a8 <xPortStartScheduler+0x138>)
 801294c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012952:	4b15      	ldr	r3, [pc, #84]	; (80129a8 <xPortStartScheduler+0x138>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	4a14      	ldr	r2, [pc, #80]	; (80129a8 <xPortStartScheduler+0x138>)
 8012958:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801295c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801295e:	f000 f8dd 	bl	8012b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012962:	4b12      	ldr	r3, [pc, #72]	; (80129ac <xPortStartScheduler+0x13c>)
 8012964:	2200      	movs	r2, #0
 8012966:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012968:	f000 f8fc 	bl	8012b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801296c:	4b10      	ldr	r3, [pc, #64]	; (80129b0 <xPortStartScheduler+0x140>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a0f      	ldr	r2, [pc, #60]	; (80129b0 <xPortStartScheduler+0x140>)
 8012972:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012976:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012978:	f7ff ff66 	bl	8012848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801297c:	f7fe fc7e 	bl	801127c <vTaskSwitchContext>
	prvTaskExitError();
 8012980:	f7ff ff1e 	bl	80127c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012984:	2300      	movs	r3, #0
}
 8012986:	4618      	mov	r0, r3
 8012988:	3718      	adds	r7, #24
 801298a:	46bd      	mov	sp, r7
 801298c:	bd80      	pop	{r7, pc}
 801298e:	bf00      	nop
 8012990:	e000ed00 	.word	0xe000ed00
 8012994:	410fc271 	.word	0x410fc271
 8012998:	410fc270 	.word	0x410fc270
 801299c:	e000e400 	.word	0xe000e400
 80129a0:	200016f8 	.word	0x200016f8
 80129a4:	200016fc 	.word	0x200016fc
 80129a8:	e000ed20 	.word	0xe000ed20
 80129ac:	2000002c 	.word	0x2000002c
 80129b0:	e000ef34 	.word	0xe000ef34

080129b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80129b4:	b480      	push	{r7}
 80129b6:	b083      	sub	sp, #12
 80129b8:	af00      	add	r7, sp, #0
	__asm volatile
 80129ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129be:	f383 8811 	msr	BASEPRI, r3
 80129c2:	f3bf 8f6f 	isb	sy
 80129c6:	f3bf 8f4f 	dsb	sy
 80129ca:	607b      	str	r3, [r7, #4]
}
 80129cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80129ce:	4b0f      	ldr	r3, [pc, #60]	; (8012a0c <vPortEnterCritical+0x58>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	3301      	adds	r3, #1
 80129d4:	4a0d      	ldr	r2, [pc, #52]	; (8012a0c <vPortEnterCritical+0x58>)
 80129d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80129d8:	4b0c      	ldr	r3, [pc, #48]	; (8012a0c <vPortEnterCritical+0x58>)
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d10f      	bne.n	8012a00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80129e0:	4b0b      	ldr	r3, [pc, #44]	; (8012a10 <vPortEnterCritical+0x5c>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d00a      	beq.n	8012a00 <vPortEnterCritical+0x4c>
	__asm volatile
 80129ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ee:	f383 8811 	msr	BASEPRI, r3
 80129f2:	f3bf 8f6f 	isb	sy
 80129f6:	f3bf 8f4f 	dsb	sy
 80129fa:	603b      	str	r3, [r7, #0]
}
 80129fc:	bf00      	nop
 80129fe:	e7fe      	b.n	80129fe <vPortEnterCritical+0x4a>
	}
}
 8012a00:	bf00      	nop
 8012a02:	370c      	adds	r7, #12
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr
 8012a0c:	2000002c 	.word	0x2000002c
 8012a10:	e000ed04 	.word	0xe000ed04

08012a14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012a1a:	4b12      	ldr	r3, [pc, #72]	; (8012a64 <vPortExitCritical+0x50>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d10a      	bne.n	8012a38 <vPortExitCritical+0x24>
	__asm volatile
 8012a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a26:	f383 8811 	msr	BASEPRI, r3
 8012a2a:	f3bf 8f6f 	isb	sy
 8012a2e:	f3bf 8f4f 	dsb	sy
 8012a32:	607b      	str	r3, [r7, #4]
}
 8012a34:	bf00      	nop
 8012a36:	e7fe      	b.n	8012a36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012a38:	4b0a      	ldr	r3, [pc, #40]	; (8012a64 <vPortExitCritical+0x50>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	3b01      	subs	r3, #1
 8012a3e:	4a09      	ldr	r2, [pc, #36]	; (8012a64 <vPortExitCritical+0x50>)
 8012a40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012a42:	4b08      	ldr	r3, [pc, #32]	; (8012a64 <vPortExitCritical+0x50>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d105      	bne.n	8012a56 <vPortExitCritical+0x42>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	f383 8811 	msr	BASEPRI, r3
}
 8012a54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012a56:	bf00      	nop
 8012a58:	370c      	adds	r7, #12
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a60:	4770      	bx	lr
 8012a62:	bf00      	nop
 8012a64:	2000002c 	.word	0x2000002c
	...

08012a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012a70:	f3ef 8009 	mrs	r0, PSP
 8012a74:	f3bf 8f6f 	isb	sy
 8012a78:	4b15      	ldr	r3, [pc, #84]	; (8012ad0 <pxCurrentTCBConst>)
 8012a7a:	681a      	ldr	r2, [r3, #0]
 8012a7c:	f01e 0f10 	tst.w	lr, #16
 8012a80:	bf08      	it	eq
 8012a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a8a:	6010      	str	r0, [r2, #0]
 8012a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012a94:	f380 8811 	msr	BASEPRI, r0
 8012a98:	f3bf 8f4f 	dsb	sy
 8012a9c:	f3bf 8f6f 	isb	sy
 8012aa0:	f7fe fbec 	bl	801127c <vTaskSwitchContext>
 8012aa4:	f04f 0000 	mov.w	r0, #0
 8012aa8:	f380 8811 	msr	BASEPRI, r0
 8012aac:	bc09      	pop	{r0, r3}
 8012aae:	6819      	ldr	r1, [r3, #0]
 8012ab0:	6808      	ldr	r0, [r1, #0]
 8012ab2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ab6:	f01e 0f10 	tst.w	lr, #16
 8012aba:	bf08      	it	eq
 8012abc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012ac0:	f380 8809 	msr	PSP, r0
 8012ac4:	f3bf 8f6f 	isb	sy
 8012ac8:	4770      	bx	lr
 8012aca:	bf00      	nop
 8012acc:	f3af 8000 	nop.w

08012ad0 <pxCurrentTCBConst>:
 8012ad0:	200010cc 	.word	0x200010cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ad4:	bf00      	nop
 8012ad6:	bf00      	nop

08012ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
	__asm volatile
 8012ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae2:	f383 8811 	msr	BASEPRI, r3
 8012ae6:	f3bf 8f6f 	isb	sy
 8012aea:	f3bf 8f4f 	dsb	sy
 8012aee:	607b      	str	r3, [r7, #4]
}
 8012af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012af2:	f7fe fb09 	bl	8011108 <xTaskIncrementTick>
 8012af6:	4603      	mov	r3, r0
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d003      	beq.n	8012b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012afc:	4b06      	ldr	r3, [pc, #24]	; (8012b18 <xPortSysTickHandler+0x40>)
 8012afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b02:	601a      	str	r2, [r3, #0]
 8012b04:	2300      	movs	r3, #0
 8012b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	f383 8811 	msr	BASEPRI, r3
}
 8012b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012b10:	bf00      	nop
 8012b12:	3708      	adds	r7, #8
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	e000ed04 	.word	0xe000ed04

08012b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012b1c:	b480      	push	{r7}
 8012b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012b20:	4b0b      	ldr	r3, [pc, #44]	; (8012b50 <vPortSetupTimerInterrupt+0x34>)
 8012b22:	2200      	movs	r2, #0
 8012b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012b26:	4b0b      	ldr	r3, [pc, #44]	; (8012b54 <vPortSetupTimerInterrupt+0x38>)
 8012b28:	2200      	movs	r2, #0
 8012b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012b2c:	4b0a      	ldr	r3, [pc, #40]	; (8012b58 <vPortSetupTimerInterrupt+0x3c>)
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4a0a      	ldr	r2, [pc, #40]	; (8012b5c <vPortSetupTimerInterrupt+0x40>)
 8012b32:	fba2 2303 	umull	r2, r3, r2, r3
 8012b36:	099b      	lsrs	r3, r3, #6
 8012b38:	4a09      	ldr	r2, [pc, #36]	; (8012b60 <vPortSetupTimerInterrupt+0x44>)
 8012b3a:	3b01      	subs	r3, #1
 8012b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012b3e:	4b04      	ldr	r3, [pc, #16]	; (8012b50 <vPortSetupTimerInterrupt+0x34>)
 8012b40:	2207      	movs	r2, #7
 8012b42:	601a      	str	r2, [r3, #0]
}
 8012b44:	bf00      	nop
 8012b46:	46bd      	mov	sp, r7
 8012b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4c:	4770      	bx	lr
 8012b4e:	bf00      	nop
 8012b50:	e000e010 	.word	0xe000e010
 8012b54:	e000e018 	.word	0xe000e018
 8012b58:	20000008 	.word	0x20000008
 8012b5c:	10624dd3 	.word	0x10624dd3
 8012b60:	e000e014 	.word	0xe000e014

08012b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012b74 <vPortEnableVFP+0x10>
 8012b68:	6801      	ldr	r1, [r0, #0]
 8012b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012b6e:	6001      	str	r1, [r0, #0]
 8012b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012b72:	bf00      	nop
 8012b74:	e000ed88 	.word	0xe000ed88

08012b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012b78:	b480      	push	{r7}
 8012b7a:	b085      	sub	sp, #20
 8012b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012b7e:	f3ef 8305 	mrs	r3, IPSR
 8012b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	2b0f      	cmp	r3, #15
 8012b88:	d914      	bls.n	8012bb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012b8a:	4a17      	ldr	r2, [pc, #92]	; (8012be8 <vPortValidateInterruptPriority+0x70>)
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	4413      	add	r3, r2
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012b94:	4b15      	ldr	r3, [pc, #84]	; (8012bec <vPortValidateInterruptPriority+0x74>)
 8012b96:	781b      	ldrb	r3, [r3, #0]
 8012b98:	7afa      	ldrb	r2, [r7, #11]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d20a      	bcs.n	8012bb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba2:	f383 8811 	msr	BASEPRI, r3
 8012ba6:	f3bf 8f6f 	isb	sy
 8012baa:	f3bf 8f4f 	dsb	sy
 8012bae:	607b      	str	r3, [r7, #4]
}
 8012bb0:	bf00      	nop
 8012bb2:	e7fe      	b.n	8012bb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012bb4:	4b0e      	ldr	r3, [pc, #56]	; (8012bf0 <vPortValidateInterruptPriority+0x78>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012bbc:	4b0d      	ldr	r3, [pc, #52]	; (8012bf4 <vPortValidateInterruptPriority+0x7c>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d90a      	bls.n	8012bda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc8:	f383 8811 	msr	BASEPRI, r3
 8012bcc:	f3bf 8f6f 	isb	sy
 8012bd0:	f3bf 8f4f 	dsb	sy
 8012bd4:	603b      	str	r3, [r7, #0]
}
 8012bd6:	bf00      	nop
 8012bd8:	e7fe      	b.n	8012bd8 <vPortValidateInterruptPriority+0x60>
	}
 8012bda:	bf00      	nop
 8012bdc:	3714      	adds	r7, #20
 8012bde:	46bd      	mov	sp, r7
 8012be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be4:	4770      	bx	lr
 8012be6:	bf00      	nop
 8012be8:	e000e3f0 	.word	0xe000e3f0
 8012bec:	200016f8 	.word	0x200016f8
 8012bf0:	e000ed0c 	.word	0xe000ed0c
 8012bf4:	200016fc 	.word	0x200016fc

08012bf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b08a      	sub	sp, #40	; 0x28
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012c00:	2300      	movs	r3, #0
 8012c02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012c04:	f7fe f9b2 	bl	8010f6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012c08:	4b5b      	ldr	r3, [pc, #364]	; (8012d78 <pvPortMalloc+0x180>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d101      	bne.n	8012c14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012c10:	f000 f920 	bl	8012e54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012c14:	4b59      	ldr	r3, [pc, #356]	; (8012d7c <pvPortMalloc+0x184>)
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	4013      	ands	r3, r2
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	f040 8093 	bne.w	8012d48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d01d      	beq.n	8012c64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012c28:	2208      	movs	r2, #8
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f003 0307 	and.w	r3, r3, #7
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d014      	beq.n	8012c64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	f023 0307 	bic.w	r3, r3, #7
 8012c40:	3308      	adds	r3, #8
 8012c42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f003 0307 	and.w	r3, r3, #7
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d00a      	beq.n	8012c64 <pvPortMalloc+0x6c>
	__asm volatile
 8012c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c52:	f383 8811 	msr	BASEPRI, r3
 8012c56:	f3bf 8f6f 	isb	sy
 8012c5a:	f3bf 8f4f 	dsb	sy
 8012c5e:	617b      	str	r3, [r7, #20]
}
 8012c60:	bf00      	nop
 8012c62:	e7fe      	b.n	8012c62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d06e      	beq.n	8012d48 <pvPortMalloc+0x150>
 8012c6a:	4b45      	ldr	r3, [pc, #276]	; (8012d80 <pvPortMalloc+0x188>)
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	687a      	ldr	r2, [r7, #4]
 8012c70:	429a      	cmp	r2, r3
 8012c72:	d869      	bhi.n	8012d48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012c74:	4b43      	ldr	r3, [pc, #268]	; (8012d84 <pvPortMalloc+0x18c>)
 8012c76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012c78:	4b42      	ldr	r3, [pc, #264]	; (8012d84 <pvPortMalloc+0x18c>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c7e:	e004      	b.n	8012c8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	429a      	cmp	r2, r3
 8012c92:	d903      	bls.n	8012c9c <pvPortMalloc+0xa4>
 8012c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d1f1      	bne.n	8012c80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012c9c:	4b36      	ldr	r3, [pc, #216]	; (8012d78 <pvPortMalloc+0x180>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d050      	beq.n	8012d48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012ca6:	6a3b      	ldr	r3, [r7, #32]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2208      	movs	r2, #8
 8012cac:	4413      	add	r3, r2
 8012cae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb2:	681a      	ldr	r2, [r3, #0]
 8012cb4:	6a3b      	ldr	r3, [r7, #32]
 8012cb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cba:	685a      	ldr	r2, [r3, #4]
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	1ad2      	subs	r2, r2, r3
 8012cc0:	2308      	movs	r3, #8
 8012cc2:	005b      	lsls	r3, r3, #1
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d91f      	bls.n	8012d08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	4413      	add	r3, r2
 8012cce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	f003 0307 	and.w	r3, r3, #7
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d00a      	beq.n	8012cf0 <pvPortMalloc+0xf8>
	__asm volatile
 8012cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cde:	f383 8811 	msr	BASEPRI, r3
 8012ce2:	f3bf 8f6f 	isb	sy
 8012ce6:	f3bf 8f4f 	dsb	sy
 8012cea:	613b      	str	r3, [r7, #16]
}
 8012cec:	bf00      	nop
 8012cee:	e7fe      	b.n	8012cee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf2:	685a      	ldr	r2, [r3, #4]
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	1ad2      	subs	r2, r2, r3
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012d02:	69b8      	ldr	r0, [r7, #24]
 8012d04:	f000 f908 	bl	8012f18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012d08:	4b1d      	ldr	r3, [pc, #116]	; (8012d80 <pvPortMalloc+0x188>)
 8012d0a:	681a      	ldr	r2, [r3, #0]
 8012d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0e:	685b      	ldr	r3, [r3, #4]
 8012d10:	1ad3      	subs	r3, r2, r3
 8012d12:	4a1b      	ldr	r2, [pc, #108]	; (8012d80 <pvPortMalloc+0x188>)
 8012d14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012d16:	4b1a      	ldr	r3, [pc, #104]	; (8012d80 <pvPortMalloc+0x188>)
 8012d18:	681a      	ldr	r2, [r3, #0]
 8012d1a:	4b1b      	ldr	r3, [pc, #108]	; (8012d88 <pvPortMalloc+0x190>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d203      	bcs.n	8012d2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012d22:	4b17      	ldr	r3, [pc, #92]	; (8012d80 <pvPortMalloc+0x188>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	4a18      	ldr	r2, [pc, #96]	; (8012d88 <pvPortMalloc+0x190>)
 8012d28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d2c:	685a      	ldr	r2, [r3, #4]
 8012d2e:	4b13      	ldr	r3, [pc, #76]	; (8012d7c <pvPortMalloc+0x184>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	431a      	orrs	r2, r3
 8012d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012d3e:	4b13      	ldr	r3, [pc, #76]	; (8012d8c <pvPortMalloc+0x194>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	3301      	adds	r3, #1
 8012d44:	4a11      	ldr	r2, [pc, #68]	; (8012d8c <pvPortMalloc+0x194>)
 8012d46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012d48:	f7fe f91e 	bl	8010f88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d4c:	69fb      	ldr	r3, [r7, #28]
 8012d4e:	f003 0307 	and.w	r3, r3, #7
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00a      	beq.n	8012d6c <pvPortMalloc+0x174>
	__asm volatile
 8012d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d5a:	f383 8811 	msr	BASEPRI, r3
 8012d5e:	f3bf 8f6f 	isb	sy
 8012d62:	f3bf 8f4f 	dsb	sy
 8012d66:	60fb      	str	r3, [r7, #12]
}
 8012d68:	bf00      	nop
 8012d6a:	e7fe      	b.n	8012d6a <pvPortMalloc+0x172>
	return pvReturn;
 8012d6c:	69fb      	ldr	r3, [r7, #28]
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3728      	adds	r7, #40	; 0x28
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}
 8012d76:	bf00      	nop
 8012d78:	2000da58 	.word	0x2000da58
 8012d7c:	2000da6c 	.word	0x2000da6c
 8012d80:	2000da5c 	.word	0x2000da5c
 8012d84:	2000da50 	.word	0x2000da50
 8012d88:	2000da60 	.word	0x2000da60
 8012d8c:	2000da64 	.word	0x2000da64

08012d90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b086      	sub	sp, #24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d04d      	beq.n	8012e3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012da2:	2308      	movs	r3, #8
 8012da4:	425b      	negs	r3, r3
 8012da6:	697a      	ldr	r2, [r7, #20]
 8012da8:	4413      	add	r3, r2
 8012daa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012dac:	697b      	ldr	r3, [r7, #20]
 8012dae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	685a      	ldr	r2, [r3, #4]
 8012db4:	4b24      	ldr	r3, [pc, #144]	; (8012e48 <vPortFree+0xb8>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	4013      	ands	r3, r2
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d10a      	bne.n	8012dd4 <vPortFree+0x44>
	__asm volatile
 8012dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc2:	f383 8811 	msr	BASEPRI, r3
 8012dc6:	f3bf 8f6f 	isb	sy
 8012dca:	f3bf 8f4f 	dsb	sy
 8012dce:	60fb      	str	r3, [r7, #12]
}
 8012dd0:	bf00      	nop
 8012dd2:	e7fe      	b.n	8012dd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d00a      	beq.n	8012df2 <vPortFree+0x62>
	__asm volatile
 8012ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de0:	f383 8811 	msr	BASEPRI, r3
 8012de4:	f3bf 8f6f 	isb	sy
 8012de8:	f3bf 8f4f 	dsb	sy
 8012dec:	60bb      	str	r3, [r7, #8]
}
 8012dee:	bf00      	nop
 8012df0:	e7fe      	b.n	8012df0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	685a      	ldr	r2, [r3, #4]
 8012df6:	4b14      	ldr	r3, [pc, #80]	; (8012e48 <vPortFree+0xb8>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	4013      	ands	r3, r2
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d01e      	beq.n	8012e3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012e00:	693b      	ldr	r3, [r7, #16]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d11a      	bne.n	8012e3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012e08:	693b      	ldr	r3, [r7, #16]
 8012e0a:	685a      	ldr	r2, [r3, #4]
 8012e0c:	4b0e      	ldr	r3, [pc, #56]	; (8012e48 <vPortFree+0xb8>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	43db      	mvns	r3, r3
 8012e12:	401a      	ands	r2, r3
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012e18:	f7fe f8a8 	bl	8010f6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	685a      	ldr	r2, [r3, #4]
 8012e20:	4b0a      	ldr	r3, [pc, #40]	; (8012e4c <vPortFree+0xbc>)
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	4413      	add	r3, r2
 8012e26:	4a09      	ldr	r2, [pc, #36]	; (8012e4c <vPortFree+0xbc>)
 8012e28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012e2a:	6938      	ldr	r0, [r7, #16]
 8012e2c:	f000 f874 	bl	8012f18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012e30:	4b07      	ldr	r3, [pc, #28]	; (8012e50 <vPortFree+0xc0>)
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	3301      	adds	r3, #1
 8012e36:	4a06      	ldr	r2, [pc, #24]	; (8012e50 <vPortFree+0xc0>)
 8012e38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012e3a:	f7fe f8a5 	bl	8010f88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012e3e:	bf00      	nop
 8012e40:	3718      	adds	r7, #24
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
 8012e46:	bf00      	nop
 8012e48:	2000da6c 	.word	0x2000da6c
 8012e4c:	2000da5c 	.word	0x2000da5c
 8012e50:	2000da68 	.word	0x2000da68

08012e54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012e54:	b480      	push	{r7}
 8012e56:	b085      	sub	sp, #20
 8012e58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012e5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012e5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012e60:	4b27      	ldr	r3, [pc, #156]	; (8012f00 <prvHeapInit+0xac>)
 8012e62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f003 0307 	and.w	r3, r3, #7
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d00c      	beq.n	8012e88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	3307      	adds	r3, #7
 8012e72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	f023 0307 	bic.w	r3, r3, #7
 8012e7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012e7c:	68ba      	ldr	r2, [r7, #8]
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	1ad3      	subs	r3, r2, r3
 8012e82:	4a1f      	ldr	r2, [pc, #124]	; (8012f00 <prvHeapInit+0xac>)
 8012e84:	4413      	add	r3, r2
 8012e86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012e8c:	4a1d      	ldr	r2, [pc, #116]	; (8012f04 <prvHeapInit+0xb0>)
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012e92:	4b1c      	ldr	r3, [pc, #112]	; (8012f04 <prvHeapInit+0xb0>)
 8012e94:	2200      	movs	r2, #0
 8012e96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	68ba      	ldr	r2, [r7, #8]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012ea0:	2208      	movs	r2, #8
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	1a9b      	subs	r3, r3, r2
 8012ea6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	f023 0307 	bic.w	r3, r3, #7
 8012eae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	4a15      	ldr	r2, [pc, #84]	; (8012f08 <prvHeapInit+0xb4>)
 8012eb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012eb6:	4b14      	ldr	r3, [pc, #80]	; (8012f08 <prvHeapInit+0xb4>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	2200      	movs	r2, #0
 8012ebc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012ebe:	4b12      	ldr	r3, [pc, #72]	; (8012f08 <prvHeapInit+0xb4>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	68fa      	ldr	r2, [r7, #12]
 8012ece:	1ad2      	subs	r2, r2, r3
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012ed4:	4b0c      	ldr	r3, [pc, #48]	; (8012f08 <prvHeapInit+0xb4>)
 8012ed6:	681a      	ldr	r2, [r3, #0]
 8012ed8:	683b      	ldr	r3, [r7, #0]
 8012eda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	4a0a      	ldr	r2, [pc, #40]	; (8012f0c <prvHeapInit+0xb8>)
 8012ee2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	685b      	ldr	r3, [r3, #4]
 8012ee8:	4a09      	ldr	r2, [pc, #36]	; (8012f10 <prvHeapInit+0xbc>)
 8012eea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012eec:	4b09      	ldr	r3, [pc, #36]	; (8012f14 <prvHeapInit+0xc0>)
 8012eee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012ef2:	601a      	str	r2, [r3, #0]
}
 8012ef4:	bf00      	nop
 8012ef6:	3714      	adds	r7, #20
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efe:	4770      	bx	lr
 8012f00:	20001700 	.word	0x20001700
 8012f04:	2000da50 	.word	0x2000da50
 8012f08:	2000da58 	.word	0x2000da58
 8012f0c:	2000da60 	.word	0x2000da60
 8012f10:	2000da5c 	.word	0x2000da5c
 8012f14:	2000da6c 	.word	0x2000da6c

08012f18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012f18:	b480      	push	{r7}
 8012f1a:	b085      	sub	sp, #20
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012f20:	4b28      	ldr	r3, [pc, #160]	; (8012fc4 <prvInsertBlockIntoFreeList+0xac>)
 8012f22:	60fb      	str	r3, [r7, #12]
 8012f24:	e002      	b.n	8012f2c <prvInsertBlockIntoFreeList+0x14>
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	60fb      	str	r3, [r7, #12]
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d8f7      	bhi.n	8012f26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	68ba      	ldr	r2, [r7, #8]
 8012f40:	4413      	add	r3, r2
 8012f42:	687a      	ldr	r2, [r7, #4]
 8012f44:	429a      	cmp	r2, r3
 8012f46:	d108      	bne.n	8012f5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	685a      	ldr	r2, [r3, #4]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	441a      	add	r2, r3
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	68ba      	ldr	r2, [r7, #8]
 8012f64:	441a      	add	r2, r3
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d118      	bne.n	8012fa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	4b15      	ldr	r3, [pc, #84]	; (8012fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	429a      	cmp	r2, r3
 8012f78:	d00d      	beq.n	8012f96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	685a      	ldr	r2, [r3, #4]
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	441a      	add	r2, r3
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	681a      	ldr	r2, [r3, #0]
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	601a      	str	r2, [r3, #0]
 8012f94:	e008      	b.n	8012fa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012f96:	4b0c      	ldr	r3, [pc, #48]	; (8012fc8 <prvInsertBlockIntoFreeList+0xb0>)
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	601a      	str	r2, [r3, #0]
 8012f9e:	e003      	b.n	8012fa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	681a      	ldr	r2, [r3, #0]
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012fa8:	68fa      	ldr	r2, [r7, #12]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	429a      	cmp	r2, r3
 8012fae:	d002      	beq.n	8012fb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	687a      	ldr	r2, [r7, #4]
 8012fb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012fb6:	bf00      	nop
 8012fb8:	3714      	adds	r7, #20
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc0:	4770      	bx	lr
 8012fc2:	bf00      	nop
 8012fc4:	2000da50 	.word	0x2000da50
 8012fc8:	2000da58 	.word	0x2000da58

08012fcc <__cvt>:
 8012fcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fd0:	ec55 4b10 	vmov	r4, r5, d0
 8012fd4:	2d00      	cmp	r5, #0
 8012fd6:	460e      	mov	r6, r1
 8012fd8:	4619      	mov	r1, r3
 8012fda:	462b      	mov	r3, r5
 8012fdc:	bfbb      	ittet	lt
 8012fde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012fe2:	461d      	movlt	r5, r3
 8012fe4:	2300      	movge	r3, #0
 8012fe6:	232d      	movlt	r3, #45	; 0x2d
 8012fe8:	700b      	strb	r3, [r1, #0]
 8012fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012fec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012ff0:	4691      	mov	r9, r2
 8012ff2:	f023 0820 	bic.w	r8, r3, #32
 8012ff6:	bfbc      	itt	lt
 8012ff8:	4622      	movlt	r2, r4
 8012ffa:	4614      	movlt	r4, r2
 8012ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013000:	d005      	beq.n	801300e <__cvt+0x42>
 8013002:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013006:	d100      	bne.n	801300a <__cvt+0x3e>
 8013008:	3601      	adds	r6, #1
 801300a:	2102      	movs	r1, #2
 801300c:	e000      	b.n	8013010 <__cvt+0x44>
 801300e:	2103      	movs	r1, #3
 8013010:	ab03      	add	r3, sp, #12
 8013012:	9301      	str	r3, [sp, #4]
 8013014:	ab02      	add	r3, sp, #8
 8013016:	9300      	str	r3, [sp, #0]
 8013018:	ec45 4b10 	vmov	d0, r4, r5
 801301c:	4653      	mov	r3, sl
 801301e:	4632      	mov	r2, r6
 8013020:	f000 fe9a 	bl	8013d58 <_dtoa_r>
 8013024:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013028:	4607      	mov	r7, r0
 801302a:	d102      	bne.n	8013032 <__cvt+0x66>
 801302c:	f019 0f01 	tst.w	r9, #1
 8013030:	d022      	beq.n	8013078 <__cvt+0xac>
 8013032:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013036:	eb07 0906 	add.w	r9, r7, r6
 801303a:	d110      	bne.n	801305e <__cvt+0x92>
 801303c:	783b      	ldrb	r3, [r7, #0]
 801303e:	2b30      	cmp	r3, #48	; 0x30
 8013040:	d10a      	bne.n	8013058 <__cvt+0x8c>
 8013042:	2200      	movs	r2, #0
 8013044:	2300      	movs	r3, #0
 8013046:	4620      	mov	r0, r4
 8013048:	4629      	mov	r1, r5
 801304a:	f7ed fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 801304e:	b918      	cbnz	r0, 8013058 <__cvt+0x8c>
 8013050:	f1c6 0601 	rsb	r6, r6, #1
 8013054:	f8ca 6000 	str.w	r6, [sl]
 8013058:	f8da 3000 	ldr.w	r3, [sl]
 801305c:	4499      	add	r9, r3
 801305e:	2200      	movs	r2, #0
 8013060:	2300      	movs	r3, #0
 8013062:	4620      	mov	r0, r4
 8013064:	4629      	mov	r1, r5
 8013066:	f7ed fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 801306a:	b108      	cbz	r0, 8013070 <__cvt+0xa4>
 801306c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013070:	2230      	movs	r2, #48	; 0x30
 8013072:	9b03      	ldr	r3, [sp, #12]
 8013074:	454b      	cmp	r3, r9
 8013076:	d307      	bcc.n	8013088 <__cvt+0xbc>
 8013078:	9b03      	ldr	r3, [sp, #12]
 801307a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801307c:	1bdb      	subs	r3, r3, r7
 801307e:	4638      	mov	r0, r7
 8013080:	6013      	str	r3, [r2, #0]
 8013082:	b004      	add	sp, #16
 8013084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013088:	1c59      	adds	r1, r3, #1
 801308a:	9103      	str	r1, [sp, #12]
 801308c:	701a      	strb	r2, [r3, #0]
 801308e:	e7f0      	b.n	8013072 <__cvt+0xa6>

08013090 <__exponent>:
 8013090:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013092:	4603      	mov	r3, r0
 8013094:	2900      	cmp	r1, #0
 8013096:	bfb8      	it	lt
 8013098:	4249      	neglt	r1, r1
 801309a:	f803 2b02 	strb.w	r2, [r3], #2
 801309e:	bfb4      	ite	lt
 80130a0:	222d      	movlt	r2, #45	; 0x2d
 80130a2:	222b      	movge	r2, #43	; 0x2b
 80130a4:	2909      	cmp	r1, #9
 80130a6:	7042      	strb	r2, [r0, #1]
 80130a8:	dd2a      	ble.n	8013100 <__exponent+0x70>
 80130aa:	f10d 0207 	add.w	r2, sp, #7
 80130ae:	4617      	mov	r7, r2
 80130b0:	260a      	movs	r6, #10
 80130b2:	4694      	mov	ip, r2
 80130b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80130b8:	fb06 1415 	mls	r4, r6, r5, r1
 80130bc:	3430      	adds	r4, #48	; 0x30
 80130be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80130c2:	460c      	mov	r4, r1
 80130c4:	2c63      	cmp	r4, #99	; 0x63
 80130c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80130ca:	4629      	mov	r1, r5
 80130cc:	dcf1      	bgt.n	80130b2 <__exponent+0x22>
 80130ce:	3130      	adds	r1, #48	; 0x30
 80130d0:	f1ac 0402 	sub.w	r4, ip, #2
 80130d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80130d8:	1c41      	adds	r1, r0, #1
 80130da:	4622      	mov	r2, r4
 80130dc:	42ba      	cmp	r2, r7
 80130de:	d30a      	bcc.n	80130f6 <__exponent+0x66>
 80130e0:	f10d 0209 	add.w	r2, sp, #9
 80130e4:	eba2 020c 	sub.w	r2, r2, ip
 80130e8:	42bc      	cmp	r4, r7
 80130ea:	bf88      	it	hi
 80130ec:	2200      	movhi	r2, #0
 80130ee:	4413      	add	r3, r2
 80130f0:	1a18      	subs	r0, r3, r0
 80130f2:	b003      	add	sp, #12
 80130f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80130fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80130fe:	e7ed      	b.n	80130dc <__exponent+0x4c>
 8013100:	2330      	movs	r3, #48	; 0x30
 8013102:	3130      	adds	r1, #48	; 0x30
 8013104:	7083      	strb	r3, [r0, #2]
 8013106:	70c1      	strb	r1, [r0, #3]
 8013108:	1d03      	adds	r3, r0, #4
 801310a:	e7f1      	b.n	80130f0 <__exponent+0x60>

0801310c <_printf_float>:
 801310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013110:	ed2d 8b02 	vpush	{d8}
 8013114:	b08d      	sub	sp, #52	; 0x34
 8013116:	460c      	mov	r4, r1
 8013118:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801311c:	4616      	mov	r6, r2
 801311e:	461f      	mov	r7, r3
 8013120:	4605      	mov	r5, r0
 8013122:	f000 fcb5 	bl	8013a90 <_localeconv_r>
 8013126:	f8d0 a000 	ldr.w	sl, [r0]
 801312a:	4650      	mov	r0, sl
 801312c:	f7ed f8a8 	bl	8000280 <strlen>
 8013130:	2300      	movs	r3, #0
 8013132:	930a      	str	r3, [sp, #40]	; 0x28
 8013134:	6823      	ldr	r3, [r4, #0]
 8013136:	9305      	str	r3, [sp, #20]
 8013138:	f8d8 3000 	ldr.w	r3, [r8]
 801313c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013140:	3307      	adds	r3, #7
 8013142:	f023 0307 	bic.w	r3, r3, #7
 8013146:	f103 0208 	add.w	r2, r3, #8
 801314a:	f8c8 2000 	str.w	r2, [r8]
 801314e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013152:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013156:	9307      	str	r3, [sp, #28]
 8013158:	f8cd 8018 	str.w	r8, [sp, #24]
 801315c:	ee08 0a10 	vmov	s16, r0
 8013160:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8013164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013168:	4b9e      	ldr	r3, [pc, #632]	; (80133e4 <_printf_float+0x2d8>)
 801316a:	f04f 32ff 	mov.w	r2, #4294967295
 801316e:	f7ed fce5 	bl	8000b3c <__aeabi_dcmpun>
 8013172:	bb88      	cbnz	r0, 80131d8 <_printf_float+0xcc>
 8013174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013178:	4b9a      	ldr	r3, [pc, #616]	; (80133e4 <_printf_float+0x2d8>)
 801317a:	f04f 32ff 	mov.w	r2, #4294967295
 801317e:	f7ed fcbf 	bl	8000b00 <__aeabi_dcmple>
 8013182:	bb48      	cbnz	r0, 80131d8 <_printf_float+0xcc>
 8013184:	2200      	movs	r2, #0
 8013186:	2300      	movs	r3, #0
 8013188:	4640      	mov	r0, r8
 801318a:	4649      	mov	r1, r9
 801318c:	f7ed fcae 	bl	8000aec <__aeabi_dcmplt>
 8013190:	b110      	cbz	r0, 8013198 <_printf_float+0x8c>
 8013192:	232d      	movs	r3, #45	; 0x2d
 8013194:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013198:	4a93      	ldr	r2, [pc, #588]	; (80133e8 <_printf_float+0x2dc>)
 801319a:	4b94      	ldr	r3, [pc, #592]	; (80133ec <_printf_float+0x2e0>)
 801319c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80131a0:	bf94      	ite	ls
 80131a2:	4690      	movls	r8, r2
 80131a4:	4698      	movhi	r8, r3
 80131a6:	2303      	movs	r3, #3
 80131a8:	6123      	str	r3, [r4, #16]
 80131aa:	9b05      	ldr	r3, [sp, #20]
 80131ac:	f023 0304 	bic.w	r3, r3, #4
 80131b0:	6023      	str	r3, [r4, #0]
 80131b2:	f04f 0900 	mov.w	r9, #0
 80131b6:	9700      	str	r7, [sp, #0]
 80131b8:	4633      	mov	r3, r6
 80131ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80131bc:	4621      	mov	r1, r4
 80131be:	4628      	mov	r0, r5
 80131c0:	f000 f9da 	bl	8013578 <_printf_common>
 80131c4:	3001      	adds	r0, #1
 80131c6:	f040 8090 	bne.w	80132ea <_printf_float+0x1de>
 80131ca:	f04f 30ff 	mov.w	r0, #4294967295
 80131ce:	b00d      	add	sp, #52	; 0x34
 80131d0:	ecbd 8b02 	vpop	{d8}
 80131d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d8:	4642      	mov	r2, r8
 80131da:	464b      	mov	r3, r9
 80131dc:	4640      	mov	r0, r8
 80131de:	4649      	mov	r1, r9
 80131e0:	f7ed fcac 	bl	8000b3c <__aeabi_dcmpun>
 80131e4:	b140      	cbz	r0, 80131f8 <_printf_float+0xec>
 80131e6:	464b      	mov	r3, r9
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	bfbc      	itt	lt
 80131ec:	232d      	movlt	r3, #45	; 0x2d
 80131ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80131f2:	4a7f      	ldr	r2, [pc, #508]	; (80133f0 <_printf_float+0x2e4>)
 80131f4:	4b7f      	ldr	r3, [pc, #508]	; (80133f4 <_printf_float+0x2e8>)
 80131f6:	e7d1      	b.n	801319c <_printf_float+0x90>
 80131f8:	6863      	ldr	r3, [r4, #4]
 80131fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80131fe:	9206      	str	r2, [sp, #24]
 8013200:	1c5a      	adds	r2, r3, #1
 8013202:	d13f      	bne.n	8013284 <_printf_float+0x178>
 8013204:	2306      	movs	r3, #6
 8013206:	6063      	str	r3, [r4, #4]
 8013208:	9b05      	ldr	r3, [sp, #20]
 801320a:	6861      	ldr	r1, [r4, #4]
 801320c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013210:	2300      	movs	r3, #0
 8013212:	9303      	str	r3, [sp, #12]
 8013214:	ab0a      	add	r3, sp, #40	; 0x28
 8013216:	e9cd b301 	strd	fp, r3, [sp, #4]
 801321a:	ab09      	add	r3, sp, #36	; 0x24
 801321c:	ec49 8b10 	vmov	d0, r8, r9
 8013220:	9300      	str	r3, [sp, #0]
 8013222:	6022      	str	r2, [r4, #0]
 8013224:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013228:	4628      	mov	r0, r5
 801322a:	f7ff fecf 	bl	8012fcc <__cvt>
 801322e:	9b06      	ldr	r3, [sp, #24]
 8013230:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013232:	2b47      	cmp	r3, #71	; 0x47
 8013234:	4680      	mov	r8, r0
 8013236:	d108      	bne.n	801324a <_printf_float+0x13e>
 8013238:	1cc8      	adds	r0, r1, #3
 801323a:	db02      	blt.n	8013242 <_printf_float+0x136>
 801323c:	6863      	ldr	r3, [r4, #4]
 801323e:	4299      	cmp	r1, r3
 8013240:	dd41      	ble.n	80132c6 <_printf_float+0x1ba>
 8013242:	f1ab 0302 	sub.w	r3, fp, #2
 8013246:	fa5f fb83 	uxtb.w	fp, r3
 801324a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801324e:	d820      	bhi.n	8013292 <_printf_float+0x186>
 8013250:	3901      	subs	r1, #1
 8013252:	465a      	mov	r2, fp
 8013254:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013258:	9109      	str	r1, [sp, #36]	; 0x24
 801325a:	f7ff ff19 	bl	8013090 <__exponent>
 801325e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013260:	1813      	adds	r3, r2, r0
 8013262:	2a01      	cmp	r2, #1
 8013264:	4681      	mov	r9, r0
 8013266:	6123      	str	r3, [r4, #16]
 8013268:	dc02      	bgt.n	8013270 <_printf_float+0x164>
 801326a:	6822      	ldr	r2, [r4, #0]
 801326c:	07d2      	lsls	r2, r2, #31
 801326e:	d501      	bpl.n	8013274 <_printf_float+0x168>
 8013270:	3301      	adds	r3, #1
 8013272:	6123      	str	r3, [r4, #16]
 8013274:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013278:	2b00      	cmp	r3, #0
 801327a:	d09c      	beq.n	80131b6 <_printf_float+0xaa>
 801327c:	232d      	movs	r3, #45	; 0x2d
 801327e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013282:	e798      	b.n	80131b6 <_printf_float+0xaa>
 8013284:	9a06      	ldr	r2, [sp, #24]
 8013286:	2a47      	cmp	r2, #71	; 0x47
 8013288:	d1be      	bne.n	8013208 <_printf_float+0xfc>
 801328a:	2b00      	cmp	r3, #0
 801328c:	d1bc      	bne.n	8013208 <_printf_float+0xfc>
 801328e:	2301      	movs	r3, #1
 8013290:	e7b9      	b.n	8013206 <_printf_float+0xfa>
 8013292:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013296:	d118      	bne.n	80132ca <_printf_float+0x1be>
 8013298:	2900      	cmp	r1, #0
 801329a:	6863      	ldr	r3, [r4, #4]
 801329c:	dd0b      	ble.n	80132b6 <_printf_float+0x1aa>
 801329e:	6121      	str	r1, [r4, #16]
 80132a0:	b913      	cbnz	r3, 80132a8 <_printf_float+0x19c>
 80132a2:	6822      	ldr	r2, [r4, #0]
 80132a4:	07d0      	lsls	r0, r2, #31
 80132a6:	d502      	bpl.n	80132ae <_printf_float+0x1a2>
 80132a8:	3301      	adds	r3, #1
 80132aa:	440b      	add	r3, r1
 80132ac:	6123      	str	r3, [r4, #16]
 80132ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80132b0:	f04f 0900 	mov.w	r9, #0
 80132b4:	e7de      	b.n	8013274 <_printf_float+0x168>
 80132b6:	b913      	cbnz	r3, 80132be <_printf_float+0x1b2>
 80132b8:	6822      	ldr	r2, [r4, #0]
 80132ba:	07d2      	lsls	r2, r2, #31
 80132bc:	d501      	bpl.n	80132c2 <_printf_float+0x1b6>
 80132be:	3302      	adds	r3, #2
 80132c0:	e7f4      	b.n	80132ac <_printf_float+0x1a0>
 80132c2:	2301      	movs	r3, #1
 80132c4:	e7f2      	b.n	80132ac <_printf_float+0x1a0>
 80132c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80132ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132cc:	4299      	cmp	r1, r3
 80132ce:	db05      	blt.n	80132dc <_printf_float+0x1d0>
 80132d0:	6823      	ldr	r3, [r4, #0]
 80132d2:	6121      	str	r1, [r4, #16]
 80132d4:	07d8      	lsls	r0, r3, #31
 80132d6:	d5ea      	bpl.n	80132ae <_printf_float+0x1a2>
 80132d8:	1c4b      	adds	r3, r1, #1
 80132da:	e7e7      	b.n	80132ac <_printf_float+0x1a0>
 80132dc:	2900      	cmp	r1, #0
 80132de:	bfd4      	ite	le
 80132e0:	f1c1 0202 	rsble	r2, r1, #2
 80132e4:	2201      	movgt	r2, #1
 80132e6:	4413      	add	r3, r2
 80132e8:	e7e0      	b.n	80132ac <_printf_float+0x1a0>
 80132ea:	6823      	ldr	r3, [r4, #0]
 80132ec:	055a      	lsls	r2, r3, #21
 80132ee:	d407      	bmi.n	8013300 <_printf_float+0x1f4>
 80132f0:	6923      	ldr	r3, [r4, #16]
 80132f2:	4642      	mov	r2, r8
 80132f4:	4631      	mov	r1, r6
 80132f6:	4628      	mov	r0, r5
 80132f8:	47b8      	blx	r7
 80132fa:	3001      	adds	r0, #1
 80132fc:	d12c      	bne.n	8013358 <_printf_float+0x24c>
 80132fe:	e764      	b.n	80131ca <_printf_float+0xbe>
 8013300:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013304:	f240 80e0 	bls.w	80134c8 <_printf_float+0x3bc>
 8013308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801330c:	2200      	movs	r2, #0
 801330e:	2300      	movs	r3, #0
 8013310:	f7ed fbe2 	bl	8000ad8 <__aeabi_dcmpeq>
 8013314:	2800      	cmp	r0, #0
 8013316:	d034      	beq.n	8013382 <_printf_float+0x276>
 8013318:	4a37      	ldr	r2, [pc, #220]	; (80133f8 <_printf_float+0x2ec>)
 801331a:	2301      	movs	r3, #1
 801331c:	4631      	mov	r1, r6
 801331e:	4628      	mov	r0, r5
 8013320:	47b8      	blx	r7
 8013322:	3001      	adds	r0, #1
 8013324:	f43f af51 	beq.w	80131ca <_printf_float+0xbe>
 8013328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801332c:	429a      	cmp	r2, r3
 801332e:	db02      	blt.n	8013336 <_printf_float+0x22a>
 8013330:	6823      	ldr	r3, [r4, #0]
 8013332:	07d8      	lsls	r0, r3, #31
 8013334:	d510      	bpl.n	8013358 <_printf_float+0x24c>
 8013336:	ee18 3a10 	vmov	r3, s16
 801333a:	4652      	mov	r2, sl
 801333c:	4631      	mov	r1, r6
 801333e:	4628      	mov	r0, r5
 8013340:	47b8      	blx	r7
 8013342:	3001      	adds	r0, #1
 8013344:	f43f af41 	beq.w	80131ca <_printf_float+0xbe>
 8013348:	f04f 0800 	mov.w	r8, #0
 801334c:	f104 091a 	add.w	r9, r4, #26
 8013350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013352:	3b01      	subs	r3, #1
 8013354:	4543      	cmp	r3, r8
 8013356:	dc09      	bgt.n	801336c <_printf_float+0x260>
 8013358:	6823      	ldr	r3, [r4, #0]
 801335a:	079b      	lsls	r3, r3, #30
 801335c:	f100 8107 	bmi.w	801356e <_printf_float+0x462>
 8013360:	68e0      	ldr	r0, [r4, #12]
 8013362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013364:	4298      	cmp	r0, r3
 8013366:	bfb8      	it	lt
 8013368:	4618      	movlt	r0, r3
 801336a:	e730      	b.n	80131ce <_printf_float+0xc2>
 801336c:	2301      	movs	r3, #1
 801336e:	464a      	mov	r2, r9
 8013370:	4631      	mov	r1, r6
 8013372:	4628      	mov	r0, r5
 8013374:	47b8      	blx	r7
 8013376:	3001      	adds	r0, #1
 8013378:	f43f af27 	beq.w	80131ca <_printf_float+0xbe>
 801337c:	f108 0801 	add.w	r8, r8, #1
 8013380:	e7e6      	b.n	8013350 <_printf_float+0x244>
 8013382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013384:	2b00      	cmp	r3, #0
 8013386:	dc39      	bgt.n	80133fc <_printf_float+0x2f0>
 8013388:	4a1b      	ldr	r2, [pc, #108]	; (80133f8 <_printf_float+0x2ec>)
 801338a:	2301      	movs	r3, #1
 801338c:	4631      	mov	r1, r6
 801338e:	4628      	mov	r0, r5
 8013390:	47b8      	blx	r7
 8013392:	3001      	adds	r0, #1
 8013394:	f43f af19 	beq.w	80131ca <_printf_float+0xbe>
 8013398:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801339c:	4313      	orrs	r3, r2
 801339e:	d102      	bne.n	80133a6 <_printf_float+0x29a>
 80133a0:	6823      	ldr	r3, [r4, #0]
 80133a2:	07d9      	lsls	r1, r3, #31
 80133a4:	d5d8      	bpl.n	8013358 <_printf_float+0x24c>
 80133a6:	ee18 3a10 	vmov	r3, s16
 80133aa:	4652      	mov	r2, sl
 80133ac:	4631      	mov	r1, r6
 80133ae:	4628      	mov	r0, r5
 80133b0:	47b8      	blx	r7
 80133b2:	3001      	adds	r0, #1
 80133b4:	f43f af09 	beq.w	80131ca <_printf_float+0xbe>
 80133b8:	f04f 0900 	mov.w	r9, #0
 80133bc:	f104 0a1a 	add.w	sl, r4, #26
 80133c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133c2:	425b      	negs	r3, r3
 80133c4:	454b      	cmp	r3, r9
 80133c6:	dc01      	bgt.n	80133cc <_printf_float+0x2c0>
 80133c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ca:	e792      	b.n	80132f2 <_printf_float+0x1e6>
 80133cc:	2301      	movs	r3, #1
 80133ce:	4652      	mov	r2, sl
 80133d0:	4631      	mov	r1, r6
 80133d2:	4628      	mov	r0, r5
 80133d4:	47b8      	blx	r7
 80133d6:	3001      	adds	r0, #1
 80133d8:	f43f aef7 	beq.w	80131ca <_printf_float+0xbe>
 80133dc:	f109 0901 	add.w	r9, r9, #1
 80133e0:	e7ee      	b.n	80133c0 <_printf_float+0x2b4>
 80133e2:	bf00      	nop
 80133e4:	7fefffff 	.word	0x7fefffff
 80133e8:	08016508 	.word	0x08016508
 80133ec:	0801650c 	.word	0x0801650c
 80133f0:	08016510 	.word	0x08016510
 80133f4:	08016514 	.word	0x08016514
 80133f8:	08016518 	.word	0x08016518
 80133fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80133fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013400:	429a      	cmp	r2, r3
 8013402:	bfa8      	it	ge
 8013404:	461a      	movge	r2, r3
 8013406:	2a00      	cmp	r2, #0
 8013408:	4691      	mov	r9, r2
 801340a:	dc37      	bgt.n	801347c <_printf_float+0x370>
 801340c:	f04f 0b00 	mov.w	fp, #0
 8013410:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013414:	f104 021a 	add.w	r2, r4, #26
 8013418:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801341a:	9305      	str	r3, [sp, #20]
 801341c:	eba3 0309 	sub.w	r3, r3, r9
 8013420:	455b      	cmp	r3, fp
 8013422:	dc33      	bgt.n	801348c <_printf_float+0x380>
 8013424:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013428:	429a      	cmp	r2, r3
 801342a:	db3b      	blt.n	80134a4 <_printf_float+0x398>
 801342c:	6823      	ldr	r3, [r4, #0]
 801342e:	07da      	lsls	r2, r3, #31
 8013430:	d438      	bmi.n	80134a4 <_printf_float+0x398>
 8013432:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013436:	eba2 0903 	sub.w	r9, r2, r3
 801343a:	9b05      	ldr	r3, [sp, #20]
 801343c:	1ad2      	subs	r2, r2, r3
 801343e:	4591      	cmp	r9, r2
 8013440:	bfa8      	it	ge
 8013442:	4691      	movge	r9, r2
 8013444:	f1b9 0f00 	cmp.w	r9, #0
 8013448:	dc35      	bgt.n	80134b6 <_printf_float+0x3aa>
 801344a:	f04f 0800 	mov.w	r8, #0
 801344e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013452:	f104 0a1a 	add.w	sl, r4, #26
 8013456:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801345a:	1a9b      	subs	r3, r3, r2
 801345c:	eba3 0309 	sub.w	r3, r3, r9
 8013460:	4543      	cmp	r3, r8
 8013462:	f77f af79 	ble.w	8013358 <_printf_float+0x24c>
 8013466:	2301      	movs	r3, #1
 8013468:	4652      	mov	r2, sl
 801346a:	4631      	mov	r1, r6
 801346c:	4628      	mov	r0, r5
 801346e:	47b8      	blx	r7
 8013470:	3001      	adds	r0, #1
 8013472:	f43f aeaa 	beq.w	80131ca <_printf_float+0xbe>
 8013476:	f108 0801 	add.w	r8, r8, #1
 801347a:	e7ec      	b.n	8013456 <_printf_float+0x34a>
 801347c:	4613      	mov	r3, r2
 801347e:	4631      	mov	r1, r6
 8013480:	4642      	mov	r2, r8
 8013482:	4628      	mov	r0, r5
 8013484:	47b8      	blx	r7
 8013486:	3001      	adds	r0, #1
 8013488:	d1c0      	bne.n	801340c <_printf_float+0x300>
 801348a:	e69e      	b.n	80131ca <_printf_float+0xbe>
 801348c:	2301      	movs	r3, #1
 801348e:	4631      	mov	r1, r6
 8013490:	4628      	mov	r0, r5
 8013492:	9205      	str	r2, [sp, #20]
 8013494:	47b8      	blx	r7
 8013496:	3001      	adds	r0, #1
 8013498:	f43f ae97 	beq.w	80131ca <_printf_float+0xbe>
 801349c:	9a05      	ldr	r2, [sp, #20]
 801349e:	f10b 0b01 	add.w	fp, fp, #1
 80134a2:	e7b9      	b.n	8013418 <_printf_float+0x30c>
 80134a4:	ee18 3a10 	vmov	r3, s16
 80134a8:	4652      	mov	r2, sl
 80134aa:	4631      	mov	r1, r6
 80134ac:	4628      	mov	r0, r5
 80134ae:	47b8      	blx	r7
 80134b0:	3001      	adds	r0, #1
 80134b2:	d1be      	bne.n	8013432 <_printf_float+0x326>
 80134b4:	e689      	b.n	80131ca <_printf_float+0xbe>
 80134b6:	9a05      	ldr	r2, [sp, #20]
 80134b8:	464b      	mov	r3, r9
 80134ba:	4442      	add	r2, r8
 80134bc:	4631      	mov	r1, r6
 80134be:	4628      	mov	r0, r5
 80134c0:	47b8      	blx	r7
 80134c2:	3001      	adds	r0, #1
 80134c4:	d1c1      	bne.n	801344a <_printf_float+0x33e>
 80134c6:	e680      	b.n	80131ca <_printf_float+0xbe>
 80134c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134ca:	2a01      	cmp	r2, #1
 80134cc:	dc01      	bgt.n	80134d2 <_printf_float+0x3c6>
 80134ce:	07db      	lsls	r3, r3, #31
 80134d0:	d53a      	bpl.n	8013548 <_printf_float+0x43c>
 80134d2:	2301      	movs	r3, #1
 80134d4:	4642      	mov	r2, r8
 80134d6:	4631      	mov	r1, r6
 80134d8:	4628      	mov	r0, r5
 80134da:	47b8      	blx	r7
 80134dc:	3001      	adds	r0, #1
 80134de:	f43f ae74 	beq.w	80131ca <_printf_float+0xbe>
 80134e2:	ee18 3a10 	vmov	r3, s16
 80134e6:	4652      	mov	r2, sl
 80134e8:	4631      	mov	r1, r6
 80134ea:	4628      	mov	r0, r5
 80134ec:	47b8      	blx	r7
 80134ee:	3001      	adds	r0, #1
 80134f0:	f43f ae6b 	beq.w	80131ca <_printf_float+0xbe>
 80134f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80134f8:	2200      	movs	r2, #0
 80134fa:	2300      	movs	r3, #0
 80134fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8013500:	f7ed faea 	bl	8000ad8 <__aeabi_dcmpeq>
 8013504:	b9d8      	cbnz	r0, 801353e <_printf_float+0x432>
 8013506:	f10a 33ff 	add.w	r3, sl, #4294967295
 801350a:	f108 0201 	add.w	r2, r8, #1
 801350e:	4631      	mov	r1, r6
 8013510:	4628      	mov	r0, r5
 8013512:	47b8      	blx	r7
 8013514:	3001      	adds	r0, #1
 8013516:	d10e      	bne.n	8013536 <_printf_float+0x42a>
 8013518:	e657      	b.n	80131ca <_printf_float+0xbe>
 801351a:	2301      	movs	r3, #1
 801351c:	4652      	mov	r2, sl
 801351e:	4631      	mov	r1, r6
 8013520:	4628      	mov	r0, r5
 8013522:	47b8      	blx	r7
 8013524:	3001      	adds	r0, #1
 8013526:	f43f ae50 	beq.w	80131ca <_printf_float+0xbe>
 801352a:	f108 0801 	add.w	r8, r8, #1
 801352e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013530:	3b01      	subs	r3, #1
 8013532:	4543      	cmp	r3, r8
 8013534:	dcf1      	bgt.n	801351a <_printf_float+0x40e>
 8013536:	464b      	mov	r3, r9
 8013538:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801353c:	e6da      	b.n	80132f4 <_printf_float+0x1e8>
 801353e:	f04f 0800 	mov.w	r8, #0
 8013542:	f104 0a1a 	add.w	sl, r4, #26
 8013546:	e7f2      	b.n	801352e <_printf_float+0x422>
 8013548:	2301      	movs	r3, #1
 801354a:	4642      	mov	r2, r8
 801354c:	e7df      	b.n	801350e <_printf_float+0x402>
 801354e:	2301      	movs	r3, #1
 8013550:	464a      	mov	r2, r9
 8013552:	4631      	mov	r1, r6
 8013554:	4628      	mov	r0, r5
 8013556:	47b8      	blx	r7
 8013558:	3001      	adds	r0, #1
 801355a:	f43f ae36 	beq.w	80131ca <_printf_float+0xbe>
 801355e:	f108 0801 	add.w	r8, r8, #1
 8013562:	68e3      	ldr	r3, [r4, #12]
 8013564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013566:	1a5b      	subs	r3, r3, r1
 8013568:	4543      	cmp	r3, r8
 801356a:	dcf0      	bgt.n	801354e <_printf_float+0x442>
 801356c:	e6f8      	b.n	8013360 <_printf_float+0x254>
 801356e:	f04f 0800 	mov.w	r8, #0
 8013572:	f104 0919 	add.w	r9, r4, #25
 8013576:	e7f4      	b.n	8013562 <_printf_float+0x456>

08013578 <_printf_common>:
 8013578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801357c:	4616      	mov	r6, r2
 801357e:	4699      	mov	r9, r3
 8013580:	688a      	ldr	r2, [r1, #8]
 8013582:	690b      	ldr	r3, [r1, #16]
 8013584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013588:	4293      	cmp	r3, r2
 801358a:	bfb8      	it	lt
 801358c:	4613      	movlt	r3, r2
 801358e:	6033      	str	r3, [r6, #0]
 8013590:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013594:	4607      	mov	r7, r0
 8013596:	460c      	mov	r4, r1
 8013598:	b10a      	cbz	r2, 801359e <_printf_common+0x26>
 801359a:	3301      	adds	r3, #1
 801359c:	6033      	str	r3, [r6, #0]
 801359e:	6823      	ldr	r3, [r4, #0]
 80135a0:	0699      	lsls	r1, r3, #26
 80135a2:	bf42      	ittt	mi
 80135a4:	6833      	ldrmi	r3, [r6, #0]
 80135a6:	3302      	addmi	r3, #2
 80135a8:	6033      	strmi	r3, [r6, #0]
 80135aa:	6825      	ldr	r5, [r4, #0]
 80135ac:	f015 0506 	ands.w	r5, r5, #6
 80135b0:	d106      	bne.n	80135c0 <_printf_common+0x48>
 80135b2:	f104 0a19 	add.w	sl, r4, #25
 80135b6:	68e3      	ldr	r3, [r4, #12]
 80135b8:	6832      	ldr	r2, [r6, #0]
 80135ba:	1a9b      	subs	r3, r3, r2
 80135bc:	42ab      	cmp	r3, r5
 80135be:	dc26      	bgt.n	801360e <_printf_common+0x96>
 80135c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80135c4:	1e13      	subs	r3, r2, #0
 80135c6:	6822      	ldr	r2, [r4, #0]
 80135c8:	bf18      	it	ne
 80135ca:	2301      	movne	r3, #1
 80135cc:	0692      	lsls	r2, r2, #26
 80135ce:	d42b      	bmi.n	8013628 <_printf_common+0xb0>
 80135d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80135d4:	4649      	mov	r1, r9
 80135d6:	4638      	mov	r0, r7
 80135d8:	47c0      	blx	r8
 80135da:	3001      	adds	r0, #1
 80135dc:	d01e      	beq.n	801361c <_printf_common+0xa4>
 80135de:	6823      	ldr	r3, [r4, #0]
 80135e0:	6922      	ldr	r2, [r4, #16]
 80135e2:	f003 0306 	and.w	r3, r3, #6
 80135e6:	2b04      	cmp	r3, #4
 80135e8:	bf02      	ittt	eq
 80135ea:	68e5      	ldreq	r5, [r4, #12]
 80135ec:	6833      	ldreq	r3, [r6, #0]
 80135ee:	1aed      	subeq	r5, r5, r3
 80135f0:	68a3      	ldr	r3, [r4, #8]
 80135f2:	bf0c      	ite	eq
 80135f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80135f8:	2500      	movne	r5, #0
 80135fa:	4293      	cmp	r3, r2
 80135fc:	bfc4      	itt	gt
 80135fe:	1a9b      	subgt	r3, r3, r2
 8013600:	18ed      	addgt	r5, r5, r3
 8013602:	2600      	movs	r6, #0
 8013604:	341a      	adds	r4, #26
 8013606:	42b5      	cmp	r5, r6
 8013608:	d11a      	bne.n	8013640 <_printf_common+0xc8>
 801360a:	2000      	movs	r0, #0
 801360c:	e008      	b.n	8013620 <_printf_common+0xa8>
 801360e:	2301      	movs	r3, #1
 8013610:	4652      	mov	r2, sl
 8013612:	4649      	mov	r1, r9
 8013614:	4638      	mov	r0, r7
 8013616:	47c0      	blx	r8
 8013618:	3001      	adds	r0, #1
 801361a:	d103      	bne.n	8013624 <_printf_common+0xac>
 801361c:	f04f 30ff 	mov.w	r0, #4294967295
 8013620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013624:	3501      	adds	r5, #1
 8013626:	e7c6      	b.n	80135b6 <_printf_common+0x3e>
 8013628:	18e1      	adds	r1, r4, r3
 801362a:	1c5a      	adds	r2, r3, #1
 801362c:	2030      	movs	r0, #48	; 0x30
 801362e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013632:	4422      	add	r2, r4
 8013634:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013638:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801363c:	3302      	adds	r3, #2
 801363e:	e7c7      	b.n	80135d0 <_printf_common+0x58>
 8013640:	2301      	movs	r3, #1
 8013642:	4622      	mov	r2, r4
 8013644:	4649      	mov	r1, r9
 8013646:	4638      	mov	r0, r7
 8013648:	47c0      	blx	r8
 801364a:	3001      	adds	r0, #1
 801364c:	d0e6      	beq.n	801361c <_printf_common+0xa4>
 801364e:	3601      	adds	r6, #1
 8013650:	e7d9      	b.n	8013606 <_printf_common+0x8e>
	...

08013654 <_printf_i>:
 8013654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013658:	7e0f      	ldrb	r7, [r1, #24]
 801365a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801365c:	2f78      	cmp	r7, #120	; 0x78
 801365e:	4691      	mov	r9, r2
 8013660:	4680      	mov	r8, r0
 8013662:	460c      	mov	r4, r1
 8013664:	469a      	mov	sl, r3
 8013666:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801366a:	d807      	bhi.n	801367c <_printf_i+0x28>
 801366c:	2f62      	cmp	r7, #98	; 0x62
 801366e:	d80a      	bhi.n	8013686 <_printf_i+0x32>
 8013670:	2f00      	cmp	r7, #0
 8013672:	f000 80d4 	beq.w	801381e <_printf_i+0x1ca>
 8013676:	2f58      	cmp	r7, #88	; 0x58
 8013678:	f000 80c0 	beq.w	80137fc <_printf_i+0x1a8>
 801367c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013680:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013684:	e03a      	b.n	80136fc <_printf_i+0xa8>
 8013686:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801368a:	2b15      	cmp	r3, #21
 801368c:	d8f6      	bhi.n	801367c <_printf_i+0x28>
 801368e:	a101      	add	r1, pc, #4	; (adr r1, 8013694 <_printf_i+0x40>)
 8013690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013694:	080136ed 	.word	0x080136ed
 8013698:	08013701 	.word	0x08013701
 801369c:	0801367d 	.word	0x0801367d
 80136a0:	0801367d 	.word	0x0801367d
 80136a4:	0801367d 	.word	0x0801367d
 80136a8:	0801367d 	.word	0x0801367d
 80136ac:	08013701 	.word	0x08013701
 80136b0:	0801367d 	.word	0x0801367d
 80136b4:	0801367d 	.word	0x0801367d
 80136b8:	0801367d 	.word	0x0801367d
 80136bc:	0801367d 	.word	0x0801367d
 80136c0:	08013805 	.word	0x08013805
 80136c4:	0801372d 	.word	0x0801372d
 80136c8:	080137bf 	.word	0x080137bf
 80136cc:	0801367d 	.word	0x0801367d
 80136d0:	0801367d 	.word	0x0801367d
 80136d4:	08013827 	.word	0x08013827
 80136d8:	0801367d 	.word	0x0801367d
 80136dc:	0801372d 	.word	0x0801372d
 80136e0:	0801367d 	.word	0x0801367d
 80136e4:	0801367d 	.word	0x0801367d
 80136e8:	080137c7 	.word	0x080137c7
 80136ec:	682b      	ldr	r3, [r5, #0]
 80136ee:	1d1a      	adds	r2, r3, #4
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	602a      	str	r2, [r5, #0]
 80136f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80136fc:	2301      	movs	r3, #1
 80136fe:	e09f      	b.n	8013840 <_printf_i+0x1ec>
 8013700:	6820      	ldr	r0, [r4, #0]
 8013702:	682b      	ldr	r3, [r5, #0]
 8013704:	0607      	lsls	r7, r0, #24
 8013706:	f103 0104 	add.w	r1, r3, #4
 801370a:	6029      	str	r1, [r5, #0]
 801370c:	d501      	bpl.n	8013712 <_printf_i+0xbe>
 801370e:	681e      	ldr	r6, [r3, #0]
 8013710:	e003      	b.n	801371a <_printf_i+0xc6>
 8013712:	0646      	lsls	r6, r0, #25
 8013714:	d5fb      	bpl.n	801370e <_printf_i+0xba>
 8013716:	f9b3 6000 	ldrsh.w	r6, [r3]
 801371a:	2e00      	cmp	r6, #0
 801371c:	da03      	bge.n	8013726 <_printf_i+0xd2>
 801371e:	232d      	movs	r3, #45	; 0x2d
 8013720:	4276      	negs	r6, r6
 8013722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013726:	485a      	ldr	r0, [pc, #360]	; (8013890 <_printf_i+0x23c>)
 8013728:	230a      	movs	r3, #10
 801372a:	e012      	b.n	8013752 <_printf_i+0xfe>
 801372c:	682b      	ldr	r3, [r5, #0]
 801372e:	6820      	ldr	r0, [r4, #0]
 8013730:	1d19      	adds	r1, r3, #4
 8013732:	6029      	str	r1, [r5, #0]
 8013734:	0605      	lsls	r5, r0, #24
 8013736:	d501      	bpl.n	801373c <_printf_i+0xe8>
 8013738:	681e      	ldr	r6, [r3, #0]
 801373a:	e002      	b.n	8013742 <_printf_i+0xee>
 801373c:	0641      	lsls	r1, r0, #25
 801373e:	d5fb      	bpl.n	8013738 <_printf_i+0xe4>
 8013740:	881e      	ldrh	r6, [r3, #0]
 8013742:	4853      	ldr	r0, [pc, #332]	; (8013890 <_printf_i+0x23c>)
 8013744:	2f6f      	cmp	r7, #111	; 0x6f
 8013746:	bf0c      	ite	eq
 8013748:	2308      	moveq	r3, #8
 801374a:	230a      	movne	r3, #10
 801374c:	2100      	movs	r1, #0
 801374e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013752:	6865      	ldr	r5, [r4, #4]
 8013754:	60a5      	str	r5, [r4, #8]
 8013756:	2d00      	cmp	r5, #0
 8013758:	bfa2      	ittt	ge
 801375a:	6821      	ldrge	r1, [r4, #0]
 801375c:	f021 0104 	bicge.w	r1, r1, #4
 8013760:	6021      	strge	r1, [r4, #0]
 8013762:	b90e      	cbnz	r6, 8013768 <_printf_i+0x114>
 8013764:	2d00      	cmp	r5, #0
 8013766:	d04b      	beq.n	8013800 <_printf_i+0x1ac>
 8013768:	4615      	mov	r5, r2
 801376a:	fbb6 f1f3 	udiv	r1, r6, r3
 801376e:	fb03 6711 	mls	r7, r3, r1, r6
 8013772:	5dc7      	ldrb	r7, [r0, r7]
 8013774:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013778:	4637      	mov	r7, r6
 801377a:	42bb      	cmp	r3, r7
 801377c:	460e      	mov	r6, r1
 801377e:	d9f4      	bls.n	801376a <_printf_i+0x116>
 8013780:	2b08      	cmp	r3, #8
 8013782:	d10b      	bne.n	801379c <_printf_i+0x148>
 8013784:	6823      	ldr	r3, [r4, #0]
 8013786:	07de      	lsls	r6, r3, #31
 8013788:	d508      	bpl.n	801379c <_printf_i+0x148>
 801378a:	6923      	ldr	r3, [r4, #16]
 801378c:	6861      	ldr	r1, [r4, #4]
 801378e:	4299      	cmp	r1, r3
 8013790:	bfde      	ittt	le
 8013792:	2330      	movle	r3, #48	; 0x30
 8013794:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013798:	f105 35ff 	addle.w	r5, r5, #4294967295
 801379c:	1b52      	subs	r2, r2, r5
 801379e:	6122      	str	r2, [r4, #16]
 80137a0:	f8cd a000 	str.w	sl, [sp]
 80137a4:	464b      	mov	r3, r9
 80137a6:	aa03      	add	r2, sp, #12
 80137a8:	4621      	mov	r1, r4
 80137aa:	4640      	mov	r0, r8
 80137ac:	f7ff fee4 	bl	8013578 <_printf_common>
 80137b0:	3001      	adds	r0, #1
 80137b2:	d14a      	bne.n	801384a <_printf_i+0x1f6>
 80137b4:	f04f 30ff 	mov.w	r0, #4294967295
 80137b8:	b004      	add	sp, #16
 80137ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137be:	6823      	ldr	r3, [r4, #0]
 80137c0:	f043 0320 	orr.w	r3, r3, #32
 80137c4:	6023      	str	r3, [r4, #0]
 80137c6:	4833      	ldr	r0, [pc, #204]	; (8013894 <_printf_i+0x240>)
 80137c8:	2778      	movs	r7, #120	; 0x78
 80137ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80137ce:	6823      	ldr	r3, [r4, #0]
 80137d0:	6829      	ldr	r1, [r5, #0]
 80137d2:	061f      	lsls	r7, r3, #24
 80137d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80137d8:	d402      	bmi.n	80137e0 <_printf_i+0x18c>
 80137da:	065f      	lsls	r7, r3, #25
 80137dc:	bf48      	it	mi
 80137de:	b2b6      	uxthmi	r6, r6
 80137e0:	07df      	lsls	r7, r3, #31
 80137e2:	bf48      	it	mi
 80137e4:	f043 0320 	orrmi.w	r3, r3, #32
 80137e8:	6029      	str	r1, [r5, #0]
 80137ea:	bf48      	it	mi
 80137ec:	6023      	strmi	r3, [r4, #0]
 80137ee:	b91e      	cbnz	r6, 80137f8 <_printf_i+0x1a4>
 80137f0:	6823      	ldr	r3, [r4, #0]
 80137f2:	f023 0320 	bic.w	r3, r3, #32
 80137f6:	6023      	str	r3, [r4, #0]
 80137f8:	2310      	movs	r3, #16
 80137fa:	e7a7      	b.n	801374c <_printf_i+0xf8>
 80137fc:	4824      	ldr	r0, [pc, #144]	; (8013890 <_printf_i+0x23c>)
 80137fe:	e7e4      	b.n	80137ca <_printf_i+0x176>
 8013800:	4615      	mov	r5, r2
 8013802:	e7bd      	b.n	8013780 <_printf_i+0x12c>
 8013804:	682b      	ldr	r3, [r5, #0]
 8013806:	6826      	ldr	r6, [r4, #0]
 8013808:	6961      	ldr	r1, [r4, #20]
 801380a:	1d18      	adds	r0, r3, #4
 801380c:	6028      	str	r0, [r5, #0]
 801380e:	0635      	lsls	r5, r6, #24
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	d501      	bpl.n	8013818 <_printf_i+0x1c4>
 8013814:	6019      	str	r1, [r3, #0]
 8013816:	e002      	b.n	801381e <_printf_i+0x1ca>
 8013818:	0670      	lsls	r0, r6, #25
 801381a:	d5fb      	bpl.n	8013814 <_printf_i+0x1c0>
 801381c:	8019      	strh	r1, [r3, #0]
 801381e:	2300      	movs	r3, #0
 8013820:	6123      	str	r3, [r4, #16]
 8013822:	4615      	mov	r5, r2
 8013824:	e7bc      	b.n	80137a0 <_printf_i+0x14c>
 8013826:	682b      	ldr	r3, [r5, #0]
 8013828:	1d1a      	adds	r2, r3, #4
 801382a:	602a      	str	r2, [r5, #0]
 801382c:	681d      	ldr	r5, [r3, #0]
 801382e:	6862      	ldr	r2, [r4, #4]
 8013830:	2100      	movs	r1, #0
 8013832:	4628      	mov	r0, r5
 8013834:	f7ec fcd4 	bl	80001e0 <memchr>
 8013838:	b108      	cbz	r0, 801383e <_printf_i+0x1ea>
 801383a:	1b40      	subs	r0, r0, r5
 801383c:	6060      	str	r0, [r4, #4]
 801383e:	6863      	ldr	r3, [r4, #4]
 8013840:	6123      	str	r3, [r4, #16]
 8013842:	2300      	movs	r3, #0
 8013844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013848:	e7aa      	b.n	80137a0 <_printf_i+0x14c>
 801384a:	6923      	ldr	r3, [r4, #16]
 801384c:	462a      	mov	r2, r5
 801384e:	4649      	mov	r1, r9
 8013850:	4640      	mov	r0, r8
 8013852:	47d0      	blx	sl
 8013854:	3001      	adds	r0, #1
 8013856:	d0ad      	beq.n	80137b4 <_printf_i+0x160>
 8013858:	6823      	ldr	r3, [r4, #0]
 801385a:	079b      	lsls	r3, r3, #30
 801385c:	d413      	bmi.n	8013886 <_printf_i+0x232>
 801385e:	68e0      	ldr	r0, [r4, #12]
 8013860:	9b03      	ldr	r3, [sp, #12]
 8013862:	4298      	cmp	r0, r3
 8013864:	bfb8      	it	lt
 8013866:	4618      	movlt	r0, r3
 8013868:	e7a6      	b.n	80137b8 <_printf_i+0x164>
 801386a:	2301      	movs	r3, #1
 801386c:	4632      	mov	r2, r6
 801386e:	4649      	mov	r1, r9
 8013870:	4640      	mov	r0, r8
 8013872:	47d0      	blx	sl
 8013874:	3001      	adds	r0, #1
 8013876:	d09d      	beq.n	80137b4 <_printf_i+0x160>
 8013878:	3501      	adds	r5, #1
 801387a:	68e3      	ldr	r3, [r4, #12]
 801387c:	9903      	ldr	r1, [sp, #12]
 801387e:	1a5b      	subs	r3, r3, r1
 8013880:	42ab      	cmp	r3, r5
 8013882:	dcf2      	bgt.n	801386a <_printf_i+0x216>
 8013884:	e7eb      	b.n	801385e <_printf_i+0x20a>
 8013886:	2500      	movs	r5, #0
 8013888:	f104 0619 	add.w	r6, r4, #25
 801388c:	e7f5      	b.n	801387a <_printf_i+0x226>
 801388e:	bf00      	nop
 8013890:	0801651a 	.word	0x0801651a
 8013894:	0801652b 	.word	0x0801652b

08013898 <std>:
 8013898:	2300      	movs	r3, #0
 801389a:	b510      	push	{r4, lr}
 801389c:	4604      	mov	r4, r0
 801389e:	e9c0 3300 	strd	r3, r3, [r0]
 80138a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80138a6:	6083      	str	r3, [r0, #8]
 80138a8:	8181      	strh	r1, [r0, #12]
 80138aa:	6643      	str	r3, [r0, #100]	; 0x64
 80138ac:	81c2      	strh	r2, [r0, #14]
 80138ae:	6183      	str	r3, [r0, #24]
 80138b0:	4619      	mov	r1, r3
 80138b2:	2208      	movs	r2, #8
 80138b4:	305c      	adds	r0, #92	; 0x5c
 80138b6:	f000 f8e2 	bl	8013a7e <memset>
 80138ba:	4b05      	ldr	r3, [pc, #20]	; (80138d0 <std+0x38>)
 80138bc:	6263      	str	r3, [r4, #36]	; 0x24
 80138be:	4b05      	ldr	r3, [pc, #20]	; (80138d4 <std+0x3c>)
 80138c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80138c2:	4b05      	ldr	r3, [pc, #20]	; (80138d8 <std+0x40>)
 80138c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80138c6:	4b05      	ldr	r3, [pc, #20]	; (80138dc <std+0x44>)
 80138c8:	6224      	str	r4, [r4, #32]
 80138ca:	6323      	str	r3, [r4, #48]	; 0x30
 80138cc:	bd10      	pop	{r4, pc}
 80138ce:	bf00      	nop
 80138d0:	080139f9 	.word	0x080139f9
 80138d4:	08013a1b 	.word	0x08013a1b
 80138d8:	08013a53 	.word	0x08013a53
 80138dc:	08013a77 	.word	0x08013a77

080138e0 <stdio_exit_handler>:
 80138e0:	4a02      	ldr	r2, [pc, #8]	; (80138ec <stdio_exit_handler+0xc>)
 80138e2:	4903      	ldr	r1, [pc, #12]	; (80138f0 <stdio_exit_handler+0x10>)
 80138e4:	4803      	ldr	r0, [pc, #12]	; (80138f4 <stdio_exit_handler+0x14>)
 80138e6:	f000 b869 	b.w	80139bc <_fwalk_sglue>
 80138ea:	bf00      	nop
 80138ec:	20000030 	.word	0x20000030
 80138f0:	08015341 	.word	0x08015341
 80138f4:	2000003c 	.word	0x2000003c

080138f8 <cleanup_stdio>:
 80138f8:	6841      	ldr	r1, [r0, #4]
 80138fa:	4b0c      	ldr	r3, [pc, #48]	; (801392c <cleanup_stdio+0x34>)
 80138fc:	4299      	cmp	r1, r3
 80138fe:	b510      	push	{r4, lr}
 8013900:	4604      	mov	r4, r0
 8013902:	d001      	beq.n	8013908 <cleanup_stdio+0x10>
 8013904:	f001 fd1c 	bl	8015340 <_fflush_r>
 8013908:	68a1      	ldr	r1, [r4, #8]
 801390a:	4b09      	ldr	r3, [pc, #36]	; (8013930 <cleanup_stdio+0x38>)
 801390c:	4299      	cmp	r1, r3
 801390e:	d002      	beq.n	8013916 <cleanup_stdio+0x1e>
 8013910:	4620      	mov	r0, r4
 8013912:	f001 fd15 	bl	8015340 <_fflush_r>
 8013916:	68e1      	ldr	r1, [r4, #12]
 8013918:	4b06      	ldr	r3, [pc, #24]	; (8013934 <cleanup_stdio+0x3c>)
 801391a:	4299      	cmp	r1, r3
 801391c:	d004      	beq.n	8013928 <cleanup_stdio+0x30>
 801391e:	4620      	mov	r0, r4
 8013920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013924:	f001 bd0c 	b.w	8015340 <_fflush_r>
 8013928:	bd10      	pop	{r4, pc}
 801392a:	bf00      	nop
 801392c:	2000da70 	.word	0x2000da70
 8013930:	2000dad8 	.word	0x2000dad8
 8013934:	2000db40 	.word	0x2000db40

08013938 <global_stdio_init.part.0>:
 8013938:	b510      	push	{r4, lr}
 801393a:	4b0b      	ldr	r3, [pc, #44]	; (8013968 <global_stdio_init.part.0+0x30>)
 801393c:	4c0b      	ldr	r4, [pc, #44]	; (801396c <global_stdio_init.part.0+0x34>)
 801393e:	4a0c      	ldr	r2, [pc, #48]	; (8013970 <global_stdio_init.part.0+0x38>)
 8013940:	601a      	str	r2, [r3, #0]
 8013942:	4620      	mov	r0, r4
 8013944:	2200      	movs	r2, #0
 8013946:	2104      	movs	r1, #4
 8013948:	f7ff ffa6 	bl	8013898 <std>
 801394c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013950:	2201      	movs	r2, #1
 8013952:	2109      	movs	r1, #9
 8013954:	f7ff ffa0 	bl	8013898 <std>
 8013958:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801395c:	2202      	movs	r2, #2
 801395e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013962:	2112      	movs	r1, #18
 8013964:	f7ff bf98 	b.w	8013898 <std>
 8013968:	2000dba8 	.word	0x2000dba8
 801396c:	2000da70 	.word	0x2000da70
 8013970:	080138e1 	.word	0x080138e1

08013974 <__sfp_lock_acquire>:
 8013974:	4801      	ldr	r0, [pc, #4]	; (801397c <__sfp_lock_acquire+0x8>)
 8013976:	f000 b955 	b.w	8013c24 <__retarget_lock_acquire_recursive>
 801397a:	bf00      	nop
 801397c:	2000dbb1 	.word	0x2000dbb1

08013980 <__sfp_lock_release>:
 8013980:	4801      	ldr	r0, [pc, #4]	; (8013988 <__sfp_lock_release+0x8>)
 8013982:	f000 b950 	b.w	8013c26 <__retarget_lock_release_recursive>
 8013986:	bf00      	nop
 8013988:	2000dbb1 	.word	0x2000dbb1

0801398c <__sinit>:
 801398c:	b510      	push	{r4, lr}
 801398e:	4604      	mov	r4, r0
 8013990:	f7ff fff0 	bl	8013974 <__sfp_lock_acquire>
 8013994:	6a23      	ldr	r3, [r4, #32]
 8013996:	b11b      	cbz	r3, 80139a0 <__sinit+0x14>
 8013998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801399c:	f7ff bff0 	b.w	8013980 <__sfp_lock_release>
 80139a0:	4b04      	ldr	r3, [pc, #16]	; (80139b4 <__sinit+0x28>)
 80139a2:	6223      	str	r3, [r4, #32]
 80139a4:	4b04      	ldr	r3, [pc, #16]	; (80139b8 <__sinit+0x2c>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d1f5      	bne.n	8013998 <__sinit+0xc>
 80139ac:	f7ff ffc4 	bl	8013938 <global_stdio_init.part.0>
 80139b0:	e7f2      	b.n	8013998 <__sinit+0xc>
 80139b2:	bf00      	nop
 80139b4:	080138f9 	.word	0x080138f9
 80139b8:	2000dba8 	.word	0x2000dba8

080139bc <_fwalk_sglue>:
 80139bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139c0:	4607      	mov	r7, r0
 80139c2:	4688      	mov	r8, r1
 80139c4:	4614      	mov	r4, r2
 80139c6:	2600      	movs	r6, #0
 80139c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80139cc:	f1b9 0901 	subs.w	r9, r9, #1
 80139d0:	d505      	bpl.n	80139de <_fwalk_sglue+0x22>
 80139d2:	6824      	ldr	r4, [r4, #0]
 80139d4:	2c00      	cmp	r4, #0
 80139d6:	d1f7      	bne.n	80139c8 <_fwalk_sglue+0xc>
 80139d8:	4630      	mov	r0, r6
 80139da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139de:	89ab      	ldrh	r3, [r5, #12]
 80139e0:	2b01      	cmp	r3, #1
 80139e2:	d907      	bls.n	80139f4 <_fwalk_sglue+0x38>
 80139e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80139e8:	3301      	adds	r3, #1
 80139ea:	d003      	beq.n	80139f4 <_fwalk_sglue+0x38>
 80139ec:	4629      	mov	r1, r5
 80139ee:	4638      	mov	r0, r7
 80139f0:	47c0      	blx	r8
 80139f2:	4306      	orrs	r6, r0
 80139f4:	3568      	adds	r5, #104	; 0x68
 80139f6:	e7e9      	b.n	80139cc <_fwalk_sglue+0x10>

080139f8 <__sread>:
 80139f8:	b510      	push	{r4, lr}
 80139fa:	460c      	mov	r4, r1
 80139fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a00:	f000 f8c2 	bl	8013b88 <_read_r>
 8013a04:	2800      	cmp	r0, #0
 8013a06:	bfab      	itete	ge
 8013a08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a0a:	89a3      	ldrhlt	r3, [r4, #12]
 8013a0c:	181b      	addge	r3, r3, r0
 8013a0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a12:	bfac      	ite	ge
 8013a14:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a16:	81a3      	strhlt	r3, [r4, #12]
 8013a18:	bd10      	pop	{r4, pc}

08013a1a <__swrite>:
 8013a1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a1e:	461f      	mov	r7, r3
 8013a20:	898b      	ldrh	r3, [r1, #12]
 8013a22:	05db      	lsls	r3, r3, #23
 8013a24:	4605      	mov	r5, r0
 8013a26:	460c      	mov	r4, r1
 8013a28:	4616      	mov	r6, r2
 8013a2a:	d505      	bpl.n	8013a38 <__swrite+0x1e>
 8013a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a30:	2302      	movs	r3, #2
 8013a32:	2200      	movs	r2, #0
 8013a34:	f000 f896 	bl	8013b64 <_lseek_r>
 8013a38:	89a3      	ldrh	r3, [r4, #12]
 8013a3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a42:	81a3      	strh	r3, [r4, #12]
 8013a44:	4632      	mov	r2, r6
 8013a46:	463b      	mov	r3, r7
 8013a48:	4628      	mov	r0, r5
 8013a4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a4e:	f000 b8ad 	b.w	8013bac <_write_r>

08013a52 <__sseek>:
 8013a52:	b510      	push	{r4, lr}
 8013a54:	460c      	mov	r4, r1
 8013a56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a5a:	f000 f883 	bl	8013b64 <_lseek_r>
 8013a5e:	1c43      	adds	r3, r0, #1
 8013a60:	89a3      	ldrh	r3, [r4, #12]
 8013a62:	bf15      	itete	ne
 8013a64:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a6e:	81a3      	strheq	r3, [r4, #12]
 8013a70:	bf18      	it	ne
 8013a72:	81a3      	strhne	r3, [r4, #12]
 8013a74:	bd10      	pop	{r4, pc}

08013a76 <__sclose>:
 8013a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a7a:	f000 b80d 	b.w	8013a98 <_close_r>

08013a7e <memset>:
 8013a7e:	4402      	add	r2, r0
 8013a80:	4603      	mov	r3, r0
 8013a82:	4293      	cmp	r3, r2
 8013a84:	d100      	bne.n	8013a88 <memset+0xa>
 8013a86:	4770      	bx	lr
 8013a88:	f803 1b01 	strb.w	r1, [r3], #1
 8013a8c:	e7f9      	b.n	8013a82 <memset+0x4>
	...

08013a90 <_localeconv_r>:
 8013a90:	4800      	ldr	r0, [pc, #0]	; (8013a94 <_localeconv_r+0x4>)
 8013a92:	4770      	bx	lr
 8013a94:	2000017c 	.word	0x2000017c

08013a98 <_close_r>:
 8013a98:	b538      	push	{r3, r4, r5, lr}
 8013a9a:	4d06      	ldr	r5, [pc, #24]	; (8013ab4 <_close_r+0x1c>)
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	4608      	mov	r0, r1
 8013aa2:	602b      	str	r3, [r5, #0]
 8013aa4:	f7f2 f893 	bl	8005bce <_close>
 8013aa8:	1c43      	adds	r3, r0, #1
 8013aaa:	d102      	bne.n	8013ab2 <_close_r+0x1a>
 8013aac:	682b      	ldr	r3, [r5, #0]
 8013aae:	b103      	cbz	r3, 8013ab2 <_close_r+0x1a>
 8013ab0:	6023      	str	r3, [r4, #0]
 8013ab2:	bd38      	pop	{r3, r4, r5, pc}
 8013ab4:	2000dbac 	.word	0x2000dbac

08013ab8 <_reclaim_reent>:
 8013ab8:	4b29      	ldr	r3, [pc, #164]	; (8013b60 <_reclaim_reent+0xa8>)
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	4283      	cmp	r3, r0
 8013abe:	b570      	push	{r4, r5, r6, lr}
 8013ac0:	4604      	mov	r4, r0
 8013ac2:	d04b      	beq.n	8013b5c <_reclaim_reent+0xa4>
 8013ac4:	69c3      	ldr	r3, [r0, #28]
 8013ac6:	b143      	cbz	r3, 8013ada <_reclaim_reent+0x22>
 8013ac8:	68db      	ldr	r3, [r3, #12]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d144      	bne.n	8013b58 <_reclaim_reent+0xa0>
 8013ace:	69e3      	ldr	r3, [r4, #28]
 8013ad0:	6819      	ldr	r1, [r3, #0]
 8013ad2:	b111      	cbz	r1, 8013ada <_reclaim_reent+0x22>
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	f000 ff31 	bl	801493c <_free_r>
 8013ada:	6961      	ldr	r1, [r4, #20]
 8013adc:	b111      	cbz	r1, 8013ae4 <_reclaim_reent+0x2c>
 8013ade:	4620      	mov	r0, r4
 8013ae0:	f000 ff2c 	bl	801493c <_free_r>
 8013ae4:	69e1      	ldr	r1, [r4, #28]
 8013ae6:	b111      	cbz	r1, 8013aee <_reclaim_reent+0x36>
 8013ae8:	4620      	mov	r0, r4
 8013aea:	f000 ff27 	bl	801493c <_free_r>
 8013aee:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013af0:	b111      	cbz	r1, 8013af8 <_reclaim_reent+0x40>
 8013af2:	4620      	mov	r0, r4
 8013af4:	f000 ff22 	bl	801493c <_free_r>
 8013af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013afa:	b111      	cbz	r1, 8013b02 <_reclaim_reent+0x4a>
 8013afc:	4620      	mov	r0, r4
 8013afe:	f000 ff1d 	bl	801493c <_free_r>
 8013b02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013b04:	b111      	cbz	r1, 8013b0c <_reclaim_reent+0x54>
 8013b06:	4620      	mov	r0, r4
 8013b08:	f000 ff18 	bl	801493c <_free_r>
 8013b0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013b0e:	b111      	cbz	r1, 8013b16 <_reclaim_reent+0x5e>
 8013b10:	4620      	mov	r0, r4
 8013b12:	f000 ff13 	bl	801493c <_free_r>
 8013b16:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013b18:	b111      	cbz	r1, 8013b20 <_reclaim_reent+0x68>
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	f000 ff0e 	bl	801493c <_free_r>
 8013b20:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8013b22:	b111      	cbz	r1, 8013b2a <_reclaim_reent+0x72>
 8013b24:	4620      	mov	r0, r4
 8013b26:	f000 ff09 	bl	801493c <_free_r>
 8013b2a:	6a23      	ldr	r3, [r4, #32]
 8013b2c:	b1b3      	cbz	r3, 8013b5c <_reclaim_reent+0xa4>
 8013b2e:	4620      	mov	r0, r4
 8013b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b34:	4718      	bx	r3
 8013b36:	5949      	ldr	r1, [r1, r5]
 8013b38:	b941      	cbnz	r1, 8013b4c <_reclaim_reent+0x94>
 8013b3a:	3504      	adds	r5, #4
 8013b3c:	69e3      	ldr	r3, [r4, #28]
 8013b3e:	2d80      	cmp	r5, #128	; 0x80
 8013b40:	68d9      	ldr	r1, [r3, #12]
 8013b42:	d1f8      	bne.n	8013b36 <_reclaim_reent+0x7e>
 8013b44:	4620      	mov	r0, r4
 8013b46:	f000 fef9 	bl	801493c <_free_r>
 8013b4a:	e7c0      	b.n	8013ace <_reclaim_reent+0x16>
 8013b4c:	680e      	ldr	r6, [r1, #0]
 8013b4e:	4620      	mov	r0, r4
 8013b50:	f000 fef4 	bl	801493c <_free_r>
 8013b54:	4631      	mov	r1, r6
 8013b56:	e7ef      	b.n	8013b38 <_reclaim_reent+0x80>
 8013b58:	2500      	movs	r5, #0
 8013b5a:	e7ef      	b.n	8013b3c <_reclaim_reent+0x84>
 8013b5c:	bd70      	pop	{r4, r5, r6, pc}
 8013b5e:	bf00      	nop
 8013b60:	20000088 	.word	0x20000088

08013b64 <_lseek_r>:
 8013b64:	b538      	push	{r3, r4, r5, lr}
 8013b66:	4d07      	ldr	r5, [pc, #28]	; (8013b84 <_lseek_r+0x20>)
 8013b68:	4604      	mov	r4, r0
 8013b6a:	4608      	mov	r0, r1
 8013b6c:	4611      	mov	r1, r2
 8013b6e:	2200      	movs	r2, #0
 8013b70:	602a      	str	r2, [r5, #0]
 8013b72:	461a      	mov	r2, r3
 8013b74:	f7f2 f852 	bl	8005c1c <_lseek>
 8013b78:	1c43      	adds	r3, r0, #1
 8013b7a:	d102      	bne.n	8013b82 <_lseek_r+0x1e>
 8013b7c:	682b      	ldr	r3, [r5, #0]
 8013b7e:	b103      	cbz	r3, 8013b82 <_lseek_r+0x1e>
 8013b80:	6023      	str	r3, [r4, #0]
 8013b82:	bd38      	pop	{r3, r4, r5, pc}
 8013b84:	2000dbac 	.word	0x2000dbac

08013b88 <_read_r>:
 8013b88:	b538      	push	{r3, r4, r5, lr}
 8013b8a:	4d07      	ldr	r5, [pc, #28]	; (8013ba8 <_read_r+0x20>)
 8013b8c:	4604      	mov	r4, r0
 8013b8e:	4608      	mov	r0, r1
 8013b90:	4611      	mov	r1, r2
 8013b92:	2200      	movs	r2, #0
 8013b94:	602a      	str	r2, [r5, #0]
 8013b96:	461a      	mov	r2, r3
 8013b98:	f7f1 ffe0 	bl	8005b5c <_read>
 8013b9c:	1c43      	adds	r3, r0, #1
 8013b9e:	d102      	bne.n	8013ba6 <_read_r+0x1e>
 8013ba0:	682b      	ldr	r3, [r5, #0]
 8013ba2:	b103      	cbz	r3, 8013ba6 <_read_r+0x1e>
 8013ba4:	6023      	str	r3, [r4, #0]
 8013ba6:	bd38      	pop	{r3, r4, r5, pc}
 8013ba8:	2000dbac 	.word	0x2000dbac

08013bac <_write_r>:
 8013bac:	b538      	push	{r3, r4, r5, lr}
 8013bae:	4d07      	ldr	r5, [pc, #28]	; (8013bcc <_write_r+0x20>)
 8013bb0:	4604      	mov	r4, r0
 8013bb2:	4608      	mov	r0, r1
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	602a      	str	r2, [r5, #0]
 8013bba:	461a      	mov	r2, r3
 8013bbc:	f7f1 ffeb 	bl	8005b96 <_write>
 8013bc0:	1c43      	adds	r3, r0, #1
 8013bc2:	d102      	bne.n	8013bca <_write_r+0x1e>
 8013bc4:	682b      	ldr	r3, [r5, #0]
 8013bc6:	b103      	cbz	r3, 8013bca <_write_r+0x1e>
 8013bc8:	6023      	str	r3, [r4, #0]
 8013bca:	bd38      	pop	{r3, r4, r5, pc}
 8013bcc:	2000dbac 	.word	0x2000dbac

08013bd0 <__errno>:
 8013bd0:	4b01      	ldr	r3, [pc, #4]	; (8013bd8 <__errno+0x8>)
 8013bd2:	6818      	ldr	r0, [r3, #0]
 8013bd4:	4770      	bx	lr
 8013bd6:	bf00      	nop
 8013bd8:	20000088 	.word	0x20000088

08013bdc <__libc_init_array>:
 8013bdc:	b570      	push	{r4, r5, r6, lr}
 8013bde:	4d0d      	ldr	r5, [pc, #52]	; (8013c14 <__libc_init_array+0x38>)
 8013be0:	4c0d      	ldr	r4, [pc, #52]	; (8013c18 <__libc_init_array+0x3c>)
 8013be2:	1b64      	subs	r4, r4, r5
 8013be4:	10a4      	asrs	r4, r4, #2
 8013be6:	2600      	movs	r6, #0
 8013be8:	42a6      	cmp	r6, r4
 8013bea:	d109      	bne.n	8013c00 <__libc_init_array+0x24>
 8013bec:	4d0b      	ldr	r5, [pc, #44]	; (8013c1c <__libc_init_array+0x40>)
 8013bee:	4c0c      	ldr	r4, [pc, #48]	; (8013c20 <__libc_init_array+0x44>)
 8013bf0:	f001 feec 	bl	80159cc <_init>
 8013bf4:	1b64      	subs	r4, r4, r5
 8013bf6:	10a4      	asrs	r4, r4, #2
 8013bf8:	2600      	movs	r6, #0
 8013bfa:	42a6      	cmp	r6, r4
 8013bfc:	d105      	bne.n	8013c0a <__libc_init_array+0x2e>
 8013bfe:	bd70      	pop	{r4, r5, r6, pc}
 8013c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c04:	4798      	blx	r3
 8013c06:	3601      	adds	r6, #1
 8013c08:	e7ee      	b.n	8013be8 <__libc_init_array+0xc>
 8013c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8013c0e:	4798      	blx	r3
 8013c10:	3601      	adds	r6, #1
 8013c12:	e7f2      	b.n	8013bfa <__libc_init_array+0x1e>
 8013c14:	08016884 	.word	0x08016884
 8013c18:	08016884 	.word	0x08016884
 8013c1c:	08016884 	.word	0x08016884
 8013c20:	08016888 	.word	0x08016888

08013c24 <__retarget_lock_acquire_recursive>:
 8013c24:	4770      	bx	lr

08013c26 <__retarget_lock_release_recursive>:
 8013c26:	4770      	bx	lr

08013c28 <memcpy>:
 8013c28:	440a      	add	r2, r1
 8013c2a:	4291      	cmp	r1, r2
 8013c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013c30:	d100      	bne.n	8013c34 <memcpy+0xc>
 8013c32:	4770      	bx	lr
 8013c34:	b510      	push	{r4, lr}
 8013c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013c3e:	4291      	cmp	r1, r2
 8013c40:	d1f9      	bne.n	8013c36 <memcpy+0xe>
 8013c42:	bd10      	pop	{r4, pc}

08013c44 <quorem>:
 8013c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c48:	6903      	ldr	r3, [r0, #16]
 8013c4a:	690c      	ldr	r4, [r1, #16]
 8013c4c:	42a3      	cmp	r3, r4
 8013c4e:	4607      	mov	r7, r0
 8013c50:	db7e      	blt.n	8013d50 <quorem+0x10c>
 8013c52:	3c01      	subs	r4, #1
 8013c54:	f101 0814 	add.w	r8, r1, #20
 8013c58:	f100 0514 	add.w	r5, r0, #20
 8013c5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013c60:	9301      	str	r3, [sp, #4]
 8013c62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013c66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013c72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013c76:	fbb2 f6f3 	udiv	r6, r2, r3
 8013c7a:	d331      	bcc.n	8013ce0 <quorem+0x9c>
 8013c7c:	f04f 0e00 	mov.w	lr, #0
 8013c80:	4640      	mov	r0, r8
 8013c82:	46ac      	mov	ip, r5
 8013c84:	46f2      	mov	sl, lr
 8013c86:	f850 2b04 	ldr.w	r2, [r0], #4
 8013c8a:	b293      	uxth	r3, r2
 8013c8c:	fb06 e303 	mla	r3, r6, r3, lr
 8013c90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013c94:	0c1a      	lsrs	r2, r3, #16
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	ebaa 0303 	sub.w	r3, sl, r3
 8013c9c:	f8dc a000 	ldr.w	sl, [ip]
 8013ca0:	fa13 f38a 	uxtah	r3, r3, sl
 8013ca4:	fb06 220e 	mla	r2, r6, lr, r2
 8013ca8:	9300      	str	r3, [sp, #0]
 8013caa:	9b00      	ldr	r3, [sp, #0]
 8013cac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013cb0:	b292      	uxth	r2, r2
 8013cb2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013cb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013cba:	f8bd 3000 	ldrh.w	r3, [sp]
 8013cbe:	4581      	cmp	r9, r0
 8013cc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013cc4:	f84c 3b04 	str.w	r3, [ip], #4
 8013cc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013ccc:	d2db      	bcs.n	8013c86 <quorem+0x42>
 8013cce:	f855 300b 	ldr.w	r3, [r5, fp]
 8013cd2:	b92b      	cbnz	r3, 8013ce0 <quorem+0x9c>
 8013cd4:	9b01      	ldr	r3, [sp, #4]
 8013cd6:	3b04      	subs	r3, #4
 8013cd8:	429d      	cmp	r5, r3
 8013cda:	461a      	mov	r2, r3
 8013cdc:	d32c      	bcc.n	8013d38 <quorem+0xf4>
 8013cde:	613c      	str	r4, [r7, #16]
 8013ce0:	4638      	mov	r0, r7
 8013ce2:	f001 f9a7 	bl	8015034 <__mcmp>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	db22      	blt.n	8013d30 <quorem+0xec>
 8013cea:	3601      	adds	r6, #1
 8013cec:	4629      	mov	r1, r5
 8013cee:	2000      	movs	r0, #0
 8013cf0:	f858 2b04 	ldr.w	r2, [r8], #4
 8013cf4:	f8d1 c000 	ldr.w	ip, [r1]
 8013cf8:	b293      	uxth	r3, r2
 8013cfa:	1ac3      	subs	r3, r0, r3
 8013cfc:	0c12      	lsrs	r2, r2, #16
 8013cfe:	fa13 f38c 	uxtah	r3, r3, ip
 8013d02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8013d06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013d0a:	b29b      	uxth	r3, r3
 8013d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013d10:	45c1      	cmp	r9, r8
 8013d12:	f841 3b04 	str.w	r3, [r1], #4
 8013d16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013d1a:	d2e9      	bcs.n	8013cf0 <quorem+0xac>
 8013d1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d24:	b922      	cbnz	r2, 8013d30 <quorem+0xec>
 8013d26:	3b04      	subs	r3, #4
 8013d28:	429d      	cmp	r5, r3
 8013d2a:	461a      	mov	r2, r3
 8013d2c:	d30a      	bcc.n	8013d44 <quorem+0x100>
 8013d2e:	613c      	str	r4, [r7, #16]
 8013d30:	4630      	mov	r0, r6
 8013d32:	b003      	add	sp, #12
 8013d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d38:	6812      	ldr	r2, [r2, #0]
 8013d3a:	3b04      	subs	r3, #4
 8013d3c:	2a00      	cmp	r2, #0
 8013d3e:	d1ce      	bne.n	8013cde <quorem+0x9a>
 8013d40:	3c01      	subs	r4, #1
 8013d42:	e7c9      	b.n	8013cd8 <quorem+0x94>
 8013d44:	6812      	ldr	r2, [r2, #0]
 8013d46:	3b04      	subs	r3, #4
 8013d48:	2a00      	cmp	r2, #0
 8013d4a:	d1f0      	bne.n	8013d2e <quorem+0xea>
 8013d4c:	3c01      	subs	r4, #1
 8013d4e:	e7eb      	b.n	8013d28 <quorem+0xe4>
 8013d50:	2000      	movs	r0, #0
 8013d52:	e7ee      	b.n	8013d32 <quorem+0xee>
 8013d54:	0000      	movs	r0, r0
	...

08013d58 <_dtoa_r>:
 8013d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d5c:	ed2d 8b04 	vpush	{d8-d9}
 8013d60:	69c5      	ldr	r5, [r0, #28]
 8013d62:	b093      	sub	sp, #76	; 0x4c
 8013d64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013d68:	ec57 6b10 	vmov	r6, r7, d0
 8013d6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013d70:	9107      	str	r1, [sp, #28]
 8013d72:	4604      	mov	r4, r0
 8013d74:	920a      	str	r2, [sp, #40]	; 0x28
 8013d76:	930d      	str	r3, [sp, #52]	; 0x34
 8013d78:	b975      	cbnz	r5, 8013d98 <_dtoa_r+0x40>
 8013d7a:	2010      	movs	r0, #16
 8013d7c:	f000 fe2a 	bl	80149d4 <malloc>
 8013d80:	4602      	mov	r2, r0
 8013d82:	61e0      	str	r0, [r4, #28]
 8013d84:	b920      	cbnz	r0, 8013d90 <_dtoa_r+0x38>
 8013d86:	4bae      	ldr	r3, [pc, #696]	; (8014040 <_dtoa_r+0x2e8>)
 8013d88:	21ef      	movs	r1, #239	; 0xef
 8013d8a:	48ae      	ldr	r0, [pc, #696]	; (8014044 <_dtoa_r+0x2ec>)
 8013d8c:	f001 fb10 	bl	80153b0 <__assert_func>
 8013d90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013d94:	6005      	str	r5, [r0, #0]
 8013d96:	60c5      	str	r5, [r0, #12]
 8013d98:	69e3      	ldr	r3, [r4, #28]
 8013d9a:	6819      	ldr	r1, [r3, #0]
 8013d9c:	b151      	cbz	r1, 8013db4 <_dtoa_r+0x5c>
 8013d9e:	685a      	ldr	r2, [r3, #4]
 8013da0:	604a      	str	r2, [r1, #4]
 8013da2:	2301      	movs	r3, #1
 8013da4:	4093      	lsls	r3, r2
 8013da6:	608b      	str	r3, [r1, #8]
 8013da8:	4620      	mov	r0, r4
 8013daa:	f000 ff07 	bl	8014bbc <_Bfree>
 8013dae:	69e3      	ldr	r3, [r4, #28]
 8013db0:	2200      	movs	r2, #0
 8013db2:	601a      	str	r2, [r3, #0]
 8013db4:	1e3b      	subs	r3, r7, #0
 8013db6:	bfbb      	ittet	lt
 8013db8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013dbc:	9303      	strlt	r3, [sp, #12]
 8013dbe:	2300      	movge	r3, #0
 8013dc0:	2201      	movlt	r2, #1
 8013dc2:	bfac      	ite	ge
 8013dc4:	f8c8 3000 	strge.w	r3, [r8]
 8013dc8:	f8c8 2000 	strlt.w	r2, [r8]
 8013dcc:	4b9e      	ldr	r3, [pc, #632]	; (8014048 <_dtoa_r+0x2f0>)
 8013dce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8013dd2:	ea33 0308 	bics.w	r3, r3, r8
 8013dd6:	d11b      	bne.n	8013e10 <_dtoa_r+0xb8>
 8013dd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013dda:	f242 730f 	movw	r3, #9999	; 0x270f
 8013dde:	6013      	str	r3, [r2, #0]
 8013de0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8013de4:	4333      	orrs	r3, r6
 8013de6:	f000 8593 	beq.w	8014910 <_dtoa_r+0xbb8>
 8013dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013dec:	b963      	cbnz	r3, 8013e08 <_dtoa_r+0xb0>
 8013dee:	4b97      	ldr	r3, [pc, #604]	; (801404c <_dtoa_r+0x2f4>)
 8013df0:	e027      	b.n	8013e42 <_dtoa_r+0xea>
 8013df2:	4b97      	ldr	r3, [pc, #604]	; (8014050 <_dtoa_r+0x2f8>)
 8013df4:	9300      	str	r3, [sp, #0]
 8013df6:	3308      	adds	r3, #8
 8013df8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013dfa:	6013      	str	r3, [r2, #0]
 8013dfc:	9800      	ldr	r0, [sp, #0]
 8013dfe:	b013      	add	sp, #76	; 0x4c
 8013e00:	ecbd 8b04 	vpop	{d8-d9}
 8013e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e08:	4b90      	ldr	r3, [pc, #576]	; (801404c <_dtoa_r+0x2f4>)
 8013e0a:	9300      	str	r3, [sp, #0]
 8013e0c:	3303      	adds	r3, #3
 8013e0e:	e7f3      	b.n	8013df8 <_dtoa_r+0xa0>
 8013e10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013e14:	2200      	movs	r2, #0
 8013e16:	ec51 0b17 	vmov	r0, r1, d7
 8013e1a:	eeb0 8a47 	vmov.f32	s16, s14
 8013e1e:	eef0 8a67 	vmov.f32	s17, s15
 8013e22:	2300      	movs	r3, #0
 8013e24:	f7ec fe58 	bl	8000ad8 <__aeabi_dcmpeq>
 8013e28:	4681      	mov	r9, r0
 8013e2a:	b160      	cbz	r0, 8013e46 <_dtoa_r+0xee>
 8013e2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013e2e:	2301      	movs	r3, #1
 8013e30:	6013      	str	r3, [r2, #0]
 8013e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	f000 8568 	beq.w	801490a <_dtoa_r+0xbb2>
 8013e3a:	4b86      	ldr	r3, [pc, #536]	; (8014054 <_dtoa_r+0x2fc>)
 8013e3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013e3e:	6013      	str	r3, [r2, #0]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	9300      	str	r3, [sp, #0]
 8013e44:	e7da      	b.n	8013dfc <_dtoa_r+0xa4>
 8013e46:	aa10      	add	r2, sp, #64	; 0x40
 8013e48:	a911      	add	r1, sp, #68	; 0x44
 8013e4a:	4620      	mov	r0, r4
 8013e4c:	eeb0 0a48 	vmov.f32	s0, s16
 8013e50:	eef0 0a68 	vmov.f32	s1, s17
 8013e54:	f001 f994 	bl	8015180 <__d2b>
 8013e58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013e5c:	4682      	mov	sl, r0
 8013e5e:	2d00      	cmp	r5, #0
 8013e60:	d07f      	beq.n	8013f62 <_dtoa_r+0x20a>
 8013e62:	ee18 3a90 	vmov	r3, s17
 8013e66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8013e6e:	ec51 0b18 	vmov	r0, r1, d8
 8013e72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013e76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013e7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8013e7e:	4619      	mov	r1, r3
 8013e80:	2200      	movs	r2, #0
 8013e82:	4b75      	ldr	r3, [pc, #468]	; (8014058 <_dtoa_r+0x300>)
 8013e84:	f7ec fa08 	bl	8000298 <__aeabi_dsub>
 8013e88:	a367      	add	r3, pc, #412	; (adr r3, 8014028 <_dtoa_r+0x2d0>)
 8013e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8e:	f7ec fbbb 	bl	8000608 <__aeabi_dmul>
 8013e92:	a367      	add	r3, pc, #412	; (adr r3, 8014030 <_dtoa_r+0x2d8>)
 8013e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e98:	f7ec fa00 	bl	800029c <__adddf3>
 8013e9c:	4606      	mov	r6, r0
 8013e9e:	4628      	mov	r0, r5
 8013ea0:	460f      	mov	r7, r1
 8013ea2:	f7ec fb47 	bl	8000534 <__aeabi_i2d>
 8013ea6:	a364      	add	r3, pc, #400	; (adr r3, 8014038 <_dtoa_r+0x2e0>)
 8013ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eac:	f7ec fbac 	bl	8000608 <__aeabi_dmul>
 8013eb0:	4602      	mov	r2, r0
 8013eb2:	460b      	mov	r3, r1
 8013eb4:	4630      	mov	r0, r6
 8013eb6:	4639      	mov	r1, r7
 8013eb8:	f7ec f9f0 	bl	800029c <__adddf3>
 8013ebc:	4606      	mov	r6, r0
 8013ebe:	460f      	mov	r7, r1
 8013ec0:	f7ec fe52 	bl	8000b68 <__aeabi_d2iz>
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	4683      	mov	fp, r0
 8013ec8:	2300      	movs	r3, #0
 8013eca:	4630      	mov	r0, r6
 8013ecc:	4639      	mov	r1, r7
 8013ece:	f7ec fe0d 	bl	8000aec <__aeabi_dcmplt>
 8013ed2:	b148      	cbz	r0, 8013ee8 <_dtoa_r+0x190>
 8013ed4:	4658      	mov	r0, fp
 8013ed6:	f7ec fb2d 	bl	8000534 <__aeabi_i2d>
 8013eda:	4632      	mov	r2, r6
 8013edc:	463b      	mov	r3, r7
 8013ede:	f7ec fdfb 	bl	8000ad8 <__aeabi_dcmpeq>
 8013ee2:	b908      	cbnz	r0, 8013ee8 <_dtoa_r+0x190>
 8013ee4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013ee8:	f1bb 0f16 	cmp.w	fp, #22
 8013eec:	d857      	bhi.n	8013f9e <_dtoa_r+0x246>
 8013eee:	4b5b      	ldr	r3, [pc, #364]	; (801405c <_dtoa_r+0x304>)
 8013ef0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef8:	ec51 0b18 	vmov	r0, r1, d8
 8013efc:	f7ec fdf6 	bl	8000aec <__aeabi_dcmplt>
 8013f00:	2800      	cmp	r0, #0
 8013f02:	d04e      	beq.n	8013fa2 <_dtoa_r+0x24a>
 8013f04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f08:	2300      	movs	r3, #0
 8013f0a:	930c      	str	r3, [sp, #48]	; 0x30
 8013f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013f0e:	1b5b      	subs	r3, r3, r5
 8013f10:	1e5a      	subs	r2, r3, #1
 8013f12:	bf45      	ittet	mi
 8013f14:	f1c3 0301 	rsbmi	r3, r3, #1
 8013f18:	9305      	strmi	r3, [sp, #20]
 8013f1a:	2300      	movpl	r3, #0
 8013f1c:	2300      	movmi	r3, #0
 8013f1e:	9206      	str	r2, [sp, #24]
 8013f20:	bf54      	ite	pl
 8013f22:	9305      	strpl	r3, [sp, #20]
 8013f24:	9306      	strmi	r3, [sp, #24]
 8013f26:	f1bb 0f00 	cmp.w	fp, #0
 8013f2a:	db3c      	blt.n	8013fa6 <_dtoa_r+0x24e>
 8013f2c:	9b06      	ldr	r3, [sp, #24]
 8013f2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8013f32:	445b      	add	r3, fp
 8013f34:	9306      	str	r3, [sp, #24]
 8013f36:	2300      	movs	r3, #0
 8013f38:	9308      	str	r3, [sp, #32]
 8013f3a:	9b07      	ldr	r3, [sp, #28]
 8013f3c:	2b09      	cmp	r3, #9
 8013f3e:	d868      	bhi.n	8014012 <_dtoa_r+0x2ba>
 8013f40:	2b05      	cmp	r3, #5
 8013f42:	bfc4      	itt	gt
 8013f44:	3b04      	subgt	r3, #4
 8013f46:	9307      	strgt	r3, [sp, #28]
 8013f48:	9b07      	ldr	r3, [sp, #28]
 8013f4a:	f1a3 0302 	sub.w	r3, r3, #2
 8013f4e:	bfcc      	ite	gt
 8013f50:	2500      	movgt	r5, #0
 8013f52:	2501      	movle	r5, #1
 8013f54:	2b03      	cmp	r3, #3
 8013f56:	f200 8085 	bhi.w	8014064 <_dtoa_r+0x30c>
 8013f5a:	e8df f003 	tbb	[pc, r3]
 8013f5e:	3b2e      	.short	0x3b2e
 8013f60:	5839      	.short	0x5839
 8013f62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013f66:	441d      	add	r5, r3
 8013f68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013f6c:	2b20      	cmp	r3, #32
 8013f6e:	bfc1      	itttt	gt
 8013f70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013f74:	fa08 f803 	lslgt.w	r8, r8, r3
 8013f78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8013f7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8013f80:	bfd6      	itet	le
 8013f82:	f1c3 0320 	rsble	r3, r3, #32
 8013f86:	ea48 0003 	orrgt.w	r0, r8, r3
 8013f8a:	fa06 f003 	lslle.w	r0, r6, r3
 8013f8e:	f7ec fac1 	bl	8000514 <__aeabi_ui2d>
 8013f92:	2201      	movs	r2, #1
 8013f94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8013f98:	3d01      	subs	r5, #1
 8013f9a:	920e      	str	r2, [sp, #56]	; 0x38
 8013f9c:	e76f      	b.n	8013e7e <_dtoa_r+0x126>
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	e7b3      	b.n	8013f0a <_dtoa_r+0x1b2>
 8013fa2:	900c      	str	r0, [sp, #48]	; 0x30
 8013fa4:	e7b2      	b.n	8013f0c <_dtoa_r+0x1b4>
 8013fa6:	9b05      	ldr	r3, [sp, #20]
 8013fa8:	eba3 030b 	sub.w	r3, r3, fp
 8013fac:	9305      	str	r3, [sp, #20]
 8013fae:	f1cb 0300 	rsb	r3, fp, #0
 8013fb2:	9308      	str	r3, [sp, #32]
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8013fb8:	e7bf      	b.n	8013f3a <_dtoa_r+0x1e2>
 8013fba:	2300      	movs	r3, #0
 8013fbc:	9309      	str	r3, [sp, #36]	; 0x24
 8013fbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	dc52      	bgt.n	801406a <_dtoa_r+0x312>
 8013fc4:	2301      	movs	r3, #1
 8013fc6:	9301      	str	r3, [sp, #4]
 8013fc8:	9304      	str	r3, [sp, #16]
 8013fca:	461a      	mov	r2, r3
 8013fcc:	920a      	str	r2, [sp, #40]	; 0x28
 8013fce:	e00b      	b.n	8013fe8 <_dtoa_r+0x290>
 8013fd0:	2301      	movs	r3, #1
 8013fd2:	e7f3      	b.n	8013fbc <_dtoa_r+0x264>
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8013fd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fda:	445b      	add	r3, fp
 8013fdc:	9301      	str	r3, [sp, #4]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	2b01      	cmp	r3, #1
 8013fe2:	9304      	str	r3, [sp, #16]
 8013fe4:	bfb8      	it	lt
 8013fe6:	2301      	movlt	r3, #1
 8013fe8:	69e0      	ldr	r0, [r4, #28]
 8013fea:	2100      	movs	r1, #0
 8013fec:	2204      	movs	r2, #4
 8013fee:	f102 0614 	add.w	r6, r2, #20
 8013ff2:	429e      	cmp	r6, r3
 8013ff4:	d93d      	bls.n	8014072 <_dtoa_r+0x31a>
 8013ff6:	6041      	str	r1, [r0, #4]
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	f000 fd9f 	bl	8014b3c <_Balloc>
 8013ffe:	9000      	str	r0, [sp, #0]
 8014000:	2800      	cmp	r0, #0
 8014002:	d139      	bne.n	8014078 <_dtoa_r+0x320>
 8014004:	4b16      	ldr	r3, [pc, #88]	; (8014060 <_dtoa_r+0x308>)
 8014006:	4602      	mov	r2, r0
 8014008:	f240 11af 	movw	r1, #431	; 0x1af
 801400c:	e6bd      	b.n	8013d8a <_dtoa_r+0x32>
 801400e:	2301      	movs	r3, #1
 8014010:	e7e1      	b.n	8013fd6 <_dtoa_r+0x27e>
 8014012:	2501      	movs	r5, #1
 8014014:	2300      	movs	r3, #0
 8014016:	9307      	str	r3, [sp, #28]
 8014018:	9509      	str	r5, [sp, #36]	; 0x24
 801401a:	f04f 33ff 	mov.w	r3, #4294967295
 801401e:	9301      	str	r3, [sp, #4]
 8014020:	9304      	str	r3, [sp, #16]
 8014022:	2200      	movs	r2, #0
 8014024:	2312      	movs	r3, #18
 8014026:	e7d1      	b.n	8013fcc <_dtoa_r+0x274>
 8014028:	636f4361 	.word	0x636f4361
 801402c:	3fd287a7 	.word	0x3fd287a7
 8014030:	8b60c8b3 	.word	0x8b60c8b3
 8014034:	3fc68a28 	.word	0x3fc68a28
 8014038:	509f79fb 	.word	0x509f79fb
 801403c:	3fd34413 	.word	0x3fd34413
 8014040:	08016549 	.word	0x08016549
 8014044:	08016560 	.word	0x08016560
 8014048:	7ff00000 	.word	0x7ff00000
 801404c:	08016545 	.word	0x08016545
 8014050:	0801653c 	.word	0x0801653c
 8014054:	08016519 	.word	0x08016519
 8014058:	3ff80000 	.word	0x3ff80000
 801405c:	08016650 	.word	0x08016650
 8014060:	080165b8 	.word	0x080165b8
 8014064:	2301      	movs	r3, #1
 8014066:	9309      	str	r3, [sp, #36]	; 0x24
 8014068:	e7d7      	b.n	801401a <_dtoa_r+0x2c2>
 801406a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801406c:	9301      	str	r3, [sp, #4]
 801406e:	9304      	str	r3, [sp, #16]
 8014070:	e7ba      	b.n	8013fe8 <_dtoa_r+0x290>
 8014072:	3101      	adds	r1, #1
 8014074:	0052      	lsls	r2, r2, #1
 8014076:	e7ba      	b.n	8013fee <_dtoa_r+0x296>
 8014078:	69e3      	ldr	r3, [r4, #28]
 801407a:	9a00      	ldr	r2, [sp, #0]
 801407c:	601a      	str	r2, [r3, #0]
 801407e:	9b04      	ldr	r3, [sp, #16]
 8014080:	2b0e      	cmp	r3, #14
 8014082:	f200 80a8 	bhi.w	80141d6 <_dtoa_r+0x47e>
 8014086:	2d00      	cmp	r5, #0
 8014088:	f000 80a5 	beq.w	80141d6 <_dtoa_r+0x47e>
 801408c:	f1bb 0f00 	cmp.w	fp, #0
 8014090:	dd38      	ble.n	8014104 <_dtoa_r+0x3ac>
 8014092:	4bc0      	ldr	r3, [pc, #768]	; (8014394 <_dtoa_r+0x63c>)
 8014094:	f00b 020f 	and.w	r2, fp, #15
 8014098:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801409c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80140a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80140a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80140a8:	d019      	beq.n	80140de <_dtoa_r+0x386>
 80140aa:	4bbb      	ldr	r3, [pc, #748]	; (8014398 <_dtoa_r+0x640>)
 80140ac:	ec51 0b18 	vmov	r0, r1, d8
 80140b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80140b4:	f7ec fbd2 	bl	800085c <__aeabi_ddiv>
 80140b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140bc:	f008 080f 	and.w	r8, r8, #15
 80140c0:	2503      	movs	r5, #3
 80140c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014398 <_dtoa_r+0x640>
 80140c6:	f1b8 0f00 	cmp.w	r8, #0
 80140ca:	d10a      	bne.n	80140e2 <_dtoa_r+0x38a>
 80140cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140d0:	4632      	mov	r2, r6
 80140d2:	463b      	mov	r3, r7
 80140d4:	f7ec fbc2 	bl	800085c <__aeabi_ddiv>
 80140d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80140dc:	e02b      	b.n	8014136 <_dtoa_r+0x3de>
 80140de:	2502      	movs	r5, #2
 80140e0:	e7ef      	b.n	80140c2 <_dtoa_r+0x36a>
 80140e2:	f018 0f01 	tst.w	r8, #1
 80140e6:	d008      	beq.n	80140fa <_dtoa_r+0x3a2>
 80140e8:	4630      	mov	r0, r6
 80140ea:	4639      	mov	r1, r7
 80140ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 80140f0:	f7ec fa8a 	bl	8000608 <__aeabi_dmul>
 80140f4:	3501      	adds	r5, #1
 80140f6:	4606      	mov	r6, r0
 80140f8:	460f      	mov	r7, r1
 80140fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80140fe:	f109 0908 	add.w	r9, r9, #8
 8014102:	e7e0      	b.n	80140c6 <_dtoa_r+0x36e>
 8014104:	f000 809f 	beq.w	8014246 <_dtoa_r+0x4ee>
 8014108:	f1cb 0600 	rsb	r6, fp, #0
 801410c:	4ba1      	ldr	r3, [pc, #644]	; (8014394 <_dtoa_r+0x63c>)
 801410e:	4fa2      	ldr	r7, [pc, #648]	; (8014398 <_dtoa_r+0x640>)
 8014110:	f006 020f 	and.w	r2, r6, #15
 8014114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014118:	e9d3 2300 	ldrd	r2, r3, [r3]
 801411c:	ec51 0b18 	vmov	r0, r1, d8
 8014120:	f7ec fa72 	bl	8000608 <__aeabi_dmul>
 8014124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014128:	1136      	asrs	r6, r6, #4
 801412a:	2300      	movs	r3, #0
 801412c:	2502      	movs	r5, #2
 801412e:	2e00      	cmp	r6, #0
 8014130:	d17e      	bne.n	8014230 <_dtoa_r+0x4d8>
 8014132:	2b00      	cmp	r3, #0
 8014134:	d1d0      	bne.n	80140d8 <_dtoa_r+0x380>
 8014136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014138:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801413c:	2b00      	cmp	r3, #0
 801413e:	f000 8084 	beq.w	801424a <_dtoa_r+0x4f2>
 8014142:	4b96      	ldr	r3, [pc, #600]	; (801439c <_dtoa_r+0x644>)
 8014144:	2200      	movs	r2, #0
 8014146:	4640      	mov	r0, r8
 8014148:	4649      	mov	r1, r9
 801414a:	f7ec fccf 	bl	8000aec <__aeabi_dcmplt>
 801414e:	2800      	cmp	r0, #0
 8014150:	d07b      	beq.n	801424a <_dtoa_r+0x4f2>
 8014152:	9b04      	ldr	r3, [sp, #16]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d078      	beq.n	801424a <_dtoa_r+0x4f2>
 8014158:	9b01      	ldr	r3, [sp, #4]
 801415a:	2b00      	cmp	r3, #0
 801415c:	dd39      	ble.n	80141d2 <_dtoa_r+0x47a>
 801415e:	4b90      	ldr	r3, [pc, #576]	; (80143a0 <_dtoa_r+0x648>)
 8014160:	2200      	movs	r2, #0
 8014162:	4640      	mov	r0, r8
 8014164:	4649      	mov	r1, r9
 8014166:	f7ec fa4f 	bl	8000608 <__aeabi_dmul>
 801416a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801416e:	9e01      	ldr	r6, [sp, #4]
 8014170:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014174:	3501      	adds	r5, #1
 8014176:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801417a:	4628      	mov	r0, r5
 801417c:	f7ec f9da 	bl	8000534 <__aeabi_i2d>
 8014180:	4642      	mov	r2, r8
 8014182:	464b      	mov	r3, r9
 8014184:	f7ec fa40 	bl	8000608 <__aeabi_dmul>
 8014188:	4b86      	ldr	r3, [pc, #536]	; (80143a4 <_dtoa_r+0x64c>)
 801418a:	2200      	movs	r2, #0
 801418c:	f7ec f886 	bl	800029c <__adddf3>
 8014190:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8014194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014198:	9303      	str	r3, [sp, #12]
 801419a:	2e00      	cmp	r6, #0
 801419c:	d158      	bne.n	8014250 <_dtoa_r+0x4f8>
 801419e:	4b82      	ldr	r3, [pc, #520]	; (80143a8 <_dtoa_r+0x650>)
 80141a0:	2200      	movs	r2, #0
 80141a2:	4640      	mov	r0, r8
 80141a4:	4649      	mov	r1, r9
 80141a6:	f7ec f877 	bl	8000298 <__aeabi_dsub>
 80141aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80141ae:	4680      	mov	r8, r0
 80141b0:	4689      	mov	r9, r1
 80141b2:	f7ec fcb9 	bl	8000b28 <__aeabi_dcmpgt>
 80141b6:	2800      	cmp	r0, #0
 80141b8:	f040 8296 	bne.w	80146e8 <_dtoa_r+0x990>
 80141bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80141c0:	4640      	mov	r0, r8
 80141c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141c6:	4649      	mov	r1, r9
 80141c8:	f7ec fc90 	bl	8000aec <__aeabi_dcmplt>
 80141cc:	2800      	cmp	r0, #0
 80141ce:	f040 8289 	bne.w	80146e4 <_dtoa_r+0x98c>
 80141d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80141d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80141d8:	2b00      	cmp	r3, #0
 80141da:	f2c0 814e 	blt.w	801447a <_dtoa_r+0x722>
 80141de:	f1bb 0f0e 	cmp.w	fp, #14
 80141e2:	f300 814a 	bgt.w	801447a <_dtoa_r+0x722>
 80141e6:	4b6b      	ldr	r3, [pc, #428]	; (8014394 <_dtoa_r+0x63c>)
 80141e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80141ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80141f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	f280 80dc 	bge.w	80143b0 <_dtoa_r+0x658>
 80141f8:	9b04      	ldr	r3, [sp, #16]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	f300 80d8 	bgt.w	80143b0 <_dtoa_r+0x658>
 8014200:	f040 826f 	bne.w	80146e2 <_dtoa_r+0x98a>
 8014204:	4b68      	ldr	r3, [pc, #416]	; (80143a8 <_dtoa_r+0x650>)
 8014206:	2200      	movs	r2, #0
 8014208:	4640      	mov	r0, r8
 801420a:	4649      	mov	r1, r9
 801420c:	f7ec f9fc 	bl	8000608 <__aeabi_dmul>
 8014210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014214:	f7ec fc7e 	bl	8000b14 <__aeabi_dcmpge>
 8014218:	9e04      	ldr	r6, [sp, #16]
 801421a:	4637      	mov	r7, r6
 801421c:	2800      	cmp	r0, #0
 801421e:	f040 8245 	bne.w	80146ac <_dtoa_r+0x954>
 8014222:	9d00      	ldr	r5, [sp, #0]
 8014224:	2331      	movs	r3, #49	; 0x31
 8014226:	f805 3b01 	strb.w	r3, [r5], #1
 801422a:	f10b 0b01 	add.w	fp, fp, #1
 801422e:	e241      	b.n	80146b4 <_dtoa_r+0x95c>
 8014230:	07f2      	lsls	r2, r6, #31
 8014232:	d505      	bpl.n	8014240 <_dtoa_r+0x4e8>
 8014234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014238:	f7ec f9e6 	bl	8000608 <__aeabi_dmul>
 801423c:	3501      	adds	r5, #1
 801423e:	2301      	movs	r3, #1
 8014240:	1076      	asrs	r6, r6, #1
 8014242:	3708      	adds	r7, #8
 8014244:	e773      	b.n	801412e <_dtoa_r+0x3d6>
 8014246:	2502      	movs	r5, #2
 8014248:	e775      	b.n	8014136 <_dtoa_r+0x3de>
 801424a:	9e04      	ldr	r6, [sp, #16]
 801424c:	465f      	mov	r7, fp
 801424e:	e792      	b.n	8014176 <_dtoa_r+0x41e>
 8014250:	9900      	ldr	r1, [sp, #0]
 8014252:	4b50      	ldr	r3, [pc, #320]	; (8014394 <_dtoa_r+0x63c>)
 8014254:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014258:	4431      	add	r1, r6
 801425a:	9102      	str	r1, [sp, #8]
 801425c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801425e:	eeb0 9a47 	vmov.f32	s18, s14
 8014262:	eef0 9a67 	vmov.f32	s19, s15
 8014266:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801426a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801426e:	2900      	cmp	r1, #0
 8014270:	d044      	beq.n	80142fc <_dtoa_r+0x5a4>
 8014272:	494e      	ldr	r1, [pc, #312]	; (80143ac <_dtoa_r+0x654>)
 8014274:	2000      	movs	r0, #0
 8014276:	f7ec faf1 	bl	800085c <__aeabi_ddiv>
 801427a:	ec53 2b19 	vmov	r2, r3, d9
 801427e:	f7ec f80b 	bl	8000298 <__aeabi_dsub>
 8014282:	9d00      	ldr	r5, [sp, #0]
 8014284:	ec41 0b19 	vmov	d9, r0, r1
 8014288:	4649      	mov	r1, r9
 801428a:	4640      	mov	r0, r8
 801428c:	f7ec fc6c 	bl	8000b68 <__aeabi_d2iz>
 8014290:	4606      	mov	r6, r0
 8014292:	f7ec f94f 	bl	8000534 <__aeabi_i2d>
 8014296:	4602      	mov	r2, r0
 8014298:	460b      	mov	r3, r1
 801429a:	4640      	mov	r0, r8
 801429c:	4649      	mov	r1, r9
 801429e:	f7eb fffb 	bl	8000298 <__aeabi_dsub>
 80142a2:	3630      	adds	r6, #48	; 0x30
 80142a4:	f805 6b01 	strb.w	r6, [r5], #1
 80142a8:	ec53 2b19 	vmov	r2, r3, d9
 80142ac:	4680      	mov	r8, r0
 80142ae:	4689      	mov	r9, r1
 80142b0:	f7ec fc1c 	bl	8000aec <__aeabi_dcmplt>
 80142b4:	2800      	cmp	r0, #0
 80142b6:	d164      	bne.n	8014382 <_dtoa_r+0x62a>
 80142b8:	4642      	mov	r2, r8
 80142ba:	464b      	mov	r3, r9
 80142bc:	4937      	ldr	r1, [pc, #220]	; (801439c <_dtoa_r+0x644>)
 80142be:	2000      	movs	r0, #0
 80142c0:	f7eb ffea 	bl	8000298 <__aeabi_dsub>
 80142c4:	ec53 2b19 	vmov	r2, r3, d9
 80142c8:	f7ec fc10 	bl	8000aec <__aeabi_dcmplt>
 80142cc:	2800      	cmp	r0, #0
 80142ce:	f040 80b6 	bne.w	801443e <_dtoa_r+0x6e6>
 80142d2:	9b02      	ldr	r3, [sp, #8]
 80142d4:	429d      	cmp	r5, r3
 80142d6:	f43f af7c 	beq.w	80141d2 <_dtoa_r+0x47a>
 80142da:	4b31      	ldr	r3, [pc, #196]	; (80143a0 <_dtoa_r+0x648>)
 80142dc:	ec51 0b19 	vmov	r0, r1, d9
 80142e0:	2200      	movs	r2, #0
 80142e2:	f7ec f991 	bl	8000608 <__aeabi_dmul>
 80142e6:	4b2e      	ldr	r3, [pc, #184]	; (80143a0 <_dtoa_r+0x648>)
 80142e8:	ec41 0b19 	vmov	d9, r0, r1
 80142ec:	2200      	movs	r2, #0
 80142ee:	4640      	mov	r0, r8
 80142f0:	4649      	mov	r1, r9
 80142f2:	f7ec f989 	bl	8000608 <__aeabi_dmul>
 80142f6:	4680      	mov	r8, r0
 80142f8:	4689      	mov	r9, r1
 80142fa:	e7c5      	b.n	8014288 <_dtoa_r+0x530>
 80142fc:	ec51 0b17 	vmov	r0, r1, d7
 8014300:	f7ec f982 	bl	8000608 <__aeabi_dmul>
 8014304:	9b02      	ldr	r3, [sp, #8]
 8014306:	9d00      	ldr	r5, [sp, #0]
 8014308:	930f      	str	r3, [sp, #60]	; 0x3c
 801430a:	ec41 0b19 	vmov	d9, r0, r1
 801430e:	4649      	mov	r1, r9
 8014310:	4640      	mov	r0, r8
 8014312:	f7ec fc29 	bl	8000b68 <__aeabi_d2iz>
 8014316:	4606      	mov	r6, r0
 8014318:	f7ec f90c 	bl	8000534 <__aeabi_i2d>
 801431c:	3630      	adds	r6, #48	; 0x30
 801431e:	4602      	mov	r2, r0
 8014320:	460b      	mov	r3, r1
 8014322:	4640      	mov	r0, r8
 8014324:	4649      	mov	r1, r9
 8014326:	f7eb ffb7 	bl	8000298 <__aeabi_dsub>
 801432a:	f805 6b01 	strb.w	r6, [r5], #1
 801432e:	9b02      	ldr	r3, [sp, #8]
 8014330:	429d      	cmp	r5, r3
 8014332:	4680      	mov	r8, r0
 8014334:	4689      	mov	r9, r1
 8014336:	f04f 0200 	mov.w	r2, #0
 801433a:	d124      	bne.n	8014386 <_dtoa_r+0x62e>
 801433c:	4b1b      	ldr	r3, [pc, #108]	; (80143ac <_dtoa_r+0x654>)
 801433e:	ec51 0b19 	vmov	r0, r1, d9
 8014342:	f7eb ffab 	bl	800029c <__adddf3>
 8014346:	4602      	mov	r2, r0
 8014348:	460b      	mov	r3, r1
 801434a:	4640      	mov	r0, r8
 801434c:	4649      	mov	r1, r9
 801434e:	f7ec fbeb 	bl	8000b28 <__aeabi_dcmpgt>
 8014352:	2800      	cmp	r0, #0
 8014354:	d173      	bne.n	801443e <_dtoa_r+0x6e6>
 8014356:	ec53 2b19 	vmov	r2, r3, d9
 801435a:	4914      	ldr	r1, [pc, #80]	; (80143ac <_dtoa_r+0x654>)
 801435c:	2000      	movs	r0, #0
 801435e:	f7eb ff9b 	bl	8000298 <__aeabi_dsub>
 8014362:	4602      	mov	r2, r0
 8014364:	460b      	mov	r3, r1
 8014366:	4640      	mov	r0, r8
 8014368:	4649      	mov	r1, r9
 801436a:	f7ec fbbf 	bl	8000aec <__aeabi_dcmplt>
 801436e:	2800      	cmp	r0, #0
 8014370:	f43f af2f 	beq.w	80141d2 <_dtoa_r+0x47a>
 8014374:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014376:	1e6b      	subs	r3, r5, #1
 8014378:	930f      	str	r3, [sp, #60]	; 0x3c
 801437a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801437e:	2b30      	cmp	r3, #48	; 0x30
 8014380:	d0f8      	beq.n	8014374 <_dtoa_r+0x61c>
 8014382:	46bb      	mov	fp, r7
 8014384:	e04a      	b.n	801441c <_dtoa_r+0x6c4>
 8014386:	4b06      	ldr	r3, [pc, #24]	; (80143a0 <_dtoa_r+0x648>)
 8014388:	f7ec f93e 	bl	8000608 <__aeabi_dmul>
 801438c:	4680      	mov	r8, r0
 801438e:	4689      	mov	r9, r1
 8014390:	e7bd      	b.n	801430e <_dtoa_r+0x5b6>
 8014392:	bf00      	nop
 8014394:	08016650 	.word	0x08016650
 8014398:	08016628 	.word	0x08016628
 801439c:	3ff00000 	.word	0x3ff00000
 80143a0:	40240000 	.word	0x40240000
 80143a4:	401c0000 	.word	0x401c0000
 80143a8:	40140000 	.word	0x40140000
 80143ac:	3fe00000 	.word	0x3fe00000
 80143b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80143b4:	9d00      	ldr	r5, [sp, #0]
 80143b6:	4642      	mov	r2, r8
 80143b8:	464b      	mov	r3, r9
 80143ba:	4630      	mov	r0, r6
 80143bc:	4639      	mov	r1, r7
 80143be:	f7ec fa4d 	bl	800085c <__aeabi_ddiv>
 80143c2:	f7ec fbd1 	bl	8000b68 <__aeabi_d2iz>
 80143c6:	9001      	str	r0, [sp, #4]
 80143c8:	f7ec f8b4 	bl	8000534 <__aeabi_i2d>
 80143cc:	4642      	mov	r2, r8
 80143ce:	464b      	mov	r3, r9
 80143d0:	f7ec f91a 	bl	8000608 <__aeabi_dmul>
 80143d4:	4602      	mov	r2, r0
 80143d6:	460b      	mov	r3, r1
 80143d8:	4630      	mov	r0, r6
 80143da:	4639      	mov	r1, r7
 80143dc:	f7eb ff5c 	bl	8000298 <__aeabi_dsub>
 80143e0:	9e01      	ldr	r6, [sp, #4]
 80143e2:	9f04      	ldr	r7, [sp, #16]
 80143e4:	3630      	adds	r6, #48	; 0x30
 80143e6:	f805 6b01 	strb.w	r6, [r5], #1
 80143ea:	9e00      	ldr	r6, [sp, #0]
 80143ec:	1bae      	subs	r6, r5, r6
 80143ee:	42b7      	cmp	r7, r6
 80143f0:	4602      	mov	r2, r0
 80143f2:	460b      	mov	r3, r1
 80143f4:	d134      	bne.n	8014460 <_dtoa_r+0x708>
 80143f6:	f7eb ff51 	bl	800029c <__adddf3>
 80143fa:	4642      	mov	r2, r8
 80143fc:	464b      	mov	r3, r9
 80143fe:	4606      	mov	r6, r0
 8014400:	460f      	mov	r7, r1
 8014402:	f7ec fb91 	bl	8000b28 <__aeabi_dcmpgt>
 8014406:	b9c8      	cbnz	r0, 801443c <_dtoa_r+0x6e4>
 8014408:	4642      	mov	r2, r8
 801440a:	464b      	mov	r3, r9
 801440c:	4630      	mov	r0, r6
 801440e:	4639      	mov	r1, r7
 8014410:	f7ec fb62 	bl	8000ad8 <__aeabi_dcmpeq>
 8014414:	b110      	cbz	r0, 801441c <_dtoa_r+0x6c4>
 8014416:	9b01      	ldr	r3, [sp, #4]
 8014418:	07db      	lsls	r3, r3, #31
 801441a:	d40f      	bmi.n	801443c <_dtoa_r+0x6e4>
 801441c:	4651      	mov	r1, sl
 801441e:	4620      	mov	r0, r4
 8014420:	f000 fbcc 	bl	8014bbc <_Bfree>
 8014424:	2300      	movs	r3, #0
 8014426:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014428:	702b      	strb	r3, [r5, #0]
 801442a:	f10b 0301 	add.w	r3, fp, #1
 801442e:	6013      	str	r3, [r2, #0]
 8014430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014432:	2b00      	cmp	r3, #0
 8014434:	f43f ace2 	beq.w	8013dfc <_dtoa_r+0xa4>
 8014438:	601d      	str	r5, [r3, #0]
 801443a:	e4df      	b.n	8013dfc <_dtoa_r+0xa4>
 801443c:	465f      	mov	r7, fp
 801443e:	462b      	mov	r3, r5
 8014440:	461d      	mov	r5, r3
 8014442:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014446:	2a39      	cmp	r2, #57	; 0x39
 8014448:	d106      	bne.n	8014458 <_dtoa_r+0x700>
 801444a:	9a00      	ldr	r2, [sp, #0]
 801444c:	429a      	cmp	r2, r3
 801444e:	d1f7      	bne.n	8014440 <_dtoa_r+0x6e8>
 8014450:	9900      	ldr	r1, [sp, #0]
 8014452:	2230      	movs	r2, #48	; 0x30
 8014454:	3701      	adds	r7, #1
 8014456:	700a      	strb	r2, [r1, #0]
 8014458:	781a      	ldrb	r2, [r3, #0]
 801445a:	3201      	adds	r2, #1
 801445c:	701a      	strb	r2, [r3, #0]
 801445e:	e790      	b.n	8014382 <_dtoa_r+0x62a>
 8014460:	4ba3      	ldr	r3, [pc, #652]	; (80146f0 <_dtoa_r+0x998>)
 8014462:	2200      	movs	r2, #0
 8014464:	f7ec f8d0 	bl	8000608 <__aeabi_dmul>
 8014468:	2200      	movs	r2, #0
 801446a:	2300      	movs	r3, #0
 801446c:	4606      	mov	r6, r0
 801446e:	460f      	mov	r7, r1
 8014470:	f7ec fb32 	bl	8000ad8 <__aeabi_dcmpeq>
 8014474:	2800      	cmp	r0, #0
 8014476:	d09e      	beq.n	80143b6 <_dtoa_r+0x65e>
 8014478:	e7d0      	b.n	801441c <_dtoa_r+0x6c4>
 801447a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801447c:	2a00      	cmp	r2, #0
 801447e:	f000 80ca 	beq.w	8014616 <_dtoa_r+0x8be>
 8014482:	9a07      	ldr	r2, [sp, #28]
 8014484:	2a01      	cmp	r2, #1
 8014486:	f300 80ad 	bgt.w	80145e4 <_dtoa_r+0x88c>
 801448a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801448c:	2a00      	cmp	r2, #0
 801448e:	f000 80a5 	beq.w	80145dc <_dtoa_r+0x884>
 8014492:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014496:	9e08      	ldr	r6, [sp, #32]
 8014498:	9d05      	ldr	r5, [sp, #20]
 801449a:	9a05      	ldr	r2, [sp, #20]
 801449c:	441a      	add	r2, r3
 801449e:	9205      	str	r2, [sp, #20]
 80144a0:	9a06      	ldr	r2, [sp, #24]
 80144a2:	2101      	movs	r1, #1
 80144a4:	441a      	add	r2, r3
 80144a6:	4620      	mov	r0, r4
 80144a8:	9206      	str	r2, [sp, #24]
 80144aa:	f000 fc3d 	bl	8014d28 <__i2b>
 80144ae:	4607      	mov	r7, r0
 80144b0:	b165      	cbz	r5, 80144cc <_dtoa_r+0x774>
 80144b2:	9b06      	ldr	r3, [sp, #24]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	dd09      	ble.n	80144cc <_dtoa_r+0x774>
 80144b8:	42ab      	cmp	r3, r5
 80144ba:	9a05      	ldr	r2, [sp, #20]
 80144bc:	bfa8      	it	ge
 80144be:	462b      	movge	r3, r5
 80144c0:	1ad2      	subs	r2, r2, r3
 80144c2:	9205      	str	r2, [sp, #20]
 80144c4:	9a06      	ldr	r2, [sp, #24]
 80144c6:	1aed      	subs	r5, r5, r3
 80144c8:	1ad3      	subs	r3, r2, r3
 80144ca:	9306      	str	r3, [sp, #24]
 80144cc:	9b08      	ldr	r3, [sp, #32]
 80144ce:	b1f3      	cbz	r3, 801450e <_dtoa_r+0x7b6>
 80144d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	f000 80a3 	beq.w	801461e <_dtoa_r+0x8c6>
 80144d8:	2e00      	cmp	r6, #0
 80144da:	dd10      	ble.n	80144fe <_dtoa_r+0x7a6>
 80144dc:	4639      	mov	r1, r7
 80144de:	4632      	mov	r2, r6
 80144e0:	4620      	mov	r0, r4
 80144e2:	f000 fce1 	bl	8014ea8 <__pow5mult>
 80144e6:	4652      	mov	r2, sl
 80144e8:	4601      	mov	r1, r0
 80144ea:	4607      	mov	r7, r0
 80144ec:	4620      	mov	r0, r4
 80144ee:	f000 fc31 	bl	8014d54 <__multiply>
 80144f2:	4651      	mov	r1, sl
 80144f4:	4680      	mov	r8, r0
 80144f6:	4620      	mov	r0, r4
 80144f8:	f000 fb60 	bl	8014bbc <_Bfree>
 80144fc:	46c2      	mov	sl, r8
 80144fe:	9b08      	ldr	r3, [sp, #32]
 8014500:	1b9a      	subs	r2, r3, r6
 8014502:	d004      	beq.n	801450e <_dtoa_r+0x7b6>
 8014504:	4651      	mov	r1, sl
 8014506:	4620      	mov	r0, r4
 8014508:	f000 fcce 	bl	8014ea8 <__pow5mult>
 801450c:	4682      	mov	sl, r0
 801450e:	2101      	movs	r1, #1
 8014510:	4620      	mov	r0, r4
 8014512:	f000 fc09 	bl	8014d28 <__i2b>
 8014516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014518:	2b00      	cmp	r3, #0
 801451a:	4606      	mov	r6, r0
 801451c:	f340 8081 	ble.w	8014622 <_dtoa_r+0x8ca>
 8014520:	461a      	mov	r2, r3
 8014522:	4601      	mov	r1, r0
 8014524:	4620      	mov	r0, r4
 8014526:	f000 fcbf 	bl	8014ea8 <__pow5mult>
 801452a:	9b07      	ldr	r3, [sp, #28]
 801452c:	2b01      	cmp	r3, #1
 801452e:	4606      	mov	r6, r0
 8014530:	dd7a      	ble.n	8014628 <_dtoa_r+0x8d0>
 8014532:	f04f 0800 	mov.w	r8, #0
 8014536:	6933      	ldr	r3, [r6, #16]
 8014538:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801453c:	6918      	ldr	r0, [r3, #16]
 801453e:	f000 fba5 	bl	8014c8c <__hi0bits>
 8014542:	f1c0 0020 	rsb	r0, r0, #32
 8014546:	9b06      	ldr	r3, [sp, #24]
 8014548:	4418      	add	r0, r3
 801454a:	f010 001f 	ands.w	r0, r0, #31
 801454e:	f000 8094 	beq.w	801467a <_dtoa_r+0x922>
 8014552:	f1c0 0320 	rsb	r3, r0, #32
 8014556:	2b04      	cmp	r3, #4
 8014558:	f340 8085 	ble.w	8014666 <_dtoa_r+0x90e>
 801455c:	9b05      	ldr	r3, [sp, #20]
 801455e:	f1c0 001c 	rsb	r0, r0, #28
 8014562:	4403      	add	r3, r0
 8014564:	9305      	str	r3, [sp, #20]
 8014566:	9b06      	ldr	r3, [sp, #24]
 8014568:	4403      	add	r3, r0
 801456a:	4405      	add	r5, r0
 801456c:	9306      	str	r3, [sp, #24]
 801456e:	9b05      	ldr	r3, [sp, #20]
 8014570:	2b00      	cmp	r3, #0
 8014572:	dd05      	ble.n	8014580 <_dtoa_r+0x828>
 8014574:	4651      	mov	r1, sl
 8014576:	461a      	mov	r2, r3
 8014578:	4620      	mov	r0, r4
 801457a:	f000 fcef 	bl	8014f5c <__lshift>
 801457e:	4682      	mov	sl, r0
 8014580:	9b06      	ldr	r3, [sp, #24]
 8014582:	2b00      	cmp	r3, #0
 8014584:	dd05      	ble.n	8014592 <_dtoa_r+0x83a>
 8014586:	4631      	mov	r1, r6
 8014588:	461a      	mov	r2, r3
 801458a:	4620      	mov	r0, r4
 801458c:	f000 fce6 	bl	8014f5c <__lshift>
 8014590:	4606      	mov	r6, r0
 8014592:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014594:	2b00      	cmp	r3, #0
 8014596:	d072      	beq.n	801467e <_dtoa_r+0x926>
 8014598:	4631      	mov	r1, r6
 801459a:	4650      	mov	r0, sl
 801459c:	f000 fd4a 	bl	8015034 <__mcmp>
 80145a0:	2800      	cmp	r0, #0
 80145a2:	da6c      	bge.n	801467e <_dtoa_r+0x926>
 80145a4:	2300      	movs	r3, #0
 80145a6:	4651      	mov	r1, sl
 80145a8:	220a      	movs	r2, #10
 80145aa:	4620      	mov	r0, r4
 80145ac:	f000 fb28 	bl	8014c00 <__multadd>
 80145b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80145b6:	4682      	mov	sl, r0
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	f000 81b0 	beq.w	801491e <_dtoa_r+0xbc6>
 80145be:	2300      	movs	r3, #0
 80145c0:	4639      	mov	r1, r7
 80145c2:	220a      	movs	r2, #10
 80145c4:	4620      	mov	r0, r4
 80145c6:	f000 fb1b 	bl	8014c00 <__multadd>
 80145ca:	9b01      	ldr	r3, [sp, #4]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	4607      	mov	r7, r0
 80145d0:	f300 8096 	bgt.w	8014700 <_dtoa_r+0x9a8>
 80145d4:	9b07      	ldr	r3, [sp, #28]
 80145d6:	2b02      	cmp	r3, #2
 80145d8:	dc59      	bgt.n	801468e <_dtoa_r+0x936>
 80145da:	e091      	b.n	8014700 <_dtoa_r+0x9a8>
 80145dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80145e2:	e758      	b.n	8014496 <_dtoa_r+0x73e>
 80145e4:	9b04      	ldr	r3, [sp, #16]
 80145e6:	1e5e      	subs	r6, r3, #1
 80145e8:	9b08      	ldr	r3, [sp, #32]
 80145ea:	42b3      	cmp	r3, r6
 80145ec:	bfbf      	itttt	lt
 80145ee:	9b08      	ldrlt	r3, [sp, #32]
 80145f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80145f2:	9608      	strlt	r6, [sp, #32]
 80145f4:	1af3      	sublt	r3, r6, r3
 80145f6:	bfb4      	ite	lt
 80145f8:	18d2      	addlt	r2, r2, r3
 80145fa:	1b9e      	subge	r6, r3, r6
 80145fc:	9b04      	ldr	r3, [sp, #16]
 80145fe:	bfbc      	itt	lt
 8014600:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8014602:	2600      	movlt	r6, #0
 8014604:	2b00      	cmp	r3, #0
 8014606:	bfb7      	itett	lt
 8014608:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801460c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014610:	1a9d      	sublt	r5, r3, r2
 8014612:	2300      	movlt	r3, #0
 8014614:	e741      	b.n	801449a <_dtoa_r+0x742>
 8014616:	9e08      	ldr	r6, [sp, #32]
 8014618:	9d05      	ldr	r5, [sp, #20]
 801461a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801461c:	e748      	b.n	80144b0 <_dtoa_r+0x758>
 801461e:	9a08      	ldr	r2, [sp, #32]
 8014620:	e770      	b.n	8014504 <_dtoa_r+0x7ac>
 8014622:	9b07      	ldr	r3, [sp, #28]
 8014624:	2b01      	cmp	r3, #1
 8014626:	dc19      	bgt.n	801465c <_dtoa_r+0x904>
 8014628:	9b02      	ldr	r3, [sp, #8]
 801462a:	b9bb      	cbnz	r3, 801465c <_dtoa_r+0x904>
 801462c:	9b03      	ldr	r3, [sp, #12]
 801462e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014632:	b99b      	cbnz	r3, 801465c <_dtoa_r+0x904>
 8014634:	9b03      	ldr	r3, [sp, #12]
 8014636:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801463a:	0d1b      	lsrs	r3, r3, #20
 801463c:	051b      	lsls	r3, r3, #20
 801463e:	b183      	cbz	r3, 8014662 <_dtoa_r+0x90a>
 8014640:	9b05      	ldr	r3, [sp, #20]
 8014642:	3301      	adds	r3, #1
 8014644:	9305      	str	r3, [sp, #20]
 8014646:	9b06      	ldr	r3, [sp, #24]
 8014648:	3301      	adds	r3, #1
 801464a:	9306      	str	r3, [sp, #24]
 801464c:	f04f 0801 	mov.w	r8, #1
 8014650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014652:	2b00      	cmp	r3, #0
 8014654:	f47f af6f 	bne.w	8014536 <_dtoa_r+0x7de>
 8014658:	2001      	movs	r0, #1
 801465a:	e774      	b.n	8014546 <_dtoa_r+0x7ee>
 801465c:	f04f 0800 	mov.w	r8, #0
 8014660:	e7f6      	b.n	8014650 <_dtoa_r+0x8f8>
 8014662:	4698      	mov	r8, r3
 8014664:	e7f4      	b.n	8014650 <_dtoa_r+0x8f8>
 8014666:	d082      	beq.n	801456e <_dtoa_r+0x816>
 8014668:	9a05      	ldr	r2, [sp, #20]
 801466a:	331c      	adds	r3, #28
 801466c:	441a      	add	r2, r3
 801466e:	9205      	str	r2, [sp, #20]
 8014670:	9a06      	ldr	r2, [sp, #24]
 8014672:	441a      	add	r2, r3
 8014674:	441d      	add	r5, r3
 8014676:	9206      	str	r2, [sp, #24]
 8014678:	e779      	b.n	801456e <_dtoa_r+0x816>
 801467a:	4603      	mov	r3, r0
 801467c:	e7f4      	b.n	8014668 <_dtoa_r+0x910>
 801467e:	9b04      	ldr	r3, [sp, #16]
 8014680:	2b00      	cmp	r3, #0
 8014682:	dc37      	bgt.n	80146f4 <_dtoa_r+0x99c>
 8014684:	9b07      	ldr	r3, [sp, #28]
 8014686:	2b02      	cmp	r3, #2
 8014688:	dd34      	ble.n	80146f4 <_dtoa_r+0x99c>
 801468a:	9b04      	ldr	r3, [sp, #16]
 801468c:	9301      	str	r3, [sp, #4]
 801468e:	9b01      	ldr	r3, [sp, #4]
 8014690:	b963      	cbnz	r3, 80146ac <_dtoa_r+0x954>
 8014692:	4631      	mov	r1, r6
 8014694:	2205      	movs	r2, #5
 8014696:	4620      	mov	r0, r4
 8014698:	f000 fab2 	bl	8014c00 <__multadd>
 801469c:	4601      	mov	r1, r0
 801469e:	4606      	mov	r6, r0
 80146a0:	4650      	mov	r0, sl
 80146a2:	f000 fcc7 	bl	8015034 <__mcmp>
 80146a6:	2800      	cmp	r0, #0
 80146a8:	f73f adbb 	bgt.w	8014222 <_dtoa_r+0x4ca>
 80146ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146ae:	9d00      	ldr	r5, [sp, #0]
 80146b0:	ea6f 0b03 	mvn.w	fp, r3
 80146b4:	f04f 0800 	mov.w	r8, #0
 80146b8:	4631      	mov	r1, r6
 80146ba:	4620      	mov	r0, r4
 80146bc:	f000 fa7e 	bl	8014bbc <_Bfree>
 80146c0:	2f00      	cmp	r7, #0
 80146c2:	f43f aeab 	beq.w	801441c <_dtoa_r+0x6c4>
 80146c6:	f1b8 0f00 	cmp.w	r8, #0
 80146ca:	d005      	beq.n	80146d8 <_dtoa_r+0x980>
 80146cc:	45b8      	cmp	r8, r7
 80146ce:	d003      	beq.n	80146d8 <_dtoa_r+0x980>
 80146d0:	4641      	mov	r1, r8
 80146d2:	4620      	mov	r0, r4
 80146d4:	f000 fa72 	bl	8014bbc <_Bfree>
 80146d8:	4639      	mov	r1, r7
 80146da:	4620      	mov	r0, r4
 80146dc:	f000 fa6e 	bl	8014bbc <_Bfree>
 80146e0:	e69c      	b.n	801441c <_dtoa_r+0x6c4>
 80146e2:	2600      	movs	r6, #0
 80146e4:	4637      	mov	r7, r6
 80146e6:	e7e1      	b.n	80146ac <_dtoa_r+0x954>
 80146e8:	46bb      	mov	fp, r7
 80146ea:	4637      	mov	r7, r6
 80146ec:	e599      	b.n	8014222 <_dtoa_r+0x4ca>
 80146ee:	bf00      	nop
 80146f0:	40240000 	.word	0x40240000
 80146f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	f000 80c8 	beq.w	801488c <_dtoa_r+0xb34>
 80146fc:	9b04      	ldr	r3, [sp, #16]
 80146fe:	9301      	str	r3, [sp, #4]
 8014700:	2d00      	cmp	r5, #0
 8014702:	dd05      	ble.n	8014710 <_dtoa_r+0x9b8>
 8014704:	4639      	mov	r1, r7
 8014706:	462a      	mov	r2, r5
 8014708:	4620      	mov	r0, r4
 801470a:	f000 fc27 	bl	8014f5c <__lshift>
 801470e:	4607      	mov	r7, r0
 8014710:	f1b8 0f00 	cmp.w	r8, #0
 8014714:	d05b      	beq.n	80147ce <_dtoa_r+0xa76>
 8014716:	6879      	ldr	r1, [r7, #4]
 8014718:	4620      	mov	r0, r4
 801471a:	f000 fa0f 	bl	8014b3c <_Balloc>
 801471e:	4605      	mov	r5, r0
 8014720:	b928      	cbnz	r0, 801472e <_dtoa_r+0x9d6>
 8014722:	4b83      	ldr	r3, [pc, #524]	; (8014930 <_dtoa_r+0xbd8>)
 8014724:	4602      	mov	r2, r0
 8014726:	f240 21ef 	movw	r1, #751	; 0x2ef
 801472a:	f7ff bb2e 	b.w	8013d8a <_dtoa_r+0x32>
 801472e:	693a      	ldr	r2, [r7, #16]
 8014730:	3202      	adds	r2, #2
 8014732:	0092      	lsls	r2, r2, #2
 8014734:	f107 010c 	add.w	r1, r7, #12
 8014738:	300c      	adds	r0, #12
 801473a:	f7ff fa75 	bl	8013c28 <memcpy>
 801473e:	2201      	movs	r2, #1
 8014740:	4629      	mov	r1, r5
 8014742:	4620      	mov	r0, r4
 8014744:	f000 fc0a 	bl	8014f5c <__lshift>
 8014748:	9b00      	ldr	r3, [sp, #0]
 801474a:	3301      	adds	r3, #1
 801474c:	9304      	str	r3, [sp, #16]
 801474e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014752:	4413      	add	r3, r2
 8014754:	9308      	str	r3, [sp, #32]
 8014756:	9b02      	ldr	r3, [sp, #8]
 8014758:	f003 0301 	and.w	r3, r3, #1
 801475c:	46b8      	mov	r8, r7
 801475e:	9306      	str	r3, [sp, #24]
 8014760:	4607      	mov	r7, r0
 8014762:	9b04      	ldr	r3, [sp, #16]
 8014764:	4631      	mov	r1, r6
 8014766:	3b01      	subs	r3, #1
 8014768:	4650      	mov	r0, sl
 801476a:	9301      	str	r3, [sp, #4]
 801476c:	f7ff fa6a 	bl	8013c44 <quorem>
 8014770:	4641      	mov	r1, r8
 8014772:	9002      	str	r0, [sp, #8]
 8014774:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014778:	4650      	mov	r0, sl
 801477a:	f000 fc5b 	bl	8015034 <__mcmp>
 801477e:	463a      	mov	r2, r7
 8014780:	9005      	str	r0, [sp, #20]
 8014782:	4631      	mov	r1, r6
 8014784:	4620      	mov	r0, r4
 8014786:	f000 fc71 	bl	801506c <__mdiff>
 801478a:	68c2      	ldr	r2, [r0, #12]
 801478c:	4605      	mov	r5, r0
 801478e:	bb02      	cbnz	r2, 80147d2 <_dtoa_r+0xa7a>
 8014790:	4601      	mov	r1, r0
 8014792:	4650      	mov	r0, sl
 8014794:	f000 fc4e 	bl	8015034 <__mcmp>
 8014798:	4602      	mov	r2, r0
 801479a:	4629      	mov	r1, r5
 801479c:	4620      	mov	r0, r4
 801479e:	9209      	str	r2, [sp, #36]	; 0x24
 80147a0:	f000 fa0c 	bl	8014bbc <_Bfree>
 80147a4:	9b07      	ldr	r3, [sp, #28]
 80147a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147a8:	9d04      	ldr	r5, [sp, #16]
 80147aa:	ea43 0102 	orr.w	r1, r3, r2
 80147ae:	9b06      	ldr	r3, [sp, #24]
 80147b0:	4319      	orrs	r1, r3
 80147b2:	d110      	bne.n	80147d6 <_dtoa_r+0xa7e>
 80147b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80147b8:	d029      	beq.n	801480e <_dtoa_r+0xab6>
 80147ba:	9b05      	ldr	r3, [sp, #20]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	dd02      	ble.n	80147c6 <_dtoa_r+0xa6e>
 80147c0:	9b02      	ldr	r3, [sp, #8]
 80147c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80147c6:	9b01      	ldr	r3, [sp, #4]
 80147c8:	f883 9000 	strb.w	r9, [r3]
 80147cc:	e774      	b.n	80146b8 <_dtoa_r+0x960>
 80147ce:	4638      	mov	r0, r7
 80147d0:	e7ba      	b.n	8014748 <_dtoa_r+0x9f0>
 80147d2:	2201      	movs	r2, #1
 80147d4:	e7e1      	b.n	801479a <_dtoa_r+0xa42>
 80147d6:	9b05      	ldr	r3, [sp, #20]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	db04      	blt.n	80147e6 <_dtoa_r+0xa8e>
 80147dc:	9907      	ldr	r1, [sp, #28]
 80147de:	430b      	orrs	r3, r1
 80147e0:	9906      	ldr	r1, [sp, #24]
 80147e2:	430b      	orrs	r3, r1
 80147e4:	d120      	bne.n	8014828 <_dtoa_r+0xad0>
 80147e6:	2a00      	cmp	r2, #0
 80147e8:	dded      	ble.n	80147c6 <_dtoa_r+0xa6e>
 80147ea:	4651      	mov	r1, sl
 80147ec:	2201      	movs	r2, #1
 80147ee:	4620      	mov	r0, r4
 80147f0:	f000 fbb4 	bl	8014f5c <__lshift>
 80147f4:	4631      	mov	r1, r6
 80147f6:	4682      	mov	sl, r0
 80147f8:	f000 fc1c 	bl	8015034 <__mcmp>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	dc03      	bgt.n	8014808 <_dtoa_r+0xab0>
 8014800:	d1e1      	bne.n	80147c6 <_dtoa_r+0xa6e>
 8014802:	f019 0f01 	tst.w	r9, #1
 8014806:	d0de      	beq.n	80147c6 <_dtoa_r+0xa6e>
 8014808:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801480c:	d1d8      	bne.n	80147c0 <_dtoa_r+0xa68>
 801480e:	9a01      	ldr	r2, [sp, #4]
 8014810:	2339      	movs	r3, #57	; 0x39
 8014812:	7013      	strb	r3, [r2, #0]
 8014814:	462b      	mov	r3, r5
 8014816:	461d      	mov	r5, r3
 8014818:	3b01      	subs	r3, #1
 801481a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801481e:	2a39      	cmp	r2, #57	; 0x39
 8014820:	d06c      	beq.n	80148fc <_dtoa_r+0xba4>
 8014822:	3201      	adds	r2, #1
 8014824:	701a      	strb	r2, [r3, #0]
 8014826:	e747      	b.n	80146b8 <_dtoa_r+0x960>
 8014828:	2a00      	cmp	r2, #0
 801482a:	dd07      	ble.n	801483c <_dtoa_r+0xae4>
 801482c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014830:	d0ed      	beq.n	801480e <_dtoa_r+0xab6>
 8014832:	9a01      	ldr	r2, [sp, #4]
 8014834:	f109 0301 	add.w	r3, r9, #1
 8014838:	7013      	strb	r3, [r2, #0]
 801483a:	e73d      	b.n	80146b8 <_dtoa_r+0x960>
 801483c:	9b04      	ldr	r3, [sp, #16]
 801483e:	9a08      	ldr	r2, [sp, #32]
 8014840:	f803 9c01 	strb.w	r9, [r3, #-1]
 8014844:	4293      	cmp	r3, r2
 8014846:	d043      	beq.n	80148d0 <_dtoa_r+0xb78>
 8014848:	4651      	mov	r1, sl
 801484a:	2300      	movs	r3, #0
 801484c:	220a      	movs	r2, #10
 801484e:	4620      	mov	r0, r4
 8014850:	f000 f9d6 	bl	8014c00 <__multadd>
 8014854:	45b8      	cmp	r8, r7
 8014856:	4682      	mov	sl, r0
 8014858:	f04f 0300 	mov.w	r3, #0
 801485c:	f04f 020a 	mov.w	r2, #10
 8014860:	4641      	mov	r1, r8
 8014862:	4620      	mov	r0, r4
 8014864:	d107      	bne.n	8014876 <_dtoa_r+0xb1e>
 8014866:	f000 f9cb 	bl	8014c00 <__multadd>
 801486a:	4680      	mov	r8, r0
 801486c:	4607      	mov	r7, r0
 801486e:	9b04      	ldr	r3, [sp, #16]
 8014870:	3301      	adds	r3, #1
 8014872:	9304      	str	r3, [sp, #16]
 8014874:	e775      	b.n	8014762 <_dtoa_r+0xa0a>
 8014876:	f000 f9c3 	bl	8014c00 <__multadd>
 801487a:	4639      	mov	r1, r7
 801487c:	4680      	mov	r8, r0
 801487e:	2300      	movs	r3, #0
 8014880:	220a      	movs	r2, #10
 8014882:	4620      	mov	r0, r4
 8014884:	f000 f9bc 	bl	8014c00 <__multadd>
 8014888:	4607      	mov	r7, r0
 801488a:	e7f0      	b.n	801486e <_dtoa_r+0xb16>
 801488c:	9b04      	ldr	r3, [sp, #16]
 801488e:	9301      	str	r3, [sp, #4]
 8014890:	9d00      	ldr	r5, [sp, #0]
 8014892:	4631      	mov	r1, r6
 8014894:	4650      	mov	r0, sl
 8014896:	f7ff f9d5 	bl	8013c44 <quorem>
 801489a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801489e:	9b00      	ldr	r3, [sp, #0]
 80148a0:	f805 9b01 	strb.w	r9, [r5], #1
 80148a4:	1aea      	subs	r2, r5, r3
 80148a6:	9b01      	ldr	r3, [sp, #4]
 80148a8:	4293      	cmp	r3, r2
 80148aa:	dd07      	ble.n	80148bc <_dtoa_r+0xb64>
 80148ac:	4651      	mov	r1, sl
 80148ae:	2300      	movs	r3, #0
 80148b0:	220a      	movs	r2, #10
 80148b2:	4620      	mov	r0, r4
 80148b4:	f000 f9a4 	bl	8014c00 <__multadd>
 80148b8:	4682      	mov	sl, r0
 80148ba:	e7ea      	b.n	8014892 <_dtoa_r+0xb3a>
 80148bc:	9b01      	ldr	r3, [sp, #4]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	bfc8      	it	gt
 80148c2:	461d      	movgt	r5, r3
 80148c4:	9b00      	ldr	r3, [sp, #0]
 80148c6:	bfd8      	it	le
 80148c8:	2501      	movle	r5, #1
 80148ca:	441d      	add	r5, r3
 80148cc:	f04f 0800 	mov.w	r8, #0
 80148d0:	4651      	mov	r1, sl
 80148d2:	2201      	movs	r2, #1
 80148d4:	4620      	mov	r0, r4
 80148d6:	f000 fb41 	bl	8014f5c <__lshift>
 80148da:	4631      	mov	r1, r6
 80148dc:	4682      	mov	sl, r0
 80148de:	f000 fba9 	bl	8015034 <__mcmp>
 80148e2:	2800      	cmp	r0, #0
 80148e4:	dc96      	bgt.n	8014814 <_dtoa_r+0xabc>
 80148e6:	d102      	bne.n	80148ee <_dtoa_r+0xb96>
 80148e8:	f019 0f01 	tst.w	r9, #1
 80148ec:	d192      	bne.n	8014814 <_dtoa_r+0xabc>
 80148ee:	462b      	mov	r3, r5
 80148f0:	461d      	mov	r5, r3
 80148f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80148f6:	2a30      	cmp	r2, #48	; 0x30
 80148f8:	d0fa      	beq.n	80148f0 <_dtoa_r+0xb98>
 80148fa:	e6dd      	b.n	80146b8 <_dtoa_r+0x960>
 80148fc:	9a00      	ldr	r2, [sp, #0]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d189      	bne.n	8014816 <_dtoa_r+0xabe>
 8014902:	f10b 0b01 	add.w	fp, fp, #1
 8014906:	2331      	movs	r3, #49	; 0x31
 8014908:	e796      	b.n	8014838 <_dtoa_r+0xae0>
 801490a:	4b0a      	ldr	r3, [pc, #40]	; (8014934 <_dtoa_r+0xbdc>)
 801490c:	f7ff ba99 	b.w	8013e42 <_dtoa_r+0xea>
 8014910:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014912:	2b00      	cmp	r3, #0
 8014914:	f47f aa6d 	bne.w	8013df2 <_dtoa_r+0x9a>
 8014918:	4b07      	ldr	r3, [pc, #28]	; (8014938 <_dtoa_r+0xbe0>)
 801491a:	f7ff ba92 	b.w	8013e42 <_dtoa_r+0xea>
 801491e:	9b01      	ldr	r3, [sp, #4]
 8014920:	2b00      	cmp	r3, #0
 8014922:	dcb5      	bgt.n	8014890 <_dtoa_r+0xb38>
 8014924:	9b07      	ldr	r3, [sp, #28]
 8014926:	2b02      	cmp	r3, #2
 8014928:	f73f aeb1 	bgt.w	801468e <_dtoa_r+0x936>
 801492c:	e7b0      	b.n	8014890 <_dtoa_r+0xb38>
 801492e:	bf00      	nop
 8014930:	080165b8 	.word	0x080165b8
 8014934:	08016518 	.word	0x08016518
 8014938:	0801653c 	.word	0x0801653c

0801493c <_free_r>:
 801493c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801493e:	2900      	cmp	r1, #0
 8014940:	d044      	beq.n	80149cc <_free_r+0x90>
 8014942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014946:	9001      	str	r0, [sp, #4]
 8014948:	2b00      	cmp	r3, #0
 801494a:	f1a1 0404 	sub.w	r4, r1, #4
 801494e:	bfb8      	it	lt
 8014950:	18e4      	addlt	r4, r4, r3
 8014952:	f000 f8e7 	bl	8014b24 <__malloc_lock>
 8014956:	4a1e      	ldr	r2, [pc, #120]	; (80149d0 <_free_r+0x94>)
 8014958:	9801      	ldr	r0, [sp, #4]
 801495a:	6813      	ldr	r3, [r2, #0]
 801495c:	b933      	cbnz	r3, 801496c <_free_r+0x30>
 801495e:	6063      	str	r3, [r4, #4]
 8014960:	6014      	str	r4, [r2, #0]
 8014962:	b003      	add	sp, #12
 8014964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014968:	f000 b8e2 	b.w	8014b30 <__malloc_unlock>
 801496c:	42a3      	cmp	r3, r4
 801496e:	d908      	bls.n	8014982 <_free_r+0x46>
 8014970:	6825      	ldr	r5, [r4, #0]
 8014972:	1961      	adds	r1, r4, r5
 8014974:	428b      	cmp	r3, r1
 8014976:	bf01      	itttt	eq
 8014978:	6819      	ldreq	r1, [r3, #0]
 801497a:	685b      	ldreq	r3, [r3, #4]
 801497c:	1949      	addeq	r1, r1, r5
 801497e:	6021      	streq	r1, [r4, #0]
 8014980:	e7ed      	b.n	801495e <_free_r+0x22>
 8014982:	461a      	mov	r2, r3
 8014984:	685b      	ldr	r3, [r3, #4]
 8014986:	b10b      	cbz	r3, 801498c <_free_r+0x50>
 8014988:	42a3      	cmp	r3, r4
 801498a:	d9fa      	bls.n	8014982 <_free_r+0x46>
 801498c:	6811      	ldr	r1, [r2, #0]
 801498e:	1855      	adds	r5, r2, r1
 8014990:	42a5      	cmp	r5, r4
 8014992:	d10b      	bne.n	80149ac <_free_r+0x70>
 8014994:	6824      	ldr	r4, [r4, #0]
 8014996:	4421      	add	r1, r4
 8014998:	1854      	adds	r4, r2, r1
 801499a:	42a3      	cmp	r3, r4
 801499c:	6011      	str	r1, [r2, #0]
 801499e:	d1e0      	bne.n	8014962 <_free_r+0x26>
 80149a0:	681c      	ldr	r4, [r3, #0]
 80149a2:	685b      	ldr	r3, [r3, #4]
 80149a4:	6053      	str	r3, [r2, #4]
 80149a6:	440c      	add	r4, r1
 80149a8:	6014      	str	r4, [r2, #0]
 80149aa:	e7da      	b.n	8014962 <_free_r+0x26>
 80149ac:	d902      	bls.n	80149b4 <_free_r+0x78>
 80149ae:	230c      	movs	r3, #12
 80149b0:	6003      	str	r3, [r0, #0]
 80149b2:	e7d6      	b.n	8014962 <_free_r+0x26>
 80149b4:	6825      	ldr	r5, [r4, #0]
 80149b6:	1961      	adds	r1, r4, r5
 80149b8:	428b      	cmp	r3, r1
 80149ba:	bf04      	itt	eq
 80149bc:	6819      	ldreq	r1, [r3, #0]
 80149be:	685b      	ldreq	r3, [r3, #4]
 80149c0:	6063      	str	r3, [r4, #4]
 80149c2:	bf04      	itt	eq
 80149c4:	1949      	addeq	r1, r1, r5
 80149c6:	6021      	streq	r1, [r4, #0]
 80149c8:	6054      	str	r4, [r2, #4]
 80149ca:	e7ca      	b.n	8014962 <_free_r+0x26>
 80149cc:	b003      	add	sp, #12
 80149ce:	bd30      	pop	{r4, r5, pc}
 80149d0:	2000dbb4 	.word	0x2000dbb4

080149d4 <malloc>:
 80149d4:	4b02      	ldr	r3, [pc, #8]	; (80149e0 <malloc+0xc>)
 80149d6:	4601      	mov	r1, r0
 80149d8:	6818      	ldr	r0, [r3, #0]
 80149da:	f000 b823 	b.w	8014a24 <_malloc_r>
 80149de:	bf00      	nop
 80149e0:	20000088 	.word	0x20000088

080149e4 <sbrk_aligned>:
 80149e4:	b570      	push	{r4, r5, r6, lr}
 80149e6:	4e0e      	ldr	r6, [pc, #56]	; (8014a20 <sbrk_aligned+0x3c>)
 80149e8:	460c      	mov	r4, r1
 80149ea:	6831      	ldr	r1, [r6, #0]
 80149ec:	4605      	mov	r5, r0
 80149ee:	b911      	cbnz	r1, 80149f6 <sbrk_aligned+0x12>
 80149f0:	f000 fcce 	bl	8015390 <_sbrk_r>
 80149f4:	6030      	str	r0, [r6, #0]
 80149f6:	4621      	mov	r1, r4
 80149f8:	4628      	mov	r0, r5
 80149fa:	f000 fcc9 	bl	8015390 <_sbrk_r>
 80149fe:	1c43      	adds	r3, r0, #1
 8014a00:	d00a      	beq.n	8014a18 <sbrk_aligned+0x34>
 8014a02:	1cc4      	adds	r4, r0, #3
 8014a04:	f024 0403 	bic.w	r4, r4, #3
 8014a08:	42a0      	cmp	r0, r4
 8014a0a:	d007      	beq.n	8014a1c <sbrk_aligned+0x38>
 8014a0c:	1a21      	subs	r1, r4, r0
 8014a0e:	4628      	mov	r0, r5
 8014a10:	f000 fcbe 	bl	8015390 <_sbrk_r>
 8014a14:	3001      	adds	r0, #1
 8014a16:	d101      	bne.n	8014a1c <sbrk_aligned+0x38>
 8014a18:	f04f 34ff 	mov.w	r4, #4294967295
 8014a1c:	4620      	mov	r0, r4
 8014a1e:	bd70      	pop	{r4, r5, r6, pc}
 8014a20:	2000dbb8 	.word	0x2000dbb8

08014a24 <_malloc_r>:
 8014a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a28:	1ccd      	adds	r5, r1, #3
 8014a2a:	f025 0503 	bic.w	r5, r5, #3
 8014a2e:	3508      	adds	r5, #8
 8014a30:	2d0c      	cmp	r5, #12
 8014a32:	bf38      	it	cc
 8014a34:	250c      	movcc	r5, #12
 8014a36:	2d00      	cmp	r5, #0
 8014a38:	4607      	mov	r7, r0
 8014a3a:	db01      	blt.n	8014a40 <_malloc_r+0x1c>
 8014a3c:	42a9      	cmp	r1, r5
 8014a3e:	d905      	bls.n	8014a4c <_malloc_r+0x28>
 8014a40:	230c      	movs	r3, #12
 8014a42:	603b      	str	r3, [r7, #0]
 8014a44:	2600      	movs	r6, #0
 8014a46:	4630      	mov	r0, r6
 8014a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014b20 <_malloc_r+0xfc>
 8014a50:	f000 f868 	bl	8014b24 <__malloc_lock>
 8014a54:	f8d8 3000 	ldr.w	r3, [r8]
 8014a58:	461c      	mov	r4, r3
 8014a5a:	bb5c      	cbnz	r4, 8014ab4 <_malloc_r+0x90>
 8014a5c:	4629      	mov	r1, r5
 8014a5e:	4638      	mov	r0, r7
 8014a60:	f7ff ffc0 	bl	80149e4 <sbrk_aligned>
 8014a64:	1c43      	adds	r3, r0, #1
 8014a66:	4604      	mov	r4, r0
 8014a68:	d155      	bne.n	8014b16 <_malloc_r+0xf2>
 8014a6a:	f8d8 4000 	ldr.w	r4, [r8]
 8014a6e:	4626      	mov	r6, r4
 8014a70:	2e00      	cmp	r6, #0
 8014a72:	d145      	bne.n	8014b00 <_malloc_r+0xdc>
 8014a74:	2c00      	cmp	r4, #0
 8014a76:	d048      	beq.n	8014b0a <_malloc_r+0xe6>
 8014a78:	6823      	ldr	r3, [r4, #0]
 8014a7a:	4631      	mov	r1, r6
 8014a7c:	4638      	mov	r0, r7
 8014a7e:	eb04 0903 	add.w	r9, r4, r3
 8014a82:	f000 fc85 	bl	8015390 <_sbrk_r>
 8014a86:	4581      	cmp	r9, r0
 8014a88:	d13f      	bne.n	8014b0a <_malloc_r+0xe6>
 8014a8a:	6821      	ldr	r1, [r4, #0]
 8014a8c:	1a6d      	subs	r5, r5, r1
 8014a8e:	4629      	mov	r1, r5
 8014a90:	4638      	mov	r0, r7
 8014a92:	f7ff ffa7 	bl	80149e4 <sbrk_aligned>
 8014a96:	3001      	adds	r0, #1
 8014a98:	d037      	beq.n	8014b0a <_malloc_r+0xe6>
 8014a9a:	6823      	ldr	r3, [r4, #0]
 8014a9c:	442b      	add	r3, r5
 8014a9e:	6023      	str	r3, [r4, #0]
 8014aa0:	f8d8 3000 	ldr.w	r3, [r8]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d038      	beq.n	8014b1a <_malloc_r+0xf6>
 8014aa8:	685a      	ldr	r2, [r3, #4]
 8014aaa:	42a2      	cmp	r2, r4
 8014aac:	d12b      	bne.n	8014b06 <_malloc_r+0xe2>
 8014aae:	2200      	movs	r2, #0
 8014ab0:	605a      	str	r2, [r3, #4]
 8014ab2:	e00f      	b.n	8014ad4 <_malloc_r+0xb0>
 8014ab4:	6822      	ldr	r2, [r4, #0]
 8014ab6:	1b52      	subs	r2, r2, r5
 8014ab8:	d41f      	bmi.n	8014afa <_malloc_r+0xd6>
 8014aba:	2a0b      	cmp	r2, #11
 8014abc:	d917      	bls.n	8014aee <_malloc_r+0xca>
 8014abe:	1961      	adds	r1, r4, r5
 8014ac0:	42a3      	cmp	r3, r4
 8014ac2:	6025      	str	r5, [r4, #0]
 8014ac4:	bf18      	it	ne
 8014ac6:	6059      	strne	r1, [r3, #4]
 8014ac8:	6863      	ldr	r3, [r4, #4]
 8014aca:	bf08      	it	eq
 8014acc:	f8c8 1000 	streq.w	r1, [r8]
 8014ad0:	5162      	str	r2, [r4, r5]
 8014ad2:	604b      	str	r3, [r1, #4]
 8014ad4:	4638      	mov	r0, r7
 8014ad6:	f104 060b 	add.w	r6, r4, #11
 8014ada:	f000 f829 	bl	8014b30 <__malloc_unlock>
 8014ade:	f026 0607 	bic.w	r6, r6, #7
 8014ae2:	1d23      	adds	r3, r4, #4
 8014ae4:	1af2      	subs	r2, r6, r3
 8014ae6:	d0ae      	beq.n	8014a46 <_malloc_r+0x22>
 8014ae8:	1b9b      	subs	r3, r3, r6
 8014aea:	50a3      	str	r3, [r4, r2]
 8014aec:	e7ab      	b.n	8014a46 <_malloc_r+0x22>
 8014aee:	42a3      	cmp	r3, r4
 8014af0:	6862      	ldr	r2, [r4, #4]
 8014af2:	d1dd      	bne.n	8014ab0 <_malloc_r+0x8c>
 8014af4:	f8c8 2000 	str.w	r2, [r8]
 8014af8:	e7ec      	b.n	8014ad4 <_malloc_r+0xb0>
 8014afa:	4623      	mov	r3, r4
 8014afc:	6864      	ldr	r4, [r4, #4]
 8014afe:	e7ac      	b.n	8014a5a <_malloc_r+0x36>
 8014b00:	4634      	mov	r4, r6
 8014b02:	6876      	ldr	r6, [r6, #4]
 8014b04:	e7b4      	b.n	8014a70 <_malloc_r+0x4c>
 8014b06:	4613      	mov	r3, r2
 8014b08:	e7cc      	b.n	8014aa4 <_malloc_r+0x80>
 8014b0a:	230c      	movs	r3, #12
 8014b0c:	603b      	str	r3, [r7, #0]
 8014b0e:	4638      	mov	r0, r7
 8014b10:	f000 f80e 	bl	8014b30 <__malloc_unlock>
 8014b14:	e797      	b.n	8014a46 <_malloc_r+0x22>
 8014b16:	6025      	str	r5, [r4, #0]
 8014b18:	e7dc      	b.n	8014ad4 <_malloc_r+0xb0>
 8014b1a:	605b      	str	r3, [r3, #4]
 8014b1c:	deff      	udf	#255	; 0xff
 8014b1e:	bf00      	nop
 8014b20:	2000dbb4 	.word	0x2000dbb4

08014b24 <__malloc_lock>:
 8014b24:	4801      	ldr	r0, [pc, #4]	; (8014b2c <__malloc_lock+0x8>)
 8014b26:	f7ff b87d 	b.w	8013c24 <__retarget_lock_acquire_recursive>
 8014b2a:	bf00      	nop
 8014b2c:	2000dbb0 	.word	0x2000dbb0

08014b30 <__malloc_unlock>:
 8014b30:	4801      	ldr	r0, [pc, #4]	; (8014b38 <__malloc_unlock+0x8>)
 8014b32:	f7ff b878 	b.w	8013c26 <__retarget_lock_release_recursive>
 8014b36:	bf00      	nop
 8014b38:	2000dbb0 	.word	0x2000dbb0

08014b3c <_Balloc>:
 8014b3c:	b570      	push	{r4, r5, r6, lr}
 8014b3e:	69c6      	ldr	r6, [r0, #28]
 8014b40:	4604      	mov	r4, r0
 8014b42:	460d      	mov	r5, r1
 8014b44:	b976      	cbnz	r6, 8014b64 <_Balloc+0x28>
 8014b46:	2010      	movs	r0, #16
 8014b48:	f7ff ff44 	bl	80149d4 <malloc>
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	61e0      	str	r0, [r4, #28]
 8014b50:	b920      	cbnz	r0, 8014b5c <_Balloc+0x20>
 8014b52:	4b18      	ldr	r3, [pc, #96]	; (8014bb4 <_Balloc+0x78>)
 8014b54:	4818      	ldr	r0, [pc, #96]	; (8014bb8 <_Balloc+0x7c>)
 8014b56:	216b      	movs	r1, #107	; 0x6b
 8014b58:	f000 fc2a 	bl	80153b0 <__assert_func>
 8014b5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b60:	6006      	str	r6, [r0, #0]
 8014b62:	60c6      	str	r6, [r0, #12]
 8014b64:	69e6      	ldr	r6, [r4, #28]
 8014b66:	68f3      	ldr	r3, [r6, #12]
 8014b68:	b183      	cbz	r3, 8014b8c <_Balloc+0x50>
 8014b6a:	69e3      	ldr	r3, [r4, #28]
 8014b6c:	68db      	ldr	r3, [r3, #12]
 8014b6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014b72:	b9b8      	cbnz	r0, 8014ba4 <_Balloc+0x68>
 8014b74:	2101      	movs	r1, #1
 8014b76:	fa01 f605 	lsl.w	r6, r1, r5
 8014b7a:	1d72      	adds	r2, r6, #5
 8014b7c:	0092      	lsls	r2, r2, #2
 8014b7e:	4620      	mov	r0, r4
 8014b80:	f000 fc34 	bl	80153ec <_calloc_r>
 8014b84:	b160      	cbz	r0, 8014ba0 <_Balloc+0x64>
 8014b86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014b8a:	e00e      	b.n	8014baa <_Balloc+0x6e>
 8014b8c:	2221      	movs	r2, #33	; 0x21
 8014b8e:	2104      	movs	r1, #4
 8014b90:	4620      	mov	r0, r4
 8014b92:	f000 fc2b 	bl	80153ec <_calloc_r>
 8014b96:	69e3      	ldr	r3, [r4, #28]
 8014b98:	60f0      	str	r0, [r6, #12]
 8014b9a:	68db      	ldr	r3, [r3, #12]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d1e4      	bne.n	8014b6a <_Balloc+0x2e>
 8014ba0:	2000      	movs	r0, #0
 8014ba2:	bd70      	pop	{r4, r5, r6, pc}
 8014ba4:	6802      	ldr	r2, [r0, #0]
 8014ba6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014baa:	2300      	movs	r3, #0
 8014bac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014bb0:	e7f7      	b.n	8014ba2 <_Balloc+0x66>
 8014bb2:	bf00      	nop
 8014bb4:	08016549 	.word	0x08016549
 8014bb8:	080165c9 	.word	0x080165c9

08014bbc <_Bfree>:
 8014bbc:	b570      	push	{r4, r5, r6, lr}
 8014bbe:	69c6      	ldr	r6, [r0, #28]
 8014bc0:	4605      	mov	r5, r0
 8014bc2:	460c      	mov	r4, r1
 8014bc4:	b976      	cbnz	r6, 8014be4 <_Bfree+0x28>
 8014bc6:	2010      	movs	r0, #16
 8014bc8:	f7ff ff04 	bl	80149d4 <malloc>
 8014bcc:	4602      	mov	r2, r0
 8014bce:	61e8      	str	r0, [r5, #28]
 8014bd0:	b920      	cbnz	r0, 8014bdc <_Bfree+0x20>
 8014bd2:	4b09      	ldr	r3, [pc, #36]	; (8014bf8 <_Bfree+0x3c>)
 8014bd4:	4809      	ldr	r0, [pc, #36]	; (8014bfc <_Bfree+0x40>)
 8014bd6:	218f      	movs	r1, #143	; 0x8f
 8014bd8:	f000 fbea 	bl	80153b0 <__assert_func>
 8014bdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014be0:	6006      	str	r6, [r0, #0]
 8014be2:	60c6      	str	r6, [r0, #12]
 8014be4:	b13c      	cbz	r4, 8014bf6 <_Bfree+0x3a>
 8014be6:	69eb      	ldr	r3, [r5, #28]
 8014be8:	6862      	ldr	r2, [r4, #4]
 8014bea:	68db      	ldr	r3, [r3, #12]
 8014bec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014bf0:	6021      	str	r1, [r4, #0]
 8014bf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014bf6:	bd70      	pop	{r4, r5, r6, pc}
 8014bf8:	08016549 	.word	0x08016549
 8014bfc:	080165c9 	.word	0x080165c9

08014c00 <__multadd>:
 8014c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c04:	690d      	ldr	r5, [r1, #16]
 8014c06:	4607      	mov	r7, r0
 8014c08:	460c      	mov	r4, r1
 8014c0a:	461e      	mov	r6, r3
 8014c0c:	f101 0c14 	add.w	ip, r1, #20
 8014c10:	2000      	movs	r0, #0
 8014c12:	f8dc 3000 	ldr.w	r3, [ip]
 8014c16:	b299      	uxth	r1, r3
 8014c18:	fb02 6101 	mla	r1, r2, r1, r6
 8014c1c:	0c1e      	lsrs	r6, r3, #16
 8014c1e:	0c0b      	lsrs	r3, r1, #16
 8014c20:	fb02 3306 	mla	r3, r2, r6, r3
 8014c24:	b289      	uxth	r1, r1
 8014c26:	3001      	adds	r0, #1
 8014c28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014c2c:	4285      	cmp	r5, r0
 8014c2e:	f84c 1b04 	str.w	r1, [ip], #4
 8014c32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014c36:	dcec      	bgt.n	8014c12 <__multadd+0x12>
 8014c38:	b30e      	cbz	r6, 8014c7e <__multadd+0x7e>
 8014c3a:	68a3      	ldr	r3, [r4, #8]
 8014c3c:	42ab      	cmp	r3, r5
 8014c3e:	dc19      	bgt.n	8014c74 <__multadd+0x74>
 8014c40:	6861      	ldr	r1, [r4, #4]
 8014c42:	4638      	mov	r0, r7
 8014c44:	3101      	adds	r1, #1
 8014c46:	f7ff ff79 	bl	8014b3c <_Balloc>
 8014c4a:	4680      	mov	r8, r0
 8014c4c:	b928      	cbnz	r0, 8014c5a <__multadd+0x5a>
 8014c4e:	4602      	mov	r2, r0
 8014c50:	4b0c      	ldr	r3, [pc, #48]	; (8014c84 <__multadd+0x84>)
 8014c52:	480d      	ldr	r0, [pc, #52]	; (8014c88 <__multadd+0x88>)
 8014c54:	21ba      	movs	r1, #186	; 0xba
 8014c56:	f000 fbab 	bl	80153b0 <__assert_func>
 8014c5a:	6922      	ldr	r2, [r4, #16]
 8014c5c:	3202      	adds	r2, #2
 8014c5e:	f104 010c 	add.w	r1, r4, #12
 8014c62:	0092      	lsls	r2, r2, #2
 8014c64:	300c      	adds	r0, #12
 8014c66:	f7fe ffdf 	bl	8013c28 <memcpy>
 8014c6a:	4621      	mov	r1, r4
 8014c6c:	4638      	mov	r0, r7
 8014c6e:	f7ff ffa5 	bl	8014bbc <_Bfree>
 8014c72:	4644      	mov	r4, r8
 8014c74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014c78:	3501      	adds	r5, #1
 8014c7a:	615e      	str	r6, [r3, #20]
 8014c7c:	6125      	str	r5, [r4, #16]
 8014c7e:	4620      	mov	r0, r4
 8014c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c84:	080165b8 	.word	0x080165b8
 8014c88:	080165c9 	.word	0x080165c9

08014c8c <__hi0bits>:
 8014c8c:	0c03      	lsrs	r3, r0, #16
 8014c8e:	041b      	lsls	r3, r3, #16
 8014c90:	b9d3      	cbnz	r3, 8014cc8 <__hi0bits+0x3c>
 8014c92:	0400      	lsls	r0, r0, #16
 8014c94:	2310      	movs	r3, #16
 8014c96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014c9a:	bf04      	itt	eq
 8014c9c:	0200      	lsleq	r0, r0, #8
 8014c9e:	3308      	addeq	r3, #8
 8014ca0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014ca4:	bf04      	itt	eq
 8014ca6:	0100      	lsleq	r0, r0, #4
 8014ca8:	3304      	addeq	r3, #4
 8014caa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014cae:	bf04      	itt	eq
 8014cb0:	0080      	lsleq	r0, r0, #2
 8014cb2:	3302      	addeq	r3, #2
 8014cb4:	2800      	cmp	r0, #0
 8014cb6:	db05      	blt.n	8014cc4 <__hi0bits+0x38>
 8014cb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014cbc:	f103 0301 	add.w	r3, r3, #1
 8014cc0:	bf08      	it	eq
 8014cc2:	2320      	moveq	r3, #32
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	4770      	bx	lr
 8014cc8:	2300      	movs	r3, #0
 8014cca:	e7e4      	b.n	8014c96 <__hi0bits+0xa>

08014ccc <__lo0bits>:
 8014ccc:	6803      	ldr	r3, [r0, #0]
 8014cce:	f013 0207 	ands.w	r2, r3, #7
 8014cd2:	d00c      	beq.n	8014cee <__lo0bits+0x22>
 8014cd4:	07d9      	lsls	r1, r3, #31
 8014cd6:	d422      	bmi.n	8014d1e <__lo0bits+0x52>
 8014cd8:	079a      	lsls	r2, r3, #30
 8014cda:	bf49      	itett	mi
 8014cdc:	085b      	lsrmi	r3, r3, #1
 8014cde:	089b      	lsrpl	r3, r3, #2
 8014ce0:	6003      	strmi	r3, [r0, #0]
 8014ce2:	2201      	movmi	r2, #1
 8014ce4:	bf5c      	itt	pl
 8014ce6:	6003      	strpl	r3, [r0, #0]
 8014ce8:	2202      	movpl	r2, #2
 8014cea:	4610      	mov	r0, r2
 8014cec:	4770      	bx	lr
 8014cee:	b299      	uxth	r1, r3
 8014cf0:	b909      	cbnz	r1, 8014cf6 <__lo0bits+0x2a>
 8014cf2:	0c1b      	lsrs	r3, r3, #16
 8014cf4:	2210      	movs	r2, #16
 8014cf6:	b2d9      	uxtb	r1, r3
 8014cf8:	b909      	cbnz	r1, 8014cfe <__lo0bits+0x32>
 8014cfa:	3208      	adds	r2, #8
 8014cfc:	0a1b      	lsrs	r3, r3, #8
 8014cfe:	0719      	lsls	r1, r3, #28
 8014d00:	bf04      	itt	eq
 8014d02:	091b      	lsreq	r3, r3, #4
 8014d04:	3204      	addeq	r2, #4
 8014d06:	0799      	lsls	r1, r3, #30
 8014d08:	bf04      	itt	eq
 8014d0a:	089b      	lsreq	r3, r3, #2
 8014d0c:	3202      	addeq	r2, #2
 8014d0e:	07d9      	lsls	r1, r3, #31
 8014d10:	d403      	bmi.n	8014d1a <__lo0bits+0x4e>
 8014d12:	085b      	lsrs	r3, r3, #1
 8014d14:	f102 0201 	add.w	r2, r2, #1
 8014d18:	d003      	beq.n	8014d22 <__lo0bits+0x56>
 8014d1a:	6003      	str	r3, [r0, #0]
 8014d1c:	e7e5      	b.n	8014cea <__lo0bits+0x1e>
 8014d1e:	2200      	movs	r2, #0
 8014d20:	e7e3      	b.n	8014cea <__lo0bits+0x1e>
 8014d22:	2220      	movs	r2, #32
 8014d24:	e7e1      	b.n	8014cea <__lo0bits+0x1e>
	...

08014d28 <__i2b>:
 8014d28:	b510      	push	{r4, lr}
 8014d2a:	460c      	mov	r4, r1
 8014d2c:	2101      	movs	r1, #1
 8014d2e:	f7ff ff05 	bl	8014b3c <_Balloc>
 8014d32:	4602      	mov	r2, r0
 8014d34:	b928      	cbnz	r0, 8014d42 <__i2b+0x1a>
 8014d36:	4b05      	ldr	r3, [pc, #20]	; (8014d4c <__i2b+0x24>)
 8014d38:	4805      	ldr	r0, [pc, #20]	; (8014d50 <__i2b+0x28>)
 8014d3a:	f240 1145 	movw	r1, #325	; 0x145
 8014d3e:	f000 fb37 	bl	80153b0 <__assert_func>
 8014d42:	2301      	movs	r3, #1
 8014d44:	6144      	str	r4, [r0, #20]
 8014d46:	6103      	str	r3, [r0, #16]
 8014d48:	bd10      	pop	{r4, pc}
 8014d4a:	bf00      	nop
 8014d4c:	080165b8 	.word	0x080165b8
 8014d50:	080165c9 	.word	0x080165c9

08014d54 <__multiply>:
 8014d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d58:	4691      	mov	r9, r2
 8014d5a:	690a      	ldr	r2, [r1, #16]
 8014d5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014d60:	429a      	cmp	r2, r3
 8014d62:	bfb8      	it	lt
 8014d64:	460b      	movlt	r3, r1
 8014d66:	460c      	mov	r4, r1
 8014d68:	bfbc      	itt	lt
 8014d6a:	464c      	movlt	r4, r9
 8014d6c:	4699      	movlt	r9, r3
 8014d6e:	6927      	ldr	r7, [r4, #16]
 8014d70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014d74:	68a3      	ldr	r3, [r4, #8]
 8014d76:	6861      	ldr	r1, [r4, #4]
 8014d78:	eb07 060a 	add.w	r6, r7, sl
 8014d7c:	42b3      	cmp	r3, r6
 8014d7e:	b085      	sub	sp, #20
 8014d80:	bfb8      	it	lt
 8014d82:	3101      	addlt	r1, #1
 8014d84:	f7ff feda 	bl	8014b3c <_Balloc>
 8014d88:	b930      	cbnz	r0, 8014d98 <__multiply+0x44>
 8014d8a:	4602      	mov	r2, r0
 8014d8c:	4b44      	ldr	r3, [pc, #272]	; (8014ea0 <__multiply+0x14c>)
 8014d8e:	4845      	ldr	r0, [pc, #276]	; (8014ea4 <__multiply+0x150>)
 8014d90:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014d94:	f000 fb0c 	bl	80153b0 <__assert_func>
 8014d98:	f100 0514 	add.w	r5, r0, #20
 8014d9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014da0:	462b      	mov	r3, r5
 8014da2:	2200      	movs	r2, #0
 8014da4:	4543      	cmp	r3, r8
 8014da6:	d321      	bcc.n	8014dec <__multiply+0x98>
 8014da8:	f104 0314 	add.w	r3, r4, #20
 8014dac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014db0:	f109 0314 	add.w	r3, r9, #20
 8014db4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014db8:	9202      	str	r2, [sp, #8]
 8014dba:	1b3a      	subs	r2, r7, r4
 8014dbc:	3a15      	subs	r2, #21
 8014dbe:	f022 0203 	bic.w	r2, r2, #3
 8014dc2:	3204      	adds	r2, #4
 8014dc4:	f104 0115 	add.w	r1, r4, #21
 8014dc8:	428f      	cmp	r7, r1
 8014dca:	bf38      	it	cc
 8014dcc:	2204      	movcc	r2, #4
 8014dce:	9201      	str	r2, [sp, #4]
 8014dd0:	9a02      	ldr	r2, [sp, #8]
 8014dd2:	9303      	str	r3, [sp, #12]
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d80c      	bhi.n	8014df2 <__multiply+0x9e>
 8014dd8:	2e00      	cmp	r6, #0
 8014dda:	dd03      	ble.n	8014de4 <__multiply+0x90>
 8014ddc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d05b      	beq.n	8014e9c <__multiply+0x148>
 8014de4:	6106      	str	r6, [r0, #16]
 8014de6:	b005      	add	sp, #20
 8014de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dec:	f843 2b04 	str.w	r2, [r3], #4
 8014df0:	e7d8      	b.n	8014da4 <__multiply+0x50>
 8014df2:	f8b3 a000 	ldrh.w	sl, [r3]
 8014df6:	f1ba 0f00 	cmp.w	sl, #0
 8014dfa:	d024      	beq.n	8014e46 <__multiply+0xf2>
 8014dfc:	f104 0e14 	add.w	lr, r4, #20
 8014e00:	46a9      	mov	r9, r5
 8014e02:	f04f 0c00 	mov.w	ip, #0
 8014e06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014e0a:	f8d9 1000 	ldr.w	r1, [r9]
 8014e0e:	fa1f fb82 	uxth.w	fp, r2
 8014e12:	b289      	uxth	r1, r1
 8014e14:	fb0a 110b 	mla	r1, sl, fp, r1
 8014e18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8014e20:	4461      	add	r1, ip
 8014e22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014e26:	fb0a c20b 	mla	r2, sl, fp, ip
 8014e2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014e2e:	b289      	uxth	r1, r1
 8014e30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014e34:	4577      	cmp	r7, lr
 8014e36:	f849 1b04 	str.w	r1, [r9], #4
 8014e3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014e3e:	d8e2      	bhi.n	8014e06 <__multiply+0xb2>
 8014e40:	9a01      	ldr	r2, [sp, #4]
 8014e42:	f845 c002 	str.w	ip, [r5, r2]
 8014e46:	9a03      	ldr	r2, [sp, #12]
 8014e48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014e4c:	3304      	adds	r3, #4
 8014e4e:	f1b9 0f00 	cmp.w	r9, #0
 8014e52:	d021      	beq.n	8014e98 <__multiply+0x144>
 8014e54:	6829      	ldr	r1, [r5, #0]
 8014e56:	f104 0c14 	add.w	ip, r4, #20
 8014e5a:	46ae      	mov	lr, r5
 8014e5c:	f04f 0a00 	mov.w	sl, #0
 8014e60:	f8bc b000 	ldrh.w	fp, [ip]
 8014e64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014e68:	fb09 220b 	mla	r2, r9, fp, r2
 8014e6c:	4452      	add	r2, sl
 8014e6e:	b289      	uxth	r1, r1
 8014e70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014e74:	f84e 1b04 	str.w	r1, [lr], #4
 8014e78:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014e7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014e80:	f8be 1000 	ldrh.w	r1, [lr]
 8014e84:	fb09 110a 	mla	r1, r9, sl, r1
 8014e88:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014e8c:	4567      	cmp	r7, ip
 8014e8e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014e92:	d8e5      	bhi.n	8014e60 <__multiply+0x10c>
 8014e94:	9a01      	ldr	r2, [sp, #4]
 8014e96:	50a9      	str	r1, [r5, r2]
 8014e98:	3504      	adds	r5, #4
 8014e9a:	e799      	b.n	8014dd0 <__multiply+0x7c>
 8014e9c:	3e01      	subs	r6, #1
 8014e9e:	e79b      	b.n	8014dd8 <__multiply+0x84>
 8014ea0:	080165b8 	.word	0x080165b8
 8014ea4:	080165c9 	.word	0x080165c9

08014ea8 <__pow5mult>:
 8014ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014eac:	4615      	mov	r5, r2
 8014eae:	f012 0203 	ands.w	r2, r2, #3
 8014eb2:	4606      	mov	r6, r0
 8014eb4:	460f      	mov	r7, r1
 8014eb6:	d007      	beq.n	8014ec8 <__pow5mult+0x20>
 8014eb8:	4c25      	ldr	r4, [pc, #148]	; (8014f50 <__pow5mult+0xa8>)
 8014eba:	3a01      	subs	r2, #1
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014ec2:	f7ff fe9d 	bl	8014c00 <__multadd>
 8014ec6:	4607      	mov	r7, r0
 8014ec8:	10ad      	asrs	r5, r5, #2
 8014eca:	d03d      	beq.n	8014f48 <__pow5mult+0xa0>
 8014ecc:	69f4      	ldr	r4, [r6, #28]
 8014ece:	b97c      	cbnz	r4, 8014ef0 <__pow5mult+0x48>
 8014ed0:	2010      	movs	r0, #16
 8014ed2:	f7ff fd7f 	bl	80149d4 <malloc>
 8014ed6:	4602      	mov	r2, r0
 8014ed8:	61f0      	str	r0, [r6, #28]
 8014eda:	b928      	cbnz	r0, 8014ee8 <__pow5mult+0x40>
 8014edc:	4b1d      	ldr	r3, [pc, #116]	; (8014f54 <__pow5mult+0xac>)
 8014ede:	481e      	ldr	r0, [pc, #120]	; (8014f58 <__pow5mult+0xb0>)
 8014ee0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014ee4:	f000 fa64 	bl	80153b0 <__assert_func>
 8014ee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014eec:	6004      	str	r4, [r0, #0]
 8014eee:	60c4      	str	r4, [r0, #12]
 8014ef0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014ef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014ef8:	b94c      	cbnz	r4, 8014f0e <__pow5mult+0x66>
 8014efa:	f240 2171 	movw	r1, #625	; 0x271
 8014efe:	4630      	mov	r0, r6
 8014f00:	f7ff ff12 	bl	8014d28 <__i2b>
 8014f04:	2300      	movs	r3, #0
 8014f06:	f8c8 0008 	str.w	r0, [r8, #8]
 8014f0a:	4604      	mov	r4, r0
 8014f0c:	6003      	str	r3, [r0, #0]
 8014f0e:	f04f 0900 	mov.w	r9, #0
 8014f12:	07eb      	lsls	r3, r5, #31
 8014f14:	d50a      	bpl.n	8014f2c <__pow5mult+0x84>
 8014f16:	4639      	mov	r1, r7
 8014f18:	4622      	mov	r2, r4
 8014f1a:	4630      	mov	r0, r6
 8014f1c:	f7ff ff1a 	bl	8014d54 <__multiply>
 8014f20:	4639      	mov	r1, r7
 8014f22:	4680      	mov	r8, r0
 8014f24:	4630      	mov	r0, r6
 8014f26:	f7ff fe49 	bl	8014bbc <_Bfree>
 8014f2a:	4647      	mov	r7, r8
 8014f2c:	106d      	asrs	r5, r5, #1
 8014f2e:	d00b      	beq.n	8014f48 <__pow5mult+0xa0>
 8014f30:	6820      	ldr	r0, [r4, #0]
 8014f32:	b938      	cbnz	r0, 8014f44 <__pow5mult+0x9c>
 8014f34:	4622      	mov	r2, r4
 8014f36:	4621      	mov	r1, r4
 8014f38:	4630      	mov	r0, r6
 8014f3a:	f7ff ff0b 	bl	8014d54 <__multiply>
 8014f3e:	6020      	str	r0, [r4, #0]
 8014f40:	f8c0 9000 	str.w	r9, [r0]
 8014f44:	4604      	mov	r4, r0
 8014f46:	e7e4      	b.n	8014f12 <__pow5mult+0x6a>
 8014f48:	4638      	mov	r0, r7
 8014f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f4e:	bf00      	nop
 8014f50:	08016718 	.word	0x08016718
 8014f54:	08016549 	.word	0x08016549
 8014f58:	080165c9 	.word	0x080165c9

08014f5c <__lshift>:
 8014f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f60:	460c      	mov	r4, r1
 8014f62:	6849      	ldr	r1, [r1, #4]
 8014f64:	6923      	ldr	r3, [r4, #16]
 8014f66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014f6a:	68a3      	ldr	r3, [r4, #8]
 8014f6c:	4607      	mov	r7, r0
 8014f6e:	4691      	mov	r9, r2
 8014f70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014f74:	f108 0601 	add.w	r6, r8, #1
 8014f78:	42b3      	cmp	r3, r6
 8014f7a:	db0b      	blt.n	8014f94 <__lshift+0x38>
 8014f7c:	4638      	mov	r0, r7
 8014f7e:	f7ff fddd 	bl	8014b3c <_Balloc>
 8014f82:	4605      	mov	r5, r0
 8014f84:	b948      	cbnz	r0, 8014f9a <__lshift+0x3e>
 8014f86:	4602      	mov	r2, r0
 8014f88:	4b28      	ldr	r3, [pc, #160]	; (801502c <__lshift+0xd0>)
 8014f8a:	4829      	ldr	r0, [pc, #164]	; (8015030 <__lshift+0xd4>)
 8014f8c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014f90:	f000 fa0e 	bl	80153b0 <__assert_func>
 8014f94:	3101      	adds	r1, #1
 8014f96:	005b      	lsls	r3, r3, #1
 8014f98:	e7ee      	b.n	8014f78 <__lshift+0x1c>
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	f100 0114 	add.w	r1, r0, #20
 8014fa0:	f100 0210 	add.w	r2, r0, #16
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	4553      	cmp	r3, sl
 8014fa8:	db33      	blt.n	8015012 <__lshift+0xb6>
 8014faa:	6920      	ldr	r0, [r4, #16]
 8014fac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014fb0:	f104 0314 	add.w	r3, r4, #20
 8014fb4:	f019 091f 	ands.w	r9, r9, #31
 8014fb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014fbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014fc0:	d02b      	beq.n	801501a <__lshift+0xbe>
 8014fc2:	f1c9 0e20 	rsb	lr, r9, #32
 8014fc6:	468a      	mov	sl, r1
 8014fc8:	2200      	movs	r2, #0
 8014fca:	6818      	ldr	r0, [r3, #0]
 8014fcc:	fa00 f009 	lsl.w	r0, r0, r9
 8014fd0:	4310      	orrs	r0, r2
 8014fd2:	f84a 0b04 	str.w	r0, [sl], #4
 8014fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fda:	459c      	cmp	ip, r3
 8014fdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8014fe0:	d8f3      	bhi.n	8014fca <__lshift+0x6e>
 8014fe2:	ebac 0304 	sub.w	r3, ip, r4
 8014fe6:	3b15      	subs	r3, #21
 8014fe8:	f023 0303 	bic.w	r3, r3, #3
 8014fec:	3304      	adds	r3, #4
 8014fee:	f104 0015 	add.w	r0, r4, #21
 8014ff2:	4584      	cmp	ip, r0
 8014ff4:	bf38      	it	cc
 8014ff6:	2304      	movcc	r3, #4
 8014ff8:	50ca      	str	r2, [r1, r3]
 8014ffa:	b10a      	cbz	r2, 8015000 <__lshift+0xa4>
 8014ffc:	f108 0602 	add.w	r6, r8, #2
 8015000:	3e01      	subs	r6, #1
 8015002:	4638      	mov	r0, r7
 8015004:	612e      	str	r6, [r5, #16]
 8015006:	4621      	mov	r1, r4
 8015008:	f7ff fdd8 	bl	8014bbc <_Bfree>
 801500c:	4628      	mov	r0, r5
 801500e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015012:	f842 0f04 	str.w	r0, [r2, #4]!
 8015016:	3301      	adds	r3, #1
 8015018:	e7c5      	b.n	8014fa6 <__lshift+0x4a>
 801501a:	3904      	subs	r1, #4
 801501c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015020:	f841 2f04 	str.w	r2, [r1, #4]!
 8015024:	459c      	cmp	ip, r3
 8015026:	d8f9      	bhi.n	801501c <__lshift+0xc0>
 8015028:	e7ea      	b.n	8015000 <__lshift+0xa4>
 801502a:	bf00      	nop
 801502c:	080165b8 	.word	0x080165b8
 8015030:	080165c9 	.word	0x080165c9

08015034 <__mcmp>:
 8015034:	b530      	push	{r4, r5, lr}
 8015036:	6902      	ldr	r2, [r0, #16]
 8015038:	690c      	ldr	r4, [r1, #16]
 801503a:	1b12      	subs	r2, r2, r4
 801503c:	d10e      	bne.n	801505c <__mcmp+0x28>
 801503e:	f100 0314 	add.w	r3, r0, #20
 8015042:	3114      	adds	r1, #20
 8015044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801504c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015054:	42a5      	cmp	r5, r4
 8015056:	d003      	beq.n	8015060 <__mcmp+0x2c>
 8015058:	d305      	bcc.n	8015066 <__mcmp+0x32>
 801505a:	2201      	movs	r2, #1
 801505c:	4610      	mov	r0, r2
 801505e:	bd30      	pop	{r4, r5, pc}
 8015060:	4283      	cmp	r3, r0
 8015062:	d3f3      	bcc.n	801504c <__mcmp+0x18>
 8015064:	e7fa      	b.n	801505c <__mcmp+0x28>
 8015066:	f04f 32ff 	mov.w	r2, #4294967295
 801506a:	e7f7      	b.n	801505c <__mcmp+0x28>

0801506c <__mdiff>:
 801506c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015070:	460c      	mov	r4, r1
 8015072:	4606      	mov	r6, r0
 8015074:	4611      	mov	r1, r2
 8015076:	4620      	mov	r0, r4
 8015078:	4690      	mov	r8, r2
 801507a:	f7ff ffdb 	bl	8015034 <__mcmp>
 801507e:	1e05      	subs	r5, r0, #0
 8015080:	d110      	bne.n	80150a4 <__mdiff+0x38>
 8015082:	4629      	mov	r1, r5
 8015084:	4630      	mov	r0, r6
 8015086:	f7ff fd59 	bl	8014b3c <_Balloc>
 801508a:	b930      	cbnz	r0, 801509a <__mdiff+0x2e>
 801508c:	4b3a      	ldr	r3, [pc, #232]	; (8015178 <__mdiff+0x10c>)
 801508e:	4602      	mov	r2, r0
 8015090:	f240 2137 	movw	r1, #567	; 0x237
 8015094:	4839      	ldr	r0, [pc, #228]	; (801517c <__mdiff+0x110>)
 8015096:	f000 f98b 	bl	80153b0 <__assert_func>
 801509a:	2301      	movs	r3, #1
 801509c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80150a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150a4:	bfa4      	itt	ge
 80150a6:	4643      	movge	r3, r8
 80150a8:	46a0      	movge	r8, r4
 80150aa:	4630      	mov	r0, r6
 80150ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80150b0:	bfa6      	itte	ge
 80150b2:	461c      	movge	r4, r3
 80150b4:	2500      	movge	r5, #0
 80150b6:	2501      	movlt	r5, #1
 80150b8:	f7ff fd40 	bl	8014b3c <_Balloc>
 80150bc:	b920      	cbnz	r0, 80150c8 <__mdiff+0x5c>
 80150be:	4b2e      	ldr	r3, [pc, #184]	; (8015178 <__mdiff+0x10c>)
 80150c0:	4602      	mov	r2, r0
 80150c2:	f240 2145 	movw	r1, #581	; 0x245
 80150c6:	e7e5      	b.n	8015094 <__mdiff+0x28>
 80150c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80150cc:	6926      	ldr	r6, [r4, #16]
 80150ce:	60c5      	str	r5, [r0, #12]
 80150d0:	f104 0914 	add.w	r9, r4, #20
 80150d4:	f108 0514 	add.w	r5, r8, #20
 80150d8:	f100 0e14 	add.w	lr, r0, #20
 80150dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80150e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80150e4:	f108 0210 	add.w	r2, r8, #16
 80150e8:	46f2      	mov	sl, lr
 80150ea:	2100      	movs	r1, #0
 80150ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80150f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80150f4:	fa11 f88b 	uxtah	r8, r1, fp
 80150f8:	b299      	uxth	r1, r3
 80150fa:	0c1b      	lsrs	r3, r3, #16
 80150fc:	eba8 0801 	sub.w	r8, r8, r1
 8015100:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015104:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015108:	fa1f f888 	uxth.w	r8, r8
 801510c:	1419      	asrs	r1, r3, #16
 801510e:	454e      	cmp	r6, r9
 8015110:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015114:	f84a 3b04 	str.w	r3, [sl], #4
 8015118:	d8e8      	bhi.n	80150ec <__mdiff+0x80>
 801511a:	1b33      	subs	r3, r6, r4
 801511c:	3b15      	subs	r3, #21
 801511e:	f023 0303 	bic.w	r3, r3, #3
 8015122:	3304      	adds	r3, #4
 8015124:	3415      	adds	r4, #21
 8015126:	42a6      	cmp	r6, r4
 8015128:	bf38      	it	cc
 801512a:	2304      	movcc	r3, #4
 801512c:	441d      	add	r5, r3
 801512e:	4473      	add	r3, lr
 8015130:	469e      	mov	lr, r3
 8015132:	462e      	mov	r6, r5
 8015134:	4566      	cmp	r6, ip
 8015136:	d30e      	bcc.n	8015156 <__mdiff+0xea>
 8015138:	f10c 0203 	add.w	r2, ip, #3
 801513c:	1b52      	subs	r2, r2, r5
 801513e:	f022 0203 	bic.w	r2, r2, #3
 8015142:	3d03      	subs	r5, #3
 8015144:	45ac      	cmp	ip, r5
 8015146:	bf38      	it	cc
 8015148:	2200      	movcc	r2, #0
 801514a:	4413      	add	r3, r2
 801514c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015150:	b17a      	cbz	r2, 8015172 <__mdiff+0x106>
 8015152:	6107      	str	r7, [r0, #16]
 8015154:	e7a4      	b.n	80150a0 <__mdiff+0x34>
 8015156:	f856 8b04 	ldr.w	r8, [r6], #4
 801515a:	fa11 f288 	uxtah	r2, r1, r8
 801515e:	1414      	asrs	r4, r2, #16
 8015160:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015164:	b292      	uxth	r2, r2
 8015166:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801516a:	f84e 2b04 	str.w	r2, [lr], #4
 801516e:	1421      	asrs	r1, r4, #16
 8015170:	e7e0      	b.n	8015134 <__mdiff+0xc8>
 8015172:	3f01      	subs	r7, #1
 8015174:	e7ea      	b.n	801514c <__mdiff+0xe0>
 8015176:	bf00      	nop
 8015178:	080165b8 	.word	0x080165b8
 801517c:	080165c9 	.word	0x080165c9

08015180 <__d2b>:
 8015180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015184:	460f      	mov	r7, r1
 8015186:	2101      	movs	r1, #1
 8015188:	ec59 8b10 	vmov	r8, r9, d0
 801518c:	4616      	mov	r6, r2
 801518e:	f7ff fcd5 	bl	8014b3c <_Balloc>
 8015192:	4604      	mov	r4, r0
 8015194:	b930      	cbnz	r0, 80151a4 <__d2b+0x24>
 8015196:	4602      	mov	r2, r0
 8015198:	4b24      	ldr	r3, [pc, #144]	; (801522c <__d2b+0xac>)
 801519a:	4825      	ldr	r0, [pc, #148]	; (8015230 <__d2b+0xb0>)
 801519c:	f240 310f 	movw	r1, #783	; 0x30f
 80151a0:	f000 f906 	bl	80153b0 <__assert_func>
 80151a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80151a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80151ac:	bb2d      	cbnz	r5, 80151fa <__d2b+0x7a>
 80151ae:	9301      	str	r3, [sp, #4]
 80151b0:	f1b8 0300 	subs.w	r3, r8, #0
 80151b4:	d026      	beq.n	8015204 <__d2b+0x84>
 80151b6:	4668      	mov	r0, sp
 80151b8:	9300      	str	r3, [sp, #0]
 80151ba:	f7ff fd87 	bl	8014ccc <__lo0bits>
 80151be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80151c2:	b1e8      	cbz	r0, 8015200 <__d2b+0x80>
 80151c4:	f1c0 0320 	rsb	r3, r0, #32
 80151c8:	fa02 f303 	lsl.w	r3, r2, r3
 80151cc:	430b      	orrs	r3, r1
 80151ce:	40c2      	lsrs	r2, r0
 80151d0:	6163      	str	r3, [r4, #20]
 80151d2:	9201      	str	r2, [sp, #4]
 80151d4:	9b01      	ldr	r3, [sp, #4]
 80151d6:	61a3      	str	r3, [r4, #24]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	bf14      	ite	ne
 80151dc:	2202      	movne	r2, #2
 80151de:	2201      	moveq	r2, #1
 80151e0:	6122      	str	r2, [r4, #16]
 80151e2:	b1bd      	cbz	r5, 8015214 <__d2b+0x94>
 80151e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80151e8:	4405      	add	r5, r0
 80151ea:	603d      	str	r5, [r7, #0]
 80151ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80151f0:	6030      	str	r0, [r6, #0]
 80151f2:	4620      	mov	r0, r4
 80151f4:	b003      	add	sp, #12
 80151f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80151fe:	e7d6      	b.n	80151ae <__d2b+0x2e>
 8015200:	6161      	str	r1, [r4, #20]
 8015202:	e7e7      	b.n	80151d4 <__d2b+0x54>
 8015204:	a801      	add	r0, sp, #4
 8015206:	f7ff fd61 	bl	8014ccc <__lo0bits>
 801520a:	9b01      	ldr	r3, [sp, #4]
 801520c:	6163      	str	r3, [r4, #20]
 801520e:	3020      	adds	r0, #32
 8015210:	2201      	movs	r2, #1
 8015212:	e7e5      	b.n	80151e0 <__d2b+0x60>
 8015214:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015218:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801521c:	6038      	str	r0, [r7, #0]
 801521e:	6918      	ldr	r0, [r3, #16]
 8015220:	f7ff fd34 	bl	8014c8c <__hi0bits>
 8015224:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015228:	e7e2      	b.n	80151f0 <__d2b+0x70>
 801522a:	bf00      	nop
 801522c:	080165b8 	.word	0x080165b8
 8015230:	080165c9 	.word	0x080165c9

08015234 <__sflush_r>:
 8015234:	898a      	ldrh	r2, [r1, #12]
 8015236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801523a:	4605      	mov	r5, r0
 801523c:	0710      	lsls	r0, r2, #28
 801523e:	460c      	mov	r4, r1
 8015240:	d458      	bmi.n	80152f4 <__sflush_r+0xc0>
 8015242:	684b      	ldr	r3, [r1, #4]
 8015244:	2b00      	cmp	r3, #0
 8015246:	dc05      	bgt.n	8015254 <__sflush_r+0x20>
 8015248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801524a:	2b00      	cmp	r3, #0
 801524c:	dc02      	bgt.n	8015254 <__sflush_r+0x20>
 801524e:	2000      	movs	r0, #0
 8015250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015256:	2e00      	cmp	r6, #0
 8015258:	d0f9      	beq.n	801524e <__sflush_r+0x1a>
 801525a:	2300      	movs	r3, #0
 801525c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015260:	682f      	ldr	r7, [r5, #0]
 8015262:	6a21      	ldr	r1, [r4, #32]
 8015264:	602b      	str	r3, [r5, #0]
 8015266:	d032      	beq.n	80152ce <__sflush_r+0x9a>
 8015268:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801526a:	89a3      	ldrh	r3, [r4, #12]
 801526c:	075a      	lsls	r2, r3, #29
 801526e:	d505      	bpl.n	801527c <__sflush_r+0x48>
 8015270:	6863      	ldr	r3, [r4, #4]
 8015272:	1ac0      	subs	r0, r0, r3
 8015274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015276:	b10b      	cbz	r3, 801527c <__sflush_r+0x48>
 8015278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801527a:	1ac0      	subs	r0, r0, r3
 801527c:	2300      	movs	r3, #0
 801527e:	4602      	mov	r2, r0
 8015280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015282:	6a21      	ldr	r1, [r4, #32]
 8015284:	4628      	mov	r0, r5
 8015286:	47b0      	blx	r6
 8015288:	1c43      	adds	r3, r0, #1
 801528a:	89a3      	ldrh	r3, [r4, #12]
 801528c:	d106      	bne.n	801529c <__sflush_r+0x68>
 801528e:	6829      	ldr	r1, [r5, #0]
 8015290:	291d      	cmp	r1, #29
 8015292:	d82b      	bhi.n	80152ec <__sflush_r+0xb8>
 8015294:	4a29      	ldr	r2, [pc, #164]	; (801533c <__sflush_r+0x108>)
 8015296:	410a      	asrs	r2, r1
 8015298:	07d6      	lsls	r6, r2, #31
 801529a:	d427      	bmi.n	80152ec <__sflush_r+0xb8>
 801529c:	2200      	movs	r2, #0
 801529e:	6062      	str	r2, [r4, #4]
 80152a0:	04d9      	lsls	r1, r3, #19
 80152a2:	6922      	ldr	r2, [r4, #16]
 80152a4:	6022      	str	r2, [r4, #0]
 80152a6:	d504      	bpl.n	80152b2 <__sflush_r+0x7e>
 80152a8:	1c42      	adds	r2, r0, #1
 80152aa:	d101      	bne.n	80152b0 <__sflush_r+0x7c>
 80152ac:	682b      	ldr	r3, [r5, #0]
 80152ae:	b903      	cbnz	r3, 80152b2 <__sflush_r+0x7e>
 80152b0:	6560      	str	r0, [r4, #84]	; 0x54
 80152b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80152b4:	602f      	str	r7, [r5, #0]
 80152b6:	2900      	cmp	r1, #0
 80152b8:	d0c9      	beq.n	801524e <__sflush_r+0x1a>
 80152ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80152be:	4299      	cmp	r1, r3
 80152c0:	d002      	beq.n	80152c8 <__sflush_r+0x94>
 80152c2:	4628      	mov	r0, r5
 80152c4:	f7ff fb3a 	bl	801493c <_free_r>
 80152c8:	2000      	movs	r0, #0
 80152ca:	6360      	str	r0, [r4, #52]	; 0x34
 80152cc:	e7c0      	b.n	8015250 <__sflush_r+0x1c>
 80152ce:	2301      	movs	r3, #1
 80152d0:	4628      	mov	r0, r5
 80152d2:	47b0      	blx	r6
 80152d4:	1c41      	adds	r1, r0, #1
 80152d6:	d1c8      	bne.n	801526a <__sflush_r+0x36>
 80152d8:	682b      	ldr	r3, [r5, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d0c5      	beq.n	801526a <__sflush_r+0x36>
 80152de:	2b1d      	cmp	r3, #29
 80152e0:	d001      	beq.n	80152e6 <__sflush_r+0xb2>
 80152e2:	2b16      	cmp	r3, #22
 80152e4:	d101      	bne.n	80152ea <__sflush_r+0xb6>
 80152e6:	602f      	str	r7, [r5, #0]
 80152e8:	e7b1      	b.n	801524e <__sflush_r+0x1a>
 80152ea:	89a3      	ldrh	r3, [r4, #12]
 80152ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80152f0:	81a3      	strh	r3, [r4, #12]
 80152f2:	e7ad      	b.n	8015250 <__sflush_r+0x1c>
 80152f4:	690f      	ldr	r7, [r1, #16]
 80152f6:	2f00      	cmp	r7, #0
 80152f8:	d0a9      	beq.n	801524e <__sflush_r+0x1a>
 80152fa:	0793      	lsls	r3, r2, #30
 80152fc:	680e      	ldr	r6, [r1, #0]
 80152fe:	bf08      	it	eq
 8015300:	694b      	ldreq	r3, [r1, #20]
 8015302:	600f      	str	r7, [r1, #0]
 8015304:	bf18      	it	ne
 8015306:	2300      	movne	r3, #0
 8015308:	eba6 0807 	sub.w	r8, r6, r7
 801530c:	608b      	str	r3, [r1, #8]
 801530e:	f1b8 0f00 	cmp.w	r8, #0
 8015312:	dd9c      	ble.n	801524e <__sflush_r+0x1a>
 8015314:	6a21      	ldr	r1, [r4, #32]
 8015316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015318:	4643      	mov	r3, r8
 801531a:	463a      	mov	r2, r7
 801531c:	4628      	mov	r0, r5
 801531e:	47b0      	blx	r6
 8015320:	2800      	cmp	r0, #0
 8015322:	dc06      	bgt.n	8015332 <__sflush_r+0xfe>
 8015324:	89a3      	ldrh	r3, [r4, #12]
 8015326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801532a:	81a3      	strh	r3, [r4, #12]
 801532c:	f04f 30ff 	mov.w	r0, #4294967295
 8015330:	e78e      	b.n	8015250 <__sflush_r+0x1c>
 8015332:	4407      	add	r7, r0
 8015334:	eba8 0800 	sub.w	r8, r8, r0
 8015338:	e7e9      	b.n	801530e <__sflush_r+0xda>
 801533a:	bf00      	nop
 801533c:	dfbffffe 	.word	0xdfbffffe

08015340 <_fflush_r>:
 8015340:	b538      	push	{r3, r4, r5, lr}
 8015342:	690b      	ldr	r3, [r1, #16]
 8015344:	4605      	mov	r5, r0
 8015346:	460c      	mov	r4, r1
 8015348:	b913      	cbnz	r3, 8015350 <_fflush_r+0x10>
 801534a:	2500      	movs	r5, #0
 801534c:	4628      	mov	r0, r5
 801534e:	bd38      	pop	{r3, r4, r5, pc}
 8015350:	b118      	cbz	r0, 801535a <_fflush_r+0x1a>
 8015352:	6a03      	ldr	r3, [r0, #32]
 8015354:	b90b      	cbnz	r3, 801535a <_fflush_r+0x1a>
 8015356:	f7fe fb19 	bl	801398c <__sinit>
 801535a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d0f3      	beq.n	801534a <_fflush_r+0xa>
 8015362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015364:	07d0      	lsls	r0, r2, #31
 8015366:	d404      	bmi.n	8015372 <_fflush_r+0x32>
 8015368:	0599      	lsls	r1, r3, #22
 801536a:	d402      	bmi.n	8015372 <_fflush_r+0x32>
 801536c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801536e:	f7fe fc59 	bl	8013c24 <__retarget_lock_acquire_recursive>
 8015372:	4628      	mov	r0, r5
 8015374:	4621      	mov	r1, r4
 8015376:	f7ff ff5d 	bl	8015234 <__sflush_r>
 801537a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801537c:	07da      	lsls	r2, r3, #31
 801537e:	4605      	mov	r5, r0
 8015380:	d4e4      	bmi.n	801534c <_fflush_r+0xc>
 8015382:	89a3      	ldrh	r3, [r4, #12]
 8015384:	059b      	lsls	r3, r3, #22
 8015386:	d4e1      	bmi.n	801534c <_fflush_r+0xc>
 8015388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801538a:	f7fe fc4c 	bl	8013c26 <__retarget_lock_release_recursive>
 801538e:	e7dd      	b.n	801534c <_fflush_r+0xc>

08015390 <_sbrk_r>:
 8015390:	b538      	push	{r3, r4, r5, lr}
 8015392:	4d06      	ldr	r5, [pc, #24]	; (80153ac <_sbrk_r+0x1c>)
 8015394:	2300      	movs	r3, #0
 8015396:	4604      	mov	r4, r0
 8015398:	4608      	mov	r0, r1
 801539a:	602b      	str	r3, [r5, #0]
 801539c:	f7f0 fc4c 	bl	8005c38 <_sbrk>
 80153a0:	1c43      	adds	r3, r0, #1
 80153a2:	d102      	bne.n	80153aa <_sbrk_r+0x1a>
 80153a4:	682b      	ldr	r3, [r5, #0]
 80153a6:	b103      	cbz	r3, 80153aa <_sbrk_r+0x1a>
 80153a8:	6023      	str	r3, [r4, #0]
 80153aa:	bd38      	pop	{r3, r4, r5, pc}
 80153ac:	2000dbac 	.word	0x2000dbac

080153b0 <__assert_func>:
 80153b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80153b2:	4614      	mov	r4, r2
 80153b4:	461a      	mov	r2, r3
 80153b6:	4b09      	ldr	r3, [pc, #36]	; (80153dc <__assert_func+0x2c>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	4605      	mov	r5, r0
 80153bc:	68d8      	ldr	r0, [r3, #12]
 80153be:	b14c      	cbz	r4, 80153d4 <__assert_func+0x24>
 80153c0:	4b07      	ldr	r3, [pc, #28]	; (80153e0 <__assert_func+0x30>)
 80153c2:	9100      	str	r1, [sp, #0]
 80153c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80153c8:	4906      	ldr	r1, [pc, #24]	; (80153e4 <__assert_func+0x34>)
 80153ca:	462b      	mov	r3, r5
 80153cc:	f000 f844 	bl	8015458 <fiprintf>
 80153d0:	f000 f854 	bl	801547c <abort>
 80153d4:	4b04      	ldr	r3, [pc, #16]	; (80153e8 <__assert_func+0x38>)
 80153d6:	461c      	mov	r4, r3
 80153d8:	e7f3      	b.n	80153c2 <__assert_func+0x12>
 80153da:	bf00      	nop
 80153dc:	20000088 	.word	0x20000088
 80153e0:	0801672e 	.word	0x0801672e
 80153e4:	0801673b 	.word	0x0801673b
 80153e8:	08016769 	.word	0x08016769

080153ec <_calloc_r>:
 80153ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80153ee:	fba1 2402 	umull	r2, r4, r1, r2
 80153f2:	b94c      	cbnz	r4, 8015408 <_calloc_r+0x1c>
 80153f4:	4611      	mov	r1, r2
 80153f6:	9201      	str	r2, [sp, #4]
 80153f8:	f7ff fb14 	bl	8014a24 <_malloc_r>
 80153fc:	9a01      	ldr	r2, [sp, #4]
 80153fe:	4605      	mov	r5, r0
 8015400:	b930      	cbnz	r0, 8015410 <_calloc_r+0x24>
 8015402:	4628      	mov	r0, r5
 8015404:	b003      	add	sp, #12
 8015406:	bd30      	pop	{r4, r5, pc}
 8015408:	220c      	movs	r2, #12
 801540a:	6002      	str	r2, [r0, #0]
 801540c:	2500      	movs	r5, #0
 801540e:	e7f8      	b.n	8015402 <_calloc_r+0x16>
 8015410:	4621      	mov	r1, r4
 8015412:	f7fe fb34 	bl	8013a7e <memset>
 8015416:	e7f4      	b.n	8015402 <_calloc_r+0x16>

08015418 <__ascii_mbtowc>:
 8015418:	b082      	sub	sp, #8
 801541a:	b901      	cbnz	r1, 801541e <__ascii_mbtowc+0x6>
 801541c:	a901      	add	r1, sp, #4
 801541e:	b142      	cbz	r2, 8015432 <__ascii_mbtowc+0x1a>
 8015420:	b14b      	cbz	r3, 8015436 <__ascii_mbtowc+0x1e>
 8015422:	7813      	ldrb	r3, [r2, #0]
 8015424:	600b      	str	r3, [r1, #0]
 8015426:	7812      	ldrb	r2, [r2, #0]
 8015428:	1e10      	subs	r0, r2, #0
 801542a:	bf18      	it	ne
 801542c:	2001      	movne	r0, #1
 801542e:	b002      	add	sp, #8
 8015430:	4770      	bx	lr
 8015432:	4610      	mov	r0, r2
 8015434:	e7fb      	b.n	801542e <__ascii_mbtowc+0x16>
 8015436:	f06f 0001 	mvn.w	r0, #1
 801543a:	e7f8      	b.n	801542e <__ascii_mbtowc+0x16>

0801543c <__ascii_wctomb>:
 801543c:	b149      	cbz	r1, 8015452 <__ascii_wctomb+0x16>
 801543e:	2aff      	cmp	r2, #255	; 0xff
 8015440:	bf85      	ittet	hi
 8015442:	238a      	movhi	r3, #138	; 0x8a
 8015444:	6003      	strhi	r3, [r0, #0]
 8015446:	700a      	strbls	r2, [r1, #0]
 8015448:	f04f 30ff 	movhi.w	r0, #4294967295
 801544c:	bf98      	it	ls
 801544e:	2001      	movls	r0, #1
 8015450:	4770      	bx	lr
 8015452:	4608      	mov	r0, r1
 8015454:	4770      	bx	lr
	...

08015458 <fiprintf>:
 8015458:	b40e      	push	{r1, r2, r3}
 801545a:	b503      	push	{r0, r1, lr}
 801545c:	4601      	mov	r1, r0
 801545e:	ab03      	add	r3, sp, #12
 8015460:	4805      	ldr	r0, [pc, #20]	; (8015478 <fiprintf+0x20>)
 8015462:	f853 2b04 	ldr.w	r2, [r3], #4
 8015466:	6800      	ldr	r0, [r0, #0]
 8015468:	9301      	str	r3, [sp, #4]
 801546a:	f000 f837 	bl	80154dc <_vfiprintf_r>
 801546e:	b002      	add	sp, #8
 8015470:	f85d eb04 	ldr.w	lr, [sp], #4
 8015474:	b003      	add	sp, #12
 8015476:	4770      	bx	lr
 8015478:	20000088 	.word	0x20000088

0801547c <abort>:
 801547c:	b508      	push	{r3, lr}
 801547e:	2006      	movs	r0, #6
 8015480:	f000 fa04 	bl	801588c <raise>
 8015484:	2001      	movs	r0, #1
 8015486:	f7f0 fb5f 	bl	8005b48 <_exit>

0801548a <__sfputc_r>:
 801548a:	6893      	ldr	r3, [r2, #8]
 801548c:	3b01      	subs	r3, #1
 801548e:	2b00      	cmp	r3, #0
 8015490:	b410      	push	{r4}
 8015492:	6093      	str	r3, [r2, #8]
 8015494:	da08      	bge.n	80154a8 <__sfputc_r+0x1e>
 8015496:	6994      	ldr	r4, [r2, #24]
 8015498:	42a3      	cmp	r3, r4
 801549a:	db01      	blt.n	80154a0 <__sfputc_r+0x16>
 801549c:	290a      	cmp	r1, #10
 801549e:	d103      	bne.n	80154a8 <__sfputc_r+0x1e>
 80154a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154a4:	f000 b934 	b.w	8015710 <__swbuf_r>
 80154a8:	6813      	ldr	r3, [r2, #0]
 80154aa:	1c58      	adds	r0, r3, #1
 80154ac:	6010      	str	r0, [r2, #0]
 80154ae:	7019      	strb	r1, [r3, #0]
 80154b0:	4608      	mov	r0, r1
 80154b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80154b6:	4770      	bx	lr

080154b8 <__sfputs_r>:
 80154b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154ba:	4606      	mov	r6, r0
 80154bc:	460f      	mov	r7, r1
 80154be:	4614      	mov	r4, r2
 80154c0:	18d5      	adds	r5, r2, r3
 80154c2:	42ac      	cmp	r4, r5
 80154c4:	d101      	bne.n	80154ca <__sfputs_r+0x12>
 80154c6:	2000      	movs	r0, #0
 80154c8:	e007      	b.n	80154da <__sfputs_r+0x22>
 80154ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154ce:	463a      	mov	r2, r7
 80154d0:	4630      	mov	r0, r6
 80154d2:	f7ff ffda 	bl	801548a <__sfputc_r>
 80154d6:	1c43      	adds	r3, r0, #1
 80154d8:	d1f3      	bne.n	80154c2 <__sfputs_r+0xa>
 80154da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080154dc <_vfiprintf_r>:
 80154dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154e0:	460d      	mov	r5, r1
 80154e2:	b09d      	sub	sp, #116	; 0x74
 80154e4:	4614      	mov	r4, r2
 80154e6:	4698      	mov	r8, r3
 80154e8:	4606      	mov	r6, r0
 80154ea:	b118      	cbz	r0, 80154f4 <_vfiprintf_r+0x18>
 80154ec:	6a03      	ldr	r3, [r0, #32]
 80154ee:	b90b      	cbnz	r3, 80154f4 <_vfiprintf_r+0x18>
 80154f0:	f7fe fa4c 	bl	801398c <__sinit>
 80154f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80154f6:	07d9      	lsls	r1, r3, #31
 80154f8:	d405      	bmi.n	8015506 <_vfiprintf_r+0x2a>
 80154fa:	89ab      	ldrh	r3, [r5, #12]
 80154fc:	059a      	lsls	r2, r3, #22
 80154fe:	d402      	bmi.n	8015506 <_vfiprintf_r+0x2a>
 8015500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015502:	f7fe fb8f 	bl	8013c24 <__retarget_lock_acquire_recursive>
 8015506:	89ab      	ldrh	r3, [r5, #12]
 8015508:	071b      	lsls	r3, r3, #28
 801550a:	d501      	bpl.n	8015510 <_vfiprintf_r+0x34>
 801550c:	692b      	ldr	r3, [r5, #16]
 801550e:	b99b      	cbnz	r3, 8015538 <_vfiprintf_r+0x5c>
 8015510:	4629      	mov	r1, r5
 8015512:	4630      	mov	r0, r6
 8015514:	f000 f93a 	bl	801578c <__swsetup_r>
 8015518:	b170      	cbz	r0, 8015538 <_vfiprintf_r+0x5c>
 801551a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801551c:	07dc      	lsls	r4, r3, #31
 801551e:	d504      	bpl.n	801552a <_vfiprintf_r+0x4e>
 8015520:	f04f 30ff 	mov.w	r0, #4294967295
 8015524:	b01d      	add	sp, #116	; 0x74
 8015526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801552a:	89ab      	ldrh	r3, [r5, #12]
 801552c:	0598      	lsls	r0, r3, #22
 801552e:	d4f7      	bmi.n	8015520 <_vfiprintf_r+0x44>
 8015530:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015532:	f7fe fb78 	bl	8013c26 <__retarget_lock_release_recursive>
 8015536:	e7f3      	b.n	8015520 <_vfiprintf_r+0x44>
 8015538:	2300      	movs	r3, #0
 801553a:	9309      	str	r3, [sp, #36]	; 0x24
 801553c:	2320      	movs	r3, #32
 801553e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015542:	f8cd 800c 	str.w	r8, [sp, #12]
 8015546:	2330      	movs	r3, #48	; 0x30
 8015548:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80156fc <_vfiprintf_r+0x220>
 801554c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015550:	f04f 0901 	mov.w	r9, #1
 8015554:	4623      	mov	r3, r4
 8015556:	469a      	mov	sl, r3
 8015558:	f813 2b01 	ldrb.w	r2, [r3], #1
 801555c:	b10a      	cbz	r2, 8015562 <_vfiprintf_r+0x86>
 801555e:	2a25      	cmp	r2, #37	; 0x25
 8015560:	d1f9      	bne.n	8015556 <_vfiprintf_r+0x7a>
 8015562:	ebba 0b04 	subs.w	fp, sl, r4
 8015566:	d00b      	beq.n	8015580 <_vfiprintf_r+0xa4>
 8015568:	465b      	mov	r3, fp
 801556a:	4622      	mov	r2, r4
 801556c:	4629      	mov	r1, r5
 801556e:	4630      	mov	r0, r6
 8015570:	f7ff ffa2 	bl	80154b8 <__sfputs_r>
 8015574:	3001      	adds	r0, #1
 8015576:	f000 80a9 	beq.w	80156cc <_vfiprintf_r+0x1f0>
 801557a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801557c:	445a      	add	r2, fp
 801557e:	9209      	str	r2, [sp, #36]	; 0x24
 8015580:	f89a 3000 	ldrb.w	r3, [sl]
 8015584:	2b00      	cmp	r3, #0
 8015586:	f000 80a1 	beq.w	80156cc <_vfiprintf_r+0x1f0>
 801558a:	2300      	movs	r3, #0
 801558c:	f04f 32ff 	mov.w	r2, #4294967295
 8015590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015594:	f10a 0a01 	add.w	sl, sl, #1
 8015598:	9304      	str	r3, [sp, #16]
 801559a:	9307      	str	r3, [sp, #28]
 801559c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80155a0:	931a      	str	r3, [sp, #104]	; 0x68
 80155a2:	4654      	mov	r4, sl
 80155a4:	2205      	movs	r2, #5
 80155a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155aa:	4854      	ldr	r0, [pc, #336]	; (80156fc <_vfiprintf_r+0x220>)
 80155ac:	f7ea fe18 	bl	80001e0 <memchr>
 80155b0:	9a04      	ldr	r2, [sp, #16]
 80155b2:	b9d8      	cbnz	r0, 80155ec <_vfiprintf_r+0x110>
 80155b4:	06d1      	lsls	r1, r2, #27
 80155b6:	bf44      	itt	mi
 80155b8:	2320      	movmi	r3, #32
 80155ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155be:	0713      	lsls	r3, r2, #28
 80155c0:	bf44      	itt	mi
 80155c2:	232b      	movmi	r3, #43	; 0x2b
 80155c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80155c8:	f89a 3000 	ldrb.w	r3, [sl]
 80155cc:	2b2a      	cmp	r3, #42	; 0x2a
 80155ce:	d015      	beq.n	80155fc <_vfiprintf_r+0x120>
 80155d0:	9a07      	ldr	r2, [sp, #28]
 80155d2:	4654      	mov	r4, sl
 80155d4:	2000      	movs	r0, #0
 80155d6:	f04f 0c0a 	mov.w	ip, #10
 80155da:	4621      	mov	r1, r4
 80155dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155e0:	3b30      	subs	r3, #48	; 0x30
 80155e2:	2b09      	cmp	r3, #9
 80155e4:	d94d      	bls.n	8015682 <_vfiprintf_r+0x1a6>
 80155e6:	b1b0      	cbz	r0, 8015616 <_vfiprintf_r+0x13a>
 80155e8:	9207      	str	r2, [sp, #28]
 80155ea:	e014      	b.n	8015616 <_vfiprintf_r+0x13a>
 80155ec:	eba0 0308 	sub.w	r3, r0, r8
 80155f0:	fa09 f303 	lsl.w	r3, r9, r3
 80155f4:	4313      	orrs	r3, r2
 80155f6:	9304      	str	r3, [sp, #16]
 80155f8:	46a2      	mov	sl, r4
 80155fa:	e7d2      	b.n	80155a2 <_vfiprintf_r+0xc6>
 80155fc:	9b03      	ldr	r3, [sp, #12]
 80155fe:	1d19      	adds	r1, r3, #4
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	9103      	str	r1, [sp, #12]
 8015604:	2b00      	cmp	r3, #0
 8015606:	bfbb      	ittet	lt
 8015608:	425b      	neglt	r3, r3
 801560a:	f042 0202 	orrlt.w	r2, r2, #2
 801560e:	9307      	strge	r3, [sp, #28]
 8015610:	9307      	strlt	r3, [sp, #28]
 8015612:	bfb8      	it	lt
 8015614:	9204      	strlt	r2, [sp, #16]
 8015616:	7823      	ldrb	r3, [r4, #0]
 8015618:	2b2e      	cmp	r3, #46	; 0x2e
 801561a:	d10c      	bne.n	8015636 <_vfiprintf_r+0x15a>
 801561c:	7863      	ldrb	r3, [r4, #1]
 801561e:	2b2a      	cmp	r3, #42	; 0x2a
 8015620:	d134      	bne.n	801568c <_vfiprintf_r+0x1b0>
 8015622:	9b03      	ldr	r3, [sp, #12]
 8015624:	1d1a      	adds	r2, r3, #4
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	9203      	str	r2, [sp, #12]
 801562a:	2b00      	cmp	r3, #0
 801562c:	bfb8      	it	lt
 801562e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015632:	3402      	adds	r4, #2
 8015634:	9305      	str	r3, [sp, #20]
 8015636:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801570c <_vfiprintf_r+0x230>
 801563a:	7821      	ldrb	r1, [r4, #0]
 801563c:	2203      	movs	r2, #3
 801563e:	4650      	mov	r0, sl
 8015640:	f7ea fdce 	bl	80001e0 <memchr>
 8015644:	b138      	cbz	r0, 8015656 <_vfiprintf_r+0x17a>
 8015646:	9b04      	ldr	r3, [sp, #16]
 8015648:	eba0 000a 	sub.w	r0, r0, sl
 801564c:	2240      	movs	r2, #64	; 0x40
 801564e:	4082      	lsls	r2, r0
 8015650:	4313      	orrs	r3, r2
 8015652:	3401      	adds	r4, #1
 8015654:	9304      	str	r3, [sp, #16]
 8015656:	f814 1b01 	ldrb.w	r1, [r4], #1
 801565a:	4829      	ldr	r0, [pc, #164]	; (8015700 <_vfiprintf_r+0x224>)
 801565c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015660:	2206      	movs	r2, #6
 8015662:	f7ea fdbd 	bl	80001e0 <memchr>
 8015666:	2800      	cmp	r0, #0
 8015668:	d03f      	beq.n	80156ea <_vfiprintf_r+0x20e>
 801566a:	4b26      	ldr	r3, [pc, #152]	; (8015704 <_vfiprintf_r+0x228>)
 801566c:	bb1b      	cbnz	r3, 80156b6 <_vfiprintf_r+0x1da>
 801566e:	9b03      	ldr	r3, [sp, #12]
 8015670:	3307      	adds	r3, #7
 8015672:	f023 0307 	bic.w	r3, r3, #7
 8015676:	3308      	adds	r3, #8
 8015678:	9303      	str	r3, [sp, #12]
 801567a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801567c:	443b      	add	r3, r7
 801567e:	9309      	str	r3, [sp, #36]	; 0x24
 8015680:	e768      	b.n	8015554 <_vfiprintf_r+0x78>
 8015682:	fb0c 3202 	mla	r2, ip, r2, r3
 8015686:	460c      	mov	r4, r1
 8015688:	2001      	movs	r0, #1
 801568a:	e7a6      	b.n	80155da <_vfiprintf_r+0xfe>
 801568c:	2300      	movs	r3, #0
 801568e:	3401      	adds	r4, #1
 8015690:	9305      	str	r3, [sp, #20]
 8015692:	4619      	mov	r1, r3
 8015694:	f04f 0c0a 	mov.w	ip, #10
 8015698:	4620      	mov	r0, r4
 801569a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801569e:	3a30      	subs	r2, #48	; 0x30
 80156a0:	2a09      	cmp	r2, #9
 80156a2:	d903      	bls.n	80156ac <_vfiprintf_r+0x1d0>
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d0c6      	beq.n	8015636 <_vfiprintf_r+0x15a>
 80156a8:	9105      	str	r1, [sp, #20]
 80156aa:	e7c4      	b.n	8015636 <_vfiprintf_r+0x15a>
 80156ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80156b0:	4604      	mov	r4, r0
 80156b2:	2301      	movs	r3, #1
 80156b4:	e7f0      	b.n	8015698 <_vfiprintf_r+0x1bc>
 80156b6:	ab03      	add	r3, sp, #12
 80156b8:	9300      	str	r3, [sp, #0]
 80156ba:	462a      	mov	r2, r5
 80156bc:	4b12      	ldr	r3, [pc, #72]	; (8015708 <_vfiprintf_r+0x22c>)
 80156be:	a904      	add	r1, sp, #16
 80156c0:	4630      	mov	r0, r6
 80156c2:	f7fd fd23 	bl	801310c <_printf_float>
 80156c6:	4607      	mov	r7, r0
 80156c8:	1c78      	adds	r0, r7, #1
 80156ca:	d1d6      	bne.n	801567a <_vfiprintf_r+0x19e>
 80156cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80156ce:	07d9      	lsls	r1, r3, #31
 80156d0:	d405      	bmi.n	80156de <_vfiprintf_r+0x202>
 80156d2:	89ab      	ldrh	r3, [r5, #12]
 80156d4:	059a      	lsls	r2, r3, #22
 80156d6:	d402      	bmi.n	80156de <_vfiprintf_r+0x202>
 80156d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80156da:	f7fe faa4 	bl	8013c26 <__retarget_lock_release_recursive>
 80156de:	89ab      	ldrh	r3, [r5, #12]
 80156e0:	065b      	lsls	r3, r3, #25
 80156e2:	f53f af1d 	bmi.w	8015520 <_vfiprintf_r+0x44>
 80156e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156e8:	e71c      	b.n	8015524 <_vfiprintf_r+0x48>
 80156ea:	ab03      	add	r3, sp, #12
 80156ec:	9300      	str	r3, [sp, #0]
 80156ee:	462a      	mov	r2, r5
 80156f0:	4b05      	ldr	r3, [pc, #20]	; (8015708 <_vfiprintf_r+0x22c>)
 80156f2:	a904      	add	r1, sp, #16
 80156f4:	4630      	mov	r0, r6
 80156f6:	f7fd ffad 	bl	8013654 <_printf_i>
 80156fa:	e7e4      	b.n	80156c6 <_vfiprintf_r+0x1ea>
 80156fc:	0801686b 	.word	0x0801686b
 8015700:	08016875 	.word	0x08016875
 8015704:	0801310d 	.word	0x0801310d
 8015708:	080154b9 	.word	0x080154b9
 801570c:	08016871 	.word	0x08016871

08015710 <__swbuf_r>:
 8015710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015712:	460e      	mov	r6, r1
 8015714:	4614      	mov	r4, r2
 8015716:	4605      	mov	r5, r0
 8015718:	b118      	cbz	r0, 8015722 <__swbuf_r+0x12>
 801571a:	6a03      	ldr	r3, [r0, #32]
 801571c:	b90b      	cbnz	r3, 8015722 <__swbuf_r+0x12>
 801571e:	f7fe f935 	bl	801398c <__sinit>
 8015722:	69a3      	ldr	r3, [r4, #24]
 8015724:	60a3      	str	r3, [r4, #8]
 8015726:	89a3      	ldrh	r3, [r4, #12]
 8015728:	071a      	lsls	r2, r3, #28
 801572a:	d525      	bpl.n	8015778 <__swbuf_r+0x68>
 801572c:	6923      	ldr	r3, [r4, #16]
 801572e:	b31b      	cbz	r3, 8015778 <__swbuf_r+0x68>
 8015730:	6823      	ldr	r3, [r4, #0]
 8015732:	6922      	ldr	r2, [r4, #16]
 8015734:	1a98      	subs	r0, r3, r2
 8015736:	6963      	ldr	r3, [r4, #20]
 8015738:	b2f6      	uxtb	r6, r6
 801573a:	4283      	cmp	r3, r0
 801573c:	4637      	mov	r7, r6
 801573e:	dc04      	bgt.n	801574a <__swbuf_r+0x3a>
 8015740:	4621      	mov	r1, r4
 8015742:	4628      	mov	r0, r5
 8015744:	f7ff fdfc 	bl	8015340 <_fflush_r>
 8015748:	b9e0      	cbnz	r0, 8015784 <__swbuf_r+0x74>
 801574a:	68a3      	ldr	r3, [r4, #8]
 801574c:	3b01      	subs	r3, #1
 801574e:	60a3      	str	r3, [r4, #8]
 8015750:	6823      	ldr	r3, [r4, #0]
 8015752:	1c5a      	adds	r2, r3, #1
 8015754:	6022      	str	r2, [r4, #0]
 8015756:	701e      	strb	r6, [r3, #0]
 8015758:	6962      	ldr	r2, [r4, #20]
 801575a:	1c43      	adds	r3, r0, #1
 801575c:	429a      	cmp	r2, r3
 801575e:	d004      	beq.n	801576a <__swbuf_r+0x5a>
 8015760:	89a3      	ldrh	r3, [r4, #12]
 8015762:	07db      	lsls	r3, r3, #31
 8015764:	d506      	bpl.n	8015774 <__swbuf_r+0x64>
 8015766:	2e0a      	cmp	r6, #10
 8015768:	d104      	bne.n	8015774 <__swbuf_r+0x64>
 801576a:	4621      	mov	r1, r4
 801576c:	4628      	mov	r0, r5
 801576e:	f7ff fde7 	bl	8015340 <_fflush_r>
 8015772:	b938      	cbnz	r0, 8015784 <__swbuf_r+0x74>
 8015774:	4638      	mov	r0, r7
 8015776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015778:	4621      	mov	r1, r4
 801577a:	4628      	mov	r0, r5
 801577c:	f000 f806 	bl	801578c <__swsetup_r>
 8015780:	2800      	cmp	r0, #0
 8015782:	d0d5      	beq.n	8015730 <__swbuf_r+0x20>
 8015784:	f04f 37ff 	mov.w	r7, #4294967295
 8015788:	e7f4      	b.n	8015774 <__swbuf_r+0x64>
	...

0801578c <__swsetup_r>:
 801578c:	b538      	push	{r3, r4, r5, lr}
 801578e:	4b2a      	ldr	r3, [pc, #168]	; (8015838 <__swsetup_r+0xac>)
 8015790:	4605      	mov	r5, r0
 8015792:	6818      	ldr	r0, [r3, #0]
 8015794:	460c      	mov	r4, r1
 8015796:	b118      	cbz	r0, 80157a0 <__swsetup_r+0x14>
 8015798:	6a03      	ldr	r3, [r0, #32]
 801579a:	b90b      	cbnz	r3, 80157a0 <__swsetup_r+0x14>
 801579c:	f7fe f8f6 	bl	801398c <__sinit>
 80157a0:	89a3      	ldrh	r3, [r4, #12]
 80157a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80157a6:	0718      	lsls	r0, r3, #28
 80157a8:	d422      	bmi.n	80157f0 <__swsetup_r+0x64>
 80157aa:	06d9      	lsls	r1, r3, #27
 80157ac:	d407      	bmi.n	80157be <__swsetup_r+0x32>
 80157ae:	2309      	movs	r3, #9
 80157b0:	602b      	str	r3, [r5, #0]
 80157b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80157b6:	81a3      	strh	r3, [r4, #12]
 80157b8:	f04f 30ff 	mov.w	r0, #4294967295
 80157bc:	e034      	b.n	8015828 <__swsetup_r+0x9c>
 80157be:	0758      	lsls	r0, r3, #29
 80157c0:	d512      	bpl.n	80157e8 <__swsetup_r+0x5c>
 80157c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80157c4:	b141      	cbz	r1, 80157d8 <__swsetup_r+0x4c>
 80157c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80157ca:	4299      	cmp	r1, r3
 80157cc:	d002      	beq.n	80157d4 <__swsetup_r+0x48>
 80157ce:	4628      	mov	r0, r5
 80157d0:	f7ff f8b4 	bl	801493c <_free_r>
 80157d4:	2300      	movs	r3, #0
 80157d6:	6363      	str	r3, [r4, #52]	; 0x34
 80157d8:	89a3      	ldrh	r3, [r4, #12]
 80157da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80157de:	81a3      	strh	r3, [r4, #12]
 80157e0:	2300      	movs	r3, #0
 80157e2:	6063      	str	r3, [r4, #4]
 80157e4:	6923      	ldr	r3, [r4, #16]
 80157e6:	6023      	str	r3, [r4, #0]
 80157e8:	89a3      	ldrh	r3, [r4, #12]
 80157ea:	f043 0308 	orr.w	r3, r3, #8
 80157ee:	81a3      	strh	r3, [r4, #12]
 80157f0:	6923      	ldr	r3, [r4, #16]
 80157f2:	b94b      	cbnz	r3, 8015808 <__swsetup_r+0x7c>
 80157f4:	89a3      	ldrh	r3, [r4, #12]
 80157f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80157fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80157fe:	d003      	beq.n	8015808 <__swsetup_r+0x7c>
 8015800:	4621      	mov	r1, r4
 8015802:	4628      	mov	r0, r5
 8015804:	f000 f884 	bl	8015910 <__smakebuf_r>
 8015808:	89a0      	ldrh	r0, [r4, #12]
 801580a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801580e:	f010 0301 	ands.w	r3, r0, #1
 8015812:	d00a      	beq.n	801582a <__swsetup_r+0x9e>
 8015814:	2300      	movs	r3, #0
 8015816:	60a3      	str	r3, [r4, #8]
 8015818:	6963      	ldr	r3, [r4, #20]
 801581a:	425b      	negs	r3, r3
 801581c:	61a3      	str	r3, [r4, #24]
 801581e:	6923      	ldr	r3, [r4, #16]
 8015820:	b943      	cbnz	r3, 8015834 <__swsetup_r+0xa8>
 8015822:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015826:	d1c4      	bne.n	80157b2 <__swsetup_r+0x26>
 8015828:	bd38      	pop	{r3, r4, r5, pc}
 801582a:	0781      	lsls	r1, r0, #30
 801582c:	bf58      	it	pl
 801582e:	6963      	ldrpl	r3, [r4, #20]
 8015830:	60a3      	str	r3, [r4, #8]
 8015832:	e7f4      	b.n	801581e <__swsetup_r+0x92>
 8015834:	2000      	movs	r0, #0
 8015836:	e7f7      	b.n	8015828 <__swsetup_r+0x9c>
 8015838:	20000088 	.word	0x20000088

0801583c <_raise_r>:
 801583c:	291f      	cmp	r1, #31
 801583e:	b538      	push	{r3, r4, r5, lr}
 8015840:	4604      	mov	r4, r0
 8015842:	460d      	mov	r5, r1
 8015844:	d904      	bls.n	8015850 <_raise_r+0x14>
 8015846:	2316      	movs	r3, #22
 8015848:	6003      	str	r3, [r0, #0]
 801584a:	f04f 30ff 	mov.w	r0, #4294967295
 801584e:	bd38      	pop	{r3, r4, r5, pc}
 8015850:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015852:	b112      	cbz	r2, 801585a <_raise_r+0x1e>
 8015854:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015858:	b94b      	cbnz	r3, 801586e <_raise_r+0x32>
 801585a:	4620      	mov	r0, r4
 801585c:	f000 f830 	bl	80158c0 <_getpid_r>
 8015860:	462a      	mov	r2, r5
 8015862:	4601      	mov	r1, r0
 8015864:	4620      	mov	r0, r4
 8015866:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801586a:	f000 b817 	b.w	801589c <_kill_r>
 801586e:	2b01      	cmp	r3, #1
 8015870:	d00a      	beq.n	8015888 <_raise_r+0x4c>
 8015872:	1c59      	adds	r1, r3, #1
 8015874:	d103      	bne.n	801587e <_raise_r+0x42>
 8015876:	2316      	movs	r3, #22
 8015878:	6003      	str	r3, [r0, #0]
 801587a:	2001      	movs	r0, #1
 801587c:	e7e7      	b.n	801584e <_raise_r+0x12>
 801587e:	2400      	movs	r4, #0
 8015880:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015884:	4628      	mov	r0, r5
 8015886:	4798      	blx	r3
 8015888:	2000      	movs	r0, #0
 801588a:	e7e0      	b.n	801584e <_raise_r+0x12>

0801588c <raise>:
 801588c:	4b02      	ldr	r3, [pc, #8]	; (8015898 <raise+0xc>)
 801588e:	4601      	mov	r1, r0
 8015890:	6818      	ldr	r0, [r3, #0]
 8015892:	f7ff bfd3 	b.w	801583c <_raise_r>
 8015896:	bf00      	nop
 8015898:	20000088 	.word	0x20000088

0801589c <_kill_r>:
 801589c:	b538      	push	{r3, r4, r5, lr}
 801589e:	4d07      	ldr	r5, [pc, #28]	; (80158bc <_kill_r+0x20>)
 80158a0:	2300      	movs	r3, #0
 80158a2:	4604      	mov	r4, r0
 80158a4:	4608      	mov	r0, r1
 80158a6:	4611      	mov	r1, r2
 80158a8:	602b      	str	r3, [r5, #0]
 80158aa:	f7f0 f93d 	bl	8005b28 <_kill>
 80158ae:	1c43      	adds	r3, r0, #1
 80158b0:	d102      	bne.n	80158b8 <_kill_r+0x1c>
 80158b2:	682b      	ldr	r3, [r5, #0]
 80158b4:	b103      	cbz	r3, 80158b8 <_kill_r+0x1c>
 80158b6:	6023      	str	r3, [r4, #0]
 80158b8:	bd38      	pop	{r3, r4, r5, pc}
 80158ba:	bf00      	nop
 80158bc:	2000dbac 	.word	0x2000dbac

080158c0 <_getpid_r>:
 80158c0:	f7f0 b92a 	b.w	8005b18 <_getpid>

080158c4 <__swhatbuf_r>:
 80158c4:	b570      	push	{r4, r5, r6, lr}
 80158c6:	460c      	mov	r4, r1
 80158c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80158cc:	2900      	cmp	r1, #0
 80158ce:	b096      	sub	sp, #88	; 0x58
 80158d0:	4615      	mov	r5, r2
 80158d2:	461e      	mov	r6, r3
 80158d4:	da0d      	bge.n	80158f2 <__swhatbuf_r+0x2e>
 80158d6:	89a3      	ldrh	r3, [r4, #12]
 80158d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80158dc:	f04f 0100 	mov.w	r1, #0
 80158e0:	bf0c      	ite	eq
 80158e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80158e6:	2340      	movne	r3, #64	; 0x40
 80158e8:	2000      	movs	r0, #0
 80158ea:	6031      	str	r1, [r6, #0]
 80158ec:	602b      	str	r3, [r5, #0]
 80158ee:	b016      	add	sp, #88	; 0x58
 80158f0:	bd70      	pop	{r4, r5, r6, pc}
 80158f2:	466a      	mov	r2, sp
 80158f4:	f000 f848 	bl	8015988 <_fstat_r>
 80158f8:	2800      	cmp	r0, #0
 80158fa:	dbec      	blt.n	80158d6 <__swhatbuf_r+0x12>
 80158fc:	9901      	ldr	r1, [sp, #4]
 80158fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8015902:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015906:	4259      	negs	r1, r3
 8015908:	4159      	adcs	r1, r3
 801590a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801590e:	e7eb      	b.n	80158e8 <__swhatbuf_r+0x24>

08015910 <__smakebuf_r>:
 8015910:	898b      	ldrh	r3, [r1, #12]
 8015912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015914:	079d      	lsls	r5, r3, #30
 8015916:	4606      	mov	r6, r0
 8015918:	460c      	mov	r4, r1
 801591a:	d507      	bpl.n	801592c <__smakebuf_r+0x1c>
 801591c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015920:	6023      	str	r3, [r4, #0]
 8015922:	6123      	str	r3, [r4, #16]
 8015924:	2301      	movs	r3, #1
 8015926:	6163      	str	r3, [r4, #20]
 8015928:	b002      	add	sp, #8
 801592a:	bd70      	pop	{r4, r5, r6, pc}
 801592c:	ab01      	add	r3, sp, #4
 801592e:	466a      	mov	r2, sp
 8015930:	f7ff ffc8 	bl	80158c4 <__swhatbuf_r>
 8015934:	9900      	ldr	r1, [sp, #0]
 8015936:	4605      	mov	r5, r0
 8015938:	4630      	mov	r0, r6
 801593a:	f7ff f873 	bl	8014a24 <_malloc_r>
 801593e:	b948      	cbnz	r0, 8015954 <__smakebuf_r+0x44>
 8015940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015944:	059a      	lsls	r2, r3, #22
 8015946:	d4ef      	bmi.n	8015928 <__smakebuf_r+0x18>
 8015948:	f023 0303 	bic.w	r3, r3, #3
 801594c:	f043 0302 	orr.w	r3, r3, #2
 8015950:	81a3      	strh	r3, [r4, #12]
 8015952:	e7e3      	b.n	801591c <__smakebuf_r+0xc>
 8015954:	89a3      	ldrh	r3, [r4, #12]
 8015956:	6020      	str	r0, [r4, #0]
 8015958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801595c:	81a3      	strh	r3, [r4, #12]
 801595e:	9b00      	ldr	r3, [sp, #0]
 8015960:	6163      	str	r3, [r4, #20]
 8015962:	9b01      	ldr	r3, [sp, #4]
 8015964:	6120      	str	r0, [r4, #16]
 8015966:	b15b      	cbz	r3, 8015980 <__smakebuf_r+0x70>
 8015968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801596c:	4630      	mov	r0, r6
 801596e:	f000 f81d 	bl	80159ac <_isatty_r>
 8015972:	b128      	cbz	r0, 8015980 <__smakebuf_r+0x70>
 8015974:	89a3      	ldrh	r3, [r4, #12]
 8015976:	f023 0303 	bic.w	r3, r3, #3
 801597a:	f043 0301 	orr.w	r3, r3, #1
 801597e:	81a3      	strh	r3, [r4, #12]
 8015980:	89a3      	ldrh	r3, [r4, #12]
 8015982:	431d      	orrs	r5, r3
 8015984:	81a5      	strh	r5, [r4, #12]
 8015986:	e7cf      	b.n	8015928 <__smakebuf_r+0x18>

08015988 <_fstat_r>:
 8015988:	b538      	push	{r3, r4, r5, lr}
 801598a:	4d07      	ldr	r5, [pc, #28]	; (80159a8 <_fstat_r+0x20>)
 801598c:	2300      	movs	r3, #0
 801598e:	4604      	mov	r4, r0
 8015990:	4608      	mov	r0, r1
 8015992:	4611      	mov	r1, r2
 8015994:	602b      	str	r3, [r5, #0]
 8015996:	f7f0 f926 	bl	8005be6 <_fstat>
 801599a:	1c43      	adds	r3, r0, #1
 801599c:	d102      	bne.n	80159a4 <_fstat_r+0x1c>
 801599e:	682b      	ldr	r3, [r5, #0]
 80159a0:	b103      	cbz	r3, 80159a4 <_fstat_r+0x1c>
 80159a2:	6023      	str	r3, [r4, #0]
 80159a4:	bd38      	pop	{r3, r4, r5, pc}
 80159a6:	bf00      	nop
 80159a8:	2000dbac 	.word	0x2000dbac

080159ac <_isatty_r>:
 80159ac:	b538      	push	{r3, r4, r5, lr}
 80159ae:	4d06      	ldr	r5, [pc, #24]	; (80159c8 <_isatty_r+0x1c>)
 80159b0:	2300      	movs	r3, #0
 80159b2:	4604      	mov	r4, r0
 80159b4:	4608      	mov	r0, r1
 80159b6:	602b      	str	r3, [r5, #0]
 80159b8:	f7f0 f925 	bl	8005c06 <_isatty>
 80159bc:	1c43      	adds	r3, r0, #1
 80159be:	d102      	bne.n	80159c6 <_isatty_r+0x1a>
 80159c0:	682b      	ldr	r3, [r5, #0]
 80159c2:	b103      	cbz	r3, 80159c6 <_isatty_r+0x1a>
 80159c4:	6023      	str	r3, [r4, #0]
 80159c6:	bd38      	pop	{r3, r4, r5, pc}
 80159c8:	2000dbac 	.word	0x2000dbac

080159cc <_init>:
 80159cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ce:	bf00      	nop
 80159d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159d2:	bc08      	pop	{r3}
 80159d4:	469e      	mov	lr, r3
 80159d6:	4770      	bx	lr

080159d8 <_fini>:
 80159d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159da:	bf00      	nop
 80159dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159de:	bc08      	pop	{r3}
 80159e0:	469e      	mov	lr, r3
 80159e2:	4770      	bx	lr


Stm32_ApiaryWaterDispensingSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011604  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  080117d8  080117d8  000217d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080122f4  080122f4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080122f4  080122f4  000222f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080122fc  080122fc  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080122fc  080122fc  000222fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012300  08012300  00022300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08012304  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000095b0  200001dc  080124e0  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000978c  080124e0  0003978c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002351a  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005000  00000000  00000000  00053769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c80  00000000  00000000  00058770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001619  00000000  00000000  0005a3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028535  00000000  00000000  0005ba09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024ffd  00000000  00000000  00083f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8244  00000000  00000000  000a8f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000872c  00000000  00000000  00191180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  001998ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080117bc 	.word	0x080117bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080117bc 	.word	0x080117bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ldivmod>:
 8000c28:	b97b      	cbnz	r3, 8000c4a <__aeabi_ldivmod+0x22>
 8000c2a:	b972      	cbnz	r2, 8000c4a <__aeabi_ldivmod+0x22>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bfbe      	ittt	lt
 8000c30:	2000      	movlt	r0, #0
 8000c32:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c36:	e006      	blt.n	8000c46 <__aeabi_ldivmod+0x1e>
 8000c38:	bf08      	it	eq
 8000c3a:	2800      	cmpeq	r0, #0
 8000c3c:	bf1c      	itt	ne
 8000c3e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c42:	f04f 30ff 	movne.w	r0, #4294967295
 8000c46:	f000 b9bb 	b.w	8000fc0 <__aeabi_idiv0>
 8000c4a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c4e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c52:	2900      	cmp	r1, #0
 8000c54:	db09      	blt.n	8000c6a <__aeabi_ldivmod+0x42>
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	db1a      	blt.n	8000c90 <__aeabi_ldivmod+0x68>
 8000c5a:	f000 f84d 	bl	8000cf8 <__udivmoddi4>
 8000c5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c66:	b004      	add	sp, #16
 8000c68:	4770      	bx	lr
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	db1b      	blt.n	8000cac <__aeabi_ldivmod+0x84>
 8000c74:	f000 f840 	bl	8000cf8 <__udivmoddi4>
 8000c78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c80:	b004      	add	sp, #16
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	4252      	negs	r2, r2
 8000c8a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c8e:	4770      	bx	lr
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	f000 f82f 	bl	8000cf8 <__udivmoddi4>
 8000c9a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca2:	b004      	add	sp, #16
 8000ca4:	4240      	negs	r0, r0
 8000ca6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000caa:	4770      	bx	lr
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	f000 f821 	bl	8000cf8 <__udivmoddi4>
 8000cb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbe:	b004      	add	sp, #16
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <GFX_SetFont+0x1c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	200001f8 	.word	0x200001f8

08000fe4 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af02      	add	r7, sp, #8
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2b7e      	cmp	r3, #126	; 0x7e
 8000ffe:	f200 80a3 	bhi.w	8001148 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001002:	2300      	movs	r3, #0
 8001004:	75fb      	strb	r3, [r7, #23]
 8001006:	e096      	b.n	8001136 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8001008:	4b51      	ldr	r3, [pc, #324]	; (8001150 <GFX_DrawChar+0x16c>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	3b20      	subs	r3, #32
 8001010:	494f      	ldr	r1, [pc, #316]	; (8001150 <GFX_DrawChar+0x16c>)
 8001012:	6809      	ldr	r1, [r1, #0]
 8001014:	3101      	adds	r1, #1
 8001016:	7809      	ldrb	r1, [r1, #0]
 8001018:	fb03 f101 	mul.w	r1, r3, r1
 800101c:	7dfb      	ldrb	r3, [r7, #23]
 800101e:	440b      	add	r3, r1
 8001020:	3302      	adds	r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8001028:	2300      	movs	r3, #0
 800102a:	757b      	strb	r3, [r7, #21]
 800102c:	e078      	b.n	8001120 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 800102e:	7dbb      	ldrb	r3, [r7, #22]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d032      	beq.n	800109e <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001038:	4b46      	ldr	r3, [pc, #280]	; (8001154 <GFX_DrawChar+0x170>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d113      	bne.n	8001068 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	b29a      	uxth	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4413      	add	r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	b218      	sxth	r0, r3
 800104e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001052:	b29a      	uxth	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b29b      	uxth	r3, r3
 800105c:	b21b      	sxth	r3, r3
 800105e:	79ba      	ldrb	r2, [r7, #6]
 8001060:	4619      	mov	r1, r3
 8001062:	f000 f9d1 	bl	8001408 <SSD1306_DrawPixel>
 8001066:	e052      	b.n	800110e <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001068:	7dfb      	ldrb	r3, [r7, #23]
 800106a:	4a3a      	ldr	r2, [pc, #232]	; (8001154 <GFX_DrawChar+0x170>)
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	fb03 f202 	mul.w	r2, r3, r2
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	18d0      	adds	r0, r2, r3
 8001076:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800107a:	4a36      	ldr	r2, [pc, #216]	; (8001154 <GFX_DrawChar+0x170>)
 800107c:	7812      	ldrb	r2, [r2, #0]
 800107e:	fb03 f202 	mul.w	r2, r3, r2
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	18d1      	adds	r1, r2, r3
 8001086:	4b33      	ldr	r3, [pc, #204]	; (8001154 <GFX_DrawChar+0x170>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b29a      	uxth	r2, r3
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <GFX_DrawChar+0x170>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b29c      	uxth	r4, r3
 8001092:	79bb      	ldrb	r3, [r7, #6]
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	4623      	mov	r3, r4
 8001098:	f000 f960 	bl	800135c <GFX_DrawFillRectangle>
 800109c:	e037      	b.n	800110e <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800109e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d133      	bne.n	800110e <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <GFX_DrawChar+0x170>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d114      	bne.n	80010d8 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	4413      	add	r3, r2
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	b218      	sxth	r0, r3
 80010bc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4413      	add	r3, r2
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	b21b      	sxth	r3, r3
 80010cc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010d0:	4619      	mov	r1, r3
 80010d2:	f000 f999 	bl	8001408 <SSD1306_DrawPixel>
 80010d6:	e01a      	b.n	800110e <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <GFX_DrawChar+0x170>)
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	fb03 f202 	mul.w	r2, r3, r2
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	18d0      	adds	r0, r2, r3
 80010e6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <GFX_DrawChar+0x170>)
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	fb03 f202 	mul.w	r2, r3, r2
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	18d1      	adds	r1, r2, r3
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <GFX_DrawChar+0x170>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <GFX_DrawChar+0x170>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b29c      	uxth	r4, r3
 8001102:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	4623      	mov	r3, r4
 800110a:	f000 f927 	bl	800135c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800110e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	3301      	adds	r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	757b      	strb	r3, [r7, #21]
 800111a:	7dbb      	ldrb	r3, [r7, #22]
 800111c:	085b      	lsrs	r3, r3, #1
 800111e:	75bb      	strb	r3, [r7, #22]
 8001120:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <GFX_DrawChar+0x16c>)
 8001126:	6812      	ldr	r2, [r2, #0]
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	4293      	cmp	r3, r2
 800112c:	f6ff af7f 	blt.w	800102e <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	3301      	adds	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <GFX_DrawChar+0x16c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	7dfa      	ldrb	r2, [r7, #23]
 8001140:	429a      	cmp	r2, r3
 8001142:	f4ff af61 	bcc.w	8001008 <GFX_DrawChar+0x24>
 8001146:	e000      	b.n	800114a <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001148:	bf00      	nop
            }
        }
    }
}
 800114a:	371c      	adds	r7, #28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	200001f8 	.word	0x200001f8
 8001154:	20000000 	.word	0x20000000

08001158 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001170:	e03e      	b.n	80011f0 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001172:	78f9      	ldrb	r1, [r7, #3]
 8001174:	7cfa      	ldrb	r2, [r7, #19]
 8001176:	f897 3020 	ldrb.w	r3, [r7, #32]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	460b      	mov	r3, r1
 800117e:	68b9      	ldr	r1, [r7, #8]
 8001180:	6978      	ldr	r0, [r7, #20]
 8001182:	f7ff ff2f 	bl	8000fe4 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001186:	4b20      	ldr	r3, [pc, #128]	; (8001208 <GFX_DrawString+0xb0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <GFX_DrawString+0xb4>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	3301      	adds	r3, #1
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4413      	add	r3, r2
 800119e:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 80011a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d120      	bne.n	80011ea <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80011a8:	2300      	movs	r3, #0
 80011aa:	74bb      	strb	r3, [r7, #18]
 80011ac:	e012      	b.n	80011d4 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	b218      	sxth	r0, r3
 80011b8:	7cbb      	ldrb	r3, [r7, #18]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	2200      	movs	r2, #0
 80011c8:	4619      	mov	r1, r3
 80011ca:	f000 f91d 	bl	8001408 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 80011ce:	7cbb      	ldrb	r3, [r7, #18]
 80011d0:	3301      	adds	r3, #1
 80011d2:	74bb      	strb	r3, [r7, #18]
 80011d4:	7cba      	ldrb	r2, [r7, #18]
 80011d6:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <GFX_DrawString+0xb0>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	4b0b      	ldr	r3, [pc, #44]	; (800120c <GFX_DrawString+0xb4>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	fb01 f303 	mul.w	r3, r1, r3
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbe1      	blt.n	80011ae <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	607a      	str	r2, [r7, #4]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1ba      	bne.n	8001172 <GFX_DrawString+0x1a>
	}
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200001f8 	.word	0x200001f8
 800120c:	20000000 	.word	0x20000000

08001210 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	; 0x30
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001228:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800122c:	6879      	ldr	r1, [r7, #4]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1acb      	subs	r3, r1, r3
 8001232:	2b00      	cmp	r3, #0
 8001234:	bfb8      	it	lt
 8001236:	425b      	neglt	r3, r3
 8001238:	429a      	cmp	r2, r3
 800123a:	bfcc      	ite	gt
 800123c:	2301      	movgt	r3, #1
 800123e:	2300      	movle	r3, #0
 8001240:	b2db      	uxtb	r3, r3
 8001242:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001244:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00b      	beq.n	8001264 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	623b      	str	r3, [r7, #32]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	6a3b      	ldr	r3, [r7, #32]
 8001262:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001264:	68fa      	ldr	r2, [r7, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dd0b      	ble.n	8001284 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	b29a      	uxth	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	b29b      	uxth	r3, r3
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	bfb8      	it	lt
 800129c:	425b      	neglt	r3, r3
 800129e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80012a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012a4:	0fda      	lsrs	r2, r3, #31
 80012a6:	4413      	add	r3, r2
 80012a8:	105b      	asrs	r3, r3, #1
 80012aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	da02      	bge.n	80012ba <GFX_WriteLine+0xaa>
	        ystep = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80012b8:	e030      	b.n	800131c <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 80012ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012be:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80012c0:	e02c      	b.n	800131c <GFX_WriteLine+0x10c>
	        if (steep) {
 80012c2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	b21b      	sxth	r3, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	b211      	sxth	r1, r2
 80012d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f896 	bl	8001408 <SSD1306_DrawPixel>
 80012dc:	e008      	b.n	80012f0 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	b211      	sxth	r1, r2
 80012e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f88c 	bl	8001408 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80012f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012f2:	8abb      	ldrh	r3, [r7, #20]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80012fa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80012fe:	2b00      	cmp	r3, #0
 8001300:	da09      	bge.n	8001316 <GFX_WriteLine+0x106>
	            y_start += ystep;
 8001302:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	4413      	add	r3, r2
 800130a:	60bb      	str	r3, [r7, #8]
	            err += dx;
 800130c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800130e:	8afb      	ldrh	r3, [r7, #22]
 8001310:	4413      	add	r3, r2
 8001312:	b29b      	uxth	r3, r3
 8001314:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	ddce      	ble.n	80012c2 <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001324:	bf00      	nop
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	; 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af02      	add	r7, sp, #8
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	1e5a      	subs	r2, r3, #1
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	68f8      	ldr	r0, [r7, #12]
 8001350:	f7ff ff5e 	bl	8001210 <GFX_WriteLine>
}
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	460b      	mov	r3, r1
 800136c:	80fb      	strh	r3, [r7, #6]
 800136e:	4613      	mov	r3, r2
 8001370:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e009      	b.n	800138c <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001378:	88ba      	ldrh	r2, [r7, #4]
 800137a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800137e:	68b9      	ldr	r1, [r7, #8]
 8001380:	6978      	ldr	r0, [r7, #20]
 8001382:	f7ff ffd4 	bl	800132e <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	3301      	adds	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	4413      	add	r3, r2
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	429a      	cmp	r2, r3
 8001396:	dbef      	blt.n	8001378 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001398:	bf00      	nop
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <SSD1306_Command+0x2c>)
 80013b0:	6818      	ldr	r0, [r3, #0]
 80013b2:	2364      	movs	r3, #100	; 0x64
 80013b4:	9302      	str	r3, [sp, #8]
 80013b6:	2301      	movs	r3, #1
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	1dfb      	adds	r3, r7, #7
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2301      	movs	r3, #1
 80013c0:	2200      	movs	r2, #0
 80013c2:	2178      	movs	r1, #120	; 0x78
 80013c4:	f005 f85a 	bl	800647c <HAL_I2C_Mem_Write>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200001fc 	.word	0x200001fc

080013d4 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af04      	add	r7, sp, #16
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <SSD1306_Data+0x30>)
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	2364      	movs	r3, #100	; 0x64
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	2178      	movs	r1, #120	; 0x78
 80013f6:	f005 f841 	bl	800647c <HAL_I2C_Mem_Write>
#endif
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200001fc 	.word	0x200001fc

08001408 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
 8001412:	460b      	mov	r3, r1
 8001414:	80bb      	strh	r3, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db79      	blt.n	8001516 <SSD1306_DrawPixel+0x10e>
 8001422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001426:	2b7f      	cmp	r3, #127	; 0x7f
 8001428:	dc75      	bgt.n	8001516 <SSD1306_DrawPixel+0x10e>
 800142a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	db71      	blt.n	8001516 <SSD1306_DrawPixel+0x10e>
 8001432:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001436:	2b3f      	cmp	r3, #63	; 0x3f
 8001438:	dc6d      	bgt.n	8001516 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d049      	beq.n	80014d4 <SSD1306_DrawPixel+0xcc>
 8001440:	2b02      	cmp	r3, #2
 8001442:	dc69      	bgt.n	8001518 <SSD1306_DrawPixel+0x110>
 8001444:	2b00      	cmp	r3, #0
 8001446:	d022      	beq.n	800148e <SSD1306_DrawPixel+0x86>
 8001448:	2b01      	cmp	r3, #1
 800144a:	d165      	bne.n	8001518 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800144c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001450:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001454:	2b00      	cmp	r3, #0
 8001456:	da00      	bge.n	800145a <SSD1306_DrawPixel+0x52>
 8001458:	3307      	adds	r3, #7
 800145a:	10db      	asrs	r3, r3, #3
 800145c:	b218      	sxth	r0, r3
 800145e:	4603      	mov	r3, r0
 8001460:	01db      	lsls	r3, r3, #7
 8001462:	4413      	add	r3, r2
 8001464:	4a2f      	ldr	r2, [pc, #188]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 8001466:	5cd3      	ldrb	r3, [r2, r3]
 8001468:	b25a      	sxtb	r2, r3
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	2101      	movs	r1, #1
 8001472:	fa01 f303 	lsl.w	r3, r1, r3
 8001476:	b25b      	sxtb	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b259      	sxtb	r1, r3
 800147c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001480:	4603      	mov	r3, r0
 8001482:	01db      	lsls	r3, r3, #7
 8001484:	4413      	add	r3, r2
 8001486:	b2c9      	uxtb	r1, r1
 8001488:	4a26      	ldr	r2, [pc, #152]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 800148a:	54d1      	strb	r1, [r2, r3]
      break;
 800148c:	e044      	b.n	8001518 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800148e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001492:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	da00      	bge.n	800149c <SSD1306_DrawPixel+0x94>
 800149a:	3307      	adds	r3, #7
 800149c:	10db      	asrs	r3, r3, #3
 800149e:	b218      	sxth	r0, r3
 80014a0:	4603      	mov	r3, r0
 80014a2:	01db      	lsls	r3, r3, #7
 80014a4:	4413      	add	r3, r2
 80014a6:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 80014a8:	5cd3      	ldrb	r3, [r2, r3]
 80014aa:	b25a      	sxtb	r2, r3
 80014ac:	88bb      	ldrh	r3, [r7, #4]
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	2101      	movs	r1, #1
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	4013      	ands	r3, r2
 80014c0:	b259      	sxtb	r1, r3
 80014c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014c6:	4603      	mov	r3, r0
 80014c8:	01db      	lsls	r3, r3, #7
 80014ca:	4413      	add	r3, r2
 80014cc:	b2c9      	uxtb	r1, r1
 80014ce:	4a15      	ldr	r2, [pc, #84]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 80014d0:	54d1      	strb	r1, [r2, r3]
      break;
 80014d2:	e021      	b.n	8001518 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 80014d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da00      	bge.n	80014e2 <SSD1306_DrawPixel+0xda>
 80014e0:	3307      	adds	r3, #7
 80014e2:	10db      	asrs	r3, r3, #3
 80014e4:	b218      	sxth	r0, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	01db      	lsls	r3, r3, #7
 80014ea:	4413      	add	r3, r2
 80014ec:	4a0d      	ldr	r2, [pc, #52]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 80014ee:	5cd3      	ldrb	r3, [r2, r3]
 80014f0:	b25a      	sxtb	r2, r3
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	2101      	movs	r1, #1
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	4053      	eors	r3, r2
 8001502:	b259      	sxtb	r1, r3
 8001504:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001508:	4603      	mov	r3, r0
 800150a:	01db      	lsls	r3, r3, #7
 800150c:	4413      	add	r3, r2
 800150e:	b2c9      	uxtb	r1, r1
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <SSD1306_DrawPixel+0x11c>)
 8001512:	54d1      	strb	r1, [r2, r3]
      break;
 8001514:	e000      	b.n	8001518 <SSD1306_DrawPixel+0x110>
	  return;
 8001516:	bf00      	nop
    }
}
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000200 	.word	0x20000200

08001528 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <SSD1306_Clear+0x22>
 8001538:	2b01      	cmp	r3, #1
 800153a:	d10d      	bne.n	8001558 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 800153c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001540:	21ff      	movs	r1, #255	; 0xff
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <SSD1306_Clear+0x38>)
 8001544:	f00e f993 	bl	800f86e <memset>
		break;
 8001548:	e006      	b.n	8001558 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154e:	2100      	movs	r1, #0
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <SSD1306_Clear+0x38>)
 8001552:	f00e f98c 	bl	800f86e <memset>
		break;
 8001556:	bf00      	nop
	}
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000200 	.word	0x20000200

08001564 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 8001568:	2022      	movs	r0, #34	; 0x22
 800156a:	f7ff ff1b 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 800156e:	2000      	movs	r0, #0
 8001570:	f7ff ff18 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 8001574:	20ff      	movs	r0, #255	; 0xff
 8001576:	f7ff ff15 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 800157a:	2021      	movs	r0, #33	; 0x21
 800157c:	f7ff ff12 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff ff0f 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001586:	207f      	movs	r0, #127	; 0x7f
 8001588:	f7ff ff0c 	bl	80013a4 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 800158c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001590:	4802      	ldr	r0, [pc, #8]	; (800159c <SSD1306_Display+0x38>)
 8001592:	f7ff ff1f 	bl	80013d4 <SSD1306_Data>
//			SSD1306_Data(buffer+(i * SSD1306_LCDWIDTH), SSD1306_LCDWIDTH);
//			osMutexRelease(MutexI2C2Handle);
//	//		printf("TASK OLED I2C MUTEX is released \n\r");
//			osThreadYield();
//		}
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000200 	.word	0x20000200

080015a0 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 80015a8:	4a28      	ldr	r2, [pc, #160]	; (800164c <SSD1306_Init+0xac>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 80015ae:	20ae      	movs	r0, #174	; 0xae
 80015b0:	f7ff fef8 	bl	80013a4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80015b4:	20d5      	movs	r0, #213	; 0xd5
 80015b6:	f7ff fef5 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0x80);
 80015ba:	2080      	movs	r0, #128	; 0x80
 80015bc:	f7ff fef2 	bl	80013a4 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80015c0:	203f      	movs	r0, #63	; 0x3f
 80015c2:	f7ff feef 	bl	80013a4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80015c6:	20d3      	movs	r0, #211	; 0xd3
 80015c8:	f7ff feec 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0x00);
 80015cc:	2000      	movs	r0, #0
 80015ce:	f7ff fee9 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 80015d2:	2040      	movs	r0, #64	; 0x40
 80015d4:	f7ff fee6 	bl	80013a4 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 80015d8:	208d      	movs	r0, #141	; 0x8d
 80015da:	f7ff fee3 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0x14);
 80015de:	2014      	movs	r0, #20
 80015e0:	f7ff fee0 	bl	80013a4 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 80015e4:	2020      	movs	r0, #32
 80015e6:	f7ff fedd 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff feda 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 80015f0:	20a1      	movs	r0, #161	; 0xa1
 80015f2:	f7ff fed7 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 80015f6:	20c8      	movs	r0, #200	; 0xc8
 80015f8:	f7ff fed4 	bl	80013a4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 80015fc:	20da      	movs	r0, #218	; 0xda
 80015fe:	f7ff fed1 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001602:	2012      	movs	r0, #18
 8001604:	f7ff fece 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8001608:	2081      	movs	r0, #129	; 0x81
 800160a:	f7ff fecb 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0xFF);
 800160e:	20ff      	movs	r0, #255	; 0xff
 8001610:	f7ff fec8 	bl	80013a4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001614:	20d9      	movs	r0, #217	; 0xd9
 8001616:	f7ff fec5 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800161a:	20f1      	movs	r0, #241	; 0xf1
 800161c:	f7ff fec2 	bl	80013a4 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001620:	20db      	movs	r0, #219	; 0xdb
 8001622:	f7ff febf 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(0x40);
 8001626:	2040      	movs	r0, #64	; 0x40
 8001628:	f7ff febc 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 800162c:	20a4      	movs	r0, #164	; 0xa4
 800162e:	f7ff feb9 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001632:	20a6      	movs	r0, #166	; 0xa6
 8001634:	f7ff feb6 	bl	80013a4 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 8001638:	202e      	movs	r0, #46	; 0x2e
 800163a:	f7ff feb3 	bl	80013a4 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 800163e:	20af      	movs	r0, #175	; 0xaf
 8001640:	f7ff feb0 	bl	80013a4 <SSD1306_Command>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200001fc 	.word	0x200001fc

08001650 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <BH1750_Init+0x34>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 800165e:	f000 f813 	bl	8001688 <BH1750_Reset>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d107      	bne.n	8001678 <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 8001668:	2045      	movs	r0, #69	; 0x45
 800166a:	f000 f859 	bl	8001720 <BH1750_SetMtreg>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <BH1750_Init+0x28>
			return BH1750_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	e000      	b.n	800167a <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 8001678:	2301      	movs	r3, #1
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000600 	.word	0x20000600

08001688 <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 800168e:	2307      	movs	r3, #7
 8001690:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <BH1750_Reset+0x30>)
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	1dfa      	adds	r2, r7, #7
 8001698:	230a      	movs	r3, #10
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2301      	movs	r3, #1
 800169e:	2146      	movs	r1, #70	; 0x46
 80016a0:	f004 fbc8 	bl	8005e34 <HAL_I2C_Master_Transmit>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d101      	bne.n	80016ae <BH1750_Reset+0x26>
		return BH1750_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000600 	.word	0x20000600

080016bc <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af02      	add	r7, sp, #8
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <BH1750_SetMode+0x22>
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	095b      	lsrs	r3, r3, #5
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <BH1750_SetMode+0x22>
 80016da:	2301      	movs	r3, #1
 80016dc:	e018      	b.n	8001710 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <BH1750_SetMode+0x30>
 80016e8:	2301      	movs	r3, #1
 80016ea:	e011      	b.n	8001710 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 80016ec:	79fa      	ldrb	r2, [r7, #7]
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <BH1750_SetMode+0x5c>)
 80016f0:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <BH1750_SetMode+0x60>)
 80016f4:	6818      	ldr	r0, [r3, #0]
 80016f6:	1dfa      	adds	r2, r7, #7
 80016f8:	230a      	movs	r3, #10
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2301      	movs	r3, #1
 80016fe:	2146      	movs	r1, #70	; 0x46
 8001700:	f004 fb98 	bl	8005e34 <HAL_I2C_Master_Transmit>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <BH1750_SetMode+0x52>
		return BH1750_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20000604 	.word	0x20000604
 800171c:	20000600 	.word	0x20000600

08001720 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af02      	add	r7, sp, #8
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	2b1e      	cmp	r3, #30
 800172e:	d902      	bls.n	8001736 <BH1750_SetMtreg+0x16>
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	2bff      	cmp	r3, #255	; 0xff
 8001734:	d101      	bne.n	800173a <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e037      	b.n	80017aa <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 800173a:	4a1e      	ldr	r2, [pc, #120]	; (80017b4 <BH1750_SetMtreg+0x94>)
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174a:	b2db      	uxtb	r3, r3
 800174c:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	f003 031f 	and.w	r3, r3, #31
 8001756:	b25b      	sxtb	r3, r3
 8001758:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800175c:	b25b      	sxtb	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <BH1750_SetMtreg+0x98>)
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	f107 020c 	add.w	r2, r7, #12
 800176a:	230a      	movs	r3, #10
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2301      	movs	r3, #1
 8001770:	2146      	movs	r1, #70	; 0x46
 8001772:	f004 fb5f 	bl	8005e34 <HAL_I2C_Master_Transmit>
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e012      	b.n	80017aa <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <BH1750_SetMtreg+0x98>)
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	230a      	movs	r3, #10
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2301      	movs	r3, #1
 8001794:	2146      	movs	r1, #70	; 0x46
 8001796:	f004 fb4d 	bl	8005e34 <HAL_I2C_Master_Transmit>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 800179e:	7bfb      	ldrb	r3, [r7, #15]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e000      	b.n	80017aa <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 80017a8:	2301      	movs	r3, #1
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000605 	.word	0x20000605
 80017b8:	20000600 	.word	0x20000600

080017bc <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <BH1750_ReadLight+0xa0>)
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	f107 0208 	add.w	r2, r7, #8
 80017cc:	230a      	movs	r3, #10
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	2302      	movs	r3, #2
 80017d2:	2146      	movs	r1, #70	; 0x46
 80017d4:	f004 fc2c 	bl	8006030 <HAL_I2C_Master_Receive>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d138      	bne.n	8001850 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80017de:	7a3b      	ldrb	r3, [r7, #8]
 80017e0:	021b      	lsls	r3, r3, #8
 80017e2:	7a7a      	ldrb	r2, [r7, #9]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	ee07 3a90 	vmov	s15, r3
 80017ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ee:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 80017f2:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <BH1750_ReadLight+0xa4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b45      	cmp	r3, #69	; 0x45
 80017f8:	d00f      	beq.n	800181a <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <BH1750_ReadLight+0xa4>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001806:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001864 <BH1750_ReadLight+0xa8>
 800180a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001816:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <BH1750_ReadLight+0xac>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b21      	cmp	r3, #33	; 0x21
 8001820:	d003      	beq.n	800182a <BH1750_ReadLight+0x6e>
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <BH1750_ReadLight+0xac>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b11      	cmp	r3, #17
 8001828:	d107      	bne.n	800183a <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800182a:	ed97 7a03 	vldr	s14, [r7, #12]
 800182e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001836:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800183a:	ed97 7a03 	vldr	s14, [r7, #12]
 800183e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800186c <BH1750_ReadLight+0xb0>
 8001842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	e000      	b.n	8001852 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000600 	.word	0x20000600
 8001860:	20000605 	.word	0x20000605
 8001864:	428a0000 	.word	0x428a0000
 8001868:	20000604 	.word	0x20000604
 800186c:	3f99999a 	.word	0x3f99999a

08001870 <BME280_Read8>:
int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9, h2, h4, h5;
uint16_t t1, p1;
int32_t t_fine;

uint8_t BME280_Read8(uint8_t addr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af04      	add	r7, sp, #16
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, &tmp, 1, 10);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <BME280_Read8+0x38>)
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	b29a      	uxth	r2, r3
 8001886:	230a      	movs	r3, #10
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	2301      	movs	r3, #1
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	f107 030f 	add.w	r3, r7, #15
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	21ec      	movs	r1, #236	; 0xec
 8001898:	f004 feea 	bl	8006670 <HAL_I2C_Mem_Read>
	return tmp;
 800189c:	7bfb      	ldrb	r3, [r7, #15]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000608 	.word	0x20000608

080018ac <BME280_Read16>:

uint16_t BME280_Read16(uint8_t addr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 2, 10);
 80018b6:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <BME280_Read16+0x40>)
 80018b8:	6818      	ldr	r0, [r3, #0]
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	230a      	movs	r3, #10
 80018c0:	9302      	str	r3, [sp, #8]
 80018c2:	2302      	movs	r3, #2
 80018c4:	9301      	str	r3, [sp, #4]
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2301      	movs	r3, #1
 80018ce:	21ec      	movs	r1, #236	; 0xec
 80018d0:	f004 fece 	bl	8006670 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 80018d4:	7b3b      	ldrb	r3, [r7, #12]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	7b7b      	ldrb	r3, [r7, #13]
 80018dc:	b21b      	sxth	r3, r3
 80018de:	4313      	orrs	r3, r2
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	b29b      	uxth	r3, r3
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000608 	.word	0x20000608

080018f0 <BME280_Read16LE>:

uint16_t BME280_Read16LE(uint8_t addr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BME280_Read16(addr);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ffd5 	bl	80018ac <BME280_Read16>
 8001902:	4603      	mov	r3, r0
 8001904:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001906:	89fb      	ldrh	r3, [r7, #14]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	b29b      	uxth	r3, r3
 800190c:	b21a      	sxth	r2, r3
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b21b      	sxth	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	b21b      	sxth	r3, r3
 8001918:	b29b      	uxth	r3, r3
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <BME280_Write8>:

void BME280_Write8(uint8_t address, uint8_t data)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af04      	add	r7, sp, #16
 800192a:	4603      	mov	r3, r0
 800192c:	460a      	mov	r2, r1
 800192e:	71fb      	strb	r3, [r7, #7]
 8001930:	4613      	mov	r3, r2
 8001932:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 8001934:	4b08      	ldr	r3, [pc, #32]	; (8001958 <BME280_Write8+0x34>)
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	b29a      	uxth	r2, r3
 800193c:	230a      	movs	r3, #10
 800193e:	9302      	str	r3, [sp, #8]
 8001940:	2301      	movs	r3, #1
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	1dbb      	adds	r3, r7, #6
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2301      	movs	r3, #1
 800194a:	21ec      	movs	r1, #236	; 0xec
 800194c:	f004 fd96 	bl	800647c <HAL_I2C_Mem_Write>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000608 	.word	0x20000608

0800195c <BME280_Read24>:

uint32_t BME280_Read24(uint8_t addr)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af04      	add	r7, sp, #16
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 3, 10);
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <BME280_Read24+0x40>)
 8001968:	6818      	ldr	r0, [r3, #0]
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	b29a      	uxth	r2, r3
 800196e:	230a      	movs	r3, #10
 8001970:	9302      	str	r3, [sp, #8]
 8001972:	2303      	movs	r3, #3
 8001974:	9301      	str	r3, [sp, #4]
 8001976:	f107 030c 	add.w	r3, r7, #12
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	2301      	movs	r3, #1
 800197e:	21ec      	movs	r1, #236	; 0xec
 8001980:	f004 fe76 	bl	8006670 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001984:	7b3b      	ldrb	r3, [r7, #12]
 8001986:	041a      	lsls	r2, r3, #16
 8001988:	7b7b      	ldrb	r3, [r7, #13]
 800198a:	021b      	lsls	r3, r3, #8
 800198c:	4313      	orrs	r3, r2
 800198e:	7bba      	ldrb	r2, [r7, #14]
 8001990:	4313      	orrs	r3, r2
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000608 	.word	0x20000608

080019a0 <BME280_IsReadingCalibration>:
uint8_t BME280_IsReadingCalibration(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
	uint8_t Status = BME280_Read8(BME280_STATUS);
 80019a6:	20f3      	movs	r0, #243	; 0xf3
 80019a8:	f7ff ff62 	bl	8001870 <BME280_Read8>
 80019ac:	4603      	mov	r3, r0
 80019ae:	71fb      	strb	r3, [r7, #7]

	return ((Status & 1) != 0);
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	bf14      	ite	ne
 80019ba:	2301      	movne	r3, #1
 80019bc:	2300      	moveq	r3, #0
 80019be:	b2db      	uxtb	r3, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <BME280_SetConfig>:

void BME280_SetConfig(uint8_t standby_time, uint8_t filter)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	4613      	mov	r3, r2
 80019d6:	71bb      	strb	r3, [r7, #6]
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	015b      	lsls	r3, r3, #5
 80019dc:	b25a      	sxtb	r2, r3
 80019de:	79bb      	ldrb	r3, [r7, #6]
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	b25b      	sxtb	r3, r3
 80019e4:	f003 031c 	and.w	r3, r3, #28
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f023 0303 	bic.w	r3, r3, #3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4619      	mov	r1, r3
 80019f8:	20f5      	movs	r0, #245	; 0xf5
 80019fa:	f7ff ff93 	bl	8001924 <BME280_Write8>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <BME280_Init>:


void BME280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t huminidity_oversampling, uint8_t mode)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	4608      	mov	r0, r1
 8001a12:	4611      	mov	r1, r2
 8001a14:	461a      	mov	r2, r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	70fb      	strb	r3, [r7, #3]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	70bb      	strb	r3, [r7, #2]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8001a22:	4a8f      	ldr	r2, [pc, #572]	; (8001c60 <BME280_Init+0x258>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6013      	str	r3, [r2, #0]
	uint8_t HumReg, i;

		if (mode > BME280_NORMALMODE)
 8001a28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d902      	bls.n	8001a36 <BME280_Init+0x2e>
		    mode = BME280_NORMALMODE;
 8001a30:	2303      	movs	r3, #3
 8001a32:	f887 3020 	strb.w	r3, [r7, #32]
		_mode = mode;
 8001a36:	4a8b      	ldr	r2, [pc, #556]	; (8001c64 <BME280_Init+0x25c>)
 8001a38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a3c:	7013      	strb	r3, [r2, #0]
		if(mode == BME280_FORCEDMODE)
 8001a3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d102      	bne.n	8001a4c <BME280_Init+0x44>
			mode = BME280_SLEEPMODE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f887 3020 	strb.w	r3, [r7, #32]

		if (temperature_resolution > BME280_TEMPERATURE_20BIT)
 8001a4c:	78fb      	ldrb	r3, [r7, #3]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d901      	bls.n	8001a56 <BME280_Init+0x4e>
			temperature_resolution = BME280_TEMPERATURE_20BIT;
 8001a52:	2305      	movs	r3, #5
 8001a54:	70fb      	strb	r3, [r7, #3]
		_temperature_res = temperature_resolution;
 8001a56:	4a84      	ldr	r2, [pc, #528]	; (8001c68 <BME280_Init+0x260>)
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	7013      	strb	r3, [r2, #0]

		if (pressure_oversampling > BME280_PRESSURE_ULTRAHIGHRES)
 8001a5c:	78bb      	ldrb	r3, [r7, #2]
 8001a5e:	2b05      	cmp	r3, #5
 8001a60:	d901      	bls.n	8001a66 <BME280_Init+0x5e>
			pressure_oversampling = BME280_PRESSURE_ULTRAHIGHRES;
 8001a62:	2305      	movs	r3, #5
 8001a64:	70bb      	strb	r3, [r7, #2]
		_pressure_oversampling = pressure_oversampling;
 8001a66:	4a81      	ldr	r2, [pc, #516]	; (8001c6c <BME280_Init+0x264>)
 8001a68:	78bb      	ldrb	r3, [r7, #2]
 8001a6a:	7013      	strb	r3, [r2, #0]

		if (huminidity_oversampling > BME280_HUMINIDITY_ULTRAHIGH)
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d901      	bls.n	8001a76 <BME280_Init+0x6e>
			huminidity_oversampling = BME280_HUMINIDITY_ULTRAHIGH;
 8001a72:	2305      	movs	r3, #5
 8001a74:	707b      	strb	r3, [r7, #1]
		_huminidity_oversampling = huminidity_oversampling;
 8001a76:	4a7e      	ldr	r2, [pc, #504]	; (8001c70 <BME280_Init+0x268>)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	7013      	strb	r3, [r2, #0]

		while(BME280_Read8(BME280_CHIPID) != 0x60);
 8001a7c:	bf00      	nop
 8001a7e:	20d0      	movs	r0, #208	; 0xd0
 8001a80:	f7ff fef6 	bl	8001870 <BME280_Read8>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b60      	cmp	r3, #96	; 0x60
 8001a88:	d1f9      	bne.n	8001a7e <BME280_Init+0x76>

		BME280_Write8(BME280_SOFTRESET, 0xB6);
 8001a8a:	21b6      	movs	r1, #182	; 0xb6
 8001a8c:	20e0      	movs	r0, #224	; 0xe0
 8001a8e:	f7ff ff49 	bl	8001924 <BME280_Write8>

		for(i = 0; i<30; i++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	73fb      	strb	r3, [r7, #15]
 8001a96:	e005      	b.n	8001aa4 <BME280_Init+0x9c>
			HAL_Delay(10); // Wait  300 msfor wake up
 8001a98:	200a      	movs	r0, #10
 8001a9a:	f003 fdd3 	bl	8005644 <HAL_Delay>
		for(i = 0; i<30; i++)
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b1d      	cmp	r3, #29
 8001aa8:	d9f6      	bls.n	8001a98 <BME280_Init+0x90>

		while(BME280_IsReadingCalibration())
 8001aaa:	e00b      	b.n	8001ac4 <BME280_Init+0xbc>
			for(i = 0; i<10; i++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	73fb      	strb	r3, [r7, #15]
 8001ab0:	e005      	b.n	8001abe <BME280_Init+0xb6>
				HAL_Delay(1);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f003 fdc6 	bl	8005644 <HAL_Delay>
			for(i = 0; i<10; i++)
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	3301      	adds	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b09      	cmp	r3, #9
 8001ac2:	d9f6      	bls.n	8001ab2 <BME280_Init+0xaa>
		while(BME280_IsReadingCalibration())
 8001ac4:	f7ff ff6c 	bl	80019a0 <BME280_IsReadingCalibration>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1ee      	bne.n	8001aac <BME280_Init+0xa4>

		/* read calibration data */
		t1 = BME280_Read16LE(BME280_DIG_T1);
 8001ace:	2088      	movs	r0, #136	; 0x88
 8001ad0:	f7ff ff0e 	bl	80018f0 <BME280_Read16LE>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <BME280_Init+0x26c>)
 8001ada:	801a      	strh	r2, [r3, #0]
		t2 = BME280_Read16LE(BME280_DIG_T2);
 8001adc:	208a      	movs	r0, #138	; 0x8a
 8001ade:	f7ff ff07 	bl	80018f0 <BME280_Read16LE>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b21a      	sxth	r2, r3
 8001ae6:	4b64      	ldr	r3, [pc, #400]	; (8001c78 <BME280_Init+0x270>)
 8001ae8:	801a      	strh	r2, [r3, #0]
		t3 = BME280_Read16LE(BME280_DIG_T3);
 8001aea:	208c      	movs	r0, #140	; 0x8c
 8001aec:	f7ff ff00 	bl	80018f0 <BME280_Read16LE>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	4b61      	ldr	r3, [pc, #388]	; (8001c7c <BME280_Init+0x274>)
 8001af6:	801a      	strh	r2, [r3, #0]

		p1 = BME280_Read16LE(BME280_DIG_P1);
 8001af8:	208e      	movs	r0, #142	; 0x8e
 8001afa:	f7ff fef9 	bl	80018f0 <BME280_Read16LE>
 8001afe:	4603      	mov	r3, r0
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b5f      	ldr	r3, [pc, #380]	; (8001c80 <BME280_Init+0x278>)
 8001b04:	801a      	strh	r2, [r3, #0]
		p2 = BME280_Read16LE(BME280_DIG_P2);
 8001b06:	2090      	movs	r0, #144	; 0x90
 8001b08:	f7ff fef2 	bl	80018f0 <BME280_Read16LE>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	4b5c      	ldr	r3, [pc, #368]	; (8001c84 <BME280_Init+0x27c>)
 8001b12:	801a      	strh	r2, [r3, #0]
		p3 = BME280_Read16LE(BME280_DIG_P3);
 8001b14:	2092      	movs	r0, #146	; 0x92
 8001b16:	f7ff feeb 	bl	80018f0 <BME280_Read16LE>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	4b5a      	ldr	r3, [pc, #360]	; (8001c88 <BME280_Init+0x280>)
 8001b20:	801a      	strh	r2, [r3, #0]
		p4 = BME280_Read16LE(BME280_DIG_P4);
 8001b22:	2094      	movs	r0, #148	; 0x94
 8001b24:	f7ff fee4 	bl	80018f0 <BME280_Read16LE>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	b21a      	sxth	r2, r3
 8001b2c:	4b57      	ldr	r3, [pc, #348]	; (8001c8c <BME280_Init+0x284>)
 8001b2e:	801a      	strh	r2, [r3, #0]
		p5 = BME280_Read16LE(BME280_DIG_P5);
 8001b30:	2096      	movs	r0, #150	; 0x96
 8001b32:	f7ff fedd 	bl	80018f0 <BME280_Read16LE>
 8001b36:	4603      	mov	r3, r0
 8001b38:	b21a      	sxth	r2, r3
 8001b3a:	4b55      	ldr	r3, [pc, #340]	; (8001c90 <BME280_Init+0x288>)
 8001b3c:	801a      	strh	r2, [r3, #0]
		p6 = BME280_Read16LE(BME280_DIG_P6);
 8001b3e:	2098      	movs	r0, #152	; 0x98
 8001b40:	f7ff fed6 	bl	80018f0 <BME280_Read16LE>
 8001b44:	4603      	mov	r3, r0
 8001b46:	b21a      	sxth	r2, r3
 8001b48:	4b52      	ldr	r3, [pc, #328]	; (8001c94 <BME280_Init+0x28c>)
 8001b4a:	801a      	strh	r2, [r3, #0]
		p7 = BME280_Read16LE(BME280_DIG_P7);
 8001b4c:	209a      	movs	r0, #154	; 0x9a
 8001b4e:	f7ff fecf 	bl	80018f0 <BME280_Read16LE>
 8001b52:	4603      	mov	r3, r0
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	4b50      	ldr	r3, [pc, #320]	; (8001c98 <BME280_Init+0x290>)
 8001b58:	801a      	strh	r2, [r3, #0]
		p8 = BME280_Read16LE(BME280_DIG_P8);
 8001b5a:	209c      	movs	r0, #156	; 0x9c
 8001b5c:	f7ff fec8 	bl	80018f0 <BME280_Read16LE>
 8001b60:	4603      	mov	r3, r0
 8001b62:	b21a      	sxth	r2, r3
 8001b64:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <BME280_Init+0x294>)
 8001b66:	801a      	strh	r2, [r3, #0]
		p9 = BME280_Read16LE(BME280_DIG_P9);
 8001b68:	209e      	movs	r0, #158	; 0x9e
 8001b6a:	f7ff fec1 	bl	80018f0 <BME280_Read16LE>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	4b4b      	ldr	r3, [pc, #300]	; (8001ca0 <BME280_Init+0x298>)
 8001b74:	801a      	strh	r2, [r3, #0]

		h1 = BME280_Read8(BME280_DIG_H1);
 8001b76:	20a1      	movs	r0, #161	; 0xa1
 8001b78:	f7ff fe7a 	bl	8001870 <BME280_Read8>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b48      	ldr	r3, [pc, #288]	; (8001ca4 <BME280_Init+0x29c>)
 8001b82:	701a      	strb	r2, [r3, #0]
		h2 = BME280_Read16LE(BME280_DIG_H2);
 8001b84:	20e1      	movs	r0, #225	; 0xe1
 8001b86:	f7ff feb3 	bl	80018f0 <BME280_Read16LE>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b46      	ldr	r3, [pc, #280]	; (8001ca8 <BME280_Init+0x2a0>)
 8001b90:	801a      	strh	r2, [r3, #0]
		h3 = BME280_Read8(BME280_DIG_H3);
 8001b92:	20e3      	movs	r0, #227	; 0xe3
 8001b94:	f7ff fe6c 	bl	8001870 <BME280_Read8>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	4b43      	ldr	r3, [pc, #268]	; (8001cac <BME280_Init+0x2a4>)
 8001b9e:	701a      	strb	r2, [r3, #0]
		h4 = ((BME280_Read8(BME280_DIG_H4) << 4 ) | (BME280_Read8(BME280_DIG_H4+1) & 0xF));
 8001ba0:	20e4      	movs	r0, #228	; 0xe4
 8001ba2:	f7ff fe65 	bl	8001870 <BME280_Read8>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	011b      	lsls	r3, r3, #4
 8001baa:	b21c      	sxth	r4, r3
 8001bac:	20e5      	movs	r0, #229	; 0xe5
 8001bae:	f7ff fe5f 	bl	8001870 <BME280_Read8>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	4323      	orrs	r3, r4
 8001bbe:	b21a      	sxth	r2, r3
 8001bc0:	4b3b      	ldr	r3, [pc, #236]	; (8001cb0 <BME280_Init+0x2a8>)
 8001bc2:	801a      	strh	r2, [r3, #0]
		h5 = ((BME280_Read8(BME280_DIG_H5+1) << 4) | (BME280_Read8(BME280_DIG_H5) >> 4));
 8001bc4:	20e6      	movs	r0, #230	; 0xe6
 8001bc6:	f7ff fe53 	bl	8001870 <BME280_Read8>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	b21c      	sxth	r4, r3
 8001bd0:	20e5      	movs	r0, #229	; 0xe5
 8001bd2:	f7ff fe4d 	bl	8001870 <BME280_Read8>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4323      	orrs	r3, r4
 8001be0:	b21a      	sxth	r2, r3
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <BME280_Init+0x2ac>)
 8001be4:	801a      	strh	r2, [r3, #0]
		h6 = (int8_t)BME280_Read8(BME280_DIG_H6);
 8001be6:	20e7      	movs	r0, #231	; 0xe7
 8001be8:	f7ff fe42 	bl	8001870 <BME280_Read8>
 8001bec:	4603      	mov	r3, r0
 8001bee:	b25a      	sxtb	r2, r3
 8001bf0:	4b31      	ldr	r3, [pc, #196]	; (8001cb8 <BME280_Init+0x2b0>)
 8001bf2:	701a      	strb	r2, [r3, #0]

		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001bf4:	20f2      	movs	r0, #242	; 0xf2
 8001bf6:	f7ff fe3b 	bl	8001870 <BME280_Read8>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	73bb      	strb	r3, [r7, #14]
		HumReg &= 0xF8;
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	f023 0307 	bic.w	r3, r3, #7
 8001c04:	73bb      	strb	r3, [r7, #14]
		HumReg |= _huminidity_oversampling;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <BME280_Init+0x268>)
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	7bbb      	ldrb	r3, [r7, #14]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_HUM_CONTROL, HumReg);
 8001c10:	7bbb      	ldrb	r3, [r7, #14]
 8001c12:	4619      	mov	r1, r3
 8001c14:	20f2      	movs	r0, #242	; 0xf2
 8001c16:	f7ff fe85 	bl	8001924 <BME280_Write8>
		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001c1a:	20f2      	movs	r0, #242	; 0xf2
 8001c1c:	f7ff fe28 	bl	8001870 <BME280_Read8>
 8001c20:	4603      	mov	r3, r0
 8001c22:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	015b      	lsls	r3, r3, #5
 8001c28:	b25a      	sxtb	r2, r3
 8001c2a:	78bb      	ldrb	r3, [r7, #2]
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	4313      	orrs	r3, r2
 8001c32:	b25a      	sxtb	r2, r3
 8001c34:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	b25b      	sxtb	r3, r3
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4619      	mov	r1, r3
 8001c40:	20f4      	movs	r0, #244	; 0xf4
 8001c42:	f7ff fe6f 	bl	8001924 <BME280_Write8>

		if(mode == BME280_NORMALMODE)
 8001c46:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d103      	bne.n	8001c56 <BME280_Init+0x24e>
		{
			BME280_SetConfig(BME280_STANDBY_MS_0_5, BME280_FILTER_OFF);
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff feb9 	bl	80019c8 <BME280_SetConfig>
		}
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd90      	pop	{r4, r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000608 	.word	0x20000608
 8001c64:	2000060f 	.word	0x2000060f
 8001c68:	2000060c 	.word	0x2000060c
 8001c6c:	2000060d 	.word	0x2000060d
 8001c70:	2000060e 	.word	0x2000060e
 8001c74:	2000062e 	.word	0x2000062e
 8001c78:	20000614 	.word	0x20000614
 8001c7c:	20000616 	.word	0x20000616
 8001c80:	20000630 	.word	0x20000630
 8001c84:	20000618 	.word	0x20000618
 8001c88:	2000061a 	.word	0x2000061a
 8001c8c:	2000061c 	.word	0x2000061c
 8001c90:	2000061e 	.word	0x2000061e
 8001c94:	20000620 	.word	0x20000620
 8001c98:	20000622 	.word	0x20000622
 8001c9c:	20000624 	.word	0x20000624
 8001ca0:	20000626 	.word	0x20000626
 8001ca4:	20000610 	.word	0x20000610
 8001ca8:	20000628 	.word	0x20000628
 8001cac:	20000611 	.word	0x20000611
 8001cb0:	2000062a 	.word	0x2000062a
 8001cb4:	2000062c 	.word	0x2000062c
 8001cb8:	20000612 	.word	0x20000612

08001cbc <BME280_ReadTemperature>:

float BME280_ReadTemperature(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BME280_FORCEDMODE)
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <BME280_ReadTemperature+0x104>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d12b      	bne.n	8001d22 <BME280_ReadTemperature+0x66>
  {
	  uint8_t mode;
	  uint8_t ctrl = BME280_Read8(BME280_CONTROL);
 8001cca:	20f4      	movs	r0, #244	; 0xf4
 8001ccc:	f7ff fdd0 	bl	8001870 <BME280_Read8>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	f023 0303 	bic.w	r3, r3, #3
 8001cda:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BME280_FORCEDMODE;
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	75fb      	strb	r3, [r7, #23]
	  BME280_Write8(BME280_CONTROL, ctrl);
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	20f4      	movs	r0, #244	; 0xf4
 8001cea:	f7ff fe1b 	bl	8001924 <BME280_Write8>

	  mode = BME280_Read8(BME280_CONTROL); 	// Read written mode
 8001cee:	20f4      	movs	r0, #244	; 0xf4
 8001cf0:	f7ff fdbe 	bl	8001870 <BME280_Read8>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001cf8:	7dbb      	ldrb	r3, [r7, #22]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	75bb      	strb	r3, [r7, #22]

	  if(mode == BME280_FORCEDMODE)
 8001d00:	7dbb      	ldrb	r3, [r7, #22]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10d      	bne.n	8001d22 <BME280_ReadTemperature+0x66>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BME280_Read8(BME280_CONTROL);
 8001d06:	20f4      	movs	r0, #244	; 0xf4
 8001d08:	f7ff fdb2 	bl	8001870 <BME280_Read8>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001d10:	7dbb      	ldrb	r3, [r7, #22]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	75bb      	strb	r3, [r7, #22]
			  if(mode == BME280_SLEEPMODE)
 8001d18:	7dbb      	ldrb	r3, [r7, #22]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d000      	beq.n	8001d20 <BME280_ReadTemperature+0x64>
			  mode = BME280_Read8(BME280_CONTROL);
 8001d1e:	e7f2      	b.n	8001d06 <BME280_ReadTemperature+0x4a>
				  break;
 8001d20:	bf00      	nop
		  }
	  }
  }

  int32_t adc_T = BME280_Read24(BME280_TEMPDATA);
 8001d22:	20fa      	movs	r0, #250	; 0xfa
 8001d24:	f7ff fe1a 	bl	800195c <BME280_Read24>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	613b      	str	r3, [r7, #16]
  if (adc_T == 0x800000)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d32:	d102      	bne.n	8001d3a <BME280_ReadTemperature+0x7e>
	  return -99;
 8001d34:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001dc4 <BME280_ReadTemperature+0x108>
 8001d38:	e03b      	b.n	8001db2 <BME280_ReadTemperature+0xf6>

  adc_T >>= 4;
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	111b      	asrs	r3, r3, #4
 8001d3e:	613b      	str	r3, [r7, #16]

  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	10da      	asrs	r2, r3, #3
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <BME280_ReadTemperature+0x10c>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	1ad3      	subs	r3, r2, r3
		  ((int32_t)t2)) >> 11;
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	; (8001dcc <BME280_ReadTemperature+0x110>)
 8001d4e:	f9b2 2000 	ldrsh.w	r2, [r2]
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	12db      	asrs	r3, r3, #11
 8001d58:	60fb      	str	r3, [r7, #12]

  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	111b      	asrs	r3, r3, #4
 8001d5e:	4a1a      	ldr	r2, [pc, #104]	; (8001dc8 <BME280_ReadTemperature+0x10c>)
 8001d60:	8812      	ldrh	r2, [r2, #0]
 8001d62:	1a9b      	subs	r3, r3, r2
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	1112      	asrs	r2, r2, #4
 8001d68:	4917      	ldr	r1, [pc, #92]	; (8001dc8 <BME280_ReadTemperature+0x10c>)
 8001d6a:	8809      	ldrh	r1, [r1, #0]
 8001d6c:	1a52      	subs	r2, r2, r1
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001d72:	131b      	asrs	r3, r3, #12
		  ((int32_t)t3)) >> 14;
 8001d74:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <BME280_ReadTemperature+0x114>)
 8001d76:	f9b2 2000 	ldrsh.w	r2, [r2]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001d7e:	139b      	asrs	r3, r3, #14
 8001d80:	60bb      	str	r3, [r7, #8]

  t_fine = var1 + var2;
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	4413      	add	r3, r2
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <BME280_ReadTemperature+0x118>)
 8001d8a:	6013      	str	r3, [r2, #0]

  float T  = (t_fine * 5 + 128) >> 8;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <BME280_ReadTemperature+0x118>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3380      	adds	r3, #128	; 0x80
 8001d98:	121b      	asrs	r3, r3, #8
 8001d9a:	ee07 3a90 	vmov	s15, r3
 8001d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da2:	edc7 7a01 	vstr	s15, [r7, #4]
  return T/100;
 8001da6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001daa:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001dd8 <BME280_ReadTemperature+0x11c>
 8001dae:	ee87 7aa6 	vdiv.f32	s14, s15, s13

  return -99;
}
 8001db2:	eef0 7a47 	vmov.f32	s15, s14
 8001db6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	2000060f 	.word	0x2000060f
 8001dc4:	c2c60000 	.word	0xc2c60000
 8001dc8:	2000062e 	.word	0x2000062e
 8001dcc:	20000614 	.word	0x20000614
 8001dd0:	20000616 	.word	0x20000616
 8001dd4:	20000634 	.word	0x20000634
 8001dd8:	42c80000 	.word	0x42c80000

08001ddc <BME280_ReadTemperatureAndPressureAndHuminidity>:
	  float h = (v_x1_u32r>>12);
	  return  h / 1024.0;
}

uint8_t BME280_ReadTemperatureAndPressureAndHuminidity(float *temperature, int32_t *pressure, float *huminidity)
{
 8001ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de0:	b0d2      	sub	sp, #328	; 0x148
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001de8:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001dec:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	*temperature = BME280_ReadTemperature();
 8001df0:	f7ff ff64 	bl	8001cbc <BME280_ReadTemperature>
 8001df4:	eef0 7a40 	vmov.f32	s15, s0
 8001df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dfc:	edc3 7a00 	vstr	s15, [r3]

	if(*temperature == -99)
 8001e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80020d8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x2fc>
 8001e0c:	eef4 7a47 	vcmp.f32	s15, s14
 8001e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e14:	d101      	bne.n	8001e1a <BME280_ReadTemperatureAndPressureAndHuminidity+0x3e>
	  return -1;
 8001e16:	23ff      	movs	r3, #255	; 0xff
 8001e18:	e33f      	b.n	800249a <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 8001e1a:	20f7      	movs	r0, #247	; 0xf7
 8001e1c:	f7ff fd9e 	bl	800195c <BME280_Read24>
 8001e20:	4603      	mov	r3, r0
 8001e22:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	adc_P >>= 4;
 8001e26:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e2a:	111b      	asrs	r3, r3, #4
 8001e2c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	var1 = ((int64_t)t_fine) - 128000;
 8001e30:	4baa      	ldr	r3, [pc, #680]	; (80020dc <BME280_ReadTemperatureAndPressureAndHuminidity+0x300>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	17da      	asrs	r2, r3, #31
 8001e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e3a:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001e3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001e42:	460b      	mov	r3, r1
 8001e44:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e52:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e56:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = var1 * var1 * (int64_t)p6;
 8001e5a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001e5e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e62:	fb03 f102 	mul.w	r1, r3, r2
 8001e66:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001e6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	18ca      	adds	r2, r1, r3
 8001e74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e78:	fba3 4503 	umull	r4, r5, r3, r3
 8001e7c:	1953      	adds	r3, r2, r5
 8001e7e:	461d      	mov	r5, r3
 8001e80:	4b97      	ldr	r3, [pc, #604]	; (80020e0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x304>)
 8001e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e86:	b21b      	sxth	r3, r3
 8001e88:	17da      	asrs	r2, r3, #31
 8001e8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001e8e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001e92:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001e96:	4603      	mov	r3, r0
 8001e98:	fb03 f205 	mul.w	r2, r3, r5
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	fb04 f303 	mul.w	r3, r4, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	fba4 8902 	umull	r8, r9, r4, r2
 8001eaa:	444b      	add	r3, r9
 8001eac:	4699      	mov	r9, r3
 8001eae:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 8001eb2:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001eb6:	4b8b      	ldr	r3, [pc, #556]	; (80020e4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x308>)
 8001eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	17da      	asrs	r2, r3, #31
 8001ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ec4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001ec8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ecc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001ed0:	462a      	mov	r2, r5
 8001ed2:	fb02 f203 	mul.w	r2, r2, r3
 8001ed6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001eda:	4621      	mov	r1, r4
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	441a      	add	r2, r3
 8001ee2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	fba3 ab01 	umull	sl, fp, r3, r1
 8001eec:	eb02 030b 	add.w	r3, r2, fp
 8001ef0:	469b      	mov	fp, r3
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001efe:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001f02:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001f06:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f0a:	1814      	adds	r4, r2, r0
 8001f0c:	643c      	str	r4, [r7, #64]	; 0x40
 8001f0e:	414b      	adcs	r3, r1
 8001f10:	647b      	str	r3, [r7, #68]	; 0x44
 8001f12:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001f16:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var2 = var2 + (((int64_t)p4)<<35);
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x30c>)
 8001f1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	17da      	asrs	r2, r3, #31
 8001f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f28:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	f04f 0100 	mov.w	r1, #0
 8001f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f38:	00d9      	lsls	r1, r3, #3
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f40:	1814      	adds	r4, r2, r0
 8001f42:	63bc      	str	r4, [r7, #56]	; 0x38
 8001f44:	414b      	adcs	r3, r1
 8001f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f48:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001f4c:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001f50:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001f54:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f58:	fb03 f102 	mul.w	r1, r3, r2
 8001f5c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001f60:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f64:	fb02 f303 	mul.w	r3, r2, r3
 8001f68:	18ca      	adds	r2, r1, r3
 8001f6a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f6e:	fba3 1303 	umull	r1, r3, r3, r3
 8001f72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f76:	460b      	mov	r3, r1
 8001f78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f80:	18d3      	adds	r3, r2, r3
 8001f82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f86:	4b59      	ldr	r3, [pc, #356]	; (80020ec <BME280_ReadTemperatureAndPressureAndHuminidity+0x310>)
 8001f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	17da      	asrs	r2, r3, #31
 8001f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f98:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001f9c:	462b      	mov	r3, r5
 8001f9e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001fa2:	4642      	mov	r2, r8
 8001fa4:	fb02 f203 	mul.w	r2, r2, r3
 8001fa8:	464b      	mov	r3, r9
 8001faa:	4621      	mov	r1, r4
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	4622      	mov	r2, r4
 8001fb4:	4641      	mov	r1, r8
 8001fb6:	fba2 1201 	umull	r1, r2, r2, r1
 8001fba:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001fbe:	460a      	mov	r2, r1
 8001fc0:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001fc4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001fc8:	4413      	add	r3, r2
 8001fca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001fce:	f04f 0000 	mov.w	r0, #0
 8001fd2:	f04f 0100 	mov.w	r1, #0
 8001fd6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001fda:	4623      	mov	r3, r4
 8001fdc:	0a18      	lsrs	r0, r3, #8
 8001fde:	462b      	mov	r3, r5
 8001fe0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fe4:	462b      	mov	r3, r5
 8001fe6:	1219      	asrs	r1, r3, #8
			((var1 * (int64_t)p2)<<12);
 8001fe8:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x314>)
 8001fea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	17da      	asrs	r2, r3, #31
 8001ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001ffa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002002:	464a      	mov	r2, r9
 8002004:	fb02 f203 	mul.w	r2, r2, r3
 8002008:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800200c:	4644      	mov	r4, r8
 800200e:	fb04 f303 	mul.w	r3, r4, r3
 8002012:	441a      	add	r2, r3
 8002014:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002018:	4644      	mov	r4, r8
 800201a:	fba3 4304 	umull	r4, r3, r3, r4
 800201e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002022:	4623      	mov	r3, r4
 8002024:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800202c:	18d3      	adds	r3, r2, r3
 800202e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	f04f 0300 	mov.w	r3, #0
 800203a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800203e:	464c      	mov	r4, r9
 8002040:	0323      	lsls	r3, r4, #12
 8002042:	4644      	mov	r4, r8
 8002044:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002048:	4644      	mov	r4, r8
 800204a:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 800204c:	1884      	adds	r4, r0, r2
 800204e:	633c      	str	r4, [r7, #48]	; 0x30
 8002050:	eb41 0303 	adc.w	r3, r1, r3
 8002054:	637b      	str	r3, [r7, #52]	; 0x34
 8002056:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800205a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800205e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002062:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8002066:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800206a:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x318>)
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	2200      	movs	r2, #0
 8002076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800207a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800207e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002082:	462b      	mov	r3, r5
 8002084:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 8002088:	4642      	mov	r2, r8
 800208a:	fb02 f203 	mul.w	r2, r2, r3
 800208e:	464b      	mov	r3, r9
 8002090:	4621      	mov	r1, r4
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	4413      	add	r3, r2
 8002098:	4622      	mov	r2, r4
 800209a:	4641      	mov	r1, r8
 800209c:	fba2 1201 	umull	r1, r2, r2, r1
 80020a0:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020a4:	460a      	mov	r2, r1
 80020a6:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80020aa:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020ae:	4413      	add	r3, r2
 80020b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020c0:	4629      	mov	r1, r5
 80020c2:	104a      	asrs	r2, r1, #1
 80020c4:	4629      	mov	r1, r5
 80020c6:	17cb      	asrs	r3, r1, #31
 80020c8:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

	if (var1 == 0) {
 80020cc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80020d0:	4313      	orrs	r3, r2
 80020d2:	d111      	bne.n	80020f8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x31c>
		return 0;  // avoid exception caused by division by zero
 80020d4:	2300      	movs	r3, #0
 80020d6:	e1e0      	b.n	800249a <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>
 80020d8:	c2c60000 	.word	0xc2c60000
 80020dc:	20000634 	.word	0x20000634
 80020e0:	20000620 	.word	0x20000620
 80020e4:	2000061e 	.word	0x2000061e
 80020e8:	2000061c 	.word	0x2000061c
 80020ec:	2000061a 	.word	0x2000061a
 80020f0:	20000618 	.word	0x20000618
 80020f4:	20000630 	.word	0x20000630
	}
	p = 1048576 - adc_P;
 80020f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80020fc:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002100:	17da      	asrs	r2, r3, #31
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
 8002104:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002106:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800210a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	p = (((p<<31) - var2)*3125) / var1;
 800210e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002112:	105b      	asrs	r3, r3, #1
 8002114:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002118:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800211c:	07db      	lsls	r3, r3, #31
 800211e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002122:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002126:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800212a:	4621      	mov	r1, r4
 800212c:	1a89      	subs	r1, r1, r2
 800212e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002132:	4629      	mov	r1, r5
 8002134:	eb61 0303 	sbc.w	r3, r1, r3
 8002138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800213c:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002140:	4622      	mov	r2, r4
 8002142:	462b      	mov	r3, r5
 8002144:	1891      	adds	r1, r2, r2
 8002146:	6239      	str	r1, [r7, #32]
 8002148:	415b      	adcs	r3, r3
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
 800214c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002150:	4621      	mov	r1, r4
 8002152:	1851      	adds	r1, r2, r1
 8002154:	61b9      	str	r1, [r7, #24]
 8002156:	4629      	mov	r1, r5
 8002158:	414b      	adcs	r3, r1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002168:	4649      	mov	r1, r9
 800216a:	018b      	lsls	r3, r1, #6
 800216c:	4641      	mov	r1, r8
 800216e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002172:	4641      	mov	r1, r8
 8002174:	018a      	lsls	r2, r1, #6
 8002176:	4641      	mov	r1, r8
 8002178:	1889      	adds	r1, r1, r2
 800217a:	6139      	str	r1, [r7, #16]
 800217c:	4649      	mov	r1, r9
 800217e:	eb43 0101 	adc.w	r1, r3, r1
 8002182:	6179      	str	r1, [r7, #20]
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002190:	4649      	mov	r1, r9
 8002192:	008b      	lsls	r3, r1, #2
 8002194:	4641      	mov	r1, r8
 8002196:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800219a:	4641      	mov	r1, r8
 800219c:	008a      	lsls	r2, r1, #2
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	4603      	mov	r3, r0
 80021a4:	4622      	mov	r2, r4
 80021a6:	189b      	adds	r3, r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	460b      	mov	r3, r1
 80021ac:	462a      	mov	r2, r5
 80021ae:	eb42 0303 	adc.w	r3, r2, r3
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80021c0:	4649      	mov	r1, r9
 80021c2:	008b      	lsls	r3, r1, #2
 80021c4:	4641      	mov	r1, r8
 80021c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021ca:	4641      	mov	r1, r8
 80021cc:	008a      	lsls	r2, r1, #2
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	4603      	mov	r3, r0
 80021d4:	4622      	mov	r2, r4
 80021d6:	189b      	adds	r3, r3, r2
 80021d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80021da:	462b      	mov	r3, r5
 80021dc:	460a      	mov	r2, r1
 80021de:	eb42 0303 	adc.w	r3, r2, r3
 80021e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021e4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80021e8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80021ec:	f7fe fd1c 	bl	8000c28 <__aeabi_ldivmod>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80021f8:	4bab      	ldr	r3, [pc, #684]	; (80024a8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6cc>)
 80021fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021fe:	b21b      	sxth	r3, r3
 8002200:	17da      	asrs	r2, r3, #31
 8002202:	673b      	str	r3, [r7, #112]	; 0x70
 8002204:	677a      	str	r2, [r7, #116]	; 0x74
 8002206:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800220a:	f04f 0000 	mov.w	r0, #0
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	0b50      	lsrs	r0, r2, #13
 8002214:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002218:	1359      	asrs	r1, r3, #13
 800221a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800221e:	462b      	mov	r3, r5
 8002220:	fb00 f203 	mul.w	r2, r0, r3
 8002224:	4623      	mov	r3, r4
 8002226:	fb03 f301 	mul.w	r3, r3, r1
 800222a:	4413      	add	r3, r2
 800222c:	4622      	mov	r2, r4
 800222e:	fba2 1200 	umull	r1, r2, r2, r0
 8002232:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8002236:	460a      	mov	r2, r1
 8002238:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800223c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002240:	4413      	add	r3, r2
 8002242:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002246:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800224a:	f04f 0000 	mov.w	r0, #0
 800224e:	f04f 0100 	mov.w	r1, #0
 8002252:	0b50      	lsrs	r0, r2, #13
 8002254:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002258:	1359      	asrs	r1, r3, #13
 800225a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800225e:	462b      	mov	r3, r5
 8002260:	fb00 f203 	mul.w	r2, r0, r3
 8002264:	4623      	mov	r3, r4
 8002266:	fb03 f301 	mul.w	r3, r3, r1
 800226a:	4413      	add	r3, r2
 800226c:	4622      	mov	r2, r4
 800226e:	fba2 1200 	umull	r1, r2, r2, r0
 8002272:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002276:	460a      	mov	r2, r1
 8002278:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800227c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002280:	4413      	add	r3, r2
 8002282:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002292:	4621      	mov	r1, r4
 8002294:	0e4a      	lsrs	r2, r1, #25
 8002296:	4629      	mov	r1, r5
 8002298:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800229c:	4629      	mov	r1, r5
 800229e:	164b      	asrs	r3, r1, #25
 80022a0:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = (((int64_t)p8) * p) >> 19;
 80022a4:	4b81      	ldr	r3, [pc, #516]	; (80024ac <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d0>)
 80022a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	17da      	asrs	r2, r3, #31
 80022ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80022b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022b6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80022ba:	462a      	mov	r2, r5
 80022bc:	fb02 f203 	mul.w	r2, r2, r3
 80022c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022c4:	4621      	mov	r1, r4
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80022d0:	4621      	mov	r1, r4
 80022d2:	fba2 1201 	umull	r1, r2, r2, r1
 80022d6:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022da:	460a      	mov	r2, r1
 80022dc:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80022e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80022e4:	4413      	add	r3, r2
 80022e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80022f6:	4621      	mov	r1, r4
 80022f8:	0cca      	lsrs	r2, r1, #19
 80022fa:	4629      	mov	r1, r5
 80022fc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002300:	4629      	mov	r1, r5
 8002302:	14cb      	asrs	r3, r1, #19
 8002304:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8002308:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800230c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002310:	1884      	adds	r4, r0, r2
 8002312:	663c      	str	r4, [r7, #96]	; 0x60
 8002314:	eb41 0303 	adc.w	r3, r1, r3
 8002318:	667b      	str	r3, [r7, #100]	; 0x64
 800231a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800231e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002322:	4621      	mov	r1, r4
 8002324:	1889      	adds	r1, r1, r2
 8002326:	65b9      	str	r1, [r7, #88]	; 0x58
 8002328:	4629      	mov	r1, r5
 800232a:	eb43 0101 	adc.w	r1, r3, r1
 800232e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002330:	f04f 0000 	mov.w	r0, #0
 8002334:	f04f 0100 	mov.w	r1, #0
 8002338:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800233c:	4623      	mov	r3, r4
 800233e:	0a18      	lsrs	r0, r3, #8
 8002340:	462b      	mov	r3, r5
 8002342:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002346:	462b      	mov	r3, r5
 8002348:	1219      	asrs	r1, r3, #8
 800234a:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d4>)
 800234c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002350:	b21b      	sxth	r3, r3
 8002352:	17da      	asrs	r2, r3, #31
 8002354:	653b      	str	r3, [r7, #80]	; 0x50
 8002356:	657a      	str	r2, [r7, #84]	; 0x54
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002364:	464c      	mov	r4, r9
 8002366:	0123      	lsls	r3, r4, #4
 8002368:	4644      	mov	r4, r8
 800236a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800236e:	4644      	mov	r4, r8
 8002370:	0122      	lsls	r2, r4, #4
 8002372:	1884      	adds	r4, r0, r2
 8002374:	603c      	str	r4, [r7, #0]
 8002376:	eb41 0303 	adc.w	r3, r1, r3
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002380:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	*pressure = (int32_t)p/256;
 8002384:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002388:	2b00      	cmp	r3, #0
 800238a:	da00      	bge.n	800238e <BME280_ReadTemperatureAndPressureAndHuminidity+0x5b2>
 800238c:	33ff      	adds	r3, #255	; 0xff
 800238e:	121b      	asrs	r3, r3, #8
 8002390:	461a      	mov	r2, r3
 8002392:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002396:	601a      	str	r2, [r3, #0]

	// Pressure section
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 8002398:	20fd      	movs	r0, #253	; 0xfd
 800239a:	f7ff fa87 	bl	80018ac <BME280_Read16>
 800239e:	4603      	mov	r3, r0
 80023a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80023a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023ac:	d101      	bne.n	80023b2 <BME280_ReadTemperatureAndPressureAndHuminidity+0x5d6>
		return -1; //error
 80023ae:	23ff      	movs	r3, #255	; 0xff
 80023b0:	e073      	b.n	800249a <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t v_x1_u32r;

	v_x1_u32r = (t_fine - ((int32_t)76800));
 80023b2:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d8>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80023ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80023be:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023c2:	039a      	lsls	r2, r3, #14
 80023c4:	4b3c      	ldr	r3, [pc, #240]	; (80024b8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6dc>)
 80023c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ca:	051b      	lsls	r3, r3, #20
 80023cc:	1ad2      	subs	r2, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e0>)
 80023d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023da:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80023de:	1ad3      	subs	r3, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80023e0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80023e4:	13db      	asrs	r3, r3, #15
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 80023e6:	4a36      	ldr	r2, [pc, #216]	; (80024c0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e4>)
 80023e8:	f992 2000 	ldrsb.w	r2, [r2]
 80023ec:	4611      	mov	r1, r2
 80023ee:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80023f2:	fb01 f202 	mul.w	r2, r1, r2
 80023f6:	1292      	asrs	r2, r2, #10
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 80023f8:	4932      	ldr	r1, [pc, #200]	; (80024c4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e8>)
 80023fa:	7809      	ldrb	r1, [r1, #0]
 80023fc:	4608      	mov	r0, r1
 80023fe:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002402:	fb00 f101 	mul.w	r1, r0, r1
 8002406:	12c9      	asrs	r1, r1, #11
 8002408:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 800240c:	fb01 f202 	mul.w	r2, r1, r2
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8002410:	1292      	asrs	r2, r2, #10
 8002412:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 8002416:	492c      	ldr	r1, [pc, #176]	; (80024c8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6ec>)
 8002418:	f9b1 1000 	ldrsh.w	r1, [r1]
 800241c:	fb01 f202 	mul.w	r2, r1, r2
 8002420:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002424:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 8002426:	fb02 f303 	mul.w	r3, r2, r3
 800242a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800242e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002432:	13db      	asrs	r3, r3, #15
 8002434:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002438:	13d2      	asrs	r2, r2, #15
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	11db      	asrs	r3, r3, #7
							 ((int32_t)h1)) >> 4));
 8002440:	4a22      	ldr	r2, [pc, #136]	; (80024cc <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f0>)
 8002442:	7812      	ldrb	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8002444:	fb02 f303 	mul.w	r3, r2, r3
							 ((int32_t)h1)) >> 4));
 8002448:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800244a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8002454:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002458:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800245c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8002460:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002464:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8002468:	bfa8      	it	ge
 800246a:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800246e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	float h = (v_x1_u32r>>12);
 8002472:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002476:	131b      	asrs	r3, r3, #12
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002480:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
	*huminidity = h / 1024.0;
 8002484:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 8002488:	eddf 6a11 	vldr	s13, [pc, #68]	; 80024d0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f4>
 800248c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002494:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80024a0:	46bd      	mov	sp, r7
 80024a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024a6:	bf00      	nop
 80024a8:	20000626 	.word	0x20000626
 80024ac:	20000624 	.word	0x20000624
 80024b0:	20000622 	.word	0x20000622
 80024b4:	20000634 	.word	0x20000634
 80024b8:	2000062a 	.word	0x2000062a
 80024bc:	2000062c 	.word	0x2000062c
 80024c0:	20000612 	.word	0x20000612
 80024c4:	20000611 	.word	0x20000611
 80024c8:	20000628 	.word	0x20000628
 80024cc:	20000610 	.word	0x20000610
 80024d0:	44800000 	.word	0x44800000

080024d4 <drv8835_mode_control>:
#include "stm32f4xx_hal_tim.h"



void drv8835_mode_control(DRV8835_Mode mode)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	if(mode == Phase_Enable_Mode)
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <drv8835_mode_control+0x1c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, SET);
 80024e4:	2201      	movs	r2, #1
 80024e6:	2101      	movs	r1, #1
 80024e8:	4807      	ldr	r0, [pc, #28]	; (8002508 <drv8835_mode_control+0x34>)
 80024ea:	f003 fb45 	bl	8005b78 <HAL_GPIO_WritePin>
	else if(mode == In_In_Mode)
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
}
 80024ee:	e007      	b.n	8002500 <drv8835_mode_control+0x2c>
	else if(mode == In_In_Mode)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d104      	bne.n	8002500 <drv8835_mode_control+0x2c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 80024f6:	2200      	movs	r2, #0
 80024f8:	2101      	movs	r1, #1
 80024fa:	4803      	ldr	r0, [pc, #12]	; (8002508 <drv8835_mode_control+0x34>)
 80024fc:	f003 fb3c 	bl	8005b78 <HAL_GPIO_WritePin>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40020800 	.word	0x40020800

0800250c <drv8835_set_motorA_direction>:

void drv8835_set_motorA_direction(DRV8835_Direction dir)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
	if(dir == CW)
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d106      	bne.n	800252a <drv8835_set_motorA_direction+0x1e>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, SET);
 800251c:	2201      	movs	r2, #1
 800251e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002522:	4808      	ldr	r0, [pc, #32]	; (8002544 <drv8835_set_motorA_direction+0x38>)
 8002524:	f003 fb28 	bl	8005b78 <HAL_GPIO_WritePin>
	else if(dir == CCW)
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
}
 8002528:	e008      	b.n	800253c <drv8835_set_motorA_direction+0x30>
	else if(dir == CCW)
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <drv8835_set_motorA_direction+0x30>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
 8002530:	2200      	movs	r2, #0
 8002532:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002536:	4803      	ldr	r0, [pc, #12]	; (8002544 <drv8835_set_motorA_direction+0x38>)
 8002538:	f003 fb1e 	bl	8005b78 <HAL_GPIO_WritePin>
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40020000 	.word	0x40020000

08002548 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint8_t speed)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
	if(speed >= htim8.Instance->ARR)
 8002552:	79fa      	ldrb	r2, [r7, #7]
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <drv8835_set_motorA_speed+0x34>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255a:	429a      	cmp	r2, r3
 800255c:	d303      	bcc.n	8002566 <drv8835_set_motorA_speed+0x1e>
		speed = htim8.Instance->ARR;
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <drv8835_set_motorA_speed+0x34>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	71fb      	strb	r3, [r7, #7]

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, speed);
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <drv8835_set_motorA_speed+0x34>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	79fa      	ldrb	r2, [r7, #7]
 800256c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	200007c8 	.word	0x200007c8

08002580 <drv8835_init>:

void drv8835_init()
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	drv8835_mode_control(Phase_Enable_Mode);
 8002584:	2001      	movs	r0, #1
 8002586:	f7ff ffa5 	bl	80024d4 <drv8835_mode_control>
	drv8835_set_motorA_direction(CCW);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff ffbe 	bl	800250c <drv8835_set_motorA_direction>
	drv8835_set_motorA_speed(0);
 8002590:	2000      	movs	r0, #0
 8002592:	f7ff ffd9 	bl	8002548 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002596:	2100      	movs	r1, #0
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <drv8835_init+0x24>)
 800259a:	f006 fdc1 	bl	8009120 <HAL_TIM_PWM_Start>
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	200007c8 	.word	0x200007c8

080025a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 80025ac:	4879      	ldr	r0, [pc, #484]	; (8002794 <MX_FREERTOS_Init+0x1ec>)
 80025ae:	f008 fc25 	bl	800adfc <osMutexNew>
 80025b2:	4603      	mov	r3, r0
 80025b4:	4a78      	ldr	r2, [pc, #480]	; (8002798 <MX_FREERTOS_Init+0x1f0>)
 80025b6:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 80025b8:	4878      	ldr	r0, [pc, #480]	; (800279c <MX_FREERTOS_Init+0x1f4>)
 80025ba:	f008 fc1f 	bl	800adfc <osMutexNew>
 80025be:	4603      	mov	r3, r0
 80025c0:	4a77      	ldr	r2, [pc, #476]	; (80027a0 <MX_FREERTOS_Init+0x1f8>)
 80025c2:	6013      	str	r3, [r2, #0]

  /* creation of MutexRTC */
  MutexRTCHandle = osMutexNew(&MutexRTC_attributes);
 80025c4:	4877      	ldr	r0, [pc, #476]	; (80027a4 <MX_FREERTOS_Init+0x1fc>)
 80025c6:	f008 fc19 	bl	800adfc <osMutexNew>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4a76      	ldr	r2, [pc, #472]	; (80027a8 <MX_FREERTOS_Init+0x200>)
 80025ce:	6013      	str	r3, [r2, #0]

  /* creation of MutexAlarm */
  MutexAlarmHandle = osMutexNew(&MutexAlarm_attributes);
 80025d0:	4876      	ldr	r0, [pc, #472]	; (80027ac <MX_FREERTOS_Init+0x204>)
 80025d2:	f008 fc13 	bl	800adfc <osMutexNew>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a75      	ldr	r2, [pc, #468]	; (80027b0 <MX_FREERTOS_Init+0x208>)
 80025da:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 80025dc:	4875      	ldr	r0, [pc, #468]	; (80027b4 <MX_FREERTOS_Init+0x20c>)
 80025de:	f008 fc0d 	bl	800adfc <osMutexNew>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4a74      	ldr	r2, [pc, #464]	; (80027b8 <MX_FREERTOS_Init+0x210>)
 80025e6:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemBme280 */
  BinarySemBme280Handle = osSemaphoreNew(1, 1, &BinarySemBme280_attributes);
 80025e8:	4a74      	ldr	r2, [pc, #464]	; (80027bc <MX_FREERTOS_Init+0x214>)
 80025ea:	2101      	movs	r1, #1
 80025ec:	2001      	movs	r0, #1
 80025ee:	f008 fd13 	bl	800b018 <osSemaphoreNew>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4a72      	ldr	r2, [pc, #456]	; (80027c0 <MX_FREERTOS_Init+0x218>)
 80025f6:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemBH1750 */
  BinarySemBH1750Handle = osSemaphoreNew(1, 1, &BinarySemBH1750_attributes);
 80025f8:	4a72      	ldr	r2, [pc, #456]	; (80027c4 <MX_FREERTOS_Init+0x21c>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	2001      	movs	r0, #1
 80025fe:	f008 fd0b 	bl	800b018 <osSemaphoreNew>
 8002602:	4603      	mov	r3, r0
 8002604:	4a70      	ldr	r2, [pc, #448]	; (80027c8 <MX_FREERTOS_Init+0x220>)
 8002606:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemRTC */
  BinarySemRTCHandle = osSemaphoreNew(1, 1, &BinarySemRTC_attributes);
 8002608:	4a70      	ldr	r2, [pc, #448]	; (80027cc <MX_FREERTOS_Init+0x224>)
 800260a:	2101      	movs	r1, #1
 800260c:	2001      	movs	r0, #1
 800260e:	f008 fd03 	bl	800b018 <osSemaphoreNew>
 8002612:	4603      	mov	r3, r0
 8002614:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <MX_FREERTOS_Init+0x228>)
 8002616:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemCountUp */
  BinarySemCountUpHandle = osSemaphoreNew(1, 1, &BinarySemCountUp_attributes);
 8002618:	4a6e      	ldr	r2, [pc, #440]	; (80027d4 <MX_FREERTOS_Init+0x22c>)
 800261a:	2101      	movs	r1, #1
 800261c:	2001      	movs	r0, #1
 800261e:	f008 fcfb 	bl	800b018 <osSemaphoreNew>
 8002622:	4603      	mov	r3, r0
 8002624:	4a6c      	ldr	r2, [pc, #432]	; (80027d8 <MX_FREERTOS_Init+0x230>)
 8002626:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemCountDown */
  BinarySemCountDownHandle = osSemaphoreNew(1, 1, &BinarySemCountDown_attributes);
 8002628:	4a6c      	ldr	r2, [pc, #432]	; (80027dc <MX_FREERTOS_Init+0x234>)
 800262a:	2101      	movs	r1, #1
 800262c:	2001      	movs	r0, #1
 800262e:	f008 fcf3 	bl	800b018 <osSemaphoreNew>
 8002632:	4603      	mov	r3, r0
 8002634:	4a6a      	ldr	r2, [pc, #424]	; (80027e0 <MX_FREERTOS_Init+0x238>)
 8002636:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemSetAlarm */
  BinarySemSetAlarmHandle = osSemaphoreNew(1, 1, &BinarySemSetAlarm_attributes);
 8002638:	4a6a      	ldr	r2, [pc, #424]	; (80027e4 <MX_FREERTOS_Init+0x23c>)
 800263a:	2101      	movs	r1, #1
 800263c:	2001      	movs	r0, #1
 800263e:	f008 fceb 	bl	800b018 <osSemaphoreNew>
 8002642:	4603      	mov	r3, r0
 8002644:	4a68      	ldr	r2, [pc, #416]	; (80027e8 <MX_FREERTOS_Init+0x240>)
 8002646:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBmeData */
  TimerBmeDataHandle = osTimerNew(CallbackTimerBmeData, osTimerPeriodic, NULL, &TimerBmeData_attributes);
 8002648:	4b68      	ldr	r3, [pc, #416]	; (80027ec <MX_FREERTOS_Init+0x244>)
 800264a:	2200      	movs	r2, #0
 800264c:	2101      	movs	r1, #1
 800264e:	4868      	ldr	r0, [pc, #416]	; (80027f0 <MX_FREERTOS_Init+0x248>)
 8002650:	f008 fb2a 	bl	800aca8 <osTimerNew>
 8002654:	4603      	mov	r3, r0
 8002656:	4a67      	ldr	r2, [pc, #412]	; (80027f4 <MX_FREERTOS_Init+0x24c>)
 8002658:	6013      	str	r3, [r2, #0]

  /* creation of TimerBh1750Data */
  TimerBh1750DataHandle = osTimerNew(CallbackTimerBh1750Data, osTimerPeriodic, NULL, &TimerBh1750Data_attributes);
 800265a:	4b67      	ldr	r3, [pc, #412]	; (80027f8 <MX_FREERTOS_Init+0x250>)
 800265c:	2200      	movs	r2, #0
 800265e:	2101      	movs	r1, #1
 8002660:	4866      	ldr	r0, [pc, #408]	; (80027fc <MX_FREERTOS_Init+0x254>)
 8002662:	f008 fb21 	bl	800aca8 <osTimerNew>
 8002666:	4603      	mov	r3, r0
 8002668:	4a65      	ldr	r2, [pc, #404]	; (8002800 <MX_FREERTOS_Init+0x258>)
 800266a:	6013      	str	r3, [r2, #0]

  /* creation of TimerRTC */
  TimerRTCHandle = osTimerNew(CallbackTimerRTC, osTimerPeriodic, NULL, &TimerRTC_attributes);
 800266c:	4b65      	ldr	r3, [pc, #404]	; (8002804 <MX_FREERTOS_Init+0x25c>)
 800266e:	2200      	movs	r2, #0
 8002670:	2101      	movs	r1, #1
 8002672:	4865      	ldr	r0, [pc, #404]	; (8002808 <MX_FREERTOS_Init+0x260>)
 8002674:	f008 fb18 	bl	800aca8 <osTimerNew>
 8002678:	4603      	mov	r3, r0
 800267a:	4a64      	ldr	r2, [pc, #400]	; (800280c <MX_FREERTOS_Init+0x264>)
 800267c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueBme */
  QueueBmeHandle = osMessageQueueNew (16, sizeof(BmeData_t), &QueueBme_attributes);
 800267e:	4a64      	ldr	r2, [pc, #400]	; (8002810 <MX_FREERTOS_Init+0x268>)
 8002680:	210c      	movs	r1, #12
 8002682:	2010      	movs	r0, #16
 8002684:	f008 fde8 	bl	800b258 <osMessageQueueNew>
 8002688:	4603      	mov	r3, r0
 800268a:	4a62      	ldr	r2, [pc, #392]	; (8002814 <MX_FREERTOS_Init+0x26c>)
 800268c:	6013      	str	r3, [r2, #0]

  /* creation of QueueBh1750 */
  QueueBh1750Handle = osMessageQueueNew (16, sizeof(BHData_t), &QueueBh1750_attributes);
 800268e:	4a62      	ldr	r2, [pc, #392]	; (8002818 <MX_FREERTOS_Init+0x270>)
 8002690:	2104      	movs	r1, #4
 8002692:	2010      	movs	r0, #16
 8002694:	f008 fde0 	bl	800b258 <osMessageQueueNew>
 8002698:	4603      	mov	r3, r0
 800269a:	4a60      	ldr	r2, [pc, #384]	; (800281c <MX_FREERTOS_Init+0x274>)
 800269c:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCData */
  QueueRTCDataHandle = osMessageQueueNew (16, sizeof(RTC_DateTypeDef), &QueueRTCData_attributes);
 800269e:	4a60      	ldr	r2, [pc, #384]	; (8002820 <MX_FREERTOS_Init+0x278>)
 80026a0:	2104      	movs	r1, #4
 80026a2:	2010      	movs	r0, #16
 80026a4:	f008 fdd8 	bl	800b258 <osMessageQueueNew>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4a5e      	ldr	r2, [pc, #376]	; (8002824 <MX_FREERTOS_Init+0x27c>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCTime */
  QueueRTCTimeHandle = osMessageQueueNew (16, sizeof(RTC_TimeTypeDef), &QueueRTCTime_attributes);
 80026ae:	4a5e      	ldr	r2, [pc, #376]	; (8002828 <MX_FREERTOS_Init+0x280>)
 80026b0:	2114      	movs	r1, #20
 80026b2:	2010      	movs	r0, #16
 80026b4:	f008 fdd0 	bl	800b258 <osMessageQueueNew>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a5c      	ldr	r2, [pc, #368]	; (800282c <MX_FREERTOS_Init+0x284>)
 80026bc:	6013      	str	r3, [r2, #0]

  /* creation of QueueCounterPump */
  QueueCounterPumpHandle = osMessageQueueNew (16, sizeof(RTC_TimeTypeDef), &QueueCounterPump_attributes);
 80026be:	4a5c      	ldr	r2, [pc, #368]	; (8002830 <MX_FREERTOS_Init+0x288>)
 80026c0:	2114      	movs	r1, #20
 80026c2:	2010      	movs	r0, #16
 80026c4:	f008 fdc8 	bl	800b258 <osMessageQueueNew>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4a5a      	ldr	r2, [pc, #360]	; (8002834 <MX_FREERTOS_Init+0x28c>)
 80026cc:	6013      	str	r3, [r2, #0]

  /* creation of QueueAlarm */
  QueueAlarmHandle = osMessageQueueNew (16, sizeof(RTC_TimeTypeDef), &QueueAlarm_attributes);
 80026ce:	4a5a      	ldr	r2, [pc, #360]	; (8002838 <MX_FREERTOS_Init+0x290>)
 80026d0:	2114      	movs	r1, #20
 80026d2:	2010      	movs	r0, #16
 80026d4:	f008 fdc0 	bl	800b258 <osMessageQueueNew>
 80026d8:	4603      	mov	r3, r0
 80026da:	4a58      	ldr	r2, [pc, #352]	; (800283c <MX_FREERTOS_Init+0x294>)
 80026dc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskLed */
  TaskLedHandle = osThreadNew(StartTaskL, NULL, &TaskLed_attributes);
 80026de:	4a58      	ldr	r2, [pc, #352]	; (8002840 <MX_FREERTOS_Init+0x298>)
 80026e0:	2100      	movs	r1, #0
 80026e2:	4858      	ldr	r0, [pc, #352]	; (8002844 <MX_FREERTOS_Init+0x29c>)
 80026e4:	f008 f8fe 	bl	800a8e4 <osThreadNew>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a57      	ldr	r2, [pc, #348]	; (8002848 <MX_FREERTOS_Init+0x2a0>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* creation of TaskRTC */
  TaskRTCHandle = osThreadNew(StartTaskRTC, NULL, &TaskRTC_attributes);
 80026ee:	4a57      	ldr	r2, [pc, #348]	; (800284c <MX_FREERTOS_Init+0x2a4>)
 80026f0:	2100      	movs	r1, #0
 80026f2:	4857      	ldr	r0, [pc, #348]	; (8002850 <MX_FREERTOS_Init+0x2a8>)
 80026f4:	f008 f8f6 	bl	800a8e4 <osThreadNew>
 80026f8:	4603      	mov	r3, r0
 80026fa:	4a56      	ldr	r2, [pc, #344]	; (8002854 <MX_FREERTOS_Init+0x2ac>)
 80026fc:	6013      	str	r3, [r2, #0]

  /* creation of TaskBme280 */
  TaskBme280Handle = osThreadNew(StartTaskBme280, NULL, &TaskBme280_attributes);
 80026fe:	4a56      	ldr	r2, [pc, #344]	; (8002858 <MX_FREERTOS_Init+0x2b0>)
 8002700:	2100      	movs	r1, #0
 8002702:	4856      	ldr	r0, [pc, #344]	; (800285c <MX_FREERTOS_Init+0x2b4>)
 8002704:	f008 f8ee 	bl	800a8e4 <osThreadNew>
 8002708:	4603      	mov	r3, r0
 800270a:	4a55      	ldr	r2, [pc, #340]	; (8002860 <MX_FREERTOS_Init+0x2b8>)
 800270c:	6013      	str	r3, [r2, #0]

  /* creation of TaskBH1750 */
  TaskBH1750Handle = osThreadNew(StartTaskBH1750, NULL, &TaskBH1750_attributes);
 800270e:	4a55      	ldr	r2, [pc, #340]	; (8002864 <MX_FREERTOS_Init+0x2bc>)
 8002710:	2100      	movs	r1, #0
 8002712:	4855      	ldr	r0, [pc, #340]	; (8002868 <MX_FREERTOS_Init+0x2c0>)
 8002714:	f008 f8e6 	bl	800a8e4 <osThreadNew>
 8002718:	4603      	mov	r3, r0
 800271a:	4a54      	ldr	r2, [pc, #336]	; (800286c <MX_FREERTOS_Init+0x2c4>)
 800271c:	6013      	str	r3, [r2, #0]

  /* creation of TaskSSD1306 */
  TaskSSD1306Handle = osThreadNew(StartTaskSSD1306, NULL, &TaskSSD1306_attributes);
 800271e:	4a54      	ldr	r2, [pc, #336]	; (8002870 <MX_FREERTOS_Init+0x2c8>)
 8002720:	2100      	movs	r1, #0
 8002722:	4854      	ldr	r0, [pc, #336]	; (8002874 <MX_FREERTOS_Init+0x2cc>)
 8002724:	f008 f8de 	bl	800a8e4 <osThreadNew>
 8002728:	4603      	mov	r3, r0
 800272a:	4a53      	ldr	r2, [pc, #332]	; (8002878 <MX_FREERTOS_Init+0x2d0>)
 800272c:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpON */
  TaskPumpONHandle = osThreadNew(StartTaskPumpON, NULL, &TaskPumpON_attributes);
 800272e:	4a53      	ldr	r2, [pc, #332]	; (800287c <MX_FREERTOS_Init+0x2d4>)
 8002730:	2100      	movs	r1, #0
 8002732:	4853      	ldr	r0, [pc, #332]	; (8002880 <MX_FREERTOS_Init+0x2d8>)
 8002734:	f008 f8d6 	bl	800a8e4 <osThreadNew>
 8002738:	4603      	mov	r3, r0
 800273a:	4a52      	ldr	r2, [pc, #328]	; (8002884 <MX_FREERTOS_Init+0x2dc>)
 800273c:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpOFF */
  TaskPumpOFFHandle = osThreadNew(StartTaskPumpOFF, NULL, &TaskPumpOFF_attributes);
 800273e:	4a52      	ldr	r2, [pc, #328]	; (8002888 <MX_FREERTOS_Init+0x2e0>)
 8002740:	2100      	movs	r1, #0
 8002742:	4852      	ldr	r0, [pc, #328]	; (800288c <MX_FREERTOS_Init+0x2e4>)
 8002744:	f008 f8ce 	bl	800a8e4 <osThreadNew>
 8002748:	4603      	mov	r3, r0
 800274a:	4a51      	ldr	r2, [pc, #324]	; (8002890 <MX_FREERTOS_Init+0x2e8>)
 800274c:	6013      	str	r3, [r2, #0]

  /* creation of TaskCounterUp */
  TaskCounterUpHandle = osThreadNew(StartTaskCounterPumpUp, NULL, &TaskCounterUp_attributes);
 800274e:	4a51      	ldr	r2, [pc, #324]	; (8002894 <MX_FREERTOS_Init+0x2ec>)
 8002750:	2100      	movs	r1, #0
 8002752:	4851      	ldr	r0, [pc, #324]	; (8002898 <MX_FREERTOS_Init+0x2f0>)
 8002754:	f008 f8c6 	bl	800a8e4 <osThreadNew>
 8002758:	4603      	mov	r3, r0
 800275a:	4a50      	ldr	r2, [pc, #320]	; (800289c <MX_FREERTOS_Init+0x2f4>)
 800275c:	6013      	str	r3, [r2, #0]

  /* creation of TaskCounterDown */
  TaskCounterDownHandle = osThreadNew(StartTaskCounterDown, NULL, &TaskCounterDown_attributes);
 800275e:	4a50      	ldr	r2, [pc, #320]	; (80028a0 <MX_FREERTOS_Init+0x2f8>)
 8002760:	2100      	movs	r1, #0
 8002762:	4850      	ldr	r0, [pc, #320]	; (80028a4 <MX_FREERTOS_Init+0x2fc>)
 8002764:	f008 f8be 	bl	800a8e4 <osThreadNew>
 8002768:	4603      	mov	r3, r0
 800276a:	4a4f      	ldr	r2, [pc, #316]	; (80028a8 <MX_FREERTOS_Init+0x300>)
 800276c:	6013      	str	r3, [r2, #0]

  /* creation of TaskAlarmCountU */
  TaskAlarmCountUHandle = osThreadNew(StartTaskAlarmCounterUp, NULL, &TaskAlarmCountU_attributes);
 800276e:	4a4f      	ldr	r2, [pc, #316]	; (80028ac <MX_FREERTOS_Init+0x304>)
 8002770:	2100      	movs	r1, #0
 8002772:	484f      	ldr	r0, [pc, #316]	; (80028b0 <MX_FREERTOS_Init+0x308>)
 8002774:	f008 f8b6 	bl	800a8e4 <osThreadNew>
 8002778:	4603      	mov	r3, r0
 800277a:	4a4e      	ldr	r2, [pc, #312]	; (80028b4 <MX_FREERTOS_Init+0x30c>)
 800277c:	6013      	str	r3, [r2, #0]

  /* creation of TaskAlarmCountD */
  TaskAlarmCountDHandle = osThreadNew(StartTaskAlarmCountDown, NULL, &TaskAlarmCountD_attributes);
 800277e:	4a4e      	ldr	r2, [pc, #312]	; (80028b8 <MX_FREERTOS_Init+0x310>)
 8002780:	2100      	movs	r1, #0
 8002782:	484e      	ldr	r0, [pc, #312]	; (80028bc <MX_FREERTOS_Init+0x314>)
 8002784:	f008 f8ae 	bl	800a8e4 <osThreadNew>
 8002788:	4603      	mov	r3, r0
 800278a:	4a4d      	ldr	r2, [pc, #308]	; (80028c0 <MX_FREERTOS_Init+0x318>)
 800278c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	08011e64 	.word	0x08011e64
 8002798:	20000688 	.word	0x20000688
 800279c:	08011e74 	.word	0x08011e74
 80027a0:	2000068c 	.word	0x2000068c
 80027a4:	08011e84 	.word	0x08011e84
 80027a8:	20000690 	.word	0x20000690
 80027ac:	08011e94 	.word	0x08011e94
 80027b0:	20000694 	.word	0x20000694
 80027b4:	08011ea4 	.word	0x08011ea4
 80027b8:	20000698 	.word	0x20000698
 80027bc:	08011eb4 	.word	0x08011eb4
 80027c0:	2000069c 	.word	0x2000069c
 80027c4:	08011ec4 	.word	0x08011ec4
 80027c8:	200006a0 	.word	0x200006a0
 80027cc:	08011ed4 	.word	0x08011ed4
 80027d0:	200006a4 	.word	0x200006a4
 80027d4:	08011ee4 	.word	0x08011ee4
 80027d8:	200006a8 	.word	0x200006a8
 80027dc:	08011ef4 	.word	0x08011ef4
 80027e0:	200006ac 	.word	0x200006ac
 80027e4:	08011f04 	.word	0x08011f04
 80027e8:	200006b0 	.word	0x200006b0
 80027ec:	08011e34 	.word	0x08011e34
 80027f0:	08003061 	.word	0x08003061
 80027f4:	2000067c 	.word	0x2000067c
 80027f8:	08011e44 	.word	0x08011e44
 80027fc:	08003081 	.word	0x08003081
 8002800:	20000680 	.word	0x20000680
 8002804:	08011e54 	.word	0x08011e54
 8002808:	080030a1 	.word	0x080030a1
 800280c:	20000684 	.word	0x20000684
 8002810:	08011da4 	.word	0x08011da4
 8002814:	20000664 	.word	0x20000664
 8002818:	08011dbc 	.word	0x08011dbc
 800281c:	20000668 	.word	0x20000668
 8002820:	08011dd4 	.word	0x08011dd4
 8002824:	2000066c 	.word	0x2000066c
 8002828:	08011dec 	.word	0x08011dec
 800282c:	20000670 	.word	0x20000670
 8002830:	08011e04 	.word	0x08011e04
 8002834:	20000674 	.word	0x20000674
 8002838:	08011e1c 	.word	0x08011e1c
 800283c:	20000678 	.word	0x20000678
 8002840:	08011c18 	.word	0x08011c18
 8002844:	080028c5 	.word	0x080028c5
 8002848:	20000638 	.word	0x20000638
 800284c:	08011c3c 	.word	0x08011c3c
 8002850:	080028fd 	.word	0x080028fd
 8002854:	2000063c 	.word	0x2000063c
 8002858:	08011c60 	.word	0x08011c60
 800285c:	08002ad9 	.word	0x08002ad9
 8002860:	20000640 	.word	0x20000640
 8002864:	08011c84 	.word	0x08011c84
 8002868:	08002bc1 	.word	0x08002bc1
 800286c:	20000644 	.word	0x20000644
 8002870:	08011ca8 	.word	0x08011ca8
 8002874:	08002c89 	.word	0x08002c89
 8002878:	20000648 	.word	0x20000648
 800287c:	08011ccc 	.word	0x08011ccc
 8002880:	08002e09 	.word	0x08002e09
 8002884:	2000064c 	.word	0x2000064c
 8002888:	08011cf0 	.word	0x08011cf0
 800288c:	08002e2f 	.word	0x08002e2f
 8002890:	20000650 	.word	0x20000650
 8002894:	08011d14 	.word	0x08011d14
 8002898:	08002e4d 	.word	0x08002e4d
 800289c:	20000654 	.word	0x20000654
 80028a0:	08011d38 	.word	0x08011d38
 80028a4:	08002ec9 	.word	0x08002ec9
 80028a8:	20000658 	.word	0x20000658
 80028ac:	08011d5c 	.word	0x08011d5c
 80028b0:	08002f49 	.word	0x08002f49
 80028b4:	2000065c 	.word	0x2000065c
 80028b8:	08011d80 	.word	0x08011d80
 80028bc:	08002fd1 	.word	0x08002fd1
 80028c0:	20000660 	.word	0x20000660

080028c4 <StartTaskL>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskL */
void StartTaskL(void *argument)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskL */
	uint32_t tick4 = osKernelGetTickCount();
 80028cc:	f007 ffec 	bl	800a8a8 <osKernelGetTickCount>
 80028d0:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  tick4 += ((10000 * osKernelGetTickFreq()) / 1000);
 80028d2:	f007 fffe 	bl	800a8d2 <osKernelGetTickFreq>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f242 7210 	movw	r2, #10000	; 0x2710
 80028dc:	fb02 f303 	mul.w	r3, r2, r3
 80028e0:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <StartTaskL+0x34>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	099b      	lsrs	r3, r3, #6
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	60fb      	str	r3, [r7, #12]
	  osDelayUntil(tick4);
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f008 f997 	bl	800ac22 <osDelayUntil>
	  tick4 += ((10000 * osKernelGetTickFreq()) / 1000);
 80028f4:	e7ed      	b.n	80028d2 <StartTaskL+0xe>
 80028f6:	bf00      	nop
 80028f8:	10624dd3 	.word	0x10624dd3

080028fc <StartTaskRTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRTC */
void StartTaskRTC(void *argument)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b0a8      	sub	sp, #160	; 0xa0
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]





 	 _AlarmON.AlarmTime.Hours = 8 ;
 8002904:	2308      	movs	r3, #8
 8002906:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
 	 _AlarmON.AlarmTime.Minutes = 0 ;
 800290a:	2300      	movs	r3, #0
 800290c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 	_AlarmON.AlarmTime.Seconds = 0 ;
 8002910:	2300      	movs	r3, #0
 8002912:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a


	 _AlarmOFF.AlarmTime.Hours = 8 ;
 8002916:	2308      	movs	r3, #8
 8002918:	f887 3020 	strb.w	r3, [r7, #32]
	 _AlarmOFF.AlarmTime.Minutes = 1 ;
 800291c:	2301      	movs	r3, #1
 800291e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	_AlarmOFF.AlarmTime.Seconds = 0 ;
 8002922:	2300      	movs	r3, #0
 8002924:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22




 	HAL_RTC_Init(&hrtc);
 8002928:	4862      	ldr	r0, [pc, #392]	; (8002ab4 <StartTaskRTC+0x1b8>)
 800292a:	f005 feb7 	bl	800869c <HAL_RTC_Init>
	HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 800292e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002932:	2200      	movs	r2, #0
 8002934:	4619      	mov	r1, r3
 8002936:	485f      	ldr	r0, [pc, #380]	; (8002ab4 <StartTaskRTC+0x1b8>)
 8002938:	f006 f8a2 	bl	8008a80 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 800293c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002940:	2200      	movs	r2, #0
 8002942:	4619      	mov	r1, r3
 8002944:	485b      	ldr	r0, [pc, #364]	; (8002ab4 <StartTaskRTC+0x1b8>)
 8002946:	f005 ffb9 	bl	80088bc <HAL_RTC_GetTime>

	HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 800294a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800294e:	2200      	movs	r2, #0
 8002950:	4619      	mov	r1, r3
 8002952:	4858      	ldr	r0, [pc, #352]	; (8002ab4 <StartTaskRTC+0x1b8>)
 8002954:	f006 f8e3 	bl	8008b1e <HAL_RTC_SetAlarm>
	HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 8002958:	f107 0320 	add.w	r3, r7, #32
 800295c:	2200      	movs	r2, #0
 800295e:	4619      	mov	r1, r3
 8002960:	4854      	ldr	r0, [pc, #336]	; (8002ab4 <StartTaskRTC+0x1b8>)
 8002962:	f006 f8dc 	bl	8008b1e <HAL_RTC_SetAlarm>
//	_RTCTime.Seconds =0x0;
// 	HAL_RTC_SetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
// 	HAL_RTC_SetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);


 	osTimerStart(TimerRTCHandle, 100);
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <StartTaskRTC+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2164      	movs	r1, #100	; 0x64
 800296c:	4618      	mov	r0, r3
 800296e:	f008 fa17 	bl	800ada0 <osTimerStart>
 	uint32_t tick4 = osKernelGetTickCount();
 8002972:	f007 ff99 	bl	800a8a8 <osKernelGetTickCount>
 8002976:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
  for(;;)
  {
//	  osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, 10);
//	  osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod, 0, 10);

	  HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 800297a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800297e:	2200      	movs	r2, #0
 8002980:	4619      	mov	r1, r3
 8002982:	484c      	ldr	r0, [pc, #304]	; (8002ab4 <StartTaskRTC+0x1b8>)
 8002984:	f006 f87c 	bl	8008a80 <HAL_RTC_GetDate>
	  HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 8002988:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800298c:	2200      	movs	r2, #0
 800298e:	4619      	mov	r1, r3
 8002990:	4848      	ldr	r0, [pc, #288]	; (8002ab4 <StartTaskRTC+0x1b8>)
 8002992:	f005 ff93 	bl	80088bc <HAL_RTC_GetTime>
//			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
//		}



	   if (_AlarmON.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmON.AlarmTime.Minutes ==  _RTCTime.Minutes )
 8002996:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800299a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800299e:	429a      	cmp	r2, r3
 80029a0:	d131      	bne.n	8002a06 <StartTaskRTC+0x10a>
 80029a2:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80029a6:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d12b      	bne.n	8002a06 <StartTaskRTC+0x10a>
	  	  {
		  osMutexAcquire(MutexAlarmHandle, osWaitForever);
 80029ae:	4b43      	ldr	r3, [pc, #268]	; (8002abc <StartTaskRTC+0x1c0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f04f 31ff 	mov.w	r1, #4294967295
 80029b6:	4618      	mov	r0, r3
 80029b8:	f008 faa6 	bl	800af08 <osMutexAcquire>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 80029bc:	2201      	movs	r2, #1
 80029be:	2120      	movs	r1, #32
 80029c0:	483f      	ldr	r0, [pc, #252]	; (8002ac0 <StartTaskRTC+0x1c4>)
 80029c2:	f003 f8d9 	bl	8005b78 <HAL_GPIO_WritePin>
			  osThreadFlagsSet(TaskPumpONHandle, 0x00000001U);
 80029c6:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <StartTaskRTC+0x1c8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f008 f81b 	bl	800aa08 <osThreadFlagsSet>
			  _AlarmON.AlarmTime.Hours = _AlarmON.AlarmTime.Hours + 1;
 80029d2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80029d6:	3301      	adds	r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

			  if(_AlarmON.AlarmTime.Hours == 24)
 80029de:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80029e2:	2b18      	cmp	r3, #24
 80029e4:	d102      	bne.n	80029ec <StartTaskRTC+0xf0>
				  {
					  _AlarmON.AlarmTime.Hours = 8;
 80029e6:	2308      	movs	r3, #8
 80029e8:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
				  }
			  HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 80029ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029f0:	2200      	movs	r2, #0
 80029f2:	4619      	mov	r1, r3
 80029f4:	482f      	ldr	r0, [pc, #188]	; (8002ab4 <StartTaskRTC+0x1b8>)
 80029f6:	f006 f892 	bl	8008b1e <HAL_RTC_SetAlarm>
			  osMutexRelease(MutexAlarmHandle);
 80029fa:	4b30      	ldr	r3, [pc, #192]	; (8002abc <StartTaskRTC+0x1c0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f008 facd 	bl	800af9e <osMutexRelease>
 8002a04:	e02f      	b.n	8002a66 <StartTaskRTC+0x16a>
	  	  }
	  else if(_AlarmOFF.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmOFF.AlarmTime.Minutes ==  _RTCTime.Minutes )
 8002a06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a0a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d129      	bne.n	8002a66 <StartTaskRTC+0x16a>
 8002a12:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002a16:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d123      	bne.n	8002a66 <StartTaskRTC+0x16a>
	  	  {
		  	  osMutexAcquire(MutexAlarmHandle, osWaitForever);
 8002a1e:	4b27      	ldr	r3, [pc, #156]	; (8002abc <StartTaskRTC+0x1c0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f04f 31ff 	mov.w	r1, #4294967295
 8002a26:	4618      	mov	r0, r3
 8002a28:	f008 fa6e 	bl	800af08 <osMutexAcquire>
			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2120      	movs	r1, #32
 8002a30:	4823      	ldr	r0, [pc, #140]	; (8002ac0 <StartTaskRTC+0x1c4>)
 8002a32:	f003 f8a1 	bl	8005b78 <HAL_GPIO_WritePin>
			  osThreadFlagsSet(TaskPumpOFFHandle, 0x00000010U);
 8002a36:	4b24      	ldr	r3, [pc, #144]	; (8002ac8 <StartTaskRTC+0x1cc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2110      	movs	r1, #16
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f007 ffe3 	bl	800aa08 <osThreadFlagsSet>

			  _AlarmOFF.AlarmTime.Hours = _AlarmOFF.AlarmTime.Hours + 1;
 8002a42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a46:	3301      	adds	r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f887 3020 	strb.w	r3, [r7, #32]
			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 8002a4e:	f107 0320 	add.w	r3, r7, #32
 8002a52:	2200      	movs	r2, #0
 8002a54:	4619      	mov	r1, r3
 8002a56:	4817      	ldr	r0, [pc, #92]	; (8002ab4 <StartTaskRTC+0x1b8>)
 8002a58:	f006 f861 	bl	8008b1e <HAL_RTC_SetAlarm>
			  osMutexRelease(MutexAlarmHandle);
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <StartTaskRTC+0x1c0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f008 fa9c 	bl	800af9e <osMutexRelease>
//	  {
//
//
//		  CompareSeconds = RTCTime.Seconds;
//	  }
	  if (osOK == osSemaphoreAcquire(BinarySemRTCHandle, 0)) {
 8002a66:	4b19      	ldr	r3, [pc, #100]	; (8002acc <StartTaskRTC+0x1d0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f008 fb5d 	bl	800b12c <osSemaphoreAcquire>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d108      	bne.n	8002a8a <StartTaskRTC+0x18e>
//	  	  			osMessageQueuePut(QueueRTCDataHandle, &_RTCDate, 0, osWaitForever);
	  	  			osMessageQueuePut(QueueRTCTimeHandle, &_RTCTime, 0, osWaitForever);
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <StartTaskRTC+0x1d4>)
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	2200      	movs	r2, #0
 8002a86:	f008 fc5b 	bl	800b340 <osMessageQueuePut>
	  	  		}

	  tick4 += ((70 * osKernelGetTickFreq()) / 1000);
 8002a8a:	f007 ff22 	bl	800a8d2 <osKernelGetTickFreq>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2246      	movs	r2, #70	; 0x46
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <StartTaskRTC+0x1d8>)
 8002a98:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  osDelayUntil(tick4);
 8002aa8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002aac:	f008 f8b9 	bl	800ac22 <osDelayUntil>
	  HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 8002ab0:	e763      	b.n	800297a <StartTaskRTC+0x7e>
 8002ab2:	bf00      	nop
 8002ab4:	2000075c 	.word	0x2000075c
 8002ab8:	20000684 	.word	0x20000684
 8002abc:	20000694 	.word	0x20000694
 8002ac0:	40020000 	.word	0x40020000
 8002ac4:	2000064c 	.word	0x2000064c
 8002ac8:	20000650 	.word	0x20000650
 8002acc:	200006a4 	.word	0x200006a4
 8002ad0:	20000670 	.word	0x20000670
 8002ad4:	10624dd3 	.word	0x10624dd3

08002ad8 <StartTaskBme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBme280 */
void StartTaskBme280(void *argument)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBme280 */
	BmeData_t _BmeData;
	uint32_t tick3;
	osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002ae0:	4b30      	ldr	r3, [pc, #192]	; (8002ba4 <StartTaskBme280+0xcc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f008 fa0d 	bl	800af08 <osMutexAcquire>
	BME280_Init(&hi2c1, BME280_TEMPERATURE_16BIT, BME280_PRESSURE_ULTRALOWPOWER,
 8002aee:	2303      	movs	r3, #3
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	2303      	movs	r3, #3
 8002af4:	2201      	movs	r2, #1
 8002af6:	2101      	movs	r1, #1
 8002af8:	482b      	ldr	r0, [pc, #172]	; (8002ba8 <StartTaskBme280+0xd0>)
 8002afa:	f7fe ff85 	bl	8001a08 <BME280_Init>
	BME280_HUMINIDITY_STANDARD, BME280_NORMALMODE);
	BME280_SetConfig(BME280_STANDBY_MS_10, BME280_FILTER_OFF);
 8002afe:	2100      	movs	r1, #0
 8002b00:	2006      	movs	r0, #6
 8002b02:	f7fe ff61 	bl	80019c8 <BME280_SetConfig>
	osMutexRelease(MutexI2CHandle);
 8002b06:	4b27      	ldr	r3, [pc, #156]	; (8002ba4 <StartTaskBme280+0xcc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f008 fa47 	bl	800af9e <osMutexRelease>
	osTimerStart(TimerBmeDataHandle, 100);
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <StartTaskBme280+0xd4>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2164      	movs	r1, #100	; 0x64
 8002b16:	4618      	mov	r0, r3
 8002b18:	f008 f942 	bl	800ada0 <osTimerStart>

	tick3 = osKernelGetTickCount();
 8002b1c:	f007 fec4 	bl	800a8a8 <osKernelGetTickCount>
 8002b20:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002b22:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <StartTaskBme280+0xcc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f04f 31ff 	mov.w	r1, #4294967295
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f008 f9ec 	bl	800af08 <osMutexAcquire>
	  BME280_ReadTemperatureAndPressureAndHuminidity(&_BmeData.Temperature,
 8002b30:	f107 0208 	add.w	r2, r7, #8
 8002b34:	f107 0308 	add.w	r3, r7, #8
 8002b38:	f103 0108 	add.w	r1, r3, #8
 8002b3c:	f107 0308 	add.w	r3, r7, #8
 8002b40:	3304      	adds	r3, #4
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f94a 	bl	8001ddc <BME280_ReadTemperatureAndPressureAndHuminidity>
	  				&_BmeData.Pressure, &_BmeData.Humidity);
	  osMutexRelease(MutexI2CHandle);
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <StartTaskBme280+0xcc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f008 fa26 	bl	800af9e <osMutexRelease>

	  if (osOK == osSemaphoreAcquire(BinarySemBme280Handle, 0)) {
 8002b52:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <StartTaskBme280+0xd8>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2100      	movs	r1, #0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f008 fae7 	bl	800b12c <osSemaphoreAcquire>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d108      	bne.n	8002b76 <StartTaskBme280+0x9e>
	  			osMessageQueuePut(QueueBmeHandle, &_BmeData, 0, osWaitForever);
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <StartTaskBme280+0xdc>)
 8002b66:	6818      	ldr	r0, [r3, #0]
 8002b68:	f107 0108 	add.w	r1, r7, #8
 8002b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b70:	2200      	movs	r2, #0
 8002b72:	f008 fbe5 	bl	800b340 <osMessageQueuePut>
	  		}
		printf("TASK BME280 \n\r ");
 8002b76:	4810      	ldr	r0, [pc, #64]	; (8002bb8 <StartTaskBme280+0xe0>)
 8002b78:	f002 f938 	bl	8004dec <printf_>
//	  printf("Temperature: %.2f, Humidity: %.2f z \n\r", _BmeData.Temperature, _BmeData.Humidity);
//////    osDelay(100);
		tick3 += (75 * osKernelGetTickFreq()) / 1000;
 8002b7c:	f007 fea9 	bl	800a8d2 <osKernelGetTickFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	011a      	lsls	r2, r3, #4
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	4a0b      	ldr	r2, [pc, #44]	; (8002bbc <StartTaskBme280+0xe4>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4413      	add	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
		osDelayUntil(tick3);
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f008 f841 	bl	800ac22 <osDelayUntil>
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002ba0:	e7bf      	b.n	8002b22 <StartTaskBme280+0x4a>
 8002ba2:	bf00      	nop
 8002ba4:	2000068c 	.word	0x2000068c
 8002ba8:	200006b4 	.word	0x200006b4
 8002bac:	2000067c 	.word	0x2000067c
 8002bb0:	2000069c 	.word	0x2000069c
 8002bb4:	20000664 	.word	0x20000664
 8002bb8:	08011990 	.word	0x08011990
 8002bbc:	10624dd3 	.word	0x10624dd3

08002bc0 <StartTaskBH1750>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBH1750 */
void StartTaskBH1750(void *argument)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	uint32_t tick4;
	BHData_t _BHData;

	//	float BH1750_lux;

	osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002bc8:	4b28      	ldr	r3, [pc, #160]	; (8002c6c <StartTaskBH1750+0xac>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f008 f999 	bl	800af08 <osMutexAcquire>
	BH1750_Init(&hi2c1);
 8002bd6:	4826      	ldr	r0, [pc, #152]	; (8002c70 <StartTaskBH1750+0xb0>)
 8002bd8:	f7fe fd3a 	bl	8001650 <BH1750_Init>
	BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8002bdc:	2011      	movs	r0, #17
 8002bde:	f7fe fd6d 	bl	80016bc <BH1750_SetMode>
	osMutexRelease(MutexI2CHandle);
 8002be2:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <StartTaskBH1750+0xac>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f008 f9d9 	bl	800af9e <osMutexRelease>

	osTimerStart(TimerBh1750DataHandle, 100);
 8002bec:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <StartTaskBH1750+0xb4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2164      	movs	r1, #100	; 0x64
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f008 f8d4 	bl	800ada0 <osTimerStart>
	tick4 = osKernelGetTickCount();
 8002bf8:	f007 fe56 	bl	800a8a8 <osKernelGetTickCount>
 8002bfc:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <StartTaskBH1750+0xac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f04f 31ff 	mov.w	r1, #4294967295
 8002c06:	4618      	mov	r0, r3
 8002c08:	f008 f97e 	bl	800af08 <osMutexAcquire>

	  		BH1750_ReadLight(&_BHData.LightIntensity);
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fdd3 	bl	80017bc <BH1750_ReadLight>
	  //	  	  printf("Light: %.2f \n\r", _BhData.LightIntensity);
	  		osMutexRelease(MutexI2CHandle);
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <StartTaskBH1750+0xac>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f008 f9bf 	bl	800af9e <osMutexRelease>

	  		if (osOK == osSemaphoreAcquire(BinarySemBH1750Handle, 0)) {
 8002c20:	4b15      	ldr	r3, [pc, #84]	; (8002c78 <StartTaskBH1750+0xb8>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2100      	movs	r1, #0
 8002c26:	4618      	mov	r0, r3
 8002c28:	f008 fa80 	bl	800b12c <osSemaphoreAcquire>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d108      	bne.n	8002c44 <StartTaskBH1750+0x84>
	  			osMessageQueuePut(QueueBh1750Handle, &_BHData, 0, osWaitForever);
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <StartTaskBH1750+0xbc>)
 8002c34:	6818      	ldr	r0, [r3, #0]
 8002c36:	f107 0108 	add.w	r1, r7, #8
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f008 fb7e 	bl	800b340 <osMessageQueuePut>
	  //	  	 	  if(BH1750_OK == BH1750_ReadLight(&BH1750_lux))
	  //	  	 	  	  {
	  //	  	 	  		  size = sprintf(buffer, "BH1750 Lux: %.2f\n\r", BH1750_lux);
	  //	  	 	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, size, 100);
	  //	  	 	  	  }
	  		printf("TASK BH1750 \n\r ");
 8002c44:	480e      	ldr	r0, [pc, #56]	; (8002c80 <StartTaskBH1750+0xc0>)
 8002c46:	f002 f8d1 	bl	8004dec <printf_>
	  		tick4 += ((65 * osKernelGetTickFreq()) / 1000);
 8002c4a:	f007 fe42 	bl	800a8d2 <osKernelGetTickFreq>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	4613      	mov	r3, r2
 8002c52:	019b      	lsls	r3, r3, #6
 8002c54:	4413      	add	r3, r2
 8002c56:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <StartTaskBH1750+0xc4>)
 8002c58:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5c:	099b      	lsrs	r3, r3, #6
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4413      	add	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
	  		osDelayUntil(tick4);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f007 ffdc 	bl	800ac22 <osDelayUntil>
	  	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002c6a:	e7c8      	b.n	8002bfe <StartTaskBH1750+0x3e>
 8002c6c:	2000068c 	.word	0x2000068c
 8002c70:	200006b4 	.word	0x200006b4
 8002c74:	20000680 	.word	0x20000680
 8002c78:	200006a0 	.word	0x200006a0
 8002c7c:	20000668 	.word	0x20000668
 8002c80:	080119a0 	.word	0x080119a0
 8002c84:	10624dd3 	.word	0x10624dd3

08002c88 <StartTaskSSD1306>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSSD1306 */
void StartTaskSSD1306(void *argument)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b0b6      	sub	sp, #216	; 0xd8
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	6078      	str	r0, [r7, #4]


	uint32_t tick2;


	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002c90:	4b51      	ldr	r3, [pc, #324]	; (8002dd8 <StartTaskSSD1306+0x150>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f008 f935 	bl	800af08 <osMutexAcquire>
	SSD1306_Init(&hi2c2);
 8002c9e:	484f      	ldr	r0, [pc, #316]	; (8002ddc <StartTaskSSD1306+0x154>)
 8002ca0:	f7fe fc7e 	bl	80015a0 <SSD1306_Init>
	osMutexRelease(MutexI2C2Handle);
 8002ca4:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <StartTaskSSD1306+0x150>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f008 f978 	bl	800af9e <osMutexRelease>

	GFX_SetFont(font_8x5);
 8002cae:	484c      	ldr	r0, [pc, #304]	; (8002de0 <StartTaskSSD1306+0x158>)
 8002cb0:	f7fe f988 	bl	8000fc4 <GFX_SetFont>
	SSD1306_Clear(BLACK);
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f7fe fc37 	bl	8001528 <SSD1306_Clear>
	SSD1306_Display();
 8002cba:	f7fe fc53 	bl	8001564 <SSD1306_Display>

	tick2 = osKernelGetTickCount();
 8002cbe:	f007 fdf3 	bl	800a8a8 <osKernelGetTickCount>
 8002cc2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

  /* Infinite loop */
  for(;;)
  {
	  SSD1306_Clear(BLACK);
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7fe fc2e 	bl	8001528 <SSD1306_Clear>
	  osMessageQueueGet(QueueBmeHandle, &_BmeData, 0, osWaitForever);
 8002ccc:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <StartTaskSSD1306+0x15c>)
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	f107 0120 	add.w	r1, r7, #32
 8002cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f008 fb91 	bl	800b400 <osMessageQueueGet>
	  osMessageQueueGet(QueueBh1750Handle, &_BHData, 0, osWaitForever);
 8002cde:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <StartTaskSSD1306+0x160>)
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	f107 011c 	add.w	r1, r7, #28
 8002ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cea:	2200      	movs	r2, #0
 8002cec:	f008 fb88 	bl	800b400 <osMessageQueueGet>
//	  osMessageQueueGet(QueueRTCDataHandle, &_RTCDate, 0,osWaitForever);
	  osMessageQueueGet(QueueRTCTimeHandle, &_RTCTime, 0, osWaitForever);
 8002cf0:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <StartTaskSSD1306+0x164>)
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	f107 0108 	add.w	r1, r7, #8
 8002cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f008 fb7f 	bl	800b400 <osMessageQueueGet>

//	  osMessageQueueGet(QueueAlarmHandle, &_AlarmPeriodicty, 0, 50);


	  sprintf(MessageTemp, "Temperature: %.2f ", _BmeData.Temperature);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fd fc3f 	bl	8000588 <__aeabi_f2d>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8002d12:	4937      	ldr	r1, [pc, #220]	; (8002df0 <StartTaskSSD1306+0x168>)
 8002d14:	f002 f886 	bl	8004e24 <sprintf_>
	  sprintf(MessageHum, "Humidity: %.2f", _BmeData.Humidity);
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fc34 	bl	8000588 <__aeabi_f2d>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8002d28:	4932      	ldr	r1, [pc, #200]	; (8002df4 <StartTaskSSD1306+0x16c>)
 8002d2a:	f002 f87b 	bl	8004e24 <sprintf_>
	  sprintf(MessageInten, "Lx: %.2f,", _BHData.LightIntensity);
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fc29 	bl	8000588 <__aeabi_f2d>
 8002d36:	4602      	mov	r2, r0
 8002d38:	460b      	mov	r3, r1
 8002d3a:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8002d3e:	492e      	ldr	r1, [pc, #184]	; (8002df8 <StartTaskSSD1306+0x170>)
 8002d40:	f002 f870 	bl	8004e24 <sprintf_>
//	  sprintf(MessageData, "Data: %02d.%02d.20%02d  Time: %02d:%02d:%02d:%02d",_RTCDate.Date,_RTCDate.Month,_RTCDate.Year,_RTCTime.Hours,_RTCTime.Minutes,_RTCTime.Seconds);
	  sprintf(MessageTime, "Time: %02d:%02d:%02d",_RTCTime.Hours,_RTCTime.Minutes,_RTCTime.Seconds);
 8002d44:	7a3b      	ldrb	r3, [r7, #8]
 8002d46:	461a      	mov	r2, r3
 8002d48:	7a7b      	ldrb	r3, [r7, #9]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	7abb      	ldrb	r3, [r7, #10]
 8002d4e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	460b      	mov	r3, r1
 8002d56:	4929      	ldr	r1, [pc, #164]	; (8002dfc <StartTaskSSD1306+0x174>)
 8002d58:	f002 f864 	bl	8004e24 <sprintf_>
//	  sprintf(MessageTimePump, "Pump OP Time: %02d Min",_PumpOperatingTime.Minutes);
//	  sprintf(MessageFreqAlarm, "Alarm Period: %02d H", _AlarmPeriod.Hours);
	  GFX_DrawString(0, 0, MessageTime, WHITE, 0);
 8002d5c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002d60:	2300      	movs	r3, #0
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2301      	movs	r3, #1
 8002d66:	2100      	movs	r1, #0
 8002d68:	2000      	movs	r0, #0
 8002d6a:	f7fe f9f5 	bl	8001158 <GFX_DrawString>
	  GFX_DrawString(0, 10, MessageTemp, WHITE, 0);
 8002d6e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002d72:	2300      	movs	r3, #0
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	2301      	movs	r3, #1
 8002d78:	210a      	movs	r1, #10
 8002d7a:	2000      	movs	r0, #0
 8002d7c:	f7fe f9ec 	bl	8001158 <GFX_DrawString>
	  GFX_DrawString(0, 20, MessageHum, WHITE, 0);
 8002d80:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	2301      	movs	r3, #1
 8002d8a:	2114      	movs	r1, #20
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	f7fe f9e3 	bl	8001158 <GFX_DrawString>
	  GFX_DrawString(0, 30, MessageInten, WHITE, 0);
 8002d92:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002d96:	2300      	movs	r3, #0
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	211e      	movs	r1, #30
 8002d9e:	2000      	movs	r0, #0
 8002da0:	f7fe f9da 	bl	8001158 <GFX_DrawString>
//	  GFX_DrawString(0, 40, MessageTimePump, WHITE, 0);
//	  GFX_DrawString(0, 50, MessageFreqAlarm, WHITE, 0);

	  SSD1306_Display();
 8002da4:	f7fe fbde 	bl	8001564 <SSD1306_Display>

	  printf("TASK OLED \n\r");
 8002da8:	4815      	ldr	r0, [pc, #84]	; (8002e00 <StartTaskSSD1306+0x178>)
 8002daa:	f002 f81f 	bl	8004dec <printf_>

//		printf("TASK OLED I2C MUTEX is released \n\r");
      tick2 += (250 * osKernelGetTickFreq()) / 1000;
 8002dae:	f007 fd90 	bl	800a8d2 <osKernelGetTickFreq>
 8002db2:	4603      	mov	r3, r0
 8002db4:	22fa      	movs	r2, #250	; 0xfa
 8002db6:	fb02 f303 	mul.w	r3, r2, r3
 8002dba:	4a12      	ldr	r2, [pc, #72]	; (8002e04 <StartTaskSSD1306+0x17c>)
 8002dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	  osDelayUntil(tick2);
 8002dcc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8002dd0:	f007 ff27 	bl	800ac22 <osDelayUntil>
	  SSD1306_Clear(BLACK);
 8002dd4:	e777      	b.n	8002cc6 <StartTaskSSD1306+0x3e>
 8002dd6:	bf00      	nop
 8002dd8:	20000698 	.word	0x20000698
 8002ddc:	20000708 	.word	0x20000708
 8002de0:	08011a38 	.word	0x08011a38
 8002de4:	20000664 	.word	0x20000664
 8002de8:	20000668 	.word	0x20000668
 8002dec:	20000670 	.word	0x20000670
 8002df0:	080119b0 	.word	0x080119b0
 8002df4:	080119c4 	.word	0x080119c4
 8002df8:	080119d4 	.word	0x080119d4
 8002dfc:	080119e0 	.word	0x080119e0
 8002e00:	080119f8 	.word	0x080119f8
 8002e04:	10624dd3 	.word	0x10624dd3

08002e08 <StartTaskPumpON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpON */
void StartTaskPumpON(void *argument)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPumpON */

	drv8835_init();
 8002e10:	f7ff fbb6 	bl	8002580 <drv8835_init>
  /* Infinite loop */
  for(;;)
  {


	  osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8002e14:	f04f 32ff 	mov.w	r2, #4294967295
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f007 fe80 	bl	800ab20 <osThreadFlagsWait>

	  drv8835_set_motorA_speed(99);
 8002e20:	2063      	movs	r0, #99	; 0x63
 8002e22:	f7ff fb91 	bl	8002548 <drv8835_set_motorA_speed>
	  osThreadFlagsClear(0x00000001U);
 8002e26:	2001      	movs	r0, #1
 8002e28:	f007 fe3c 	bl	800aaa4 <osThreadFlagsClear>
	  osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8002e2c:	e7f2      	b.n	8002e14 <StartTaskPumpON+0xc>

08002e2e <StartTaskPumpOFF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpOFF */
void StartTaskPumpOFF(void *argument)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b082      	sub	sp, #8
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 8002e36:	f04f 32ff 	mov.w	r2, #4294967295
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2010      	movs	r0, #16
 8002e3e:	f007 fe6f 	bl	800ab20 <osThreadFlagsWait>


	  drv8835_set_motorA_speed(0);
 8002e42:	2000      	movs	r0, #0
 8002e44:	f7ff fb80 	bl	8002548 <drv8835_set_motorA_speed>
	  osThreadFlagsWait(0x00000010U, osFlagsWaitAny, osWaitForever);
 8002e48:	e7f5      	b.n	8002e36 <StartTaskPumpOFF+0x8>
	...

08002e4c <StartTaskCounterPumpUp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCounterPumpUp */
void StartTaskCounterPumpUp(void *argument)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b088      	sub	sp, #32
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCounterPumpUp */
	RTC_TimeTypeDef _PumpOperatingTime;
	uint32_t tick;

	tick= osKernelGetTickCount();
 8002e54:	f007 fd28 	bl	800a8a8 <osKernelGetTickCount>
 8002e58:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {

	  	  osThreadFlagsWait(0x00000100U, osFlagsWaitAll, osWaitForever);
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	2101      	movs	r1, #1
 8002e60:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002e64:	f007 fe5c 	bl	800ab20 <osThreadFlagsWait>
		  osMessageQueueGet(QueueCounterPumpHandle, &_PumpOperatingTime, 0, 100);
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <StartTaskCounterPumpUp+0x74>)
 8002e6a:	6818      	ldr	r0, [r3, #0]
 8002e6c:	f107 0108 	add.w	r1, r7, #8
 8002e70:	2364      	movs	r3, #100	; 0x64
 8002e72:	2200      	movs	r2, #0
 8002e74:	f008 fac4 	bl	800b400 <osMessageQueueGet>
	  	  _PumpOperatingTime.Minutes = _PumpOperatingTime.Minutes + 1;
 8002e78:	7a7b      	ldrb	r3, [r7, #9]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	727b      	strb	r3, [r7, #9]

	  	  if(_PumpOperatingTime.Minutes >= 59  )
 8002e80:	7a7b      	ldrb	r3, [r7, #9]
 8002e82:	2b3a      	cmp	r3, #58	; 0x3a
 8002e84:	d901      	bls.n	8002e8a <StartTaskCounterPumpUp+0x3e>
	  	  {
	  		   _PumpOperatingTime.Minutes = 1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	727b      	strb	r3, [r7, #9]
	  	  }

	  	  osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, 100);
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <StartTaskCounterPumpUp+0x74>)
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	f107 0108 	add.w	r1, r7, #8
 8002e92:	2364      	movs	r3, #100	; 0x64
 8002e94:	2200      	movs	r2, #0
 8002e96:	f008 fa53 	bl	800b340 <osMessageQueuePut>



	  	tick += (420 * osKernelGetTickFreq()) / 1000;
 8002e9a:	f007 fd1a 	bl	800a8d2 <osKernelGetTickFreq>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8002ea4:	fb02 f303 	mul.w	r3, r2, r3
 8002ea8:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <StartTaskCounterPumpUp+0x78>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	099b      	lsrs	r3, r3, #6
 8002eb0:	69fa      	ldr	r2, [r7, #28]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	61fb      	str	r3, [r7, #28]
	  	osDelayUntil(tick);
 8002eb6:	69f8      	ldr	r0, [r7, #28]
 8002eb8:	f007 feb3 	bl	800ac22 <osDelayUntil>
	  	  osThreadFlagsWait(0x00000100U, osFlagsWaitAll, osWaitForever);
 8002ebc:	e7cd      	b.n	8002e5a <StartTaskCounterPumpUp+0xe>
 8002ebe:	bf00      	nop
 8002ec0:	20000674 	.word	0x20000674
 8002ec4:	10624dd3 	.word	0x10624dd3

08002ec8 <StartTaskCounterDown>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCounterDown */
void StartTaskCounterDown(void *argument)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCounterDown */
	RTC_TimeTypeDef _PumpOperatingTime;

	uint32_t tick;
	tick = osKernelGetTickCount();
 8002ed0:	f007 fcea 	bl	800a8a8 <osKernelGetTickCount>
 8002ed4:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {

	  	  	  osThreadFlagsWait(0x00001000U, osFlagsWaitAll, osWaitForever);
 8002ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eda:	2101      	movs	r1, #1
 8002edc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002ee0:	f007 fe1e 	bl	800ab20 <osThreadFlagsWait>

	  		  osMessageQueueGet(QueueCounterPumpHandle, &_PumpOperatingTime, 0, 100);
 8002ee4:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <StartTaskCounterDown+0x78>)
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	f107 0108 	add.w	r1, r7, #8
 8002eec:	2364      	movs	r3, #100	; 0x64
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f008 fa86 	bl	800b400 <osMessageQueueGet>
	  	      _PumpOperatingTime.Minutes = _PumpOperatingTime.Minutes - 1;
 8002ef4:	7a7b      	ldrb	r3, [r7, #9]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	727b      	strb	r3, [r7, #9]

	  	  	  if(_PumpOperatingTime.Minutes == 0 ||_PumpOperatingTime.Minutes >= 60 )
 8002efc:	7a7b      	ldrb	r3, [r7, #9]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <StartTaskCounterDown+0x40>
 8002f02:	7a7b      	ldrb	r3, [r7, #9]
 8002f04:	2b3b      	cmp	r3, #59	; 0x3b
 8002f06:	d901      	bls.n	8002f0c <StartTaskCounterDown+0x44>
	  	  	  {
	  	  	        _PumpOperatingTime.Minutes = 59;
 8002f08:	233b      	movs	r3, #59	; 0x3b
 8002f0a:	727b      	strb	r3, [r7, #9]
	  	  	  }

	  	  	  osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime,0,  100);
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <StartTaskCounterDown+0x78>)
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f107 0108 	add.w	r1, r7, #8
 8002f14:	2364      	movs	r3, #100	; 0x64
 8002f16:	2200      	movs	r2, #0
 8002f18:	f008 fa12 	bl	800b340 <osMessageQueuePut>



	 tick += (410 * osKernelGetTickFreq()) / 1000;
 8002f1c:	f007 fcd9 	bl	800a8d2 <osKernelGetTickFreq>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f44f 72cd 	mov.w	r2, #410	; 0x19a
 8002f26:	fb02 f303 	mul.w	r3, r2, r3
 8002f2a:	4a06      	ldr	r2, [pc, #24]	; (8002f44 <StartTaskCounterDown+0x7c>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	69fa      	ldr	r2, [r7, #28]
 8002f34:	4413      	add	r3, r2
 8002f36:	61fb      	str	r3, [r7, #28]
	osDelayUntil(tick);
 8002f38:	69f8      	ldr	r0, [r7, #28]
 8002f3a:	f007 fe72 	bl	800ac22 <osDelayUntil>
	  	  	  osThreadFlagsWait(0x00001000U, osFlagsWaitAll, osWaitForever);
 8002f3e:	e7ca      	b.n	8002ed6 <StartTaskCounterDown+0xe>
 8002f40:	20000674 	.word	0x20000674
 8002f44:	10624dd3 	.word	0x10624dd3

08002f48 <StartTaskAlarmCounterUp>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAlarmCounterUp */
void StartTaskAlarmCounterUp(void *argument)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b088      	sub	sp, #32
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef _AlarmPeriod;



	uint32_t tick;
	tick = osKernelGetTickCount();
 8002f50:	f007 fcaa 	bl	800a8a8 <osKernelGetTickCount>
 8002f54:	61f8      	str	r0, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x00010000U, osFlagsWaitAll, osWaitForever);
 8002f56:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002f60:	f007 fdde 	bl	800ab20 <osThreadFlagsWait>
	  	  osMessageQueueGet(QueueAlarmHandle, &_AlarmPeriod, 0, 100);
 8002f64:	4b17      	ldr	r3, [pc, #92]	; (8002fc4 <StartTaskAlarmCounterUp+0x7c>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	f107 0108 	add.w	r1, r7, #8
 8002f6c:	2364      	movs	r3, #100	; 0x64
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f008 fa46 	bl	800b400 <osMessageQueueGet>
	  	_AlarmPeriod.Hours= _AlarmPeriod.Hours + 1;
 8002f74:	7a3b      	ldrb	r3, [r7, #8]
 8002f76:	3301      	adds	r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	723b      	strb	r3, [r7, #8]

	  	  	  	  	  if(_AlarmPeriod.Hours >= 16 )
 8002f7c:	7a3b      	ldrb	r3, [r7, #8]
 8002f7e:	2b0f      	cmp	r3, #15
 8002f80:	d901      	bls.n	8002f86 <StartTaskAlarmCounterUp+0x3e>
	  	  	  	  	  {
	  	  	  	  		  	 _AlarmPeriod.Hours = 1;
 8002f82:	2301      	movs	r3, #1
 8002f84:	723b      	strb	r3, [r7, #8]
	  	  	  	  	  }

	  	  osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod,0,  100);
 8002f86:	4b0f      	ldr	r3, [pc, #60]	; (8002fc4 <StartTaskAlarmCounterUp+0x7c>)
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	f107 0108 	add.w	r1, r7, #8
 8002f8e:	2364      	movs	r3, #100	; 0x64
 8002f90:	2200      	movs	r2, #0
 8002f92:	f008 f9d5 	bl	800b340 <osMessageQueuePut>
	  	osSemaphoreRelease(BinarySemSetAlarmHandle);
 8002f96:	4b0c      	ldr	r3, [pc, #48]	; (8002fc8 <StartTaskAlarmCounterUp+0x80>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f008 f918 	bl	800b1d0 <osSemaphoreRelease>

	  tick += (390 * osKernelGetTickFreq()) / 1000;
 8002fa0:	f007 fc97 	bl	800a8d2 <osKernelGetTickFreq>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8002faa:	fb02 f303 	mul.w	r3, r2, r3
 8002fae:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <StartTaskAlarmCounterUp+0x84>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	69fa      	ldr	r2, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	61fb      	str	r3, [r7, #28]
	  	osDelayUntil(tick);
 8002fbc:	69f8      	ldr	r0, [r7, #28]
 8002fbe:	f007 fe30 	bl	800ac22 <osDelayUntil>
	  osThreadFlagsWait(0x00010000U, osFlagsWaitAll, osWaitForever);
 8002fc2:	e7c8      	b.n	8002f56 <StartTaskAlarmCounterUp+0xe>
 8002fc4:	20000678 	.word	0x20000678
 8002fc8:	200006b0 	.word	0x200006b0
 8002fcc:	10624dd3 	.word	0x10624dd3

08002fd0 <StartTaskAlarmCountDown>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAlarmCountDown */
void StartTaskAlarmCountDown(void *argument)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08e      	sub	sp, #56	; 0x38
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAlarmCountDown */
	RTC_AlarmTypeDef _AlarmPeriod;
	uint32_t tick;
	tick = osKernelGetTickCount();
 8002fd8:	f007 fc66 	bl	800a8a8 <osKernelGetTickCount>
 8002fdc:	6378      	str	r0, [r7, #52]	; 0x34
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x00100000U, osFlagsWaitAll, osWaitForever);
 8002fde:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002fe8:	f007 fd9a 	bl	800ab20 <osThreadFlagsWait>
	  osMessageQueueGet(QueueAlarmHandle, &_AlarmPeriod, 0, 100);
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <StartTaskAlarmCountDown+0x84>)
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	f107 010c 	add.w	r1, r7, #12
 8002ff4:	2364      	movs	r3, #100	; 0x64
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f008 fa02 	bl	800b400 <osMessageQueueGet>
	  _AlarmPeriod.AlarmTime.Hours= _AlarmPeriod.AlarmTime.Hours - 1;
 8002ffc:	7b3b      	ldrb	r3, [r7, #12]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	b2db      	uxtb	r3, r3
 8003002:	733b      	strb	r3, [r7, #12]

	  	  	  	  if(_AlarmPeriod.AlarmTime.Hours == 0 ||_AlarmPeriod.AlarmTime.Hours >= 16 )
 8003004:	7b3b      	ldrb	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <StartTaskAlarmCountDown+0x40>
 800300a:	7b3b      	ldrb	r3, [r7, #12]
 800300c:	2b0f      	cmp	r3, #15
 800300e:	d901      	bls.n	8003014 <StartTaskAlarmCountDown+0x44>
	  	  	  	  {
	  	  	  		  	  _AlarmPeriod.AlarmTime.Hours = 16;
 8003010:	2310      	movs	r3, #16
 8003012:	733b      	strb	r3, [r7, #12]
	  	  	  	  }

	  osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod,0,  100);
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <StartTaskAlarmCountDown+0x84>)
 8003016:	6818      	ldr	r0, [r3, #0]
 8003018:	f107 010c 	add.w	r1, r7, #12
 800301c:	2364      	movs	r3, #100	; 0x64
 800301e:	2200      	movs	r2, #0
 8003020:	f008 f98e 	bl	800b340 <osMessageQueuePut>
	  osSemaphoreRelease(BinarySemSetAlarmHandle);;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <StartTaskAlarmCountDown+0x88>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f008 f8d1 	bl	800b1d0 <osSemaphoreRelease>

	  tick += (380 * osKernelGetTickFreq()) / 1000;
 800302e:	f007 fc50 	bl	800a8d2 <osKernelGetTickFreq>
 8003032:	4603      	mov	r3, r0
 8003034:	f44f 72be 	mov.w	r2, #380	; 0x17c
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	4a07      	ldr	r2, [pc, #28]	; (800305c <StartTaskAlarmCountDown+0x8c>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	099b      	lsrs	r3, r3, #6
 8003044:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003046:	4413      	add	r3, r2
 8003048:	637b      	str	r3, [r7, #52]	; 0x34
	  osDelayUntil(tick);
 800304a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800304c:	f007 fde9 	bl	800ac22 <osDelayUntil>
	  osThreadFlagsWait(0x00100000U, osFlagsWaitAll, osWaitForever);
 8003050:	e7c5      	b.n	8002fde <StartTaskAlarmCountDown+0xe>
 8003052:	bf00      	nop
 8003054:	20000678 	.word	0x20000678
 8003058:	200006b0 	.word	0x200006b0
 800305c:	10624dd3 	.word	0x10624dd3

08003060 <CallbackTimerBmeData>:
  /* USER CODE END StartTaskAlarmCountDown */
}

/* CallbackTimerBmeData function */
void CallbackTimerBmeData(void *argument)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBmeData */
	osSemaphoreRelease(BinarySemBme280Handle);
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <CallbackTimerBmeData+0x1c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f008 f8af 	bl	800b1d0 <osSemaphoreRelease>

  /* USER CODE END CallbackTimerBmeData */
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	2000069c 	.word	0x2000069c

08003080 <CallbackTimerBh1750Data>:

/* CallbackTimerBh1750Data function */
void CallbackTimerBh1750Data(void *argument)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBh1750Data */
	osSemaphoreRelease(BinarySemBH1750Handle);
 8003088:	4b04      	ldr	r3, [pc, #16]	; (800309c <CallbackTimerBh1750Data+0x1c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f008 f89f 	bl	800b1d0 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerBh1750Data */
}
 8003092:	bf00      	nop
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	200006a0 	.word	0x200006a0

080030a0 <CallbackTimerRTC>:

/* CallbackTimerRTC function */
void CallbackTimerRTC(void *argument)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerRTC */
	osSemaphoreRelease(BinarySemRTCHandle);
 80030a8:	4b04      	ldr	r3, [pc, #16]	; (80030bc <CallbackTimerRTC+0x1c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f008 f88f 	bl	800b1d0 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerRTC */
}
 80030b2:	bf00      	nop
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	200006a4 	.word	0x200006a4

080030c0 <_putchar>:
//	}
//}



void _putchar(char character) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	71fb      	strb	r3, [r7, #7]
	// send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <_putchar+0x38>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f04f 31ff 	mov.w	r1, #4294967295
 80030d2:	4618      	mov	r0, r3
 80030d4:	f007 ff18 	bl	800af08 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 80030d8:	1df9      	adds	r1, r7, #7
 80030da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030de:	2201      	movs	r2, #1
 80030e0:	4806      	ldr	r0, [pc, #24]	; (80030fc <_putchar+0x3c>)
 80030e2:	f006 ffde 	bl	800a0a2 <HAL_UART_Transmit>

	osMutexRelease(MutexPrintfHandle);
 80030e6:	4b04      	ldr	r3, [pc, #16]	; (80030f8 <_putchar+0x38>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f007 ff57 	bl	800af9e <osMutexRelease>
}
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000688 	.word	0x20000688
 80030fc:	20000810 	.word	0x20000810

08003100 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b08a      	sub	sp, #40	; 0x28
 8003104:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003106:	f107 0314 	add.w	r3, r7, #20
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	609a      	str	r2, [r3, #8]
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003116:	2300      	movs	r3, #0
 8003118:	613b      	str	r3, [r7, #16]
 800311a:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <MX_GPIO_Init+0xe0>)
 800311c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311e:	4a30      	ldr	r2, [pc, #192]	; (80031e0 <MX_GPIO_Init+0xe0>)
 8003120:	f043 0304 	orr.w	r3, r3, #4
 8003124:	6313      	str	r3, [r2, #48]	; 0x30
 8003126:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <MX_GPIO_Init+0xe0>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
 8003136:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <MX_GPIO_Init+0xe0>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	4a29      	ldr	r2, [pc, #164]	; (80031e0 <MX_GPIO_Init+0xe0>)
 800313c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003140:	6313      	str	r3, [r2, #48]	; 0x30
 8003142:	4b27      	ldr	r3, [pc, #156]	; (80031e0 <MX_GPIO_Init+0xe0>)
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <MX_GPIO_Init+0xe0>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <MX_GPIO_Init+0xe0>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <MX_GPIO_Init+0xe0>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	60bb      	str	r3, [r7, #8]
 8003168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	607b      	str	r3, [r7, #4]
 800316e:	4b1c      	ldr	r3, [pc, #112]	; (80031e0 <MX_GPIO_Init+0xe0>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <MX_GPIO_Init+0xe0>)
 8003174:	f043 0302 	orr.w	r3, r3, #2
 8003178:	6313      	str	r3, [r2, #48]	; 0x30
 800317a:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <MX_GPIO_Init+0xe0>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);
 8003186:	2200      	movs	r2, #0
 8003188:	2101      	movs	r1, #1
 800318a:	4816      	ldr	r0, [pc, #88]	; (80031e4 <MX_GPIO_Init+0xe4>)
 800318c:	f002 fcf4 	bl	8005b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|APHASE_Pin, GPIO_PIN_RESET);
 8003190:	2200      	movs	r2, #0
 8003192:	f44f 7108 	mov.w	r1, #544	; 0x220
 8003196:	4814      	ldr	r0, [pc, #80]	; (80031e8 <MX_GPIO_Init+0xe8>)
 8003198:	f002 fcee 	bl	8005b78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 800319c:	2301      	movs	r3, #1
 800319e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a0:	2301      	movs	r3, #1
 80031a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031a8:	2300      	movs	r3, #0
 80031aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4619      	mov	r1, r3
 80031b2:	480c      	ldr	r0, [pc, #48]	; (80031e4 <MX_GPIO_Init+0xe4>)
 80031b4:	f002 fb4c 	bl	8005850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|APHASE_Pin;
 80031b8:	f44f 7308 	mov.w	r3, #544	; 0x220
 80031bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031be:	2301      	movs	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	4805      	ldr	r0, [pc, #20]	; (80031e8 <MX_GPIO_Init+0xe8>)
 80031d2:	f002 fb3d 	bl	8005850 <HAL_GPIO_Init>

}
 80031d6:	bf00      	nop
 80031d8:	3728      	adds	r7, #40	; 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40020800 	.word	0x40020800
 80031e8:	40020000 	.word	0x40020000

080031ec <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80031f0:	4b12      	ldr	r3, [pc, #72]	; (800323c <MX_I2C1_Init+0x50>)
 80031f2:	4a13      	ldr	r2, [pc, #76]	; (8003240 <MX_I2C1_Init+0x54>)
 80031f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80031f6:	4b11      	ldr	r3, [pc, #68]	; (800323c <MX_I2C1_Init+0x50>)
 80031f8:	4a12      	ldr	r2, [pc, #72]	; (8003244 <MX_I2C1_Init+0x58>)
 80031fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031fc:	4b0f      	ldr	r3, [pc, #60]	; (800323c <MX_I2C1_Init+0x50>)
 80031fe:	2200      	movs	r2, #0
 8003200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003202:	4b0e      	ldr	r3, [pc, #56]	; (800323c <MX_I2C1_Init+0x50>)
 8003204:	2200      	movs	r2, #0
 8003206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003208:	4b0c      	ldr	r3, [pc, #48]	; (800323c <MX_I2C1_Init+0x50>)
 800320a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800320e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <MX_I2C1_Init+0x50>)
 8003212:	2200      	movs	r2, #0
 8003214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003216:	4b09      	ldr	r3, [pc, #36]	; (800323c <MX_I2C1_Init+0x50>)
 8003218:	2200      	movs	r2, #0
 800321a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800321c:	4b07      	ldr	r3, [pc, #28]	; (800323c <MX_I2C1_Init+0x50>)
 800321e:	2200      	movs	r2, #0
 8003220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <MX_I2C1_Init+0x50>)
 8003224:	2200      	movs	r2, #0
 8003226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003228:	4804      	ldr	r0, [pc, #16]	; (800323c <MX_I2C1_Init+0x50>)
 800322a:	f002 fcbf 	bl	8005bac <HAL_I2C_Init>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003234:	f000 f970 	bl	8003518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200006b4 	.word	0x200006b4
 8003240:	40005400 	.word	0x40005400
 8003244:	00061a80 	.word	0x00061a80

08003248 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800324c:	4b12      	ldr	r3, [pc, #72]	; (8003298 <MX_I2C2_Init+0x50>)
 800324e:	4a13      	ldr	r2, [pc, #76]	; (800329c <MX_I2C2_Init+0x54>)
 8003250:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003252:	4b11      	ldr	r3, [pc, #68]	; (8003298 <MX_I2C2_Init+0x50>)
 8003254:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <MX_I2C2_Init+0x58>)
 8003256:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <MX_I2C2_Init+0x50>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800325e:	4b0e      	ldr	r3, [pc, #56]	; (8003298 <MX_I2C2_Init+0x50>)
 8003260:	2200      	movs	r2, #0
 8003262:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <MX_I2C2_Init+0x50>)
 8003266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800326a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <MX_I2C2_Init+0x50>)
 800326e:	2200      	movs	r2, #0
 8003270:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <MX_I2C2_Init+0x50>)
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003278:	4b07      	ldr	r3, [pc, #28]	; (8003298 <MX_I2C2_Init+0x50>)
 800327a:	2200      	movs	r2, #0
 800327c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800327e:	4b06      	ldr	r3, [pc, #24]	; (8003298 <MX_I2C2_Init+0x50>)
 8003280:	2200      	movs	r2, #0
 8003282:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003284:	4804      	ldr	r0, [pc, #16]	; (8003298 <MX_I2C2_Init+0x50>)
 8003286:	f002 fc91 	bl	8005bac <HAL_I2C_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003290:	f000 f942 	bl	8003518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003294:	bf00      	nop
 8003296:	bd80      	pop	{r7, pc}
 8003298:	20000708 	.word	0x20000708
 800329c:	40005800 	.word	0x40005800
 80032a0:	00061a80 	.word	0x00061a80

080032a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b08c      	sub	sp, #48	; 0x30
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ac:	f107 031c 	add.w	r3, r7, #28
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a42      	ldr	r2, [pc, #264]	; (80033cc <HAL_I2C_MspInit+0x128>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d12d      	bne.n	8003322 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
 80032ca:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a40      	ldr	r2, [pc, #256]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 80032d0:	f043 0302 	orr.w	r3, r3, #2
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032e8:	2312      	movs	r3, #18
 80032ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f0:	2303      	movs	r3, #3
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80032f4:	2304      	movs	r3, #4
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f8:	f107 031c 	add.w	r3, r7, #28
 80032fc:	4619      	mov	r1, r3
 80032fe:	4835      	ldr	r0, [pc, #212]	; (80033d4 <HAL_I2C_MspInit+0x130>)
 8003300:	f002 faa6 	bl	8005850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 800330e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003312:	6413      	str	r3, [r2, #64]	; 0x40
 8003314:	4b2e      	ldr	r3, [pc, #184]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003320:	e050      	b.n	80033c4 <HAL_I2C_MspInit+0x120>
  else if(i2cHandle->Instance==I2C2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2c      	ldr	r2, [pc, #176]	; (80033d8 <HAL_I2C_MspInit+0x134>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d14b      	bne.n	80033c4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332c:	2300      	movs	r3, #0
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	4b27      	ldr	r3, [pc, #156]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	4a26      	ldr	r2, [pc, #152]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 8003336:	f043 0302 	orr.w	r3, r3, #2
 800333a:	6313      	str	r3, [r2, #48]	; 0x30
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 800334e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003350:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 8003352:	f043 0304 	orr.w	r3, r3, #4
 8003356:	6313      	str	r3, [r2, #48]	; 0x30
 8003358:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800336a:	2312      	movs	r3, #18
 800336c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003372:	2303      	movs	r3, #3
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003376:	2304      	movs	r3, #4
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800337a:	f107 031c 	add.w	r3, r7, #28
 800337e:	4619      	mov	r1, r3
 8003380:	4814      	ldr	r0, [pc, #80]	; (80033d4 <HAL_I2C_MspInit+0x130>)
 8003382:	f002 fa65 	bl	8005850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800338a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800338c:	2312      	movs	r3, #18
 800338e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003394:	2303      	movs	r3, #3
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003398:	2304      	movs	r3, #4
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800339c:	f107 031c 	add.w	r3, r7, #28
 80033a0:	4619      	mov	r1, r3
 80033a2:	480e      	ldr	r0, [pc, #56]	; (80033dc <HAL_I2C_MspInit+0x138>)
 80033a4:	f002 fa54 	bl	8005850 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	4b08      	ldr	r3, [pc, #32]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	4a07      	ldr	r2, [pc, #28]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 80033b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033b6:	6413      	str	r3, [r2, #64]	; 0x40
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_I2C_MspInit+0x12c>)
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
}
 80033c4:	bf00      	nop
 80033c6:	3730      	adds	r7, #48	; 0x30
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40005400 	.word	0x40005400
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40020400 	.word	0x40020400
 80033d8:	40005800 	.word	0x40005800
 80033dc:	40020800 	.word	0x40020800

080033e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033e4:	f002 f8ec 	bl	80055c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033e8:	f000 f814 	bl	8003414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033ec:	f7ff fe88 	bl	8003100 <MX_GPIO_Init>
  MX_I2C1_Init();
 80033f0:	f7ff fefc 	bl	80031ec <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80033f4:	f002 f848 	bl	8005488 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80033f8:	f001 fd30 	bl	8004e5c <MX_RTC_Init>
  MX_TIM8_Init();
 80033fc:	f001 ff48 	bl	8005290 <MX_TIM8_Init>
  MX_I2C2_Init();
 8003400:	f7ff ff22 	bl	8003248 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003404:	f007 fa06 	bl	800a814 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003408:	f7ff f8ce 	bl	80025a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800340c:	f007 fa26 	bl	800a85c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003410:	e7fe      	b.n	8003410 <main+0x30>
	...

08003414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b094      	sub	sp, #80	; 0x50
 8003418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341a:	f107 031c 	add.w	r3, r7, #28
 800341e:	2234      	movs	r2, #52	; 0x34
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f00c fa23 	bl	800f86e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003428:	f107 0308 	add.w	r3, r7, #8
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003438:	2300      	movs	r3, #0
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <SystemClock_Config+0xd8>)
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	4a2a      	ldr	r2, [pc, #168]	; (80034ec <SystemClock_Config+0xd8>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	; 0x40
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <SystemClock_Config+0xd8>)
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	607b      	str	r3, [r7, #4]
 8003452:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003454:	2300      	movs	r3, #0
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <SystemClock_Config+0xdc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003460:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <SystemClock_Config+0xdc>)
 8003462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003466:	6013      	str	r3, [r2, #0]
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <SystemClock_Config+0xdc>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003474:	230a      	movs	r3, #10
 8003476:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003478:	2301      	movs	r3, #1
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800347c:	2301      	movs	r3, #1
 800347e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003480:	2310      	movs	r3, #16
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003484:	2301      	movs	r3, #1
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003488:	2302      	movs	r3, #2
 800348a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800348c:	2300      	movs	r3, #0
 800348e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003490:	2308      	movs	r3, #8
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8003494:	2350      	movs	r3, #80	; 0x50
 8003496:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003498:	2302      	movs	r3, #2
 800349a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800349c:	2302      	movs	r3, #2
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80034a0:	2302      	movs	r3, #2
 80034a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034a4:	f107 031c 	add.w	r3, r7, #28
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 fe59 	bl	8008160 <HAL_RCC_OscConfig>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80034b4:	f000 f830 	bl	8003518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034b8:	230f      	movs	r3, #15
 80034ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034bc:	2302      	movs	r3, #2
 80034be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80034c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034ca:	2300      	movs	r3, #0
 80034cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80034ce:	f107 0308 	add.w	r3, r7, #8
 80034d2:	2102      	movs	r1, #2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f003 ff9d 	bl	8007414 <HAL_RCC_ClockConfig>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80034e0:	f000 f81a 	bl	8003518 <Error_Handler>
  }
}
 80034e4:	bf00      	nop
 80034e6:	3750      	adds	r7, #80	; 0x50
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40007000 	.word	0x40007000

080034f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003506:	f002 f87d 	bl	8005604 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40014400 	.word	0x40014400

08003518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800351c:	b672      	cpsid	i
}
 800351e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003520:	e7fe      	b.n	8003520 <Error_Handler+0x8>

08003522 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
 800352e:	4603      	mov	r3, r0
 8003530:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d204      	bcs.n	8003544 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	701a      	strb	r2, [r3, #0]
  }
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4603      	mov	r3, r0
 800355e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4603      	mov	r3, r0
 800357a:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <_out_char+0x1e>
    _putchar(character);
 8003582:	7bfb      	ldrb	r3, [r7, #15]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fd9b 	bl	80030c0 <_putchar>
  }
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e002      	b.n	80035a8 <_strnlen_s+0x16>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3301      	adds	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d004      	beq.n	80035ba <_strnlen_s+0x28>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	1e5a      	subs	r2, r3, #1
 80035b4:	603a      	str	r2, [r7, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f3      	bne.n	80035a2 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1ad3      	subs	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3714      	adds	r7, #20
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	2b2f      	cmp	r3, #47	; 0x2f
 80035da:	d904      	bls.n	80035e6 <_is_digit+0x1a>
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	2b39      	cmp	r3, #57	; 0x39
 80035e0:	d801      	bhi.n	80035e6 <_is_digit+0x1a>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <_is_digit+0x1c>
 80035e6:	2300      	movs	r3, #0
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	b2db      	uxtb	r3, r3
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003606:	e00e      	b.n	8003626 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	4618      	mov	r0, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	1c59      	adds	r1, r3, #1
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	4403      	add	r3, r0
 8003622:	3b30      	subs	r3, #48	; 0x30
 8003624:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ffcd 	bl	80035cc <_is_digit>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e7      	bne.n	8003608 <_atoi+0xe>
  }
  return i;
 8003638:	68fb      	ldr	r3, [r7, #12]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8003642:	b590      	push	{r4, r7, lr}
 8003644:	b087      	sub	sp, #28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d125      	bne.n	80036aa <_out_rev+0x68>
 800365e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d120      	bne.n	80036aa <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	e00a      	b.n	8003684 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	1c53      	adds	r3, r2, #1
 8003672:	607b      	str	r3, [r7, #4]
 8003674:	68fc      	ldr	r4, [r7, #12]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	68b9      	ldr	r1, [r7, #8]
 800367a:	2020      	movs	r0, #32
 800367c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	429a      	cmp	r2, r3
 800368a:	d3f0      	bcc.n	800366e <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800368c:	e00d      	b.n	80036aa <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	3b01      	subs	r3, #1
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003694:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	4413      	add	r3, r2
 800369a:	7818      	ldrb	r0, [r3, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	1c53      	adds	r3, r2, #1
 80036a0:	607b      	str	r3, [r7, #4]
 80036a2:	68fc      	ldr	r4, [r7, #12]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68b9      	ldr	r1, [r7, #8]
 80036a8:	47a0      	blx	r4
  while (len) {
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ee      	bne.n	800368e <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80036b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80036ba:	e007      	b.n	80036cc <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	1c53      	adds	r3, r2, #1
 80036c0:	607b      	str	r3, [r7, #4]
 80036c2:	68fc      	ldr	r4, [r7, #12]
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	68b9      	ldr	r1, [r7, #8]
 80036c8:	2020      	movs	r0, #32
 80036ca:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d8f1      	bhi.n	80036bc <_out_rev+0x7a>
    }
  }

  return idx;
 80036d8:	687b      	ldr	r3, [r7, #4]
}
 80036da:	4618      	mov	r0, r3
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd90      	pop	{r4, r7, pc}

080036e2 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b088      	sub	sp, #32
 80036e6:	af04      	add	r7, sp, #16
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d136      	bne.n	8003768 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d018      	beq.n	8003732 <_ntoa_format+0x50>
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d013      	beq.n	8003732 <_ntoa_format+0x50>
 800370a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <_ntoa_format+0x3a>
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	f003 030c 	and.w	r3, r3, #12
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <_ntoa_format+0x50>
      width--;
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	3b01      	subs	r3, #1
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003722:	e006      	b.n	8003732 <_ntoa_format+0x50>
      buf[len++] = '0';
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	61fa      	str	r2, [r7, #28]
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4413      	add	r3, r2
 800372e:	2230      	movs	r2, #48	; 0x30
 8003730:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003732:	69fa      	ldr	r2, [r7, #28]
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	429a      	cmp	r2, r3
 8003738:	d20a      	bcs.n	8003750 <_ntoa_format+0x6e>
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	2b1f      	cmp	r3, #31
 800373e:	d9f1      	bls.n	8003724 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003740:	e006      	b.n	8003750 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	1c5a      	adds	r2, r3, #1
 8003746:	61fa      	str	r2, [r7, #28]
 8003748:	69ba      	ldr	r2, [r7, #24]
 800374a:	4413      	add	r3, r2
 800374c:	2230      	movs	r2, #48	; 0x30
 800374e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d006      	beq.n	8003768 <_ntoa_format+0x86>
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	429a      	cmp	r2, r3
 8003760:	d202      	bcs.n	8003768 <_ntoa_format+0x86>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	2b1f      	cmp	r3, #31
 8003766:	d9ec      	bls.n	8003742 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d058      	beq.n	8003824 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8003772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <_ntoa_format+0xc8>
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d013      	beq.n	80037aa <_ntoa_format+0xc8>
 8003782:	69fa      	ldr	r2, [r7, #28]
 8003784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003786:	429a      	cmp	r2, r3
 8003788:	d003      	beq.n	8003792 <_ntoa_format+0xb0>
 800378a:	69fa      	ldr	r2, [r7, #28]
 800378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378e:	429a      	cmp	r2, r3
 8003790:	d10b      	bne.n	80037aa <_ntoa_format+0xc8>
      len--;
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	3b01      	subs	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d005      	beq.n	80037aa <_ntoa_format+0xc8>
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d102      	bne.n	80037aa <_ntoa_format+0xc8>
        len--;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	2b10      	cmp	r3, #16
 80037ae:	d10f      	bne.n	80037d0 <_ntoa_format+0xee>
 80037b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10a      	bne.n	80037d0 <_ntoa_format+0xee>
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2b1f      	cmp	r3, #31
 80037be:	d807      	bhi.n	80037d0 <_ntoa_format+0xee>
      buf[len++] = 'x';
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	61fa      	str	r2, [r7, #28]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4413      	add	r3, r2
 80037ca:	2278      	movs	r2, #120	; 0x78
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	e01f      	b.n	8003810 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80037d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d10f      	bne.n	80037f6 <_ntoa_format+0x114>
 80037d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <_ntoa_format+0x114>
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b1f      	cmp	r3, #31
 80037e4:	d807      	bhi.n	80037f6 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	61fa      	str	r2, [r7, #28]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4413      	add	r3, r2
 80037f0:	2258      	movs	r2, #88	; 0x58
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e00c      	b.n	8003810 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d109      	bne.n	8003810 <_ntoa_format+0x12e>
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	2b1f      	cmp	r3, #31
 8003800:	d806      	bhi.n	8003810 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	61fa      	str	r2, [r7, #28]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4413      	add	r3, r2
 800380c:	2262      	movs	r2, #98	; 0x62
 800380e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	2b1f      	cmp	r3, #31
 8003814:	d806      	bhi.n	8003824 <_ntoa_format+0x142>
      buf[len++] = '0';
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	61fa      	str	r2, [r7, #28]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4413      	add	r3, r2
 8003820:	2230      	movs	r2, #48	; 0x30
 8003822:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b1f      	cmp	r3, #31
 8003828:	d824      	bhi.n	8003874 <_ntoa_format+0x192>
    if (negative) {
 800382a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d007      	beq.n	8003842 <_ntoa_format+0x160>
      buf[len++] = '-';
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	61fa      	str	r2, [r7, #28]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4413      	add	r3, r2
 800383c:	222d      	movs	r2, #45	; 0x2d
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	e018      	b.n	8003874 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	61fa      	str	r2, [r7, #28]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4413      	add	r3, r2
 8003856:	222b      	movs	r2, #43	; 0x2b
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e00b      	b.n	8003874 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d006      	beq.n	8003874 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	61fa      	str	r2, [r7, #28]
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4413      	add	r3, r2
 8003870:	2220      	movs	r2, #32
 8003872:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003876:	9303      	str	r3, [sp, #12]
 8003878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387a:	9302      	str	r3, [sp, #8]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f7ff fed9 	bl	8003642 <_out_rev>
 8003890:	4603      	mov	r3, r0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b096      	sub	sp, #88	; 0x58
 800389e:	af08      	add	r7, sp, #32
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80038ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 80038b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b4:	f023 0310 	bic.w	r3, r3, #16
 80038b8:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80038ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <_ntoa_long+0x30>
 80038c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d032      	beq.n	8003930 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 80038ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80038d2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038d4:	fb01 f202 	mul.w	r2, r1, r2
 80038d8:	1a9b      	subs	r3, r3, r2
 80038da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80038de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038e2:	2b09      	cmp	r3, #9
 80038e4:	d804      	bhi.n	80038f0 <_ntoa_long+0x56>
 80038e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038ea:	3330      	adds	r3, #48	; 0x30
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	e00d      	b.n	800390c <_ntoa_long+0x72>
 80038f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <_ntoa_long+0x64>
 80038fa:	2241      	movs	r2, #65	; 0x41
 80038fc:	e000      	b.n	8003900 <_ntoa_long+0x66>
 80038fe:	2261      	movs	r2, #97	; 0x61
 8003900:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003904:	4413      	add	r3, r2
 8003906:	b2db      	uxtb	r3, r3
 8003908:	3b0a      	subs	r3, #10
 800390a:	b2da      	uxtb	r2, r3
 800390c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800390e:	1c59      	adds	r1, r3, #1
 8003910:	6379      	str	r1, [r7, #52]	; 0x34
 8003912:	3338      	adds	r3, #56	; 0x38
 8003914:	443b      	add	r3, r7
 8003916:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800391a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800391c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8003924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <_ntoa_long+0x96>
 800392a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392c:	2b1f      	cmp	r3, #31
 800392e:	d9cc      	bls.n	80038ca <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003932:	9306      	str	r3, [sp, #24]
 8003934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003936:	9305      	str	r3, [sp, #20]
 8003938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800393a:	9304      	str	r3, [sp, #16]
 800393c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800393e:	9303      	str	r3, [sp, #12]
 8003940:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003944:	9302      	str	r3, [sp, #8]
 8003946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003948:	9301      	str	r3, [sp, #4]
 800394a:	f107 0310 	add.w	r3, r7, #16
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68b9      	ldr	r1, [r7, #8]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff fec3 	bl	80036e2 <_ntoa_format>
 800395c:	4603      	mov	r3, r0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3738      	adds	r7, #56	; 0x38
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b096      	sub	sp, #88	; 0x58
 800396a:	af08      	add	r7, sp, #32
 800396c:	60f8      	str	r0, [r7, #12]
 800396e:	60b9      	str	r1, [r7, #8]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003978:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800397c:	4313      	orrs	r3, r2
 800397e:	d103      	bne.n	8003988 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8003980:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003982:	f023 0310 	bic.w	r3, r3, #16
 8003986:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800398a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <_ntoa_long_long+0x34>
 8003992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003996:	4313      	orrs	r3, r2
 8003998:	d037      	beq.n	8003a0a <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 800399a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800399e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039a2:	f7fd f991 	bl	8000cc8 <__aeabi_uldivmod>
 80039a6:	4613      	mov	r3, r2
 80039a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80039ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039b0:	2b09      	cmp	r3, #9
 80039b2:	d804      	bhi.n	80039be <_ntoa_long_long+0x58>
 80039b4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039b8:	3330      	adds	r3, #48	; 0x30
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	e00d      	b.n	80039da <_ntoa_long_long+0x74>
 80039be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <_ntoa_long_long+0x66>
 80039c8:	2241      	movs	r2, #65	; 0x41
 80039ca:	e000      	b.n	80039ce <_ntoa_long_long+0x68>
 80039cc:	2261      	movs	r2, #97	; 0x61
 80039ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039d2:	4413      	add	r3, r2
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	3b0a      	subs	r3, #10
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039dc:	1c59      	adds	r1, r3, #1
 80039de:	6379      	str	r1, [r7, #52]	; 0x34
 80039e0:	3338      	adds	r3, #56	; 0x38
 80039e2:	443b      	add	r3, r7
 80039e4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80039e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80039f0:	f7fd f96a 	bl	8000cc8 <__aeabi_uldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80039fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a00:	4313      	orrs	r3, r2
 8003a02:	d002      	beq.n	8003a0a <_ntoa_long_long+0xa4>
 8003a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a06:	2b1f      	cmp	r3, #31
 8003a08:	d9c7      	bls.n	800399a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8003a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a0e:	9206      	str	r2, [sp, #24]
 8003a10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a12:	9205      	str	r2, [sp, #20]
 8003a14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a16:	9204      	str	r2, [sp, #16]
 8003a18:	9303      	str	r3, [sp, #12]
 8003a1a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8003a1e:	9302      	str	r3, [sp, #8]
 8003a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	f107 0310 	add.w	r3, r7, #16
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff fe56 	bl	80036e2 <_ntoa_format>
 8003a36:	4603      	mov	r3, r0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3738      	adds	r7, #56	; 0x38
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003a40:	b590      	push	{r4, r7, lr}
 8003a42:	b09d      	sub	sp, #116	; 0x74
 8003a44:	af04      	add	r7, sp, #16
 8003a46:	6178      	str	r0, [r7, #20]
 8003a48:	6139      	str	r1, [r7, #16]
 8003a4a:	60fa      	str	r2, [r7, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]
 8003a4e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003a62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a6a:	f7fd f84d 	bl	8000b08 <__aeabi_dcmpeq>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10f      	bne.n	8003a94 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a76:	9303      	str	r3, [sp, #12]
 8003a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7a:	9302      	str	r3, [sp, #8]
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	9301      	str	r3, [sp, #4]
 8003a80:	4ba7      	ldr	r3, [pc, #668]	; (8003d20 <_ftoa+0x2e0>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	6939      	ldr	r1, [r7, #16]
 8003a8a:	6978      	ldr	r0, [r7, #20]
 8003a8c:	f7ff fdd9 	bl	8003642 <_out_rev>
 8003a90:	4603      	mov	r3, r0
 8003a92:	e222      	b.n	8003eda <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003a94:	f04f 32ff 	mov.w	r2, #4294967295
 8003a98:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003aa0:	f7fd f83c 	bl	8000b1c <__aeabi_dcmplt>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00f      	beq.n	8003aca <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003aaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aac:	9303      	str	r3, [sp, #12]
 8003aae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab0:	9302      	str	r3, [sp, #8]
 8003ab2:	2304      	movs	r3, #4
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	4b9b      	ldr	r3, [pc, #620]	; (8003d24 <_ftoa+0x2e4>)
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	6939      	ldr	r1, [r7, #16]
 8003ac0:	6978      	ldr	r0, [r7, #20]
 8003ac2:	f7ff fdbe 	bl	8003642 <_out_rev>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	e207      	b.n	8003eda <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003aca:	f04f 32ff 	mov.w	r2, #4294967295
 8003ace:	4b96      	ldr	r3, [pc, #600]	; (8003d28 <_ftoa+0x2e8>)
 8003ad0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ad4:	f7fd f840 	bl	8000b58 <__aeabi_dcmpgt>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01d      	beq.n	8003b1a <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003ade:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <_ftoa+0xac>
 8003ae8:	4b90      	ldr	r3, [pc, #576]	; (8003d2c <_ftoa+0x2ec>)
 8003aea:	e000      	b.n	8003aee <_ftoa+0xae>
 8003aec:	4b90      	ldr	r3, [pc, #576]	; (8003d30 <_ftoa+0x2f0>)
 8003aee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003af0:	f002 0204 	and.w	r2, r2, #4
 8003af4:	2a00      	cmp	r2, #0
 8003af6:	d001      	beq.n	8003afc <_ftoa+0xbc>
 8003af8:	2204      	movs	r2, #4
 8003afa:	e000      	b.n	8003afe <_ftoa+0xbe>
 8003afc:	2203      	movs	r2, #3
 8003afe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003b00:	9103      	str	r1, [sp, #12]
 8003b02:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003b04:	9102      	str	r1, [sp, #8]
 8003b06:	9201      	str	r2, [sp, #4]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	6939      	ldr	r1, [r7, #16]
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f7ff fd96 	bl	8003642 <_out_rev>
 8003b16:	4603      	mov	r3, r0
 8003b18:	e1df      	b.n	8003eda <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003b1a:	a37d      	add	r3, pc, #500	; (adr r3, 8003d10 <_ftoa+0x2d0>)
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b24:	f7fd f818 	bl	8000b58 <__aeabi_dcmpgt>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <_ftoa+0x102>
 8003b2e:	a37a      	add	r3, pc, #488	; (adr r3, 8003d18 <_ftoa+0x2d8>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b38:	f7fc fff0 	bl	8000b1c <__aeabi_dcmplt>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00f      	beq.n	8003b62 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b44:	9302      	str	r3, [sp, #8]
 8003b46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b48:	9301      	str	r3, [sp, #4]
 8003b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	ed97 0b00 	vldr	d0, [r7]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	6939      	ldr	r1, [r7, #16]
 8003b58:	6978      	ldr	r0, [r7, #20]
 8003b5a:	f000 f9c9 	bl	8003ef0 <_etoa>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	e1bb      	b.n	8003eda <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b74:	f7fc ffd2 	bl	8000b1c <__aeabi_dcmplt>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00e      	beq.n	8003b9c <_ftoa+0x15c>
    negative = true;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8003b84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b88:	f04f 0000 	mov.w	r0, #0
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	f7fc fb9a 	bl	80002c8 <__aeabi_dsub>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10d      	bne.n	8003bc2 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003ba6:	2306      	movs	r3, #6
 8003ba8:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003baa:	e00a      	b.n	8003bc2 <_ftoa+0x182>
    buf[len++] = '0';
 8003bac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003bb2:	3360      	adds	r3, #96	; 0x60
 8003bb4:	443b      	add	r3, r7
 8003bb6:	2230      	movs	r2, #48	; 0x30
 8003bb8:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003bc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc4:	2b1f      	cmp	r3, #31
 8003bc6:	d802      	bhi.n	8003bce <_ftoa+0x18e>
 8003bc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bca:	2b09      	cmp	r3, #9
 8003bcc:	d8ee      	bhi.n	8003bac <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003bce:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bd2:	f7fc ffe1 	bl	8000b98 <__aeabi_d2iz>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8003bda:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003bdc:	f7fc fcc2 	bl	8000564 <__aeabi_i2d>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003be8:	f7fc fb6e 	bl	80002c8 <__aeabi_dsub>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4a4f      	ldr	r2, [pc, #316]	; (8003d34 <_ftoa+0x2f4>)
 8003bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4413      	add	r3, r2
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	f7fc fd1a 	bl	8000638 <__aeabi_dmul>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8003c0c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003c10:	f7fc ffea 	bl	8000be8 <__aeabi_d2uiz>
 8003c14:	4603      	mov	r3, r0
 8003c16:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8003c18:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003c1a:	f7fc fc93 	bl	8000544 <__aeabi_ui2d>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003c26:	f7fc fb4f 	bl	80002c8 <__aeabi_dsub>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	4b40      	ldr	r3, [pc, #256]	; (8003d38 <_ftoa+0x2f8>)
 8003c38:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c3c:	f7fc ff8c 	bl	8000b58 <__aeabi_dcmpgt>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d016      	beq.n	8003c74 <_ftoa+0x234>
    ++frac;
 8003c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c48:	3301      	adds	r3, #1
 8003c4a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003c4c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003c4e:	f7fc fc79 	bl	8000544 <__aeabi_ui2d>
 8003c52:	4a38      	ldr	r2, [pc, #224]	; (8003d34 <_ftoa+0x2f4>)
 8003c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	f7fc ff71 	bl	8000b44 <__aeabi_dcmpge>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01a      	beq.n	8003c9e <_ftoa+0x25e>
      frac = 0;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6e:	3301      	adds	r3, #1
 8003c70:	657b      	str	r3, [r7, #84]	; 0x54
 8003c72:	e014      	b.n	8003c9e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <_ftoa+0x2f8>)
 8003c7a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c7e:	f7fc ff4d 	bl	8000b1c <__aeabi_dcmplt>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d004      	beq.n	8003c98 <_ftoa+0x258>
 8003c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8003c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d14b      	bne.n	8003d3c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8003ca4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003ca6:	f7fc fc5d 	bl	8000564 <__aeabi_i2d>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003cb2:	f7fc fb09 	bl	80002c8 <__aeabi_dsub>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	461c      	mov	r4, r3
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <_ftoa+0x2f8>)
 8003cc8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003ccc:	f7fc ff26 	bl	8000b1c <__aeabi_dcmplt>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <_ftoa+0x29a>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	461c      	mov	r4, r3
 8003cda:	b2e3      	uxtb	r3, r4
 8003cdc:	f083 0301 	eor.w	r3, r3, #1
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <_ftoa+0x2ba>
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <_ftoa+0x2f8>)
 8003cec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003cf0:	f7fc ff32 	bl	8000b58 <__aeabi_dcmpgt>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d064      	beq.n	8003dc4 <_ftoa+0x384>
 8003cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8081 	beq.w	8003e08 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d08:	3301      	adds	r3, #1
 8003d0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003d0c:	e07c      	b.n	8003e08 <_ftoa+0x3c8>
 8003d0e:	bf00      	nop
 8003d10:	00000000 	.word	0x00000000
 8003d14:	41cdcd65 	.word	0x41cdcd65
 8003d18:	00000000 	.word	0x00000000
 8003d1c:	c1cdcd65 	.word	0xc1cdcd65
 8003d20:	08011a08 	.word	0x08011a08
 8003d24:	08011a0c 	.word	0x08011a0c
 8003d28:	7fefffff 	.word	0x7fefffff
 8003d2c:	08011a14 	.word	0x08011a14
 8003d30:	08011a1c 	.word	0x08011a1c
 8003d34:	08011f18 	.word	0x08011f18
 8003d38:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8003d3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d40:	e01f      	b.n	8003d82 <_ftoa+0x342>
      --count;
 8003d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d44:	3b01      	subs	r3, #1
 8003d46:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003d48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d4a:	4b66      	ldr	r3, [pc, #408]	; (8003ee4 <_ftoa+0x4a4>)
 8003d4c:	fba3 2301 	umull	r2, r3, r3, r1
 8003d50:	08da      	lsrs	r2, r3, #3
 8003d52:	4613      	mov	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4413      	add	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	1aca      	subs	r2, r1, r3
 8003d5c:	b2d2      	uxtb	r2, r2
 8003d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003d64:	3230      	adds	r2, #48	; 0x30
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	3360      	adds	r3, #96	; 0x60
 8003d6a:	443b      	add	r3, r7
 8003d6c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d72:	4a5c      	ldr	r2, [pc, #368]	; (8003ee4 <_ftoa+0x4a4>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	08db      	lsrs	r3, r3, #3
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d84:	2b1f      	cmp	r3, #31
 8003d86:	d9dc      	bls.n	8003d42 <_ftoa+0x302>
 8003d88:	e009      	b.n	8003d9e <_ftoa+0x35e>
        break;
 8003d8a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003d8c:	e007      	b.n	8003d9e <_ftoa+0x35e>
      buf[len++] = '0';
 8003d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d94:	3360      	adds	r3, #96	; 0x60
 8003d96:	443b      	add	r3, r7
 8003d98:	2230      	movs	r2, #48	; 0x30
 8003d9a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003da0:	2b1f      	cmp	r3, #31
 8003da2:	d804      	bhi.n	8003dae <_ftoa+0x36e>
 8003da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da6:	1e5a      	subs	r2, r3, #1
 8003da8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ef      	bne.n	8003d8e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db0:	2b1f      	cmp	r3, #31
 8003db2:	d829      	bhi.n	8003e08 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8003db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003dba:	3360      	adds	r3, #96	; 0x60
 8003dbc:	443b      	add	r3, r7
 8003dbe:	222e      	movs	r2, #46	; 0x2e
 8003dc0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003dc4:	e020      	b.n	8003e08 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8003dc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dc8:	4b47      	ldr	r3, [pc, #284]	; (8003ee8 <_ftoa+0x4a8>)
 8003dca:	fb83 1302 	smull	r1, r3, r3, r2
 8003dce:	1099      	asrs	r1, r3, #2
 8003dd0:	17d3      	asrs	r3, r2, #31
 8003dd2:	1ac9      	subs	r1, r1, r3
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	1ad1      	subs	r1, r2, r3
 8003dde:	b2ca      	uxtb	r2, r1
 8003de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003de2:	1c59      	adds	r1, r3, #1
 8003de4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003de6:	3230      	adds	r2, #48	; 0x30
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	3360      	adds	r3, #96	; 0x60
 8003dec:	443b      	add	r3, r7
 8003dee:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df4:	4a3c      	ldr	r2, [pc, #240]	; (8003ee8 <_ftoa+0x4a8>)
 8003df6:	fb82 1203 	smull	r1, r2, r2, r3
 8003dfa:	1092      	asrs	r2, r2, #2
 8003dfc:	17db      	asrs	r3, r3, #31
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	657b      	str	r3, [r7, #84]	; 0x54
 8003e02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0a:	2b1f      	cmp	r3, #31
 8003e0c:	d9db      	bls.n	8003dc6 <_ftoa+0x386>
 8003e0e:	e000      	b.n	8003e12 <_ftoa+0x3d2>
      break;
 8003e10:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e14:	f003 0302 	and.w	r3, r3, #2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d123      	bne.n	8003e64 <_ftoa+0x424>
 8003e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d01e      	beq.n	8003e64 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d014      	beq.n	8003e56 <_ftoa+0x416>
 8003e2c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <_ftoa+0x3fe>
 8003e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <_ftoa+0x416>
      width--;
 8003e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e40:	3b01      	subs	r3, #1
 8003e42:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003e44:	e007      	b.n	8003e56 <_ftoa+0x416>
      buf[len++] = '0';
 8003e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e4c:	3360      	adds	r3, #96	; 0x60
 8003e4e:	443b      	add	r3, r7
 8003e50:	2230      	movs	r2, #48	; 0x30
 8003e52:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003e56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d202      	bcs.n	8003e64 <_ftoa+0x424>
 8003e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e60:	2b1f      	cmp	r3, #31
 8003e62:	d9f0      	bls.n	8003e46 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003e64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e66:	2b1f      	cmp	r3, #31
 8003e68:	d827      	bhi.n	8003eba <_ftoa+0x47a>
    if (negative) {
 8003e6a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <_ftoa+0x444>
      buf[len++] = '-';
 8003e72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e78:	3360      	adds	r3, #96	; 0x60
 8003e7a:	443b      	add	r3, r7
 8003e7c:	222d      	movs	r2, #45	; 0x2d
 8003e7e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003e82:	e01a      	b.n	8003eba <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8003e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e94:	3360      	adds	r3, #96	; 0x60
 8003e96:	443b      	add	r3, r7
 8003e98:	222b      	movs	r2, #43	; 0x2b
 8003e9a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003e9e:	e00c      	b.n	8003eba <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003ea0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <_ftoa+0x47a>
      buf[len++] = ' ';
 8003eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003eb0:	3360      	adds	r3, #96	; 0x60
 8003eb2:	443b      	add	r3, r7
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003eba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ebc:	9303      	str	r3, [sp, #12]
 8003ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec0:	9302      	str	r3, [sp, #8]
 8003ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ec4:	9301      	str	r3, [sp, #4]
 8003ec6:	f107 0318 	add.w	r3, r7, #24
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	6939      	ldr	r1, [r7, #16]
 8003ed2:	6978      	ldr	r0, [r7, #20]
 8003ed4:	f7ff fbb5 	bl	8003642 <_out_rev>
 8003ed8:	4603      	mov	r3, r0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3764      	adds	r7, #100	; 0x64
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd90      	pop	{r4, r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	cccccccd 	.word	0xcccccccd
 8003ee8:	66666667 	.word	0x66666667
 8003eec:	00000000 	.word	0x00000000

08003ef0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	b09f      	sub	sp, #124	; 0x7c
 8003ef6:	af06      	add	r7, sp, #24
 8003ef8:	6278      	str	r0, [r7, #36]	; 0x24
 8003efa:	6239      	str	r1, [r7, #32]
 8003efc:	61fa      	str	r2, [r7, #28]
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003f04:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f0c:	f7fc fdfc 	bl	8000b08 <__aeabi_dcmpeq>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d014      	beq.n	8003f40 <_etoa+0x50>
 8003f16:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1a:	4bc1      	ldr	r3, [pc, #772]	; (8004220 <_etoa+0x330>)
 8003f1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f20:	f7fc fe1a 	bl	8000b58 <__aeabi_dcmpgt>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <_etoa+0x50>
 8003f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003f32:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f36:	f7fc fdf1 	bl	8000b1c <__aeabi_dcmplt>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d012      	beq.n	8003f66 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003f40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f44:	9302      	str	r3, [sp, #8]
 8003f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	ed97 0b04 	vldr	d0, [r7, #16]
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	6a39      	ldr	r1, [r7, #32]
 8003f5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f5e:	f7ff fd6f 	bl	8003a40 <_ftoa>
 8003f62:	4603      	mov	r3, r0
 8003f64:	e23f      	b.n	80043e6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8003f66:	2301      	movs	r3, #1
 8003f68:	461e      	mov	r6, r3
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f76:	f7fc fdd1 	bl	8000b1c <__aeabi_dcmplt>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <_etoa+0x94>
 8003f80:	2300      	movs	r3, #0
 8003f82:	461e      	mov	r6, r3
 8003f84:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8003f88:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <_etoa+0xb4>
    value = -value;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	ed97 7b00 	vldr	d7, [r7]
 8003fa0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003fa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d102      	bne.n	8003fb6 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003fb0:	2306      	movs	r3, #6
 8003fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003fb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003fbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003fc2:	f04f 0200 	mov.w	r2, #0
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	0d0a      	lsrs	r2, r1, #20
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4613      	mov	r3, r2
 8003fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fd4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003fda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fde:	4690      	mov	r8, r2
 8003fe0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003fe4:	4644      	mov	r4, r8
 8003fe6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003fea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003fee:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003ff2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003ff4:	f7fc fab6 	bl	8000564 <__aeabi_i2d>
 8003ff8:	a37d      	add	r3, pc, #500	; (adr r3, 80041f0 <_etoa+0x300>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc fb1b 	bl	8000638 <__aeabi_dmul>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4610      	mov	r0, r2
 8004008:	4619      	mov	r1, r3
 800400a:	a37b      	add	r3, pc, #492	; (adr r3, 80041f8 <_etoa+0x308>)
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f7fc f95c 	bl	80002cc <__adddf3>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4614      	mov	r4, r2
 800401a:	461d      	mov	r5, r3
 800401c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	4b7f      	ldr	r3, [pc, #508]	; (8004224 <_etoa+0x334>)
 8004026:	f7fc f94f 	bl	80002c8 <__aeabi_dsub>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4610      	mov	r0, r2
 8004030:	4619      	mov	r1, r3
 8004032:	a373      	add	r3, pc, #460	; (adr r3, 8004200 <_etoa+0x310>)
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f7fc fafe 	bl	8000638 <__aeabi_dmul>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4620      	mov	r0, r4
 8004042:	4629      	mov	r1, r5
 8004044:	f7fc f942 	bl	80002cc <__adddf3>
 8004048:	4602      	mov	r2, r0
 800404a:	460b      	mov	r3, r1
 800404c:	4610      	mov	r0, r2
 800404e:	4619      	mov	r1, r3
 8004050:	f7fc fda2 	bl	8000b98 <__aeabi_d2iz>
 8004054:	4603      	mov	r3, r0
 8004056:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004058:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800405a:	f7fc fa83 	bl	8000564 <__aeabi_i2d>
 800405e:	a36a      	add	r3, pc, #424	; (adr r3, 8004208 <_etoa+0x318>)
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f7fc fae8 	bl	8000638 <__aeabi_dmul>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4610      	mov	r0, r2
 800406e:	4619      	mov	r1, r3
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	4b6c      	ldr	r3, [pc, #432]	; (8004228 <_etoa+0x338>)
 8004076:	f7fc f929 	bl	80002cc <__adddf3>
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	4610      	mov	r0, r2
 8004080:	4619      	mov	r1, r3
 8004082:	f7fc fd89 	bl	8000b98 <__aeabi_d2iz>
 8004086:	4603      	mov	r3, r0
 8004088:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800408a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800408c:	f7fc fa6a 	bl	8000564 <__aeabi_i2d>
 8004090:	a35f      	add	r3, pc, #380	; (adr r3, 8004210 <_etoa+0x320>)
 8004092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004096:	f7fc facf 	bl	8000638 <__aeabi_dmul>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4614      	mov	r4, r2
 80040a0:	461d      	mov	r5, r3
 80040a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80040a4:	f7fc fa5e 	bl	8000564 <__aeabi_i2d>
 80040a8:	a35b      	add	r3, pc, #364	; (adr r3, 8004218 <_etoa+0x328>)
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f7fc fac3 	bl	8000638 <__aeabi_dmul>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7fc f905 	bl	80002c8 <__aeabi_dsub>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 80040c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80040ce:	f7fc fab3 	bl	8000638 <__aeabi_dmul>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80040da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040dc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80040e0:	17da      	asrs	r2, r3, #31
 80040e2:	469a      	mov	sl, r3
 80040e4:	4693      	mov	fp, r2
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	f04f 0300 	mov.w	r3, #0
 80040ee:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80040f2:	2200      	movs	r2, #0
 80040f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80040f8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80040fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004100:	4602      	mov	r2, r0
 8004102:	460b      	mov	r3, r1
 8004104:	f7fc f8e2 	bl	80002cc <__adddf3>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4690      	mov	r8, r2
 800410e:	4699      	mov	r9, r3
 8004110:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004114:	f04f 0000 	mov.w	r0, #0
 8004118:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800411c:	f7fc f8d4 	bl	80002c8 <__aeabi_dsub>
 8004120:	4602      	mov	r2, r0
 8004122:	460b      	mov	r3, r1
 8004124:	4692      	mov	sl, r2
 8004126:	469b      	mov	fp, r3
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	4b3f      	ldr	r3, [pc, #252]	; (800422c <_etoa+0x33c>)
 800412e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004132:	f7fc fbab 	bl	800088c <__aeabi_ddiv>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	4610      	mov	r0, r2
 800413c:	4619      	mov	r1, r3
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	4b3b      	ldr	r3, [pc, #236]	; (8004230 <_etoa+0x340>)
 8004144:	f7fc f8c2 	bl	80002cc <__adddf3>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004150:	f7fc fb9c 	bl	800088c <__aeabi_ddiv>
 8004154:	4602      	mov	r2, r0
 8004156:	460b      	mov	r3, r1
 8004158:	4610      	mov	r0, r2
 800415a:	4619      	mov	r1, r3
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	4b34      	ldr	r3, [pc, #208]	; (8004234 <_etoa+0x344>)
 8004162:	f7fc f8b3 	bl	80002cc <__adddf3>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800416e:	f7fc fb8d 	bl	800088c <__aeabi_ddiv>
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4650      	mov	r0, sl
 8004178:	4659      	mov	r1, fp
 800417a:	f7fc f8a7 	bl	80002cc <__adddf3>
 800417e:	4602      	mov	r2, r0
 8004180:	460b      	mov	r3, r1
 8004182:	4640      	mov	r0, r8
 8004184:	4649      	mov	r1, r9
 8004186:	f7fc fb81 	bl	800088c <__aeabi_ddiv>
 800418a:	4602      	mov	r2, r0
 800418c:	460b      	mov	r3, r1
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	4b28      	ldr	r3, [pc, #160]	; (8004238 <_etoa+0x348>)
 8004198:	f7fc f898 	bl	80002cc <__adddf3>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4620      	mov	r0, r4
 80041a2:	4629      	mov	r1, r5
 80041a4:	f7fc fa48 	bl	8000638 <__aeabi_dmul>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80041b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041b8:	f7fc fcb0 	bl	8000b1c <__aeabi_dcmplt>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <_etoa+0x2ee>
    expval--;
 80041c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c4:	3b01      	subs	r3, #1
 80041c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 80041c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	4b17      	ldr	r3, [pc, #92]	; (8004230 <_etoa+0x340>)
 80041d2:	f7fc fb5b 	bl	800088c <__aeabi_ddiv>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80041de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e0:	2b63      	cmp	r3, #99	; 0x63
 80041e2:	dc2b      	bgt.n	800423c <_etoa+0x34c>
 80041e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80041ea:	db27      	blt.n	800423c <_etoa+0x34c>
 80041ec:	2304      	movs	r3, #4
 80041ee:	e026      	b.n	800423e <_etoa+0x34e>
 80041f0:	509f79fb 	.word	0x509f79fb
 80041f4:	3fd34413 	.word	0x3fd34413
 80041f8:	8b60c8b3 	.word	0x8b60c8b3
 80041fc:	3fc68a28 	.word	0x3fc68a28
 8004200:	636f4361 	.word	0x636f4361
 8004204:	3fd287a7 	.word	0x3fd287a7
 8004208:	0979a371 	.word	0x0979a371
 800420c:	400a934f 	.word	0x400a934f
 8004210:	bbb55516 	.word	0xbbb55516
 8004214:	40026bb1 	.word	0x40026bb1
 8004218:	fefa39ef 	.word	0xfefa39ef
 800421c:	3fe62e42 	.word	0x3fe62e42
 8004220:	7fefffff 	.word	0x7fefffff
 8004224:	3ff80000 	.word	0x3ff80000
 8004228:	3fe00000 	.word	0x3fe00000
 800422c:	402c0000 	.word	0x402c0000
 8004230:	40240000 	.word	0x40240000
 8004234:	40180000 	.word	0x40180000
 8004238:	3ff00000 	.word	0x3ff00000
 800423c:	2305      	movs	r3, #5
 800423e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004240:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004248:	2b00      	cmp	r3, #0
 800424a:	d03d      	beq.n	80042c8 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800424c:	a368      	add	r3, pc, #416	; (adr r3, 80043f0 <_etoa+0x500>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004256:	f7fc fc75 	bl	8000b44 <__aeabi_dcmpge>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d024      	beq.n	80042aa <_etoa+0x3ba>
 8004260:	a365      	add	r3, pc, #404	; (adr r3, 80043f8 <_etoa+0x508>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800426a:	f7fc fc57 	bl	8000b1c <__aeabi_dcmplt>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <_etoa+0x3ba>
      if ((int)prec > expval) {
 8004274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004278:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800427a:	429a      	cmp	r2, r3
 800427c:	da07      	bge.n	800428e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800427e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004282:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800428c:	e002      	b.n	8004294 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800428e:	2300      	movs	r3, #0
 8004290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004294:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800429c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042a8:	e00e      	b.n	80042c8 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80042aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00a      	beq.n	80042c8 <_etoa+0x3d8>
 80042b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <_etoa+0x3d8>
        --prec;
 80042be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042c2:	3b01      	subs	r3, #1
 80042c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 80042c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 80042ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d904      	bls.n	80042e2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80042d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	657b      	str	r3, [r7, #84]	; 0x54
 80042e0:	e001      	b.n	80042e6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80042e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <_etoa+0x40c>
 80042f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80042fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <_etoa+0x426>
    value /= conv.F;
 8004302:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004306:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800430a:	f7fc fabf 	bl	800088c <__aeabi_ddiv>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800431a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800431e:	2b00      	cmp	r3, #0
 8004320:	d006      	beq.n	8004330 <_etoa+0x440>
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	e003      	b.n	8004338 <_etoa+0x448>
 8004330:	ed97 7b04 	vldr	d7, [r7, #16]
 8004334:	ed87 7b02 	vstr	d7, [r7, #8]
 8004338:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800433c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004340:	9302      	str	r3, [sp, #8]
 8004342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004344:	9301      	str	r3, [sp, #4]
 8004346:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	ed97 0b02 	vldr	d0, [r7, #8]
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	6a39      	ldr	r1, [r7, #32]
 8004356:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004358:	f7ff fb72 	bl	8003a40 <_ftoa>
 800435c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800435e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004360:	2b00      	cmp	r3, #0
 8004362:	d03f      	beq.n	80043e4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004364:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004368:	f003 0320 	and.w	r3, r3, #32
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <_etoa+0x484>
 8004370:	2045      	movs	r0, #69	; 0x45
 8004372:	e000      	b.n	8004376 <_etoa+0x486>
 8004374:	2065      	movs	r0, #101	; 0x65
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	1c53      	adds	r3, r2, #1
 800437a:	61fb      	str	r3, [r7, #28]
 800437c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	6a39      	ldr	r1, [r7, #32]
 8004382:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004386:	2b00      	cmp	r3, #0
 8004388:	bfb8      	it	lt
 800438a:	425b      	neglt	r3, r3
 800438c:	4618      	mov	r0, r3
 800438e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004390:	0fdb      	lsrs	r3, r3, #31
 8004392:	b2db      	uxtb	r3, r3
 8004394:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004396:	3a01      	subs	r2, #1
 8004398:	2105      	movs	r1, #5
 800439a:	9105      	str	r1, [sp, #20]
 800439c:	9204      	str	r2, [sp, #16]
 800439e:	2200      	movs	r2, #0
 80043a0:	9203      	str	r2, [sp, #12]
 80043a2:	220a      	movs	r2, #10
 80043a4:	9202      	str	r2, [sp, #8]
 80043a6:	9301      	str	r3, [sp, #4]
 80043a8:	9000      	str	r0, [sp, #0]
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	6a39      	ldr	r1, [r7, #32]
 80043b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043b2:	f7ff fa72 	bl	800389a <_ntoa_long>
 80043b6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80043b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00f      	beq.n	80043e4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 80043c4:	e007      	b.n	80043d6 <_etoa+0x4e6>
 80043c6:	69fa      	ldr	r2, [r7, #28]
 80043c8:	1c53      	adds	r3, r2, #1
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	6a39      	ldr	r1, [r7, #32]
 80043d2:	2020      	movs	r0, #32
 80043d4:	47a0      	blx	r4
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d8f0      	bhi.n	80043c6 <_etoa+0x4d6>
    }
  }
  return idx;
 80043e4:	69fb      	ldr	r3, [r7, #28]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3764      	adds	r7, #100	; 0x64
 80043ea:	46bd      	mov	sp, r7
 80043ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043f0:	eb1c432d 	.word	0xeb1c432d
 80043f4:	3f1a36e2 	.word	0x3f1a36e2
 80043f8:	00000000 	.word	0x00000000
 80043fc:	412e8480 	.word	0x412e8480

08004400 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004404:	b0a3      	sub	sp, #140	; 0x8c
 8004406:	af0a      	add	r7, sp, #40	; 0x28
 8004408:	6178      	str	r0, [r7, #20]
 800440a:	6139      	str	r1, [r7, #16]
 800440c:	60fa      	str	r2, [r7, #12]
 800440e:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2b00      	cmp	r3, #0
 8004418:	f040 84cf 	bne.w	8004dba <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 800441c:	4ba8      	ldr	r3, [pc, #672]	; (80046c0 <_vsnprintf+0x2c0>)
 800441e:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8004420:	f000 bccb 	b.w	8004dba <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b25      	cmp	r3, #37	; 0x25
 800442a:	d00d      	beq.n	8004448 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	7818      	ldrb	r0, [r3, #0]
 8004430:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004432:	1c53      	adds	r3, r2, #1
 8004434:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004436:	697c      	ldr	r4, [r7, #20]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6939      	ldr	r1, [r7, #16]
 800443c:	47a0      	blx	r4
      format++;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3301      	adds	r3, #1
 8004442:	60bb      	str	r3, [r7, #8]
      continue;
 8004444:	f000 bcb9 	b.w	8004dba <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	3301      	adds	r3, #1
 800444c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	3b20      	subs	r3, #32
 8004458:	2b10      	cmp	r3, #16
 800445a:	d857      	bhi.n	800450c <_vsnprintf+0x10c>
 800445c:	a201      	add	r2, pc, #4	; (adr r2, 8004464 <_vsnprintf+0x64>)
 800445e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004462:	bf00      	nop
 8004464:	080044e5 	.word	0x080044e5
 8004468:	0800450d 	.word	0x0800450d
 800446c:	0800450d 	.word	0x0800450d
 8004470:	080044f9 	.word	0x080044f9
 8004474:	0800450d 	.word	0x0800450d
 8004478:	0800450d 	.word	0x0800450d
 800447c:	0800450d 	.word	0x0800450d
 8004480:	0800450d 	.word	0x0800450d
 8004484:	0800450d 	.word	0x0800450d
 8004488:	0800450d 	.word	0x0800450d
 800448c:	0800450d 	.word	0x0800450d
 8004490:	080044d1 	.word	0x080044d1
 8004494:	0800450d 	.word	0x0800450d
 8004498:	080044bd 	.word	0x080044bd
 800449c:	0800450d 	.word	0x0800450d
 80044a0:	0800450d 	.word	0x0800450d
 80044a4:	080044a9 	.word	0x080044a9
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80044a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044aa:	f043 0301 	orr.w	r3, r3, #1
 80044ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	3301      	adds	r3, #1
 80044b4:	60bb      	str	r3, [r7, #8]
 80044b6:	2301      	movs	r3, #1
 80044b8:	653b      	str	r3, [r7, #80]	; 0x50
 80044ba:	e02a      	b.n	8004512 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80044bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044be:	f043 0302 	orr.w	r3, r3, #2
 80044c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60bb      	str	r3, [r7, #8]
 80044ca:	2301      	movs	r3, #1
 80044cc:	653b      	str	r3, [r7, #80]	; 0x50
 80044ce:	e020      	b.n	8004512 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80044d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d2:	f043 0304 	orr.w	r3, r3, #4
 80044d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	3301      	adds	r3, #1
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	2301      	movs	r3, #1
 80044e0:	653b      	str	r3, [r7, #80]	; 0x50
 80044e2:	e016      	b.n	8004512 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80044e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044e6:	f043 0308 	orr.w	r3, r3, #8
 80044ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	3301      	adds	r3, #1
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	2301      	movs	r3, #1
 80044f4:	653b      	str	r3, [r7, #80]	; 0x50
 80044f6:	e00c      	b.n	8004512 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80044f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044fa:	f043 0310 	orr.w	r3, r3, #16
 80044fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	3301      	adds	r3, #1
 8004504:	60bb      	str	r3, [r7, #8]
 8004506:	2301      	movs	r3, #1
 8004508:	653b      	str	r3, [r7, #80]	; 0x50
 800450a:	e002      	b.n	8004512 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 800450c:	2300      	movs	r3, #0
 800450e:	653b      	str	r3, [r7, #80]	; 0x50
 8004510:	bf00      	nop
      }
    } while (n);
 8004512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004514:	2b00      	cmp	r3, #0
 8004516:	d19c      	bne.n	8004452 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f7ff f853 	bl	80035cc <_is_digit>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d006      	beq.n	800453a <_vsnprintf+0x13a>
      width = _atoi(&format);
 800452c:	f107 0308 	add.w	r3, r7, #8
 8004530:	4618      	mov	r0, r3
 8004532:	f7ff f862 	bl	80035fa <_atoi>
 8004536:	65b8      	str	r0, [r7, #88]	; 0x58
 8004538:	e01a      	b.n	8004570 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b2a      	cmp	r3, #42	; 0x2a
 8004540:	d116      	bne.n	8004570 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004546:	1d1a      	adds	r2, r3, #4
 8004548:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004552:	2b00      	cmp	r3, #0
 8004554:	da07      	bge.n	8004566 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004560:	425b      	negs	r3, r3
 8004562:	65bb      	str	r3, [r7, #88]	; 0x58
 8004564:	e001      	b.n	800456a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	3301      	adds	r3, #1
 800456e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b2e      	cmp	r3, #46	; 0x2e
 800457a:	d127      	bne.n	80045cc <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800457c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800457e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004582:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	3301      	adds	r3, #1
 8004588:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff f81c 	bl	80035cc <_is_digit>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d006      	beq.n	80045a8 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff f82b 	bl	80035fa <_atoi>
 80045a4:	6578      	str	r0, [r7, #84]	; 0x54
 80045a6:	e011      	b.n	80045cc <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b2a      	cmp	r3, #42	; 0x2a
 80045ae:	d10d      	bne.n	80045cc <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80045b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045b4:	1d1a      	adds	r2, r3, #4
 80045b6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80045be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80045c4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	3301      	adds	r3, #1
 80045ca:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	3b68      	subs	r3, #104	; 0x68
 80045d2:	2b12      	cmp	r3, #18
 80045d4:	d866      	bhi.n	80046a4 <_vsnprintf+0x2a4>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <_vsnprintf+0x1dc>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	0800464f 	.word	0x0800464f
 80045e0:	080046a5 	.word	0x080046a5
 80045e4:	08004685 	.word	0x08004685
 80045e8:	080046a5 	.word	0x080046a5
 80045ec:	08004629 	.word	0x08004629
 80045f0:	080046a5 	.word	0x080046a5
 80045f4:	080046a5 	.word	0x080046a5
 80045f8:	080046a5 	.word	0x080046a5
 80045fc:	080046a5 	.word	0x080046a5
 8004600:	080046a5 	.word	0x080046a5
 8004604:	080046a5 	.word	0x080046a5
 8004608:	080046a5 	.word	0x080046a5
 800460c:	08004675 	.word	0x08004675
 8004610:	080046a5 	.word	0x080046a5
 8004614:	080046a5 	.word	0x080046a5
 8004618:	080046a5 	.word	0x080046a5
 800461c:	080046a5 	.word	0x080046a5
 8004620:	080046a5 	.word	0x080046a5
 8004624:	08004695 	.word	0x08004695
      case 'l' :
        flags |= FLAGS_LONG;
 8004628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462e:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	3301      	adds	r3, #1
 8004634:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b6c      	cmp	r3, #108	; 0x6c
 800463c:	d134      	bne.n	80046a8 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800463e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004640:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004644:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	3301      	adds	r3, #1
 800464a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800464c:	e02c      	b.n	80046a8 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800464e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004654:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	3301      	adds	r3, #1
 800465a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b68      	cmp	r3, #104	; 0x68
 8004662:	d123      	bne.n	80046ac <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8004664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800466a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	3301      	adds	r3, #1
 8004670:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004672:	e01b      	b.n	80046ac <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800467a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	3301      	adds	r3, #1
 8004680:	60bb      	str	r3, [r7, #8]
        break;
 8004682:	e014      	b.n	80046ae <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800468a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	3301      	adds	r3, #1
 8004690:	60bb      	str	r3, [r7, #8]
        break;
 8004692:	e00c      	b.n	80046ae <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	3301      	adds	r3, #1
 80046a0:	60bb      	str	r3, [r7, #8]
        break;
 80046a2:	e004      	b.n	80046ae <_vsnprintf+0x2ae>
      default :
        break;
 80046a4:	bf00      	nop
 80046a6:	e002      	b.n	80046ae <_vsnprintf+0x2ae>
        break;
 80046a8:	bf00      	nop
 80046aa:	e000      	b.n	80046ae <_vsnprintf+0x2ae>
        break;
 80046ac:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	2b67      	cmp	r3, #103	; 0x67
 80046b4:	f300 80b8 	bgt.w	8004828 <_vsnprintf+0x428>
 80046b8:	2b25      	cmp	r3, #37	; 0x25
 80046ba:	da27      	bge.n	800470c <_vsnprintf+0x30c>
 80046bc:	e370      	b.n	8004da0 <_vsnprintf+0x9a0>
 80046be:	bf00      	nop
 80046c0:	08003551 	.word	0x08003551
 80046c4:	3b69      	subs	r3, #105	; 0x69
 80046c6:	2201      	movs	r2, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	f249 0241 	movw	r2, #36929	; 0x9041
 80046d0:	401a      	ands	r2, r3
 80046d2:	2a00      	cmp	r2, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2201      	movne	r2, #1
 80046d8:	2200      	moveq	r2, #0
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	2a00      	cmp	r2, #0
 80046de:	f040 80aa 	bne.w	8004836 <_vsnprintf+0x436>
 80046e2:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80046e6:	2a00      	cmp	r2, #0
 80046e8:	bf14      	ite	ne
 80046ea:	2201      	movne	r2, #1
 80046ec:	2200      	moveq	r2, #0
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	2a00      	cmp	r2, #0
 80046f2:	f040 82fb 	bne.w	8004cec <_vsnprintf+0x8ec>
 80046f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	f040 828d 	bne.w	8004c24 <_vsnprintf+0x824>
 800470a:	e349      	b.n	8004da0 <_vsnprintf+0x9a0>
 800470c:	3b25      	subs	r3, #37	; 0x25
 800470e:	2b42      	cmp	r3, #66	; 0x42
 8004710:	f200 8346 	bhi.w	8004da0 <_vsnprintf+0x9a0>
 8004714:	a201      	add	r2, pc, #4	; (adr r2, 800471c <_vsnprintf+0x31c>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	08004d89 	.word	0x08004d89
 8004720:	08004da1 	.word	0x08004da1
 8004724:	08004da1 	.word	0x08004da1
 8004728:	08004da1 	.word	0x08004da1
 800472c:	08004da1 	.word	0x08004da1
 8004730:	08004da1 	.word	0x08004da1
 8004734:	08004da1 	.word	0x08004da1
 8004738:	08004da1 	.word	0x08004da1
 800473c:	08004da1 	.word	0x08004da1
 8004740:	08004da1 	.word	0x08004da1
 8004744:	08004da1 	.word	0x08004da1
 8004748:	08004da1 	.word	0x08004da1
 800474c:	08004da1 	.word	0x08004da1
 8004750:	08004da1 	.word	0x08004da1
 8004754:	08004da1 	.word	0x08004da1
 8004758:	08004da1 	.word	0x08004da1
 800475c:	08004da1 	.word	0x08004da1
 8004760:	08004da1 	.word	0x08004da1
 8004764:	08004da1 	.word	0x08004da1
 8004768:	08004da1 	.word	0x08004da1
 800476c:	08004da1 	.word	0x08004da1
 8004770:	08004da1 	.word	0x08004da1
 8004774:	08004da1 	.word	0x08004da1
 8004778:	08004da1 	.word	0x08004da1
 800477c:	08004da1 	.word	0x08004da1
 8004780:	08004da1 	.word	0x08004da1
 8004784:	08004da1 	.word	0x08004da1
 8004788:	08004da1 	.word	0x08004da1
 800478c:	08004da1 	.word	0x08004da1
 8004790:	08004da1 	.word	0x08004da1
 8004794:	08004da1 	.word	0x08004da1
 8004798:	08004da1 	.word	0x08004da1
 800479c:	08004b3d 	.word	0x08004b3d
 80047a0:	08004aed 	.word	0x08004aed
 80047a4:	08004b3d 	.word	0x08004b3d
 80047a8:	08004da1 	.word	0x08004da1
 80047ac:	08004da1 	.word	0x08004da1
 80047b0:	08004da1 	.word	0x08004da1
 80047b4:	08004da1 	.word	0x08004da1
 80047b8:	08004da1 	.word	0x08004da1
 80047bc:	08004da1 	.word	0x08004da1
 80047c0:	08004da1 	.word	0x08004da1
 80047c4:	08004da1 	.word	0x08004da1
 80047c8:	08004da1 	.word	0x08004da1
 80047cc:	08004da1 	.word	0x08004da1
 80047d0:	08004da1 	.word	0x08004da1
 80047d4:	08004da1 	.word	0x08004da1
 80047d8:	08004da1 	.word	0x08004da1
 80047dc:	08004da1 	.word	0x08004da1
 80047e0:	08004da1 	.word	0x08004da1
 80047e4:	08004da1 	.word	0x08004da1
 80047e8:	08004837 	.word	0x08004837
 80047ec:	08004da1 	.word	0x08004da1
 80047f0:	08004da1 	.word	0x08004da1
 80047f4:	08004da1 	.word	0x08004da1
 80047f8:	08004da1 	.word	0x08004da1
 80047fc:	08004da1 	.word	0x08004da1
 8004800:	08004da1 	.word	0x08004da1
 8004804:	08004da1 	.word	0x08004da1
 8004808:	08004da1 	.word	0x08004da1
 800480c:	08004da1 	.word	0x08004da1
 8004810:	08004837 	.word	0x08004837
 8004814:	08004bad 	.word	0x08004bad
 8004818:	08004837 	.word	0x08004837
 800481c:	08004b3d 	.word	0x08004b3d
 8004820:	08004aed 	.word	0x08004aed
 8004824:	08004b3d 	.word	0x08004b3d
 8004828:	2b78      	cmp	r3, #120	; 0x78
 800482a:	f300 82b9 	bgt.w	8004da0 <_vsnprintf+0x9a0>
 800482e:	2b69      	cmp	r3, #105	; 0x69
 8004830:	f6bf af48 	bge.w	80046c4 <_vsnprintf+0x2c4>
 8004834:	e2b4      	b.n	8004da0 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	2b78      	cmp	r3, #120	; 0x78
 800483c:	d003      	beq.n	8004846 <_vsnprintf+0x446>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b58      	cmp	r3, #88	; 0x58
 8004844:	d102      	bne.n	800484c <_vsnprintf+0x44c>
          base = 16U;
 8004846:	2310      	movs	r3, #16
 8004848:	64bb      	str	r3, [r7, #72]	; 0x48
 800484a:	e013      	b.n	8004874 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b6f      	cmp	r3, #111	; 0x6f
 8004852:	d102      	bne.n	800485a <_vsnprintf+0x45a>
          base =  8U;
 8004854:	2308      	movs	r3, #8
 8004856:	64bb      	str	r3, [r7, #72]	; 0x48
 8004858:	e00c      	b.n	8004874 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b62      	cmp	r3, #98	; 0x62
 8004860:	d102      	bne.n	8004868 <_vsnprintf+0x468>
          base =  2U;
 8004862:	2302      	movs	r3, #2
 8004864:	64bb      	str	r3, [r7, #72]	; 0x48
 8004866:	e005      	b.n	8004874 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8004868:	230a      	movs	r3, #10
 800486a:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800486c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486e:	f023 0310 	bic.w	r3, r3, #16
 8004872:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b58      	cmp	r3, #88	; 0x58
 800487a:	d103      	bne.n	8004884 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 800487c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487e:	f043 0320 	orr.w	r3, r3, #32
 8004882:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	2b69      	cmp	r3, #105	; 0x69
 800488a:	d007      	beq.n	800489c <_vsnprintf+0x49c>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b64      	cmp	r3, #100	; 0x64
 8004892:	d003      	beq.n	800489c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004896:	f023 030c 	bic.w	r3, r3, #12
 800489a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800489c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 80048a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b69      	cmp	r3, #105	; 0x69
 80048b4:	d004      	beq.n	80048c0 <_vsnprintf+0x4c0>
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	2b64      	cmp	r3, #100	; 0x64
 80048bc:	f040 8098 	bne.w	80049f0 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 80048c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d031      	beq.n	800492e <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 80048ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80048ce:	3307      	adds	r3, #7
 80048d0:	f023 0307 	bic.w	r3, r3, #7
 80048d4:	f103 0208 	add.w	r2, r3, #8
 80048d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80048e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	da06      	bge.n	80048fa <_vsnprintf+0x4fa>
 80048ec:	2100      	movs	r1, #0
 80048ee:	f1d2 0800 	rsbs	r8, r2, #0
 80048f2:	eb61 0903 	sbc.w	r9, r1, r3
 80048f6:	4642      	mov	r2, r8
 80048f8:	464b      	mov	r3, r9
 80048fa:	69f9      	ldr	r1, [r7, #28]
 80048fc:	0fc9      	lsrs	r1, r1, #31
 80048fe:	b2c9      	uxtb	r1, r1
 8004900:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8004902:	2400      	movs	r4, #0
 8004904:	4682      	mov	sl, r0
 8004906:	46a3      	mov	fp, r4
 8004908:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800490a:	9008      	str	r0, [sp, #32]
 800490c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800490e:	9007      	str	r0, [sp, #28]
 8004910:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004912:	9006      	str	r0, [sp, #24]
 8004914:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004918:	9102      	str	r1, [sp, #8]
 800491a:	e9cd 2300 	strd	r2, r3, [sp]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004922:	6939      	ldr	r1, [r7, #16]
 8004924:	6978      	ldr	r0, [r7, #20]
 8004926:	f7ff f81e 	bl	8003966 <_ntoa_long_long>
 800492a:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 800492c:	e0da      	b.n	8004ae4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800492e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d020      	beq.n	800497a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8004938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800493c:	1d1a      	adds	r2, r3, #4
 800493e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	2b00      	cmp	r3, #0
 800494a:	bfb8      	it	lt
 800494c:	425b      	neglt	r3, r3
 800494e:	4619      	mov	r1, r3
 8004950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004952:	0fdb      	lsrs	r3, r3, #31
 8004954:	b2db      	uxtb	r3, r3
 8004956:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004958:	9205      	str	r2, [sp, #20]
 800495a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800495c:	9204      	str	r2, [sp, #16]
 800495e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004960:	9203      	str	r2, [sp, #12]
 8004962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004964:	9202      	str	r2, [sp, #8]
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	9100      	str	r1, [sp, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800496e:	6939      	ldr	r1, [r7, #16]
 8004970:	6978      	ldr	r0, [r7, #20]
 8004972:	f7fe ff92 	bl	800389a <_ntoa_long>
 8004976:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004978:	e0b4      	b.n	8004ae4 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800497a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800497c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <_vsnprintf+0x594>
 8004984:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004988:	1d1a      	adds	r2, r3, #4
 800498a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	e012      	b.n	80049ba <_vsnprintf+0x5ba>
 8004994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <_vsnprintf+0x5ae>
 800499e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049a2:	1d1a      	adds	r2, r3, #4
 80049a4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	b21b      	sxth	r3, r3
 80049ac:	e005      	b.n	80049ba <_vsnprintf+0x5ba>
 80049ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049b2:	1d1a      	adds	r2, r3, #4
 80049b4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80049bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049be:	2b00      	cmp	r3, #0
 80049c0:	bfb8      	it	lt
 80049c2:	425b      	neglt	r3, r3
 80049c4:	4619      	mov	r1, r3
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	0fdb      	lsrs	r3, r3, #31
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049ce:	9205      	str	r2, [sp, #20]
 80049d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049d2:	9204      	str	r2, [sp, #16]
 80049d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049d6:	9203      	str	r2, [sp, #12]
 80049d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049da:	9202      	str	r2, [sp, #8]
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	9100      	str	r1, [sp, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049e4:	6939      	ldr	r1, [r7, #16]
 80049e6:	6978      	ldr	r0, [r7, #20]
 80049e8:	f7fe ff57 	bl	800389a <_ntoa_long>
 80049ec:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80049ee:	e079      	b.n	8004ae4 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80049f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d022      	beq.n	8004a40 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80049fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049fe:	3307      	adds	r3, #7
 8004a00:	f023 0307 	bic.w	r3, r3, #7
 8004a04:	f103 0208 	add.w	r2, r3, #8
 8004a08:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a12:	2000      	movs	r0, #0
 8004a14:	460d      	mov	r5, r1
 8004a16:	4606      	mov	r6, r0
 8004a18:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004a1a:	9108      	str	r1, [sp, #32]
 8004a1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a1e:	9107      	str	r1, [sp, #28]
 8004a20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a22:	9106      	str	r1, [sp, #24]
 8004a24:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8004a28:	2100      	movs	r1, #0
 8004a2a:	9102      	str	r1, [sp, #8]
 8004a2c:	e9cd 2300 	strd	r2, r3, [sp]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a34:	6939      	ldr	r1, [r7, #16]
 8004a36:	6978      	ldr	r0, [r7, #20]
 8004a38:	f7fe ff95 	bl	8003966 <_ntoa_long_long>
 8004a3c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004a3e:	e051      	b.n	8004ae4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d018      	beq.n	8004a7c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004a4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a4e:	1d1a      	adds	r2, r3, #4
 8004a50:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a58:	9205      	str	r2, [sp, #20]
 8004a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a5c:	9204      	str	r2, [sp, #16]
 8004a5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a60:	9203      	str	r2, [sp, #12]
 8004a62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a64:	9202      	str	r2, [sp, #8]
 8004a66:	2200      	movs	r2, #0
 8004a68:	9201      	str	r2, [sp, #4]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a70:	6939      	ldr	r1, [r7, #16]
 8004a72:	6978      	ldr	r0, [r7, #20]
 8004a74:	f7fe ff11 	bl	800389a <_ntoa_long>
 8004a78:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004a7a:	e033      	b.n	8004ae4 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d007      	beq.n	8004a96 <_vsnprintf+0x696>
 8004a86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a8a:	1d1a      	adds	r2, r3, #4
 8004a8c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	e012      	b.n	8004abc <_vsnprintf+0x6bc>
 8004a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <_vsnprintf+0x6b0>
 8004aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aa4:	1d1a      	adds	r2, r3, #4
 8004aa6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	e005      	b.n	8004abc <_vsnprintf+0x6bc>
 8004ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab4:	1d1a      	adds	r2, r3, #4
 8004ab6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac0:	9305      	str	r3, [sp, #20]
 8004ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ac4:	9304      	str	r3, [sp, #16]
 8004ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ac8:	9303      	str	r3, [sp, #12]
 8004aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004acc:	9302      	str	r3, [sp, #8]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ada:	6939      	ldr	r1, [r7, #16]
 8004adc:	6978      	ldr	r0, [r7, #20]
 8004ade:	f7fe fedc 	bl	800389a <_ntoa_long>
 8004ae2:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	60bb      	str	r3, [r7, #8]
        break;
 8004aea:	e166      	b.n	8004dba <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b46      	cmp	r3, #70	; 0x46
 8004af2:	d103      	bne.n	8004afc <_vsnprintf+0x6fc>
 8004af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af6:	f043 0320 	orr.w	r3, r3, #32
 8004afa:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b00:	3307      	adds	r3, #7
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	f103 0208 	add.w	r2, r3, #8
 8004b0a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b0e:	ed93 7b00 	vldr	d7, [r3]
 8004b12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b14:	9302      	str	r3, [sp, #8]
 8004b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b18:	9301      	str	r3, [sp, #4]
 8004b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b1c:	9300      	str	r3, [sp, #0]
 8004b1e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b22:	eef0 0a67 	vmov.f32	s1, s15
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b2a:	6939      	ldr	r1, [r7, #16]
 8004b2c:	6978      	ldr	r0, [r7, #20]
 8004b2e:	f7fe ff87 	bl	8003a40 <_ftoa>
 8004b32:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	3301      	adds	r3, #1
 8004b38:	60bb      	str	r3, [r7, #8]
        break;
 8004b3a:	e13e      	b.n	8004dba <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b67      	cmp	r3, #103	; 0x67
 8004b42:	d003      	beq.n	8004b4c <_vsnprintf+0x74c>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b47      	cmp	r3, #71	; 0x47
 8004b4a:	d103      	bne.n	8004b54 <_vsnprintf+0x754>
 8004b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b52:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b45      	cmp	r3, #69	; 0x45
 8004b5a:	d003      	beq.n	8004b64 <_vsnprintf+0x764>
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b47      	cmp	r3, #71	; 0x47
 8004b62:	d103      	bne.n	8004b6c <_vsnprintf+0x76c>
 8004b64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b66:	f043 0320 	orr.w	r3, r3, #32
 8004b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b70:	3307      	adds	r3, #7
 8004b72:	f023 0307 	bic.w	r3, r3, #7
 8004b76:	f103 0208 	add.w	r2, r3, #8
 8004b7a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b7e:	ed93 7b00 	vldr	d7, [r3]
 8004b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b84:	9302      	str	r3, [sp, #8]
 8004b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b88:	9301      	str	r3, [sp, #4]
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b92:	eef0 0a67 	vmov.f32	s1, s15
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b9a:	6939      	ldr	r1, [r7, #16]
 8004b9c:	6978      	ldr	r0, [r7, #20]
 8004b9e:	f7ff f9a7 	bl	8003ef0 <_etoa>
 8004ba2:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	60bb      	str	r3, [r7, #8]
        break;
 8004baa:	e106      	b.n	8004dba <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004bac:	2301      	movs	r3, #1
 8004bae:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d10e      	bne.n	8004bd8 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8004bba:	e007      	b.n	8004bcc <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8004bbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bbe:	1c53      	adds	r3, r2, #1
 8004bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bc2:	697c      	ldr	r4, [r7, #20]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6939      	ldr	r1, [r7, #16]
 8004bc8:	2020      	movs	r0, #32
 8004bca:	47a0      	blx	r4
          while (l++ < width) {
 8004bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	647a      	str	r2, [r7, #68]	; 0x44
 8004bd2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d8f1      	bhi.n	8004bbc <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bdc:	1d1a      	adds	r2, r3, #4
 8004bde:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	b2d8      	uxtb	r0, r3
 8004be6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004be8:	1c53      	adds	r3, r2, #1
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bec:	697c      	ldr	r4, [r7, #20]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6939      	ldr	r1, [r7, #16]
 8004bf2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00e      	beq.n	8004c1c <_vsnprintf+0x81c>
          while (l++ < width) {
 8004bfe:	e007      	b.n	8004c10 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8004c00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c02:	1c53      	adds	r3, r2, #1
 8004c04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c06:	697c      	ldr	r4, [r7, #20]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6939      	ldr	r1, [r7, #16]
 8004c0c:	2020      	movs	r0, #32
 8004c0e:	47a0      	blx	r4
          while (l++ < width) {
 8004c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	647a      	str	r2, [r7, #68]	; 0x44
 8004c16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d8f1      	bhi.n	8004c00 <_vsnprintf+0x800>
          }
        }
        format++;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60bb      	str	r3, [r7, #8]
        break;
 8004c22:	e0ca      	b.n	8004dba <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004c24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c28:	1d1a      	adds	r2, r3, #4
 8004c2a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <_vsnprintf+0x83c>
 8004c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c3a:	e001      	b.n	8004c40 <_vsnprintf+0x840>
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c40:	4619      	mov	r1, r3
 8004c42:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c44:	f7fe fca5 	bl	8003592 <_strnlen_s>
 8004c48:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d005      	beq.n	8004c60 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8004c54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	bf28      	it	cs
 8004c5c:	4613      	movcs	r3, r2
 8004c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11a      	bne.n	8004ca0 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8004c6a:	e007      	b.n	8004c7c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8004c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c6e:	1c53      	adds	r3, r2, #1
 8004c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c72:	697c      	ldr	r4, [r7, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6939      	ldr	r1, [r7, #16]
 8004c78:	2020      	movs	r0, #32
 8004c7a:	47a0      	blx	r4
          while (l++ < width) {
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d8f1      	bhi.n	8004c6c <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004c88:	e00a      	b.n	8004ca0 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8004c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	643a      	str	r2, [r7, #64]	; 0x40
 8004c90:	7818      	ldrb	r0, [r3, #0]
 8004c92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c94:	1c53      	adds	r3, r2, #1
 8004c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c98:	697c      	ldr	r4, [r7, #20]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6939      	ldr	r1, [r7, #16]
 8004c9e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <_vsnprintf+0x8bc>
 8004ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0eb      	beq.n	8004c8a <_vsnprintf+0x88a>
 8004cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb4:	1e5a      	subs	r2, r3, #1
 8004cb6:	657a      	str	r2, [r7, #84]	; 0x54
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e6      	bne.n	8004c8a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00e      	beq.n	8004ce4 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8004cc6:	e007      	b.n	8004cd8 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8004cc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cca:	1c53      	adds	r3, r2, #1
 8004ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cce:	697c      	ldr	r4, [r7, #20]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6939      	ldr	r1, [r7, #16]
 8004cd4:	2020      	movs	r0, #32
 8004cd6:	47a0      	blx	r4
          while (l++ < width) {
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d8f1      	bhi.n	8004cc8 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60bb      	str	r3, [r7, #8]
        break;
 8004cea:	e066      	b.n	8004dba <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004cec:	2308      	movs	r3, #8
 8004cee:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf2:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004cfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d023      	beq.n	8004d4e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d0a:	1d1a      	adds	r2, r3, #4
 8004d0c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	2300      	movs	r3, #0
 8004d16:	603a      	str	r2, [r7, #0]
 8004d18:	607b      	str	r3, [r7, #4]
 8004d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1c:	9308      	str	r3, [sp, #32]
 8004d1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d20:	9307      	str	r3, [sp, #28]
 8004d22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d24:	9306      	str	r3, [sp, #24]
 8004d26:	f04f 0210 	mov.w	r2, #16
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d32:	2300      	movs	r3, #0
 8004d34:	9302      	str	r3, [sp, #8]
 8004d36:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d3a:	e9cd 3400 	strd	r3, r4, [sp]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d42:	6939      	ldr	r1, [r7, #16]
 8004d44:	6978      	ldr	r0, [r7, #20]
 8004d46:	f7fe fe0e 	bl	8003966 <_ntoa_long_long>
 8004d4a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004d4c:	e018      	b.n	8004d80 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004d4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d52:	1d1a      	adds	r2, r3, #4
 8004d54:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d5e:	9305      	str	r3, [sp, #20]
 8004d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d62:	9304      	str	r3, [sp, #16]
 8004d64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d66:	9303      	str	r3, [sp, #12]
 8004d68:	2310      	movs	r3, #16
 8004d6a:	9302      	str	r3, [sp, #8]
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	9200      	str	r2, [sp, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d76:	6939      	ldr	r1, [r7, #16]
 8004d78:	6978      	ldr	r0, [r7, #20]
 8004d7a:	f7fe fd8e 	bl	800389a <_ntoa_long>
 8004d7e:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	3301      	adds	r3, #1
 8004d84:	60bb      	str	r3, [r7, #8]
        break;
 8004d86:	e018      	b.n	8004dba <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d8a:	1c53      	adds	r3, r2, #1
 8004d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d8e:	697c      	ldr	r4, [r7, #20]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6939      	ldr	r1, [r7, #16]
 8004d94:	2025      	movs	r0, #37	; 0x25
 8004d96:	47a0      	blx	r4
        format++;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60bb      	str	r3, [r7, #8]
        break;
 8004d9e:	e00c      	b.n	8004dba <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	7818      	ldrb	r0, [r3, #0]
 8004da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004da6:	1c53      	adds	r3, r2, #1
 8004da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004daa:	697c      	ldr	r4, [r7, #20]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6939      	ldr	r1, [r7, #16]
 8004db0:	47a0      	blx	r4
        format++;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	3301      	adds	r3, #1
 8004db6:	60bb      	str	r3, [r7, #8]
        break;
 8004db8:	bf00      	nop
  while (*format)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f47f ab30 	bne.w	8004424 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004dc4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d302      	bcc.n	8004dd2 <_vsnprintf+0x9d2>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1e5a      	subs	r2, r3, #1
 8004dd0:	e000      	b.n	8004dd4 <_vsnprintf+0x9d4>
 8004dd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dd4:	697c      	ldr	r4, [r7, #20]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6939      	ldr	r1, [r7, #16]
 8004dda:	2000      	movs	r0, #0
 8004ddc:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3764      	adds	r7, #100	; 0x64
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop

08004dec <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004dec:	b40f      	push	{r0, r1, r2, r3}
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b086      	sub	sp, #24
 8004df2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004df4:	f107 031c 	add.w	r3, r7, #28
 8004df8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004dfa:	1d39      	adds	r1, r7, #4
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	f04f 32ff 	mov.w	r2, #4294967295
 8004e06:	4806      	ldr	r0, [pc, #24]	; (8004e20 <printf_+0x34>)
 8004e08:	f7ff fafa 	bl	8004400 <_vsnprintf>
 8004e0c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e1a:	b004      	add	sp, #16
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	0800356d 	.word	0x0800356d

08004e24 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8004e24:	b40e      	push	{r1, r2, r3}
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b087      	sub	sp, #28
 8004e2a:	af02      	add	r7, sp, #8
 8004e2c:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004e2e:	f107 0320 	add.w	r3, r7, #32
 8004e32:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4805      	ldr	r0, [pc, #20]	; (8004e58 <sprintf_+0x34>)
 8004e42:	f7ff fadd 	bl	8004400 <_vsnprintf>
 8004e46:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3714      	adds	r7, #20
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e54:	b003      	add	sp, #12
 8004e56:	4770      	bx	lr
 8004e58:	08003523 	.word	0x08003523

08004e5c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004e62:	1d3b      	adds	r3, r7, #4
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004e70:	2300      	movs	r3, #0
 8004e72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004e74:	4b24      	ldr	r3, [pc, #144]	; (8004f08 <MX_RTC_Init+0xac>)
 8004e76:	4a25      	ldr	r2, [pc, #148]	; (8004f0c <MX_RTC_Init+0xb0>)
 8004e78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004e7a:	4b23      	ldr	r3, [pc, #140]	; (8004f08 <MX_RTC_Init+0xac>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004e80:	4b21      	ldr	r3, [pc, #132]	; (8004f08 <MX_RTC_Init+0xac>)
 8004e82:	227f      	movs	r2, #127	; 0x7f
 8004e84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004e86:	4b20      	ldr	r3, [pc, #128]	; (8004f08 <MX_RTC_Init+0xac>)
 8004e88:	22ff      	movs	r2, #255	; 0xff
 8004e8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004e8c:	4b1e      	ldr	r3, [pc, #120]	; (8004f08 <MX_RTC_Init+0xac>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004e92:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <MX_RTC_Init+0xac>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004e98:	4b1b      	ldr	r3, [pc, #108]	; (8004f08 <MX_RTC_Init+0xac>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004e9e:	481a      	ldr	r0, [pc, #104]	; (8004f08 <MX_RTC_Init+0xac>)
 8004ea0:	f003 fbfc 	bl	800869c <HAL_RTC_Init>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8004eaa:	f7fe fb35 	bl	8003518 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8004eae:	2307      	movs	r3, #7
 8004eb0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8004eb2:	233b      	movs	r3, #59	; 0x3b
 8004eb4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 8004eb6:	231e      	movs	r3, #30
 8004eb8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004ec2:	1d3b      	adds	r3, r7, #4
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	480f      	ldr	r0, [pc, #60]	; (8004f08 <MX_RTC_Init+0xac>)
 8004eca:	f003 fc5d 	bl	8008788 <HAL_RTC_SetTime>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004ed4:	f7fe fb20 	bl	8003518 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 8004ed8:	2305      	movs	r3, #5
 8004eda:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MARCH;
 8004edc:	2303      	movs	r3, #3
 8004ede:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8004ee4:	2318      	movs	r3, #24
 8004ee6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004ee8:	463b      	mov	r3, r7
 8004eea:	2200      	movs	r2, #0
 8004eec:	4619      	mov	r1, r3
 8004eee:	4806      	ldr	r0, [pc, #24]	; (8004f08 <MX_RTC_Init+0xac>)
 8004ef0:	f003 fd42 	bl	8008978 <HAL_RTC_SetDate>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004efa:	f7fe fb0d 	bl	8003518 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004efe:	bf00      	nop
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	2000075c 	.word	0x2000075c
 8004f0c:	40002800 	.word	0x40002800

08004f10 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b09a      	sub	sp, #104	; 0x68
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f18:	f107 030c 	add.w	r3, r7, #12
 8004f1c:	225c      	movs	r2, #92	; 0x5c
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4618      	mov	r0, r3
 8004f22:	f00a fca4 	bl	800f86e <memset>
  if(rtcHandle->Instance==RTC)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a0c      	ldr	r2, [pc, #48]	; (8004f5c <HAL_RTC_MspInit+0x4c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d111      	bne.n	8004f54 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004f30:	2320      	movs	r3, #32
 8004f32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f38:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f3a:	f107 030c 	add.w	r3, r7, #12
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f002 fbb4 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004f4a:	f7fe fae5 	bl	8003518 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <HAL_RTC_MspInit+0x50>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004f54:	bf00      	nop
 8004f56:	3768      	adds	r7, #104	; 0x68
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	40002800 	.word	0x40002800
 8004f60:	42470e3c 	.word	0x42470e3c

08004f64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <HAL_MspInit+0x54>)
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	4a11      	ldr	r2, [pc, #68]	; (8004fb8 <HAL_MspInit+0x54>)
 8004f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f78:	6453      	str	r3, [r2, #68]	; 0x44
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <HAL_MspInit+0x54>)
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_MspInit+0x54>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	4a0a      	ldr	r2, [pc, #40]	; (8004fb8 <HAL_MspInit+0x54>)
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6413      	str	r3, [r2, #64]	; 0x40
 8004f96:	4b08      	ldr	r3, [pc, #32]	; (8004fb8 <HAL_MspInit+0x54>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	210f      	movs	r1, #15
 8004fa6:	f06f 0001 	mvn.w	r0, #1
 8004faa:	f000 fc27 	bl	80057fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800

08004fbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b08c      	sub	sp, #48	; 0x30
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	4b2e      	ldr	r3, [pc, #184]	; (800508c <HAL_InitTick+0xd0>)
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	4a2d      	ldr	r2, [pc, #180]	; (800508c <HAL_InitTick+0xd0>)
 8004fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fda:	6453      	str	r3, [r2, #68]	; 0x44
 8004fdc:	4b2b      	ldr	r3, [pc, #172]	; (800508c <HAL_InitTick+0xd0>)
 8004fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fe8:	f107 020c 	add.w	r2, r7, #12
 8004fec:	f107 0310 	add.w	r3, r7, #16
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f002 fb28 	bl	8007648 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004ff8:	f002 fb12 	bl	8007620 <HAL_RCC_GetPCLK2Freq>
 8004ffc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	4a23      	ldr	r2, [pc, #140]	; (8005090 <HAL_InitTick+0xd4>)
 8005002:	fba2 2303 	umull	r2, r3, r2, r3
 8005006:	0c9b      	lsrs	r3, r3, #18
 8005008:	3b01      	subs	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 800500c:	4b21      	ldr	r3, [pc, #132]	; (8005094 <HAL_InitTick+0xd8>)
 800500e:	4a22      	ldr	r2, [pc, #136]	; (8005098 <HAL_InitTick+0xdc>)
 8005010:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8005012:	4b20      	ldr	r3, [pc, #128]	; (8005094 <HAL_InitTick+0xd8>)
 8005014:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005018:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800501a:	4a1e      	ldr	r2, [pc, #120]	; (8005094 <HAL_InitTick+0xd8>)
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8005020:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <HAL_InitTick+0xd8>)
 8005022:	2200      	movs	r2, #0
 8005024:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005026:	4b1b      	ldr	r3, [pc, #108]	; (8005094 <HAL_InitTick+0xd8>)
 8005028:	2200      	movs	r2, #0
 800502a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <HAL_InitTick+0xd8>)
 800502e:	2200      	movs	r2, #0
 8005030:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8005032:	4818      	ldr	r0, [pc, #96]	; (8005094 <HAL_InitTick+0xd8>)
 8005034:	f003 ff5a 	bl	8008eec <HAL_TIM_Base_Init>
 8005038:	4603      	mov	r3, r0
 800503a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800503e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005042:	2b00      	cmp	r3, #0
 8005044:	d11b      	bne.n	800507e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8005046:	4813      	ldr	r0, [pc, #76]	; (8005094 <HAL_InitTick+0xd8>)
 8005048:	f003 ffa0 	bl	8008f8c <HAL_TIM_Base_Start_IT>
 800504c:	4603      	mov	r3, r0
 800504e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005056:	2b00      	cmp	r3, #0
 8005058:	d111      	bne.n	800507e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800505a:	2019      	movs	r0, #25
 800505c:	f000 fbea 	bl	8005834 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d808      	bhi.n	8005078 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8005066:	2200      	movs	r2, #0
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	2019      	movs	r0, #25
 800506c:	f000 fbc6 	bl	80057fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005070:	4a0a      	ldr	r2, [pc, #40]	; (800509c <HAL_InitTick+0xe0>)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6013      	str	r3, [r2, #0]
 8005076:	e002      	b.n	800507e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800507e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005082:	4618      	mov	r0, r3
 8005084:	3730      	adds	r7, #48	; 0x30
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40023800 	.word	0x40023800
 8005090:	431bde83 	.word	0x431bde83
 8005094:	2000077c 	.word	0x2000077c
 8005098:	40014400 	.word	0x40014400
 800509c:	20000008 	.word	0x20000008

080050a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050a0:	b480      	push	{r7}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050a4:	e7fe      	b.n	80050a4 <NMI_Handler+0x4>

080050a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050a6:	b480      	push	{r7}
 80050a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050aa:	e7fe      	b.n	80050aa <HardFault_Handler+0x4>

080050ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050b0:	e7fe      	b.n	80050b0 <MemManage_Handler+0x4>

080050b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050b2:	b480      	push	{r7}
 80050b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050b6:	e7fe      	b.n	80050b6 <BusFault_Handler+0x4>

080050b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050bc:	e7fe      	b.n	80050bc <UsageFault_Handler+0x4>

080050be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050be:	b480      	push	{r7}
 80050c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050c2:	bf00      	nop
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80050d0:	4802      	ldr	r0, [pc, #8]	; (80050dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80050d2:	f004 f8ed 	bl	80092b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80050d6:	bf00      	nop
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	2000077c 	.word	0x2000077c

080050e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return 1;
 80050e4:	2301      	movs	r3, #1
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <_kill>:

int _kill(int pid, int sig)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050fa:	f00a fc61 	bl	800f9c0 <__errno>
 80050fe:	4603      	mov	r3, r0
 8005100:	2216      	movs	r2, #22
 8005102:	601a      	str	r2, [r3, #0]
  return -1;
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005108:	4618      	mov	r0, r3
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <_exit>:

void _exit (int status)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005118:	f04f 31ff 	mov.w	r1, #4294967295
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ffe7 	bl	80050f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005122:	e7fe      	b.n	8005122 <_exit+0x12>

08005124 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005130:	2300      	movs	r3, #0
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	e00a      	b.n	800514c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005136:	f3af 8000 	nop.w
 800513a:	4601      	mov	r1, r0
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	60ba      	str	r2, [r7, #8]
 8005142:	b2ca      	uxtb	r2, r1
 8005144:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	3301      	adds	r3, #1
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	429a      	cmp	r2, r3
 8005152:	dbf0      	blt.n	8005136 <_read+0x12>
  }

  return len;
 8005154:	687b      	ldr	r3, [r7, #4]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3718      	adds	r7, #24
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b086      	sub	sp, #24
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800516a:	2300      	movs	r3, #0
 800516c:	617b      	str	r3, [r7, #20]
 800516e:	e009      	b.n	8005184 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	60ba      	str	r2, [r7, #8]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	4618      	mov	r0, r3
 800517a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	3301      	adds	r3, #1
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	429a      	cmp	r2, r3
 800518a:	dbf1      	blt.n	8005170 <_write+0x12>
  }
  return len;
 800518c:	687b      	ldr	r3, [r7, #4]
}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <_close>:

int _close(int file)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051ae:	b480      	push	{r7}
 80051b0:	b083      	sub	sp, #12
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
 80051b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051be:	605a      	str	r2, [r3, #4]
  return 0;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <_isatty>:

int _isatty(int file)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80051d6:	2301      	movs	r3, #1
}
 80051d8:	4618      	mov	r0, r3
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005208:	4a14      	ldr	r2, [pc, #80]	; (800525c <_sbrk+0x5c>)
 800520a:	4b15      	ldr	r3, [pc, #84]	; (8005260 <_sbrk+0x60>)
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005214:	4b13      	ldr	r3, [pc, #76]	; (8005264 <_sbrk+0x64>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800521c:	4b11      	ldr	r3, [pc, #68]	; (8005264 <_sbrk+0x64>)
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <_sbrk+0x68>)
 8005220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005222:	4b10      	ldr	r3, [pc, #64]	; (8005264 <_sbrk+0x64>)
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4413      	add	r3, r2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	429a      	cmp	r2, r3
 800522e:	d207      	bcs.n	8005240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005230:	f00a fbc6 	bl	800f9c0 <__errno>
 8005234:	4603      	mov	r3, r0
 8005236:	220c      	movs	r2, #12
 8005238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800523a:	f04f 33ff 	mov.w	r3, #4294967295
 800523e:	e009      	b.n	8005254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005240:	4b08      	ldr	r3, [pc, #32]	; (8005264 <_sbrk+0x64>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005246:	4b07      	ldr	r3, [pc, #28]	; (8005264 <_sbrk+0x64>)
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4413      	add	r3, r2
 800524e:	4a05      	ldr	r2, [pc, #20]	; (8005264 <_sbrk+0x64>)
 8005250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005252:	68fb      	ldr	r3, [r7, #12]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20020000 	.word	0x20020000
 8005260:	00000800 	.word	0x00000800
 8005264:	200007c4 	.word	0x200007c4
 8005268:	20009790 	.word	0x20009790

0800526c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005270:	4b06      	ldr	r3, [pc, #24]	; (800528c <SystemInit+0x20>)
 8005272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005276:	4a05      	ldr	r2, [pc, #20]	; (800528c <SystemInit+0x20>)
 8005278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800527c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005280:	bf00      	nop
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	e000ed00 	.word	0xe000ed00

08005290 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b096      	sub	sp, #88	; 0x58
 8005294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005296:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	605a      	str	r2, [r3, #4]
 80052b8:	609a      	str	r2, [r3, #8]
 80052ba:	60da      	str	r2, [r3, #12]
 80052bc:	611a      	str	r2, [r3, #16]
 80052be:	615a      	str	r2, [r3, #20]
 80052c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	2220      	movs	r2, #32
 80052c6:	2100      	movs	r1, #0
 80052c8:	4618      	mov	r0, r3
 80052ca:	f00a fad0 	bl	800f86e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80052ce:	4b3e      	ldr	r3, [pc, #248]	; (80053c8 <MX_TIM8_Init+0x138>)
 80052d0:	4a3e      	ldr	r2, [pc, #248]	; (80053cc <MX_TIM8_Init+0x13c>)
 80052d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 39;
 80052d4:	4b3c      	ldr	r3, [pc, #240]	; (80053c8 <MX_TIM8_Init+0x138>)
 80052d6:	2227      	movs	r2, #39	; 0x27
 80052d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052da:	4b3b      	ldr	r3, [pc, #236]	; (80053c8 <MX_TIM8_Init+0x138>)
 80052dc:	2200      	movs	r2, #0
 80052de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80052e0:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <MX_TIM8_Init+0x138>)
 80052e2:	2263      	movs	r2, #99	; 0x63
 80052e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052e6:	4b38      	ldr	r3, [pc, #224]	; (80053c8 <MX_TIM8_Init+0x138>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80052ec:	4b36      	ldr	r3, [pc, #216]	; (80053c8 <MX_TIM8_Init+0x138>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052f2:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <MX_TIM8_Init+0x138>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80052f8:	4833      	ldr	r0, [pc, #204]	; (80053c8 <MX_TIM8_Init+0x138>)
 80052fa:	f003 fdf7 	bl	8008eec <HAL_TIM_Base_Init>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d001      	beq.n	8005308 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8005304:	f7fe f908 	bl	8003518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800530c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800530e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005312:	4619      	mov	r1, r3
 8005314:	482c      	ldr	r0, [pc, #176]	; (80053c8 <MX_TIM8_Init+0x138>)
 8005316:	f004 f995 	bl	8009644 <HAL_TIM_ConfigClockSource>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8005320:	f7fe f8fa 	bl	8003518 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005324:	4828      	ldr	r0, [pc, #160]	; (80053c8 <MX_TIM8_Init+0x138>)
 8005326:	f003 fea1 	bl	800906c <HAL_TIM_PWM_Init>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005330:	f7fe f8f2 	bl	8003518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005334:	2300      	movs	r3, #0
 8005336:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005338:	2300      	movs	r3, #0
 800533a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800533c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005340:	4619      	mov	r1, r3
 8005342:	4821      	ldr	r0, [pc, #132]	; (80053c8 <MX_TIM8_Init+0x138>)
 8005344:	f004 fd7e 	bl	8009e44 <HAL_TIMEx_MasterConfigSynchronization>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800534e:	f7fe f8e3 	bl	8003518 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005352:	2360      	movs	r3, #96	; 0x60
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800535a:	2300      	movs	r3, #0
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800535e:	2300      	movs	r3, #0
 8005360:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005366:	2300      	movs	r3, #0
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800536a:	2300      	movs	r3, #0
 800536c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800536e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005372:	2200      	movs	r2, #0
 8005374:	4619      	mov	r1, r3
 8005376:	4814      	ldr	r0, [pc, #80]	; (80053c8 <MX_TIM8_Init+0x138>)
 8005378:	f004 f8a2 	bl	80094c0 <HAL_TIM_PWM_ConfigChannel>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8005382:	f7fe f8c9 	bl	8003518 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005386:	2300      	movs	r3, #0
 8005388:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800539a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800539e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80053a4:	1d3b      	adds	r3, r7, #4
 80053a6:	4619      	mov	r1, r3
 80053a8:	4807      	ldr	r0, [pc, #28]	; (80053c8 <MX_TIM8_Init+0x138>)
 80053aa:	f004 fdc7 	bl	8009f3c <HAL_TIMEx_ConfigBreakDeadTime>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80053b4:	f7fe f8b0 	bl	8003518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80053b8:	4803      	ldr	r0, [pc, #12]	; (80053c8 <MX_TIM8_Init+0x138>)
 80053ba:	f000 f82b 	bl	8005414 <HAL_TIM_MspPostInit>

}
 80053be:	bf00      	nop
 80053c0:	3758      	adds	r7, #88	; 0x58
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	200007c8 	.word	0x200007c8
 80053cc:	40010400 	.word	0x40010400

080053d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a0b      	ldr	r2, [pc, #44]	; (800540c <HAL_TIM_Base_MspInit+0x3c>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d10d      	bne.n	80053fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
 80053e6:	4b0a      	ldr	r3, [pc, #40]	; (8005410 <HAL_TIM_Base_MspInit+0x40>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	4a09      	ldr	r2, [pc, #36]	; (8005410 <HAL_TIM_Base_MspInit+0x40>)
 80053ec:	f043 0302 	orr.w	r3, r3, #2
 80053f0:	6453      	str	r3, [r2, #68]	; 0x44
 80053f2:	4b07      	ldr	r3, [pc, #28]	; (8005410 <HAL_TIM_Base_MspInit+0x40>)
 80053f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010400 	.word	0x40010400
 8005410:	40023800 	.word	0x40023800

08005414 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a12      	ldr	r2, [pc, #72]	; (800547c <HAL_TIM_MspPostInit+0x68>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d11d      	bne.n	8005472 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	4b11      	ldr	r3, [pc, #68]	; (8005480 <HAL_TIM_MspPostInit+0x6c>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	4a10      	ldr	r2, [pc, #64]	; (8005480 <HAL_TIM_MspPostInit+0x6c>)
 8005440:	f043 0304 	orr.w	r3, r3, #4
 8005444:	6313      	str	r3, [r2, #48]	; 0x30
 8005446:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <HAL_TIM_MspPostInit+0x6c>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	f003 0304 	and.w	r3, r3, #4
 800544e:	60bb      	str	r3, [r7, #8]
 8005450:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = AENABLE_Pin;
 8005452:	2340      	movs	r3, #64	; 0x40
 8005454:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005456:	2302      	movs	r3, #2
 8005458:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005462:	2303      	movs	r3, #3
 8005464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AENABLE_GPIO_Port, &GPIO_InitStruct);
 8005466:	f107 030c 	add.w	r3, r7, #12
 800546a:	4619      	mov	r1, r3
 800546c:	4805      	ldr	r0, [pc, #20]	; (8005484 <HAL_TIM_MspPostInit+0x70>)
 800546e:	f000 f9ef 	bl	8005850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005472:	bf00      	nop
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	40010400 	.word	0x40010400
 8005480:	40023800 	.word	0x40023800
 8005484:	40020800 	.word	0x40020800

08005488 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800548c:	4b11      	ldr	r3, [pc, #68]	; (80054d4 <MX_USART2_UART_Init+0x4c>)
 800548e:	4a12      	ldr	r2, [pc, #72]	; (80054d8 <MX_USART2_UART_Init+0x50>)
 8005490:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005492:	4b10      	ldr	r3, [pc, #64]	; (80054d4 <MX_USART2_UART_Init+0x4c>)
 8005494:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005498:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800549a:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <MX_USART2_UART_Init+0x4c>)
 800549c:	2200      	movs	r2, #0
 800549e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80054a0:	4b0c      	ldr	r3, [pc, #48]	; (80054d4 <MX_USART2_UART_Init+0x4c>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <MX_USART2_UART_Init+0x4c>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80054ac:	4b09      	ldr	r3, [pc, #36]	; (80054d4 <MX_USART2_UART_Init+0x4c>)
 80054ae:	220c      	movs	r2, #12
 80054b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054b2:	4b08      	ldr	r3, [pc, #32]	; (80054d4 <MX_USART2_UART_Init+0x4c>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <MX_USART2_UART_Init+0x4c>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80054be:	4805      	ldr	r0, [pc, #20]	; (80054d4 <MX_USART2_UART_Init+0x4c>)
 80054c0:	f004 fda2 	bl	800a008 <HAL_UART_Init>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d001      	beq.n	80054ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80054ca:	f7fe f825 	bl	8003518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80054ce:	bf00      	nop
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000810 	.word	0x20000810
 80054d8:	40004400 	.word	0x40004400

080054dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	; 0x28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054e4:	f107 0314 	add.w	r3, r7, #20
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	605a      	str	r2, [r3, #4]
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	60da      	str	r2, [r3, #12]
 80054f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a19      	ldr	r2, [pc, #100]	; (8005560 <HAL_UART_MspInit+0x84>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d12b      	bne.n	8005556 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	4b18      	ldr	r3, [pc, #96]	; (8005564 <HAL_UART_MspInit+0x88>)
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	4a17      	ldr	r2, [pc, #92]	; (8005564 <HAL_UART_MspInit+0x88>)
 8005508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800550c:	6413      	str	r3, [r2, #64]	; 0x40
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <HAL_UART_MspInit+0x88>)
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	4b11      	ldr	r3, [pc, #68]	; (8005564 <HAL_UART_MspInit+0x88>)
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	4a10      	ldr	r2, [pc, #64]	; (8005564 <HAL_UART_MspInit+0x88>)
 8005524:	f043 0301 	orr.w	r3, r3, #1
 8005528:	6313      	str	r3, [r2, #48]	; 0x30
 800552a:	4b0e      	ldr	r3, [pc, #56]	; (8005564 <HAL_UART_MspInit+0x88>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005536:	230c      	movs	r3, #12
 8005538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553a:	2302      	movs	r3, #2
 800553c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005542:	2303      	movs	r3, #3
 8005544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005546:	2307      	movs	r3, #7
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800554a:	f107 0314 	add.w	r3, r7, #20
 800554e:	4619      	mov	r1, r3
 8005550:	4805      	ldr	r0, [pc, #20]	; (8005568 <HAL_UART_MspInit+0x8c>)
 8005552:	f000 f97d 	bl	8005850 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005556:	bf00      	nop
 8005558:	3728      	adds	r7, #40	; 0x28
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40004400 	.word	0x40004400
 8005564:	40023800 	.word	0x40023800
 8005568:	40020000 	.word	0x40020000

0800556c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800556c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005570:	480d      	ldr	r0, [pc, #52]	; (80055a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005572:	490e      	ldr	r1, [pc, #56]	; (80055ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005574:	4a0e      	ldr	r2, [pc, #56]	; (80055b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005578:	e002      	b.n	8005580 <LoopCopyDataInit>

0800557a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800557a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800557c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800557e:	3304      	adds	r3, #4

08005580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005584:	d3f9      	bcc.n	800557a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005586:	4a0b      	ldr	r2, [pc, #44]	; (80055b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005588:	4c0b      	ldr	r4, [pc, #44]	; (80055b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800558a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800558c:	e001      	b.n	8005592 <LoopFillZerobss>

0800558e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800558e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005590:	3204      	adds	r2, #4

08005592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005594:	d3fb      	bcc.n	800558e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005596:	f7ff fe69 	bl	800526c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800559a:	f00a fa17 	bl	800f9cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800559e:	f7fd ff1f 	bl	80033e0 <main>
  bx  lr    
 80055a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80055a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055ac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80055b0:	08012304 	.word	0x08012304
  ldr r2, =_sbss
 80055b4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80055b8:	2000978c 	.word	0x2000978c

080055bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055bc:	e7fe      	b.n	80055bc <ADC_IRQHandler>
	...

080055c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80055c4:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <HAL_Init+0x40>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a0d      	ldr	r2, [pc, #52]	; (8005600 <HAL_Init+0x40>)
 80055ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80055d0:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <HAL_Init+0x40>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <HAL_Init+0x40>)
 80055d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055dc:	4b08      	ldr	r3, [pc, #32]	; (8005600 <HAL_Init+0x40>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a07      	ldr	r2, [pc, #28]	; (8005600 <HAL_Init+0x40>)
 80055e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055e8:	2003      	movs	r0, #3
 80055ea:	f000 f8fc 	bl	80057e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80055ee:	200f      	movs	r0, #15
 80055f0:	f7ff fce4 	bl	8004fbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80055f4:	f7ff fcb6 	bl	8004f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40023c00 	.word	0x40023c00

08005604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005604:	b480      	push	{r7}
 8005606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <HAL_IncTick+0x20>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <HAL_IncTick+0x24>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4413      	add	r3, r2
 8005614:	4a04      	ldr	r2, [pc, #16]	; (8005628 <HAL_IncTick+0x24>)
 8005616:	6013      	str	r3, [r2, #0]
}
 8005618:	bf00      	nop
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c
 8005628:	20000854 	.word	0x20000854

0800562c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  return uwTick;
 8005630:	4b03      	ldr	r3, [pc, #12]	; (8005640 <HAL_GetTick+0x14>)
 8005632:	681b      	ldr	r3, [r3, #0]
}
 8005634:	4618      	mov	r0, r3
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20000854 	.word	0x20000854

08005644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800564c:	f7ff ffee 	bl	800562c <HAL_GetTick>
 8005650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d005      	beq.n	800566a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800565e:	4b0a      	ldr	r3, [pc, #40]	; (8005688 <HAL_Delay+0x44>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	461a      	mov	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800566a:	bf00      	nop
 800566c:	f7ff ffde 	bl	800562c <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	429a      	cmp	r2, r3
 800567a:	d8f7      	bhi.n	800566c <HAL_Delay+0x28>
  {
  }
}
 800567c:	bf00      	nop
 800567e:	bf00      	nop
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	2000000c 	.word	0x2000000c

0800568c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800568c:	b480      	push	{r7}
 800568e:	b085      	sub	sp, #20
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800569c:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <__NVIC_SetPriorityGrouping+0x44>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80056a8:	4013      	ands	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80056b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80056b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80056be:	4a04      	ldr	r2, [pc, #16]	; (80056d0 <__NVIC_SetPriorityGrouping+0x44>)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	60d3      	str	r3, [r2, #12]
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	e000ed00 	.word	0xe000ed00

080056d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80056d8:	4b04      	ldr	r3, [pc, #16]	; (80056ec <__NVIC_GetPriorityGrouping+0x18>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	0a1b      	lsrs	r3, r3, #8
 80056de:	f003 0307 	and.w	r3, r3, #7
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	e000ed00 	.word	0xe000ed00

080056f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	4603      	mov	r3, r0
 80056f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	db0b      	blt.n	800571a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005702:	79fb      	ldrb	r3, [r7, #7]
 8005704:	f003 021f 	and.w	r2, r3, #31
 8005708:	4907      	ldr	r1, [pc, #28]	; (8005728 <__NVIC_EnableIRQ+0x38>)
 800570a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800570e:	095b      	lsrs	r3, r3, #5
 8005710:	2001      	movs	r0, #1
 8005712:	fa00 f202 	lsl.w	r2, r0, r2
 8005716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	e000e100 	.word	0xe000e100

0800572c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	6039      	str	r1, [r7, #0]
 8005736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800573c:	2b00      	cmp	r3, #0
 800573e:	db0a      	blt.n	8005756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	b2da      	uxtb	r2, r3
 8005744:	490c      	ldr	r1, [pc, #48]	; (8005778 <__NVIC_SetPriority+0x4c>)
 8005746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800574a:	0112      	lsls	r2, r2, #4
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	440b      	add	r3, r1
 8005750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005754:	e00a      	b.n	800576c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	b2da      	uxtb	r2, r3
 800575a:	4908      	ldr	r1, [pc, #32]	; (800577c <__NVIC_SetPriority+0x50>)
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	3b04      	subs	r3, #4
 8005764:	0112      	lsls	r2, r2, #4
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	440b      	add	r3, r1
 800576a:	761a      	strb	r2, [r3, #24]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	e000e100 	.word	0xe000e100
 800577c:	e000ed00 	.word	0xe000ed00

08005780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005780:	b480      	push	{r7}
 8005782:	b089      	sub	sp, #36	; 0x24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f1c3 0307 	rsb	r3, r3, #7
 800579a:	2b04      	cmp	r3, #4
 800579c:	bf28      	it	cs
 800579e:	2304      	movcs	r3, #4
 80057a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	3304      	adds	r3, #4
 80057a6:	2b06      	cmp	r3, #6
 80057a8:	d902      	bls.n	80057b0 <NVIC_EncodePriority+0x30>
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	3b03      	subs	r3, #3
 80057ae:	e000      	b.n	80057b2 <NVIC_EncodePriority+0x32>
 80057b0:	2300      	movs	r3, #0
 80057b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057b4:	f04f 32ff 	mov.w	r2, #4294967295
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	fa02 f303 	lsl.w	r3, r2, r3
 80057be:	43da      	mvns	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	401a      	ands	r2, r3
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80057c8:	f04f 31ff 	mov.w	r1, #4294967295
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	fa01 f303 	lsl.w	r3, r1, r3
 80057d2:	43d9      	mvns	r1, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057d8:	4313      	orrs	r3, r2
         );
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3724      	adds	r7, #36	; 0x24
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e6:	b580      	push	{r7, lr}
 80057e8:	b082      	sub	sp, #8
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7ff ff4c 	bl	800568c <__NVIC_SetPriorityGrouping>
}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	4603      	mov	r3, r0
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800580a:	2300      	movs	r3, #0
 800580c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800580e:	f7ff ff61 	bl	80056d4 <__NVIC_GetPriorityGrouping>
 8005812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	68b9      	ldr	r1, [r7, #8]
 8005818:	6978      	ldr	r0, [r7, #20]
 800581a:	f7ff ffb1 	bl	8005780 <NVIC_EncodePriority>
 800581e:	4602      	mov	r2, r0
 8005820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005824:	4611      	mov	r1, r2
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff ff80 	bl	800572c <__NVIC_SetPriority>
}
 800582c:	bf00      	nop
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	4603      	mov	r3, r0
 800583c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800583e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff ff54 	bl	80056f0 <__NVIC_EnableIRQ>
}
 8005848:	bf00      	nop
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005850:	b480      	push	{r7}
 8005852:	b089      	sub	sp, #36	; 0x24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800585e:	2300      	movs	r3, #0
 8005860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005866:	2300      	movs	r3, #0
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	e165      	b.n	8005b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800586c:	2201      	movs	r2, #1
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	fa02 f303 	lsl.w	r3, r2, r3
 8005874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4013      	ands	r3, r2
 800587e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	429a      	cmp	r2, r3
 8005886:	f040 8154 	bne.w	8005b32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b01      	cmp	r3, #1
 8005894:	d005      	beq.n	80058a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d130      	bne.n	8005904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	005b      	lsls	r3, r3, #1
 80058ac:	2203      	movs	r2, #3
 80058ae:	fa02 f303 	lsl.w	r3, r2, r3
 80058b2:	43db      	mvns	r3, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4013      	ands	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	fa02 f303 	lsl.w	r3, r2, r3
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80058d8:	2201      	movs	r2, #1
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	fa02 f303 	lsl.w	r3, r2, r3
 80058e0:	43db      	mvns	r3, r3
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4013      	ands	r3, r2
 80058e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	091b      	lsrs	r3, r3, #4
 80058ee:	f003 0201 	and.w	r2, r3, #1
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	fa02 f303 	lsl.w	r3, r2, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	69ba      	ldr	r2, [r7, #24]
 8005902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	2b03      	cmp	r3, #3
 800590e:	d017      	beq.n	8005940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	2203      	movs	r2, #3
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	43db      	mvns	r3, r3
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	4013      	ands	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	fa02 f303 	lsl.w	r3, r2, r3
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	4313      	orrs	r3, r2
 8005938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d123      	bne.n	8005994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	08da      	lsrs	r2, r3, #3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3208      	adds	r2, #8
 8005954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	220f      	movs	r2, #15
 8005964:	fa02 f303 	lsl.w	r3, r2, r3
 8005968:	43db      	mvns	r3, r3
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	4013      	ands	r3, r2
 800596e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	fa02 f303 	lsl.w	r3, r2, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4313      	orrs	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	08da      	lsrs	r2, r3, #3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3208      	adds	r2, #8
 800598e:	69b9      	ldr	r1, [r7, #24]
 8005990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	2203      	movs	r2, #3
 80059a0:	fa02 f303 	lsl.w	r3, r2, r3
 80059a4:	43db      	mvns	r3, r3
 80059a6:	69ba      	ldr	r2, [r7, #24]
 80059a8:	4013      	ands	r3, r2
 80059aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f003 0203 	and.w	r2, r3, #3
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	fa02 f303 	lsl.w	r3, r2, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4313      	orrs	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80ae 	beq.w	8005b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	4b5d      	ldr	r3, [pc, #372]	; (8005b50 <HAL_GPIO_Init+0x300>)
 80059dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059de:	4a5c      	ldr	r2, [pc, #368]	; (8005b50 <HAL_GPIO_Init+0x300>)
 80059e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80059e4:	6453      	str	r3, [r2, #68]	; 0x44
 80059e6:	4b5a      	ldr	r3, [pc, #360]	; (8005b50 <HAL_GPIO_Init+0x300>)
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80059f2:	4a58      	ldr	r2, [pc, #352]	; (8005b54 <HAL_GPIO_Init+0x304>)
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	089b      	lsrs	r3, r3, #2
 80059f8:	3302      	adds	r3, #2
 80059fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	220f      	movs	r2, #15
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	4013      	ands	r3, r2
 8005a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a4f      	ldr	r2, [pc, #316]	; (8005b58 <HAL_GPIO_Init+0x308>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d025      	beq.n	8005a6a <HAL_GPIO_Init+0x21a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a4e      	ldr	r2, [pc, #312]	; (8005b5c <HAL_GPIO_Init+0x30c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01f      	beq.n	8005a66 <HAL_GPIO_Init+0x216>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a4d      	ldr	r2, [pc, #308]	; (8005b60 <HAL_GPIO_Init+0x310>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d019      	beq.n	8005a62 <HAL_GPIO_Init+0x212>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a4c      	ldr	r2, [pc, #304]	; (8005b64 <HAL_GPIO_Init+0x314>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <HAL_GPIO_Init+0x20e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a4b      	ldr	r2, [pc, #300]	; (8005b68 <HAL_GPIO_Init+0x318>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00d      	beq.n	8005a5a <HAL_GPIO_Init+0x20a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a4a      	ldr	r2, [pc, #296]	; (8005b6c <HAL_GPIO_Init+0x31c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d007      	beq.n	8005a56 <HAL_GPIO_Init+0x206>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a49      	ldr	r2, [pc, #292]	; (8005b70 <HAL_GPIO_Init+0x320>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d101      	bne.n	8005a52 <HAL_GPIO_Init+0x202>
 8005a4e:	2306      	movs	r3, #6
 8005a50:	e00c      	b.n	8005a6c <HAL_GPIO_Init+0x21c>
 8005a52:	2307      	movs	r3, #7
 8005a54:	e00a      	b.n	8005a6c <HAL_GPIO_Init+0x21c>
 8005a56:	2305      	movs	r3, #5
 8005a58:	e008      	b.n	8005a6c <HAL_GPIO_Init+0x21c>
 8005a5a:	2304      	movs	r3, #4
 8005a5c:	e006      	b.n	8005a6c <HAL_GPIO_Init+0x21c>
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e004      	b.n	8005a6c <HAL_GPIO_Init+0x21c>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e002      	b.n	8005a6c <HAL_GPIO_Init+0x21c>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <HAL_GPIO_Init+0x21c>
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	f002 0203 	and.w	r2, r2, #3
 8005a72:	0092      	lsls	r2, r2, #2
 8005a74:	4093      	lsls	r3, r2
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005a7c:	4935      	ldr	r1, [pc, #212]	; (8005b54 <HAL_GPIO_Init+0x304>)
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	089b      	lsrs	r3, r3, #2
 8005a82:	3302      	adds	r3, #2
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005a8a:	4b3a      	ldr	r3, [pc, #232]	; (8005b74 <HAL_GPIO_Init+0x324>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	43db      	mvns	r3, r3
 8005a94:	69ba      	ldr	r2, [r7, #24]
 8005a96:	4013      	ands	r3, r2
 8005a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005aae:	4a31      	ldr	r2, [pc, #196]	; (8005b74 <HAL_GPIO_Init+0x324>)
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ab4:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <HAL_GPIO_Init+0x324>)
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	43db      	mvns	r3, r3
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005ad0:	69ba      	ldr	r2, [r7, #24]
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ad8:	4a26      	ldr	r2, [pc, #152]	; (8005b74 <HAL_GPIO_Init+0x324>)
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005ade:	4b25      	ldr	r3, [pc, #148]	; (8005b74 <HAL_GPIO_Init+0x324>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4013      	ands	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005b02:	4a1c      	ldr	r2, [pc, #112]	; (8005b74 <HAL_GPIO_Init+0x324>)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b08:	4b1a      	ldr	r3, [pc, #104]	; (8005b74 <HAL_GPIO_Init+0x324>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	43db      	mvns	r3, r3
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4013      	ands	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005b2c:	4a11      	ldr	r2, [pc, #68]	; (8005b74 <HAL_GPIO_Init+0x324>)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	3301      	adds	r3, #1
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	2b0f      	cmp	r3, #15
 8005b3c:	f67f ae96 	bls.w	800586c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005b40:	bf00      	nop
 8005b42:	bf00      	nop
 8005b44:	3724      	adds	r7, #36	; 0x24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	40023800 	.word	0x40023800
 8005b54:	40013800 	.word	0x40013800
 8005b58:	40020000 	.word	0x40020000
 8005b5c:	40020400 	.word	0x40020400
 8005b60:	40020800 	.word	0x40020800
 8005b64:	40020c00 	.word	0x40020c00
 8005b68:	40021000 	.word	0x40021000
 8005b6c:	40021400 	.word	0x40021400
 8005b70:	40021800 	.word	0x40021800
 8005b74:	40013c00 	.word	0x40013c00

08005b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	807b      	strh	r3, [r7, #2]
 8005b84:	4613      	mov	r3, r2
 8005b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005b88:	787b      	ldrb	r3, [r7, #1]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005b8e:	887a      	ldrh	r2, [r7, #2]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005b94:	e003      	b.n	8005b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005b96:	887b      	ldrh	r3, [r7, #2]
 8005b98:	041a      	lsls	r2, r3, #16
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	619a      	str	r2, [r3, #24]
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e12b      	b.n	8005e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fd fb66 	bl	80032a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2224      	movs	r2, #36	; 0x24
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0201 	bic.w	r2, r2, #1
 8005bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005c10:	f001 fcf2 	bl	80075f8 <HAL_RCC_GetPCLK1Freq>
 8005c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4a81      	ldr	r2, [pc, #516]	; (8005e20 <HAL_I2C_Init+0x274>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d807      	bhi.n	8005c30 <HAL_I2C_Init+0x84>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a80      	ldr	r2, [pc, #512]	; (8005e24 <HAL_I2C_Init+0x278>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	bf94      	ite	ls
 8005c28:	2301      	movls	r3, #1
 8005c2a:	2300      	movhi	r3, #0
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	e006      	b.n	8005c3e <HAL_I2C_Init+0x92>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a7d      	ldr	r2, [pc, #500]	; (8005e28 <HAL_I2C_Init+0x27c>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	bf94      	ite	ls
 8005c38:	2301      	movls	r3, #1
 8005c3a:	2300      	movhi	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e0e7      	b.n	8005e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a78      	ldr	r2, [pc, #480]	; (8005e2c <HAL_I2C_Init+0x280>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	0c9b      	lsrs	r3, r3, #18
 8005c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	4a6a      	ldr	r2, [pc, #424]	; (8005e20 <HAL_I2C_Init+0x274>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d802      	bhi.n	8005c80 <HAL_I2C_Init+0xd4>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	e009      	b.n	8005c94 <HAL_I2C_Init+0xe8>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	4a69      	ldr	r2, [pc, #420]	; (8005e30 <HAL_I2C_Init+0x284>)
 8005c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c90:	099b      	lsrs	r3, r3, #6
 8005c92:	3301      	adds	r3, #1
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ca6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	495c      	ldr	r1, [pc, #368]	; (8005e20 <HAL_I2C_Init+0x274>)
 8005cb0:	428b      	cmp	r3, r1
 8005cb2:	d819      	bhi.n	8005ce8 <HAL_I2C_Init+0x13c>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1e59      	subs	r1, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cc2:	1c59      	adds	r1, r3, #1
 8005cc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005cc8:	400b      	ands	r3, r1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_I2C_Init+0x138>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1e59      	subs	r1, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005cdc:	3301      	adds	r3, #1
 8005cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ce2:	e051      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	e04f      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d111      	bne.n	8005d14 <HAL_I2C_Init+0x168>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	1e58      	subs	r0, r3, #1
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	440b      	add	r3, r1
 8005cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d02:	3301      	adds	r3, #1
 8005d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf0c      	ite	eq
 8005d0c:	2301      	moveq	r3, #1
 8005d0e:	2300      	movne	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	e012      	b.n	8005d3a <HAL_I2C_Init+0x18e>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	1e58      	subs	r0, r3, #1
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6859      	ldr	r1, [r3, #4]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	0099      	lsls	r1, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	bf0c      	ite	eq
 8005d34:	2301      	moveq	r3, #1
 8005d36:	2300      	movne	r3, #0
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_I2C_Init+0x196>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e022      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10e      	bne.n	8005d68 <HAL_I2C_Init+0x1bc>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1e58      	subs	r0, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6859      	ldr	r1, [r3, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	440b      	add	r3, r1
 8005d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d66:	e00f      	b.n	8005d88 <HAL_I2C_Init+0x1dc>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	1e58      	subs	r0, r3, #1
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6859      	ldr	r1, [r3, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	0099      	lsls	r1, r3, #2
 8005d78:	440b      	add	r3, r1
 8005d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d7e:	3301      	adds	r3, #1
 8005d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	6809      	ldr	r1, [r1, #0]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69da      	ldr	r2, [r3, #28]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	430a      	orrs	r2, r1
 8005daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005db6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	6911      	ldr	r1, [r2, #16]
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	68d2      	ldr	r2, [r2, #12]
 8005dc2:	4311      	orrs	r1, r2
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6812      	ldr	r2, [r2, #0]
 8005dc8:	430b      	orrs	r3, r1
 8005dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695a      	ldr	r2, [r3, #20]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f042 0201 	orr.w	r2, r2, #1
 8005df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2220      	movs	r2, #32
 8005e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	000186a0 	.word	0x000186a0
 8005e24:	001e847f 	.word	0x001e847f
 8005e28:	003d08ff 	.word	0x003d08ff
 8005e2c:	431bde83 	.word	0x431bde83
 8005e30:	10624dd3 	.word	0x10624dd3

08005e34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b088      	sub	sp, #32
 8005e38:	af02      	add	r7, sp, #8
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	460b      	mov	r3, r1
 8005e42:	817b      	strh	r3, [r7, #10]
 8005e44:	4613      	mov	r3, r2
 8005e46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005e48:	f7ff fbf0 	bl	800562c <HAL_GetTick>
 8005e4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	f040 80e0 	bne.w	800601c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	2319      	movs	r3, #25
 8005e62:	2201      	movs	r2, #1
 8005e64:	4970      	ldr	r1, [pc, #448]	; (8006028 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f001 f8f6 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
 8005e74:	e0d3      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_I2C_Master_Transmit+0x50>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e0cc      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d007      	beq.n	8005eaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0201 	orr.w	r2, r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005eb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2221      	movs	r2, #33	; 0x21
 8005ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2210      	movs	r2, #16
 8005ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	893a      	ldrh	r2, [r7, #8]
 8005eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee0:	b29a      	uxth	r2, r3
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4a50      	ldr	r2, [pc, #320]	; (800602c <HAL_I2C_Master_Transmit+0x1f8>)
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005eec:	8979      	ldrh	r1, [r7, #10]
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	6a3a      	ldr	r2, [r7, #32]
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 fde2 	bl	8006abc <I2C_MasterRequestWrite>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e08d      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f02:	2300      	movs	r3, #0
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005f18:	e066      	b.n	8005fe8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	6a39      	ldr	r1, [r7, #32]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f001 f970 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00d      	beq.n	8005f46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d107      	bne.n	8005f42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e06b      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	781a      	ldrb	r2, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b04      	cmp	r3, #4
 8005f82:	d11b      	bne.n	8005fbc <HAL_I2C_Master_Transmit+0x188>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d017      	beq.n	8005fbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f90:	781a      	ldrb	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	6a39      	ldr	r1, [r7, #32]
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f001 f960 	bl	8007286 <I2C_WaitOnBTFFlagUntilTimeout>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00d      	beq.n	8005fe8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d107      	bne.n	8005fe4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fe2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e01a      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d194      	bne.n	8005f1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ffe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006018:	2300      	movs	r3, #0
 800601a:	e000      	b.n	800601e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800601c:	2302      	movs	r3, #2
  }
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	00100002 	.word	0x00100002
 800602c:	ffff0000 	.word	0xffff0000

08006030 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08c      	sub	sp, #48	; 0x30
 8006034:	af02      	add	r7, sp, #8
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	607a      	str	r2, [r7, #4]
 800603a:	461a      	mov	r2, r3
 800603c:	460b      	mov	r3, r1
 800603e:	817b      	strh	r3, [r7, #10]
 8006040:	4613      	mov	r3, r2
 8006042:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006044:	f7ff faf2 	bl	800562c <HAL_GetTick>
 8006048:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b20      	cmp	r3, #32
 8006054:	f040 820b 	bne.w	800646e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	2319      	movs	r3, #25
 800605e:	2201      	movs	r2, #1
 8006060:	497c      	ldr	r1, [pc, #496]	; (8006254 <HAL_I2C_Master_Receive+0x224>)
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fff8 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
 8006070:	e1fe      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006078:	2b01      	cmp	r3, #1
 800607a:	d101      	bne.n	8006080 <HAL_I2C_Master_Receive+0x50>
 800607c:	2302      	movs	r3, #2
 800607e:	e1f7      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b01      	cmp	r3, #1
 8006094:	d007      	beq.n	80060a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2222      	movs	r2, #34	; 0x22
 80060ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2210      	movs	r2, #16
 80060c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	893a      	ldrh	r2, [r7, #8]
 80060d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060dc:	b29a      	uxth	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	4a5c      	ldr	r2, [pc, #368]	; (8006258 <HAL_I2C_Master_Receive+0x228>)
 80060e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80060e8:	8979      	ldrh	r1, [r7, #10]
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 fd66 	bl	8006bc0 <I2C_MasterRequestRead>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e1b8      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	d113      	bne.n	800612e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006106:	2300      	movs	r3, #0
 8006108:	623b      	str	r3, [r7, #32]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	623b      	str	r3, [r7, #32]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	623b      	str	r3, [r7, #32]
 800611a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e18c      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006132:	2b01      	cmp	r3, #1
 8006134:	d11b      	bne.n	800616e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006146:	2300      	movs	r3, #0
 8006148:	61fb      	str	r3, [r7, #28]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	61fb      	str	r3, [r7, #28]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	e16c      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006172:	2b02      	cmp	r3, #2
 8006174:	d11b      	bne.n	80061ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006184:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006194:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	695b      	ldr	r3, [r3, #20]
 80061a0:	61bb      	str	r3, [r7, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	69bb      	ldr	r3, [r7, #24]
 80061ac:	e14c      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	695b      	ldr	r3, [r3, #20]
 80061c8:	617b      	str	r3, [r7, #20]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	699b      	ldr	r3, [r3, #24]
 80061d0:	617b      	str	r3, [r7, #20]
 80061d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80061d4:	e138      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061da:	2b03      	cmp	r3, #3
 80061dc:	f200 80f1 	bhi.w	80063c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d123      	bne.n	8006230 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f001 f88b 	bl	8007308 <I2C_WaitOnRXNEFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e139      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	b2d2      	uxtb	r2, r2
 8006208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29a      	uxth	r2, r3
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800622e:	e10b      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006234:	2b02      	cmp	r3, #2
 8006236:	d14e      	bne.n	80062d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	2200      	movs	r2, #0
 8006240:	4906      	ldr	r1, [pc, #24]	; (800625c <HAL_I2C_Master_Receive+0x22c>)
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f000 ff08 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d008      	beq.n	8006260 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e10e      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
 8006252:	bf00      	nop
 8006254:	00100002 	.word	0x00100002
 8006258:	ffff0000 	.word	0xffff0000
 800625c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800626e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062be:	3b01      	subs	r3, #1
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062d4:	e0b8      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062dc:	2200      	movs	r2, #0
 80062de:	4966      	ldr	r1, [pc, #408]	; (8006478 <HAL_I2C_Master_Receive+0x448>)
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f000 feb9 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0bf      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006328:	b29b      	uxth	r3, r3
 800632a:	3b01      	subs	r3, #1
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006338:	2200      	movs	r2, #0
 800633a:	494f      	ldr	r1, [pc, #316]	; (8006478 <HAL_I2C_Master_Receive+0x448>)
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 fe8b 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e091      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800635a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006378:	3b01      	subs	r3, #1
 800637a:	b29a      	uxth	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006384:	b29b      	uxth	r3, r3
 8006386:	3b01      	subs	r3, #1
 8006388:	b29a      	uxth	r2, r3
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691a      	ldr	r2, [r3, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a0:	1c5a      	adds	r2, r3, #1
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80063c0:	e042      	b.n	8006448 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 ff9e 	bl	8007308 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e04c      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f2:	3b01      	subs	r3, #1
 80063f4:	b29a      	uxth	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d118      	bne.n	8006448 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	691a      	ldr	r2, [r3, #16]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	1c5a      	adds	r2, r3, #1
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006432:	3b01      	subs	r3, #1
 8006434:	b29a      	uxth	r2, r3
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f aec2 	bne.w	80061d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2220      	movs	r2, #32
 8006456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800646a:	2300      	movs	r3, #0
 800646c:	e000      	b.n	8006470 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800646e:	2302      	movs	r3, #2
  }
}
 8006470:	4618      	mov	r0, r3
 8006472:	3728      	adds	r7, #40	; 0x28
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	00010004 	.word	0x00010004

0800647c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b088      	sub	sp, #32
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	4608      	mov	r0, r1
 8006486:	4611      	mov	r1, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4603      	mov	r3, r0
 800648c:	817b      	strh	r3, [r7, #10]
 800648e:	460b      	mov	r3, r1
 8006490:	813b      	strh	r3, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006496:	f7ff f8c9 	bl	800562c <HAL_GetTick>
 800649a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b20      	cmp	r3, #32
 80064a6:	f040 80d9 	bne.w	800665c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	2319      	movs	r3, #25
 80064b0:	2201      	movs	r2, #1
 80064b2:	496d      	ldr	r1, [pc, #436]	; (8006668 <HAL_I2C_Mem_Write+0x1ec>)
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 fdcf 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d001      	beq.n	80064c4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80064c0:	2302      	movs	r3, #2
 80064c2:	e0cc      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d101      	bne.n	80064d2 <HAL_I2C_Mem_Write+0x56>
 80064ce:	2302      	movs	r3, #2
 80064d0:	e0c5      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d007      	beq.n	80064f8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0201 	orr.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006506:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2221      	movs	r2, #33	; 0x21
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2240      	movs	r2, #64	; 0x40
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6a3a      	ldr	r2, [r7, #32]
 8006522:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006528:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800652e:	b29a      	uxth	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4a4d      	ldr	r2, [pc, #308]	; (800666c <HAL_I2C_Mem_Write+0x1f0>)
 8006538:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800653a:	88f8      	ldrh	r0, [r7, #6]
 800653c:	893a      	ldrh	r2, [r7, #8]
 800653e:	8979      	ldrh	r1, [r7, #10]
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	9301      	str	r3, [sp, #4]
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	9300      	str	r3, [sp, #0]
 8006548:	4603      	mov	r3, r0
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 fc06 	bl	8006d5c <I2C_RequestMemoryWrite>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d052      	beq.n	80065fc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e081      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 fe50 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00d      	beq.n	8006586 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	2b04      	cmp	r3, #4
 8006570:	d107      	bne.n	8006582 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006580:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e06b      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	781a      	ldrb	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065a0:	3b01      	subs	r3, #1
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	695b      	ldr	r3, [r3, #20]
 80065bc:	f003 0304 	and.w	r3, r3, #4
 80065c0:	2b04      	cmp	r3, #4
 80065c2:	d11b      	bne.n	80065fc <HAL_I2C_Mem_Write+0x180>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d017      	beq.n	80065fc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e6:	3b01      	subs	r3, #1
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1aa      	bne.n	800655a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fe3c 	bl	8007286 <I2C_WaitOnBTFFlagUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00d      	beq.n	8006630 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	2b04      	cmp	r3, #4
 800661a:	d107      	bne.n	800662c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800662a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e016      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800663e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e000      	b.n	800665e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800665c:	2302      	movs	r3, #2
  }
}
 800665e:	4618      	mov	r0, r3
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	00100002 	.word	0x00100002
 800666c:	ffff0000 	.word	0xffff0000

08006670 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08c      	sub	sp, #48	; 0x30
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	4608      	mov	r0, r1
 800667a:	4611      	mov	r1, r2
 800667c:	461a      	mov	r2, r3
 800667e:	4603      	mov	r3, r0
 8006680:	817b      	strh	r3, [r7, #10]
 8006682:	460b      	mov	r3, r1
 8006684:	813b      	strh	r3, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800668a:	f7fe ffcf 	bl	800562c <HAL_GetTick>
 800668e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b20      	cmp	r3, #32
 800669a:	f040 8208 	bne.w	8006aae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	2319      	movs	r3, #25
 80066a4:	2201      	movs	r2, #1
 80066a6:	497b      	ldr	r1, [pc, #492]	; (8006894 <HAL_I2C_Mem_Read+0x224>)
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 fcd5 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
 80066b6:	e1fb      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d101      	bne.n	80066c6 <HAL_I2C_Mem_Read+0x56>
 80066c2:	2302      	movs	r3, #2
 80066c4:	e1f4      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d007      	beq.n	80066ec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0201 	orr.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2222      	movs	r2, #34	; 0x22
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2240      	movs	r2, #64	; 0x40
 8006708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006716:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800671c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4a5b      	ldr	r2, [pc, #364]	; (8006898 <HAL_I2C_Mem_Read+0x228>)
 800672c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800672e:	88f8      	ldrh	r0, [r7, #6]
 8006730:	893a      	ldrh	r2, [r7, #8]
 8006732:	8979      	ldrh	r1, [r7, #10]
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	4603      	mov	r3, r0
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 fba2 	bl	8006e88 <I2C_RequestMemoryRead>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e1b0      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d113      	bne.n	800677e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006756:	2300      	movs	r3, #0
 8006758:	623b      	str	r3, [r7, #32]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	623b      	str	r3, [r7, #32]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	623b      	str	r3, [r7, #32]
 800676a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800677a:	601a      	str	r2, [r3, #0]
 800677c:	e184      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006782:	2b01      	cmp	r3, #1
 8006784:	d11b      	bne.n	80067be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006794:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006796:	2300      	movs	r3, #0
 8006798:	61fb      	str	r3, [r7, #28]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	61fb      	str	r3, [r7, #28]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	61fb      	str	r3, [r7, #28]
 80067aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e164      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	d11b      	bne.n	80067fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e6:	2300      	movs	r3, #0
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	61bb      	str	r3, [r7, #24]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	61bb      	str	r3, [r7, #24]
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	e144      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067fe:	2300      	movs	r3, #0
 8006800:	617b      	str	r3, [r7, #20]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	617b      	str	r3, [r7, #20]
 8006812:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006814:	e138      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681a:	2b03      	cmp	r3, #3
 800681c:	f200 80f1 	bhi.w	8006a02 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006824:	2b01      	cmp	r3, #1
 8006826:	d123      	bne.n	8006870 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800682a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fd6b 	bl	8007308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e139      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	691a      	ldr	r2, [r3, #16]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800686e:	e10b      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006874:	2b02      	cmp	r3, #2
 8006876:	d14e      	bne.n	8006916 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800687e:	2200      	movs	r2, #0
 8006880:	4906      	ldr	r1, [pc, #24]	; (800689c <HAL_I2C_Mem_Read+0x22c>)
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 fbe8 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d008      	beq.n	80068a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e10e      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
 8006892:	bf00      	nop
 8006894:	00100002 	.word	0x00100002
 8006898:	ffff0000 	.word	0xffff0000
 800689c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d8:	b29b      	uxth	r3, r3
 80068da:	3b01      	subs	r3, #1
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006914:	e0b8      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800691c:	2200      	movs	r2, #0
 800691e:	4966      	ldr	r1, [pc, #408]	; (8006ab8 <HAL_I2C_Mem_Read+0x448>)
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 fb99 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e0bf      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800693e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	1c5a      	adds	r2, r3, #1
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800695c:	3b01      	subs	r3, #1
 800695e:	b29a      	uxth	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29a      	uxth	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006978:	2200      	movs	r2, #0
 800697a:	494f      	ldr	r1, [pc, #316]	; (8006ab8 <HAL_I2C_Mem_Read+0x448>)
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 fb6b 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e091      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800699a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691a      	ldr	r2, [r3, #16]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a6:	b2d2      	uxtb	r2, r2
 80069a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	3b01      	subs	r3, #1
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	691a      	ldr	r2, [r3, #16]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	b2d2      	uxtb	r2, r2
 80069da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a00:	e042      	b.n	8006a88 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 fc7e 	bl	8007308 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e04c      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	b2d2      	uxtb	r2, r2
 8006a22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a32:	3b01      	subs	r3, #1
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29a      	uxth	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	f003 0304 	and.w	r3, r3, #4
 8006a52:	2b04      	cmp	r3, #4
 8006a54:	d118      	bne.n	8006a88 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	691a      	ldr	r2, [r3, #16]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	1c5a      	adds	r2, r3, #1
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a72:	3b01      	subs	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f47f aec2 	bne.w	8006816 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2220      	movs	r2, #32
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e000      	b.n	8006ab0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006aae:	2302      	movs	r3, #2
  }
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3728      	adds	r7, #40	; 0x28
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	00010004 	.word	0x00010004

08006abc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af02      	add	r7, sp, #8
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	603b      	str	r3, [r7, #0]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d006      	beq.n	8006ae6 <I2C_MasterRequestWrite+0x2a>
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d003      	beq.n	8006ae6 <I2C_MasterRequestWrite+0x2a>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ae4:	d108      	bne.n	8006af8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e00b      	b.n	8006b10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006afc:	2b12      	cmp	r3, #18
 8006afe:	d107      	bne.n	8006b10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	9300      	str	r3, [sp, #0]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fa9b 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b36:	d103      	bne.n	8006b40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e035      	b.n	8006bb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b4c:	d108      	bne.n	8006b60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b4e:	897b      	ldrh	r3, [r7, #10]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b5c:	611a      	str	r2, [r3, #16]
 8006b5e:	e01b      	b.n	8006b98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006b60:	897b      	ldrh	r3, [r7, #10]
 8006b62:	11db      	asrs	r3, r3, #7
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 0306 	and.w	r3, r3, #6
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f063 030f 	orn	r3, r3, #15
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	490e      	ldr	r1, [pc, #56]	; (8006bb8 <I2C_MasterRequestWrite+0xfc>)
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 fac1 	bl	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e010      	b.n	8006bb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006b8e:	897b      	ldrh	r3, [r7, #10]
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	4907      	ldr	r1, [pc, #28]	; (8006bbc <I2C_MasterRequestWrite+0x100>)
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 fab1 	bl	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e000      	b.n	8006bb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3718      	adds	r7, #24
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}
 8006bb8:	00010008 	.word	0x00010008
 8006bbc:	00010002 	.word	0x00010002

08006bc0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b088      	sub	sp, #32
 8006bc4:	af02      	add	r7, sp, #8
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	607a      	str	r2, [r7, #4]
 8006bca:	603b      	str	r3, [r7, #0]
 8006bcc:	460b      	mov	r3, r1
 8006bce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006be4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b08      	cmp	r3, #8
 8006bea:	d006      	beq.n	8006bfa <I2C_MasterRequestRead+0x3a>
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d003      	beq.n	8006bfa <I2C_MasterRequestRead+0x3a>
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bf8:	d108      	bne.n	8006c0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	e00b      	b.n	8006c24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	2b11      	cmp	r3, #17
 8006c12:	d107      	bne.n	8006c24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fa11 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00d      	beq.n	8006c58 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c4a:	d103      	bne.n	8006c54 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e079      	b.n	8006d4c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c60:	d108      	bne.n	8006c74 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c62:	897b      	ldrh	r3, [r7, #10]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	f043 0301 	orr.w	r3, r3, #1
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	611a      	str	r2, [r3, #16]
 8006c72:	e05f      	b.n	8006d34 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c74:	897b      	ldrh	r3, [r7, #10]
 8006c76:	11db      	asrs	r3, r3, #7
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	f003 0306 	and.w	r3, r3, #6
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	f063 030f 	orn	r3, r3, #15
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4930      	ldr	r1, [pc, #192]	; (8006d54 <I2C_MasterRequestRead+0x194>)
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fa37 	bl	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e054      	b.n	8006d4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ca2:	897b      	ldrh	r3, [r7, #10]
 8006ca4:	b2da      	uxtb	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4929      	ldr	r1, [pc, #164]	; (8006d58 <I2C_MasterRequestRead+0x198>)
 8006cb2:	68f8      	ldr	r0, [r7, #12]
 8006cb4:	f000 fa27 	bl	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d001      	beq.n	8006cc2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e044      	b.n	8006d4c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	613b      	str	r3, [r7, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	613b      	str	r3, [r7, #16]
 8006cd6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 f9af 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00d      	beq.n	8006d1c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d0e:	d103      	bne.n	8006d18 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d16:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e017      	b.n	8006d4c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006d1c:	897b      	ldrh	r3, [r7, #10]
 8006d1e:	11db      	asrs	r3, r3, #7
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f003 0306 	and.w	r3, r3, #6
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	f063 030e 	orn	r3, r3, #14
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	4907      	ldr	r1, [pc, #28]	; (8006d58 <I2C_MasterRequestRead+0x198>)
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 f9e3 	bl	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e000      	b.n	8006d4c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	00010008 	.word	0x00010008
 8006d58:	00010002 	.word	0x00010002

08006d5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	4608      	mov	r0, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	817b      	strh	r3, [r7, #10]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	813b      	strh	r3, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 f960 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d00d      	beq.n	8006dba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dac:	d103      	bne.n	8006db6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006db4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e05f      	b.n	8006e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dba:	897b      	ldrh	r3, [r7, #10]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	6a3a      	ldr	r2, [r7, #32]
 8006dce:	492d      	ldr	r1, [pc, #180]	; (8006e84 <I2C_RequestMemoryWrite+0x128>)
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f998 	bl	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e04c      	b.n	8006e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006de0:	2300      	movs	r3, #0
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df8:	6a39      	ldr	r1, [r7, #32]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fa02 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00d      	beq.n	8006e22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e0a:	2b04      	cmp	r3, #4
 8006e0c:	d107      	bne.n	8006e1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e02b      	b.n	8006e7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d105      	bne.n	8006e34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e28:	893b      	ldrh	r3, [r7, #8]
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	611a      	str	r2, [r3, #16]
 8006e32:	e021      	b.n	8006e78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e34:	893b      	ldrh	r3, [r7, #8]
 8006e36:	0a1b      	lsrs	r3, r3, #8
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	b2da      	uxtb	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e44:	6a39      	ldr	r1, [r7, #32]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 f9dc 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00d      	beq.n	8006e6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d107      	bne.n	8006e6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e005      	b.n	8006e7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e6e:	893b      	ldrh	r3, [r7, #8]
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	00010002 	.word	0x00010002

08006e88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	4608      	mov	r0, r1
 8006e92:	4611      	mov	r1, r2
 8006e94:	461a      	mov	r2, r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	817b      	strh	r3, [r7, #10]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	813b      	strh	r3, [r7, #8]
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006eb0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f000 f8c2 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00d      	beq.n	8006ef6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ee8:	d103      	bne.n	8006ef2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e0aa      	b.n	800704c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ef6:	897b      	ldrh	r3, [r7, #10]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	461a      	mov	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	6a3a      	ldr	r2, [r7, #32]
 8006f0a:	4952      	ldr	r1, [pc, #328]	; (8007054 <I2C_RequestMemoryRead+0x1cc>)
 8006f0c:	68f8      	ldr	r0, [r7, #12]
 8006f0e:	f000 f8fa 	bl	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d001      	beq.n	8006f1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e097      	b.n	800704c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	617b      	str	r3, [r7, #20]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f34:	6a39      	ldr	r1, [r7, #32]
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 f964 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00d      	beq.n	8006f5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	d107      	bne.n	8006f5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e076      	b.n	800704c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d105      	bne.n	8006f70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f64:	893b      	ldrh	r3, [r7, #8]
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	611a      	str	r2, [r3, #16]
 8006f6e:	e021      	b.n	8006fb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f70:	893b      	ldrh	r3, [r7, #8]
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	b2da      	uxtb	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f80:	6a39      	ldr	r1, [r7, #32]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 f93e 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00d      	beq.n	8006faa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d107      	bne.n	8006fa6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e050      	b.n	800704c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006faa:	893b      	ldrh	r3, [r7, #8]
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb6:	6a39      	ldr	r1, [r7, #32]
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 f923 	bl	8007204 <I2C_WaitOnTXEFlagUntilTimeout>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00d      	beq.n	8006fe0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d107      	bne.n	8006fdc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e035      	b.n	800704c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	6a3b      	ldr	r3, [r7, #32]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f82b 	bl	8007058 <I2C_WaitOnFlagUntilTimeout>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00d      	beq.n	8007024 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007016:	d103      	bne.n	8007020 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800701e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e013      	b.n	800704c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007024:	897b      	ldrh	r3, [r7, #10]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	f043 0301 	orr.w	r3, r3, #1
 800702c:	b2da      	uxtb	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	6a3a      	ldr	r2, [r7, #32]
 8007038:	4906      	ldr	r1, [pc, #24]	; (8007054 <I2C_RequestMemoryRead+0x1cc>)
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f863 	bl	8007106 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e000      	b.n	800704c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	00010002 	.word	0x00010002

08007058 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	4613      	mov	r3, r2
 8007066:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007068:	e025      	b.n	80070b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007070:	d021      	beq.n	80070b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007072:	f7fe fadb 	bl	800562c <HAL_GetTick>
 8007076:	4602      	mov	r2, r0
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	1ad3      	subs	r3, r2, r3
 800707c:	683a      	ldr	r2, [r7, #0]
 800707e:	429a      	cmp	r2, r3
 8007080:	d302      	bcc.n	8007088 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d116      	bne.n	80070b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a2:	f043 0220 	orr.w	r2, r3, #32
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e023      	b.n	80070fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	0c1b      	lsrs	r3, r3, #16
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d10d      	bne.n	80070dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
 80070c6:	43da      	mvns	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4013      	ands	r3, r2
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	bf0c      	ite	eq
 80070d2:	2301      	moveq	r3, #1
 80070d4:	2300      	movne	r3, #0
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	461a      	mov	r2, r3
 80070da:	e00c      	b.n	80070f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	43da      	mvns	r2, r3
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	4013      	ands	r3, r2
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bf0c      	ite	eq
 80070ee:	2301      	moveq	r3, #1
 80070f0:	2300      	movne	r3, #0
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d0b6      	beq.n	800706a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}

08007106 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007106:	b580      	push	{r7, lr}
 8007108:	b084      	sub	sp, #16
 800710a:	af00      	add	r7, sp, #0
 800710c:	60f8      	str	r0, [r7, #12]
 800710e:	60b9      	str	r1, [r7, #8]
 8007110:	607a      	str	r2, [r7, #4]
 8007112:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007114:	e051      	b.n	80071ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007124:	d123      	bne.n	800716e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007134:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800713e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2220      	movs	r2, #32
 800714a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715a:	f043 0204 	orr.w	r2, r3, #4
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e046      	b.n	80071fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007174:	d021      	beq.n	80071ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007176:	f7fe fa59 	bl	800562c <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	429a      	cmp	r2, r3
 8007184:	d302      	bcc.n	800718c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d116      	bne.n	80071ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2220      	movs	r2, #32
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f043 0220 	orr.w	r2, r3, #32
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e020      	b.n	80071fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	0c1b      	lsrs	r3, r3, #16
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d10c      	bne.n	80071de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	43da      	mvns	r2, r3
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4013      	ands	r3, r2
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	bf14      	ite	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	2300      	moveq	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	e00b      	b.n	80071f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699b      	ldr	r3, [r3, #24]
 80071e4:	43da      	mvns	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	bf14      	ite	ne
 80071f0:	2301      	movne	r3, #1
 80071f2:	2300      	moveq	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d18d      	bne.n	8007116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007210:	e02d      	b.n	800726e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007212:	68f8      	ldr	r0, [r7, #12]
 8007214:	f000 f8ce 	bl	80073b4 <I2C_IsAcknowledgeFailed>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d001      	beq.n	8007222 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e02d      	b.n	800727e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007228:	d021      	beq.n	800726e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800722a:	f7fe f9ff 	bl	800562c <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	429a      	cmp	r2, r3
 8007238:	d302      	bcc.n	8007240 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d116      	bne.n	800726e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2220      	movs	r2, #32
 800724a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725a:	f043 0220 	orr.w	r2, r3, #32
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e007      	b.n	800727e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	695b      	ldr	r3, [r3, #20]
 8007274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007278:	2b80      	cmp	r3, #128	; 0x80
 800727a:	d1ca      	bne.n	8007212 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	60f8      	str	r0, [r7, #12]
 800728e:	60b9      	str	r1, [r7, #8]
 8007290:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007292:	e02d      	b.n	80072f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f88d 	bl	80073b4 <I2C_IsAcknowledgeFailed>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e02d      	b.n	8007300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d021      	beq.n	80072f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ac:	f7fe f9be 	bl	800562c <HAL_GetTick>
 80072b0:	4602      	mov	r2, r0
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	1ad3      	subs	r3, r2, r3
 80072b6:	68ba      	ldr	r2, [r7, #8]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d302      	bcc.n	80072c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d116      	bne.n	80072f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	f043 0220 	orr.w	r2, r3, #32
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e007      	b.n	8007300 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f003 0304 	and.w	r3, r3, #4
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d1ca      	bne.n	8007294 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007314:	e042      	b.n	800739c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	f003 0310 	and.w	r3, r3, #16
 8007320:	2b10      	cmp	r3, #16
 8007322:	d119      	bne.n	8007358 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f06f 0210 	mvn.w	r2, #16
 800732c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2220      	movs	r2, #32
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e029      	b.n	80073ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007358:	f7fe f968 	bl	800562c <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	429a      	cmp	r2, r3
 8007366:	d302      	bcc.n	800736e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d116      	bne.n	800739c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2220      	movs	r2, #32
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007388:	f043 0220 	orr.w	r2, r3, #32
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e007      	b.n	80073ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b40      	cmp	r3, #64	; 0x40
 80073a8:	d1b5      	bne.n	8007316 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ca:	d11b      	bne.n	8007404 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	f043 0204 	orr.w	r2, r3, #4
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	e000      	b.n	8007406 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
	...

08007414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e0cc      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007428:	4b68      	ldr	r3, [pc, #416]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 030f 	and.w	r3, r3, #15
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	429a      	cmp	r2, r3
 8007434:	d90c      	bls.n	8007450 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007436:	4b65      	ldr	r3, [pc, #404]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 8007438:	683a      	ldr	r2, [r7, #0]
 800743a:	b2d2      	uxtb	r2, r2
 800743c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800743e:	4b63      	ldr	r3, [pc, #396]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 030f 	and.w	r3, r3, #15
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	429a      	cmp	r2, r3
 800744a:	d001      	beq.n	8007450 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e0b8      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d020      	beq.n	800749e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007468:	4b59      	ldr	r3, [pc, #356]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	4a58      	ldr	r2, [pc, #352]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800746e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007472:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007480:	4b53      	ldr	r3, [pc, #332]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	4a52      	ldr	r2, [pc, #328]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800748a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800748c:	4b50      	ldr	r3, [pc, #320]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	494d      	ldr	r1, [pc, #308]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800749a:	4313      	orrs	r3, r2
 800749c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d044      	beq.n	8007534 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d107      	bne.n	80074c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074b2:	4b47      	ldr	r3, [pc, #284]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d119      	bne.n	80074f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e07f      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d003      	beq.n	80074d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d107      	bne.n	80074e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d2:	4b3f      	ldr	r3, [pc, #252]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e06f      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e2:	4b3b      	ldr	r3, [pc, #236]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e067      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074f2:	4b37      	ldr	r3, [pc, #220]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f023 0203 	bic.w	r2, r3, #3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	4934      	ldr	r1, [pc, #208]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007500:	4313      	orrs	r3, r2
 8007502:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007504:	f7fe f892 	bl	800562c <HAL_GetTick>
 8007508:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800750a:	e00a      	b.n	8007522 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800750c:	f7fe f88e 	bl	800562c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	f241 3288 	movw	r2, #5000	; 0x1388
 800751a:	4293      	cmp	r3, r2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e04f      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007522:	4b2b      	ldr	r3, [pc, #172]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	f003 020c 	and.w	r2, r3, #12
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	429a      	cmp	r2, r3
 8007532:	d1eb      	bne.n	800750c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007534:	4b25      	ldr	r3, [pc, #148]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 030f 	and.w	r3, r3, #15
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d20c      	bcs.n	800755c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007542:	4b22      	ldr	r3, [pc, #136]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	b2d2      	uxtb	r2, r2
 8007548:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800754a:	4b20      	ldr	r3, [pc, #128]	; (80075cc <HAL_RCC_ClockConfig+0x1b8>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 030f 	and.w	r3, r3, #15
 8007552:	683a      	ldr	r2, [r7, #0]
 8007554:	429a      	cmp	r2, r3
 8007556:	d001      	beq.n	800755c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e032      	b.n	80075c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b00      	cmp	r3, #0
 8007566:	d008      	beq.n	800757a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007568:	4b19      	ldr	r3, [pc, #100]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	4916      	ldr	r1, [pc, #88]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007576:	4313      	orrs	r3, r2
 8007578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d009      	beq.n	800759a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007586:	4b12      	ldr	r3, [pc, #72]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	691b      	ldr	r3, [r3, #16]
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	490e      	ldr	r1, [pc, #56]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 8007596:	4313      	orrs	r3, r2
 8007598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800759a:	f000 fbb1 	bl	8007d00 <HAL_RCC_GetSysClockFreq>
 800759e:	4602      	mov	r2, r0
 80075a0:	4b0b      	ldr	r3, [pc, #44]	; (80075d0 <HAL_RCC_ClockConfig+0x1bc>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	490a      	ldr	r1, [pc, #40]	; (80075d4 <HAL_RCC_ClockConfig+0x1c0>)
 80075ac:	5ccb      	ldrb	r3, [r1, r3]
 80075ae:	fa22 f303 	lsr.w	r3, r2, r3
 80075b2:	4a09      	ldr	r2, [pc, #36]	; (80075d8 <HAL_RCC_ClockConfig+0x1c4>)
 80075b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075b6:	4b09      	ldr	r3, [pc, #36]	; (80075dc <HAL_RCC_ClockConfig+0x1c8>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fd fcfe 	bl	8004fbc <HAL_InitTick>

  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	40023c00 	.word	0x40023c00
 80075d0:	40023800 	.word	0x40023800
 80075d4:	08011f68 	.word	0x08011f68
 80075d8:	20000004 	.word	0x20000004
 80075dc:	20000008 	.word	0x20000008

080075e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075e4:	4b03      	ldr	r3, [pc, #12]	; (80075f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80075e6:	681b      	ldr	r3, [r3, #0]
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	20000004 	.word	0x20000004

080075f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075fc:	f7ff fff0 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 8007600:	4602      	mov	r2, r0
 8007602:	4b05      	ldr	r3, [pc, #20]	; (8007618 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	0a9b      	lsrs	r3, r3, #10
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	4903      	ldr	r1, [pc, #12]	; (800761c <HAL_RCC_GetPCLK1Freq+0x24>)
 800760e:	5ccb      	ldrb	r3, [r1, r3]
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40023800 	.word	0x40023800
 800761c:	08011f78 	.word	0x08011f78

08007620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007624:	f7ff ffdc 	bl	80075e0 <HAL_RCC_GetHCLKFreq>
 8007628:	4602      	mov	r2, r0
 800762a:	4b05      	ldr	r3, [pc, #20]	; (8007640 <HAL_RCC_GetPCLK2Freq+0x20>)
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	0b5b      	lsrs	r3, r3, #13
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	4903      	ldr	r1, [pc, #12]	; (8007644 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007636:	5ccb      	ldrb	r3, [r1, r3]
 8007638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800763c:	4618      	mov	r0, r3
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40023800 	.word	0x40023800
 8007644:	08011f78 	.word	0x08011f78

08007648 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	220f      	movs	r2, #15
 8007656:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007658:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 0203 	and.w	r2, r3, #3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007664:	4b0f      	ldr	r3, [pc, #60]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007670:	4b0c      	ldr	r3, [pc, #48]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800767c:	4b09      	ldr	r3, [pc, #36]	; (80076a4 <HAL_RCC_GetClockConfig+0x5c>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	08db      	lsrs	r3, r3, #3
 8007682:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800768a:	4b07      	ldr	r3, [pc, #28]	; (80076a8 <HAL_RCC_GetClockConfig+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 020f 	and.w	r2, r3, #15
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	601a      	str	r2, [r3, #0]
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800
 80076a8:	40023c00 	.word	0x40023c00

080076ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08c      	sub	sp, #48	; 0x30
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80076b4:	2300      	movs	r3, #0
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80076bc:	2300      	movs	r3, #0
 80076be:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d010      	beq.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80076e4:	4b6f      	ldr	r3, [pc, #444]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f2:	496c      	ldr	r1, [pc, #432]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007702:	2301      	movs	r3, #1
 8007704:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f003 0302 	and.w	r3, r3, #2
 800770e:	2b00      	cmp	r3, #0
 8007710:	d010      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007712:	4b64      	ldr	r3, [pc, #400]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007718:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007720:	4960      	ldr	r1, [pc, #384]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007722:	4313      	orrs	r3, r2
 8007724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007730:	2301      	movs	r3, #1
 8007732:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d017      	beq.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007740:	4b58      	ldr	r3, [pc, #352]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	4955      	ldr	r1, [pc, #340]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800775e:	d101      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007760:	2301      	movs	r3, #1
 8007762:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800776c:	2301      	movs	r3, #1
 800776e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0308 	and.w	r3, r3, #8
 8007778:	2b00      	cmp	r3, #0
 800777a:	d017      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800777c:	4b49      	ldr	r3, [pc, #292]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800777e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007782:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800778a:	4946      	ldr	r1, [pc, #280]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800778c:	4313      	orrs	r3, r2
 800778e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007796:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800779a:	d101      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800779c:	2301      	movs	r3, #1
 800779e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80077a8:	2301      	movs	r3, #1
 80077aa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 808a 	beq.w	80078ce <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	4b39      	ldr	r3, [pc, #228]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	4a38      	ldr	r2, [pc, #224]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c8:	6413      	str	r3, [r2, #64]	; 0x40
 80077ca:	4b36      	ldr	r3, [pc, #216]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d2:	60bb      	str	r3, [r7, #8]
 80077d4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80077d6:	4b34      	ldr	r3, [pc, #208]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a33      	ldr	r2, [pc, #204]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077e2:	f7fd ff23 	bl	800562c <HAL_GetTick>
 80077e6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077e8:	e008      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80077ea:	f7fd ff1f 	bl	800562c <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d901      	bls.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e278      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80077fc:	4b2a      	ldr	r3, [pc, #168]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0f0      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007808:	4b26      	ldr	r3, [pc, #152]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007810:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d02f      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007820:	6a3a      	ldr	r2, [r7, #32]
 8007822:	429a      	cmp	r2, r3
 8007824:	d028      	beq.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007826:	4b1f      	ldr	r3, [pc, #124]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007830:	4b1e      	ldr	r3, [pc, #120]	; (80078ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007832:	2201      	movs	r2, #1
 8007834:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007836:	4b1d      	ldr	r3, [pc, #116]	; (80078ac <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007838:	2200      	movs	r2, #0
 800783a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800783c:	4a19      	ldr	r2, [pc, #100]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007842:	4b18      	ldr	r3, [pc, #96]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	2b01      	cmp	r3, #1
 800784c:	d114      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800784e:	f7fd feed 	bl	800562c <HAL_GetTick>
 8007852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007854:	e00a      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007856:	f7fd fee9 	bl	800562c <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	f241 3288 	movw	r2, #5000	; 0x1388
 8007864:	4293      	cmp	r3, r2
 8007866:	d901      	bls.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007868:	2303      	movs	r3, #3
 800786a:	e240      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800786c:	4b0d      	ldr	r3, [pc, #52]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800786e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d0ee      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007880:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007884:	d114      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007886:	4b07      	ldr	r3, [pc, #28]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800789a:	4902      	ldr	r1, [pc, #8]	; (80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800789c:	4313      	orrs	r3, r2
 800789e:	608b      	str	r3, [r1, #8]
 80078a0:	e00c      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80078a2:	bf00      	nop
 80078a4:	40023800 	.word	0x40023800
 80078a8:	40007000 	.word	0x40007000
 80078ac:	42470e40 	.word	0x42470e40
 80078b0:	4b4a      	ldr	r3, [pc, #296]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	4a49      	ldr	r2, [pc, #292]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078ba:	6093      	str	r3, [r2, #8]
 80078bc:	4b47      	ldr	r3, [pc, #284]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078c8:	4944      	ldr	r1, [pc, #272]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0310 	and.w	r3, r3, #16
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d004      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80078e0:	4b3f      	ldr	r3, [pc, #252]	; (80079e0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80078e2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d00a      	beq.n	8007906 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80078f0:	4b3a      	ldr	r3, [pc, #232]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80078f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80078f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fe:	4937      	ldr	r1, [pc, #220]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007900:	4313      	orrs	r3, r2
 8007902:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790e:	2b00      	cmp	r3, #0
 8007910:	d00a      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007912:	4b32      	ldr	r3, [pc, #200]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007918:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007920:	492e      	ldr	r1, [pc, #184]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007922:	4313      	orrs	r3, r2
 8007924:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007930:	2b00      	cmp	r3, #0
 8007932:	d011      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007934:	4b29      	ldr	r3, [pc, #164]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800793a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007942:	4926      	ldr	r1, [pc, #152]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007944:	4313      	orrs	r3, r2
 8007946:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007952:	d101      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007954:	2301      	movs	r3, #1
 8007956:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007964:	4b1d      	ldr	r3, [pc, #116]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800796a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007972:	491a      	ldr	r1, [pc, #104]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007974:	4313      	orrs	r3, r2
 8007976:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007982:	2b00      	cmp	r3, #0
 8007984:	d011      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007986:	4b15      	ldr	r3, [pc, #84]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800798c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007994:	4911      	ldr	r1, [pc, #68]	; (80079dc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007996:	4313      	orrs	r3, r2
 8007998:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079a4:	d101      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80079a6:	2301      	movs	r3, #1
 80079a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80079aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d005      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b8:	f040 80ff 	bne.w	8007bba <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079bc:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079be:	2200      	movs	r2, #0
 80079c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80079c2:	f7fd fe33 	bl	800562c <HAL_GetTick>
 80079c6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079c8:	e00e      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80079ca:	f7fd fe2f 	bl	800562c <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d907      	bls.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e188      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x642>
 80079dc:	40023800 	.word	0x40023800
 80079e0:	424711e0 	.word	0x424711e0
 80079e4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079e8:	4b7e      	ldr	r3, [pc, #504]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d1ea      	bne.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d003      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d009      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d028      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d124      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a1c:	4b71      	ldr	r3, [pc, #452]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a22:	0c1b      	lsrs	r3, r3, #16
 8007a24:	f003 0303 	and.w	r3, r3, #3
 8007a28:	3301      	adds	r3, #1
 8007a2a:	005b      	lsls	r3, r3, #1
 8007a2c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007a2e:	4b6d      	ldr	r3, [pc, #436]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a34:	0e1b      	lsrs	r3, r3, #24
 8007a36:	f003 030f 	and.w	r3, r3, #15
 8007a3a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	019b      	lsls	r3, r3, #6
 8007a46:	431a      	orrs	r2, r3
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	085b      	lsrs	r3, r3, #1
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	041b      	lsls	r3, r3, #16
 8007a50:	431a      	orrs	r2, r3
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	061b      	lsls	r3, r3, #24
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	695b      	ldr	r3, [r3, #20]
 8007a5c:	071b      	lsls	r3, r3, #28
 8007a5e:	4961      	ldr	r1, [pc, #388]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0304 	and.w	r3, r3, #4
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d004      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a7a:	d00a      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d035      	beq.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a90:	d130      	bne.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007a92:	4b54      	ldr	r3, [pc, #336]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a98:	0c1b      	lsrs	r3, r3, #16
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007aa4:	4b4f      	ldr	r3, [pc, #316]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aaa:	0f1b      	lsrs	r3, r3, #28
 8007aac:	f003 0307 	and.w	r3, r3, #7
 8007ab0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685a      	ldr	r2, [r3, #4]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	019b      	lsls	r3, r3, #6
 8007abc:	431a      	orrs	r2, r3
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	085b      	lsrs	r3, r3, #1
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	041b      	lsls	r3, r3, #16
 8007ac6:	431a      	orrs	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	061b      	lsls	r3, r3, #24
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	071b      	lsls	r3, r3, #28
 8007ad4:	4943      	ldr	r1, [pc, #268]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007adc:	4b41      	ldr	r3, [pc, #260]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ade:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae2:	f023 021f 	bic.w	r2, r3, #31
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aea:	3b01      	subs	r3, #1
 8007aec:	493d      	ldr	r1, [pc, #244]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007aee:	4313      	orrs	r3, r2
 8007af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d029      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b08:	d124      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007b0a:	4b36      	ldr	r3, [pc, #216]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b10:	0c1b      	lsrs	r3, r3, #16
 8007b12:	f003 0303 	and.w	r3, r3, #3
 8007b16:	3301      	adds	r3, #1
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007b1c:	4b31      	ldr	r3, [pc, #196]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b22:	0f1b      	lsrs	r3, r3, #28
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	019b      	lsls	r3, r3, #6
 8007b34:	431a      	orrs	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	085b      	lsrs	r3, r3, #1
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	041b      	lsls	r3, r3, #16
 8007b40:	431a      	orrs	r2, r3
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	061b      	lsls	r3, r3, #24
 8007b46:	431a      	orrs	r2, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	071b      	lsls	r3, r3, #28
 8007b4c:	4925      	ldr	r1, [pc, #148]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d016      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	019b      	lsls	r3, r3, #6
 8007b6a:	431a      	orrs	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	085b      	lsrs	r3, r3, #1
 8007b72:	3b01      	subs	r3, #1
 8007b74:	041b      	lsls	r3, r3, #16
 8007b76:	431a      	orrs	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	691b      	ldr	r3, [r3, #16]
 8007b7c:	061b      	lsls	r3, r3, #24
 8007b7e:	431a      	orrs	r2, r3
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	071b      	lsls	r3, r3, #28
 8007b86:	4917      	ldr	r1, [pc, #92]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b8e:	4b16      	ldr	r3, [pc, #88]	; (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007b90:	2201      	movs	r2, #1
 8007b92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007b94:	f7fd fd4a 	bl	800562c <HAL_GetTick>
 8007b98:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b9a:	e008      	b.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007b9c:	f7fd fd46 	bl	800562c <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e09f      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bae:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d0f0      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	f040 8095 	bne.w	8007cec <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007bc2:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007bc8:	f7fd fd30 	bl	800562c <HAL_GetTick>
 8007bcc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007bce:	e00f      	b.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007bd0:	f7fd fd2c 	bl	800562c <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d908      	bls.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e085      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007be2:	bf00      	nop
 8007be4:	40023800 	.word	0x40023800
 8007be8:	42470068 	.word	0x42470068
 8007bec:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007bf0:	4b41      	ldr	r3, [pc, #260]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bfc:	d0e8      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0304 	and.w	r3, r3, #4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d003      	beq.n	8007c12 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d02b      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d127      	bne.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007c26:	4b34      	ldr	r3, [pc, #208]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2c:	0c1b      	lsrs	r3, r3, #16
 8007c2e:	f003 0303 	and.w	r3, r3, #3
 8007c32:	3301      	adds	r3, #1
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	019b      	lsls	r3, r3, #6
 8007c42:	431a      	orrs	r2, r3
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	085b      	lsrs	r3, r3, #1
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	061b      	lsls	r3, r3, #24
 8007c54:	4928      	ldr	r1, [pc, #160]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c5c:	4b26      	ldr	r3, [pc, #152]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c62:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	4922      	ldr	r1, [pc, #136]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d01d      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c8a:	d118      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c92:	0e1b      	lsrs	r3, r3, #24
 8007c94:	f003 030f 	and.w	r3, r3, #15
 8007c98:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	699a      	ldr	r2, [r3, #24]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	019b      	lsls	r3, r3, #6
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	3b01      	subs	r3, #1
 8007cae:	041b      	lsls	r3, r3, #16
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	061b      	lsls	r3, r3, #24
 8007cb6:	4910      	ldr	r1, [pc, #64]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cc4:	f7fd fcb2 	bl	800562c <HAL_GetTick>
 8007cc8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cca:	e008      	b.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007ccc:	f7fd fcae 	bl	800562c <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d901      	bls.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e007      	b.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cde:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cea:	d1ef      	bne.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3730      	adds	r7, #48	; 0x30
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	40023800 	.word	0x40023800
 8007cfc:	42470070 	.word	0x42470070

08007d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d04:	b0ae      	sub	sp, #184	; 0xb8
 8007d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d26:	4bcb      	ldr	r3, [pc, #812]	; (8008054 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 030c 	and.w	r3, r3, #12
 8007d2e:	2b0c      	cmp	r3, #12
 8007d30:	f200 8206 	bhi.w	8008140 <HAL_RCC_GetSysClockFreq+0x440>
 8007d34:	a201      	add	r2, pc, #4	; (adr r2, 8007d3c <HAL_RCC_GetSysClockFreq+0x3c>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007d71 	.word	0x08007d71
 8007d40:	08008141 	.word	0x08008141
 8007d44:	08008141 	.word	0x08008141
 8007d48:	08008141 	.word	0x08008141
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	08008141 	.word	0x08008141
 8007d54:	08008141 	.word	0x08008141
 8007d58:	08008141 	.word	0x08008141
 8007d5c:	08007d81 	.word	0x08007d81
 8007d60:	08008141 	.word	0x08008141
 8007d64:	08008141 	.word	0x08008141
 8007d68:	08008141 	.word	0x08008141
 8007d6c:	08007f71 	.word	0x08007f71
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d70:	4bb9      	ldr	r3, [pc, #740]	; (8008058 <HAL_RCC_GetSysClockFreq+0x358>)
 8007d72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8007d76:	e1e7      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d78:	4bb8      	ldr	r3, [pc, #736]	; (800805c <HAL_RCC_GetSysClockFreq+0x35c>)
 8007d7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007d7e:	e1e3      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d80:	4bb4      	ldr	r3, [pc, #720]	; (8008054 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d8c:	4bb1      	ldr	r3, [pc, #708]	; (8008054 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d071      	beq.n	8007e7c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d98:	4bae      	ldr	r3, [pc, #696]	; (8008054 <HAL_RCC_GetSysClockFreq+0x354>)
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	099b      	lsrs	r3, r3, #6
 8007d9e:	2200      	movs	r2, #0
 8007da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007da4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8007da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007db4:	2300      	movs	r3, #0
 8007db6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007dba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007dbe:	4622      	mov	r2, r4
 8007dc0:	462b      	mov	r3, r5
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f04f 0100 	mov.w	r1, #0
 8007dca:	0159      	lsls	r1, r3, #5
 8007dcc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dd0:	0150      	lsls	r0, r2, #5
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	1a51      	subs	r1, r2, r1
 8007dda:	6439      	str	r1, [r7, #64]	; 0x40
 8007ddc:	4629      	mov	r1, r5
 8007dde:	eb63 0301 	sbc.w	r3, r3, r1
 8007de2:	647b      	str	r3, [r7, #68]	; 0x44
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	f04f 0300 	mov.w	r3, #0
 8007dec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8007df0:	4649      	mov	r1, r9
 8007df2:	018b      	lsls	r3, r1, #6
 8007df4:	4641      	mov	r1, r8
 8007df6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	018a      	lsls	r2, r1, #6
 8007dfe:	4641      	mov	r1, r8
 8007e00:	1a51      	subs	r1, r2, r1
 8007e02:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e04:	4649      	mov	r1, r9
 8007e06:	eb63 0301 	sbc.w	r3, r3, r1
 8007e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8007e18:	4649      	mov	r1, r9
 8007e1a:	00cb      	lsls	r3, r1, #3
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e22:	4641      	mov	r1, r8
 8007e24:	00ca      	lsls	r2, r1, #3
 8007e26:	4610      	mov	r0, r2
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	189b      	adds	r3, r3, r2
 8007e30:	633b      	str	r3, [r7, #48]	; 0x30
 8007e32:	462b      	mov	r3, r5
 8007e34:	460a      	mov	r2, r1
 8007e36:	eb42 0303 	adc.w	r3, r2, r3
 8007e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e3c:	f04f 0200 	mov.w	r2, #0
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007e48:	4629      	mov	r1, r5
 8007e4a:	024b      	lsls	r3, r1, #9
 8007e4c:	4621      	mov	r1, r4
 8007e4e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e52:	4621      	mov	r1, r4
 8007e54:	024a      	lsls	r2, r1, #9
 8007e56:	4610      	mov	r0, r2
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e68:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8007e6c:	f7f8 ff2c 	bl	8000cc8 <__aeabi_uldivmod>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4613      	mov	r3, r2
 8007e76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e7a:	e067      	b.n	8007f4c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e7c:	4b75      	ldr	r3, [pc, #468]	; (8008054 <HAL_RCC_GetSysClockFreq+0x354>)
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	099b      	lsrs	r3, r3, #6
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e88:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8007e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e94:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e96:	2300      	movs	r3, #0
 8007e98:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007e9a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	f04f 0000 	mov.w	r0, #0
 8007ea6:	f04f 0100 	mov.w	r1, #0
 8007eaa:	0159      	lsls	r1, r3, #5
 8007eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eb0:	0150      	lsls	r0, r2, #5
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	1a51      	subs	r1, r2, r1
 8007eba:	62b9      	str	r1, [r7, #40]	; 0x28
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8007ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ec4:	f04f 0200 	mov.w	r2, #0
 8007ec8:	f04f 0300 	mov.w	r3, #0
 8007ecc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	018b      	lsls	r3, r1, #6
 8007ed4:	4641      	mov	r1, r8
 8007ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007eda:	4641      	mov	r1, r8
 8007edc:	018a      	lsls	r2, r1, #6
 8007ede:	4641      	mov	r1, r8
 8007ee0:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ee4:	4649      	mov	r1, r9
 8007ee6:	eb63 0b01 	sbc.w	fp, r3, r1
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ef6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007efa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007efe:	4692      	mov	sl, r2
 8007f00:	469b      	mov	fp, r3
 8007f02:	4623      	mov	r3, r4
 8007f04:	eb1a 0303 	adds.w	r3, sl, r3
 8007f08:	623b      	str	r3, [r7, #32]
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	eb4b 0303 	adc.w	r3, fp, r3
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
 8007f12:	f04f 0200 	mov.w	r2, #0
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8007f1e:	4629      	mov	r1, r5
 8007f20:	028b      	lsls	r3, r1, #10
 8007f22:	4621      	mov	r1, r4
 8007f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f28:	4621      	mov	r1, r4
 8007f2a:	028a      	lsls	r2, r1, #10
 8007f2c:	4610      	mov	r0, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f34:	2200      	movs	r2, #0
 8007f36:	673b      	str	r3, [r7, #112]	; 0x70
 8007f38:	677a      	str	r2, [r7, #116]	; 0x74
 8007f3a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8007f3e:	f7f8 fec3 	bl	8000cc8 <__aeabi_uldivmod>
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4613      	mov	r3, r2
 8007f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f4c:	4b41      	ldr	r3, [pc, #260]	; (8008054 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	0c1b      	lsrs	r3, r3, #16
 8007f52:	f003 0303 	and.w	r3, r3, #3
 8007f56:	3301      	adds	r3, #1
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8007f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8007f6e:	e0eb      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f70:	4b38      	ldr	r3, [pc, #224]	; (8008054 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f7c:	4b35      	ldr	r3, [pc, #212]	; (8008054 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d06b      	beq.n	8008060 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f88:	4b32      	ldr	r3, [pc, #200]	; (8008054 <HAL_RCC_GetSysClockFreq+0x354>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	099b      	lsrs	r3, r3, #6
 8007f8e:	2200      	movs	r2, #0
 8007f90:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	667b      	str	r3, [r7, #100]	; 0x64
 8007fa0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	462b      	mov	r3, r5
 8007fa8:	f04f 0000 	mov.w	r0, #0
 8007fac:	f04f 0100 	mov.w	r1, #0
 8007fb0:	0159      	lsls	r1, r3, #5
 8007fb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fb6:	0150      	lsls	r0, r2, #5
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	1a51      	subs	r1, r2, r1
 8007fc0:	61b9      	str	r1, [r7, #24]
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	eb63 0301 	sbc.w	r3, r3, r1
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	f04f 0200 	mov.w	r2, #0
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8007fd6:	4659      	mov	r1, fp
 8007fd8:	018b      	lsls	r3, r1, #6
 8007fda:	4651      	mov	r1, sl
 8007fdc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fe0:	4651      	mov	r1, sl
 8007fe2:	018a      	lsls	r2, r1, #6
 8007fe4:	4651      	mov	r1, sl
 8007fe6:	ebb2 0801 	subs.w	r8, r2, r1
 8007fea:	4659      	mov	r1, fp
 8007fec:	eb63 0901 	sbc.w	r9, r3, r1
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	f04f 0300 	mov.w	r3, #0
 8007ff8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ffc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008000:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008004:	4690      	mov	r8, r2
 8008006:	4699      	mov	r9, r3
 8008008:	4623      	mov	r3, r4
 800800a:	eb18 0303 	adds.w	r3, r8, r3
 800800e:	613b      	str	r3, [r7, #16]
 8008010:	462b      	mov	r3, r5
 8008012:	eb49 0303 	adc.w	r3, r9, r3
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	f04f 0200 	mov.w	r2, #0
 800801c:	f04f 0300 	mov.w	r3, #0
 8008020:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8008024:	4629      	mov	r1, r5
 8008026:	024b      	lsls	r3, r1, #9
 8008028:	4621      	mov	r1, r4
 800802a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800802e:	4621      	mov	r1, r4
 8008030:	024a      	lsls	r2, r1, #9
 8008032:	4610      	mov	r0, r2
 8008034:	4619      	mov	r1, r3
 8008036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800803a:	2200      	movs	r2, #0
 800803c:	65bb      	str	r3, [r7, #88]	; 0x58
 800803e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8008040:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008044:	f7f8 fe40 	bl	8000cc8 <__aeabi_uldivmod>
 8008048:	4602      	mov	r2, r0
 800804a:	460b      	mov	r3, r1
 800804c:	4613      	mov	r3, r2
 800804e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008052:	e065      	b.n	8008120 <HAL_RCC_GetSysClockFreq+0x420>
 8008054:	40023800 	.word	0x40023800
 8008058:	00f42400 	.word	0x00f42400
 800805c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008060:	4b3d      	ldr	r3, [pc, #244]	; (8008158 <HAL_RCC_GetSysClockFreq+0x458>)
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	099b      	lsrs	r3, r3, #6
 8008066:	2200      	movs	r2, #0
 8008068:	4618      	mov	r0, r3
 800806a:	4611      	mov	r1, r2
 800806c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008070:	653b      	str	r3, [r7, #80]	; 0x50
 8008072:	2300      	movs	r3, #0
 8008074:	657b      	str	r3, [r7, #84]	; 0x54
 8008076:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800807a:	4642      	mov	r2, r8
 800807c:	464b      	mov	r3, r9
 800807e:	f04f 0000 	mov.w	r0, #0
 8008082:	f04f 0100 	mov.w	r1, #0
 8008086:	0159      	lsls	r1, r3, #5
 8008088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800808c:	0150      	lsls	r0, r2, #5
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4641      	mov	r1, r8
 8008094:	1a51      	subs	r1, r2, r1
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	4649      	mov	r1, r9
 800809a:	eb63 0301 	sbc.w	r3, r3, r1
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80080ac:	4659      	mov	r1, fp
 80080ae:	018b      	lsls	r3, r1, #6
 80080b0:	4651      	mov	r1, sl
 80080b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080b6:	4651      	mov	r1, sl
 80080b8:	018a      	lsls	r2, r1, #6
 80080ba:	4651      	mov	r1, sl
 80080bc:	1a54      	subs	r4, r2, r1
 80080be:	4659      	mov	r1, fp
 80080c0:	eb63 0501 	sbc.w	r5, r3, r1
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	f04f 0300 	mov.w	r3, #0
 80080cc:	00eb      	lsls	r3, r5, #3
 80080ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080d2:	00e2      	lsls	r2, r4, #3
 80080d4:	4614      	mov	r4, r2
 80080d6:	461d      	mov	r5, r3
 80080d8:	4643      	mov	r3, r8
 80080da:	18e3      	adds	r3, r4, r3
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	464b      	mov	r3, r9
 80080e0:	eb45 0303 	adc.w	r3, r5, r3
 80080e4:	607b      	str	r3, [r7, #4]
 80080e6:	f04f 0200 	mov.w	r2, #0
 80080ea:	f04f 0300 	mov.w	r3, #0
 80080ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080f2:	4629      	mov	r1, r5
 80080f4:	028b      	lsls	r3, r1, #10
 80080f6:	4621      	mov	r1, r4
 80080f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080fc:	4621      	mov	r1, r4
 80080fe:	028a      	lsls	r2, r1, #10
 8008100:	4610      	mov	r0, r2
 8008102:	4619      	mov	r1, r3
 8008104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008108:	2200      	movs	r2, #0
 800810a:	64bb      	str	r3, [r7, #72]	; 0x48
 800810c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800810e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008112:	f7f8 fdd9 	bl	8000cc8 <__aeabi_uldivmod>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4613      	mov	r3, r2
 800811c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008120:	4b0d      	ldr	r3, [pc, #52]	; (8008158 <HAL_RCC_GetSysClockFreq+0x458>)
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	0f1b      	lsrs	r3, r3, #28
 8008126:	f003 0307 	and.w	r3, r3, #7
 800812a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800812e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008132:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008136:	fbb2 f3f3 	udiv	r3, r2, r3
 800813a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800813e:	e003      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <HAL_RCC_GetSysClockFreq+0x45c>)
 8008142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8008146:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008148:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800814c:	4618      	mov	r0, r3
 800814e:	37b8      	adds	r7, #184	; 0xb8
 8008150:	46bd      	mov	sp, r7
 8008152:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008156:	bf00      	nop
 8008158:	40023800 	.word	0x40023800
 800815c:	00f42400 	.word	0x00f42400

08008160 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d101      	bne.n	8008172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e28d      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 8083 	beq.w	8008286 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008180:	4b94      	ldr	r3, [pc, #592]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	f003 030c 	and.w	r3, r3, #12
 8008188:	2b04      	cmp	r3, #4
 800818a:	d019      	beq.n	80081c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800818c:	4b91      	ldr	r3, [pc, #580]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008194:	2b08      	cmp	r3, #8
 8008196:	d106      	bne.n	80081a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008198:	4b8e      	ldr	r3, [pc, #568]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081a4:	d00c      	beq.n	80081c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081a6:	4b8b      	ldr	r3, [pc, #556]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80081ae:	2b0c      	cmp	r3, #12
 80081b0:	d112      	bne.n	80081d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80081b2:	4b88      	ldr	r3, [pc, #544]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081be:	d10b      	bne.n	80081d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80081c0:	4b84      	ldr	r3, [pc, #528]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d05b      	beq.n	8008284 <HAL_RCC_OscConfig+0x124>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d157      	bne.n	8008284 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e25a      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081e0:	d106      	bne.n	80081f0 <HAL_RCC_OscConfig+0x90>
 80081e2:	4b7c      	ldr	r3, [pc, #496]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a7b      	ldr	r2, [pc, #492]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80081e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	e01d      	b.n	800822c <HAL_RCC_OscConfig+0xcc>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081f8:	d10c      	bne.n	8008214 <HAL_RCC_OscConfig+0xb4>
 80081fa:	4b76      	ldr	r3, [pc, #472]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a75      	ldr	r2, [pc, #468]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008204:	6013      	str	r3, [r2, #0]
 8008206:	4b73      	ldr	r3, [pc, #460]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a72      	ldr	r2, [pc, #456]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 800820c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008210:	6013      	str	r3, [r2, #0]
 8008212:	e00b      	b.n	800822c <HAL_RCC_OscConfig+0xcc>
 8008214:	4b6f      	ldr	r3, [pc, #444]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a6e      	ldr	r2, [pc, #440]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 800821a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800821e:	6013      	str	r3, [r2, #0]
 8008220:	4b6c      	ldr	r3, [pc, #432]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a6b      	ldr	r2, [pc, #428]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800822a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d013      	beq.n	800825c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008234:	f7fd f9fa 	bl	800562c <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800823c:	f7fd f9f6 	bl	800562c <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b64      	cmp	r3, #100	; 0x64
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e21f      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800824e:	4b61      	ldr	r3, [pc, #388]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d0f0      	beq.n	800823c <HAL_RCC_OscConfig+0xdc>
 800825a:	e014      	b.n	8008286 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825c:	f7fd f9e6 	bl	800562c <HAL_GetTick>
 8008260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008262:	e008      	b.n	8008276 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008264:	f7fd f9e2 	bl	800562c <HAL_GetTick>
 8008268:	4602      	mov	r2, r0
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	2b64      	cmp	r3, #100	; 0x64
 8008270:	d901      	bls.n	8008276 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008272:	2303      	movs	r3, #3
 8008274:	e20b      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008276:	4b57      	ldr	r3, [pc, #348]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1f0      	bne.n	8008264 <HAL_RCC_OscConfig+0x104>
 8008282:	e000      	b.n	8008286 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008284:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	2b00      	cmp	r3, #0
 8008290:	d06f      	beq.n	8008372 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008292:	4b50      	ldr	r3, [pc, #320]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 030c 	and.w	r3, r3, #12
 800829a:	2b00      	cmp	r3, #0
 800829c:	d017      	beq.n	80082ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800829e:	4b4d      	ldr	r3, [pc, #308]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80082a6:	2b08      	cmp	r3, #8
 80082a8:	d105      	bne.n	80082b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80082aa:	4b4a      	ldr	r3, [pc, #296]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80082ac:	685b      	ldr	r3, [r3, #4]
 80082ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082b6:	4b47      	ldr	r3, [pc, #284]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80082be:	2b0c      	cmp	r3, #12
 80082c0:	d11c      	bne.n	80082fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80082c2:	4b44      	ldr	r3, [pc, #272]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d116      	bne.n	80082fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082ce:	4b41      	ldr	r3, [pc, #260]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d005      	beq.n	80082e6 <HAL_RCC_OscConfig+0x186>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d001      	beq.n	80082e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e1d3      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082e6:	4b3b      	ldr	r3, [pc, #236]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4937      	ldr	r1, [pc, #220]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082fa:	e03a      	b.n	8008372 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d020      	beq.n	8008346 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008304:	4b34      	ldr	r3, [pc, #208]	; (80083d8 <HAL_RCC_OscConfig+0x278>)
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830a:	f7fd f98f 	bl	800562c <HAL_GetTick>
 800830e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008310:	e008      	b.n	8008324 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008312:	f7fd f98b 	bl	800562c <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b02      	cmp	r3, #2
 800831e:	d901      	bls.n	8008324 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e1b4      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008324:	4b2b      	ldr	r3, [pc, #172]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0302 	and.w	r3, r3, #2
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0f0      	beq.n	8008312 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008330:	4b28      	ldr	r3, [pc, #160]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	4925      	ldr	r1, [pc, #148]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008340:	4313      	orrs	r3, r2
 8008342:	600b      	str	r3, [r1, #0]
 8008344:	e015      	b.n	8008372 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008346:	4b24      	ldr	r3, [pc, #144]	; (80083d8 <HAL_RCC_OscConfig+0x278>)
 8008348:	2200      	movs	r2, #0
 800834a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834c:	f7fd f96e 	bl	800562c <HAL_GetTick>
 8008350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008354:	f7fd f96a 	bl	800562c <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e193      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008366:	4b1b      	ldr	r3, [pc, #108]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1f0      	bne.n	8008354 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0308 	and.w	r3, r3, #8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d036      	beq.n	80083ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d016      	beq.n	80083b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008386:	4b15      	ldr	r3, [pc, #84]	; (80083dc <HAL_RCC_OscConfig+0x27c>)
 8008388:	2201      	movs	r2, #1
 800838a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800838c:	f7fd f94e 	bl	800562c <HAL_GetTick>
 8008390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008394:	f7fd f94a 	bl	800562c <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e173      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80083a6:	4b0b      	ldr	r3, [pc, #44]	; (80083d4 <HAL_RCC_OscConfig+0x274>)
 80083a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f0      	beq.n	8008394 <HAL_RCC_OscConfig+0x234>
 80083b2:	e01b      	b.n	80083ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <HAL_RCC_OscConfig+0x27c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ba:	f7fd f937 	bl	800562c <HAL_GetTick>
 80083be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083c0:	e00e      	b.n	80083e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80083c2:	f7fd f933 	bl	800562c <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	2b02      	cmp	r3, #2
 80083ce:	d907      	bls.n	80083e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e15c      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
 80083d4:	40023800 	.word	0x40023800
 80083d8:	42470000 	.word	0x42470000
 80083dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083e0:	4b8a      	ldr	r3, [pc, #552]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 80083e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d1ea      	bne.n	80083c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 8097 	beq.w	8008528 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80083fa:	2300      	movs	r3, #0
 80083fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083fe:	4b83      	ldr	r3, [pc, #524]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d10f      	bne.n	800842a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800840a:	2300      	movs	r3, #0
 800840c:	60bb      	str	r3, [r7, #8]
 800840e:	4b7f      	ldr	r3, [pc, #508]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	4a7e      	ldr	r2, [pc, #504]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008418:	6413      	str	r3, [r2, #64]	; 0x40
 800841a:	4b7c      	ldr	r3, [pc, #496]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 800841c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800841e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008422:	60bb      	str	r3, [r7, #8]
 8008424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008426:	2301      	movs	r3, #1
 8008428:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800842a:	4b79      	ldr	r3, [pc, #484]	; (8008610 <HAL_RCC_OscConfig+0x4b0>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008432:	2b00      	cmp	r3, #0
 8008434:	d118      	bne.n	8008468 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008436:	4b76      	ldr	r3, [pc, #472]	; (8008610 <HAL_RCC_OscConfig+0x4b0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a75      	ldr	r2, [pc, #468]	; (8008610 <HAL_RCC_OscConfig+0x4b0>)
 800843c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008442:	f7fd f8f3 	bl	800562c <HAL_GetTick>
 8008446:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008448:	e008      	b.n	800845c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800844a:	f7fd f8ef 	bl	800562c <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	2b02      	cmp	r3, #2
 8008456:	d901      	bls.n	800845c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008458:	2303      	movs	r3, #3
 800845a:	e118      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800845c:	4b6c      	ldr	r3, [pc, #432]	; (8008610 <HAL_RCC_OscConfig+0x4b0>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0f0      	beq.n	800844a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d106      	bne.n	800847e <HAL_RCC_OscConfig+0x31e>
 8008470:	4b66      	ldr	r3, [pc, #408]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008474:	4a65      	ldr	r2, [pc, #404]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008476:	f043 0301 	orr.w	r3, r3, #1
 800847a:	6713      	str	r3, [r2, #112]	; 0x70
 800847c:	e01c      	b.n	80084b8 <HAL_RCC_OscConfig+0x358>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	2b05      	cmp	r3, #5
 8008484:	d10c      	bne.n	80084a0 <HAL_RCC_OscConfig+0x340>
 8008486:	4b61      	ldr	r3, [pc, #388]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	4a60      	ldr	r2, [pc, #384]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 800848c:	f043 0304 	orr.w	r3, r3, #4
 8008490:	6713      	str	r3, [r2, #112]	; 0x70
 8008492:	4b5e      	ldr	r3, [pc, #376]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008496:	4a5d      	ldr	r2, [pc, #372]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	6713      	str	r3, [r2, #112]	; 0x70
 800849e:	e00b      	b.n	80084b8 <HAL_RCC_OscConfig+0x358>
 80084a0:	4b5a      	ldr	r3, [pc, #360]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 80084a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a4:	4a59      	ldr	r2, [pc, #356]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 80084a6:	f023 0301 	bic.w	r3, r3, #1
 80084aa:	6713      	str	r3, [r2, #112]	; 0x70
 80084ac:	4b57      	ldr	r3, [pc, #348]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 80084ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b0:	4a56      	ldr	r2, [pc, #344]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 80084b2:	f023 0304 	bic.w	r3, r3, #4
 80084b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d015      	beq.n	80084ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c0:	f7fd f8b4 	bl	800562c <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084c6:	e00a      	b.n	80084de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084c8:	f7fd f8b0 	bl	800562c <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d901      	bls.n	80084de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e0d7      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084de:	4b4b      	ldr	r3, [pc, #300]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 80084e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0ee      	beq.n	80084c8 <HAL_RCC_OscConfig+0x368>
 80084ea:	e014      	b.n	8008516 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084ec:	f7fd f89e 	bl	800562c <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084f2:	e00a      	b.n	800850a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084f4:	f7fd f89a 	bl	800562c <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008502:	4293      	cmp	r3, r2
 8008504:	d901      	bls.n	800850a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e0c1      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800850a:	4b40      	ldr	r3, [pc, #256]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 800850c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850e:	f003 0302 	and.w	r3, r3, #2
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1ee      	bne.n	80084f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008516:	7dfb      	ldrb	r3, [r7, #23]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d105      	bne.n	8008528 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800851c:	4b3b      	ldr	r3, [pc, #236]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 800851e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008520:	4a3a      	ldr	r2, [pc, #232]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008526:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f000 80ad 	beq.w	800868c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008532:	4b36      	ldr	r3, [pc, #216]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f003 030c 	and.w	r3, r3, #12
 800853a:	2b08      	cmp	r3, #8
 800853c:	d060      	beq.n	8008600 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d145      	bne.n	80085d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008546:	4b33      	ldr	r3, [pc, #204]	; (8008614 <HAL_RCC_OscConfig+0x4b4>)
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800854c:	f7fd f86e 	bl	800562c <HAL_GetTick>
 8008550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008552:	e008      	b.n	8008566 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008554:	f7fd f86a 	bl	800562c <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b02      	cmp	r3, #2
 8008560:	d901      	bls.n	8008566 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008562:	2303      	movs	r3, #3
 8008564:	e093      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008566:	4b29      	ldr	r3, [pc, #164]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800856e:	2b00      	cmp	r3, #0
 8008570:	d1f0      	bne.n	8008554 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	69da      	ldr	r2, [r3, #28]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	019b      	lsls	r3, r3, #6
 8008582:	431a      	orrs	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008588:	085b      	lsrs	r3, r3, #1
 800858a:	3b01      	subs	r3, #1
 800858c:	041b      	lsls	r3, r3, #16
 800858e:	431a      	orrs	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008594:	061b      	lsls	r3, r3, #24
 8008596:	431a      	orrs	r2, r3
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859c:	071b      	lsls	r3, r3, #28
 800859e:	491b      	ldr	r1, [pc, #108]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <HAL_RCC_OscConfig+0x4b4>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085aa:	f7fd f83f 	bl	800562c <HAL_GetTick>
 80085ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085b0:	e008      	b.n	80085c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085b2:	f7fd f83b 	bl	800562c <HAL_GetTick>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	1ad3      	subs	r3, r2, r3
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d901      	bls.n	80085c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80085c0:	2303      	movs	r3, #3
 80085c2:	e064      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085c4:	4b11      	ldr	r3, [pc, #68]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d0f0      	beq.n	80085b2 <HAL_RCC_OscConfig+0x452>
 80085d0:	e05c      	b.n	800868c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085d2:	4b10      	ldr	r3, [pc, #64]	; (8008614 <HAL_RCC_OscConfig+0x4b4>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d8:	f7fd f828 	bl	800562c <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80085e0:	f7fd f824 	bl	800562c <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e04d      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085f2:	4b06      	ldr	r3, [pc, #24]	; (800860c <HAL_RCC_OscConfig+0x4ac>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1f0      	bne.n	80085e0 <HAL_RCC_OscConfig+0x480>
 80085fe:	e045      	b.n	800868c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d107      	bne.n	8008618 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e040      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
 800860c:	40023800 	.word	0x40023800
 8008610:	40007000 	.word	0x40007000
 8008614:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008618:	4b1f      	ldr	r3, [pc, #124]	; (8008698 <HAL_RCC_OscConfig+0x538>)
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d030      	beq.n	8008688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008630:	429a      	cmp	r2, r3
 8008632:	d129      	bne.n	8008688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800863e:	429a      	cmp	r2, r3
 8008640:	d122      	bne.n	8008688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008648:	4013      	ands	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800864e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008650:	4293      	cmp	r3, r2
 8008652:	d119      	bne.n	8008688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	3b01      	subs	r3, #1
 8008662:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008664:	429a      	cmp	r2, r3
 8008666:	d10f      	bne.n	8008688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008672:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008674:	429a      	cmp	r2, r3
 8008676:	d107      	bne.n	8008688 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008682:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008684:	429a      	cmp	r2, r3
 8008686:	d001      	beq.n	800868c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e000      	b.n	800868e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	40023800 	.word	0x40023800

0800869c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e066      	b.n	8008780 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	7f5b      	ldrb	r3, [r3, #29]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d105      	bne.n	80086c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f7fc fc24 	bl	8004f10 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	22ca      	movs	r2, #202	; 0xca
 80086d4:	625a      	str	r2, [r3, #36]	; 0x24
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2253      	movs	r2, #83	; 0x53
 80086dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fb6f 	bl	8008dc2 <RTC_EnterInitMode>
 80086e4:	4603      	mov	r3, r0
 80086e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d12c      	bne.n	8008748 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	6812      	ldr	r2, [r2, #0]
 80086f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80086fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008700:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6899      	ldr	r1, [r3, #8]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	431a      	orrs	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	431a      	orrs	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	68d2      	ldr	r2, [r2, #12]
 8008728:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	6919      	ldr	r1, [r3, #16]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	041a      	lsls	r2, r3, #16
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fb76 	bl	8008e30 <RTC_ExitInitMode>
 8008744:	4603      	mov	r3, r0
 8008746:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d113      	bne.n	8008776 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800875c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	699a      	ldr	r2, [r3, #24]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	22ff      	movs	r2, #255	; 0xff
 800877c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800877e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008788:	b590      	push	{r4, r7, lr}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	7f1b      	ldrb	r3, [r3, #28]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <HAL_RTC_SetTime+0x1c>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e087      	b.n	80088b4 <HAL_RTC_SetTime+0x12c>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2201      	movs	r2, #1
 80087a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2202      	movs	r2, #2
 80087ae:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d126      	bne.n	8008804 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d102      	bne.n	80087ca <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	2200      	movs	r2, #0
 80087c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 fb53 	bl	8008e7a <RTC_ByteToBcd2>
 80087d4:	4603      	mov	r3, r0
 80087d6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	785b      	ldrb	r3, [r3, #1]
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 fb4c 	bl	8008e7a <RTC_ByteToBcd2>
 80087e2:	4603      	mov	r3, r0
 80087e4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087e6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	789b      	ldrb	r3, [r3, #2]
 80087ec:	4618      	mov	r0, r3
 80087ee:	f000 fb44 	bl	8008e7a <RTC_ByteToBcd2>
 80087f2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087f4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	78db      	ldrb	r3, [r3, #3]
 80087fc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087fe:	4313      	orrs	r3, r2
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	e018      	b.n	8008836 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880e:	2b00      	cmp	r3, #0
 8008810:	d102      	bne.n	8008818 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2200      	movs	r2, #0
 8008816:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	785b      	ldrb	r3, [r3, #1]
 8008822:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008824:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800882a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	78db      	ldrb	r3, [r3, #3]
 8008830:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	22ca      	movs	r2, #202	; 0xca
 800883c:	625a      	str	r2, [r3, #36]	; 0x24
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2253      	movs	r2, #83	; 0x53
 8008844:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fabb 	bl	8008dc2 <RTC_EnterInitMode>
 800884c:	4603      	mov	r3, r0
 800884e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008850:	7cfb      	ldrb	r3, [r7, #19]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d120      	bne.n	8008898 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008860:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008864:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008874:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6899      	ldr	r1, [r3, #8]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	431a      	orrs	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 face 	bl	8008e30 <RTC_ExitInitMode>
 8008894:	4603      	mov	r3, r0
 8008896:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008898:	7cfb      	ldrb	r3, [r7, #19]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d102      	bne.n	80088a4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	22ff      	movs	r2, #255	; 0xff
 80088aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	771a      	strb	r2, [r3, #28]

  return status;
 80088b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	371c      	adds	r7, #28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd90      	pop	{r4, r7, pc}

080088bc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b086      	sub	sp, #24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80088c8:	2300      	movs	r3, #0
 80088ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80088ee:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80088f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	0c1b      	lsrs	r3, r3, #16
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	0a1b      	lsrs	r3, r3, #8
 8008908:	b2db      	uxtb	r3, r3
 800890a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800890e:	b2da      	uxtb	r2, r3
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	b2db      	uxtb	r3, r3
 8008918:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800891c:	b2da      	uxtb	r2, r3
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	0d9b      	lsrs	r3, r3, #22
 8008926:	b2db      	uxtb	r3, r3
 8008928:	f003 0301 	and.w	r3, r3, #1
 800892c:	b2da      	uxtb	r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d11a      	bne.n	800896e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fab9 	bl	8008eb4 <RTC_Bcd2ToByte>
 8008942:	4603      	mov	r3, r0
 8008944:	461a      	mov	r2, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	785b      	ldrb	r3, [r3, #1]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fab0 	bl	8008eb4 <RTC_Bcd2ToByte>
 8008954:	4603      	mov	r3, r0
 8008956:	461a      	mov	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	789b      	ldrb	r3, [r3, #2]
 8008960:	4618      	mov	r0, r3
 8008962:	f000 faa7 	bl	8008eb4 <RTC_Bcd2ToByte>
 8008966:	4603      	mov	r3, r0
 8008968:	461a      	mov	r2, r3
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3718      	adds	r7, #24
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008978:	b590      	push	{r4, r7, lr}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008984:	2300      	movs	r3, #0
 8008986:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	7f1b      	ldrb	r3, [r3, #28]
 800898c:	2b01      	cmp	r3, #1
 800898e:	d101      	bne.n	8008994 <HAL_RTC_SetDate+0x1c>
 8008990:	2302      	movs	r3, #2
 8008992:	e071      	b.n	8008a78 <HAL_RTC_SetDate+0x100>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2202      	movs	r2, #2
 800899e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10e      	bne.n	80089c4 <HAL_RTC_SetDate+0x4c>
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	785b      	ldrb	r3, [r3, #1]
 80089aa:	f003 0310 	and.w	r3, r3, #16
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d008      	beq.n	80089c4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	785b      	ldrb	r3, [r3, #1]
 80089b6:	f023 0310 	bic.w	r3, r3, #16
 80089ba:	b2db      	uxtb	r3, r3
 80089bc:	330a      	adds	r3, #10
 80089be:	b2da      	uxtb	r2, r3
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d11c      	bne.n	8008a04 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	78db      	ldrb	r3, [r3, #3]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 fa53 	bl	8008e7a <RTC_ByteToBcd2>
 80089d4:	4603      	mov	r3, r0
 80089d6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	785b      	ldrb	r3, [r3, #1]
 80089dc:	4618      	mov	r0, r3
 80089de:	f000 fa4c 	bl	8008e7a <RTC_ByteToBcd2>
 80089e2:	4603      	mov	r3, r0
 80089e4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089e6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	789b      	ldrb	r3, [r3, #2]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 fa44 	bl	8008e7a <RTC_ByteToBcd2>
 80089f2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80089f4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089fe:	4313      	orrs	r3, r2
 8008a00:	617b      	str	r3, [r7, #20]
 8008a02:	e00e      	b.n	8008a22 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	78db      	ldrb	r3, [r3, #3]
 8008a08:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	785b      	ldrb	r3, [r3, #1]
 8008a0e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a10:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008a16:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	22ca      	movs	r2, #202	; 0xca
 8008a28:	625a      	str	r2, [r3, #36]	; 0x24
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2253      	movs	r2, #83	; 0x53
 8008a30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f000 f9c5 	bl	8008dc2 <RTC_EnterInitMode>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008a3c:	7cfb      	ldrb	r3, [r7, #19]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10c      	bne.n	8008a5c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a4c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a50:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 f9ec 	bl	8008e30 <RTC_ExitInitMode>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008a5c:	7cfb      	ldrb	r3, [r7, #19]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d102      	bne.n	8008a68 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	22ff      	movs	r2, #255	; 0xff
 8008a6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	771a      	strb	r2, [r3, #28]

  return status;
 8008a76:	7cfb      	ldrb	r3, [r7, #19]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	371c      	adds	r7, #28
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd90      	pop	{r4, r7, pc}

08008a80 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008a9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a9e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	0c1b      	lsrs	r3, r3, #16
 8008aa4:	b2da      	uxtb	r2, r3
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	0a1b      	lsrs	r3, r3, #8
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	f003 031f 	and.w	r3, r3, #31
 8008ab4:	b2da      	uxtb	r2, r3
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	0b5b      	lsrs	r3, r3, #13
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d11a      	bne.n	8008b14 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	78db      	ldrb	r3, [r3, #3]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f9e6 	bl	8008eb4 <RTC_Bcd2ToByte>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	461a      	mov	r2, r3
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	785b      	ldrb	r3, [r3, #1]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 f9dd 	bl	8008eb4 <RTC_Bcd2ToByte>
 8008afa:	4603      	mov	r3, r0
 8008afc:	461a      	mov	r2, r3
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	789b      	ldrb	r3, [r3, #2]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 f9d4 	bl	8008eb4 <RTC_Bcd2ToByte>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008b1e:	b590      	push	{r4, r7, lr}
 8008b20:	b089      	sub	sp, #36	; 0x24
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008b32:	2300      	movs	r3, #0
 8008b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	7f1b      	ldrb	r3, [r3, #28]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d101      	bne.n	8008b42 <HAL_RTC_SetAlarm+0x24>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	e113      	b.n	8008d6a <HAL_RTC_SetAlarm+0x24c>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d137      	bne.n	8008bc4 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d102      	bne.n	8008b68 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	2200      	movs	r2, #0
 8008b66:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f984 	bl	8008e7a <RTC_ByteToBcd2>
 8008b72:	4603      	mov	r3, r0
 8008b74:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	785b      	ldrb	r3, [r3, #1]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 f97d 	bl	8008e7a <RTC_ByteToBcd2>
 8008b80:	4603      	mov	r3, r0
 8008b82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008b84:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	789b      	ldrb	r3, [r3, #2]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f975 	bl	8008e7a <RTC_ByteToBcd2>
 8008b90:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008b92:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	78db      	ldrb	r3, [r3, #3]
 8008b9a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008b9c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f000 f967 	bl	8008e7a <RTC_ByteToBcd2>
 8008bac:	4603      	mov	r3, r0
 8008bae:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008bb0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008bb8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	61fb      	str	r3, [r7, #28]
 8008bc2:	e023      	b.n	8008c0c <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d102      	bne.n	8008bd8 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	785b      	ldrb	r3, [r3, #1]
 8008be2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008be4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008be6:	68ba      	ldr	r2, [r7, #8]
 8008be8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008bea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	78db      	ldrb	r3, [r3, #3]
 8008bf0:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008bf2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bfa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008bfc:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008c02:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008c14:	4313      	orrs	r3, r2
 8008c16:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	22ca      	movs	r2, #202	; 0xca
 8008c1e:	625a      	str	r2, [r3, #36]	; 0x24
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	2253      	movs	r2, #83	; 0x53
 8008c26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c30:	d148      	bne.n	8008cc4 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689a      	ldr	r2, [r3, #8]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c40:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689a      	ldr	r2, [r3, #8]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c50:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008c62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c64:	f7fc fce2 	bl	800562c <HAL_GetTick>
 8008c68:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c6a:	e013      	b.n	8008c94 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c6c:	f7fc fcde 	bl	800562c <HAL_GetTick>
 8008c70:	4602      	mov	r2, r0
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	1ad3      	subs	r3, r2, r3
 8008c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c7a:	d90b      	bls.n	8008c94 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	22ff      	movs	r2, #255	; 0xff
 8008c82:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2203      	movs	r2, #3
 8008c88:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008c90:	2303      	movs	r3, #3
 8008c92:	e06a      	b.n	8008d6a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	68db      	ldr	r3, [r3, #12]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0e4      	beq.n	8008c6c <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69fa      	ldr	r2, [r7, #28]
 8008ca8:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	689a      	ldr	r2, [r3, #8]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cc0:	609a      	str	r2, [r3, #8]
 8008cc2:	e047      	b.n	8008d54 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008cd2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	689a      	ldr	r2, [r3, #8]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ce2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68db      	ldr	r3, [r3, #12]
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008cf4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008cf6:	f7fc fc99 	bl	800562c <HAL_GetTick>
 8008cfa:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008cfc:	e013      	b.n	8008d26 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008cfe:	f7fc fc95 	bl	800562c <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d0c:	d90b      	bls.n	8008d26 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	22ff      	movs	r2, #255	; 0xff
 8008d14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2203      	movs	r2, #3
 8008d1a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e021      	b.n	8008d6a <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0e4      	beq.n	8008cfe <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	69fa      	ldr	r2, [r7, #28]
 8008d3a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d52:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	22ff      	movs	r2, #255	; 0xff
 8008d5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3724      	adds	r7, #36	; 0x24
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd90      	pop	{r4, r7, pc}

08008d72 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d8c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d8e:	f7fc fc4d 	bl	800562c <HAL_GetTick>
 8008d92:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008d94:	e009      	b.n	8008daa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008d96:	f7fc fc49 	bl	800562c <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008da4:	d901      	bls.n	8008daa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e007      	b.n	8008dba <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0ee      	beq.n	8008d96 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d122      	bne.n	8008e26 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008df0:	f7fc fc1c 	bl	800562c <HAL_GetTick>
 8008df4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008df6:	e00c      	b.n	8008e12 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008df8:	f7fc fc18 	bl	800562c <HAL_GetTick>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	1ad3      	subs	r3, r2, r3
 8008e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e06:	d904      	bls.n	8008e12 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2204      	movs	r2, #4
 8008e0c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <RTC_EnterInitMode+0x64>
 8008e20:	7bfb      	ldrb	r3, [r7, #15]
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d1e8      	bne.n	8008df8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e4a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	f003 0320 	and.w	r3, r3, #32
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10a      	bne.n	8008e70 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7ff ff89 	bl	8008d72 <HAL_RTC_WaitForSynchro>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d004      	beq.n	8008e70 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2204      	movs	r2, #4
 8008e6a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}

08008e7a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008e7a:	b480      	push	{r7}
 8008e7c:	b085      	sub	sp, #20
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	4603      	mov	r3, r0
 8008e82:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8008e88:	e005      	b.n	8008e96 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	3b0a      	subs	r3, #10
 8008e94:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	2b09      	cmp	r3, #9
 8008e9a:	d8f6      	bhi.n	8008e8a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	b2db      	uxtb	r3, r3
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	091b      	lsrs	r3, r3, #4
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	461a      	mov	r2, r3
 8008eca:	0092      	lsls	r2, r2, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	f003 030f 	and.w	r3, r3, #15
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
 8008edc:	4413      	add	r3, r2
 8008ede:	b2db      	uxtb	r3, r3
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d101      	bne.n	8008efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e041      	b.n	8008f82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d106      	bne.n	8008f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fc fa5c 	bl	80053d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3304      	adds	r3, #4
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f000 fc7a 	bl	8009824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
	...

08008f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d001      	beq.n	8008fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e04e      	b.n	8009042 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68da      	ldr	r2, [r3, #12]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f042 0201 	orr.w	r2, r2, #1
 8008fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a23      	ldr	r2, [pc, #140]	; (8009050 <HAL_TIM_Base_Start_IT+0xc4>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d022      	beq.n	800900c <HAL_TIM_Base_Start_IT+0x80>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fce:	d01d      	beq.n	800900c <HAL_TIM_Base_Start_IT+0x80>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a1f      	ldr	r2, [pc, #124]	; (8009054 <HAL_TIM_Base_Start_IT+0xc8>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d018      	beq.n	800900c <HAL_TIM_Base_Start_IT+0x80>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a1e      	ldr	r2, [pc, #120]	; (8009058 <HAL_TIM_Base_Start_IT+0xcc>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d013      	beq.n	800900c <HAL_TIM_Base_Start_IT+0x80>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a1c      	ldr	r2, [pc, #112]	; (800905c <HAL_TIM_Base_Start_IT+0xd0>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d00e      	beq.n	800900c <HAL_TIM_Base_Start_IT+0x80>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a1b      	ldr	r2, [pc, #108]	; (8009060 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d009      	beq.n	800900c <HAL_TIM_Base_Start_IT+0x80>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a19      	ldr	r2, [pc, #100]	; (8009064 <HAL_TIM_Base_Start_IT+0xd8>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d004      	beq.n	800900c <HAL_TIM_Base_Start_IT+0x80>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a18      	ldr	r2, [pc, #96]	; (8009068 <HAL_TIM_Base_Start_IT+0xdc>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d111      	bne.n	8009030 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	f003 0307 	and.w	r3, r3, #7
 8009016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b06      	cmp	r3, #6
 800901c:	d010      	beq.n	8009040 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f042 0201 	orr.w	r2, r2, #1
 800902c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800902e:	e007      	b.n	8009040 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0201 	orr.w	r2, r2, #1
 800903e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009040:	2300      	movs	r3, #0
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40010000 	.word	0x40010000
 8009054:	40000400 	.word	0x40000400
 8009058:	40000800 	.word	0x40000800
 800905c:	40000c00 	.word	0x40000c00
 8009060:	40010400 	.word	0x40010400
 8009064:	40014000 	.word	0x40014000
 8009068:	40001800 	.word	0x40001800

0800906c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e041      	b.n	8009102 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009084:	b2db      	uxtb	r3, r3
 8009086:	2b00      	cmp	r3, #0
 8009088:	d106      	bne.n	8009098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f839 	bl	800910a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2202      	movs	r2, #2
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	3304      	adds	r3, #4
 80090a8:	4619      	mov	r1, r3
 80090aa:	4610      	mov	r0, r2
 80090ac:	f000 fbba 	bl	8009824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2201      	movs	r2, #1
 80090b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2201      	movs	r2, #1
 80090cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800910a:	b480      	push	{r7}
 800910c:	b083      	sub	sp, #12
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009112:	bf00      	nop
 8009114:	370c      	adds	r7, #12
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
	...

08009120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d109      	bne.n	8009144 <HAL_TIM_PWM_Start+0x24>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b01      	cmp	r3, #1
 800913a:	bf14      	ite	ne
 800913c:	2301      	movne	r3, #1
 800913e:	2300      	moveq	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	e022      	b.n	800918a <HAL_TIM_PWM_Start+0x6a>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b04      	cmp	r3, #4
 8009148:	d109      	bne.n	800915e <HAL_TIM_PWM_Start+0x3e>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b01      	cmp	r3, #1
 8009154:	bf14      	ite	ne
 8009156:	2301      	movne	r3, #1
 8009158:	2300      	moveq	r3, #0
 800915a:	b2db      	uxtb	r3, r3
 800915c:	e015      	b.n	800918a <HAL_TIM_PWM_Start+0x6a>
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	2b08      	cmp	r3, #8
 8009162:	d109      	bne.n	8009178 <HAL_TIM_PWM_Start+0x58>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b01      	cmp	r3, #1
 800916e:	bf14      	ite	ne
 8009170:	2301      	movne	r3, #1
 8009172:	2300      	moveq	r3, #0
 8009174:	b2db      	uxtb	r3, r3
 8009176:	e008      	b.n	800918a <HAL_TIM_PWM_Start+0x6a>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800917e:	b2db      	uxtb	r3, r3
 8009180:	2b01      	cmp	r3, #1
 8009182:	bf14      	ite	ne
 8009184:	2301      	movne	r3, #1
 8009186:	2300      	moveq	r3, #0
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e07c      	b.n	800928c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d104      	bne.n	80091a2 <HAL_TIM_PWM_Start+0x82>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2202      	movs	r2, #2
 800919c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091a0:	e013      	b.n	80091ca <HAL_TIM_PWM_Start+0xaa>
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2b04      	cmp	r3, #4
 80091a6:	d104      	bne.n	80091b2 <HAL_TIM_PWM_Start+0x92>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2202      	movs	r2, #2
 80091ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091b0:	e00b      	b.n	80091ca <HAL_TIM_PWM_Start+0xaa>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b08      	cmp	r3, #8
 80091b6:	d104      	bne.n	80091c2 <HAL_TIM_PWM_Start+0xa2>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80091c0:	e003      	b.n	80091ca <HAL_TIM_PWM_Start+0xaa>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2202      	movs	r2, #2
 80091c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2201      	movs	r2, #1
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f000 fe10 	bl	8009df8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a2d      	ldr	r2, [pc, #180]	; (8009294 <HAL_TIM_PWM_Start+0x174>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d004      	beq.n	80091ec <HAL_TIM_PWM_Start+0xcc>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a2c      	ldr	r2, [pc, #176]	; (8009298 <HAL_TIM_PWM_Start+0x178>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d101      	bne.n	80091f0 <HAL_TIM_PWM_Start+0xd0>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <HAL_TIM_PWM_Start+0xd2>
 80091f0:	2300      	movs	r3, #0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d007      	beq.n	8009206 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009204:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a22      	ldr	r2, [pc, #136]	; (8009294 <HAL_TIM_PWM_Start+0x174>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d022      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009218:	d01d      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a1f      	ldr	r2, [pc, #124]	; (800929c <HAL_TIM_PWM_Start+0x17c>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d018      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1d      	ldr	r2, [pc, #116]	; (80092a0 <HAL_TIM_PWM_Start+0x180>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d013      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1c      	ldr	r2, [pc, #112]	; (80092a4 <HAL_TIM_PWM_Start+0x184>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00e      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a16      	ldr	r2, [pc, #88]	; (8009298 <HAL_TIM_PWM_Start+0x178>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d009      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a18      	ldr	r2, [pc, #96]	; (80092a8 <HAL_TIM_PWM_Start+0x188>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d004      	beq.n	8009256 <HAL_TIM_PWM_Start+0x136>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a16      	ldr	r2, [pc, #88]	; (80092ac <HAL_TIM_PWM_Start+0x18c>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d111      	bne.n	800927a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	689b      	ldr	r3, [r3, #8]
 800925c:	f003 0307 	and.w	r3, r3, #7
 8009260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b06      	cmp	r3, #6
 8009266:	d010      	beq.n	800928a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f042 0201 	orr.w	r2, r2, #1
 8009276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009278:	e007      	b.n	800928a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f042 0201 	orr.w	r2, r2, #1
 8009288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	40010000 	.word	0x40010000
 8009298:	40010400 	.word	0x40010400
 800929c:	40000400 	.word	0x40000400
 80092a0:	40000800 	.word	0x40000800
 80092a4:	40000c00 	.word	0x40000c00
 80092a8:	40014000 	.word	0x40014000
 80092ac:	40001800 	.word	0x40001800

080092b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f003 0302 	and.w	r3, r3, #2
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d122      	bne.n	800930c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d11b      	bne.n	800930c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f06f 0202 	mvn.w	r2, #2
 80092dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2201      	movs	r2, #1
 80092e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	f003 0303 	and.w	r3, r3, #3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d003      	beq.n	80092fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fa77 	bl	80097e6 <HAL_TIM_IC_CaptureCallback>
 80092f8:	e005      	b.n	8009306 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa69 	bl	80097d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fa7a 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	f003 0304 	and.w	r3, r3, #4
 8009316:	2b04      	cmp	r3, #4
 8009318:	d122      	bne.n	8009360 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f003 0304 	and.w	r3, r3, #4
 8009324:	2b04      	cmp	r3, #4
 8009326:	d11b      	bne.n	8009360 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f06f 0204 	mvn.w	r2, #4
 8009330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2202      	movs	r2, #2
 8009336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa4d 	bl	80097e6 <HAL_TIM_IC_CaptureCallback>
 800934c:	e005      	b.n	800935a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fa3f 	bl	80097d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa50 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	f003 0308 	and.w	r3, r3, #8
 800936a:	2b08      	cmp	r3, #8
 800936c:	d122      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	f003 0308 	and.w	r3, r3, #8
 8009378:	2b08      	cmp	r3, #8
 800937a:	d11b      	bne.n	80093b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f06f 0208 	mvn.w	r2, #8
 8009384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2204      	movs	r2, #4
 800938a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69db      	ldr	r3, [r3, #28]
 8009392:	f003 0303 	and.w	r3, r3, #3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d003      	beq.n	80093a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 fa23 	bl	80097e6 <HAL_TIM_IC_CaptureCallback>
 80093a0:	e005      	b.n	80093ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fa15 	bl	80097d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fa26 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f003 0310 	and.w	r3, r3, #16
 80093be:	2b10      	cmp	r3, #16
 80093c0:	d122      	bne.n	8009408 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	f003 0310 	and.w	r3, r3, #16
 80093cc:	2b10      	cmp	r3, #16
 80093ce:	d11b      	bne.n	8009408 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f06f 0210 	mvn.w	r2, #16
 80093d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2208      	movs	r2, #8
 80093de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f9f9 	bl	80097e6 <HAL_TIM_IC_CaptureCallback>
 80093f4:	e005      	b.n	8009402 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f9eb 	bl	80097d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f000 f9fc 	bl	80097fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b01      	cmp	r3, #1
 8009414:	d10e      	bne.n	8009434 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b01      	cmp	r3, #1
 8009422:	d107      	bne.n	8009434 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f06f 0201 	mvn.w	r2, #1
 800942c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f7fa f860 	bl	80034f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691b      	ldr	r3, [r3, #16]
 800943a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800943e:	2b80      	cmp	r3, #128	; 0x80
 8009440:	d10e      	bne.n	8009460 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800944c:	2b80      	cmp	r3, #128	; 0x80
 800944e:	d107      	bne.n	8009460 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fdca 	bl	8009ff4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946a:	2b40      	cmp	r3, #64	; 0x40
 800946c:	d10e      	bne.n	800948c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009478:	2b40      	cmp	r3, #64	; 0x40
 800947a:	d107      	bne.n	800948c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9c1 	bl	800980e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0320 	and.w	r3, r3, #32
 8009496:	2b20      	cmp	r3, #32
 8009498:	d10e      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f003 0320 	and.w	r3, r3, #32
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	d107      	bne.n	80094b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f06f 0220 	mvn.w	r2, #32
 80094b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fd94 	bl	8009fe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094b8:	bf00      	nop
 80094ba:	3708      	adds	r7, #8
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}

080094c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b086      	sub	sp, #24
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094da:	2302      	movs	r3, #2
 80094dc:	e0ae      	b.n	800963c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b0c      	cmp	r3, #12
 80094ea:	f200 809f 	bhi.w	800962c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80094ee:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	08009529 	.word	0x08009529
 80094f8:	0800962d 	.word	0x0800962d
 80094fc:	0800962d 	.word	0x0800962d
 8009500:	0800962d 	.word	0x0800962d
 8009504:	08009569 	.word	0x08009569
 8009508:	0800962d 	.word	0x0800962d
 800950c:	0800962d 	.word	0x0800962d
 8009510:	0800962d 	.word	0x0800962d
 8009514:	080095ab 	.word	0x080095ab
 8009518:	0800962d 	.word	0x0800962d
 800951c:	0800962d 	.word	0x0800962d
 8009520:	0800962d 	.word	0x0800962d
 8009524:	080095eb 	.word	0x080095eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	68b9      	ldr	r1, [r7, #8]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 fa18 	bl	8009964 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	699a      	ldr	r2, [r3, #24]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f042 0208 	orr.w	r2, r2, #8
 8009542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	699a      	ldr	r2, [r3, #24]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0204 	bic.w	r2, r2, #4
 8009552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	6999      	ldr	r1, [r3, #24]
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	691a      	ldr	r2, [r3, #16]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	430a      	orrs	r2, r1
 8009564:	619a      	str	r2, [r3, #24]
      break;
 8009566:	e064      	b.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	68b9      	ldr	r1, [r7, #8]
 800956e:	4618      	mov	r0, r3
 8009570:	f000 fa68 	bl	8009a44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	699a      	ldr	r2, [r3, #24]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6999      	ldr	r1, [r3, #24]
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	021a      	lsls	r2, r3, #8
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	430a      	orrs	r2, r1
 80095a6:	619a      	str	r2, [r3, #24]
      break;
 80095a8:	e043      	b.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	68b9      	ldr	r1, [r7, #8]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fabd 	bl	8009b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	69da      	ldr	r2, [r3, #28]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f042 0208 	orr.w	r2, r2, #8
 80095c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	69da      	ldr	r2, [r3, #28]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 0204 	bic.w	r2, r2, #4
 80095d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	69d9      	ldr	r1, [r3, #28]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	430a      	orrs	r2, r1
 80095e6:	61da      	str	r2, [r3, #28]
      break;
 80095e8:	e023      	b.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68b9      	ldr	r1, [r7, #8]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fb11 	bl	8009c18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	69da      	ldr	r2, [r3, #28]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	69da      	ldr	r2, [r3, #28]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69d9      	ldr	r1, [r3, #28]
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	021a      	lsls	r2, r3, #8
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	61da      	str	r2, [r3, #28]
      break;
 800962a:	e002      	b.n	8009632 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	75fb      	strb	r3, [r7, #23]
      break;
 8009630:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	2200      	movs	r2, #0
 8009636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800963a:	7dfb      	ldrb	r3, [r7, #23]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800964e:	2300      	movs	r3, #0
 8009650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009658:	2b01      	cmp	r3, #1
 800965a:	d101      	bne.n	8009660 <HAL_TIM_ConfigClockSource+0x1c>
 800965c:	2302      	movs	r3, #2
 800965e:	e0b4      	b.n	80097ca <HAL_TIM_ConfigClockSource+0x186>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800967e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009686:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68ba      	ldr	r2, [r7, #8]
 800968e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009698:	d03e      	beq.n	8009718 <HAL_TIM_ConfigClockSource+0xd4>
 800969a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800969e:	f200 8087 	bhi.w	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096a6:	f000 8086 	beq.w	80097b6 <HAL_TIM_ConfigClockSource+0x172>
 80096aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ae:	d87f      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096b0:	2b70      	cmp	r3, #112	; 0x70
 80096b2:	d01a      	beq.n	80096ea <HAL_TIM_ConfigClockSource+0xa6>
 80096b4:	2b70      	cmp	r3, #112	; 0x70
 80096b6:	d87b      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096b8:	2b60      	cmp	r3, #96	; 0x60
 80096ba:	d050      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x11a>
 80096bc:	2b60      	cmp	r3, #96	; 0x60
 80096be:	d877      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096c0:	2b50      	cmp	r3, #80	; 0x50
 80096c2:	d03c      	beq.n	800973e <HAL_TIM_ConfigClockSource+0xfa>
 80096c4:	2b50      	cmp	r3, #80	; 0x50
 80096c6:	d873      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096c8:	2b40      	cmp	r3, #64	; 0x40
 80096ca:	d058      	beq.n	800977e <HAL_TIM_ConfigClockSource+0x13a>
 80096cc:	2b40      	cmp	r3, #64	; 0x40
 80096ce:	d86f      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096d0:	2b30      	cmp	r3, #48	; 0x30
 80096d2:	d064      	beq.n	800979e <HAL_TIM_ConfigClockSource+0x15a>
 80096d4:	2b30      	cmp	r3, #48	; 0x30
 80096d6:	d86b      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d060      	beq.n	800979e <HAL_TIM_ConfigClockSource+0x15a>
 80096dc:	2b20      	cmp	r3, #32
 80096de:	d867      	bhi.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d05c      	beq.n	800979e <HAL_TIM_ConfigClockSource+0x15a>
 80096e4:	2b10      	cmp	r3, #16
 80096e6:	d05a      	beq.n	800979e <HAL_TIM_ConfigClockSource+0x15a>
 80096e8:	e062      	b.n	80097b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6818      	ldr	r0, [r3, #0]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	6899      	ldr	r1, [r3, #8]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	685a      	ldr	r2, [r3, #4]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	f000 fb5d 	bl	8009db8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800970c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	609a      	str	r2, [r3, #8]
      break;
 8009716:	e04f      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6818      	ldr	r0, [r3, #0]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	6899      	ldr	r1, [r3, #8]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	f000 fb46 	bl	8009db8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689a      	ldr	r2, [r3, #8]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800973a:	609a      	str	r2, [r3, #8]
      break;
 800973c:	e03c      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6818      	ldr	r0, [r3, #0]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	6859      	ldr	r1, [r3, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	461a      	mov	r2, r3
 800974c:	f000 faba 	bl	8009cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2150      	movs	r1, #80	; 0x50
 8009756:	4618      	mov	r0, r3
 8009758:	f000 fb13 	bl	8009d82 <TIM_ITRx_SetConfig>
      break;
 800975c:	e02c      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	6859      	ldr	r1, [r3, #4]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	461a      	mov	r2, r3
 800976c:	f000 fad9 	bl	8009d22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2160      	movs	r1, #96	; 0x60
 8009776:	4618      	mov	r0, r3
 8009778:	f000 fb03 	bl	8009d82 <TIM_ITRx_SetConfig>
      break;
 800977c:	e01c      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	6859      	ldr	r1, [r3, #4]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	461a      	mov	r2, r3
 800978c:	f000 fa9a 	bl	8009cc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2140      	movs	r1, #64	; 0x40
 8009796:	4618      	mov	r0, r3
 8009798:	f000 faf3 	bl	8009d82 <TIM_ITRx_SetConfig>
      break;
 800979c:	e00c      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4619      	mov	r1, r3
 80097a8:	4610      	mov	r0, r2
 80097aa:	f000 faea 	bl	8009d82 <TIM_ITRx_SetConfig>
      break;
 80097ae:	e003      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	73fb      	strb	r3, [r7, #15]
      break;
 80097b4:	e000      	b.n	80097b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b083      	sub	sp, #12
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097ee:	bf00      	nop
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097fa:	b480      	push	{r7}
 80097fc:	b083      	sub	sp, #12
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009802:	bf00      	nop
 8009804:	370c      	adds	r7, #12
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800980e:	b480      	push	{r7}
 8009810:	b083      	sub	sp, #12
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
	...

08009824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a40      	ldr	r2, [pc, #256]	; (8009938 <TIM_Base_SetConfig+0x114>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d013      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009842:	d00f      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a3d      	ldr	r2, [pc, #244]	; (800993c <TIM_Base_SetConfig+0x118>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00b      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a3c      	ldr	r2, [pc, #240]	; (8009940 <TIM_Base_SetConfig+0x11c>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d007      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a3b      	ldr	r2, [pc, #236]	; (8009944 <TIM_Base_SetConfig+0x120>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_Base_SetConfig+0x40>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a3a      	ldr	r2, [pc, #232]	; (8009948 <TIM_Base_SetConfig+0x124>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d108      	bne.n	8009876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4313      	orrs	r3, r2
 8009874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a2f      	ldr	r2, [pc, #188]	; (8009938 <TIM_Base_SetConfig+0x114>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d02b      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009884:	d027      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	4a2c      	ldr	r2, [pc, #176]	; (800993c <TIM_Base_SetConfig+0x118>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d023      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	4a2b      	ldr	r2, [pc, #172]	; (8009940 <TIM_Base_SetConfig+0x11c>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d01f      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4a2a      	ldr	r2, [pc, #168]	; (8009944 <TIM_Base_SetConfig+0x120>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d01b      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	4a29      	ldr	r2, [pc, #164]	; (8009948 <TIM_Base_SetConfig+0x124>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d017      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	4a28      	ldr	r2, [pc, #160]	; (800994c <TIM_Base_SetConfig+0x128>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d013      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	4a27      	ldr	r2, [pc, #156]	; (8009950 <TIM_Base_SetConfig+0x12c>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00f      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4a26      	ldr	r2, [pc, #152]	; (8009954 <TIM_Base_SetConfig+0x130>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d00b      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	4a25      	ldr	r2, [pc, #148]	; (8009958 <TIM_Base_SetConfig+0x134>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d007      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a24      	ldr	r2, [pc, #144]	; (800995c <TIM_Base_SetConfig+0x138>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d003      	beq.n	80098d6 <TIM_Base_SetConfig+0xb2>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a23      	ldr	r2, [pc, #140]	; (8009960 <TIM_Base_SetConfig+0x13c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d108      	bne.n	80098e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	4313      	orrs	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	695b      	ldr	r3, [r3, #20]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	681a      	ldr	r2, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	4a0a      	ldr	r2, [pc, #40]	; (8009938 <TIM_Base_SetConfig+0x114>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d003      	beq.n	800991c <TIM_Base_SetConfig+0xf8>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a0c      	ldr	r2, [pc, #48]	; (8009948 <TIM_Base_SetConfig+0x124>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d103      	bne.n	8009924 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	691a      	ldr	r2, [r3, #16]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2201      	movs	r2, #1
 8009928:	615a      	str	r2, [r3, #20]
}
 800992a:	bf00      	nop
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	40010000 	.word	0x40010000
 800993c:	40000400 	.word	0x40000400
 8009940:	40000800 	.word	0x40000800
 8009944:	40000c00 	.word	0x40000c00
 8009948:	40010400 	.word	0x40010400
 800994c:	40014000 	.word	0x40014000
 8009950:	40014400 	.word	0x40014400
 8009954:	40014800 	.word	0x40014800
 8009958:	40001800 	.word	0x40001800
 800995c:	40001c00 	.word	0x40001c00
 8009960:	40002000 	.word	0x40002000

08009964 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009964:	b480      	push	{r7}
 8009966:	b087      	sub	sp, #28
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	6a1b      	ldr	r3, [r3, #32]
 8009972:	f023 0201 	bic.w	r2, r3, #1
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0303 	bic.w	r3, r3, #3
 800999a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f023 0302 	bic.w	r3, r3, #2
 80099ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a20      	ldr	r2, [pc, #128]	; (8009a3c <TIM_OC1_SetConfig+0xd8>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d003      	beq.n	80099c8 <TIM_OC1_SetConfig+0x64>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a1f      	ldr	r2, [pc, #124]	; (8009a40 <TIM_OC1_SetConfig+0xdc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d10c      	bne.n	80099e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f023 0308 	bic.w	r3, r3, #8
 80099ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	697a      	ldr	r2, [r7, #20]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	f023 0304 	bic.w	r3, r3, #4
 80099e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a15      	ldr	r2, [pc, #84]	; (8009a3c <TIM_OC1_SetConfig+0xd8>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d003      	beq.n	80099f2 <TIM_OC1_SetConfig+0x8e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a14      	ldr	r2, [pc, #80]	; (8009a40 <TIM_OC1_SetConfig+0xdc>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d111      	bne.n	8009a16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	697a      	ldr	r2, [r7, #20]
 8009a2e:	621a      	str	r2, [r3, #32]
}
 8009a30:	bf00      	nop
 8009a32:	371c      	adds	r7, #28
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	40010000 	.word	0x40010000
 8009a40:	40010400 	.word	0x40010400

08009a44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b087      	sub	sp, #28
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a1b      	ldr	r3, [r3, #32]
 8009a52:	f023 0210 	bic.w	r2, r3, #16
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	021b      	lsls	r3, r3, #8
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	4313      	orrs	r3, r2
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	f023 0320 	bic.w	r3, r3, #32
 8009a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	011b      	lsls	r3, r3, #4
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a22      	ldr	r2, [pc, #136]	; (8009b28 <TIM_OC2_SetConfig+0xe4>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d003      	beq.n	8009aac <TIM_OC2_SetConfig+0x68>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a21      	ldr	r2, [pc, #132]	; (8009b2c <TIM_OC2_SetConfig+0xe8>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d10d      	bne.n	8009ac8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	011b      	lsls	r3, r3, #4
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	4313      	orrs	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	4a17      	ldr	r2, [pc, #92]	; (8009b28 <TIM_OC2_SetConfig+0xe4>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d003      	beq.n	8009ad8 <TIM_OC2_SetConfig+0x94>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	4a16      	ldr	r2, [pc, #88]	; (8009b2c <TIM_OC2_SetConfig+0xe8>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d113      	bne.n	8009b00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ade:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	693a      	ldr	r2, [r7, #16]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	697a      	ldr	r2, [r7, #20]
 8009b18:	621a      	str	r2, [r3, #32]
}
 8009b1a:	bf00      	nop
 8009b1c:	371c      	adds	r7, #28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b24:	4770      	bx	lr
 8009b26:	bf00      	nop
 8009b28:	40010000 	.word	0x40010000
 8009b2c:	40010400 	.word	0x40010400

08009b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f023 0303 	bic.w	r3, r3, #3
 8009b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	021b      	lsls	r3, r3, #8
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4313      	orrs	r3, r2
 8009b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a21      	ldr	r2, [pc, #132]	; (8009c10 <TIM_OC3_SetConfig+0xe0>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d003      	beq.n	8009b96 <TIM_OC3_SetConfig+0x66>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4a20      	ldr	r2, [pc, #128]	; (8009c14 <TIM_OC3_SetConfig+0xe4>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d10d      	bne.n	8009bb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009b96:	697b      	ldr	r3, [r7, #20]
 8009b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	021b      	lsls	r3, r3, #8
 8009ba4:	697a      	ldr	r2, [r7, #20]
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4a16      	ldr	r2, [pc, #88]	; (8009c10 <TIM_OC3_SetConfig+0xe0>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d003      	beq.n	8009bc2 <TIM_OC3_SetConfig+0x92>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	4a15      	ldr	r2, [pc, #84]	; (8009c14 <TIM_OC3_SetConfig+0xe4>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d113      	bne.n	8009bea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	693a      	ldr	r2, [r7, #16]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	699b      	ldr	r3, [r3, #24]
 8009be2:	011b      	lsls	r3, r3, #4
 8009be4:	693a      	ldr	r2, [r7, #16]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	693a      	ldr	r2, [r7, #16]
 8009bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	621a      	str	r2, [r3, #32]
}
 8009c04:	bf00      	nop
 8009c06:	371c      	adds	r7, #28
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	40010000 	.word	0x40010000
 8009c14:	40010400 	.word	0x40010400

08009c18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b087      	sub	sp, #28
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
 8009c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a1b      	ldr	r3, [r3, #32]
 8009c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	021b      	lsls	r3, r3, #8
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	031b      	lsls	r3, r3, #12
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a12      	ldr	r2, [pc, #72]	; (8009cbc <TIM_OC4_SetConfig+0xa4>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d003      	beq.n	8009c80 <TIM_OC4_SetConfig+0x68>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a11      	ldr	r2, [pc, #68]	; (8009cc0 <TIM_OC4_SetConfig+0xa8>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d109      	bne.n	8009c94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	695b      	ldr	r3, [r3, #20]
 8009c8c:	019b      	lsls	r3, r3, #6
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	697a      	ldr	r2, [r7, #20]
 8009c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	621a      	str	r2, [r3, #32]
}
 8009cae:	bf00      	nop
 8009cb0:	371c      	adds	r7, #28
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	40010000 	.word	0x40010000
 8009cc0:	40010400 	.word	0x40010400

08009cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b087      	sub	sp, #28
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	60f8      	str	r0, [r7, #12]
 8009ccc:	60b9      	str	r1, [r7, #8]
 8009cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6a1b      	ldr	r3, [r3, #32]
 8009cda:	f023 0201 	bic.w	r2, r3, #1
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	699b      	ldr	r3, [r3, #24]
 8009ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f023 030a 	bic.w	r3, r3, #10
 8009d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d02:	697a      	ldr	r2, [r7, #20]
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	693a      	ldr	r2, [r7, #16]
 8009d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	621a      	str	r2, [r3, #32]
}
 8009d16:	bf00      	nop
 8009d18:	371c      	adds	r7, #28
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b087      	sub	sp, #28
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	f023 0210 	bic.w	r2, r3, #16
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6a1b      	ldr	r3, [r3, #32]
 8009d44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	031b      	lsls	r3, r3, #12
 8009d52:	697a      	ldr	r2, [r7, #20]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009d5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	011b      	lsls	r3, r3, #4
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	693a      	ldr	r2, [r7, #16]
 8009d74:	621a      	str	r2, [r3, #32]
}
 8009d76:	bf00      	nop
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr

08009d82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d82:	b480      	push	{r7}
 8009d84:	b085      	sub	sp, #20
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
 8009d8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d9a:	683a      	ldr	r2, [r7, #0]
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	f043 0307 	orr.w	r3, r3, #7
 8009da4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	609a      	str	r2, [r3, #8]
}
 8009dac:	bf00      	nop
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b087      	sub	sp, #28
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
 8009dc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009dd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	021a      	lsls	r2, r3, #8
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	431a      	orrs	r2, r3
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	4313      	orrs	r3, r2
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	609a      	str	r2, [r3, #8]
}
 8009dec:	bf00      	nop
 8009dee:	371c      	adds	r7, #28
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b087      	sub	sp, #28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	60b9      	str	r1, [r7, #8]
 8009e02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f003 031f 	and.w	r3, r3, #31
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6a1a      	ldr	r2, [r3, #32]
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	43db      	mvns	r3, r3
 8009e1a:	401a      	ands	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	6a1a      	ldr	r2, [r3, #32]
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f003 031f 	and.w	r3, r3, #31
 8009e2a:	6879      	ldr	r1, [r7, #4]
 8009e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e30:	431a      	orrs	r2, r3
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	621a      	str	r2, [r3, #32]
}
 8009e36:	bf00      	nop
 8009e38:	371c      	adds	r7, #28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
	...

08009e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d101      	bne.n	8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	e05a      	b.n	8009f12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2202      	movs	r2, #2
 8009e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a21      	ldr	r2, [pc, #132]	; (8009f20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d022      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ea8:	d01d      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a1d      	ldr	r2, [pc, #116]	; (8009f24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d018      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a1b      	ldr	r2, [pc, #108]	; (8009f28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d013      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a1a      	ldr	r2, [pc, #104]	; (8009f2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d00e      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a18      	ldr	r2, [pc, #96]	; (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d009      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a17      	ldr	r2, [pc, #92]	; (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d004      	beq.n	8009ee6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d10c      	bne.n	8009f00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009eec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f10:	2300      	movs	r3, #0
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	40010000 	.word	0x40010000
 8009f24:	40000400 	.word	0x40000400
 8009f28:	40000800 	.word	0x40000800
 8009f2c:	40000c00 	.word	0x40000c00
 8009f30:	40010400 	.word	0x40010400
 8009f34:	40014000 	.word	0x40014000
 8009f38:	40001800 	.word	0x40001800

08009f3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f54:	2302      	movs	r3, #2
 8009f56:	e03d      	b.n	8009fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	69db      	ldr	r3, [r3, #28]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b083      	sub	sp, #12
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ffc:	bf00      	nop
 8009ffe:	370c      	adds	r7, #12
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr

0800a008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e03f      	b.n	800a09a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d106      	bne.n	800a034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f7fb fa54 	bl	80054dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2224      	movs	r2, #36	; 0x24
 800a038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68da      	ldr	r2, [r3, #12]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a04a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f929 	bl	800a2a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	691a      	ldr	r2, [r3, #16]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	695a      	ldr	r2, [r3, #20]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68da      	ldr	r2, [r3, #12]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2220      	movs	r2, #32
 800a094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a098:	2300      	movs	r3, #0
}
 800a09a:	4618      	mov	r0, r3
 800a09c:	3708      	adds	r7, #8
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}

0800a0a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0a2:	b580      	push	{r7, lr}
 800a0a4:	b08a      	sub	sp, #40	; 0x28
 800a0a6:	af02      	add	r7, sp, #8
 800a0a8:	60f8      	str	r0, [r7, #12]
 800a0aa:	60b9      	str	r1, [r7, #8]
 800a0ac:	603b      	str	r3, [r7, #0]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0bc:	b2db      	uxtb	r3, r3
 800a0be:	2b20      	cmp	r3, #32
 800a0c0:	d17c      	bne.n	800a1bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d002      	beq.n	800a0ce <HAL_UART_Transmit+0x2c>
 800a0c8:	88fb      	ldrh	r3, [r7, #6]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d101      	bne.n	800a0d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a0ce:	2301      	movs	r3, #1
 800a0d0:	e075      	b.n	800a1be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d101      	bne.n	800a0e0 <HAL_UART_Transmit+0x3e>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e06e      	b.n	800a1be <HAL_UART_Transmit+0x11c>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2221      	movs	r2, #33	; 0x21
 800a0f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0f6:	f7fb fa99 	bl	800562c <HAL_GetTick>
 800a0fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	88fa      	ldrh	r2, [r7, #6]
 800a100:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	88fa      	ldrh	r2, [r7, #6]
 800a106:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a110:	d108      	bne.n	800a124 <HAL_UART_Transmit+0x82>
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	691b      	ldr	r3, [r3, #16]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d104      	bne.n	800a124 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a11a:	2300      	movs	r3, #0
 800a11c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	61bb      	str	r3, [r7, #24]
 800a122:	e003      	b.n	800a12c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a134:	e02a      	b.n	800a18c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	2200      	movs	r2, #0
 800a13e:	2180      	movs	r1, #128	; 0x80
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f000 f840 	bl	800a1c6 <UART_WaitOnFlagUntilTimeout>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e036      	b.n	800a1be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d10b      	bne.n	800a16e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	881b      	ldrh	r3, [r3, #0]
 800a15a:	461a      	mov	r2, r3
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a164:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a166:	69bb      	ldr	r3, [r7, #24]
 800a168:	3302      	adds	r3, #2
 800a16a:	61bb      	str	r3, [r7, #24]
 800a16c:	e007      	b.n	800a17e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	781a      	ldrb	r2, [r3, #0]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	3301      	adds	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a182:	b29b      	uxth	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	b29a      	uxth	r2, r3
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a190:	b29b      	uxth	r3, r3
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1cf      	bne.n	800a136 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	2200      	movs	r2, #0
 800a19e:	2140      	movs	r1, #64	; 0x40
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f810 	bl	800a1c6 <UART_WaitOnFlagUntilTimeout>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e006      	b.n	800a1be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	2220      	movs	r2, #32
 800a1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	e000      	b.n	800a1be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a1bc:	2302      	movs	r3, #2
  }
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3720      	adds	r7, #32
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b090      	sub	sp, #64	; 0x40
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	60f8      	str	r0, [r7, #12]
 800a1ce:	60b9      	str	r1, [r7, #8]
 800a1d0:	603b      	str	r3, [r7, #0]
 800a1d2:	4613      	mov	r3, r2
 800a1d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1d6:	e050      	b.n	800a27a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1de:	d04c      	beq.n	800a27a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d007      	beq.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a1e6:	f7fb fa21 	bl	800562c <HAL_GetTick>
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d241      	bcs.n	800a27a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	330c      	adds	r3, #12
 800a1fc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a200:	e853 3f00 	ldrex	r3, [r3]
 800a204:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a20c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	330c      	adds	r3, #12
 800a214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a216:	637a      	str	r2, [r7, #52]	; 0x34
 800a218:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a21c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a21e:	e841 2300 	strex	r3, r2, [r1]
 800a222:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1e5      	bne.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	3314      	adds	r3, #20
 800a230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	613b      	str	r3, [r7, #16]
   return(result);
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	f023 0301 	bic.w	r3, r3, #1
 800a240:	63bb      	str	r3, [r7, #56]	; 0x38
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3314      	adds	r3, #20
 800a248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a24a:	623a      	str	r2, [r7, #32]
 800a24c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24e:	69f9      	ldr	r1, [r7, #28]
 800a250:	6a3a      	ldr	r2, [r7, #32]
 800a252:	e841 2300 	strex	r3, r2, [r1]
 800a256:	61bb      	str	r3, [r7, #24]
   return(result);
 800a258:	69bb      	ldr	r3, [r7, #24]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d1e5      	bne.n	800a22a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2220      	movs	r2, #32
 800a262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2220      	movs	r2, #32
 800a26a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a276:	2303      	movs	r3, #3
 800a278:	e00f      	b.n	800a29a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681a      	ldr	r2, [r3, #0]
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	4013      	ands	r3, r2
 800a284:	68ba      	ldr	r2, [r7, #8]
 800a286:	429a      	cmp	r2, r3
 800a288:	bf0c      	ite	eq
 800a28a:	2301      	moveq	r3, #1
 800a28c:	2300      	movne	r3, #0
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	461a      	mov	r2, r3
 800a292:	79fb      	ldrb	r3, [r7, #7]
 800a294:	429a      	cmp	r2, r3
 800a296:	d09f      	beq.n	800a1d8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3740      	adds	r7, #64	; 0x40
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
	...

0800a2a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a2a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a2a8:	b0c0      	sub	sp, #256	; 0x100
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c0:	68d9      	ldr	r1, [r3, #12]
 800a2c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	ea40 0301 	orr.w	r3, r0, r1
 800a2cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a2ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e0:	695b      	ldr	r3, [r3, #20]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	68db      	ldr	r3, [r3, #12]
 800a2f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a2fc:	f021 010c 	bic.w	r1, r1, #12
 800a300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a30a:	430b      	orrs	r3, r1
 800a30c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a30e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a31e:	6999      	ldr	r1, [r3, #24]
 800a320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	ea40 0301 	orr.w	r3, r0, r1
 800a32a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a32c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4b8f      	ldr	r3, [pc, #572]	; (800a570 <UART_SetConfig+0x2cc>)
 800a334:	429a      	cmp	r2, r3
 800a336:	d005      	beq.n	800a344 <UART_SetConfig+0xa0>
 800a338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	4b8d      	ldr	r3, [pc, #564]	; (800a574 <UART_SetConfig+0x2d0>)
 800a340:	429a      	cmp	r2, r3
 800a342:	d104      	bne.n	800a34e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a344:	f7fd f96c 	bl	8007620 <HAL_RCC_GetPCLK2Freq>
 800a348:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a34c:	e003      	b.n	800a356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a34e:	f7fd f953 	bl	80075f8 <HAL_RCC_GetPCLK1Freq>
 800a352:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a360:	f040 810c 	bne.w	800a57c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a368:	2200      	movs	r2, #0
 800a36a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a36e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a376:	4622      	mov	r2, r4
 800a378:	462b      	mov	r3, r5
 800a37a:	1891      	adds	r1, r2, r2
 800a37c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a37e:	415b      	adcs	r3, r3
 800a380:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a386:	4621      	mov	r1, r4
 800a388:	eb12 0801 	adds.w	r8, r2, r1
 800a38c:	4629      	mov	r1, r5
 800a38e:	eb43 0901 	adc.w	r9, r3, r1
 800a392:	f04f 0200 	mov.w	r2, #0
 800a396:	f04f 0300 	mov.w	r3, #0
 800a39a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a39e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a3a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a3a6:	4690      	mov	r8, r2
 800a3a8:	4699      	mov	r9, r3
 800a3aa:	4623      	mov	r3, r4
 800a3ac:	eb18 0303 	adds.w	r3, r8, r3
 800a3b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3b4:	462b      	mov	r3, r5
 800a3b6:	eb49 0303 	adc.w	r3, r9, r3
 800a3ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a3ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a3ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	18db      	adds	r3, r3, r3
 800a3d6:	653b      	str	r3, [r7, #80]	; 0x50
 800a3d8:	4613      	mov	r3, r2
 800a3da:	eb42 0303 	adc.w	r3, r2, r3
 800a3de:	657b      	str	r3, [r7, #84]	; 0x54
 800a3e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a3e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a3e8:	f7f6 fc6e 	bl	8000cc8 <__aeabi_uldivmod>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4b61      	ldr	r3, [pc, #388]	; (800a578 <UART_SetConfig+0x2d4>)
 800a3f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a3f6:	095b      	lsrs	r3, r3, #5
 800a3f8:	011c      	lsls	r4, r3, #4
 800a3fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a3fe:	2200      	movs	r2, #0
 800a400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a404:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a40c:	4642      	mov	r2, r8
 800a40e:	464b      	mov	r3, r9
 800a410:	1891      	adds	r1, r2, r2
 800a412:	64b9      	str	r1, [r7, #72]	; 0x48
 800a414:	415b      	adcs	r3, r3
 800a416:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a41c:	4641      	mov	r1, r8
 800a41e:	eb12 0a01 	adds.w	sl, r2, r1
 800a422:	4649      	mov	r1, r9
 800a424:	eb43 0b01 	adc.w	fp, r3, r1
 800a428:	f04f 0200 	mov.w	r2, #0
 800a42c:	f04f 0300 	mov.w	r3, #0
 800a430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a43c:	4692      	mov	sl, r2
 800a43e:	469b      	mov	fp, r3
 800a440:	4643      	mov	r3, r8
 800a442:	eb1a 0303 	adds.w	r3, sl, r3
 800a446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a44a:	464b      	mov	r3, r9
 800a44c:	eb4b 0303 	adc.w	r3, fp, r3
 800a450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a460:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a468:	460b      	mov	r3, r1
 800a46a:	18db      	adds	r3, r3, r3
 800a46c:	643b      	str	r3, [r7, #64]	; 0x40
 800a46e:	4613      	mov	r3, r2
 800a470:	eb42 0303 	adc.w	r3, r2, r3
 800a474:	647b      	str	r3, [r7, #68]	; 0x44
 800a476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a47a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a47e:	f7f6 fc23 	bl	8000cc8 <__aeabi_uldivmod>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4611      	mov	r1, r2
 800a488:	4b3b      	ldr	r3, [pc, #236]	; (800a578 <UART_SetConfig+0x2d4>)
 800a48a:	fba3 2301 	umull	r2, r3, r3, r1
 800a48e:	095b      	lsrs	r3, r3, #5
 800a490:	2264      	movs	r2, #100	; 0x64
 800a492:	fb02 f303 	mul.w	r3, r2, r3
 800a496:	1acb      	subs	r3, r1, r3
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a49e:	4b36      	ldr	r3, [pc, #216]	; (800a578 <UART_SetConfig+0x2d4>)
 800a4a0:	fba3 2302 	umull	r2, r3, r3, r2
 800a4a4:	095b      	lsrs	r3, r3, #5
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a4ac:	441c      	add	r4, r3
 800a4ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a4bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a4c0:	4642      	mov	r2, r8
 800a4c2:	464b      	mov	r3, r9
 800a4c4:	1891      	adds	r1, r2, r2
 800a4c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800a4c8:	415b      	adcs	r3, r3
 800a4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a4d0:	4641      	mov	r1, r8
 800a4d2:	1851      	adds	r1, r2, r1
 800a4d4:	6339      	str	r1, [r7, #48]	; 0x30
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	414b      	adcs	r3, r1
 800a4da:	637b      	str	r3, [r7, #52]	; 0x34
 800a4dc:	f04f 0200 	mov.w	r2, #0
 800a4e0:	f04f 0300 	mov.w	r3, #0
 800a4e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a4e8:	4659      	mov	r1, fp
 800a4ea:	00cb      	lsls	r3, r1, #3
 800a4ec:	4651      	mov	r1, sl
 800a4ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a4f2:	4651      	mov	r1, sl
 800a4f4:	00ca      	lsls	r2, r1, #3
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	4642      	mov	r2, r8
 800a4fe:	189b      	adds	r3, r3, r2
 800a500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a504:	464b      	mov	r3, r9
 800a506:	460a      	mov	r2, r1
 800a508:	eb42 0303 	adc.w	r3, r2, r3
 800a50c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a51c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a524:	460b      	mov	r3, r1
 800a526:	18db      	adds	r3, r3, r3
 800a528:	62bb      	str	r3, [r7, #40]	; 0x28
 800a52a:	4613      	mov	r3, r2
 800a52c:	eb42 0303 	adc.w	r3, r2, r3
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a53a:	f7f6 fbc5 	bl	8000cc8 <__aeabi_uldivmod>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4b0d      	ldr	r3, [pc, #52]	; (800a578 <UART_SetConfig+0x2d4>)
 800a544:	fba3 1302 	umull	r1, r3, r3, r2
 800a548:	095b      	lsrs	r3, r3, #5
 800a54a:	2164      	movs	r1, #100	; 0x64
 800a54c:	fb01 f303 	mul.w	r3, r1, r3
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	00db      	lsls	r3, r3, #3
 800a554:	3332      	adds	r3, #50	; 0x32
 800a556:	4a08      	ldr	r2, [pc, #32]	; (800a578 <UART_SetConfig+0x2d4>)
 800a558:	fba2 2303 	umull	r2, r3, r2, r3
 800a55c:	095b      	lsrs	r3, r3, #5
 800a55e:	f003 0207 	and.w	r2, r3, #7
 800a562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4422      	add	r2, r4
 800a56a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a56c:	e106      	b.n	800a77c <UART_SetConfig+0x4d8>
 800a56e:	bf00      	nop
 800a570:	40011000 	.word	0x40011000
 800a574:	40011400 	.word	0x40011400
 800a578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a57c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a580:	2200      	movs	r2, #0
 800a582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a586:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a58a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a58e:	4642      	mov	r2, r8
 800a590:	464b      	mov	r3, r9
 800a592:	1891      	adds	r1, r2, r2
 800a594:	6239      	str	r1, [r7, #32]
 800a596:	415b      	adcs	r3, r3
 800a598:	627b      	str	r3, [r7, #36]	; 0x24
 800a59a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a59e:	4641      	mov	r1, r8
 800a5a0:	1854      	adds	r4, r2, r1
 800a5a2:	4649      	mov	r1, r9
 800a5a4:	eb43 0501 	adc.w	r5, r3, r1
 800a5a8:	f04f 0200 	mov.w	r2, #0
 800a5ac:	f04f 0300 	mov.w	r3, #0
 800a5b0:	00eb      	lsls	r3, r5, #3
 800a5b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5b6:	00e2      	lsls	r2, r4, #3
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	461d      	mov	r5, r3
 800a5bc:	4643      	mov	r3, r8
 800a5be:	18e3      	adds	r3, r4, r3
 800a5c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a5c4:	464b      	mov	r3, r9
 800a5c6:	eb45 0303 	adc.w	r3, r5, r3
 800a5ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a5da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	008b      	lsls	r3, r1, #2
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	008a      	lsls	r2, r1, #2
 800a5f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a5fc:	f7f6 fb64 	bl	8000cc8 <__aeabi_uldivmod>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4b60      	ldr	r3, [pc, #384]	; (800a788 <UART_SetConfig+0x4e4>)
 800a606:	fba3 2302 	umull	r2, r3, r3, r2
 800a60a:	095b      	lsrs	r3, r3, #5
 800a60c:	011c      	lsls	r4, r3, #4
 800a60e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a612:	2200      	movs	r2, #0
 800a614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a61c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a620:	4642      	mov	r2, r8
 800a622:	464b      	mov	r3, r9
 800a624:	1891      	adds	r1, r2, r2
 800a626:	61b9      	str	r1, [r7, #24]
 800a628:	415b      	adcs	r3, r3
 800a62a:	61fb      	str	r3, [r7, #28]
 800a62c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a630:	4641      	mov	r1, r8
 800a632:	1851      	adds	r1, r2, r1
 800a634:	6139      	str	r1, [r7, #16]
 800a636:	4649      	mov	r1, r9
 800a638:	414b      	adcs	r3, r1
 800a63a:	617b      	str	r3, [r7, #20]
 800a63c:	f04f 0200 	mov.w	r2, #0
 800a640:	f04f 0300 	mov.w	r3, #0
 800a644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a648:	4659      	mov	r1, fp
 800a64a:	00cb      	lsls	r3, r1, #3
 800a64c:	4651      	mov	r1, sl
 800a64e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a652:	4651      	mov	r1, sl
 800a654:	00ca      	lsls	r2, r1, #3
 800a656:	4610      	mov	r0, r2
 800a658:	4619      	mov	r1, r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	4642      	mov	r2, r8
 800a65e:	189b      	adds	r3, r3, r2
 800a660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a664:	464b      	mov	r3, r9
 800a666:	460a      	mov	r2, r1
 800a668:	eb42 0303 	adc.w	r3, r2, r3
 800a66c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	67bb      	str	r3, [r7, #120]	; 0x78
 800a67a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	f04f 0300 	mov.w	r3, #0
 800a684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a688:	4649      	mov	r1, r9
 800a68a:	008b      	lsls	r3, r1, #2
 800a68c:	4641      	mov	r1, r8
 800a68e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a692:	4641      	mov	r1, r8
 800a694:	008a      	lsls	r2, r1, #2
 800a696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a69a:	f7f6 fb15 	bl	8000cc8 <__aeabi_uldivmod>
 800a69e:	4602      	mov	r2, r0
 800a6a0:	460b      	mov	r3, r1
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	4b38      	ldr	r3, [pc, #224]	; (800a788 <UART_SetConfig+0x4e4>)
 800a6a6:	fba3 2301 	umull	r2, r3, r3, r1
 800a6aa:	095b      	lsrs	r3, r3, #5
 800a6ac:	2264      	movs	r2, #100	; 0x64
 800a6ae:	fb02 f303 	mul.w	r3, r2, r3
 800a6b2:	1acb      	subs	r3, r1, r3
 800a6b4:	011b      	lsls	r3, r3, #4
 800a6b6:	3332      	adds	r3, #50	; 0x32
 800a6b8:	4a33      	ldr	r2, [pc, #204]	; (800a788 <UART_SetConfig+0x4e4>)
 800a6ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a6be:	095b      	lsrs	r3, r3, #5
 800a6c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a6c4:	441c      	add	r4, r3
 800a6c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	673b      	str	r3, [r7, #112]	; 0x70
 800a6ce:	677a      	str	r2, [r7, #116]	; 0x74
 800a6d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a6d4:	4642      	mov	r2, r8
 800a6d6:	464b      	mov	r3, r9
 800a6d8:	1891      	adds	r1, r2, r2
 800a6da:	60b9      	str	r1, [r7, #8]
 800a6dc:	415b      	adcs	r3, r3
 800a6de:	60fb      	str	r3, [r7, #12]
 800a6e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6e4:	4641      	mov	r1, r8
 800a6e6:	1851      	adds	r1, r2, r1
 800a6e8:	6039      	str	r1, [r7, #0]
 800a6ea:	4649      	mov	r1, r9
 800a6ec:	414b      	adcs	r3, r1
 800a6ee:	607b      	str	r3, [r7, #4]
 800a6f0:	f04f 0200 	mov.w	r2, #0
 800a6f4:	f04f 0300 	mov.w	r3, #0
 800a6f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a6fc:	4659      	mov	r1, fp
 800a6fe:	00cb      	lsls	r3, r1, #3
 800a700:	4651      	mov	r1, sl
 800a702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a706:	4651      	mov	r1, sl
 800a708:	00ca      	lsls	r2, r1, #3
 800a70a:	4610      	mov	r0, r2
 800a70c:	4619      	mov	r1, r3
 800a70e:	4603      	mov	r3, r0
 800a710:	4642      	mov	r2, r8
 800a712:	189b      	adds	r3, r3, r2
 800a714:	66bb      	str	r3, [r7, #104]	; 0x68
 800a716:	464b      	mov	r3, r9
 800a718:	460a      	mov	r2, r1
 800a71a:	eb42 0303 	adc.w	r3, r2, r3
 800a71e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	663b      	str	r3, [r7, #96]	; 0x60
 800a72a:	667a      	str	r2, [r7, #100]	; 0x64
 800a72c:	f04f 0200 	mov.w	r2, #0
 800a730:	f04f 0300 	mov.w	r3, #0
 800a734:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a738:	4649      	mov	r1, r9
 800a73a:	008b      	lsls	r3, r1, #2
 800a73c:	4641      	mov	r1, r8
 800a73e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a742:	4641      	mov	r1, r8
 800a744:	008a      	lsls	r2, r1, #2
 800a746:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a74a:	f7f6 fabd 	bl	8000cc8 <__aeabi_uldivmod>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4b0d      	ldr	r3, [pc, #52]	; (800a788 <UART_SetConfig+0x4e4>)
 800a754:	fba3 1302 	umull	r1, r3, r3, r2
 800a758:	095b      	lsrs	r3, r3, #5
 800a75a:	2164      	movs	r1, #100	; 0x64
 800a75c:	fb01 f303 	mul.w	r3, r1, r3
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	011b      	lsls	r3, r3, #4
 800a764:	3332      	adds	r3, #50	; 0x32
 800a766:	4a08      	ldr	r2, [pc, #32]	; (800a788 <UART_SetConfig+0x4e4>)
 800a768:	fba2 2303 	umull	r2, r3, r2, r3
 800a76c:	095b      	lsrs	r3, r3, #5
 800a76e:	f003 020f 	and.w	r2, r3, #15
 800a772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4422      	add	r2, r4
 800a77a:	609a      	str	r2, [r3, #8]
}
 800a77c:	bf00      	nop
 800a77e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a782:	46bd      	mov	sp, r7
 800a784:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a788:	51eb851f 	.word	0x51eb851f

0800a78c <__NVIC_SetPriority>:
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	6039      	str	r1, [r7, #0]
 800a796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	db0a      	blt.n	800a7b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	b2da      	uxtb	r2, r3
 800a7a4:	490c      	ldr	r1, [pc, #48]	; (800a7d8 <__NVIC_SetPriority+0x4c>)
 800a7a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a7aa:	0112      	lsls	r2, r2, #4
 800a7ac:	b2d2      	uxtb	r2, r2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a7b4:	e00a      	b.n	800a7cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	4908      	ldr	r1, [pc, #32]	; (800a7dc <__NVIC_SetPriority+0x50>)
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	f003 030f 	and.w	r3, r3, #15
 800a7c2:	3b04      	subs	r3, #4
 800a7c4:	0112      	lsls	r2, r2, #4
 800a7c6:	b2d2      	uxtb	r2, r2
 800a7c8:	440b      	add	r3, r1
 800a7ca:	761a      	strb	r2, [r3, #24]
}
 800a7cc:	bf00      	nop
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	e000e100 	.word	0xe000e100
 800a7dc:	e000ed00 	.word	0xe000ed00

0800a7e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a7e4:	4b05      	ldr	r3, [pc, #20]	; (800a7fc <SysTick_Handler+0x1c>)
 800a7e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a7e8:	f002 fec8 	bl	800d57c <xTaskGetSchedulerState>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d001      	beq.n	800a7f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a7f2:	f004 f869 	bl	800e8c8 <xPortSysTickHandler>
  }
}
 800a7f6:	bf00      	nop
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	e000e010 	.word	0xe000e010

0800a800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a800:	b580      	push	{r7, lr}
 800a802:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a804:	2100      	movs	r1, #0
 800a806:	f06f 0004 	mvn.w	r0, #4
 800a80a:	f7ff ffbf 	bl	800a78c <__NVIC_SetPriority>
#endif
}
 800a80e:	bf00      	nop
 800a810:	bd80      	pop	{r7, pc}
	...

0800a814 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a81a:	f3ef 8305 	mrs	r3, IPSR
 800a81e:	603b      	str	r3, [r7, #0]
  return(result);
 800a820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a822:	2b00      	cmp	r3, #0
 800a824:	d003      	beq.n	800a82e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a826:	f06f 0305 	mvn.w	r3, #5
 800a82a:	607b      	str	r3, [r7, #4]
 800a82c:	e00c      	b.n	800a848 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a82e:	4b0a      	ldr	r3, [pc, #40]	; (800a858 <osKernelInitialize+0x44>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d105      	bne.n	800a842 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a836:	4b08      	ldr	r3, [pc, #32]	; (800a858 <osKernelInitialize+0x44>)
 800a838:	2201      	movs	r2, #1
 800a83a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	607b      	str	r3, [r7, #4]
 800a840:	e002      	b.n	800a848 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a842:	f04f 33ff 	mov.w	r3, #4294967295
 800a846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a848:	687b      	ldr	r3, [r7, #4]
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	370c      	adds	r7, #12
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	20000858 	.word	0x20000858

0800a85c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a862:	f3ef 8305 	mrs	r3, IPSR
 800a866:	603b      	str	r3, [r7, #0]
  return(result);
 800a868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a86e:	f06f 0305 	mvn.w	r3, #5
 800a872:	607b      	str	r3, [r7, #4]
 800a874:	e010      	b.n	800a898 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a876:	4b0b      	ldr	r3, [pc, #44]	; (800a8a4 <osKernelStart+0x48>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	d109      	bne.n	800a892 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a87e:	f7ff ffbf 	bl	800a800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a882:	4b08      	ldr	r3, [pc, #32]	; (800a8a4 <osKernelStart+0x48>)
 800a884:	2202      	movs	r2, #2
 800a886:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a888:	f002 f9fa 	bl	800cc80 <vTaskStartScheduler>
      stat = osOK;
 800a88c:	2300      	movs	r3, #0
 800a88e:	607b      	str	r3, [r7, #4]
 800a890:	e002      	b.n	800a898 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a892:	f04f 33ff 	mov.w	r3, #4294967295
 800a896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a898:	687b      	ldr	r3, [r7, #4]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20000858 	.word	0x20000858

0800a8a8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8ae:	f3ef 8305 	mrs	r3, IPSR
 800a8b2:	603b      	str	r3, [r7, #0]
  return(result);
 800a8b4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a8ba:	f002 fb0d 	bl	800ced8 <xTaskGetTickCountFromISR>
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	e002      	b.n	800a8c8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a8c2:	f002 faf9 	bl	800ceb8 <xTaskGetTickCount>
 800a8c6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a8c8:	687b      	ldr	r3, [r7, #4]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800a8d2:	b480      	push	{r7}
 800a8d4:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800a8d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08e      	sub	sp, #56	; 0x38
 800a8e8:	af04      	add	r7, sp, #16
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8f4:	f3ef 8305 	mrs	r3, IPSR
 800a8f8:	617b      	str	r3, [r7, #20]
  return(result);
 800a8fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d17e      	bne.n	800a9fe <osThreadNew+0x11a>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d07b      	beq.n	800a9fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a906:	2380      	movs	r3, #128	; 0x80
 800a908:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a90a:	2318      	movs	r3, #24
 800a90c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a912:	f04f 33ff 	mov.w	r3, #4294967295
 800a916:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d045      	beq.n	800a9aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <osThreadNew+0x48>
        name = attr->name;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a93a:	69fb      	ldr	r3, [r7, #28]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d008      	beq.n	800a952 <osThreadNew+0x6e>
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	2b38      	cmp	r3, #56	; 0x38
 800a944:	d805      	bhi.n	800a952 <osThreadNew+0x6e>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d001      	beq.n	800a956 <osThreadNew+0x72>
        return (NULL);
 800a952:	2300      	movs	r3, #0
 800a954:	e054      	b.n	800aa00 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	695b      	ldr	r3, [r3, #20]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d003      	beq.n	800a966 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	695b      	ldr	r3, [r3, #20]
 800a962:	089b      	lsrs	r3, r3, #2
 800a964:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00e      	beq.n	800a98c <osThreadNew+0xa8>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	2ba7      	cmp	r3, #167	; 0xa7
 800a974:	d90a      	bls.n	800a98c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d006      	beq.n	800a98c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <osThreadNew+0xa8>
        mem = 1;
 800a986:	2301      	movs	r3, #1
 800a988:	61bb      	str	r3, [r7, #24]
 800a98a:	e010      	b.n	800a9ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10c      	bne.n	800a9ae <osThreadNew+0xca>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d108      	bne.n	800a9ae <osThreadNew+0xca>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d104      	bne.n	800a9ae <osThreadNew+0xca>
          mem = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	61bb      	str	r3, [r7, #24]
 800a9a8:	e001      	b.n	800a9ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a9ae:	69bb      	ldr	r3, [r7, #24]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d110      	bne.n	800a9d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a9bc:	9202      	str	r2, [sp, #8]
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	9300      	str	r3, [sp, #0]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	6a3a      	ldr	r2, [r7, #32]
 800a9c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f001 ff22 	bl	800c814 <xTaskCreateStatic>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	613b      	str	r3, [r7, #16]
 800a9d4:	e013      	b.n	800a9fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a9d6:	69bb      	ldr	r3, [r7, #24]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d110      	bne.n	800a9fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	f107 0310 	add.w	r3, r7, #16
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	69fb      	ldr	r3, [r7, #28]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f001 ff6d 	bl	800c8ce <xTaskCreate>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d001      	beq.n	800a9fe <osThreadNew+0x11a>
            hTask = NULL;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a9fe:	693b      	ldr	r3, [r7, #16]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3728      	adds	r7, #40	; 0x28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af02      	add	r7, sp, #8
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <osThreadFlagsSet+0x1a>
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	da03      	bge.n	800aa2a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800aa22:	f06f 0303 	mvn.w	r3, #3
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	e035      	b.n	800aa96 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800aa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa30:	f3ef 8305 	mrs	r3, IPSR
 800aa34:	613b      	str	r3, [r7, #16]
  return(result);
 800aa36:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01f      	beq.n	800aa7c <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800aa40:	f107 0308 	add.w	r3, r7, #8
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	2300      	movs	r3, #0
 800aa48:	2201      	movs	r2, #1
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6978      	ldr	r0, [r7, #20]
 800aa4e:	f003 f83d 	bl	800dacc <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800aa52:	f107 030c 	add.w	r3, r7, #12
 800aa56:	2200      	movs	r2, #0
 800aa58:	9200      	str	r2, [sp, #0]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	6978      	ldr	r0, [r7, #20]
 800aa60:	f003 f834 	bl	800dacc <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d015      	beq.n	800aa96 <osThreadFlagsSet+0x8e>
 800aa6a:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <osThreadFlagsSet+0x98>)
 800aa6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa70:	601a      	str	r2, [r3, #0]
 800aa72:	f3bf 8f4f 	dsb	sy
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	e00c      	b.n	800aa96 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	2201      	movs	r2, #1
 800aa80:	6839      	ldr	r1, [r7, #0]
 800aa82:	6978      	ldr	r0, [r7, #20]
 800aa84:	f002 ff64 	bl	800d950 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800aa88:	f107 030c 	add.w	r3, r7, #12
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2100      	movs	r1, #0
 800aa90:	6978      	ldr	r0, [r7, #20]
 800aa92:	f002 ff5d 	bl	800d950 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800aa96:	68fb      	ldr	r3, [r7, #12]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	e000ed04 	.word	0xe000ed04

0800aaa4 <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b086      	sub	sp, #24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaac:	f3ef 8305 	mrs	r3, IPSR
 800aab0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aab2:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d003      	beq.n	800aac0 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 800aab8:	f06f 0305 	mvn.w	r3, #5
 800aabc:	617b      	str	r3, [r7, #20]
 800aabe:	e02a      	b.n	800ab16 <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	da03      	bge.n	800aace <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800aac6:	f06f 0303 	mvn.w	r3, #3
 800aaca:	617b      	str	r3, [r7, #20]
 800aacc:	e023      	b.n	800ab16 <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800aace:	f002 fd45 	bl	800d55c <xTaskGetCurrentTaskHandle>
 800aad2:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800aad4:	f107 0308 	add.w	r3, r7, #8
 800aad8:	2200      	movs	r2, #0
 800aada:	2100      	movs	r1, #0
 800aadc:	6938      	ldr	r0, [r7, #16]
 800aade:	f002 ff37 	bl	800d950 <xTaskGenericNotify>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d113      	bne.n	800ab10 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	43da      	mvns	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800aaf6:	68b9      	ldr	r1, [r7, #8]
 800aaf8:	2300      	movs	r3, #0
 800aafa:	2203      	movs	r2, #3
 800aafc:	6938      	ldr	r0, [r7, #16]
 800aafe:	f002 ff27 	bl	800d950 <xTaskGenericNotify>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d006      	beq.n	800ab16 <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 800ab08:	f04f 33ff 	mov.w	r3, #4294967295
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	e002      	b.n	800ab16 <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800ab10:	f04f 33ff 	mov.w	r3, #4294967295
 800ab14:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800ab16:	697b      	ldr	r3, [r7, #20]
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3718      	adds	r7, #24
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b08c      	sub	sp, #48	; 0x30
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab2c:	f3ef 8305 	mrs	r3, IPSR
 800ab30:	617b      	str	r3, [r7, #20]
  return(result);
 800ab32:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d003      	beq.n	800ab40 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800ab38:	f06f 0305 	mvn.w	r3, #5
 800ab3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab3e:	e06b      	b.n	800ac18 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da03      	bge.n	800ab4e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800ab46:	f06f 0303 	mvn.w	r3, #3
 800ab4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab4c:	e064      	b.n	800ac18 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	f003 0302 	and.w	r3, r3, #2
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d002      	beq.n	800ab5e <osThreadFlagsWait+0x3e>
      clear = 0U;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab5c:	e001      	b.n	800ab62 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800ab62:	2300      	movs	r3, #0
 800ab64:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800ab6a:	f002 f9a5 	bl	800ceb8 <xTaskGetTickCount>
 800ab6e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800ab70:	f107 0210 	add.w	r2, r7, #16
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab78:	2000      	movs	r0, #0
 800ab7a:	f002 fe89 	bl	800d890 <xTaskNotifyWait>
 800ab7e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d137      	bne.n	800abf6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800ab86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab92:	4313      	orrs	r3, r2
 800ab94:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d00c      	beq.n	800abba <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba4:	4013      	ands	r3, r2
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d032      	beq.n	800ac12 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10f      	bne.n	800abd2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800abb2:	f06f 0302 	mvn.w	r3, #2
 800abb6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800abb8:	e02e      	b.n	800ac18 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	4013      	ands	r3, r2
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d128      	bne.n	800ac16 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800abca:	f06f 0302 	mvn.w	r3, #2
 800abce:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800abd0:	e022      	b.n	800ac18 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800abd2:	f002 f971 	bl	800ceb8 <xTaskGetTickCount>
 800abd6:	4602      	mov	r2, r0
 800abd8:	6a3b      	ldr	r3, [r7, #32]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800abde:	69ba      	ldr	r2, [r7, #24]
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d902      	bls.n	800abec <osThreadFlagsWait+0xcc>
          tout  = 0;
 800abe6:	2300      	movs	r3, #0
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
 800abea:	e00e      	b.n	800ac0a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800abec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abee:	69bb      	ldr	r3, [r7, #24]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	627b      	str	r3, [r7, #36]	; 0x24
 800abf4:	e009      	b.n	800ac0a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d103      	bne.n	800ac04 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800abfc:	f06f 0302 	mvn.w	r3, #2
 800ac00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac02:	e002      	b.n	800ac0a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800ac04:	f06f 0301 	mvn.w	r3, #1
 800ac08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800ac0a:	69fb      	ldr	r3, [r7, #28]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d1af      	bne.n	800ab70 <osThreadFlagsWait+0x50>
 800ac10:	e002      	b.n	800ac18 <osThreadFlagsWait+0xf8>
            break;
 800ac12:	bf00      	nop
 800ac14:	e000      	b.n	800ac18 <osThreadFlagsWait+0xf8>
            break;
 800ac16:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800ac18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3730      	adds	r7, #48	; 0x30
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}

0800ac22 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 800ac22:	b580      	push	{r7, lr}
 800ac24:	b086      	sub	sp, #24
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac2a:	f3ef 8305 	mrs	r3, IPSR
 800ac2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac30:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ac36:	f06f 0305 	mvn.w	r3, #5
 800ac3a:	617b      	str	r3, [r7, #20]
 800ac3c:	e019      	b.n	800ac72 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ac42:	f002 f939 	bl	800ceb8 <xTaskGetTickCount>
 800ac46:	4603      	mov	r3, r0
 800ac48:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	1ad3      	subs	r3, r2, r3
 800ac50:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d009      	beq.n	800ac6c <osDelayUntil+0x4a>
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	db06      	blt.n	800ac6c <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800ac5e:	f107 0308 	add.w	r3, r7, #8
 800ac62:	6939      	ldr	r1, [r7, #16]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f001 ff8d 	bl	800cb84 <vTaskDelayUntil>
 800ac6a:	e002      	b.n	800ac72 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ac6c:	f06f 0303 	mvn.w	r3, #3
 800ac70:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ac72:	697b      	ldr	r3, [r7, #20]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f003 fc41 	bl	800e50c <pvTimerGetTimerID>
 800ac8a:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d005      	beq.n	800ac9e <TimerCallback+0x22>
    callb->func (callb->arg);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	6852      	ldr	r2, [r2, #4]
 800ac9a:	4610      	mov	r0, r2
 800ac9c:	4798      	blx	r3
  }
}
 800ac9e:	bf00      	nop
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b08c      	sub	sp, #48	; 0x30
 800acac:	af02      	add	r7, sp, #8
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	607a      	str	r2, [r7, #4]
 800acb2:	603b      	str	r3, [r7, #0]
 800acb4:	460b      	mov	r3, r1
 800acb6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800acb8:	2300      	movs	r3, #0
 800acba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800acbc:	f3ef 8305 	mrs	r3, IPSR
 800acc0:	613b      	str	r3, [r7, #16]
  return(result);
 800acc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d163      	bne.n	800ad90 <osTimerNew+0xe8>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d060      	beq.n	800ad90 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800acce:	2008      	movs	r0, #8
 800acd0:	f003 fe8a 	bl	800e9e8 <pvPortMalloc>
 800acd4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d059      	beq.n	800ad90 <osTimerNew+0xe8>
      callb->func = func;
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800ace8:	7afb      	ldrb	r3, [r7, #11]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d102      	bne.n	800acf4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800acee:	2300      	movs	r3, #0
 800acf0:	61fb      	str	r3, [r7, #28]
 800acf2:	e001      	b.n	800acf8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800acf4:	2301      	movs	r3, #1
 800acf6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800acf8:	f04f 33ff 	mov.w	r3, #4294967295
 800acfc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800acfe:	2300      	movs	r3, #0
 800ad00:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d01c      	beq.n	800ad42 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <osTimerNew+0x6e>
          name = attr->name;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d006      	beq.n	800ad2c <osTimerNew+0x84>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	2b2b      	cmp	r3, #43	; 0x2b
 800ad24:	d902      	bls.n	800ad2c <osTimerNew+0x84>
          mem = 1;
 800ad26:	2301      	movs	r3, #1
 800ad28:	61bb      	str	r3, [r7, #24]
 800ad2a:	e00c      	b.n	800ad46 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d108      	bne.n	800ad46 <osTimerNew+0x9e>
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d104      	bne.n	800ad46 <osTimerNew+0x9e>
            mem = 0;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61bb      	str	r3, [r7, #24]
 800ad40:	e001      	b.n	800ad46 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800ad42:	2300      	movs	r3, #0
 800ad44:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d10c      	bne.n	800ad66 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	4b12      	ldr	r3, [pc, #72]	; (800ad9c <osTimerNew+0xf4>)
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	69fa      	ldr	r2, [r7, #28]
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad5e:	f003 f856 	bl	800de0e <xTimerCreateStatic>
 800ad62:	6238      	str	r0, [r7, #32]
 800ad64:	e00b      	b.n	800ad7e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d108      	bne.n	800ad7e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ad6c:	4b0b      	ldr	r3, [pc, #44]	; (800ad9c <osTimerNew+0xf4>)
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	69fa      	ldr	r2, [r7, #28]
 800ad74:	2101      	movs	r1, #1
 800ad76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ad78:	f003 f828 	bl	800ddcc <xTimerCreate>
 800ad7c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800ad7e:	6a3b      	ldr	r3, [r7, #32]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d105      	bne.n	800ad90 <osTimerNew+0xe8>
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d002      	beq.n	800ad90 <osTimerNew+0xe8>
        vPortFree (callb);
 800ad8a:	6978      	ldr	r0, [r7, #20]
 800ad8c:	f003 fef8 	bl	800eb80 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ad90:	6a3b      	ldr	r3, [r7, #32]
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3728      	adds	r7, #40	; 0x28
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	0800ac7d 	.word	0x0800ac7d

0800ada0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b088      	sub	sp, #32
 800ada4:	af02      	add	r7, sp, #8
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adae:	f3ef 8305 	mrs	r3, IPSR
 800adb2:	60fb      	str	r3, [r7, #12]
  return(result);
 800adb4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d003      	beq.n	800adc2 <osTimerStart+0x22>
    stat = osErrorISR;
 800adba:	f06f 0305 	mvn.w	r3, #5
 800adbe:	617b      	str	r3, [r7, #20]
 800adc0:	e017      	b.n	800adf2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d103      	bne.n	800add0 <osTimerStart+0x30>
    stat = osErrorParameter;
 800adc8:	f06f 0303 	mvn.w	r3, #3
 800adcc:	617b      	str	r3, [r7, #20]
 800adce:	e010      	b.n	800adf2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800add0:	2300      	movs	r3, #0
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	2300      	movs	r3, #0
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	2104      	movs	r1, #4
 800adda:	6938      	ldr	r0, [r7, #16]
 800addc:	f003 f890 	bl	800df00 <xTimerGenericCommand>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d102      	bne.n	800adec <osTimerStart+0x4c>
      stat = osOK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	617b      	str	r3, [r7, #20]
 800adea:	e002      	b.n	800adf2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800adec:	f06f 0302 	mvn.w	r3, #2
 800adf0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800adf2:	697b      	ldr	r3, [r7, #20]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3718      	adds	r7, #24
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ae04:	2300      	movs	r3, #0
 800ae06:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae08:	f3ef 8305 	mrs	r3, IPSR
 800ae0c:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae0e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d174      	bne.n	800aefe <osMutexNew+0x102>
    if (attr != NULL) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d003      	beq.n	800ae22 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	61bb      	str	r3, [r7, #24]
 800ae20:	e001      	b.n	800ae26 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ae22:	2300      	movs	r3, #0
 800ae24:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d002      	beq.n	800ae36 <osMutexNew+0x3a>
      rmtx = 1U;
 800ae30:	2301      	movs	r3, #1
 800ae32:	617b      	str	r3, [r7, #20]
 800ae34:	e001      	b.n	800ae3a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ae36:	2300      	movs	r3, #0
 800ae38:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	f003 0308 	and.w	r3, r3, #8
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d15c      	bne.n	800aefe <osMutexNew+0x102>
      mem = -1;
 800ae44:	f04f 33ff 	mov.w	r3, #4294967295
 800ae48:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d015      	beq.n	800ae7c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d006      	beq.n	800ae66 <osMutexNew+0x6a>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	2b4f      	cmp	r3, #79	; 0x4f
 800ae5e:	d902      	bls.n	800ae66 <osMutexNew+0x6a>
          mem = 1;
 800ae60:	2301      	movs	r3, #1
 800ae62:	613b      	str	r3, [r7, #16]
 800ae64:	e00c      	b.n	800ae80 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d108      	bne.n	800ae80 <osMutexNew+0x84>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d104      	bne.n	800ae80 <osMutexNew+0x84>
            mem = 0;
 800ae76:	2300      	movs	r3, #0
 800ae78:	613b      	str	r3, [r7, #16]
 800ae7a:	e001      	b.n	800ae80 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d112      	bne.n	800aeac <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d007      	beq.n	800ae9c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	4619      	mov	r1, r3
 800ae92:	2004      	movs	r0, #4
 800ae94:	f000 fd69 	bl	800b96a <xQueueCreateMutexStatic>
 800ae98:	61f8      	str	r0, [r7, #28]
 800ae9a:	e016      	b.n	800aeca <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	4619      	mov	r1, r3
 800aea2:	2001      	movs	r0, #1
 800aea4:	f000 fd61 	bl	800b96a <xQueueCreateMutexStatic>
 800aea8:	61f8      	str	r0, [r7, #28]
 800aeaa:	e00e      	b.n	800aeca <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d10b      	bne.n	800aeca <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d004      	beq.n	800aec2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800aeb8:	2004      	movs	r0, #4
 800aeba:	f000 fd3e 	bl	800b93a <xQueueCreateMutex>
 800aebe:	61f8      	str	r0, [r7, #28]
 800aec0:	e003      	b.n	800aeca <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800aec2:	2001      	movs	r0, #1
 800aec4:	f000 fd39 	bl	800b93a <xQueueCreateMutex>
 800aec8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00c      	beq.n	800aeea <osMutexNew+0xee>
        if (attr != NULL) {
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <osMutexNew+0xe2>
          name = attr->name;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	e001      	b.n	800aee2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800aee2:	68f9      	ldr	r1, [r7, #12]
 800aee4:	69f8      	ldr	r0, [r7, #28]
 800aee6:	f001 fc0d 	bl	800c704 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800aeea:	69fb      	ldr	r3, [r7, #28]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d006      	beq.n	800aefe <osMutexNew+0x102>
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	f043 0301 	orr.w	r3, r3, #1
 800aefc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800aefe:	69fb      	ldr	r3, [r7, #28]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3720      	adds	r7, #32
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f023 0301 	bic.w	r3, r3, #1
 800af18:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800af22:	2300      	movs	r3, #0
 800af24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af26:	f3ef 8305 	mrs	r3, IPSR
 800af2a:	60bb      	str	r3, [r7, #8]
  return(result);
 800af2c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800af32:	f06f 0305 	mvn.w	r3, #5
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	e02c      	b.n	800af94 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d103      	bne.n	800af48 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800af40:	f06f 0303 	mvn.w	r3, #3
 800af44:	617b      	str	r3, [r7, #20]
 800af46:	e025      	b.n	800af94 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d011      	beq.n	800af72 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800af4e:	6839      	ldr	r1, [r7, #0]
 800af50:	6938      	ldr	r0, [r7, #16]
 800af52:	f000 fd59 	bl	800ba08 <xQueueTakeMutexRecursive>
 800af56:	4603      	mov	r3, r0
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d01b      	beq.n	800af94 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d003      	beq.n	800af6a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800af62:	f06f 0301 	mvn.w	r3, #1
 800af66:	617b      	str	r3, [r7, #20]
 800af68:	e014      	b.n	800af94 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800af6a:	f06f 0302 	mvn.w	r3, #2
 800af6e:	617b      	str	r3, [r7, #20]
 800af70:	e010      	b.n	800af94 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6938      	ldr	r0, [r7, #16]
 800af76:	f001 f8ed 	bl	800c154 <xQueueSemaphoreTake>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d009      	beq.n	800af94 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d003      	beq.n	800af8e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800af86:	f06f 0301 	mvn.w	r3, #1
 800af8a:	617b      	str	r3, [r7, #20]
 800af8c:	e002      	b.n	800af94 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800af8e:	f06f 0302 	mvn.w	r3, #2
 800af92:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800af94:	697b      	ldr	r3, [r7, #20]
}
 800af96:	4618      	mov	r0, r3
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b086      	sub	sp, #24
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f023 0301 	bic.w	r3, r3, #1
 800afac:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800afb6:	2300      	movs	r3, #0
 800afb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afba:	f3ef 8305 	mrs	r3, IPSR
 800afbe:	60bb      	str	r3, [r7, #8]
  return(result);
 800afc0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d003      	beq.n	800afce <osMutexRelease+0x30>
    stat = osErrorISR;
 800afc6:	f06f 0305 	mvn.w	r3, #5
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	e01f      	b.n	800b00e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d103      	bne.n	800afdc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800afd4:	f06f 0303 	mvn.w	r3, #3
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	e018      	b.n	800b00e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d009      	beq.n	800aff6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800afe2:	6938      	ldr	r0, [r7, #16]
 800afe4:	f000 fcdc 	bl	800b9a0 <xQueueGiveMutexRecursive>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b01      	cmp	r3, #1
 800afec:	d00f      	beq.n	800b00e <osMutexRelease+0x70>
        stat = osErrorResource;
 800afee:	f06f 0302 	mvn.w	r3, #2
 800aff2:	617b      	str	r3, [r7, #20]
 800aff4:	e00b      	b.n	800b00e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800aff6:	2300      	movs	r3, #0
 800aff8:	2200      	movs	r2, #0
 800affa:	2100      	movs	r1, #0
 800affc:	6938      	ldr	r0, [r7, #16]
 800affe:	f000 fda3 	bl	800bb48 <xQueueGenericSend>
 800b002:	4603      	mov	r3, r0
 800b004:	2b01      	cmp	r3, #1
 800b006:	d002      	beq.n	800b00e <osMutexRelease+0x70>
        stat = osErrorResource;
 800b008:	f06f 0302 	mvn.w	r3, #2
 800b00c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b00e:	697b      	ldr	r3, [r7, #20]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3718      	adds	r7, #24
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08a      	sub	sp, #40	; 0x28
 800b01c:	af02      	add	r7, sp, #8
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b024:	2300      	movs	r3, #0
 800b026:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b028:	f3ef 8305 	mrs	r3, IPSR
 800b02c:	613b      	str	r3, [r7, #16]
  return(result);
 800b02e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b030:	2b00      	cmp	r3, #0
 800b032:	d175      	bne.n	800b120 <osSemaphoreNew+0x108>
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d072      	beq.n	800b120 <osSemaphoreNew+0x108>
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d86e      	bhi.n	800b120 <osSemaphoreNew+0x108>
    mem = -1;
 800b042:	f04f 33ff 	mov.w	r3, #4294967295
 800b046:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d015      	beq.n	800b07a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d006      	beq.n	800b064 <osSemaphoreNew+0x4c>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	2b4f      	cmp	r3, #79	; 0x4f
 800b05c:	d902      	bls.n	800b064 <osSemaphoreNew+0x4c>
        mem = 1;
 800b05e:	2301      	movs	r3, #1
 800b060:	61bb      	str	r3, [r7, #24]
 800b062:	e00c      	b.n	800b07e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d108      	bne.n	800b07e <osSemaphoreNew+0x66>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d104      	bne.n	800b07e <osSemaphoreNew+0x66>
          mem = 0;
 800b074:	2300      	movs	r3, #0
 800b076:	61bb      	str	r3, [r7, #24]
 800b078:	e001      	b.n	800b07e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b07a:	2300      	movs	r3, #0
 800b07c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b084:	d04c      	beq.n	800b120 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d128      	bne.n	800b0de <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d10a      	bne.n	800b0a8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	2203      	movs	r2, #3
 800b098:	9200      	str	r2, [sp, #0]
 800b09a:	2200      	movs	r2, #0
 800b09c:	2100      	movs	r1, #0
 800b09e:	2001      	movs	r0, #1
 800b0a0:	f000 fb5c 	bl	800b75c <xQueueGenericCreateStatic>
 800b0a4:	61f8      	str	r0, [r7, #28]
 800b0a6:	e005      	b.n	800b0b4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b0a8:	2203      	movs	r2, #3
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	f000 fbcd 	bl	800b84c <xQueueGenericCreate>
 800b0b2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b0b4:	69fb      	ldr	r3, [r7, #28]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d022      	beq.n	800b100 <osSemaphoreNew+0xe8>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d01f      	beq.n	800b100 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	69f8      	ldr	r0, [r7, #28]
 800b0c8:	f000 fd3e 	bl	800bb48 <xQueueGenericSend>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d016      	beq.n	800b100 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b0d2:	69f8      	ldr	r0, [r7, #28]
 800b0d4:	f001 f9ca 	bl	800c46c <vQueueDelete>
            hSemaphore = NULL;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	61fb      	str	r3, [r7, #28]
 800b0dc:	e010      	b.n	800b100 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b0de:	69bb      	ldr	r3, [r7, #24]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d108      	bne.n	800b0f6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	68b9      	ldr	r1, [r7, #8]
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f000 fcc1 	bl	800ba74 <xQueueCreateCountingSemaphoreStatic>
 800b0f2:	61f8      	str	r0, [r7, #28]
 800b0f4:	e004      	b.n	800b100 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 fcf2 	bl	800bae2 <xQueueCreateCountingSemaphore>
 800b0fe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b100:	69fb      	ldr	r3, [r7, #28]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00c      	beq.n	800b120 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	617b      	str	r3, [r7, #20]
 800b112:	e001      	b.n	800b118 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b114:	2300      	movs	r3, #0
 800b116:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b118:	6979      	ldr	r1, [r7, #20]
 800b11a:	69f8      	ldr	r0, [r7, #28]
 800b11c:	f001 faf2 	bl	800c704 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b120:	69fb      	ldr	r3, [r7, #28]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3720      	adds	r7, #32
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
 800b134:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d103      	bne.n	800b14c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b144:	f06f 0303 	mvn.w	r3, #3
 800b148:	617b      	str	r3, [r7, #20]
 800b14a:	e039      	b.n	800b1c0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b14c:	f3ef 8305 	mrs	r3, IPSR
 800b150:	60fb      	str	r3, [r7, #12]
  return(result);
 800b152:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b154:	2b00      	cmp	r3, #0
 800b156:	d022      	beq.n	800b19e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b15e:	f06f 0303 	mvn.w	r3, #3
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	e02c      	b.n	800b1c0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b166:	2300      	movs	r3, #0
 800b168:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b16a:	f107 0308 	add.w	r3, r7, #8
 800b16e:	461a      	mov	r2, r3
 800b170:	2100      	movs	r1, #0
 800b172:	6938      	ldr	r0, [r7, #16]
 800b174:	f001 f8fa 	bl	800c36c <xQueueReceiveFromISR>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d003      	beq.n	800b186 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b17e:	f06f 0302 	mvn.w	r3, #2
 800b182:	617b      	str	r3, [r7, #20]
 800b184:	e01c      	b.n	800b1c0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d019      	beq.n	800b1c0 <osSemaphoreAcquire+0x94>
 800b18c:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <osSemaphoreAcquire+0xa0>)
 800b18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	e010      	b.n	800b1c0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6938      	ldr	r0, [r7, #16]
 800b1a2:	f000 ffd7 	bl	800c154 <xQueueSemaphoreTake>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d009      	beq.n	800b1c0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b1b2:	f06f 0301 	mvn.w	r3, #1
 800b1b6:	617b      	str	r3, [r7, #20]
 800b1b8:	e002      	b.n	800b1c0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b1ba:	f06f 0302 	mvn.w	r3, #2
 800b1be:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b1c0:	697b      	ldr	r3, [r7, #20]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3718      	adds	r7, #24
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	e000ed04 	.word	0xe000ed04

0800b1d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b086      	sub	sp, #24
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d103      	bne.n	800b1ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b1e6:	f06f 0303 	mvn.w	r3, #3
 800b1ea:	617b      	str	r3, [r7, #20]
 800b1ec:	e02c      	b.n	800b248 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b1ee:	f3ef 8305 	mrs	r3, IPSR
 800b1f2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d01a      	beq.n	800b230 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b1fe:	f107 0308 	add.w	r3, r7, #8
 800b202:	4619      	mov	r1, r3
 800b204:	6938      	ldr	r0, [r7, #16]
 800b206:	f000 fe38 	bl	800be7a <xQueueGiveFromISR>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d003      	beq.n	800b218 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b210:	f06f 0302 	mvn.w	r3, #2
 800b214:	617b      	str	r3, [r7, #20]
 800b216:	e017      	b.n	800b248 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d014      	beq.n	800b248 <osSemaphoreRelease+0x78>
 800b21e:	4b0d      	ldr	r3, [pc, #52]	; (800b254 <osSemaphoreRelease+0x84>)
 800b220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	e00b      	b.n	800b248 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b230:	2300      	movs	r3, #0
 800b232:	2200      	movs	r2, #0
 800b234:	2100      	movs	r1, #0
 800b236:	6938      	ldr	r0, [r7, #16]
 800b238:	f000 fc86 	bl	800bb48 <xQueueGenericSend>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d002      	beq.n	800b248 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b242:	f06f 0302 	mvn.w	r3, #2
 800b246:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b248:	697b      	ldr	r3, [r7, #20]
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	e000ed04 	.word	0xe000ed04

0800b258 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b258:	b580      	push	{r7, lr}
 800b25a:	b08a      	sub	sp, #40	; 0x28
 800b25c:	af02      	add	r7, sp, #8
 800b25e:	60f8      	str	r0, [r7, #12]
 800b260:	60b9      	str	r1, [r7, #8]
 800b262:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b264:	2300      	movs	r3, #0
 800b266:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b268:	f3ef 8305 	mrs	r3, IPSR
 800b26c:	613b      	str	r3, [r7, #16]
  return(result);
 800b26e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b270:	2b00      	cmp	r3, #0
 800b272:	d15f      	bne.n	800b334 <osMessageQueueNew+0xdc>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d05c      	beq.n	800b334 <osMessageQueueNew+0xdc>
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d059      	beq.n	800b334 <osMessageQueueNew+0xdc>
    mem = -1;
 800b280:	f04f 33ff 	mov.w	r3, #4294967295
 800b284:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d029      	beq.n	800b2e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	689b      	ldr	r3, [r3, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d012      	beq.n	800b2ba <osMessageQueueNew+0x62>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	2b4f      	cmp	r3, #79	; 0x4f
 800b29a:	d90e      	bls.n	800b2ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d00a      	beq.n	800b2ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	695a      	ldr	r2, [r3, #20]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	68b9      	ldr	r1, [r7, #8]
 800b2ac:	fb01 f303 	mul.w	r3, r1, r3
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d302      	bcc.n	800b2ba <osMessageQueueNew+0x62>
        mem = 1;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	61bb      	str	r3, [r7, #24]
 800b2b8:	e014      	b.n	800b2e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	689b      	ldr	r3, [r3, #8]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d110      	bne.n	800b2e4 <osMessageQueueNew+0x8c>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	68db      	ldr	r3, [r3, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10c      	bne.n	800b2e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d108      	bne.n	800b2e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	695b      	ldr	r3, [r3, #20]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d104      	bne.n	800b2e4 <osMessageQueueNew+0x8c>
          mem = 0;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	61bb      	str	r3, [r7, #24]
 800b2de:	e001      	b.n	800b2e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d10b      	bne.n	800b302 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	691a      	ldr	r2, [r3, #16]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	2100      	movs	r1, #0
 800b2f4:	9100      	str	r1, [sp, #0]
 800b2f6:	68b9      	ldr	r1, [r7, #8]
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f000 fa2f 	bl	800b75c <xQueueGenericCreateStatic>
 800b2fe:	61f8      	str	r0, [r7, #28]
 800b300:	e008      	b.n	800b314 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d105      	bne.n	800b314 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b308:	2200      	movs	r2, #0
 800b30a:	68b9      	ldr	r1, [r7, #8]
 800b30c:	68f8      	ldr	r0, [r7, #12]
 800b30e:	f000 fa9d 	bl	800b84c <xQueueGenericCreate>
 800b312:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00c      	beq.n	800b334 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	617b      	str	r3, [r7, #20]
 800b326:	e001      	b.n	800b32c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b328:	2300      	movs	r3, #0
 800b32a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b32c:	6979      	ldr	r1, [r7, #20]
 800b32e:	69f8      	ldr	r0, [r7, #28]
 800b330:	f001 f9e8 	bl	800c704 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b334:	69fb      	ldr	r3, [r7, #28]
}
 800b336:	4618      	mov	r0, r3
 800b338:	3720      	adds	r7, #32
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b340:	b580      	push	{r7, lr}
 800b342:	b088      	sub	sp, #32
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	603b      	str	r3, [r7, #0]
 800b34c:	4613      	mov	r3, r2
 800b34e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b354:	2300      	movs	r3, #0
 800b356:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b358:	f3ef 8305 	mrs	r3, IPSR
 800b35c:	617b      	str	r3, [r7, #20]
  return(result);
 800b35e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b360:	2b00      	cmp	r3, #0
 800b362:	d028      	beq.n	800b3b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d005      	beq.n	800b376 <osMessageQueuePut+0x36>
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <osMessageQueuePut+0x36>
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b376:	f06f 0303 	mvn.w	r3, #3
 800b37a:	61fb      	str	r3, [r7, #28]
 800b37c:	e038      	b.n	800b3f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b37e:	2300      	movs	r3, #0
 800b380:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b382:	f107 0210 	add.w	r2, r7, #16
 800b386:	2300      	movs	r3, #0
 800b388:	68b9      	ldr	r1, [r7, #8]
 800b38a:	69b8      	ldr	r0, [r7, #24]
 800b38c:	f000 fcda 	bl	800bd44 <xQueueGenericSendFromISR>
 800b390:	4603      	mov	r3, r0
 800b392:	2b01      	cmp	r3, #1
 800b394:	d003      	beq.n	800b39e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b396:	f06f 0302 	mvn.w	r3, #2
 800b39a:	61fb      	str	r3, [r7, #28]
 800b39c:	e028      	b.n	800b3f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d025      	beq.n	800b3f0 <osMessageQueuePut+0xb0>
 800b3a4:	4b15      	ldr	r3, [pc, #84]	; (800b3fc <osMessageQueuePut+0xbc>)
 800b3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3aa:	601a      	str	r2, [r3, #0]
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	f3bf 8f6f 	isb	sy
 800b3b4:	e01c      	b.n	800b3f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b3b6:	69bb      	ldr	r3, [r7, #24]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d002      	beq.n	800b3c2 <osMessageQueuePut+0x82>
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d103      	bne.n	800b3ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b3c2:	f06f 0303 	mvn.w	r3, #3
 800b3c6:	61fb      	str	r3, [r7, #28]
 800b3c8:	e012      	b.n	800b3f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	683a      	ldr	r2, [r7, #0]
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	69b8      	ldr	r0, [r7, #24]
 800b3d2:	f000 fbb9 	bl	800bb48 <xQueueGenericSend>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d009      	beq.n	800b3f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d003      	beq.n	800b3ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b3e2:	f06f 0301 	mvn.w	r3, #1
 800b3e6:	61fb      	str	r3, [r7, #28]
 800b3e8:	e002      	b.n	800b3f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b3ea:	f06f 0302 	mvn.w	r3, #2
 800b3ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b3f0:	69fb      	ldr	r3, [r7, #28]
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3720      	adds	r7, #32
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}
 800b3fa:	bf00      	nop
 800b3fc:	e000ed04 	.word	0xe000ed04

0800b400 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b400:	b580      	push	{r7, lr}
 800b402:	b088      	sub	sp, #32
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	607a      	str	r2, [r7, #4]
 800b40c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b412:	2300      	movs	r3, #0
 800b414:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b416:	f3ef 8305 	mrs	r3, IPSR
 800b41a:	617b      	str	r3, [r7, #20]
  return(result);
 800b41c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d028      	beq.n	800b474 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d005      	beq.n	800b434 <osMessageQueueGet+0x34>
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <osMessageQueueGet+0x34>
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d003      	beq.n	800b43c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b434:	f06f 0303 	mvn.w	r3, #3
 800b438:	61fb      	str	r3, [r7, #28]
 800b43a:	e037      	b.n	800b4ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b43c:	2300      	movs	r3, #0
 800b43e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b440:	f107 0310 	add.w	r3, r7, #16
 800b444:	461a      	mov	r2, r3
 800b446:	68b9      	ldr	r1, [r7, #8]
 800b448:	69b8      	ldr	r0, [r7, #24]
 800b44a:	f000 ff8f 	bl	800c36c <xQueueReceiveFromISR>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b01      	cmp	r3, #1
 800b452:	d003      	beq.n	800b45c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b454:	f06f 0302 	mvn.w	r3, #2
 800b458:	61fb      	str	r3, [r7, #28]
 800b45a:	e027      	b.n	800b4ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d024      	beq.n	800b4ac <osMessageQueueGet+0xac>
 800b462:	4b15      	ldr	r3, [pc, #84]	; (800b4b8 <osMessageQueueGet+0xb8>)
 800b464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	f3bf 8f6f 	isb	sy
 800b472:	e01b      	b.n	800b4ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b474:	69bb      	ldr	r3, [r7, #24]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d002      	beq.n	800b480 <osMessageQueueGet+0x80>
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d103      	bne.n	800b488 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b480:	f06f 0303 	mvn.w	r3, #3
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	e011      	b.n	800b4ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	68b9      	ldr	r1, [r7, #8]
 800b48c:	69b8      	ldr	r0, [r7, #24]
 800b48e:	f000 fd81 	bl	800bf94 <xQueueReceive>
 800b492:	4603      	mov	r3, r0
 800b494:	2b01      	cmp	r3, #1
 800b496:	d009      	beq.n	800b4ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d003      	beq.n	800b4a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b49e:	f06f 0301 	mvn.w	r3, #1
 800b4a2:	61fb      	str	r3, [r7, #28]
 800b4a4:	e002      	b.n	800b4ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b4a6:	f06f 0302 	mvn.w	r3, #2
 800b4aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b4ac:	69fb      	ldr	r3, [r7, #28]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3720      	adds	r7, #32
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	e000ed04 	.word	0xe000ed04

0800b4bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	60b9      	str	r1, [r7, #8]
 800b4c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	4a07      	ldr	r2, [pc, #28]	; (800b4e8 <vApplicationGetIdleTaskMemory+0x2c>)
 800b4cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	4a06      	ldr	r2, [pc, #24]	; (800b4ec <vApplicationGetIdleTaskMemory+0x30>)
 800b4d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2280      	movs	r2, #128	; 0x80
 800b4d8:	601a      	str	r2, [r3, #0]
}
 800b4da:	bf00      	nop
 800b4dc:	3714      	adds	r7, #20
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	2000085c 	.word	0x2000085c
 800b4ec:	20000904 	.word	0x20000904

0800b4f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4a07      	ldr	r2, [pc, #28]	; (800b51c <vApplicationGetTimerTaskMemory+0x2c>)
 800b500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	4a06      	ldr	r2, [pc, #24]	; (800b520 <vApplicationGetTimerTaskMemory+0x30>)
 800b506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b50e:	601a      	str	r2, [r3, #0]
}
 800b510:	bf00      	nop
 800b512:	3714      	adds	r7, #20
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr
 800b51c:	20000b04 	.word	0x20000b04
 800b520:	20000bac 	.word	0x20000bac

0800b524 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f103 0208 	add.w	r2, r3, #8
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f04f 32ff 	mov.w	r2, #4294967295
 800b53c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f103 0208 	add.w	r2, r3, #8
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f103 0208 	add.w	r2, r3, #8
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2200      	movs	r2, #0
 800b556:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b558:	bf00      	nop
 800b55a:	370c      	adds	r7, #12
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b572:	bf00      	nop
 800b574:	370c      	adds	r7, #12
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b57e:	b480      	push	{r7}
 800b580:	b085      	sub	sp, #20
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	689a      	ldr	r2, [r3, #8]
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	683a      	ldr	r2, [r7, #0]
 800b5a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	683a      	ldr	r2, [r7, #0]
 800b5a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	601a      	str	r2, [r3, #0]
}
 800b5ba:	bf00      	nop
 800b5bc:	3714      	adds	r7, #20
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c4:	4770      	bx	lr

0800b5c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
 800b5ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5dc:	d103      	bne.n	800b5e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	60fb      	str	r3, [r7, #12]
 800b5e4:	e00c      	b.n	800b600 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3308      	adds	r3, #8
 800b5ea:	60fb      	str	r3, [r7, #12]
 800b5ec:	e002      	b.n	800b5f4 <vListInsert+0x2e>
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	68ba      	ldr	r2, [r7, #8]
 800b5fc:	429a      	cmp	r2, r3
 800b5fe:	d2f6      	bcs.n	800b5ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	685a      	ldr	r2, [r3, #4]
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	68fa      	ldr	r2, [r7, #12]
 800b614:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	683a      	ldr	r2, [r7, #0]
 800b61a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	1c5a      	adds	r2, r3, #1
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	601a      	str	r2, [r3, #0]
}
 800b62c:	bf00      	nop
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr

0800b638 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	6892      	ldr	r2, [r2, #8]
 800b64e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	687a      	ldr	r2, [r7, #4]
 800b656:	6852      	ldr	r2, [r2, #4]
 800b658:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	687a      	ldr	r2, [r7, #4]
 800b660:	429a      	cmp	r2, r3
 800b662:	d103      	bne.n	800b66c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	689a      	ldr	r2, [r3, #8]
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	1e5a      	subs	r2, r3, #1
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
}
 800b680:	4618      	mov	r0, r3
 800b682:	3714      	adds	r7, #20
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr

0800b68c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d10a      	bne.n	800b6b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a4:	f383 8811 	msr	BASEPRI, r3
 800b6a8:	f3bf 8f6f 	isb	sy
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b6b2:	bf00      	nop
 800b6b4:	e7fe      	b.n	800b6b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b6b6:	f003 f875 	bl	800e7a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c2:	68f9      	ldr	r1, [r7, #12]
 800b6c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6c6:	fb01 f303 	mul.w	r3, r1, r3
 800b6ca:	441a      	add	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	68f9      	ldr	r1, [r7, #12]
 800b6ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b6ec:	fb01 f303 	mul.w	r3, r1, r3
 800b6f0:	441a      	add	r2, r3
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	22ff      	movs	r2, #255	; 0xff
 800b6fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	22ff      	movs	r2, #255	; 0xff
 800b702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d114      	bne.n	800b736 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d01a      	beq.n	800b74a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3310      	adds	r3, #16
 800b718:	4618      	mov	r0, r3
 800b71a:	f001 fd5d 	bl	800d1d8 <xTaskRemoveFromEventList>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d012      	beq.n	800b74a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b724:	4b0c      	ldr	r3, [pc, #48]	; (800b758 <xQueueGenericReset+0xcc>)
 800b726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b72a:	601a      	str	r2, [r3, #0]
 800b72c:	f3bf 8f4f 	dsb	sy
 800b730:	f3bf 8f6f 	isb	sy
 800b734:	e009      	b.n	800b74a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	3310      	adds	r3, #16
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7ff fef2 	bl	800b524 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	3324      	adds	r3, #36	; 0x24
 800b744:	4618      	mov	r0, r3
 800b746:	f7ff feed 	bl	800b524 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b74a:	f003 f85b 	bl	800e804 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b74e:	2301      	movs	r3, #1
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}
 800b758:	e000ed04 	.word	0xe000ed04

0800b75c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b08e      	sub	sp, #56	; 0x38
 800b760:	af02      	add	r7, sp, #8
 800b762:	60f8      	str	r0, [r7, #12]
 800b764:	60b9      	str	r1, [r7, #8]
 800b766:	607a      	str	r2, [r7, #4]
 800b768:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10a      	bne.n	800b786 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b774:	f383 8811 	msr	BASEPRI, r3
 800b778:	f3bf 8f6f 	isb	sy
 800b77c:	f3bf 8f4f 	dsb	sy
 800b780:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b782:	bf00      	nop
 800b784:	e7fe      	b.n	800b784 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d10a      	bne.n	800b7a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b790:	f383 8811 	msr	BASEPRI, r3
 800b794:	f3bf 8f6f 	isb	sy
 800b798:	f3bf 8f4f 	dsb	sy
 800b79c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b79e:	bf00      	nop
 800b7a0:	e7fe      	b.n	800b7a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d002      	beq.n	800b7ae <xQueueGenericCreateStatic+0x52>
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d001      	beq.n	800b7b2 <xQueueGenericCreateStatic+0x56>
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	e000      	b.n	800b7b4 <xQueueGenericCreateStatic+0x58>
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d10a      	bne.n	800b7ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	623b      	str	r3, [r7, #32]
}
 800b7ca:	bf00      	nop
 800b7cc:	e7fe      	b.n	800b7cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <xQueueGenericCreateStatic+0x7e>
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d101      	bne.n	800b7de <xQueueGenericCreateStatic+0x82>
 800b7da:	2301      	movs	r3, #1
 800b7dc:	e000      	b.n	800b7e0 <xQueueGenericCreateStatic+0x84>
 800b7de:	2300      	movs	r3, #0
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d10a      	bne.n	800b7fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e8:	f383 8811 	msr	BASEPRI, r3
 800b7ec:	f3bf 8f6f 	isb	sy
 800b7f0:	f3bf 8f4f 	dsb	sy
 800b7f4:	61fb      	str	r3, [r7, #28]
}
 800b7f6:	bf00      	nop
 800b7f8:	e7fe      	b.n	800b7f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b7fa:	2350      	movs	r3, #80	; 0x50
 800b7fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2b50      	cmp	r3, #80	; 0x50
 800b802:	d00a      	beq.n	800b81a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b808:	f383 8811 	msr	BASEPRI, r3
 800b80c:	f3bf 8f6f 	isb	sy
 800b810:	f3bf 8f4f 	dsb	sy
 800b814:	61bb      	str	r3, [r7, #24]
}
 800b816:	bf00      	nop
 800b818:	e7fe      	b.n	800b818 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b81a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00d      	beq.n	800b842 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	2201      	movs	r2, #1
 800b82a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b82e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b834:	9300      	str	r3, [sp, #0]
 800b836:	4613      	mov	r3, r2
 800b838:	687a      	ldr	r2, [r7, #4]
 800b83a:	68b9      	ldr	r1, [r7, #8]
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 f83f 	bl	800b8c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b844:	4618      	mov	r0, r3
 800b846:	3730      	adds	r7, #48	; 0x30
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}

0800b84c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b08a      	sub	sp, #40	; 0x28
 800b850:	af02      	add	r7, sp, #8
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4613      	mov	r3, r2
 800b858:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d10a      	bne.n	800b876 <xQueueGenericCreate+0x2a>
	__asm volatile
 800b860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b864:	f383 8811 	msr	BASEPRI, r3
 800b868:	f3bf 8f6f 	isb	sy
 800b86c:	f3bf 8f4f 	dsb	sy
 800b870:	613b      	str	r3, [r7, #16]
}
 800b872:	bf00      	nop
 800b874:	e7fe      	b.n	800b874 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	fb02 f303 	mul.w	r3, r2, r3
 800b87e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	3350      	adds	r3, #80	; 0x50
 800b884:	4618      	mov	r0, r3
 800b886:	f003 f8af 	bl	800e9e8 <pvPortMalloc>
 800b88a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d011      	beq.n	800b8b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	3350      	adds	r3, #80	; 0x50
 800b89a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b89c:	69bb      	ldr	r3, [r7, #24]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b8a4:	79fa      	ldrb	r2, [r7, #7]
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	9300      	str	r3, [sp, #0]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	697a      	ldr	r2, [r7, #20]
 800b8ae:	68b9      	ldr	r1, [r7, #8]
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f000 f805 	bl	800b8c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b8b6:	69bb      	ldr	r3, [r7, #24]
	}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3720      	adds	r7, #32
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}

0800b8c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	60f8      	str	r0, [r7, #12]
 800b8c8:	60b9      	str	r1, [r7, #8]
 800b8ca:	607a      	str	r2, [r7, #4]
 800b8cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d103      	bne.n	800b8dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	e002      	b.n	800b8e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b8ee:	2101      	movs	r1, #1
 800b8f0:	69b8      	ldr	r0, [r7, #24]
 800b8f2:	f7ff fecb 	bl	800b68c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	78fa      	ldrb	r2, [r7, #3]
 800b8fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b8fe:	bf00      	nop
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}

0800b906 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b906:	b580      	push	{r7, lr}
 800b908:	b082      	sub	sp, #8
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00e      	beq.n	800b932 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b926:	2300      	movs	r3, #0
 800b928:	2200      	movs	r2, #0
 800b92a:	2100      	movs	r1, #0
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 f90b 	bl	800bb48 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b932:	bf00      	nop
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b086      	sub	sp, #24
 800b93e:	af00      	add	r7, sp, #0
 800b940:	4603      	mov	r3, r0
 800b942:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b944:	2301      	movs	r3, #1
 800b946:	617b      	str	r3, [r7, #20]
 800b948:	2300      	movs	r3, #0
 800b94a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b94c:	79fb      	ldrb	r3, [r7, #7]
 800b94e:	461a      	mov	r2, r3
 800b950:	6939      	ldr	r1, [r7, #16]
 800b952:	6978      	ldr	r0, [r7, #20]
 800b954:	f7ff ff7a 	bl	800b84c <xQueueGenericCreate>
 800b958:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b95a:	68f8      	ldr	r0, [r7, #12]
 800b95c:	f7ff ffd3 	bl	800b906 <prvInitialiseMutex>

		return xNewQueue;
 800b960:	68fb      	ldr	r3, [r7, #12]
	}
 800b962:	4618      	mov	r0, r3
 800b964:	3718      	adds	r7, #24
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b96a:	b580      	push	{r7, lr}
 800b96c:	b088      	sub	sp, #32
 800b96e:	af02      	add	r7, sp, #8
 800b970:	4603      	mov	r3, r0
 800b972:	6039      	str	r1, [r7, #0]
 800b974:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b976:	2301      	movs	r3, #1
 800b978:	617b      	str	r3, [r7, #20]
 800b97a:	2300      	movs	r3, #0
 800b97c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2200      	movs	r2, #0
 800b986:	6939      	ldr	r1, [r7, #16]
 800b988:	6978      	ldr	r0, [r7, #20]
 800b98a:	f7ff fee7 	bl	800b75c <xQueueGenericCreateStatic>
 800b98e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7ff ffb8 	bl	800b906 <prvInitialiseMutex>

		return xNewQueue;
 800b996:	68fb      	ldr	r3, [r7, #12]
	}
 800b998:	4618      	mov	r0, r3
 800b99a:	3718      	adds	r7, #24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b9a0:	b590      	push	{r4, r7, lr}
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d10a      	bne.n	800b9c8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b6:	f383 8811 	msr	BASEPRI, r3
 800b9ba:	f3bf 8f6f 	isb	sy
 800b9be:	f3bf 8f4f 	dsb	sy
 800b9c2:	60fb      	str	r3, [r7, #12]
}
 800b9c4:	bf00      	nop
 800b9c6:	e7fe      	b.n	800b9c6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	689c      	ldr	r4, [r3, #8]
 800b9cc:	f001 fdc6 	bl	800d55c <xTaskGetCurrentTaskHandle>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	429c      	cmp	r4, r3
 800b9d4:	d111      	bne.n	800b9fa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	68db      	ldr	r3, [r3, #12]
 800b9da:	1e5a      	subs	r2, r3, #1
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d105      	bne.n	800b9f4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	2100      	movs	r1, #0
 800b9ee:	6938      	ldr	r0, [r7, #16]
 800b9f0:	f000 f8aa 	bl	800bb48 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e001      	b.n	800b9fe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b9fe:	697b      	ldr	r3, [r7, #20]
	}
 800ba00:	4618      	mov	r0, r3
 800ba02:	371c      	adds	r7, #28
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd90      	pop	{r4, r7, pc}

0800ba08 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800ba08:	b590      	push	{r4, r7, lr}
 800ba0a:	b087      	sub	sp, #28
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d10a      	bne.n	800ba32 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	60fb      	str	r3, [r7, #12]
}
 800ba2e:	bf00      	nop
 800ba30:	e7fe      	b.n	800ba30 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	689c      	ldr	r4, [r3, #8]
 800ba36:	f001 fd91 	bl	800d55c <xTaskGetCurrentTaskHandle>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	429c      	cmp	r4, r3
 800ba3e:	d107      	bne.n	800ba50 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	617b      	str	r3, [r7, #20]
 800ba4e:	e00c      	b.n	800ba6a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800ba50:	6839      	ldr	r1, [r7, #0]
 800ba52:	6938      	ldr	r0, [r7, #16]
 800ba54:	f000 fb7e 	bl	800c154 <xQueueSemaphoreTake>
 800ba58:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d004      	beq.n	800ba6a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800ba6a:	697b      	ldr	r3, [r7, #20]
	}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	371c      	adds	r7, #28
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd90      	pop	{r4, r7, pc}

0800ba74 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b08a      	sub	sp, #40	; 0x28
 800ba78:	af02      	add	r7, sp, #8
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d10a      	bne.n	800ba9c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	61bb      	str	r3, [r7, #24]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d90a      	bls.n	800baba <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	617b      	str	r3, [r7, #20]
}
 800bab6:	bf00      	nop
 800bab8:	e7fe      	b.n	800bab8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800baba:	2302      	movs	r3, #2
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	2100      	movs	r1, #0
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f7ff fe49 	bl	800b75c <xQueueGenericCreateStatic>
 800baca:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d002      	beq.n	800bad8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bad8:	69fb      	ldr	r3, [r7, #28]
	}
 800bada:	4618      	mov	r0, r3
 800badc:	3720      	adds	r7, #32
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}

0800bae2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bae2:	b580      	push	{r7, lr}
 800bae4:	b086      	sub	sp, #24
 800bae6:	af00      	add	r7, sp, #0
 800bae8:	6078      	str	r0, [r7, #4]
 800baea:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10a      	bne.n	800bb08 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800baf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	613b      	str	r3, [r7, #16]
}
 800bb04:	bf00      	nop
 800bb06:	e7fe      	b.n	800bb06 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d90a      	bls.n	800bb26 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	60fb      	str	r3, [r7, #12]
}
 800bb22:	bf00      	nop
 800bb24:	e7fe      	b.n	800bb24 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb26:	2202      	movs	r2, #2
 800bb28:	2100      	movs	r1, #0
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff fe8e 	bl	800b84c <xQueueGenericCreate>
 800bb30:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bb3e:	697b      	ldr	r3, [r7, #20]
	}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3718      	adds	r7, #24
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b08e      	sub	sp, #56	; 0x38
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	60f8      	str	r0, [r7, #12]
 800bb50:	60b9      	str	r1, [r7, #8]
 800bb52:	607a      	str	r2, [r7, #4]
 800bb54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb56:	2300      	movs	r3, #0
 800bb58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d10a      	bne.n	800bb7a <xQueueGenericSend+0x32>
	__asm volatile
 800bb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb68:	f383 8811 	msr	BASEPRI, r3
 800bb6c:	f3bf 8f6f 	isb	sy
 800bb70:	f3bf 8f4f 	dsb	sy
 800bb74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb76:	bf00      	nop
 800bb78:	e7fe      	b.n	800bb78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d103      	bne.n	800bb88 <xQueueGenericSend+0x40>
 800bb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d101      	bne.n	800bb8c <xQueueGenericSend+0x44>
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e000      	b.n	800bb8e <xQueueGenericSend+0x46>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d10a      	bne.n	800bba8 <xQueueGenericSend+0x60>
	__asm volatile
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bba4:	bf00      	nop
 800bba6:	e7fe      	b.n	800bba6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d103      	bne.n	800bbb6 <xQueueGenericSend+0x6e>
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d101      	bne.n	800bbba <xQueueGenericSend+0x72>
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	e000      	b.n	800bbbc <xQueueGenericSend+0x74>
 800bbba:	2300      	movs	r3, #0
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10a      	bne.n	800bbd6 <xQueueGenericSend+0x8e>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	623b      	str	r3, [r7, #32]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbd6:	f001 fcd1 	bl	800d57c <xTaskGetSchedulerState>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <xQueueGenericSend+0x9e>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <xQueueGenericSend+0xa2>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <xQueueGenericSend+0xa4>
 800bbea:	2300      	movs	r3, #0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <xQueueGenericSend+0xbe>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	61fb      	str	r3, [r7, #28]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc06:	f002 fdcd 	bl	800e7a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d302      	bcc.n	800bc1c <xQueueGenericSend+0xd4>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d129      	bne.n	800bc70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc1c:	683a      	ldr	r2, [r7, #0]
 800bc1e:	68b9      	ldr	r1, [r7, #8]
 800bc20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc22:	f000 fc5e 	bl	800c4e2 <prvCopyDataToQueue>
 800bc26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d010      	beq.n	800bc52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	3324      	adds	r3, #36	; 0x24
 800bc34:	4618      	mov	r0, r3
 800bc36:	f001 facf 	bl	800d1d8 <xTaskRemoveFromEventList>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d013      	beq.n	800bc68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc40:	4b3f      	ldr	r3, [pc, #252]	; (800bd40 <xQueueGenericSend+0x1f8>)
 800bc42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc46:	601a      	str	r2, [r3, #0]
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	e00a      	b.n	800bc68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d007      	beq.n	800bc68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc58:	4b39      	ldr	r3, [pc, #228]	; (800bd40 <xQueueGenericSend+0x1f8>)
 800bc5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc5e:	601a      	str	r2, [r3, #0]
 800bc60:	f3bf 8f4f 	dsb	sy
 800bc64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc68:	f002 fdcc 	bl	800e804 <vPortExitCritical>
				return pdPASS;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e063      	b.n	800bd38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d103      	bne.n	800bc7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc76:	f002 fdc5 	bl	800e804 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	e05c      	b.n	800bd38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d106      	bne.n	800bc92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc84:	f107 0314 	add.w	r3, r7, #20
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f001 fb09 	bl	800d2a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc8e:	2301      	movs	r3, #1
 800bc90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc92:	f002 fdb7 	bl	800e804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc96:	f001 f863 	bl	800cd60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc9a:	f002 fd83 	bl	800e7a4 <vPortEnterCritical>
 800bc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bca4:	b25b      	sxtb	r3, r3
 800bca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcaa:	d103      	bne.n	800bcb4 <xQueueGenericSend+0x16c>
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcba:	b25b      	sxtb	r3, r3
 800bcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc0:	d103      	bne.n	800bcca <xQueueGenericSend+0x182>
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcca:	f002 fd9b 	bl	800e804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcce:	1d3a      	adds	r2, r7, #4
 800bcd0:	f107 0314 	add.w	r3, r7, #20
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f001 faf8 	bl	800d2cc <xTaskCheckForTimeOut>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d124      	bne.n	800bd2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bce4:	f000 fcf5 	bl	800c6d2 <prvIsQueueFull>
 800bce8:	4603      	mov	r3, r0
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d018      	beq.n	800bd20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf0:	3310      	adds	r3, #16
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	4611      	mov	r1, r2
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f001 fa1e 	bl	800d138 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bcfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcfe:	f000 fc80 	bl	800c602 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bd02:	f001 f83b 	bl	800cd7c <xTaskResumeAll>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f47f af7c 	bne.w	800bc06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bd0e:	4b0c      	ldr	r3, [pc, #48]	; (800bd40 <xQueueGenericSend+0x1f8>)
 800bd10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	e772      	b.n	800bc06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd22:	f000 fc6e 	bl	800c602 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd26:	f001 f829 	bl	800cd7c <xTaskResumeAll>
 800bd2a:	e76c      	b.n	800bc06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd2e:	f000 fc68 	bl	800c602 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd32:	f001 f823 	bl	800cd7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3738      	adds	r7, #56	; 0x38
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	e000ed04 	.word	0xe000ed04

0800bd44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b090      	sub	sp, #64	; 0x40
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
 800bd50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d10a      	bne.n	800bd72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd60:	f383 8811 	msr	BASEPRI, r3
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	f3bf 8f4f 	dsb	sy
 800bd6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd6e:	bf00      	nop
 800bd70:	e7fe      	b.n	800bd70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d103      	bne.n	800bd80 <xQueueGenericSendFromISR+0x3c>
 800bd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d101      	bne.n	800bd84 <xQueueGenericSendFromISR+0x40>
 800bd80:	2301      	movs	r3, #1
 800bd82:	e000      	b.n	800bd86 <xQueueGenericSendFromISR+0x42>
 800bd84:	2300      	movs	r3, #0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d10a      	bne.n	800bda0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd9c:	bf00      	nop
 800bd9e:	e7fe      	b.n	800bd9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d103      	bne.n	800bdae <xQueueGenericSendFromISR+0x6a>
 800bda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bda8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d101      	bne.n	800bdb2 <xQueueGenericSendFromISR+0x6e>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e000      	b.n	800bdb4 <xQueueGenericSendFromISR+0x70>
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d10a      	bne.n	800bdce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbc:	f383 8811 	msr	BASEPRI, r3
 800bdc0:	f3bf 8f6f 	isb	sy
 800bdc4:	f3bf 8f4f 	dsb	sy
 800bdc8:	623b      	str	r3, [r7, #32]
}
 800bdca:	bf00      	nop
 800bdcc:	e7fe      	b.n	800bdcc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdce:	f002 fdcb 	bl	800e968 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bdd2:	f3ef 8211 	mrs	r2, BASEPRI
 800bdd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdda:	f383 8811 	msr	BASEPRI, r3
 800bdde:	f3bf 8f6f 	isb	sy
 800bde2:	f3bf 8f4f 	dsb	sy
 800bde6:	61fa      	str	r2, [r7, #28]
 800bde8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bdea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d302      	bcc.n	800be00 <xQueueGenericSendFromISR+0xbc>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d12f      	bne.n	800be60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800be00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be10:	683a      	ldr	r2, [r7, #0]
 800be12:	68b9      	ldr	r1, [r7, #8]
 800be14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be16:	f000 fb64 	bl	800c4e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800be1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800be1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be22:	d112      	bne.n	800be4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d016      	beq.n	800be5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	3324      	adds	r3, #36	; 0x24
 800be30:	4618      	mov	r0, r3
 800be32:	f001 f9d1 	bl	800d1d8 <xTaskRemoveFromEventList>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00e      	beq.n	800be5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d00b      	beq.n	800be5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2201      	movs	r2, #1
 800be46:	601a      	str	r2, [r3, #0]
 800be48:	e007      	b.n	800be5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800be4e:	3301      	adds	r3, #1
 800be50:	b2db      	uxtb	r3, r3
 800be52:	b25a      	sxtb	r2, r3
 800be54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800be5a:	2301      	movs	r3, #1
 800be5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800be5e:	e001      	b.n	800be64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800be60:	2300      	movs	r3, #0
 800be62:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800be6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800be72:	4618      	mov	r0, r3
 800be74:	3740      	adds	r7, #64	; 0x40
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b08e      	sub	sp, #56	; 0x38
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10a      	bne.n	800bea4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800be8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be92:	f383 8811 	msr	BASEPRI, r3
 800be96:	f3bf 8f6f 	isb	sy
 800be9a:	f3bf 8f4f 	dsb	sy
 800be9e:	623b      	str	r3, [r7, #32]
}
 800bea0:	bf00      	nop
 800bea2:	e7fe      	b.n	800bea2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00a      	beq.n	800bec2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800beac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb0:	f383 8811 	msr	BASEPRI, r3
 800beb4:	f3bf 8f6f 	isb	sy
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	61fb      	str	r3, [r7, #28]
}
 800bebe:	bf00      	nop
 800bec0:	e7fe      	b.n	800bec0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d103      	bne.n	800bed2 <xQueueGiveFromISR+0x58>
 800beca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <xQueueGiveFromISR+0x5c>
 800bed2:	2301      	movs	r3, #1
 800bed4:	e000      	b.n	800bed8 <xQueueGiveFromISR+0x5e>
 800bed6:	2300      	movs	r3, #0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d10a      	bne.n	800bef2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	61bb      	str	r3, [r7, #24]
}
 800beee:	bf00      	nop
 800bef0:	e7fe      	b.n	800bef0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bef2:	f002 fd39 	bl	800e968 <vPortValidateInterruptPriority>
	__asm volatile
 800bef6:	f3ef 8211 	mrs	r2, BASEPRI
 800befa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befe:	f383 8811 	msr	BASEPRI, r3
 800bf02:	f3bf 8f6f 	isb	sy
 800bf06:	f3bf 8f4f 	dsb	sy
 800bf0a:	617a      	str	r2, [r7, #20]
 800bf0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bf0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bf10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	d22b      	bcs.n	800bf7a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf2e:	1c5a      	adds	r2, r3, #1
 800bf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3c:	d112      	bne.n	800bf64 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d016      	beq.n	800bf74 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf48:	3324      	adds	r3, #36	; 0x24
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f001 f944 	bl	800d1d8 <xTaskRemoveFromEventList>
 800bf50:	4603      	mov	r3, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00e      	beq.n	800bf74 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00b      	beq.n	800bf74 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	601a      	str	r2, [r3, #0]
 800bf62:	e007      	b.n	800bf74 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf68:	3301      	adds	r3, #1
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	b25a      	sxtb	r2, r3
 800bf6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf74:	2301      	movs	r3, #1
 800bf76:	637b      	str	r3, [r7, #52]	; 0x34
 800bf78:	e001      	b.n	800bf7e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f383 8811 	msr	BASEPRI, r3
}
 800bf88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3738      	adds	r7, #56	; 0x38
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b08c      	sub	sp, #48	; 0x30
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d10a      	bne.n	800bfc4 <xQueueReceive+0x30>
	__asm volatile
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	623b      	str	r3, [r7, #32]
}
 800bfc0:	bf00      	nop
 800bfc2:	e7fe      	b.n	800bfc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d103      	bne.n	800bfd2 <xQueueReceive+0x3e>
 800bfca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d101      	bne.n	800bfd6 <xQueueReceive+0x42>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e000      	b.n	800bfd8 <xQueueReceive+0x44>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10a      	bne.n	800bff2 <xQueueReceive+0x5e>
	__asm volatile
 800bfdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe0:	f383 8811 	msr	BASEPRI, r3
 800bfe4:	f3bf 8f6f 	isb	sy
 800bfe8:	f3bf 8f4f 	dsb	sy
 800bfec:	61fb      	str	r3, [r7, #28]
}
 800bfee:	bf00      	nop
 800bff0:	e7fe      	b.n	800bff0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bff2:	f001 fac3 	bl	800d57c <xTaskGetSchedulerState>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d102      	bne.n	800c002 <xQueueReceive+0x6e>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <xQueueReceive+0x72>
 800c002:	2301      	movs	r3, #1
 800c004:	e000      	b.n	800c008 <xQueueReceive+0x74>
 800c006:	2300      	movs	r3, #0
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10a      	bne.n	800c022 <xQueueReceive+0x8e>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	61bb      	str	r3, [r7, #24]
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c022:	f002 fbbf 	bl	800e7a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d01f      	beq.n	800c072 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c036:	f000 fabe 	bl	800c5b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03c:	1e5a      	subs	r2, r3, #1
 800c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c040:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	691b      	ldr	r3, [r3, #16]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d00f      	beq.n	800c06a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04c:	3310      	adds	r3, #16
 800c04e:	4618      	mov	r0, r3
 800c050:	f001 f8c2 	bl	800d1d8 <xTaskRemoveFromEventList>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d007      	beq.n	800c06a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c05a:	4b3d      	ldr	r3, [pc, #244]	; (800c150 <xQueueReceive+0x1bc>)
 800c05c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c060:	601a      	str	r2, [r3, #0]
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c06a:	f002 fbcb 	bl	800e804 <vPortExitCritical>
				return pdPASS;
 800c06e:	2301      	movs	r3, #1
 800c070:	e069      	b.n	800c146 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d103      	bne.n	800c080 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c078:	f002 fbc4 	bl	800e804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c07c:	2300      	movs	r3, #0
 800c07e:	e062      	b.n	800c146 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c082:	2b00      	cmp	r3, #0
 800c084:	d106      	bne.n	800c094 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c086:	f107 0310 	add.w	r3, r7, #16
 800c08a:	4618      	mov	r0, r3
 800c08c:	f001 f908 	bl	800d2a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c090:	2301      	movs	r3, #1
 800c092:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c094:	f002 fbb6 	bl	800e804 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c098:	f000 fe62 	bl	800cd60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c09c:	f002 fb82 	bl	800e7a4 <vPortEnterCritical>
 800c0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0a6:	b25b      	sxtb	r3, r3
 800c0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ac:	d103      	bne.n	800c0b6 <xQueueReceive+0x122>
 800c0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0bc:	b25b      	sxtb	r3, r3
 800c0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c2:	d103      	bne.n	800c0cc <xQueueReceive+0x138>
 800c0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0cc:	f002 fb9a 	bl	800e804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0d0:	1d3a      	adds	r2, r7, #4
 800c0d2:	f107 0310 	add.w	r3, r7, #16
 800c0d6:	4611      	mov	r1, r2
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f001 f8f7 	bl	800d2cc <xTaskCheckForTimeOut>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d123      	bne.n	800c12c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c0e6:	f000 fade 	bl	800c6a6 <prvIsQueueEmpty>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d017      	beq.n	800c120 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f2:	3324      	adds	r3, #36	; 0x24
 800c0f4:	687a      	ldr	r2, [r7, #4]
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f001 f81d 	bl	800d138 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c100:	f000 fa7f 	bl	800c602 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c104:	f000 fe3a 	bl	800cd7c <xTaskResumeAll>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d189      	bne.n	800c022 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c10e:	4b10      	ldr	r3, [pc, #64]	; (800c150 <xQueueReceive+0x1bc>)
 800c110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c114:	601a      	str	r2, [r3, #0]
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	e780      	b.n	800c022 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c122:	f000 fa6e 	bl	800c602 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c126:	f000 fe29 	bl	800cd7c <xTaskResumeAll>
 800c12a:	e77a      	b.n	800c022 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c12e:	f000 fa68 	bl	800c602 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c132:	f000 fe23 	bl	800cd7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c138:	f000 fab5 	bl	800c6a6 <prvIsQueueEmpty>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f43f af6f 	beq.w	800c022 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c144:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c146:	4618      	mov	r0, r3
 800c148:	3730      	adds	r7, #48	; 0x30
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}
 800c14e:	bf00      	nop
 800c150:	e000ed04 	.word	0xe000ed04

0800c154 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b08e      	sub	sp, #56	; 0x38
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c15e:	2300      	movs	r3, #0
 800c160:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c166:	2300      	movs	r3, #0
 800c168:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d10a      	bne.n	800c186 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c174:	f383 8811 	msr	BASEPRI, r3
 800c178:	f3bf 8f6f 	isb	sy
 800c17c:	f3bf 8f4f 	dsb	sy
 800c180:	623b      	str	r3, [r7, #32]
}
 800c182:	bf00      	nop
 800c184:	e7fe      	b.n	800c184 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d00a      	beq.n	800c1a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c192:	f383 8811 	msr	BASEPRI, r3
 800c196:	f3bf 8f6f 	isb	sy
 800c19a:	f3bf 8f4f 	dsb	sy
 800c19e:	61fb      	str	r3, [r7, #28]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1a4:	f001 f9ea 	bl	800d57c <xTaskGetSchedulerState>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d102      	bne.n	800c1b4 <xQueueSemaphoreTake+0x60>
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <xQueueSemaphoreTake+0x64>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e000      	b.n	800c1ba <xQueueSemaphoreTake+0x66>
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10a      	bne.n	800c1d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c2:	f383 8811 	msr	BASEPRI, r3
 800c1c6:	f3bf 8f6f 	isb	sy
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	61bb      	str	r3, [r7, #24]
}
 800c1d0:	bf00      	nop
 800c1d2:	e7fe      	b.n	800c1d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1d4:	f002 fae6 	bl	800e7a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d024      	beq.n	800c22e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e6:	1e5a      	subs	r2, r3, #1
 800c1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c1ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d104      	bne.n	800c1fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c1f4:	f001 fb38 	bl	800d868 <pvTaskIncrementMutexHeldCount>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	691b      	ldr	r3, [r3, #16]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d00f      	beq.n	800c226 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c208:	3310      	adds	r3, #16
 800c20a:	4618      	mov	r0, r3
 800c20c:	f000 ffe4 	bl	800d1d8 <xTaskRemoveFromEventList>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d007      	beq.n	800c226 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c216:	4b54      	ldr	r3, [pc, #336]	; (800c368 <xQueueSemaphoreTake+0x214>)
 800c218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c226:	f002 faed 	bl	800e804 <vPortExitCritical>
				return pdPASS;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e097      	b.n	800c35e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d111      	bne.n	800c258 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00a      	beq.n	800c250 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23e:	f383 8811 	msr	BASEPRI, r3
 800c242:	f3bf 8f6f 	isb	sy
 800c246:	f3bf 8f4f 	dsb	sy
 800c24a:	617b      	str	r3, [r7, #20]
}
 800c24c:	bf00      	nop
 800c24e:	e7fe      	b.n	800c24e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c250:	f002 fad8 	bl	800e804 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c254:	2300      	movs	r3, #0
 800c256:	e082      	b.n	800c35e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d106      	bne.n	800c26c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c25e:	f107 030c 	add.w	r3, r7, #12
 800c262:	4618      	mov	r0, r3
 800c264:	f001 f81c 	bl	800d2a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c268:	2301      	movs	r3, #1
 800c26a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c26c:	f002 faca 	bl	800e804 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c270:	f000 fd76 	bl	800cd60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c274:	f002 fa96 	bl	800e7a4 <vPortEnterCritical>
 800c278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c27e:	b25b      	sxtb	r3, r3
 800c280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c284:	d103      	bne.n	800c28e <xQueueSemaphoreTake+0x13a>
 800c286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c288:	2200      	movs	r2, #0
 800c28a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c294:	b25b      	sxtb	r3, r3
 800c296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29a:	d103      	bne.n	800c2a4 <xQueueSemaphoreTake+0x150>
 800c29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2a4:	f002 faae 	bl	800e804 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2a8:	463a      	mov	r2, r7
 800c2aa:	f107 030c 	add.w	r3, r7, #12
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f001 f80b 	bl	800d2cc <xTaskCheckForTimeOut>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d132      	bne.n	800c322 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2be:	f000 f9f2 	bl	800c6a6 <prvIsQueueEmpty>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d026      	beq.n	800c316 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d109      	bne.n	800c2e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c2d0:	f002 fa68 	bl	800e7a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d6:	689b      	ldr	r3, [r3, #8]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f001 f96d 	bl	800d5b8 <xTaskPriorityInherit>
 800c2de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c2e0:	f002 fa90 	bl	800e804 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e6:	3324      	adds	r3, #36	; 0x24
 800c2e8:	683a      	ldr	r2, [r7, #0]
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 ff23 	bl	800d138 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2f4:	f000 f985 	bl	800c602 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2f8:	f000 fd40 	bl	800cd7c <xTaskResumeAll>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	f47f af68 	bne.w	800c1d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c304:	4b18      	ldr	r3, [pc, #96]	; (800c368 <xQueueSemaphoreTake+0x214>)
 800c306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	f3bf 8f6f 	isb	sy
 800c314:	e75e      	b.n	800c1d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c316:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c318:	f000 f973 	bl	800c602 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c31c:	f000 fd2e 	bl	800cd7c <xTaskResumeAll>
 800c320:	e758      	b.n	800c1d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c324:	f000 f96d 	bl	800c602 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c328:	f000 fd28 	bl	800cd7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c32c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c32e:	f000 f9ba 	bl	800c6a6 <prvIsQueueEmpty>
 800c332:	4603      	mov	r3, r0
 800c334:	2b00      	cmp	r3, #0
 800c336:	f43f af4d 	beq.w	800c1d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00d      	beq.n	800c35c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c340:	f002 fa30 	bl	800e7a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c344:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c346:	f000 f8b4 	bl	800c4b2 <prvGetDisinheritPriorityAfterTimeout>
 800c34a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c352:	4618      	mov	r0, r3
 800c354:	f001 fa06 	bl	800d764 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c358:	f002 fa54 	bl	800e804 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c35c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c35e:	4618      	mov	r0, r3
 800c360:	3738      	adds	r7, #56	; 0x38
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	e000ed04 	.word	0xe000ed04

0800c36c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b08e      	sub	sp, #56	; 0x38
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10a      	bne.n	800c398 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	623b      	str	r3, [r7, #32]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d103      	bne.n	800c3a6 <xQueueReceiveFromISR+0x3a>
 800c39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d101      	bne.n	800c3aa <xQueueReceiveFromISR+0x3e>
 800c3a6:	2301      	movs	r3, #1
 800c3a8:	e000      	b.n	800c3ac <xQueueReceiveFromISR+0x40>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10a      	bne.n	800c3c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	61fb      	str	r3, [r7, #28]
}
 800c3c2:	bf00      	nop
 800c3c4:	e7fe      	b.n	800c3c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3c6:	f002 facf 	bl	800e968 <vPortValidateInterruptPriority>
	__asm volatile
 800c3ca:	f3ef 8211 	mrs	r2, BASEPRI
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	61ba      	str	r2, [r7, #24]
 800c3e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c3e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d02f      	beq.n	800c452 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c3fc:	68b9      	ldr	r1, [r7, #8]
 800c3fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c400:	f000 f8d9 	bl	800c5b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c406:	1e5a      	subs	r2, r3, #1
 800c408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c40c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c414:	d112      	bne.n	800c43c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	691b      	ldr	r3, [r3, #16]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d016      	beq.n	800c44c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	3310      	adds	r3, #16
 800c422:	4618      	mov	r0, r3
 800c424:	f000 fed8 	bl	800d1d8 <xTaskRemoveFromEventList>
 800c428:	4603      	mov	r3, r0
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d00e      	beq.n	800c44c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	e007      	b.n	800c44c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c43c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c440:	3301      	adds	r3, #1
 800c442:	b2db      	uxtb	r3, r3
 800c444:	b25a      	sxtb	r2, r3
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c44c:	2301      	movs	r3, #1
 800c44e:	637b      	str	r3, [r7, #52]	; 0x34
 800c450:	e001      	b.n	800c456 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c452:	2300      	movs	r3, #0
 800c454:	637b      	str	r3, [r7, #52]	; 0x34
 800c456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c458:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	f383 8811 	msr	BASEPRI, r3
}
 800c460:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c464:	4618      	mov	r0, r3
 800c466:	3738      	adds	r7, #56	; 0x38
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10a      	bne.n	800c494 <vQueueDelete+0x28>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	60bb      	str	r3, [r7, #8]
}
 800c490:	bf00      	nop
 800c492:	e7fe      	b.n	800c492 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c494:	68f8      	ldr	r0, [r7, #12]
 800c496:	f000 f95f 	bl	800c758 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d102      	bne.n	800c4aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f002 fb6b 	bl	800eb80 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c4aa:	bf00      	nop
 800c4ac:	3710      	adds	r7, #16
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	bd80      	pop	{r7, pc}

0800c4b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b085      	sub	sp, #20
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d006      	beq.n	800c4d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c4cc:	60fb      	str	r3, [r7, #12]
 800c4ce:	e001      	b.n	800c4d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
	}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b086      	sub	sp, #24
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	60b9      	str	r1, [r7, #8]
 800c4ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d10d      	bne.n	800c51c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d14d      	bne.n	800c5a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	4618      	mov	r0, r3
 800c50e:	f001 f8bb 	bl	800d688 <xTaskPriorityDisinherit>
 800c512:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	2200      	movs	r2, #0
 800c518:	609a      	str	r2, [r3, #8]
 800c51a:	e043      	b.n	800c5a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d119      	bne.n	800c556 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6858      	ldr	r0, [r3, #4]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c52a:	461a      	mov	r2, r3
 800c52c:	68b9      	ldr	r1, [r7, #8]
 800c52e:	f003 fa73 	bl	800fa18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	685a      	ldr	r2, [r3, #4]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c53a:	441a      	add	r2, r3
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	685a      	ldr	r2, [r3, #4]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d32b      	bcc.n	800c5a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	605a      	str	r2, [r3, #4]
 800c554:	e026      	b.n	800c5a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	68d8      	ldr	r0, [r3, #12]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c55e:	461a      	mov	r2, r3
 800c560:	68b9      	ldr	r1, [r7, #8]
 800c562:	f003 fa59 	bl	800fa18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	68da      	ldr	r2, [r3, #12]
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c56e:	425b      	negs	r3, r3
 800c570:	441a      	add	r2, r3
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	68da      	ldr	r2, [r3, #12]
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d207      	bcs.n	800c592 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	689a      	ldr	r2, [r3, #8]
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c58a:	425b      	negs	r3, r3
 800c58c:	441a      	add	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b02      	cmp	r3, #2
 800c596:	d105      	bne.n	800c5a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d002      	beq.n	800c5a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	1c5a      	adds	r2, r3, #1
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c5ac:	697b      	ldr	r3, [r7, #20]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3718      	adds	r7, #24
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
 800c5be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d018      	beq.n	800c5fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	68da      	ldr	r2, [r3, #12]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d0:	441a      	add	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	68da      	ldr	r2, [r3, #12]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d303      	bcc.n	800c5ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	68d9      	ldr	r1, [r3, #12]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	6838      	ldr	r0, [r7, #0]
 800c5f6:	f003 fa0f 	bl	800fa18 <memcpy>
	}
}
 800c5fa:	bf00      	nop
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c60a:	f002 f8cb 	bl	800e7a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c614:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c616:	e011      	b.n	800c63c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d012      	beq.n	800c646 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	3324      	adds	r3, #36	; 0x24
 800c624:	4618      	mov	r0, r3
 800c626:	f000 fdd7 	bl	800d1d8 <xTaskRemoveFromEventList>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d001      	beq.n	800c634 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c630:	f000 feae 	bl	800d390 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	3b01      	subs	r3, #1
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c63c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c640:	2b00      	cmp	r3, #0
 800c642:	dce9      	bgt.n	800c618 <prvUnlockQueue+0x16>
 800c644:	e000      	b.n	800c648 <prvUnlockQueue+0x46>
					break;
 800c646:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	22ff      	movs	r2, #255	; 0xff
 800c64c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c650:	f002 f8d8 	bl	800e804 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c654:	f002 f8a6 	bl	800e7a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c65e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c660:	e011      	b.n	800c686 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d012      	beq.n	800c690 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	3310      	adds	r3, #16
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 fdb2 	bl	800d1d8 <xTaskRemoveFromEventList>
 800c674:	4603      	mov	r3, r0
 800c676:	2b00      	cmp	r3, #0
 800c678:	d001      	beq.n	800c67e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c67a:	f000 fe89 	bl	800d390 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c67e:	7bbb      	ldrb	r3, [r7, #14]
 800c680:	3b01      	subs	r3, #1
 800c682:	b2db      	uxtb	r3, r3
 800c684:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c686:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	dce9      	bgt.n	800c662 <prvUnlockQueue+0x60>
 800c68e:	e000      	b.n	800c692 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c690:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	22ff      	movs	r2, #255	; 0xff
 800c696:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c69a:	f002 f8b3 	bl	800e804 <vPortExitCritical>
}
 800c69e:	bf00      	nop
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b084      	sub	sp, #16
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6ae:	f002 f879 	bl	800e7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d102      	bne.n	800c6c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	60fb      	str	r3, [r7, #12]
 800c6be:	e001      	b.n	800c6c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6c4:	f002 f89e 	bl	800e804 <vPortExitCritical>

	return xReturn;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}

0800c6d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c6d2:	b580      	push	{r7, lr}
 800c6d4:	b084      	sub	sp, #16
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c6da:	f002 f863 	bl	800e7a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d102      	bne.n	800c6f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	60fb      	str	r3, [r7, #12]
 800c6ee:	e001      	b.n	800c6f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6f4:	f002 f886 	bl	800e804 <vPortExitCritical>

	return xReturn;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3710      	adds	r7, #16
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
	...

0800c704 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c70e:	2300      	movs	r3, #0
 800c710:	60fb      	str	r3, [r7, #12]
 800c712:	e014      	b.n	800c73e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c714:	4a0f      	ldr	r2, [pc, #60]	; (800c754 <vQueueAddToRegistry+0x50>)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10b      	bne.n	800c738 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c720:	490c      	ldr	r1, [pc, #48]	; (800c754 <vQueueAddToRegistry+0x50>)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	683a      	ldr	r2, [r7, #0]
 800c726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c72a:	4a0a      	ldr	r2, [pc, #40]	; (800c754 <vQueueAddToRegistry+0x50>)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	00db      	lsls	r3, r3, #3
 800c730:	4413      	add	r3, r2
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c736:	e006      	b.n	800c746 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	3301      	adds	r3, #1
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2b07      	cmp	r3, #7
 800c742:	d9e7      	bls.n	800c714 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c744:	bf00      	nop
 800c746:	bf00      	nop
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr
 800c752:	bf00      	nop
 800c754:	20000fac 	.word	0x20000fac

0800c758 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c760:	2300      	movs	r3, #0
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	e016      	b.n	800c794 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c766:	4a10      	ldr	r2, [pc, #64]	; (800c7a8 <vQueueUnregisterQueue+0x50>)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	00db      	lsls	r3, r3, #3
 800c76c:	4413      	add	r3, r2
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	429a      	cmp	r2, r3
 800c774:	d10b      	bne.n	800c78e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c776:	4a0c      	ldr	r2, [pc, #48]	; (800c7a8 <vQueueUnregisterQueue+0x50>)
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2100      	movs	r1, #0
 800c77c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c780:	4a09      	ldr	r2, [pc, #36]	; (800c7a8 <vQueueUnregisterQueue+0x50>)
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	00db      	lsls	r3, r3, #3
 800c786:	4413      	add	r3, r2
 800c788:	2200      	movs	r2, #0
 800c78a:	605a      	str	r2, [r3, #4]
				break;
 800c78c:	e006      	b.n	800c79c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3301      	adds	r3, #1
 800c792:	60fb      	str	r3, [r7, #12]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2b07      	cmp	r3, #7
 800c798:	d9e5      	bls.n	800c766 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c79a:	bf00      	nop
 800c79c:	bf00      	nop
 800c79e:	3714      	adds	r7, #20
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr
 800c7a8:	20000fac 	.word	0x20000fac

0800c7ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c7bc:	f001 fff2 	bl	800e7a4 <vPortEnterCritical>
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7c6:	b25b      	sxtb	r3, r3
 800c7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7cc:	d103      	bne.n	800c7d6 <vQueueWaitForMessageRestricted+0x2a>
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	2200      	movs	r2, #0
 800c7d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7dc:	b25b      	sxtb	r3, r3
 800c7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e2:	d103      	bne.n	800c7ec <vQueueWaitForMessageRestricted+0x40>
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7ec:	f002 f80a 	bl	800e804 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d106      	bne.n	800c806 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	3324      	adds	r3, #36	; 0x24
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	68b9      	ldr	r1, [r7, #8]
 800c800:	4618      	mov	r0, r3
 800c802:	f000 fcbd 	bl	800d180 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c806:	6978      	ldr	r0, [r7, #20]
 800c808:	f7ff fefb 	bl	800c602 <prvUnlockQueue>
	}
 800c80c:	bf00      	nop
 800c80e:	3718      	adds	r7, #24
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}

0800c814 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c814:	b580      	push	{r7, lr}
 800c816:	b08e      	sub	sp, #56	; 0x38
 800c818:	af04      	add	r7, sp, #16
 800c81a:	60f8      	str	r0, [r7, #12]
 800c81c:	60b9      	str	r1, [r7, #8]
 800c81e:	607a      	str	r2, [r7, #4]
 800c820:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c824:	2b00      	cmp	r3, #0
 800c826:	d10a      	bne.n	800c83e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	623b      	str	r3, [r7, #32]
}
 800c83a:	bf00      	nop
 800c83c:	e7fe      	b.n	800c83c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c840:	2b00      	cmp	r3, #0
 800c842:	d10a      	bne.n	800c85a <xTaskCreateStatic+0x46>
	__asm volatile
 800c844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c848:	f383 8811 	msr	BASEPRI, r3
 800c84c:	f3bf 8f6f 	isb	sy
 800c850:	f3bf 8f4f 	dsb	sy
 800c854:	61fb      	str	r3, [r7, #28]
}
 800c856:	bf00      	nop
 800c858:	e7fe      	b.n	800c858 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c85a:	23a8      	movs	r3, #168	; 0xa8
 800c85c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	2ba8      	cmp	r3, #168	; 0xa8
 800c862:	d00a      	beq.n	800c87a <xTaskCreateStatic+0x66>
	__asm volatile
 800c864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	61bb      	str	r3, [r7, #24]
}
 800c876:	bf00      	nop
 800c878:	e7fe      	b.n	800c878 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c87a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d01e      	beq.n	800c8c0 <xTaskCreateStatic+0xac>
 800c882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c884:	2b00      	cmp	r3, #0
 800c886:	d01b      	beq.n	800c8c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c88a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c890:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c894:	2202      	movs	r2, #2
 800c896:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c89a:	2300      	movs	r3, #0
 800c89c:	9303      	str	r3, [sp, #12]
 800c89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a0:	9302      	str	r3, [sp, #8]
 800c8a2:	f107 0314 	add.w	r3, r7, #20
 800c8a6:	9301      	str	r3, [sp, #4]
 800c8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8aa:	9300      	str	r3, [sp, #0]
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	68b9      	ldr	r1, [r7, #8]
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f000 f850 	bl	800c958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c8b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8ba:	f000 f8f3 	bl	800caa4 <prvAddNewTaskToReadyList>
 800c8be:	e001      	b.n	800c8c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c8c4:	697b      	ldr	r3, [r7, #20]
	}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3728      	adds	r7, #40	; 0x28
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b08c      	sub	sp, #48	; 0x30
 800c8d2:	af04      	add	r7, sp, #16
 800c8d4:	60f8      	str	r0, [r7, #12]
 800c8d6:	60b9      	str	r1, [r7, #8]
 800c8d8:	603b      	str	r3, [r7, #0]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c8de:	88fb      	ldrh	r3, [r7, #6]
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f002 f880 	bl	800e9e8 <pvPortMalloc>
 800c8e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d00e      	beq.n	800c90e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c8f0:	20a8      	movs	r0, #168	; 0xa8
 800c8f2:	f002 f879 	bl	800e9e8 <pvPortMalloc>
 800c8f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d003      	beq.n	800c906 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	631a      	str	r2, [r3, #48]	; 0x30
 800c904:	e005      	b.n	800c912 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c906:	6978      	ldr	r0, [r7, #20]
 800c908:	f002 f93a 	bl	800eb80 <vPortFree>
 800c90c:	e001      	b.n	800c912 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c90e:	2300      	movs	r3, #0
 800c910:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d017      	beq.n	800c948 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	2200      	movs	r2, #0
 800c91c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c920:	88fa      	ldrh	r2, [r7, #6]
 800c922:	2300      	movs	r3, #0
 800c924:	9303      	str	r3, [sp, #12]
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	9302      	str	r3, [sp, #8]
 800c92a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c92c:	9301      	str	r3, [sp, #4]
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	9300      	str	r3, [sp, #0]
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	68b9      	ldr	r1, [r7, #8]
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f000 f80e 	bl	800c958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c93c:	69f8      	ldr	r0, [r7, #28]
 800c93e:	f000 f8b1 	bl	800caa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c942:	2301      	movs	r3, #1
 800c944:	61bb      	str	r3, [r7, #24]
 800c946:	e002      	b.n	800c94e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c948:	f04f 33ff 	mov.w	r3, #4294967295
 800c94c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c94e:	69bb      	ldr	r3, [r7, #24]
	}
 800c950:	4618      	mov	r0, r3
 800c952:	3720      	adds	r7, #32
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}

0800c958 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	461a      	mov	r2, r3
 800c970:	21a5      	movs	r1, #165	; 0xa5
 800c972:	f002 ff7c 	bl	800f86e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c980:	3b01      	subs	r3, #1
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	4413      	add	r3, r2
 800c986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c988:	69bb      	ldr	r3, [r7, #24]
 800c98a:	f023 0307 	bic.w	r3, r3, #7
 800c98e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	f003 0307 	and.w	r3, r3, #7
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00a      	beq.n	800c9b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c99e:	f383 8811 	msr	BASEPRI, r3
 800c9a2:	f3bf 8f6f 	isb	sy
 800c9a6:	f3bf 8f4f 	dsb	sy
 800c9aa:	617b      	str	r3, [r7, #20]
}
 800c9ac:	bf00      	nop
 800c9ae:	e7fe      	b.n	800c9ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d01f      	beq.n	800c9f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	61fb      	str	r3, [r7, #28]
 800c9ba:	e012      	b.n	800c9e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	69fb      	ldr	r3, [r7, #28]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	7819      	ldrb	r1, [r3, #0]
 800c9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9c6:	69fb      	ldr	r3, [r7, #28]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	3334      	adds	r3, #52	; 0x34
 800c9cc:	460a      	mov	r2, r1
 800c9ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	69fb      	ldr	r3, [r7, #28]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d006      	beq.n	800c9ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c9dc:	69fb      	ldr	r3, [r7, #28]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	61fb      	str	r3, [r7, #28]
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	2b0f      	cmp	r3, #15
 800c9e6:	d9e9      	bls.n	800c9bc <prvInitialiseNewTask+0x64>
 800c9e8:	e000      	b.n	800c9ec <prvInitialiseNewTask+0x94>
			{
				break;
 800c9ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9f4:	e003      	b.n	800c9fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca00:	2b37      	cmp	r3, #55	; 0x37
 800ca02:	d901      	bls.n	800ca08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ca04:	2337      	movs	r3, #55	; 0x37
 800ca06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ca08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ca14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca16:	2200      	movs	r2, #0
 800ca18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ca1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fe fda0 	bl	800b564 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ca24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca26:	3318      	adds	r3, #24
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe fd9b 	bl	800b564 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ca2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ca44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca46:	2200      	movs	r2, #0
 800ca48:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4e:	2200      	movs	r2, #0
 800ca50:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	3354      	adds	r3, #84	; 0x54
 800ca58:	224c      	movs	r2, #76	; 0x4c
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f002 ff06 	bl	800f86e <memset>
 800ca62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca64:	4a0c      	ldr	r2, [pc, #48]	; (800ca98 <prvInitialiseNewTask+0x140>)
 800ca66:	659a      	str	r2, [r3, #88]	; 0x58
 800ca68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6a:	4a0c      	ldr	r2, [pc, #48]	; (800ca9c <prvInitialiseNewTask+0x144>)
 800ca6c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ca6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca70:	4a0b      	ldr	r2, [pc, #44]	; (800caa0 <prvInitialiseNewTask+0x148>)
 800ca72:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ca74:	683a      	ldr	r2, [r7, #0]
 800ca76:	68f9      	ldr	r1, [r7, #12]
 800ca78:	69b8      	ldr	r0, [r7, #24]
 800ca7a:	f001 fd67 	bl	800e54c <pxPortInitialiseStack>
 800ca7e:	4602      	mov	r2, r0
 800ca80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ca84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ca8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca90:	bf00      	nop
 800ca92:	3720      	adds	r7, #32
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	20009640 	.word	0x20009640
 800ca9c:	200096a8 	.word	0x200096a8
 800caa0:	20009710 	.word	0x20009710

0800caa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800caac:	f001 fe7a 	bl	800e7a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cab0:	4b2d      	ldr	r3, [pc, #180]	; (800cb68 <prvAddNewTaskToReadyList+0xc4>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	3301      	adds	r3, #1
 800cab6:	4a2c      	ldr	r2, [pc, #176]	; (800cb68 <prvAddNewTaskToReadyList+0xc4>)
 800cab8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800caba:	4b2c      	ldr	r3, [pc, #176]	; (800cb6c <prvAddNewTaskToReadyList+0xc8>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d109      	bne.n	800cad6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cac2:	4a2a      	ldr	r2, [pc, #168]	; (800cb6c <prvAddNewTaskToReadyList+0xc8>)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cac8:	4b27      	ldr	r3, [pc, #156]	; (800cb68 <prvAddNewTaskToReadyList+0xc4>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d110      	bne.n	800caf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cad0:	f000 fc82 	bl	800d3d8 <prvInitialiseTaskLists>
 800cad4:	e00d      	b.n	800caf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cad6:	4b26      	ldr	r3, [pc, #152]	; (800cb70 <prvAddNewTaskToReadyList+0xcc>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d109      	bne.n	800caf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cade:	4b23      	ldr	r3, [pc, #140]	; (800cb6c <prvAddNewTaskToReadyList+0xc8>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae8:	429a      	cmp	r2, r3
 800caea:	d802      	bhi.n	800caf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800caec:	4a1f      	ldr	r2, [pc, #124]	; (800cb6c <prvAddNewTaskToReadyList+0xc8>)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800caf2:	4b20      	ldr	r3, [pc, #128]	; (800cb74 <prvAddNewTaskToReadyList+0xd0>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3301      	adds	r3, #1
 800caf8:	4a1e      	ldr	r2, [pc, #120]	; (800cb74 <prvAddNewTaskToReadyList+0xd0>)
 800cafa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cafc:	4b1d      	ldr	r3, [pc, #116]	; (800cb74 <prvAddNewTaskToReadyList+0xd0>)
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb08:	4b1b      	ldr	r3, [pc, #108]	; (800cb78 <prvAddNewTaskToReadyList+0xd4>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d903      	bls.n	800cb18 <prvAddNewTaskToReadyList+0x74>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb14:	4a18      	ldr	r2, [pc, #96]	; (800cb78 <prvAddNewTaskToReadyList+0xd4>)
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	009b      	lsls	r3, r3, #2
 800cb24:	4a15      	ldr	r2, [pc, #84]	; (800cb7c <prvAddNewTaskToReadyList+0xd8>)
 800cb26:	441a      	add	r2, r3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4610      	mov	r0, r2
 800cb30:	f7fe fd25 	bl	800b57e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cb34:	f001 fe66 	bl	800e804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cb38:	4b0d      	ldr	r3, [pc, #52]	; (800cb70 <prvAddNewTaskToReadyList+0xcc>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00e      	beq.n	800cb5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cb40:	4b0a      	ldr	r3, [pc, #40]	; (800cb6c <prvAddNewTaskToReadyList+0xc8>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d207      	bcs.n	800cb5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cb4e:	4b0c      	ldr	r3, [pc, #48]	; (800cb80 <prvAddNewTaskToReadyList+0xdc>)
 800cb50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	f3bf 8f4f 	dsb	sy
 800cb5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb5e:	bf00      	nop
 800cb60:	3708      	adds	r7, #8
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
 800cb66:	bf00      	nop
 800cb68:	200014c0 	.word	0x200014c0
 800cb6c:	20000fec 	.word	0x20000fec
 800cb70:	200014cc 	.word	0x200014cc
 800cb74:	200014dc 	.word	0x200014dc
 800cb78:	200014c8 	.word	0x200014c8
 800cb7c:	20000ff0 	.word	0x20000ff0
 800cb80:	e000ed04 	.word	0xe000ed04

0800cb84 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08a      	sub	sp, #40	; 0x28
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10a      	bne.n	800cbae <vTaskDelayUntil+0x2a>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	f383 8811 	msr	BASEPRI, r3
 800cba0:	f3bf 8f6f 	isb	sy
 800cba4:	f3bf 8f4f 	dsb	sy
 800cba8:	617b      	str	r3, [r7, #20]
}
 800cbaa:	bf00      	nop
 800cbac:	e7fe      	b.n	800cbac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10a      	bne.n	800cbca <vTaskDelayUntil+0x46>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	613b      	str	r3, [r7, #16]
}
 800cbc6:	bf00      	nop
 800cbc8:	e7fe      	b.n	800cbc8 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800cbca:	4b2a      	ldr	r3, [pc, #168]	; (800cc74 <vTaskDelayUntil+0xf0>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d00a      	beq.n	800cbe8 <vTaskDelayUntil+0x64>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	60fb      	str	r3, [r7, #12]
}
 800cbe4:	bf00      	nop
 800cbe6:	e7fe      	b.n	800cbe6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800cbe8:	f000 f8ba 	bl	800cd60 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800cbec:	4b22      	ldr	r3, [pc, #136]	; (800cc78 <vTaskDelayUntil+0xf4>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	683a      	ldr	r2, [r7, #0]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6a3a      	ldr	r2, [r7, #32]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d20b      	bcs.n	800cc1e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	69fa      	ldr	r2, [r7, #28]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d211      	bcs.n	800cc34 <vTaskDelayUntil+0xb0>
 800cc10:	69fa      	ldr	r2, [r7, #28]
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	d90d      	bls.n	800cc34 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800cc18:	2301      	movs	r3, #1
 800cc1a:	627b      	str	r3, [r7, #36]	; 0x24
 800cc1c:	e00a      	b.n	800cc34 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	69fa      	ldr	r2, [r7, #28]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d303      	bcc.n	800cc30 <vTaskDelayUntil+0xac>
 800cc28:	69fa      	ldr	r2, [r7, #28]
 800cc2a:	6a3b      	ldr	r3, [r7, #32]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d901      	bls.n	800cc34 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800cc30:	2301      	movs	r3, #1
 800cc32:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	69fa      	ldr	r2, [r7, #28]
 800cc38:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d006      	beq.n	800cc4e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cc40:	69fa      	ldr	r2, [r7, #28]
 800cc42:	6a3b      	ldr	r3, [r7, #32]
 800cc44:	1ad3      	subs	r3, r2, r3
 800cc46:	2100      	movs	r1, #0
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f001 f823 	bl	800dc94 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800cc4e:	f000 f895 	bl	800cd7c <xTaskResumeAll>
 800cc52:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d107      	bne.n	800cc6a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800cc5a:	4b08      	ldr	r3, [pc, #32]	; (800cc7c <vTaskDelayUntil+0xf8>)
 800cc5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc60:	601a      	str	r2, [r3, #0]
 800cc62:	f3bf 8f4f 	dsb	sy
 800cc66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc6a:	bf00      	nop
 800cc6c:	3728      	adds	r7, #40	; 0x28
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	200014e8 	.word	0x200014e8
 800cc78:	200014c4 	.word	0x200014c4
 800cc7c:	e000ed04 	.word	0xe000ed04

0800cc80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b08a      	sub	sp, #40	; 0x28
 800cc84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc8e:	463a      	mov	r2, r7
 800cc90:	1d39      	adds	r1, r7, #4
 800cc92:	f107 0308 	add.w	r3, r7, #8
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7fe fc10 	bl	800b4bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cc9c:	6839      	ldr	r1, [r7, #0]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	9202      	str	r2, [sp, #8]
 800cca4:	9301      	str	r3, [sp, #4]
 800cca6:	2300      	movs	r3, #0
 800cca8:	9300      	str	r3, [sp, #0]
 800ccaa:	2300      	movs	r3, #0
 800ccac:	460a      	mov	r2, r1
 800ccae:	4924      	ldr	r1, [pc, #144]	; (800cd40 <vTaskStartScheduler+0xc0>)
 800ccb0:	4824      	ldr	r0, [pc, #144]	; (800cd44 <vTaskStartScheduler+0xc4>)
 800ccb2:	f7ff fdaf 	bl	800c814 <xTaskCreateStatic>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	4a23      	ldr	r2, [pc, #140]	; (800cd48 <vTaskStartScheduler+0xc8>)
 800ccba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ccbc:	4b22      	ldr	r3, [pc, #136]	; (800cd48 <vTaskStartScheduler+0xc8>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	617b      	str	r3, [r7, #20]
 800ccc8:	e001      	b.n	800ccce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d102      	bne.n	800ccda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ccd4:	f001 f832 	bl	800dd3c <xTimerCreateTimerTask>
 800ccd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d11b      	bne.n	800cd18 <vTaskStartScheduler+0x98>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	613b      	str	r3, [r7, #16]
}
 800ccf2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ccf4:	4b15      	ldr	r3, [pc, #84]	; (800cd4c <vTaskStartScheduler+0xcc>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	3354      	adds	r3, #84	; 0x54
 800ccfa:	4a15      	ldr	r2, [pc, #84]	; (800cd50 <vTaskStartScheduler+0xd0>)
 800ccfc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccfe:	4b15      	ldr	r3, [pc, #84]	; (800cd54 <vTaskStartScheduler+0xd4>)
 800cd00:	f04f 32ff 	mov.w	r2, #4294967295
 800cd04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cd06:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <vTaskStartScheduler+0xd8>)
 800cd08:	2201      	movs	r2, #1
 800cd0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd0c:	4b13      	ldr	r3, [pc, #76]	; (800cd5c <vTaskStartScheduler+0xdc>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd12:	f001 fca5 	bl	800e660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd16:	e00e      	b.n	800cd36 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd1e:	d10a      	bne.n	800cd36 <vTaskStartScheduler+0xb6>
	__asm volatile
 800cd20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd24:	f383 8811 	msr	BASEPRI, r3
 800cd28:	f3bf 8f6f 	isb	sy
 800cd2c:	f3bf 8f4f 	dsb	sy
 800cd30:	60fb      	str	r3, [r7, #12]
}
 800cd32:	bf00      	nop
 800cd34:	e7fe      	b.n	800cd34 <vTaskStartScheduler+0xb4>
}
 800cd36:	bf00      	nop
 800cd38:	3718      	adds	r7, #24
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	08011a20 	.word	0x08011a20
 800cd44:	0800d3a9 	.word	0x0800d3a9
 800cd48:	200014e4 	.word	0x200014e4
 800cd4c:	20000fec 	.word	0x20000fec
 800cd50:	2000006c 	.word	0x2000006c
 800cd54:	200014e0 	.word	0x200014e0
 800cd58:	200014cc 	.word	0x200014cc
 800cd5c:	200014c4 	.word	0x200014c4

0800cd60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd60:	b480      	push	{r7}
 800cd62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cd64:	4b04      	ldr	r3, [pc, #16]	; (800cd78 <vTaskSuspendAll+0x18>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	3301      	adds	r3, #1
 800cd6a:	4a03      	ldr	r2, [pc, #12]	; (800cd78 <vTaskSuspendAll+0x18>)
 800cd6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cd6e:	bf00      	nop
 800cd70:	46bd      	mov	sp, r7
 800cd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd76:	4770      	bx	lr
 800cd78:	200014e8 	.word	0x200014e8

0800cd7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd86:	2300      	movs	r3, #0
 800cd88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd8a:	4b42      	ldr	r3, [pc, #264]	; (800ce94 <xTaskResumeAll+0x118>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d10a      	bne.n	800cda8 <xTaskResumeAll+0x2c>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	603b      	str	r3, [r7, #0]
}
 800cda4:	bf00      	nop
 800cda6:	e7fe      	b.n	800cda6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cda8:	f001 fcfc 	bl	800e7a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cdac:	4b39      	ldr	r3, [pc, #228]	; (800ce94 <xTaskResumeAll+0x118>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3b01      	subs	r3, #1
 800cdb2:	4a38      	ldr	r2, [pc, #224]	; (800ce94 <xTaskResumeAll+0x118>)
 800cdb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cdb6:	4b37      	ldr	r3, [pc, #220]	; (800ce94 <xTaskResumeAll+0x118>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d162      	bne.n	800ce84 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cdbe:	4b36      	ldr	r3, [pc, #216]	; (800ce98 <xTaskResumeAll+0x11c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d05e      	beq.n	800ce84 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdc6:	e02f      	b.n	800ce28 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdc8:	4b34      	ldr	r3, [pc, #208]	; (800ce9c <xTaskResumeAll+0x120>)
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	3318      	adds	r3, #24
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7fe fc2f 	bl	800b638 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	3304      	adds	r3, #4
 800cdde:	4618      	mov	r0, r3
 800cde0:	f7fe fc2a 	bl	800b638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde8:	4b2d      	ldr	r3, [pc, #180]	; (800cea0 <xTaskResumeAll+0x124>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d903      	bls.n	800cdf8 <xTaskResumeAll+0x7c>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdf4:	4a2a      	ldr	r2, [pc, #168]	; (800cea0 <xTaskResumeAll+0x124>)
 800cdf6:	6013      	str	r3, [r2, #0]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	4a27      	ldr	r2, [pc, #156]	; (800cea4 <xTaskResumeAll+0x128>)
 800ce06:	441a      	add	r2, r3
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	3304      	adds	r3, #4
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4610      	mov	r0, r2
 800ce10:	f7fe fbb5 	bl	800b57e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce18:	4b23      	ldr	r3, [pc, #140]	; (800cea8 <xTaskResumeAll+0x12c>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d302      	bcc.n	800ce28 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ce22:	4b22      	ldr	r3, [pc, #136]	; (800ceac <xTaskResumeAll+0x130>)
 800ce24:	2201      	movs	r2, #1
 800ce26:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce28:	4b1c      	ldr	r3, [pc, #112]	; (800ce9c <xTaskResumeAll+0x120>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d1cb      	bne.n	800cdc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d001      	beq.n	800ce3a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce36:	f000 fb71 	bl	800d51c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ce3a:	4b1d      	ldr	r3, [pc, #116]	; (800ceb0 <xTaskResumeAll+0x134>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d010      	beq.n	800ce68 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce46:	f000 f859 	bl	800cefc <xTaskIncrementTick>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d002      	beq.n	800ce56 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce50:	4b16      	ldr	r3, [pc, #88]	; (800ceac <xTaskResumeAll+0x130>)
 800ce52:	2201      	movs	r2, #1
 800ce54:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1f1      	bne.n	800ce46 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ce62:	4b13      	ldr	r3, [pc, #76]	; (800ceb0 <xTaskResumeAll+0x134>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce68:	4b10      	ldr	r3, [pc, #64]	; (800ceac <xTaskResumeAll+0x130>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d009      	beq.n	800ce84 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce70:	2301      	movs	r3, #1
 800ce72:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce74:	4b0f      	ldr	r3, [pc, #60]	; (800ceb4 <xTaskResumeAll+0x138>)
 800ce76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce7a:	601a      	str	r2, [r3, #0]
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce84:	f001 fcbe 	bl	800e804 <vPortExitCritical>

	return xAlreadyYielded;
 800ce88:	68bb      	ldr	r3, [r7, #8]
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	200014e8 	.word	0x200014e8
 800ce98:	200014c0 	.word	0x200014c0
 800ce9c:	20001480 	.word	0x20001480
 800cea0:	200014c8 	.word	0x200014c8
 800cea4:	20000ff0 	.word	0x20000ff0
 800cea8:	20000fec 	.word	0x20000fec
 800ceac:	200014d4 	.word	0x200014d4
 800ceb0:	200014d0 	.word	0x200014d0
 800ceb4:	e000ed04 	.word	0xe000ed04

0800ceb8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cebe:	4b05      	ldr	r3, [pc, #20]	; (800ced4 <xTaskGetTickCount+0x1c>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cec4:	687b      	ldr	r3, [r7, #4]
}
 800cec6:	4618      	mov	r0, r3
 800cec8:	370c      	adds	r7, #12
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr
 800ced2:	bf00      	nop
 800ced4:	200014c4 	.word	0x200014c4

0800ced8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b082      	sub	sp, #8
 800cedc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cede:	f001 fd43 	bl	800e968 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cee2:	2300      	movs	r3, #0
 800cee4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cee6:	4b04      	ldr	r3, [pc, #16]	; (800cef8 <xTaskGetTickCountFromISR+0x20>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ceec:	683b      	ldr	r3, [r7, #0]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3708      	adds	r7, #8
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	200014c4 	.word	0x200014c4

0800cefc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b086      	sub	sp, #24
 800cf00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf02:	2300      	movs	r3, #0
 800cf04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf06:	4b4f      	ldr	r3, [pc, #316]	; (800d044 <xTaskIncrementTick+0x148>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	f040 808f 	bne.w	800d02e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf10:	4b4d      	ldr	r3, [pc, #308]	; (800d048 <xTaskIncrementTick+0x14c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	3301      	adds	r3, #1
 800cf16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf18:	4a4b      	ldr	r2, [pc, #300]	; (800d048 <xTaskIncrementTick+0x14c>)
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d120      	bne.n	800cf66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cf24:	4b49      	ldr	r3, [pc, #292]	; (800d04c <xTaskIncrementTick+0x150>)
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00a      	beq.n	800cf44 <xTaskIncrementTick+0x48>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	603b      	str	r3, [r7, #0]
}
 800cf40:	bf00      	nop
 800cf42:	e7fe      	b.n	800cf42 <xTaskIncrementTick+0x46>
 800cf44:	4b41      	ldr	r3, [pc, #260]	; (800d04c <xTaskIncrementTick+0x150>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60fb      	str	r3, [r7, #12]
 800cf4a:	4b41      	ldr	r3, [pc, #260]	; (800d050 <xTaskIncrementTick+0x154>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a3f      	ldr	r2, [pc, #252]	; (800d04c <xTaskIncrementTick+0x150>)
 800cf50:	6013      	str	r3, [r2, #0]
 800cf52:	4a3f      	ldr	r2, [pc, #252]	; (800d050 <xTaskIncrementTick+0x154>)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6013      	str	r3, [r2, #0]
 800cf58:	4b3e      	ldr	r3, [pc, #248]	; (800d054 <xTaskIncrementTick+0x158>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	4a3d      	ldr	r2, [pc, #244]	; (800d054 <xTaskIncrementTick+0x158>)
 800cf60:	6013      	str	r3, [r2, #0]
 800cf62:	f000 fadb 	bl	800d51c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf66:	4b3c      	ldr	r3, [pc, #240]	; (800d058 <xTaskIncrementTick+0x15c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	693a      	ldr	r2, [r7, #16]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d349      	bcc.n	800d004 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf70:	4b36      	ldr	r3, [pc, #216]	; (800d04c <xTaskIncrementTick+0x150>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d104      	bne.n	800cf84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf7a:	4b37      	ldr	r3, [pc, #220]	; (800d058 <xTaskIncrementTick+0x15c>)
 800cf7c:	f04f 32ff 	mov.w	r2, #4294967295
 800cf80:	601a      	str	r2, [r3, #0]
					break;
 800cf82:	e03f      	b.n	800d004 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf84:	4b31      	ldr	r3, [pc, #196]	; (800d04c <xTaskIncrementTick+0x150>)
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	68db      	ldr	r3, [r3, #12]
 800cf8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf8e:	68bb      	ldr	r3, [r7, #8]
 800cf90:	685b      	ldr	r3, [r3, #4]
 800cf92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d203      	bcs.n	800cfa4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf9c:	4a2e      	ldr	r2, [pc, #184]	; (800d058 <xTaskIncrementTick+0x15c>)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cfa2:	e02f      	b.n	800d004 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	3304      	adds	r3, #4
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fe fb45 	bl	800b638 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d004      	beq.n	800cfc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	3318      	adds	r3, #24
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7fe fb3c 	bl	800b638 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfc4:	4b25      	ldr	r3, [pc, #148]	; (800d05c <xTaskIncrementTick+0x160>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d903      	bls.n	800cfd4 <xTaskIncrementTick+0xd8>
 800cfcc:	68bb      	ldr	r3, [r7, #8]
 800cfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd0:	4a22      	ldr	r2, [pc, #136]	; (800d05c <xTaskIncrementTick+0x160>)
 800cfd2:	6013      	str	r3, [r2, #0]
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd8:	4613      	mov	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4413      	add	r3, r2
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4a1f      	ldr	r2, [pc, #124]	; (800d060 <xTaskIncrementTick+0x164>)
 800cfe2:	441a      	add	r2, r3
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	3304      	adds	r3, #4
 800cfe8:	4619      	mov	r1, r3
 800cfea:	4610      	mov	r0, r2
 800cfec:	f7fe fac7 	bl	800b57e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cff4:	4b1b      	ldr	r3, [pc, #108]	; (800d064 <xTaskIncrementTick+0x168>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d3b8      	bcc.n	800cf70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cffe:	2301      	movs	r3, #1
 800d000:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d002:	e7b5      	b.n	800cf70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d004:	4b17      	ldr	r3, [pc, #92]	; (800d064 <xTaskIncrementTick+0x168>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00a:	4915      	ldr	r1, [pc, #84]	; (800d060 <xTaskIncrementTick+0x164>)
 800d00c:	4613      	mov	r3, r2
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	4413      	add	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	440b      	add	r3, r1
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d901      	bls.n	800d020 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d01c:	2301      	movs	r3, #1
 800d01e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d020:	4b11      	ldr	r3, [pc, #68]	; (800d068 <xTaskIncrementTick+0x16c>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d007      	beq.n	800d038 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d028:	2301      	movs	r3, #1
 800d02a:	617b      	str	r3, [r7, #20]
 800d02c:	e004      	b.n	800d038 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d02e:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <xTaskIncrementTick+0x170>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	3301      	adds	r3, #1
 800d034:	4a0d      	ldr	r2, [pc, #52]	; (800d06c <xTaskIncrementTick+0x170>)
 800d036:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d038:	697b      	ldr	r3, [r7, #20]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	200014e8 	.word	0x200014e8
 800d048:	200014c4 	.word	0x200014c4
 800d04c:	20001478 	.word	0x20001478
 800d050:	2000147c 	.word	0x2000147c
 800d054:	200014d8 	.word	0x200014d8
 800d058:	200014e0 	.word	0x200014e0
 800d05c:	200014c8 	.word	0x200014c8
 800d060:	20000ff0 	.word	0x20000ff0
 800d064:	20000fec 	.word	0x20000fec
 800d068:	200014d4 	.word	0x200014d4
 800d06c:	200014d0 	.word	0x200014d0

0800d070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d070:	b480      	push	{r7}
 800d072:	b085      	sub	sp, #20
 800d074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d076:	4b2a      	ldr	r3, [pc, #168]	; (800d120 <vTaskSwitchContext+0xb0>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d003      	beq.n	800d086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d07e:	4b29      	ldr	r3, [pc, #164]	; (800d124 <vTaskSwitchContext+0xb4>)
 800d080:	2201      	movs	r2, #1
 800d082:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d084:	e046      	b.n	800d114 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d086:	4b27      	ldr	r3, [pc, #156]	; (800d124 <vTaskSwitchContext+0xb4>)
 800d088:	2200      	movs	r2, #0
 800d08a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d08c:	4b26      	ldr	r3, [pc, #152]	; (800d128 <vTaskSwitchContext+0xb8>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	60fb      	str	r3, [r7, #12]
 800d092:	e010      	b.n	800d0b6 <vTaskSwitchContext+0x46>
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10a      	bne.n	800d0b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800d09a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d09e:	f383 8811 	msr	BASEPRI, r3
 800d0a2:	f3bf 8f6f 	isb	sy
 800d0a6:	f3bf 8f4f 	dsb	sy
 800d0aa:	607b      	str	r3, [r7, #4]
}
 800d0ac:	bf00      	nop
 800d0ae:	e7fe      	b.n	800d0ae <vTaskSwitchContext+0x3e>
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3b01      	subs	r3, #1
 800d0b4:	60fb      	str	r3, [r7, #12]
 800d0b6:	491d      	ldr	r1, [pc, #116]	; (800d12c <vTaskSwitchContext+0xbc>)
 800d0b8:	68fa      	ldr	r2, [r7, #12]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4413      	add	r3, r2
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	440b      	add	r3, r1
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d0e4      	beq.n	800d094 <vTaskSwitchContext+0x24>
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4a15      	ldr	r2, [pc, #84]	; (800d12c <vTaskSwitchContext+0xbc>)
 800d0d6:	4413      	add	r3, r2
 800d0d8:	60bb      	str	r3, [r7, #8]
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	685a      	ldr	r2, [r3, #4]
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	605a      	str	r2, [r3, #4]
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	685a      	ldr	r2, [r3, #4]
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	3308      	adds	r3, #8
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d104      	bne.n	800d0fa <vTaskSwitchContext+0x8a>
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	685a      	ldr	r2, [r3, #4]
 800d0f6:	68bb      	ldr	r3, [r7, #8]
 800d0f8:	605a      	str	r2, [r3, #4]
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	68db      	ldr	r3, [r3, #12]
 800d100:	4a0b      	ldr	r2, [pc, #44]	; (800d130 <vTaskSwitchContext+0xc0>)
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	4a08      	ldr	r2, [pc, #32]	; (800d128 <vTaskSwitchContext+0xb8>)
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d10a:	4b09      	ldr	r3, [pc, #36]	; (800d130 <vTaskSwitchContext+0xc0>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	3354      	adds	r3, #84	; 0x54
 800d110:	4a08      	ldr	r2, [pc, #32]	; (800d134 <vTaskSwitchContext+0xc4>)
 800d112:	6013      	str	r3, [r2, #0]
}
 800d114:	bf00      	nop
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr
 800d120:	200014e8 	.word	0x200014e8
 800d124:	200014d4 	.word	0x200014d4
 800d128:	200014c8 	.word	0x200014c8
 800d12c:	20000ff0 	.word	0x20000ff0
 800d130:	20000fec 	.word	0x20000fec
 800d134:	2000006c 	.word	0x2000006c

0800d138 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d10a      	bne.n	800d15e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14c:	f383 8811 	msr	BASEPRI, r3
 800d150:	f3bf 8f6f 	isb	sy
 800d154:	f3bf 8f4f 	dsb	sy
 800d158:	60fb      	str	r3, [r7, #12]
}
 800d15a:	bf00      	nop
 800d15c:	e7fe      	b.n	800d15c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d15e:	4b07      	ldr	r3, [pc, #28]	; (800d17c <vTaskPlaceOnEventList+0x44>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	3318      	adds	r3, #24
 800d164:	4619      	mov	r1, r3
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f7fe fa2d 	bl	800b5c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d16c:	2101      	movs	r1, #1
 800d16e:	6838      	ldr	r0, [r7, #0]
 800d170:	f000 fd90 	bl	800dc94 <prvAddCurrentTaskToDelayedList>
}
 800d174:	bf00      	nop
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	20000fec 	.word	0x20000fec

0800d180 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d180:	b580      	push	{r7, lr}
 800d182:	b086      	sub	sp, #24
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d10a      	bne.n	800d1a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d196:	f383 8811 	msr	BASEPRI, r3
 800d19a:	f3bf 8f6f 	isb	sy
 800d19e:	f3bf 8f4f 	dsb	sy
 800d1a2:	617b      	str	r3, [r7, #20]
}
 800d1a4:	bf00      	nop
 800d1a6:	e7fe      	b.n	800d1a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1a8:	4b0a      	ldr	r3, [pc, #40]	; (800d1d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3318      	adds	r3, #24
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	68f8      	ldr	r0, [r7, #12]
 800d1b2:	f7fe f9e4 	bl	800b57e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d002      	beq.n	800d1c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d1c2:	6879      	ldr	r1, [r7, #4]
 800d1c4:	68b8      	ldr	r0, [r7, #8]
 800d1c6:	f000 fd65 	bl	800dc94 <prvAddCurrentTaskToDelayedList>
	}
 800d1ca:	bf00      	nop
 800d1cc:	3718      	adds	r7, #24
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	20000fec 	.word	0x20000fec

0800d1d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b086      	sub	sp, #24
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10a      	bne.n	800d204 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	60fb      	str	r3, [r7, #12]
}
 800d200:	bf00      	nop
 800d202:	e7fe      	b.n	800d202 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	3318      	adds	r3, #24
 800d208:	4618      	mov	r0, r3
 800d20a:	f7fe fa15 	bl	800b638 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d20e:	4b1e      	ldr	r3, [pc, #120]	; (800d288 <xTaskRemoveFromEventList+0xb0>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d11d      	bne.n	800d252 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	3304      	adds	r3, #4
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fa0c 	bl	800b638 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d224:	4b19      	ldr	r3, [pc, #100]	; (800d28c <xTaskRemoveFromEventList+0xb4>)
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d903      	bls.n	800d234 <xTaskRemoveFromEventList+0x5c>
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d230:	4a16      	ldr	r2, [pc, #88]	; (800d28c <xTaskRemoveFromEventList+0xb4>)
 800d232:	6013      	str	r3, [r2, #0]
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d238:	4613      	mov	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	4413      	add	r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	4a13      	ldr	r2, [pc, #76]	; (800d290 <xTaskRemoveFromEventList+0xb8>)
 800d242:	441a      	add	r2, r3
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	3304      	adds	r3, #4
 800d248:	4619      	mov	r1, r3
 800d24a:	4610      	mov	r0, r2
 800d24c:	f7fe f997 	bl	800b57e <vListInsertEnd>
 800d250:	e005      	b.n	800d25e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d252:	693b      	ldr	r3, [r7, #16]
 800d254:	3318      	adds	r3, #24
 800d256:	4619      	mov	r1, r3
 800d258:	480e      	ldr	r0, [pc, #56]	; (800d294 <xTaskRemoveFromEventList+0xbc>)
 800d25a:	f7fe f990 	bl	800b57e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d262:	4b0d      	ldr	r3, [pc, #52]	; (800d298 <xTaskRemoveFromEventList+0xc0>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d268:	429a      	cmp	r2, r3
 800d26a:	d905      	bls.n	800d278 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d26c:	2301      	movs	r3, #1
 800d26e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d270:	4b0a      	ldr	r3, [pc, #40]	; (800d29c <xTaskRemoveFromEventList+0xc4>)
 800d272:	2201      	movs	r2, #1
 800d274:	601a      	str	r2, [r3, #0]
 800d276:	e001      	b.n	800d27c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d278:	2300      	movs	r3, #0
 800d27a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d27c:	697b      	ldr	r3, [r7, #20]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3718      	adds	r7, #24
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
 800d286:	bf00      	nop
 800d288:	200014e8 	.word	0x200014e8
 800d28c:	200014c8 	.word	0x200014c8
 800d290:	20000ff0 	.word	0x20000ff0
 800d294:	20001480 	.word	0x20001480
 800d298:	20000fec 	.word	0x20000fec
 800d29c:	200014d4 	.word	0x200014d4

0800d2a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2a8:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <vTaskInternalSetTimeOutState+0x24>)
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d2b0:	4b05      	ldr	r3, [pc, #20]	; (800d2c8 <vTaskInternalSetTimeOutState+0x28>)
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	605a      	str	r2, [r3, #4]
}
 800d2b8:	bf00      	nop
 800d2ba:	370c      	adds	r7, #12
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c2:	4770      	bx	lr
 800d2c4:	200014d8 	.word	0x200014d8
 800d2c8:	200014c4 	.word	0x200014c4

0800d2cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b088      	sub	sp, #32
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d10a      	bne.n	800d2f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e0:	f383 8811 	msr	BASEPRI, r3
 800d2e4:	f3bf 8f6f 	isb	sy
 800d2e8:	f3bf 8f4f 	dsb	sy
 800d2ec:	613b      	str	r3, [r7, #16]
}
 800d2ee:	bf00      	nop
 800d2f0:	e7fe      	b.n	800d2f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d10a      	bne.n	800d30e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	60fb      	str	r3, [r7, #12]
}
 800d30a:	bf00      	nop
 800d30c:	e7fe      	b.n	800d30c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d30e:	f001 fa49 	bl	800e7a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d312:	4b1d      	ldr	r3, [pc, #116]	; (800d388 <xTaskCheckForTimeOut+0xbc>)
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	685b      	ldr	r3, [r3, #4]
 800d31c:	69ba      	ldr	r2, [r7, #24]
 800d31e:	1ad3      	subs	r3, r2, r3
 800d320:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32a:	d102      	bne.n	800d332 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d32c:	2300      	movs	r3, #0
 800d32e:	61fb      	str	r3, [r7, #28]
 800d330:	e023      	b.n	800d37a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	4b15      	ldr	r3, [pc, #84]	; (800d38c <xTaskCheckForTimeOut+0xc0>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d007      	beq.n	800d34e <xTaskCheckForTimeOut+0x82>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	69ba      	ldr	r2, [r7, #24]
 800d344:	429a      	cmp	r2, r3
 800d346:	d302      	bcc.n	800d34e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d348:	2301      	movs	r3, #1
 800d34a:	61fb      	str	r3, [r7, #28]
 800d34c:	e015      	b.n	800d37a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	697a      	ldr	r2, [r7, #20]
 800d354:	429a      	cmp	r2, r3
 800d356:	d20b      	bcs.n	800d370 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	1ad2      	subs	r2, r2, r3
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f7ff ff9b 	bl	800d2a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d36a:	2300      	movs	r3, #0
 800d36c:	61fb      	str	r3, [r7, #28]
 800d36e:	e004      	b.n	800d37a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	2200      	movs	r2, #0
 800d374:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d376:	2301      	movs	r3, #1
 800d378:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d37a:	f001 fa43 	bl	800e804 <vPortExitCritical>

	return xReturn;
 800d37e:	69fb      	ldr	r3, [r7, #28]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3720      	adds	r7, #32
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	200014c4 	.word	0x200014c4
 800d38c:	200014d8 	.word	0x200014d8

0800d390 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d390:	b480      	push	{r7}
 800d392:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d394:	4b03      	ldr	r3, [pc, #12]	; (800d3a4 <vTaskMissedYield+0x14>)
 800d396:	2201      	movs	r2, #1
 800d398:	601a      	str	r2, [r3, #0]
}
 800d39a:	bf00      	nop
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr
 800d3a4:	200014d4 	.word	0x200014d4

0800d3a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3b0:	f000 f852 	bl	800d458 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3b4:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <prvIdleTask+0x28>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2b01      	cmp	r3, #1
 800d3ba:	d9f9      	bls.n	800d3b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3bc:	4b05      	ldr	r3, [pc, #20]	; (800d3d4 <prvIdleTask+0x2c>)
 800d3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3c2:	601a      	str	r2, [r3, #0]
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d3cc:	e7f0      	b.n	800d3b0 <prvIdleTask+0x8>
 800d3ce:	bf00      	nop
 800d3d0:	20000ff0 	.word	0x20000ff0
 800d3d4:	e000ed04 	.word	0xe000ed04

0800d3d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3de:	2300      	movs	r3, #0
 800d3e0:	607b      	str	r3, [r7, #4]
 800d3e2:	e00c      	b.n	800d3fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	4613      	mov	r3, r2
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	4413      	add	r3, r2
 800d3ec:	009b      	lsls	r3, r3, #2
 800d3ee:	4a12      	ldr	r2, [pc, #72]	; (800d438 <prvInitialiseTaskLists+0x60>)
 800d3f0:	4413      	add	r3, r2
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fe f896 	bl	800b524 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	607b      	str	r3, [r7, #4]
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2b37      	cmp	r3, #55	; 0x37
 800d402:	d9ef      	bls.n	800d3e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d404:	480d      	ldr	r0, [pc, #52]	; (800d43c <prvInitialiseTaskLists+0x64>)
 800d406:	f7fe f88d 	bl	800b524 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d40a:	480d      	ldr	r0, [pc, #52]	; (800d440 <prvInitialiseTaskLists+0x68>)
 800d40c:	f7fe f88a 	bl	800b524 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d410:	480c      	ldr	r0, [pc, #48]	; (800d444 <prvInitialiseTaskLists+0x6c>)
 800d412:	f7fe f887 	bl	800b524 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d416:	480c      	ldr	r0, [pc, #48]	; (800d448 <prvInitialiseTaskLists+0x70>)
 800d418:	f7fe f884 	bl	800b524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d41c:	480b      	ldr	r0, [pc, #44]	; (800d44c <prvInitialiseTaskLists+0x74>)
 800d41e:	f7fe f881 	bl	800b524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d422:	4b0b      	ldr	r3, [pc, #44]	; (800d450 <prvInitialiseTaskLists+0x78>)
 800d424:	4a05      	ldr	r2, [pc, #20]	; (800d43c <prvInitialiseTaskLists+0x64>)
 800d426:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d428:	4b0a      	ldr	r3, [pc, #40]	; (800d454 <prvInitialiseTaskLists+0x7c>)
 800d42a:	4a05      	ldr	r2, [pc, #20]	; (800d440 <prvInitialiseTaskLists+0x68>)
 800d42c:	601a      	str	r2, [r3, #0]
}
 800d42e:	bf00      	nop
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	20000ff0 	.word	0x20000ff0
 800d43c:	20001450 	.word	0x20001450
 800d440:	20001464 	.word	0x20001464
 800d444:	20001480 	.word	0x20001480
 800d448:	20001494 	.word	0x20001494
 800d44c:	200014ac 	.word	0x200014ac
 800d450:	20001478 	.word	0x20001478
 800d454:	2000147c 	.word	0x2000147c

0800d458 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d45e:	e019      	b.n	800d494 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d460:	f001 f9a0 	bl	800e7a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d464:	4b10      	ldr	r3, [pc, #64]	; (800d4a8 <prvCheckTasksWaitingTermination+0x50>)
 800d466:	68db      	ldr	r3, [r3, #12]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	3304      	adds	r3, #4
 800d470:	4618      	mov	r0, r3
 800d472:	f7fe f8e1 	bl	800b638 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d476:	4b0d      	ldr	r3, [pc, #52]	; (800d4ac <prvCheckTasksWaitingTermination+0x54>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	3b01      	subs	r3, #1
 800d47c:	4a0b      	ldr	r2, [pc, #44]	; (800d4ac <prvCheckTasksWaitingTermination+0x54>)
 800d47e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d480:	4b0b      	ldr	r3, [pc, #44]	; (800d4b0 <prvCheckTasksWaitingTermination+0x58>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3b01      	subs	r3, #1
 800d486:	4a0a      	ldr	r2, [pc, #40]	; (800d4b0 <prvCheckTasksWaitingTermination+0x58>)
 800d488:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d48a:	f001 f9bb 	bl	800e804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 f810 	bl	800d4b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d494:	4b06      	ldr	r3, [pc, #24]	; (800d4b0 <prvCheckTasksWaitingTermination+0x58>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1e1      	bne.n	800d460 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d49c:	bf00      	nop
 800d49e:	bf00      	nop
 800d4a0:	3708      	adds	r7, #8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	20001494 	.word	0x20001494
 800d4ac:	200014c0 	.word	0x200014c0
 800d4b0:	200014a8 	.word	0x200014a8

0800d4b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	3354      	adds	r3, #84	; 0x54
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f002 f9f1 	bl	800f8a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d108      	bne.n	800d4e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f001 fb53 	bl	800eb80 <vPortFree>
				vPortFree( pxTCB );
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f001 fb50 	bl	800eb80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d4e0:	e018      	b.n	800d514 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d103      	bne.n	800d4f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f001 fb47 	bl	800eb80 <vPortFree>
	}
 800d4f2:	e00f      	b.n	800d514 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d4fa:	2b02      	cmp	r3, #2
 800d4fc:	d00a      	beq.n	800d514 <prvDeleteTCB+0x60>
	__asm volatile
 800d4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d502:	f383 8811 	msr	BASEPRI, r3
 800d506:	f3bf 8f6f 	isb	sy
 800d50a:	f3bf 8f4f 	dsb	sy
 800d50e:	60fb      	str	r3, [r7, #12]
}
 800d510:	bf00      	nop
 800d512:	e7fe      	b.n	800d512 <prvDeleteTCB+0x5e>
	}
 800d514:	bf00      	nop
 800d516:	3710      	adds	r7, #16
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d51c:	b480      	push	{r7}
 800d51e:	b083      	sub	sp, #12
 800d520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d522:	4b0c      	ldr	r3, [pc, #48]	; (800d554 <prvResetNextTaskUnblockTime+0x38>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d104      	bne.n	800d536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d52c:	4b0a      	ldr	r3, [pc, #40]	; (800d558 <prvResetNextTaskUnblockTime+0x3c>)
 800d52e:	f04f 32ff 	mov.w	r2, #4294967295
 800d532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d534:	e008      	b.n	800d548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d536:	4b07      	ldr	r3, [pc, #28]	; (800d554 <prvResetNextTaskUnblockTime+0x38>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	68db      	ldr	r3, [r3, #12]
 800d53e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	4a04      	ldr	r2, [pc, #16]	; (800d558 <prvResetNextTaskUnblockTime+0x3c>)
 800d546:	6013      	str	r3, [r2, #0]
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr
 800d554:	20001478 	.word	0x20001478
 800d558:	200014e0 	.word	0x200014e0

0800d55c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d562:	4b05      	ldr	r3, [pc, #20]	; (800d578 <xTaskGetCurrentTaskHandle+0x1c>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d568:	687b      	ldr	r3, [r7, #4]
	}
 800d56a:	4618      	mov	r0, r3
 800d56c:	370c      	adds	r7, #12
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	20000fec 	.word	0x20000fec

0800d57c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d582:	4b0b      	ldr	r3, [pc, #44]	; (800d5b0 <xTaskGetSchedulerState+0x34>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d102      	bne.n	800d590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d58a:	2301      	movs	r3, #1
 800d58c:	607b      	str	r3, [r7, #4]
 800d58e:	e008      	b.n	800d5a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d590:	4b08      	ldr	r3, [pc, #32]	; (800d5b4 <xTaskGetSchedulerState+0x38>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d598:	2302      	movs	r3, #2
 800d59a:	607b      	str	r3, [r7, #4]
 800d59c:	e001      	b.n	800d5a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5a2:	687b      	ldr	r3, [r7, #4]
	}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr
 800d5b0:	200014cc 	.word	0x200014cc
 800d5b4:	200014e8 	.word	0x200014e8

0800d5b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d051      	beq.n	800d672 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d2:	4b2a      	ldr	r3, [pc, #168]	; (800d67c <xTaskPriorityInherit+0xc4>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d241      	bcs.n	800d660 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	699b      	ldr	r3, [r3, #24]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	db06      	blt.n	800d5f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5e4:	4b25      	ldr	r3, [pc, #148]	; (800d67c <xTaskPriorityInherit+0xc4>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	6959      	ldr	r1, [r3, #20]
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4a1f      	ldr	r2, [pc, #124]	; (800d680 <xTaskPriorityInherit+0xc8>)
 800d604:	4413      	add	r3, r2
 800d606:	4299      	cmp	r1, r3
 800d608:	d122      	bne.n	800d650 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	3304      	adds	r3, #4
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fe f812 	bl	800b638 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d614:	4b19      	ldr	r3, [pc, #100]	; (800d67c <xTaskPriorityInherit+0xc4>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d622:	4b18      	ldr	r3, [pc, #96]	; (800d684 <xTaskPriorityInherit+0xcc>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	429a      	cmp	r2, r3
 800d628:	d903      	bls.n	800d632 <xTaskPriorityInherit+0x7a>
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62e:	4a15      	ldr	r2, [pc, #84]	; (800d684 <xTaskPriorityInherit+0xcc>)
 800d630:	6013      	str	r3, [r2, #0]
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d636:	4613      	mov	r3, r2
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	4413      	add	r3, r2
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	4a10      	ldr	r2, [pc, #64]	; (800d680 <xTaskPriorityInherit+0xc8>)
 800d640:	441a      	add	r2, r3
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	3304      	adds	r3, #4
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f7fd ff98 	bl	800b57e <vListInsertEnd>
 800d64e:	e004      	b.n	800d65a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d650:	4b0a      	ldr	r3, [pc, #40]	; (800d67c <xTaskPriorityInherit+0xc4>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d65a:	2301      	movs	r3, #1
 800d65c:	60fb      	str	r3, [r7, #12]
 800d65e:	e008      	b.n	800d672 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d664:	4b05      	ldr	r3, [pc, #20]	; (800d67c <xTaskPriorityInherit+0xc4>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d201      	bcs.n	800d672 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d66e:	2301      	movs	r3, #1
 800d670:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d672:	68fb      	ldr	r3, [r7, #12]
	}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	20000fec 	.word	0x20000fec
 800d680:	20000ff0 	.word	0x20000ff0
 800d684:	200014c8 	.word	0x200014c8

0800d688 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d694:	2300      	movs	r3, #0
 800d696:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d056      	beq.n	800d74c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d69e:	4b2e      	ldr	r3, [pc, #184]	; (800d758 <xTaskPriorityDisinherit+0xd0>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	693a      	ldr	r2, [r7, #16]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d00a      	beq.n	800d6be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	60fb      	str	r3, [r7, #12]
}
 800d6ba:	bf00      	nop
 800d6bc:	e7fe      	b.n	800d6bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10a      	bne.n	800d6dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	60bb      	str	r3, [r7, #8]
}
 800d6d8:	bf00      	nop
 800d6da:	e7fe      	b.n	800d6da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6e0:	1e5a      	subs	r2, r3, #1
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d02c      	beq.n	800d74c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d128      	bne.n	800d74c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	3304      	adds	r3, #4
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7fd ff9a 	bl	800b638 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d70c:	693b      	ldr	r3, [r7, #16]
 800d70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d710:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d71c:	4b0f      	ldr	r3, [pc, #60]	; (800d75c <xTaskPriorityDisinherit+0xd4>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	429a      	cmp	r2, r3
 800d722:	d903      	bls.n	800d72c <xTaskPriorityDisinherit+0xa4>
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d728:	4a0c      	ldr	r2, [pc, #48]	; (800d75c <xTaskPriorityDisinherit+0xd4>)
 800d72a:	6013      	str	r3, [r2, #0]
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d730:	4613      	mov	r3, r2
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4413      	add	r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	4a09      	ldr	r2, [pc, #36]	; (800d760 <xTaskPriorityDisinherit+0xd8>)
 800d73a:	441a      	add	r2, r3
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	3304      	adds	r3, #4
 800d740:	4619      	mov	r1, r3
 800d742:	4610      	mov	r0, r2
 800d744:	f7fd ff1b 	bl	800b57e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d748:	2301      	movs	r3, #1
 800d74a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d74c:	697b      	ldr	r3, [r7, #20]
	}
 800d74e:	4618      	mov	r0, r3
 800d750:	3718      	adds	r7, #24
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop
 800d758:	20000fec 	.word	0x20000fec
 800d75c:	200014c8 	.word	0x200014c8
 800d760:	20000ff0 	.word	0x20000ff0

0800d764 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d764:	b580      	push	{r7, lr}
 800d766:	b088      	sub	sp, #32
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d772:	2301      	movs	r3, #1
 800d774:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d06a      	beq.n	800d852 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d77c:	69bb      	ldr	r3, [r7, #24]
 800d77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10a      	bne.n	800d79a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	60fb      	str	r3, [r7, #12]
}
 800d796:	bf00      	nop
 800d798:	e7fe      	b.n	800d798 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d79e:	683a      	ldr	r2, [r7, #0]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d902      	bls.n	800d7aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	61fb      	str	r3, [r7, #28]
 800d7a8:	e002      	b.n	800d7b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d7ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b4:	69fa      	ldr	r2, [r7, #28]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d04b      	beq.n	800d852 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d7ba:	69bb      	ldr	r3, [r7, #24]
 800d7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7be:	697a      	ldr	r2, [r7, #20]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	d146      	bne.n	800d852 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d7c4:	4b25      	ldr	r3, [pc, #148]	; (800d85c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	69ba      	ldr	r2, [r7, #24]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d10a      	bne.n	800d7e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d2:	f383 8811 	msr	BASEPRI, r3
 800d7d6:	f3bf 8f6f 	isb	sy
 800d7da:	f3bf 8f4f 	dsb	sy
 800d7de:	60bb      	str	r3, [r7, #8]
}
 800d7e0:	bf00      	nop
 800d7e2:	e7fe      	b.n	800d7e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	69fa      	ldr	r2, [r7, #28]
 800d7ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	699b      	ldr	r3, [r3, #24]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	db04      	blt.n	800d802 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d7fe:	69bb      	ldr	r3, [r7, #24]
 800d800:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	6959      	ldr	r1, [r3, #20]
 800d806:	693a      	ldr	r2, [r7, #16]
 800d808:	4613      	mov	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4413      	add	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	4a13      	ldr	r2, [pc, #76]	; (800d860 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d812:	4413      	add	r3, r2
 800d814:	4299      	cmp	r1, r3
 800d816:	d11c      	bne.n	800d852 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	3304      	adds	r3, #4
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fd ff0b 	bl	800b638 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d826:	4b0f      	ldr	r3, [pc, #60]	; (800d864 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d903      	bls.n	800d836 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d832:	4a0c      	ldr	r2, [pc, #48]	; (800d864 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d834:	6013      	str	r3, [r2, #0]
 800d836:	69bb      	ldr	r3, [r7, #24]
 800d838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83a:	4613      	mov	r3, r2
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	4a07      	ldr	r2, [pc, #28]	; (800d860 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d844:	441a      	add	r2, r3
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	3304      	adds	r3, #4
 800d84a:	4619      	mov	r1, r3
 800d84c:	4610      	mov	r0, r2
 800d84e:	f7fd fe96 	bl	800b57e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d852:	bf00      	nop
 800d854:	3720      	adds	r7, #32
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
 800d85a:	bf00      	nop
 800d85c:	20000fec 	.word	0x20000fec
 800d860:	20000ff0 	.word	0x20000ff0
 800d864:	200014c8 	.word	0x200014c8

0800d868 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d868:	b480      	push	{r7}
 800d86a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d86c:	4b07      	ldr	r3, [pc, #28]	; (800d88c <pvTaskIncrementMutexHeldCount+0x24>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d004      	beq.n	800d87e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d874:	4b05      	ldr	r3, [pc, #20]	; (800d88c <pvTaskIncrementMutexHeldCount+0x24>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d87a:	3201      	adds	r2, #1
 800d87c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d87e:	4b03      	ldr	r3, [pc, #12]	; (800d88c <pvTaskIncrementMutexHeldCount+0x24>)
 800d880:	681b      	ldr	r3, [r3, #0]
	}
 800d882:	4618      	mov	r0, r3
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	20000fec 	.word	0x20000fec

0800d890 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
 800d89c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d89e:	f000 ff81 	bl	800e7a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d8a2:	4b29      	ldr	r3, [pc, #164]	; (800d948 <xTaskNotifyWait+0xb8>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b02      	cmp	r3, #2
 800d8ae:	d01c      	beq.n	800d8ea <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d8b0:	4b25      	ldr	r3, [pc, #148]	; (800d948 <xTaskNotifyWait+0xb8>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	43d2      	mvns	r2, r2
 800d8bc:	400a      	ands	r2, r1
 800d8be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d8c2:	4b21      	ldr	r3, [pc, #132]	; (800d948 <xTaskNotifyWait+0xb8>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00b      	beq.n	800d8ea <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8d2:	2101      	movs	r1, #1
 800d8d4:	6838      	ldr	r0, [r7, #0]
 800d8d6:	f000 f9dd 	bl	800dc94 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d8da:	4b1c      	ldr	r3, [pc, #112]	; (800d94c <xTaskNotifyWait+0xbc>)
 800d8dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8e0:	601a      	str	r2, [r3, #0]
 800d8e2:	f3bf 8f4f 	dsb	sy
 800d8e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d8ea:	f000 ff8b 	bl	800e804 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d8ee:	f000 ff59 	bl	800e7a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d005      	beq.n	800d904 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d8f8:	4b13      	ldr	r3, [pc, #76]	; (800d948 <xTaskNotifyWait+0xb8>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d904:	4b10      	ldr	r3, [pc, #64]	; (800d948 <xTaskNotifyWait+0xb8>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d90c:	b2db      	uxtb	r3, r3
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d002      	beq.n	800d918 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d912:	2300      	movs	r3, #0
 800d914:	617b      	str	r3, [r7, #20]
 800d916:	e00a      	b.n	800d92e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d918:	4b0b      	ldr	r3, [pc, #44]	; (800d948 <xTaskNotifyWait+0xb8>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800d920:	68ba      	ldr	r2, [r7, #8]
 800d922:	43d2      	mvns	r2, r2
 800d924:	400a      	ands	r2, r1
 800d926:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 800d92a:	2301      	movs	r3, #1
 800d92c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d92e:	4b06      	ldr	r3, [pc, #24]	; (800d948 <xTaskNotifyWait+0xb8>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2200      	movs	r2, #0
 800d934:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 800d938:	f000 ff64 	bl	800e804 <vPortExitCritical>

		return xReturn;
 800d93c:	697b      	ldr	r3, [r7, #20]
	}
 800d93e:	4618      	mov	r0, r3
 800d940:	3718      	adds	r7, #24
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	20000fec 	.word	0x20000fec
 800d94c:	e000ed04 	.word	0xe000ed04

0800d950 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d950:	b580      	push	{r7, lr}
 800d952:	b08a      	sub	sp, #40	; 0x28
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	4613      	mov	r3, r2
 800d95e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d960:	2301      	movs	r3, #1
 800d962:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d10a      	bne.n	800d980 <xTaskGenericNotify+0x30>
	__asm volatile
 800d96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d96e:	f383 8811 	msr	BASEPRI, r3
 800d972:	f3bf 8f6f 	isb	sy
 800d976:	f3bf 8f4f 	dsb	sy
 800d97a:	61bb      	str	r3, [r7, #24]
}
 800d97c:	bf00      	nop
 800d97e:	e7fe      	b.n	800d97e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d984:	f000 ff0e 	bl	800e7a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d004      	beq.n	800d998 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d98e:	6a3b      	ldr	r3, [r7, #32]
 800d990:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d998:	6a3b      	ldr	r3, [r7, #32]
 800d99a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d99e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d9a0:	6a3b      	ldr	r3, [r7, #32]
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800d9a8:	79fb      	ldrb	r3, [r7, #7]
 800d9aa:	2b04      	cmp	r3, #4
 800d9ac:	d82d      	bhi.n	800da0a <xTaskGenericNotify+0xba>
 800d9ae:	a201      	add	r2, pc, #4	; (adr r2, 800d9b4 <xTaskGenericNotify+0x64>)
 800d9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b4:	0800da2d 	.word	0x0800da2d
 800d9b8:	0800d9c9 	.word	0x0800d9c9
 800d9bc:	0800d9db 	.word	0x0800d9db
 800d9c0:	0800d9eb 	.word	0x0800d9eb
 800d9c4:	0800d9f5 	.word	0x0800d9f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d9c8:	6a3b      	ldr	r3, [r7, #32]
 800d9ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	6a3b      	ldr	r3, [r7, #32]
 800d9d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d9d8:	e02b      	b.n	800da32 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d9da:	6a3b      	ldr	r3, [r7, #32]
 800d9dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d9e0:	1c5a      	adds	r2, r3, #1
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d9e8:	e023      	b.n	800da32 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d9ea:	6a3b      	ldr	r3, [r7, #32]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d9f2:	e01e      	b.n	800da32 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d9f4:	7ffb      	ldrb	r3, [r7, #31]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d004      	beq.n	800da04 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d9fa:	6a3b      	ldr	r3, [r7, #32]
 800d9fc:	68ba      	ldr	r2, [r7, #8]
 800d9fe:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800da02:	e016      	b.n	800da32 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800da04:	2300      	movs	r3, #0
 800da06:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800da08:	e013      	b.n	800da32 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800da0a:	6a3b      	ldr	r3, [r7, #32]
 800da0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800da10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da14:	d00c      	beq.n	800da30 <xTaskGenericNotify+0xe0>
	__asm volatile
 800da16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	617b      	str	r3, [r7, #20]
}
 800da28:	bf00      	nop
 800da2a:	e7fe      	b.n	800da2a <xTaskGenericNotify+0xda>
					break;
 800da2c:	bf00      	nop
 800da2e:	e000      	b.n	800da32 <xTaskGenericNotify+0xe2>

					break;
 800da30:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800da32:	7ffb      	ldrb	r3, [r7, #31]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d13a      	bne.n	800daae <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	3304      	adds	r3, #4
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fd fdfb 	bl	800b638 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800da42:	6a3b      	ldr	r3, [r7, #32]
 800da44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da46:	4b1d      	ldr	r3, [pc, #116]	; (800dabc <xTaskGenericNotify+0x16c>)
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d903      	bls.n	800da56 <xTaskGenericNotify+0x106>
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da52:	4a1a      	ldr	r2, [pc, #104]	; (800dabc <xTaskGenericNotify+0x16c>)
 800da54:	6013      	str	r3, [r2, #0]
 800da56:	6a3b      	ldr	r3, [r7, #32]
 800da58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da5a:	4613      	mov	r3, r2
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4413      	add	r3, r2
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	4a17      	ldr	r2, [pc, #92]	; (800dac0 <xTaskGenericNotify+0x170>)
 800da64:	441a      	add	r2, r3
 800da66:	6a3b      	ldr	r3, [r7, #32]
 800da68:	3304      	adds	r3, #4
 800da6a:	4619      	mov	r1, r3
 800da6c:	4610      	mov	r0, r2
 800da6e:	f7fd fd86 	bl	800b57e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800da72:	6a3b      	ldr	r3, [r7, #32]
 800da74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da76:	2b00      	cmp	r3, #0
 800da78:	d00a      	beq.n	800da90 <xTaskGenericNotify+0x140>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	613b      	str	r3, [r7, #16]
}
 800da8c:	bf00      	nop
 800da8e:	e7fe      	b.n	800da8e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800da90:	6a3b      	ldr	r3, [r7, #32]
 800da92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da94:	4b0b      	ldr	r3, [pc, #44]	; (800dac4 <xTaskGenericNotify+0x174>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d907      	bls.n	800daae <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800da9e:	4b0a      	ldr	r3, [pc, #40]	; (800dac8 <xTaskGenericNotify+0x178>)
 800daa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800daae:	f000 fea9 	bl	800e804 <vPortExitCritical>

		return xReturn;
 800dab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3728      	adds	r7, #40	; 0x28
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	200014c8 	.word	0x200014c8
 800dac0:	20000ff0 	.word	0x20000ff0
 800dac4:	20000fec 	.word	0x20000fec
 800dac8:	e000ed04 	.word	0xe000ed04

0800dacc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b08e      	sub	sp, #56	; 0x38
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	603b      	str	r3, [r7, #0]
 800dad8:	4613      	mov	r3, r2
 800dada:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800dadc:	2301      	movs	r3, #1
 800dade:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d10a      	bne.n	800dafc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800dae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daea:	f383 8811 	msr	BASEPRI, r3
 800daee:	f3bf 8f6f 	isb	sy
 800daf2:	f3bf 8f4f 	dsb	sy
 800daf6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800daf8:	bf00      	nop
 800dafa:	e7fe      	b.n	800dafa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dafc:	f000 ff34 	bl	800e968 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800db04:	f3ef 8211 	mrs	r2, BASEPRI
 800db08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db0c:	f383 8811 	msr	BASEPRI, r3
 800db10:	f3bf 8f6f 	isb	sy
 800db14:	f3bf 8f4f 	dsb	sy
 800db18:	623a      	str	r2, [r7, #32]
 800db1a:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800db1c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800db1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d004      	beq.n	800db30 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800db26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db28:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db32:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800db36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800db3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db3c:	2202      	movs	r2, #2
 800db3e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800db42:	79fb      	ldrb	r3, [r7, #7]
 800db44:	2b04      	cmp	r3, #4
 800db46:	d82f      	bhi.n	800dba8 <xTaskGenericNotifyFromISR+0xdc>
 800db48:	a201      	add	r2, pc, #4	; (adr r2, 800db50 <xTaskGenericNotifyFromISR+0x84>)
 800db4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db4e:	bf00      	nop
 800db50:	0800dbcb 	.word	0x0800dbcb
 800db54:	0800db65 	.word	0x0800db65
 800db58:	0800db77 	.word	0x0800db77
 800db5c:	0800db87 	.word	0x0800db87
 800db60:	0800db91 	.word	0x0800db91
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800db64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db66:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	431a      	orrs	r2, r3
 800db6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db70:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800db74:	e02c      	b.n	800dbd0 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800db76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800db7c:	1c5a      	adds	r2, r3, #1
 800db7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800db84:	e024      	b.n	800dbd0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800db86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db88:	68ba      	ldr	r2, [r7, #8]
 800db8a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800db8e:	e01f      	b.n	800dbd0 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800db90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db94:	2b02      	cmp	r3, #2
 800db96:	d004      	beq.n	800dba2 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800db98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800dba0:	e016      	b.n	800dbd0 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800dba2:	2300      	movs	r3, #0
 800dba4:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800dba6:	e013      	b.n	800dbd0 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800dba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800dbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb2:	d00c      	beq.n	800dbce <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800dbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	61bb      	str	r3, [r7, #24]
}
 800dbc6:	bf00      	nop
 800dbc8:	e7fe      	b.n	800dbc8 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800dbca:	bf00      	nop
 800dbcc:	e000      	b.n	800dbd0 <xTaskGenericNotifyFromISR+0x104>
					break;
 800dbce:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dbd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d146      	bne.n	800dc66 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00a      	beq.n	800dbf6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	617b      	str	r3, [r7, #20]
}
 800dbf2:	bf00      	nop
 800dbf4:	e7fe      	b.n	800dbf4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbf6:	4b21      	ldr	r3, [pc, #132]	; (800dc7c <xTaskGenericNotifyFromISR+0x1b0>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d11d      	bne.n	800dc3a <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc00:	3304      	adds	r3, #4
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fd fd18 	bl	800b638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc0c:	4b1c      	ldr	r3, [pc, #112]	; (800dc80 <xTaskGenericNotifyFromISR+0x1b4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	d903      	bls.n	800dc1c <xTaskGenericNotifyFromISR+0x150>
 800dc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc18:	4a19      	ldr	r2, [pc, #100]	; (800dc80 <xTaskGenericNotifyFromISR+0x1b4>)
 800dc1a:	6013      	str	r3, [r2, #0]
 800dc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc20:	4613      	mov	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	4413      	add	r3, r2
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	4a16      	ldr	r2, [pc, #88]	; (800dc84 <xTaskGenericNotifyFromISR+0x1b8>)
 800dc2a:	441a      	add	r2, r3
 800dc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc2e:	3304      	adds	r3, #4
 800dc30:	4619      	mov	r1, r3
 800dc32:	4610      	mov	r0, r2
 800dc34:	f7fd fca3 	bl	800b57e <vListInsertEnd>
 800dc38:	e005      	b.n	800dc46 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800dc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3c:	3318      	adds	r3, #24
 800dc3e:	4619      	mov	r1, r3
 800dc40:	4811      	ldr	r0, [pc, #68]	; (800dc88 <xTaskGenericNotifyFromISR+0x1bc>)
 800dc42:	f7fd fc9c 	bl	800b57e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc4a:	4b10      	ldr	r3, [pc, #64]	; (800dc8c <xTaskGenericNotifyFromISR+0x1c0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d908      	bls.n	800dc66 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800dc54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d002      	beq.n	800dc60 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800dc5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc5c:	2201      	movs	r2, #1
 800dc5e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800dc60:	4b0b      	ldr	r3, [pc, #44]	; (800dc90 <xTaskGenericNotifyFromISR+0x1c4>)
 800dc62:	2201      	movs	r2, #1
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc68:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	f383 8811 	msr	BASEPRI, r3
}
 800dc70:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800dc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800dc74:	4618      	mov	r0, r3
 800dc76:	3738      	adds	r7, #56	; 0x38
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	200014e8 	.word	0x200014e8
 800dc80:	200014c8 	.word	0x200014c8
 800dc84:	20000ff0 	.word	0x20000ff0
 800dc88:	20001480 	.word	0x20001480
 800dc8c:	20000fec 	.word	0x20000fec
 800dc90:	200014d4 	.word	0x200014d4

0800dc94 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dc9e:	4b21      	ldr	r3, [pc, #132]	; (800dd24 <prvAddCurrentTaskToDelayedList+0x90>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dca4:	4b20      	ldr	r3, [pc, #128]	; (800dd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	3304      	adds	r3, #4
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7fd fcc4 	bl	800b638 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcb6:	d10a      	bne.n	800dcce <prvAddCurrentTaskToDelayedList+0x3a>
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d007      	beq.n	800dcce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcbe:	4b1a      	ldr	r3, [pc, #104]	; (800dd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	3304      	adds	r3, #4
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4819      	ldr	r0, [pc, #100]	; (800dd2c <prvAddCurrentTaskToDelayedList+0x98>)
 800dcc8:	f7fd fc59 	bl	800b57e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dccc:	e026      	b.n	800dd1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dcce:	68fa      	ldr	r2, [r7, #12]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	4413      	add	r3, r2
 800dcd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dcd6:	4b14      	ldr	r3, [pc, #80]	; (800dd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	68ba      	ldr	r2, [r7, #8]
 800dcdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d209      	bcs.n	800dcfa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dce6:	4b12      	ldr	r3, [pc, #72]	; (800dd30 <prvAddCurrentTaskToDelayedList+0x9c>)
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	4b0f      	ldr	r3, [pc, #60]	; (800dd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	3304      	adds	r3, #4
 800dcf0:	4619      	mov	r1, r3
 800dcf2:	4610      	mov	r0, r2
 800dcf4:	f7fd fc67 	bl	800b5c6 <vListInsert>
}
 800dcf8:	e010      	b.n	800dd1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dcfa:	4b0e      	ldr	r3, [pc, #56]	; (800dd34 <prvAddCurrentTaskToDelayedList+0xa0>)
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	4b0a      	ldr	r3, [pc, #40]	; (800dd28 <prvAddCurrentTaskToDelayedList+0x94>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3304      	adds	r3, #4
 800dd04:	4619      	mov	r1, r3
 800dd06:	4610      	mov	r0, r2
 800dd08:	f7fd fc5d 	bl	800b5c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dd0c:	4b0a      	ldr	r3, [pc, #40]	; (800dd38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	68ba      	ldr	r2, [r7, #8]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d202      	bcs.n	800dd1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800dd16:	4a08      	ldr	r2, [pc, #32]	; (800dd38 <prvAddCurrentTaskToDelayedList+0xa4>)
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	6013      	str	r3, [r2, #0]
}
 800dd1c:	bf00      	nop
 800dd1e:	3710      	adds	r7, #16
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	200014c4 	.word	0x200014c4
 800dd28:	20000fec 	.word	0x20000fec
 800dd2c:	200014ac 	.word	0x200014ac
 800dd30:	2000147c 	.word	0x2000147c
 800dd34:	20001478 	.word	0x20001478
 800dd38:	200014e0 	.word	0x200014e0

0800dd3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b08a      	sub	sp, #40	; 0x28
 800dd40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800dd42:	2300      	movs	r3, #0
 800dd44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800dd46:	f000 fba1 	bl	800e48c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800dd4a:	4b1c      	ldr	r3, [pc, #112]	; (800ddbc <xTimerCreateTimerTask+0x80>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d021      	beq.n	800dd96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800dd52:	2300      	movs	r3, #0
 800dd54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800dd56:	2300      	movs	r3, #0
 800dd58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800dd5a:	1d3a      	adds	r2, r7, #4
 800dd5c:	f107 0108 	add.w	r1, r7, #8
 800dd60:	f107 030c 	add.w	r3, r7, #12
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7fd fbc3 	bl	800b4f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dd6a:	6879      	ldr	r1, [r7, #4]
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	9202      	str	r2, [sp, #8]
 800dd72:	9301      	str	r3, [sp, #4]
 800dd74:	2302      	movs	r3, #2
 800dd76:	9300      	str	r3, [sp, #0]
 800dd78:	2300      	movs	r3, #0
 800dd7a:	460a      	mov	r2, r1
 800dd7c:	4910      	ldr	r1, [pc, #64]	; (800ddc0 <xTimerCreateTimerTask+0x84>)
 800dd7e:	4811      	ldr	r0, [pc, #68]	; (800ddc4 <xTimerCreateTimerTask+0x88>)
 800dd80:	f7fe fd48 	bl	800c814 <xTaskCreateStatic>
 800dd84:	4603      	mov	r3, r0
 800dd86:	4a10      	ldr	r2, [pc, #64]	; (800ddc8 <xTimerCreateTimerTask+0x8c>)
 800dd88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dd8a:	4b0f      	ldr	r3, [pc, #60]	; (800ddc8 <xTimerCreateTimerTask+0x8c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d001      	beq.n	800dd96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dd92:	2301      	movs	r3, #1
 800dd94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d10a      	bne.n	800ddb2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	613b      	str	r3, [r7, #16]
}
 800ddae:	bf00      	nop
 800ddb0:	e7fe      	b.n	800ddb0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ddb2:	697b      	ldr	r3, [r7, #20]
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3718      	adds	r7, #24
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bd80      	pop	{r7, pc}
 800ddbc:	2000151c 	.word	0x2000151c
 800ddc0:	08011a28 	.word	0x08011a28
 800ddc4:	0800e035 	.word	0x0800e035
 800ddc8:	20001520 	.word	0x20001520

0800ddcc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b088      	sub	sp, #32
 800ddd0:	af02      	add	r7, sp, #8
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	60b9      	str	r1, [r7, #8]
 800ddd6:	607a      	str	r2, [r7, #4]
 800ddd8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ddda:	202c      	movs	r0, #44	; 0x2c
 800dddc:	f000 fe04 	bl	800e9e8 <pvPortMalloc>
 800dde0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00d      	beq.n	800de04 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	9301      	str	r3, [sp, #4]
 800ddf4:	6a3b      	ldr	r3, [r7, #32]
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	68b9      	ldr	r1, [r7, #8]
 800ddfe:	68f8      	ldr	r0, [r7, #12]
 800de00:	f000 f843 	bl	800de8a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800de04:	697b      	ldr	r3, [r7, #20]
	}
 800de06:	4618      	mov	r0, r3
 800de08:	3718      	adds	r7, #24
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b08a      	sub	sp, #40	; 0x28
 800de12:	af02      	add	r7, sp, #8
 800de14:	60f8      	str	r0, [r7, #12]
 800de16:	60b9      	str	r1, [r7, #8]
 800de18:	607a      	str	r2, [r7, #4]
 800de1a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800de1c:	232c      	movs	r3, #44	; 0x2c
 800de1e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800de20:	693b      	ldr	r3, [r7, #16]
 800de22:	2b2c      	cmp	r3, #44	; 0x2c
 800de24:	d00a      	beq.n	800de3c <xTimerCreateStatic+0x2e>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	61bb      	str	r3, [r7, #24]
}
 800de38:	bf00      	nop
 800de3a:	e7fe      	b.n	800de3a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800de3c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800de3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de40:	2b00      	cmp	r3, #0
 800de42:	d10a      	bne.n	800de5a <xTimerCreateStatic+0x4c>
	__asm volatile
 800de44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	617b      	str	r3, [r7, #20]
}
 800de56:	bf00      	nop
 800de58:	e7fe      	b.n	800de58 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800de5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800de5e:	69fb      	ldr	r3, [r7, #28]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d00d      	beq.n	800de80 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	2202      	movs	r2, #2
 800de68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	68b9      	ldr	r1, [r7, #8]
 800de7a:	68f8      	ldr	r0, [r7, #12]
 800de7c:	f000 f805 	bl	800de8a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800de80:	69fb      	ldr	r3, [r7, #28]
	}
 800de82:	4618      	mov	r0, r3
 800de84:	3720      	adds	r7, #32
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b086      	sub	sp, #24
 800de8e:	af00      	add	r7, sp, #0
 800de90:	60f8      	str	r0, [r7, #12]
 800de92:	60b9      	str	r1, [r7, #8]
 800de94:	607a      	str	r2, [r7, #4]
 800de96:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10a      	bne.n	800deb4 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	617b      	str	r3, [r7, #20]
}
 800deb0:	bf00      	nop
 800deb2:	e7fe      	b.n	800deb2 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d01e      	beq.n	800def8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800deba:	f000 fae7 	bl	800e48c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800debe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec0:	68fa      	ldr	r2, [r7, #12]
 800dec2:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec6:	68ba      	ldr	r2, [r7, #8]
 800dec8:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800deca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800decc:	683a      	ldr	r2, [r7, #0]
 800dece:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800ded0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded2:	6a3a      	ldr	r2, [r7, #32]
 800ded4:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800ded6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded8:	3304      	adds	r3, #4
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fd fb42 	bl	800b564 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d008      	beq.n	800def8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800deec:	f043 0304 	orr.w	r3, r3, #4
 800def0:	b2da      	uxtb	r2, r3
 800def2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800def8:	bf00      	nop
 800defa:	3718      	adds	r7, #24
 800defc:	46bd      	mov	sp, r7
 800defe:	bd80      	pop	{r7, pc}

0800df00 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b08a      	sub	sp, #40	; 0x28
 800df04:	af00      	add	r7, sp, #0
 800df06:	60f8      	str	r0, [r7, #12]
 800df08:	60b9      	str	r1, [r7, #8]
 800df0a:	607a      	str	r2, [r7, #4]
 800df0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df0e:	2300      	movs	r3, #0
 800df10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d10a      	bne.n	800df2e <xTimerGenericCommand+0x2e>
	__asm volatile
 800df18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df1c:	f383 8811 	msr	BASEPRI, r3
 800df20:	f3bf 8f6f 	isb	sy
 800df24:	f3bf 8f4f 	dsb	sy
 800df28:	623b      	str	r3, [r7, #32]
}
 800df2a:	bf00      	nop
 800df2c:	e7fe      	b.n	800df2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df2e:	4b1a      	ldr	r3, [pc, #104]	; (800df98 <xTimerGenericCommand+0x98>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d02a      	beq.n	800df8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	2b05      	cmp	r3, #5
 800df46:	dc18      	bgt.n	800df7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df48:	f7ff fb18 	bl	800d57c <xTaskGetSchedulerState>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b02      	cmp	r3, #2
 800df50:	d109      	bne.n	800df66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df52:	4b11      	ldr	r3, [pc, #68]	; (800df98 <xTimerGenericCommand+0x98>)
 800df54:	6818      	ldr	r0, [r3, #0]
 800df56:	f107 0110 	add.w	r1, r7, #16
 800df5a:	2300      	movs	r3, #0
 800df5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df5e:	f7fd fdf3 	bl	800bb48 <xQueueGenericSend>
 800df62:	6278      	str	r0, [r7, #36]	; 0x24
 800df64:	e012      	b.n	800df8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df66:	4b0c      	ldr	r3, [pc, #48]	; (800df98 <xTimerGenericCommand+0x98>)
 800df68:	6818      	ldr	r0, [r3, #0]
 800df6a:	f107 0110 	add.w	r1, r7, #16
 800df6e:	2300      	movs	r3, #0
 800df70:	2200      	movs	r2, #0
 800df72:	f7fd fde9 	bl	800bb48 <xQueueGenericSend>
 800df76:	6278      	str	r0, [r7, #36]	; 0x24
 800df78:	e008      	b.n	800df8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df7a:	4b07      	ldr	r3, [pc, #28]	; (800df98 <xTimerGenericCommand+0x98>)
 800df7c:	6818      	ldr	r0, [r3, #0]
 800df7e:	f107 0110 	add.w	r1, r7, #16
 800df82:	2300      	movs	r3, #0
 800df84:	683a      	ldr	r2, [r7, #0]
 800df86:	f7fd fedd 	bl	800bd44 <xQueueGenericSendFromISR>
 800df8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3728      	adds	r7, #40	; 0x28
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	2000151c 	.word	0x2000151c

0800df9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b088      	sub	sp, #32
 800dfa0:	af02      	add	r7, sp, #8
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfa6:	4b22      	ldr	r3, [pc, #136]	; (800e030 <prvProcessExpiredTimer+0x94>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	68db      	ldr	r3, [r3, #12]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	3304      	adds	r3, #4
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7fd fb3f 	bl	800b638 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfc0:	f003 0304 	and.w	r3, r3, #4
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d022      	beq.n	800e00e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	699a      	ldr	r2, [r3, #24]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	18d1      	adds	r1, r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	683a      	ldr	r2, [r7, #0]
 800dfd4:	6978      	ldr	r0, [r7, #20]
 800dfd6:	f000 f8d1 	bl	800e17c <prvInsertTimerInActiveList>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d01f      	beq.n	800e020 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	9300      	str	r3, [sp, #0]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	2100      	movs	r1, #0
 800dfea:	6978      	ldr	r0, [r7, #20]
 800dfec:	f7ff ff88 	bl	800df00 <xTimerGenericCommand>
 800dff0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d113      	bne.n	800e020 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	60fb      	str	r3, [r7, #12]
}
 800e00a:	bf00      	nop
 800e00c:	e7fe      	b.n	800e00c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e014:	f023 0301 	bic.w	r3, r3, #1
 800e018:	b2da      	uxtb	r2, r3
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	6a1b      	ldr	r3, [r3, #32]
 800e024:	6978      	ldr	r0, [r7, #20]
 800e026:	4798      	blx	r3
}
 800e028:	bf00      	nop
 800e02a:	3718      	adds	r7, #24
 800e02c:	46bd      	mov	sp, r7
 800e02e:	bd80      	pop	{r7, pc}
 800e030:	20001514 	.word	0x20001514

0800e034 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e03c:	f107 0308 	add.w	r3, r7, #8
 800e040:	4618      	mov	r0, r3
 800e042:	f000 f857 	bl	800e0f4 <prvGetNextExpireTime>
 800e046:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	4619      	mov	r1, r3
 800e04c:	68f8      	ldr	r0, [r7, #12]
 800e04e:	f000 f803 	bl	800e058 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e052:	f000 f8d5 	bl	800e200 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e056:	e7f1      	b.n	800e03c <prvTimerTask+0x8>

0800e058 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e062:	f7fe fe7d 	bl	800cd60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e066:	f107 0308 	add.w	r3, r7, #8
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 f866 	bl	800e13c <prvSampleTimeNow>
 800e070:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d130      	bne.n	800e0da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10a      	bne.n	800e094 <prvProcessTimerOrBlockTask+0x3c>
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	429a      	cmp	r2, r3
 800e084:	d806      	bhi.n	800e094 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e086:	f7fe fe79 	bl	800cd7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e08a:	68f9      	ldr	r1, [r7, #12]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7ff ff85 	bl	800df9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e092:	e024      	b.n	800e0de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d008      	beq.n	800e0ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e09a:	4b13      	ldr	r3, [pc, #76]	; (800e0e8 <prvProcessTimerOrBlockTask+0x90>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d101      	bne.n	800e0a8 <prvProcessTimerOrBlockTask+0x50>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e000      	b.n	800e0aa <prvProcessTimerOrBlockTask+0x52>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0ac:	4b0f      	ldr	r3, [pc, #60]	; (800e0ec <prvProcessTimerOrBlockTask+0x94>)
 800e0ae:	6818      	ldr	r0, [r3, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	f7fe fb77 	bl	800c7ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e0be:	f7fe fe5d 	bl	800cd7c <xTaskResumeAll>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10a      	bne.n	800e0de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e0c8:	4b09      	ldr	r3, [pc, #36]	; (800e0f0 <prvProcessTimerOrBlockTask+0x98>)
 800e0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	f3bf 8f6f 	isb	sy
}
 800e0d8:	e001      	b.n	800e0de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0da:	f7fe fe4f 	bl	800cd7c <xTaskResumeAll>
}
 800e0de:	bf00      	nop
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20001518 	.word	0x20001518
 800e0ec:	2000151c 	.word	0x2000151c
 800e0f0:	e000ed04 	.word	0xe000ed04

0800e0f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0fc:	4b0e      	ldr	r3, [pc, #56]	; (800e138 <prvGetNextExpireTime+0x44>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d101      	bne.n	800e10a <prvGetNextExpireTime+0x16>
 800e106:	2201      	movs	r2, #1
 800e108:	e000      	b.n	800e10c <prvGetNextExpireTime+0x18>
 800e10a:	2200      	movs	r2, #0
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d105      	bne.n	800e124 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e118:	4b07      	ldr	r3, [pc, #28]	; (800e138 <prvGetNextExpireTime+0x44>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	60fb      	str	r3, [r7, #12]
 800e122:	e001      	b.n	800e128 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e124:	2300      	movs	r3, #0
 800e126:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e128:	68fb      	ldr	r3, [r7, #12]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3714      	adds	r7, #20
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	20001514 	.word	0x20001514

0800e13c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e144:	f7fe feb8 	bl	800ceb8 <xTaskGetTickCount>
 800e148:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e14a:	4b0b      	ldr	r3, [pc, #44]	; (800e178 <prvSampleTimeNow+0x3c>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	429a      	cmp	r2, r3
 800e152:	d205      	bcs.n	800e160 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e154:	f000 f936 	bl	800e3c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	e002      	b.n	800e166 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e166:	4a04      	ldr	r2, [pc, #16]	; (800e178 <prvSampleTimeNow+0x3c>)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e16c:	68fb      	ldr	r3, [r7, #12]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20001524 	.word	0x20001524

0800e17c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	607a      	str	r2, [r7, #4]
 800e188:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e18a:	2300      	movs	r3, #0
 800e18c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d812      	bhi.n	800e1c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	1ad2      	subs	r2, r2, r3
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d302      	bcc.n	800e1b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	617b      	str	r3, [r7, #20]
 800e1b4:	e01b      	b.n	800e1ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1b6:	4b10      	ldr	r3, [pc, #64]	; (800e1f8 <prvInsertTimerInActiveList+0x7c>)
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	4619      	mov	r1, r3
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	f7fd fa00 	bl	800b5c6 <vListInsert>
 800e1c6:	e012      	b.n	800e1ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d206      	bcs.n	800e1de <prvInsertTimerInActiveList+0x62>
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d302      	bcc.n	800e1de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	617b      	str	r3, [r7, #20]
 800e1dc:	e007      	b.n	800e1ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1de:	4b07      	ldr	r3, [pc, #28]	; (800e1fc <prvInsertTimerInActiveList+0x80>)
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	f7fd f9ec 	bl	800b5c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1ee:	697b      	ldr	r3, [r7, #20]
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3718      	adds	r7, #24
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	20001518 	.word	0x20001518
 800e1fc:	20001514 	.word	0x20001514

0800e200 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b08e      	sub	sp, #56	; 0x38
 800e204:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e206:	e0ca      	b.n	800e39e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	da18      	bge.n	800e240 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e20e:	1d3b      	adds	r3, r7, #4
 800e210:	3304      	adds	r3, #4
 800e212:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e216:	2b00      	cmp	r3, #0
 800e218:	d10a      	bne.n	800e230 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21e:	f383 8811 	msr	BASEPRI, r3
 800e222:	f3bf 8f6f 	isb	sy
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	61fb      	str	r3, [r7, #28]
}
 800e22c:	bf00      	nop
 800e22e:	e7fe      	b.n	800e22e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e236:	6850      	ldr	r0, [r2, #4]
 800e238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e23a:	6892      	ldr	r2, [r2, #8]
 800e23c:	4611      	mov	r1, r2
 800e23e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2b00      	cmp	r3, #0
 800e244:	f2c0 80ab 	blt.w	800e39e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24e:	695b      	ldr	r3, [r3, #20]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d004      	beq.n	800e25e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e256:	3304      	adds	r3, #4
 800e258:	4618      	mov	r0, r3
 800e25a:	f7fd f9ed 	bl	800b638 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e25e:	463b      	mov	r3, r7
 800e260:	4618      	mov	r0, r3
 800e262:	f7ff ff6b 	bl	800e13c <prvSampleTimeNow>
 800e266:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2b09      	cmp	r3, #9
 800e26c:	f200 8096 	bhi.w	800e39c <prvProcessReceivedCommands+0x19c>
 800e270:	a201      	add	r2, pc, #4	; (adr r2, 800e278 <prvProcessReceivedCommands+0x78>)
 800e272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e276:	bf00      	nop
 800e278:	0800e2a1 	.word	0x0800e2a1
 800e27c:	0800e2a1 	.word	0x0800e2a1
 800e280:	0800e2a1 	.word	0x0800e2a1
 800e284:	0800e315 	.word	0x0800e315
 800e288:	0800e329 	.word	0x0800e329
 800e28c:	0800e373 	.word	0x0800e373
 800e290:	0800e2a1 	.word	0x0800e2a1
 800e294:	0800e2a1 	.word	0x0800e2a1
 800e298:	0800e315 	.word	0x0800e315
 800e29c:	0800e329 	.word	0x0800e329
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2a6:	f043 0301 	orr.w	r3, r3, #1
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b6:	699b      	ldr	r3, [r3, #24]
 800e2b8:	18d1      	adds	r1, r2, r3
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2c0:	f7ff ff5c 	bl	800e17c <prvInsertTimerInActiveList>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d069      	beq.n	800e39e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
 800e2ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2d8:	f003 0304 	and.w	r3, r3, #4
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d05e      	beq.n	800e39e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e4:	699b      	ldr	r3, [r3, #24]
 800e2e6:	441a      	add	r2, r3
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	9300      	str	r3, [sp, #0]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e2f2:	f7ff fe05 	bl	800df00 <xTimerGenericCommand>
 800e2f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2f8:	6a3b      	ldr	r3, [r7, #32]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d14f      	bne.n	800e39e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	61bb      	str	r3, [r7, #24]
}
 800e310:	bf00      	nop
 800e312:	e7fe      	b.n	800e312 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e31a:	f023 0301 	bic.w	r3, r3, #1
 800e31e:	b2da      	uxtb	r2, r3
 800e320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e322:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e326:	e03a      	b.n	800e39e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e32e:	f043 0301 	orr.w	r3, r3, #1
 800e332:	b2da      	uxtb	r2, r3
 800e334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e336:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e33a:	68ba      	ldr	r2, [r7, #8]
 800e33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e33e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	699b      	ldr	r3, [r3, #24]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d10a      	bne.n	800e35e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	617b      	str	r3, [r7, #20]
}
 800e35a:	bf00      	nop
 800e35c:	e7fe      	b.n	800e35c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e360:	699a      	ldr	r2, [r3, #24]
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	18d1      	adds	r1, r2, r3
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e36a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e36c:	f7ff ff06 	bl	800e17c <prvInsertTimerInActiveList>
					break;
 800e370:	e015      	b.n	800e39e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e378:	f003 0302 	and.w	r3, r3, #2
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d103      	bne.n	800e388 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e382:	f000 fbfd 	bl	800eb80 <vPortFree>
 800e386:	e00a      	b.n	800e39e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e38e:	f023 0301 	bic.w	r3, r3, #1
 800e392:	b2da      	uxtb	r2, r3
 800e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e396:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e39a:	e000      	b.n	800e39e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e39c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e39e:	4b08      	ldr	r3, [pc, #32]	; (800e3c0 <prvProcessReceivedCommands+0x1c0>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	1d39      	adds	r1, r7, #4
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7fd fdf4 	bl	800bf94 <xQueueReceive>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	f47f af2a 	bne.w	800e208 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e3b4:	bf00      	nop
 800e3b6:	bf00      	nop
 800e3b8:	3730      	adds	r7, #48	; 0x30
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	2000151c 	.word	0x2000151c

0800e3c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b088      	sub	sp, #32
 800e3c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3ca:	e048      	b.n	800e45e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3cc:	4b2d      	ldr	r3, [pc, #180]	; (800e484 <prvSwitchTimerLists+0xc0>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68db      	ldr	r3, [r3, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3d6:	4b2b      	ldr	r3, [pc, #172]	; (800e484 <prvSwitchTimerLists+0xc0>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	68db      	ldr	r3, [r3, #12]
 800e3de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fd f927 	bl	800b638 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	6a1b      	ldr	r3, [r3, #32]
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3f8:	f003 0304 	and.w	r3, r3, #4
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d02e      	beq.n	800e45e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	699b      	ldr	r3, [r3, #24]
 800e404:	693a      	ldr	r2, [r7, #16]
 800e406:	4413      	add	r3, r2
 800e408:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e40a:	68ba      	ldr	r2, [r7, #8]
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d90e      	bls.n	800e430 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e41e:	4b19      	ldr	r3, [pc, #100]	; (800e484 <prvSwitchTimerLists+0xc0>)
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	3304      	adds	r3, #4
 800e426:	4619      	mov	r1, r3
 800e428:	4610      	mov	r0, r2
 800e42a:	f7fd f8cc 	bl	800b5c6 <vListInsert>
 800e42e:	e016      	b.n	800e45e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e430:	2300      	movs	r3, #0
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	2300      	movs	r3, #0
 800e436:	693a      	ldr	r2, [r7, #16]
 800e438:	2100      	movs	r1, #0
 800e43a:	68f8      	ldr	r0, [r7, #12]
 800e43c:	f7ff fd60 	bl	800df00 <xTimerGenericCommand>
 800e440:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d10a      	bne.n	800e45e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44c:	f383 8811 	msr	BASEPRI, r3
 800e450:	f3bf 8f6f 	isb	sy
 800e454:	f3bf 8f4f 	dsb	sy
 800e458:	603b      	str	r3, [r7, #0]
}
 800e45a:	bf00      	nop
 800e45c:	e7fe      	b.n	800e45c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e45e:	4b09      	ldr	r3, [pc, #36]	; (800e484 <prvSwitchTimerLists+0xc0>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1b1      	bne.n	800e3cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e468:	4b06      	ldr	r3, [pc, #24]	; (800e484 <prvSwitchTimerLists+0xc0>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e46e:	4b06      	ldr	r3, [pc, #24]	; (800e488 <prvSwitchTimerLists+0xc4>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a04      	ldr	r2, [pc, #16]	; (800e484 <prvSwitchTimerLists+0xc0>)
 800e474:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e476:	4a04      	ldr	r2, [pc, #16]	; (800e488 <prvSwitchTimerLists+0xc4>)
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	6013      	str	r3, [r2, #0]
}
 800e47c:	bf00      	nop
 800e47e:	3718      	adds	r7, #24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}
 800e484:	20001514 	.word	0x20001514
 800e488:	20001518 	.word	0x20001518

0800e48c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e492:	f000 f987 	bl	800e7a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e496:	4b15      	ldr	r3, [pc, #84]	; (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d120      	bne.n	800e4e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e49e:	4814      	ldr	r0, [pc, #80]	; (800e4f0 <prvCheckForValidListAndQueue+0x64>)
 800e4a0:	f7fd f840 	bl	800b524 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4a4:	4813      	ldr	r0, [pc, #76]	; (800e4f4 <prvCheckForValidListAndQueue+0x68>)
 800e4a6:	f7fd f83d 	bl	800b524 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4aa:	4b13      	ldr	r3, [pc, #76]	; (800e4f8 <prvCheckForValidListAndQueue+0x6c>)
 800e4ac:	4a10      	ldr	r2, [pc, #64]	; (800e4f0 <prvCheckForValidListAndQueue+0x64>)
 800e4ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e4b0:	4b12      	ldr	r3, [pc, #72]	; (800e4fc <prvCheckForValidListAndQueue+0x70>)
 800e4b2:	4a10      	ldr	r2, [pc, #64]	; (800e4f4 <prvCheckForValidListAndQueue+0x68>)
 800e4b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4b6:	2300      	movs	r3, #0
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	4b11      	ldr	r3, [pc, #68]	; (800e500 <prvCheckForValidListAndQueue+0x74>)
 800e4bc:	4a11      	ldr	r2, [pc, #68]	; (800e504 <prvCheckForValidListAndQueue+0x78>)
 800e4be:	2110      	movs	r1, #16
 800e4c0:	200a      	movs	r0, #10
 800e4c2:	f7fd f94b 	bl	800b75c <xQueueGenericCreateStatic>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	4a08      	ldr	r2, [pc, #32]	; (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e4ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4cc:	4b07      	ldr	r3, [pc, #28]	; (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d005      	beq.n	800e4e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4d4:	4b05      	ldr	r3, [pc, #20]	; (800e4ec <prvCheckForValidListAndQueue+0x60>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	490b      	ldr	r1, [pc, #44]	; (800e508 <prvCheckForValidListAndQueue+0x7c>)
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fe f912 	bl	800c704 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4e0:	f000 f990 	bl	800e804 <vPortExitCritical>
}
 800e4e4:	bf00      	nop
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}
 800e4ea:	bf00      	nop
 800e4ec:	2000151c 	.word	0x2000151c
 800e4f0:	200014ec 	.word	0x200014ec
 800e4f4:	20001500 	.word	0x20001500
 800e4f8:	20001514 	.word	0x20001514
 800e4fc:	20001518 	.word	0x20001518
 800e500:	200015c8 	.word	0x200015c8
 800e504:	20001528 	.word	0x20001528
 800e508:	08011a30 	.word	0x08011a30

0800e50c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b086      	sub	sp, #24
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d10a      	bne.n	800e534 <pvTimerGetTimerID+0x28>
	__asm volatile
 800e51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e522:	f383 8811 	msr	BASEPRI, r3
 800e526:	f3bf 8f6f 	isb	sy
 800e52a:	f3bf 8f4f 	dsb	sy
 800e52e:	60fb      	str	r3, [r7, #12]
}
 800e530:	bf00      	nop
 800e532:	e7fe      	b.n	800e532 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e534:	f000 f936 	bl	800e7a4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	69db      	ldr	r3, [r3, #28]
 800e53c:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e53e:	f000 f961 	bl	800e804 <vPortExitCritical>

	return pvReturn;
 800e542:	693b      	ldr	r3, [r7, #16]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	3b04      	subs	r3, #4
 800e55c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	3b04      	subs	r3, #4
 800e56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	f023 0201 	bic.w	r2, r3, #1
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	3b04      	subs	r3, #4
 800e57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e57c:	4a0c      	ldr	r2, [pc, #48]	; (800e5b0 <pxPortInitialiseStack+0x64>)
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	3b14      	subs	r3, #20
 800e586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	3b04      	subs	r3, #4
 800e592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f06f 0202 	mvn.w	r2, #2
 800e59a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	3b20      	subs	r3, #32
 800e5a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3714      	adds	r7, #20
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	0800e5b5 	.word	0x0800e5b5

0800e5b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b085      	sub	sp, #20
 800e5b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e5be:	4b12      	ldr	r3, [pc, #72]	; (800e608 <prvTaskExitError+0x54>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c6:	d00a      	beq.n	800e5de <prvTaskExitError+0x2a>
	__asm volatile
 800e5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5cc:	f383 8811 	msr	BASEPRI, r3
 800e5d0:	f3bf 8f6f 	isb	sy
 800e5d4:	f3bf 8f4f 	dsb	sy
 800e5d8:	60fb      	str	r3, [r7, #12]
}
 800e5da:	bf00      	nop
 800e5dc:	e7fe      	b.n	800e5dc <prvTaskExitError+0x28>
	__asm volatile
 800e5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e2:	f383 8811 	msr	BASEPRI, r3
 800e5e6:	f3bf 8f6f 	isb	sy
 800e5ea:	f3bf 8f4f 	dsb	sy
 800e5ee:	60bb      	str	r3, [r7, #8]
}
 800e5f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5f2:	bf00      	nop
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d0fc      	beq.n	800e5f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5fa:	bf00      	nop
 800e5fc:	bf00      	nop
 800e5fe:	3714      	adds	r7, #20
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr
 800e608:	20000010 	.word	0x20000010
 800e60c:	00000000 	.word	0x00000000

0800e610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e610:	4b07      	ldr	r3, [pc, #28]	; (800e630 <pxCurrentTCBConst2>)
 800e612:	6819      	ldr	r1, [r3, #0]
 800e614:	6808      	ldr	r0, [r1, #0]
 800e616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61a:	f380 8809 	msr	PSP, r0
 800e61e:	f3bf 8f6f 	isb	sy
 800e622:	f04f 0000 	mov.w	r0, #0
 800e626:	f380 8811 	msr	BASEPRI, r0
 800e62a:	4770      	bx	lr
 800e62c:	f3af 8000 	nop.w

0800e630 <pxCurrentTCBConst2>:
 800e630:	20000fec 	.word	0x20000fec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e634:	bf00      	nop
 800e636:	bf00      	nop

0800e638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e638:	4808      	ldr	r0, [pc, #32]	; (800e65c <prvPortStartFirstTask+0x24>)
 800e63a:	6800      	ldr	r0, [r0, #0]
 800e63c:	6800      	ldr	r0, [r0, #0]
 800e63e:	f380 8808 	msr	MSP, r0
 800e642:	f04f 0000 	mov.w	r0, #0
 800e646:	f380 8814 	msr	CONTROL, r0
 800e64a:	b662      	cpsie	i
 800e64c:	b661      	cpsie	f
 800e64e:	f3bf 8f4f 	dsb	sy
 800e652:	f3bf 8f6f 	isb	sy
 800e656:	df00      	svc	0
 800e658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e65a:	bf00      	nop
 800e65c:	e000ed08 	.word	0xe000ed08

0800e660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b086      	sub	sp, #24
 800e664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e666:	4b46      	ldr	r3, [pc, #280]	; (800e780 <xPortStartScheduler+0x120>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4a46      	ldr	r2, [pc, #280]	; (800e784 <xPortStartScheduler+0x124>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d10a      	bne.n	800e686 <xPortStartScheduler+0x26>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e674:	f383 8811 	msr	BASEPRI, r3
 800e678:	f3bf 8f6f 	isb	sy
 800e67c:	f3bf 8f4f 	dsb	sy
 800e680:	613b      	str	r3, [r7, #16]
}
 800e682:	bf00      	nop
 800e684:	e7fe      	b.n	800e684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e686:	4b3e      	ldr	r3, [pc, #248]	; (800e780 <xPortStartScheduler+0x120>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a3f      	ldr	r2, [pc, #252]	; (800e788 <xPortStartScheduler+0x128>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d10a      	bne.n	800e6a6 <xPortStartScheduler+0x46>
	__asm volatile
 800e690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e694:	f383 8811 	msr	BASEPRI, r3
 800e698:	f3bf 8f6f 	isb	sy
 800e69c:	f3bf 8f4f 	dsb	sy
 800e6a0:	60fb      	str	r3, [r7, #12]
}
 800e6a2:	bf00      	nop
 800e6a4:	e7fe      	b.n	800e6a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e6a6:	4b39      	ldr	r3, [pc, #228]	; (800e78c <xPortStartScheduler+0x12c>)
 800e6a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e6aa:	697b      	ldr	r3, [r7, #20]
 800e6ac:	781b      	ldrb	r3, [r3, #0]
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	22ff      	movs	r2, #255	; 0xff
 800e6b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e6c0:	78fb      	ldrb	r3, [r7, #3]
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e6c8:	b2da      	uxtb	r2, r3
 800e6ca:	4b31      	ldr	r3, [pc, #196]	; (800e790 <xPortStartScheduler+0x130>)
 800e6cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e6ce:	4b31      	ldr	r3, [pc, #196]	; (800e794 <xPortStartScheduler+0x134>)
 800e6d0:	2207      	movs	r2, #7
 800e6d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6d4:	e009      	b.n	800e6ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e6d6:	4b2f      	ldr	r3, [pc, #188]	; (800e794 <xPortStartScheduler+0x134>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	3b01      	subs	r3, #1
 800e6dc:	4a2d      	ldr	r2, [pc, #180]	; (800e794 <xPortStartScheduler+0x134>)
 800e6de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e6e0:	78fb      	ldrb	r3, [r7, #3]
 800e6e2:	b2db      	uxtb	r3, r3
 800e6e4:	005b      	lsls	r3, r3, #1
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6ea:	78fb      	ldrb	r3, [r7, #3]
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6f2:	2b80      	cmp	r3, #128	; 0x80
 800e6f4:	d0ef      	beq.n	800e6d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6f6:	4b27      	ldr	r3, [pc, #156]	; (800e794 <xPortStartScheduler+0x134>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f1c3 0307 	rsb	r3, r3, #7
 800e6fe:	2b04      	cmp	r3, #4
 800e700:	d00a      	beq.n	800e718 <xPortStartScheduler+0xb8>
	__asm volatile
 800e702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e706:	f383 8811 	msr	BASEPRI, r3
 800e70a:	f3bf 8f6f 	isb	sy
 800e70e:	f3bf 8f4f 	dsb	sy
 800e712:	60bb      	str	r3, [r7, #8]
}
 800e714:	bf00      	nop
 800e716:	e7fe      	b.n	800e716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e718:	4b1e      	ldr	r3, [pc, #120]	; (800e794 <xPortStartScheduler+0x134>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	021b      	lsls	r3, r3, #8
 800e71e:	4a1d      	ldr	r2, [pc, #116]	; (800e794 <xPortStartScheduler+0x134>)
 800e720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e722:	4b1c      	ldr	r3, [pc, #112]	; (800e794 <xPortStartScheduler+0x134>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e72a:	4a1a      	ldr	r2, [pc, #104]	; (800e794 <xPortStartScheduler+0x134>)
 800e72c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	b2da      	uxtb	r2, r3
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e736:	4b18      	ldr	r3, [pc, #96]	; (800e798 <xPortStartScheduler+0x138>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a17      	ldr	r2, [pc, #92]	; (800e798 <xPortStartScheduler+0x138>)
 800e73c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e742:	4b15      	ldr	r3, [pc, #84]	; (800e798 <xPortStartScheduler+0x138>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	4a14      	ldr	r2, [pc, #80]	; (800e798 <xPortStartScheduler+0x138>)
 800e748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e74c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e74e:	f000 f8dd 	bl	800e90c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e752:	4b12      	ldr	r3, [pc, #72]	; (800e79c <xPortStartScheduler+0x13c>)
 800e754:	2200      	movs	r2, #0
 800e756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e758:	f000 f8fc 	bl	800e954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e75c:	4b10      	ldr	r3, [pc, #64]	; (800e7a0 <xPortStartScheduler+0x140>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a0f      	ldr	r2, [pc, #60]	; (800e7a0 <xPortStartScheduler+0x140>)
 800e762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e768:	f7ff ff66 	bl	800e638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e76c:	f7fe fc80 	bl	800d070 <vTaskSwitchContext>
	prvTaskExitError();
 800e770:	f7ff ff20 	bl	800e5b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e774:	2300      	movs	r3, #0
}
 800e776:	4618      	mov	r0, r3
 800e778:	3718      	adds	r7, #24
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	e000ed00 	.word	0xe000ed00
 800e784:	410fc271 	.word	0x410fc271
 800e788:	410fc270 	.word	0x410fc270
 800e78c:	e000e400 	.word	0xe000e400
 800e790:	20001618 	.word	0x20001618
 800e794:	2000161c 	.word	0x2000161c
 800e798:	e000ed20 	.word	0xe000ed20
 800e79c:	20000010 	.word	0x20000010
 800e7a0:	e000ef34 	.word	0xe000ef34

0800e7a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
	__asm volatile
 800e7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ae:	f383 8811 	msr	BASEPRI, r3
 800e7b2:	f3bf 8f6f 	isb	sy
 800e7b6:	f3bf 8f4f 	dsb	sy
 800e7ba:	607b      	str	r3, [r7, #4]
}
 800e7bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e7be:	4b0f      	ldr	r3, [pc, #60]	; (800e7fc <vPortEnterCritical+0x58>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	4a0d      	ldr	r2, [pc, #52]	; (800e7fc <vPortEnterCritical+0x58>)
 800e7c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e7c8:	4b0c      	ldr	r3, [pc, #48]	; (800e7fc <vPortEnterCritical+0x58>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d10f      	bne.n	800e7f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e7d0:	4b0b      	ldr	r3, [pc, #44]	; (800e800 <vPortEnterCritical+0x5c>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d00a      	beq.n	800e7f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e7da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	603b      	str	r3, [r7, #0]
}
 800e7ec:	bf00      	nop
 800e7ee:	e7fe      	b.n	800e7ee <vPortEnterCritical+0x4a>
	}
}
 800e7f0:	bf00      	nop
 800e7f2:	370c      	adds	r7, #12
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	20000010 	.word	0x20000010
 800e800:	e000ed04 	.word	0xe000ed04

0800e804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e80a:	4b12      	ldr	r3, [pc, #72]	; (800e854 <vPortExitCritical+0x50>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10a      	bne.n	800e828 <vPortExitCritical+0x24>
	__asm volatile
 800e812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	607b      	str	r3, [r7, #4]
}
 800e824:	bf00      	nop
 800e826:	e7fe      	b.n	800e826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e828:	4b0a      	ldr	r3, [pc, #40]	; (800e854 <vPortExitCritical+0x50>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	3b01      	subs	r3, #1
 800e82e:	4a09      	ldr	r2, [pc, #36]	; (800e854 <vPortExitCritical+0x50>)
 800e830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e832:	4b08      	ldr	r3, [pc, #32]	; (800e854 <vPortExitCritical+0x50>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d105      	bne.n	800e846 <vPortExitCritical+0x42>
 800e83a:	2300      	movs	r3, #0
 800e83c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	f383 8811 	msr	BASEPRI, r3
}
 800e844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e846:	bf00      	nop
 800e848:	370c      	adds	r7, #12
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	20000010 	.word	0x20000010
	...

0800e860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e860:	f3ef 8009 	mrs	r0, PSP
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	4b15      	ldr	r3, [pc, #84]	; (800e8c0 <pxCurrentTCBConst>)
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	f01e 0f10 	tst.w	lr, #16
 800e870:	bf08      	it	eq
 800e872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e87a:	6010      	str	r0, [r2, #0]
 800e87c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e880:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e884:	f380 8811 	msr	BASEPRI, r0
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	f3bf 8f6f 	isb	sy
 800e890:	f7fe fbee 	bl	800d070 <vTaskSwitchContext>
 800e894:	f04f 0000 	mov.w	r0, #0
 800e898:	f380 8811 	msr	BASEPRI, r0
 800e89c:	bc09      	pop	{r0, r3}
 800e89e:	6819      	ldr	r1, [r3, #0]
 800e8a0:	6808      	ldr	r0, [r1, #0]
 800e8a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a6:	f01e 0f10 	tst.w	lr, #16
 800e8aa:	bf08      	it	eq
 800e8ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e8b0:	f380 8809 	msr	PSP, r0
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	f3af 8000 	nop.w

0800e8c0 <pxCurrentTCBConst>:
 800e8c0:	20000fec 	.word	0x20000fec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e8c4:	bf00      	nop
 800e8c6:	bf00      	nop

0800e8c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b082      	sub	sp, #8
 800e8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	607b      	str	r3, [r7, #4]
}
 800e8e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e8e2:	f7fe fb0b 	bl	800cefc <xTaskIncrementTick>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d003      	beq.n	800e8f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e8ec:	4b06      	ldr	r3, [pc, #24]	; (800e908 <xPortSysTickHandler+0x40>)
 800e8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8f2:	601a      	str	r2, [r3, #0]
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	f383 8811 	msr	BASEPRI, r3
}
 800e8fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e900:	bf00      	nop
 800e902:	3708      	adds	r7, #8
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	e000ed04 	.word	0xe000ed04

0800e90c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e90c:	b480      	push	{r7}
 800e90e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e910:	4b0b      	ldr	r3, [pc, #44]	; (800e940 <vPortSetupTimerInterrupt+0x34>)
 800e912:	2200      	movs	r2, #0
 800e914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e916:	4b0b      	ldr	r3, [pc, #44]	; (800e944 <vPortSetupTimerInterrupt+0x38>)
 800e918:	2200      	movs	r2, #0
 800e91a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e91c:	4b0a      	ldr	r3, [pc, #40]	; (800e948 <vPortSetupTimerInterrupt+0x3c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	4a0a      	ldr	r2, [pc, #40]	; (800e94c <vPortSetupTimerInterrupt+0x40>)
 800e922:	fba2 2303 	umull	r2, r3, r2, r3
 800e926:	099b      	lsrs	r3, r3, #6
 800e928:	4a09      	ldr	r2, [pc, #36]	; (800e950 <vPortSetupTimerInterrupt+0x44>)
 800e92a:	3b01      	subs	r3, #1
 800e92c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e92e:	4b04      	ldr	r3, [pc, #16]	; (800e940 <vPortSetupTimerInterrupt+0x34>)
 800e930:	2207      	movs	r2, #7
 800e932:	601a      	str	r2, [r3, #0]
}
 800e934:	bf00      	nop
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop
 800e940:	e000e010 	.word	0xe000e010
 800e944:	e000e018 	.word	0xe000e018
 800e948:	20000004 	.word	0x20000004
 800e94c:	10624dd3 	.word	0x10624dd3
 800e950:	e000e014 	.word	0xe000e014

0800e954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e964 <vPortEnableVFP+0x10>
 800e958:	6801      	ldr	r1, [r0, #0]
 800e95a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e95e:	6001      	str	r1, [r0, #0]
 800e960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e962:	bf00      	nop
 800e964:	e000ed88 	.word	0xe000ed88

0800e968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e968:	b480      	push	{r7}
 800e96a:	b085      	sub	sp, #20
 800e96c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e96e:	f3ef 8305 	mrs	r3, IPSR
 800e972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2b0f      	cmp	r3, #15
 800e978:	d914      	bls.n	800e9a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e97a:	4a17      	ldr	r2, [pc, #92]	; (800e9d8 <vPortValidateInterruptPriority+0x70>)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	4413      	add	r3, r2
 800e980:	781b      	ldrb	r3, [r3, #0]
 800e982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e984:	4b15      	ldr	r3, [pc, #84]	; (800e9dc <vPortValidateInterruptPriority+0x74>)
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	7afa      	ldrb	r2, [r7, #11]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d20a      	bcs.n	800e9a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e992:	f383 8811 	msr	BASEPRI, r3
 800e996:	f3bf 8f6f 	isb	sy
 800e99a:	f3bf 8f4f 	dsb	sy
 800e99e:	607b      	str	r3, [r7, #4]
}
 800e9a0:	bf00      	nop
 800e9a2:	e7fe      	b.n	800e9a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e9a4:	4b0e      	ldr	r3, [pc, #56]	; (800e9e0 <vPortValidateInterruptPriority+0x78>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e9ac:	4b0d      	ldr	r3, [pc, #52]	; (800e9e4 <vPortValidateInterruptPriority+0x7c>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d90a      	bls.n	800e9ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9b8:	f383 8811 	msr	BASEPRI, r3
 800e9bc:	f3bf 8f6f 	isb	sy
 800e9c0:	f3bf 8f4f 	dsb	sy
 800e9c4:	603b      	str	r3, [r7, #0]
}
 800e9c6:	bf00      	nop
 800e9c8:	e7fe      	b.n	800e9c8 <vPortValidateInterruptPriority+0x60>
	}
 800e9ca:	bf00      	nop
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	e000e3f0 	.word	0xe000e3f0
 800e9dc:	20001618 	.word	0x20001618
 800e9e0:	e000ed0c 	.word	0xe000ed0c
 800e9e4:	2000161c 	.word	0x2000161c

0800e9e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b08a      	sub	sp, #40	; 0x28
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9f4:	f7fe f9b4 	bl	800cd60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9f8:	4b5b      	ldr	r3, [pc, #364]	; (800eb68 <pvPortMalloc+0x180>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d101      	bne.n	800ea04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea00:	f000 f920 	bl	800ec44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea04:	4b59      	ldr	r3, [pc, #356]	; (800eb6c <pvPortMalloc+0x184>)
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	4013      	ands	r3, r2
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f040 8093 	bne.w	800eb38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d01d      	beq.n	800ea54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ea18:	2208      	movs	r2, #8
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4413      	add	r3, r2
 800ea1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f003 0307 	and.w	r3, r3, #7
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d014      	beq.n	800ea54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f023 0307 	bic.w	r3, r3, #7
 800ea30:	3308      	adds	r3, #8
 800ea32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f003 0307 	and.w	r3, r3, #7
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00a      	beq.n	800ea54 <pvPortMalloc+0x6c>
	__asm volatile
 800ea3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea42:	f383 8811 	msr	BASEPRI, r3
 800ea46:	f3bf 8f6f 	isb	sy
 800ea4a:	f3bf 8f4f 	dsb	sy
 800ea4e:	617b      	str	r3, [r7, #20]
}
 800ea50:	bf00      	nop
 800ea52:	e7fe      	b.n	800ea52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d06e      	beq.n	800eb38 <pvPortMalloc+0x150>
 800ea5a:	4b45      	ldr	r3, [pc, #276]	; (800eb70 <pvPortMalloc+0x188>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d869      	bhi.n	800eb38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea64:	4b43      	ldr	r3, [pc, #268]	; (800eb74 <pvPortMalloc+0x18c>)
 800ea66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea68:	4b42      	ldr	r3, [pc, #264]	; (800eb74 <pvPortMalloc+0x18c>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea6e:	e004      	b.n	800ea7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ea70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	429a      	cmp	r2, r3
 800ea82:	d903      	bls.n	800ea8c <pvPortMalloc+0xa4>
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d1f1      	bne.n	800ea70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea8c:	4b36      	ldr	r3, [pc, #216]	; (800eb68 <pvPortMalloc+0x180>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d050      	beq.n	800eb38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea96:	6a3b      	ldr	r3, [r7, #32]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	2208      	movs	r2, #8
 800ea9c:	4413      	add	r3, r2
 800ea9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	6a3b      	ldr	r3, [r7, #32]
 800eaa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eaa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaaa:	685a      	ldr	r2, [r3, #4]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	1ad2      	subs	r2, r2, r3
 800eab0:	2308      	movs	r3, #8
 800eab2:	005b      	lsls	r3, r3, #1
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d91f      	bls.n	800eaf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	4413      	add	r3, r2
 800eabe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	f003 0307 	and.w	r3, r3, #7
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d00a      	beq.n	800eae0 <pvPortMalloc+0xf8>
	__asm volatile
 800eaca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eace:	f383 8811 	msr	BASEPRI, r3
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	f3bf 8f4f 	dsb	sy
 800eada:	613b      	str	r3, [r7, #16]
}
 800eadc:	bf00      	nop
 800eade:	e7fe      	b.n	800eade <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	685a      	ldr	r2, [r3, #4]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	1ad2      	subs	r2, r2, r3
 800eae8:	69bb      	ldr	r3, [r7, #24]
 800eaea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eaf2:	69b8      	ldr	r0, [r7, #24]
 800eaf4:	f000 f908 	bl	800ed08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eaf8:	4b1d      	ldr	r3, [pc, #116]	; (800eb70 <pvPortMalloc+0x188>)
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafe:	685b      	ldr	r3, [r3, #4]
 800eb00:	1ad3      	subs	r3, r2, r3
 800eb02:	4a1b      	ldr	r2, [pc, #108]	; (800eb70 <pvPortMalloc+0x188>)
 800eb04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb06:	4b1a      	ldr	r3, [pc, #104]	; (800eb70 <pvPortMalloc+0x188>)
 800eb08:	681a      	ldr	r2, [r3, #0]
 800eb0a:	4b1b      	ldr	r3, [pc, #108]	; (800eb78 <pvPortMalloc+0x190>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	429a      	cmp	r2, r3
 800eb10:	d203      	bcs.n	800eb1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb12:	4b17      	ldr	r3, [pc, #92]	; (800eb70 <pvPortMalloc+0x188>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	4a18      	ldr	r2, [pc, #96]	; (800eb78 <pvPortMalloc+0x190>)
 800eb18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1c:	685a      	ldr	r2, [r3, #4]
 800eb1e:	4b13      	ldr	r3, [pc, #76]	; (800eb6c <pvPortMalloc+0x184>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	431a      	orrs	r2, r3
 800eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb2e:	4b13      	ldr	r3, [pc, #76]	; (800eb7c <pvPortMalloc+0x194>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	3301      	adds	r3, #1
 800eb34:	4a11      	ldr	r2, [pc, #68]	; (800eb7c <pvPortMalloc+0x194>)
 800eb36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb38:	f7fe f920 	bl	800cd7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	f003 0307 	and.w	r3, r3, #7
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00a      	beq.n	800eb5c <pvPortMalloc+0x174>
	__asm volatile
 800eb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4a:	f383 8811 	msr	BASEPRI, r3
 800eb4e:	f3bf 8f6f 	isb	sy
 800eb52:	f3bf 8f4f 	dsb	sy
 800eb56:	60fb      	str	r3, [r7, #12]
}
 800eb58:	bf00      	nop
 800eb5a:	e7fe      	b.n	800eb5a <pvPortMalloc+0x172>
	return pvReturn;
 800eb5c:	69fb      	ldr	r3, [r7, #28]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3728      	adds	r7, #40	; 0x28
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	20009628 	.word	0x20009628
 800eb6c:	2000963c 	.word	0x2000963c
 800eb70:	2000962c 	.word	0x2000962c
 800eb74:	20009620 	.word	0x20009620
 800eb78:	20009630 	.word	0x20009630
 800eb7c:	20009634 	.word	0x20009634

0800eb80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b086      	sub	sp, #24
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d04d      	beq.n	800ec2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb92:	2308      	movs	r3, #8
 800eb94:	425b      	negs	r3, r3
 800eb96:	697a      	ldr	r2, [r7, #20]
 800eb98:	4413      	add	r3, r2
 800eb9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	685a      	ldr	r2, [r3, #4]
 800eba4:	4b24      	ldr	r3, [pc, #144]	; (800ec38 <vPortFree+0xb8>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4013      	ands	r3, r2
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d10a      	bne.n	800ebc4 <vPortFree+0x44>
	__asm volatile
 800ebae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb2:	f383 8811 	msr	BASEPRI, r3
 800ebb6:	f3bf 8f6f 	isb	sy
 800ebba:	f3bf 8f4f 	dsb	sy
 800ebbe:	60fb      	str	r3, [r7, #12]
}
 800ebc0:	bf00      	nop
 800ebc2:	e7fe      	b.n	800ebc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ebc4:	693b      	ldr	r3, [r7, #16]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d00a      	beq.n	800ebe2 <vPortFree+0x62>
	__asm volatile
 800ebcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd0:	f383 8811 	msr	BASEPRI, r3
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	60bb      	str	r3, [r7, #8]
}
 800ebde:	bf00      	nop
 800ebe0:	e7fe      	b.n	800ebe0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	685a      	ldr	r2, [r3, #4]
 800ebe6:	4b14      	ldr	r3, [pc, #80]	; (800ec38 <vPortFree+0xb8>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	4013      	ands	r3, r2
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d01e      	beq.n	800ec2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebf0:	693b      	ldr	r3, [r7, #16]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d11a      	bne.n	800ec2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	685a      	ldr	r2, [r3, #4]
 800ebfc:	4b0e      	ldr	r3, [pc, #56]	; (800ec38 <vPortFree+0xb8>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	43db      	mvns	r3, r3
 800ec02:	401a      	ands	r2, r3
 800ec04:	693b      	ldr	r3, [r7, #16]
 800ec06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec08:	f7fe f8aa 	bl	800cd60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	685a      	ldr	r2, [r3, #4]
 800ec10:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <vPortFree+0xbc>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	4413      	add	r3, r2
 800ec16:	4a09      	ldr	r2, [pc, #36]	; (800ec3c <vPortFree+0xbc>)
 800ec18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec1a:	6938      	ldr	r0, [r7, #16]
 800ec1c:	f000 f874 	bl	800ed08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ec20:	4b07      	ldr	r3, [pc, #28]	; (800ec40 <vPortFree+0xc0>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	3301      	adds	r3, #1
 800ec26:	4a06      	ldr	r2, [pc, #24]	; (800ec40 <vPortFree+0xc0>)
 800ec28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec2a:	f7fe f8a7 	bl	800cd7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec2e:	bf00      	nop
 800ec30:	3718      	adds	r7, #24
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	2000963c 	.word	0x2000963c
 800ec3c:	2000962c 	.word	0x2000962c
 800ec40:	20009638 	.word	0x20009638

0800ec44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec44:	b480      	push	{r7}
 800ec46:	b085      	sub	sp, #20
 800ec48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec50:	4b27      	ldr	r3, [pc, #156]	; (800ecf0 <prvHeapInit+0xac>)
 800ec52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f003 0307 	and.w	r3, r3, #7
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d00c      	beq.n	800ec78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	3307      	adds	r3, #7
 800ec62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f023 0307 	bic.w	r3, r3, #7
 800ec6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec6c:	68ba      	ldr	r2, [r7, #8]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	1ad3      	subs	r3, r2, r3
 800ec72:	4a1f      	ldr	r2, [pc, #124]	; (800ecf0 <prvHeapInit+0xac>)
 800ec74:	4413      	add	r3, r2
 800ec76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec7c:	4a1d      	ldr	r2, [pc, #116]	; (800ecf4 <prvHeapInit+0xb0>)
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec82:	4b1c      	ldr	r3, [pc, #112]	; (800ecf4 <prvHeapInit+0xb0>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	68ba      	ldr	r2, [r7, #8]
 800ec8c:	4413      	add	r3, r2
 800ec8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec90:	2208      	movs	r2, #8
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	1a9b      	subs	r3, r3, r2
 800ec96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f023 0307 	bic.w	r3, r3, #7
 800ec9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4a15      	ldr	r2, [pc, #84]	; (800ecf8 <prvHeapInit+0xb4>)
 800eca4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800eca6:	4b14      	ldr	r3, [pc, #80]	; (800ecf8 <prvHeapInit+0xb4>)
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	2200      	movs	r2, #0
 800ecac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ecae:	4b12      	ldr	r3, [pc, #72]	; (800ecf8 <prvHeapInit+0xb4>)
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	1ad2      	subs	r2, r2, r3
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ecc4:	4b0c      	ldr	r3, [pc, #48]	; (800ecf8 <prvHeapInit+0xb4>)
 800ecc6:	681a      	ldr	r2, [r3, #0]
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	4a0a      	ldr	r2, [pc, #40]	; (800ecfc <prvHeapInit+0xb8>)
 800ecd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	4a09      	ldr	r2, [pc, #36]	; (800ed00 <prvHeapInit+0xbc>)
 800ecda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ecdc:	4b09      	ldr	r3, [pc, #36]	; (800ed04 <prvHeapInit+0xc0>)
 800ecde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ece2:	601a      	str	r2, [r3, #0]
}
 800ece4:	bf00      	nop
 800ece6:	3714      	adds	r7, #20
 800ece8:	46bd      	mov	sp, r7
 800ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecee:	4770      	bx	lr
 800ecf0:	20001620 	.word	0x20001620
 800ecf4:	20009620 	.word	0x20009620
 800ecf8:	20009628 	.word	0x20009628
 800ecfc:	20009630 	.word	0x20009630
 800ed00:	2000962c 	.word	0x2000962c
 800ed04:	2000963c 	.word	0x2000963c

0800ed08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed10:	4b28      	ldr	r3, [pc, #160]	; (800edb4 <prvInsertBlockIntoFreeList+0xac>)
 800ed12:	60fb      	str	r3, [r7, #12]
 800ed14:	e002      	b.n	800ed1c <prvInsertBlockIntoFreeList+0x14>
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	60fb      	str	r3, [r7, #12]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	687a      	ldr	r2, [r7, #4]
 800ed22:	429a      	cmp	r2, r3
 800ed24:	d8f7      	bhi.n	800ed16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	68ba      	ldr	r2, [r7, #8]
 800ed30:	4413      	add	r3, r2
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d108      	bne.n	800ed4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	685a      	ldr	r2, [r3, #4]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	685b      	ldr	r3, [r3, #4]
 800ed40:	441a      	add	r2, r3
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	68ba      	ldr	r2, [r7, #8]
 800ed54:	441a      	add	r2, r3
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d118      	bne.n	800ed90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	681a      	ldr	r2, [r3, #0]
 800ed62:	4b15      	ldr	r3, [pc, #84]	; (800edb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d00d      	beq.n	800ed86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	685a      	ldr	r2, [r3, #4]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	441a      	add	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	601a      	str	r2, [r3, #0]
 800ed84:	e008      	b.n	800ed98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed86:	4b0c      	ldr	r3, [pc, #48]	; (800edb8 <prvInsertBlockIntoFreeList+0xb0>)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	601a      	str	r2, [r3, #0]
 800ed8e:	e003      	b.n	800ed98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d002      	beq.n	800eda6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eda6:	bf00      	nop
 800eda8:	3714      	adds	r7, #20
 800edaa:	46bd      	mov	sp, r7
 800edac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb0:	4770      	bx	lr
 800edb2:	bf00      	nop
 800edb4:	20009620 	.word	0x20009620
 800edb8:	20009628 	.word	0x20009628

0800edbc <__cvt>:
 800edbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edc0:	ec55 4b10 	vmov	r4, r5, d0
 800edc4:	2d00      	cmp	r5, #0
 800edc6:	460e      	mov	r6, r1
 800edc8:	4619      	mov	r1, r3
 800edca:	462b      	mov	r3, r5
 800edcc:	bfbb      	ittet	lt
 800edce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800edd2:	461d      	movlt	r5, r3
 800edd4:	2300      	movge	r3, #0
 800edd6:	232d      	movlt	r3, #45	; 0x2d
 800edd8:	700b      	strb	r3, [r1, #0]
 800edda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eddc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ede0:	4691      	mov	r9, r2
 800ede2:	f023 0820 	bic.w	r8, r3, #32
 800ede6:	bfbc      	itt	lt
 800ede8:	4622      	movlt	r2, r4
 800edea:	4614      	movlt	r4, r2
 800edec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800edf0:	d005      	beq.n	800edfe <__cvt+0x42>
 800edf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800edf6:	d100      	bne.n	800edfa <__cvt+0x3e>
 800edf8:	3601      	adds	r6, #1
 800edfa:	2102      	movs	r1, #2
 800edfc:	e000      	b.n	800ee00 <__cvt+0x44>
 800edfe:	2103      	movs	r1, #3
 800ee00:	ab03      	add	r3, sp, #12
 800ee02:	9301      	str	r3, [sp, #4]
 800ee04:	ab02      	add	r3, sp, #8
 800ee06:	9300      	str	r3, [sp, #0]
 800ee08:	ec45 4b10 	vmov	d0, r4, r5
 800ee0c:	4653      	mov	r3, sl
 800ee0e:	4632      	mov	r2, r6
 800ee10:	f000 fe9a 	bl	800fb48 <_dtoa_r>
 800ee14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ee18:	4607      	mov	r7, r0
 800ee1a:	d102      	bne.n	800ee22 <__cvt+0x66>
 800ee1c:	f019 0f01 	tst.w	r9, #1
 800ee20:	d022      	beq.n	800ee68 <__cvt+0xac>
 800ee22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ee26:	eb07 0906 	add.w	r9, r7, r6
 800ee2a:	d110      	bne.n	800ee4e <__cvt+0x92>
 800ee2c:	783b      	ldrb	r3, [r7, #0]
 800ee2e:	2b30      	cmp	r3, #48	; 0x30
 800ee30:	d10a      	bne.n	800ee48 <__cvt+0x8c>
 800ee32:	2200      	movs	r2, #0
 800ee34:	2300      	movs	r3, #0
 800ee36:	4620      	mov	r0, r4
 800ee38:	4629      	mov	r1, r5
 800ee3a:	f7f1 fe65 	bl	8000b08 <__aeabi_dcmpeq>
 800ee3e:	b918      	cbnz	r0, 800ee48 <__cvt+0x8c>
 800ee40:	f1c6 0601 	rsb	r6, r6, #1
 800ee44:	f8ca 6000 	str.w	r6, [sl]
 800ee48:	f8da 3000 	ldr.w	r3, [sl]
 800ee4c:	4499      	add	r9, r3
 800ee4e:	2200      	movs	r2, #0
 800ee50:	2300      	movs	r3, #0
 800ee52:	4620      	mov	r0, r4
 800ee54:	4629      	mov	r1, r5
 800ee56:	f7f1 fe57 	bl	8000b08 <__aeabi_dcmpeq>
 800ee5a:	b108      	cbz	r0, 800ee60 <__cvt+0xa4>
 800ee5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee60:	2230      	movs	r2, #48	; 0x30
 800ee62:	9b03      	ldr	r3, [sp, #12]
 800ee64:	454b      	cmp	r3, r9
 800ee66:	d307      	bcc.n	800ee78 <__cvt+0xbc>
 800ee68:	9b03      	ldr	r3, [sp, #12]
 800ee6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee6c:	1bdb      	subs	r3, r3, r7
 800ee6e:	4638      	mov	r0, r7
 800ee70:	6013      	str	r3, [r2, #0]
 800ee72:	b004      	add	sp, #16
 800ee74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee78:	1c59      	adds	r1, r3, #1
 800ee7a:	9103      	str	r1, [sp, #12]
 800ee7c:	701a      	strb	r2, [r3, #0]
 800ee7e:	e7f0      	b.n	800ee62 <__cvt+0xa6>

0800ee80 <__exponent>:
 800ee80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee82:	4603      	mov	r3, r0
 800ee84:	2900      	cmp	r1, #0
 800ee86:	bfb8      	it	lt
 800ee88:	4249      	neglt	r1, r1
 800ee8a:	f803 2b02 	strb.w	r2, [r3], #2
 800ee8e:	bfb4      	ite	lt
 800ee90:	222d      	movlt	r2, #45	; 0x2d
 800ee92:	222b      	movge	r2, #43	; 0x2b
 800ee94:	2909      	cmp	r1, #9
 800ee96:	7042      	strb	r2, [r0, #1]
 800ee98:	dd2a      	ble.n	800eef0 <__exponent+0x70>
 800ee9a:	f10d 0207 	add.w	r2, sp, #7
 800ee9e:	4617      	mov	r7, r2
 800eea0:	260a      	movs	r6, #10
 800eea2:	4694      	mov	ip, r2
 800eea4:	fb91 f5f6 	sdiv	r5, r1, r6
 800eea8:	fb06 1415 	mls	r4, r6, r5, r1
 800eeac:	3430      	adds	r4, #48	; 0x30
 800eeae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800eeb2:	460c      	mov	r4, r1
 800eeb4:	2c63      	cmp	r4, #99	; 0x63
 800eeb6:	f102 32ff 	add.w	r2, r2, #4294967295
 800eeba:	4629      	mov	r1, r5
 800eebc:	dcf1      	bgt.n	800eea2 <__exponent+0x22>
 800eebe:	3130      	adds	r1, #48	; 0x30
 800eec0:	f1ac 0402 	sub.w	r4, ip, #2
 800eec4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eec8:	1c41      	adds	r1, r0, #1
 800eeca:	4622      	mov	r2, r4
 800eecc:	42ba      	cmp	r2, r7
 800eece:	d30a      	bcc.n	800eee6 <__exponent+0x66>
 800eed0:	f10d 0209 	add.w	r2, sp, #9
 800eed4:	eba2 020c 	sub.w	r2, r2, ip
 800eed8:	42bc      	cmp	r4, r7
 800eeda:	bf88      	it	hi
 800eedc:	2200      	movhi	r2, #0
 800eede:	4413      	add	r3, r2
 800eee0:	1a18      	subs	r0, r3, r0
 800eee2:	b003      	add	sp, #12
 800eee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eee6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800eeea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800eeee:	e7ed      	b.n	800eecc <__exponent+0x4c>
 800eef0:	2330      	movs	r3, #48	; 0x30
 800eef2:	3130      	adds	r1, #48	; 0x30
 800eef4:	7083      	strb	r3, [r0, #2]
 800eef6:	70c1      	strb	r1, [r0, #3]
 800eef8:	1d03      	adds	r3, r0, #4
 800eefa:	e7f1      	b.n	800eee0 <__exponent+0x60>

0800eefc <_printf_float>:
 800eefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef00:	ed2d 8b02 	vpush	{d8}
 800ef04:	b08d      	sub	sp, #52	; 0x34
 800ef06:	460c      	mov	r4, r1
 800ef08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ef0c:	4616      	mov	r6, r2
 800ef0e:	461f      	mov	r7, r3
 800ef10:	4605      	mov	r5, r0
 800ef12:	f000 fcb5 	bl	800f880 <_localeconv_r>
 800ef16:	f8d0 a000 	ldr.w	sl, [r0]
 800ef1a:	4650      	mov	r0, sl
 800ef1c:	f7f1 f9c8 	bl	80002b0 <strlen>
 800ef20:	2300      	movs	r3, #0
 800ef22:	930a      	str	r3, [sp, #40]	; 0x28
 800ef24:	6823      	ldr	r3, [r4, #0]
 800ef26:	9305      	str	r3, [sp, #20]
 800ef28:	f8d8 3000 	ldr.w	r3, [r8]
 800ef2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ef30:	3307      	adds	r3, #7
 800ef32:	f023 0307 	bic.w	r3, r3, #7
 800ef36:	f103 0208 	add.w	r2, r3, #8
 800ef3a:	f8c8 2000 	str.w	r2, [r8]
 800ef3e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ef42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef46:	9307      	str	r3, [sp, #28]
 800ef48:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef4c:	ee08 0a10 	vmov	s16, r0
 800ef50:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800ef54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef58:	4b9e      	ldr	r3, [pc, #632]	; (800f1d4 <_printf_float+0x2d8>)
 800ef5a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef5e:	f7f1 fe05 	bl	8000b6c <__aeabi_dcmpun>
 800ef62:	bb88      	cbnz	r0, 800efc8 <_printf_float+0xcc>
 800ef64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef68:	4b9a      	ldr	r3, [pc, #616]	; (800f1d4 <_printf_float+0x2d8>)
 800ef6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef6e:	f7f1 fddf 	bl	8000b30 <__aeabi_dcmple>
 800ef72:	bb48      	cbnz	r0, 800efc8 <_printf_float+0xcc>
 800ef74:	2200      	movs	r2, #0
 800ef76:	2300      	movs	r3, #0
 800ef78:	4640      	mov	r0, r8
 800ef7a:	4649      	mov	r1, r9
 800ef7c:	f7f1 fdce 	bl	8000b1c <__aeabi_dcmplt>
 800ef80:	b110      	cbz	r0, 800ef88 <_printf_float+0x8c>
 800ef82:	232d      	movs	r3, #45	; 0x2d
 800ef84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef88:	4a93      	ldr	r2, [pc, #588]	; (800f1d8 <_printf_float+0x2dc>)
 800ef8a:	4b94      	ldr	r3, [pc, #592]	; (800f1dc <_printf_float+0x2e0>)
 800ef8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef90:	bf94      	ite	ls
 800ef92:	4690      	movls	r8, r2
 800ef94:	4698      	movhi	r8, r3
 800ef96:	2303      	movs	r3, #3
 800ef98:	6123      	str	r3, [r4, #16]
 800ef9a:	9b05      	ldr	r3, [sp, #20]
 800ef9c:	f023 0304 	bic.w	r3, r3, #4
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	f04f 0900 	mov.w	r9, #0
 800efa6:	9700      	str	r7, [sp, #0]
 800efa8:	4633      	mov	r3, r6
 800efaa:	aa0b      	add	r2, sp, #44	; 0x2c
 800efac:	4621      	mov	r1, r4
 800efae:	4628      	mov	r0, r5
 800efb0:	f000 f9da 	bl	800f368 <_printf_common>
 800efb4:	3001      	adds	r0, #1
 800efb6:	f040 8090 	bne.w	800f0da <_printf_float+0x1de>
 800efba:	f04f 30ff 	mov.w	r0, #4294967295
 800efbe:	b00d      	add	sp, #52	; 0x34
 800efc0:	ecbd 8b02 	vpop	{d8}
 800efc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc8:	4642      	mov	r2, r8
 800efca:	464b      	mov	r3, r9
 800efcc:	4640      	mov	r0, r8
 800efce:	4649      	mov	r1, r9
 800efd0:	f7f1 fdcc 	bl	8000b6c <__aeabi_dcmpun>
 800efd4:	b140      	cbz	r0, 800efe8 <_printf_float+0xec>
 800efd6:	464b      	mov	r3, r9
 800efd8:	2b00      	cmp	r3, #0
 800efda:	bfbc      	itt	lt
 800efdc:	232d      	movlt	r3, #45	; 0x2d
 800efde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800efe2:	4a7f      	ldr	r2, [pc, #508]	; (800f1e0 <_printf_float+0x2e4>)
 800efe4:	4b7f      	ldr	r3, [pc, #508]	; (800f1e4 <_printf_float+0x2e8>)
 800efe6:	e7d1      	b.n	800ef8c <_printf_float+0x90>
 800efe8:	6863      	ldr	r3, [r4, #4]
 800efea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800efee:	9206      	str	r2, [sp, #24]
 800eff0:	1c5a      	adds	r2, r3, #1
 800eff2:	d13f      	bne.n	800f074 <_printf_float+0x178>
 800eff4:	2306      	movs	r3, #6
 800eff6:	6063      	str	r3, [r4, #4]
 800eff8:	9b05      	ldr	r3, [sp, #20]
 800effa:	6861      	ldr	r1, [r4, #4]
 800effc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f000:	2300      	movs	r3, #0
 800f002:	9303      	str	r3, [sp, #12]
 800f004:	ab0a      	add	r3, sp, #40	; 0x28
 800f006:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f00a:	ab09      	add	r3, sp, #36	; 0x24
 800f00c:	ec49 8b10 	vmov	d0, r8, r9
 800f010:	9300      	str	r3, [sp, #0]
 800f012:	6022      	str	r2, [r4, #0]
 800f014:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f018:	4628      	mov	r0, r5
 800f01a:	f7ff fecf 	bl	800edbc <__cvt>
 800f01e:	9b06      	ldr	r3, [sp, #24]
 800f020:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f022:	2b47      	cmp	r3, #71	; 0x47
 800f024:	4680      	mov	r8, r0
 800f026:	d108      	bne.n	800f03a <_printf_float+0x13e>
 800f028:	1cc8      	adds	r0, r1, #3
 800f02a:	db02      	blt.n	800f032 <_printf_float+0x136>
 800f02c:	6863      	ldr	r3, [r4, #4]
 800f02e:	4299      	cmp	r1, r3
 800f030:	dd41      	ble.n	800f0b6 <_printf_float+0x1ba>
 800f032:	f1ab 0302 	sub.w	r3, fp, #2
 800f036:	fa5f fb83 	uxtb.w	fp, r3
 800f03a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f03e:	d820      	bhi.n	800f082 <_printf_float+0x186>
 800f040:	3901      	subs	r1, #1
 800f042:	465a      	mov	r2, fp
 800f044:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f048:	9109      	str	r1, [sp, #36]	; 0x24
 800f04a:	f7ff ff19 	bl	800ee80 <__exponent>
 800f04e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f050:	1813      	adds	r3, r2, r0
 800f052:	2a01      	cmp	r2, #1
 800f054:	4681      	mov	r9, r0
 800f056:	6123      	str	r3, [r4, #16]
 800f058:	dc02      	bgt.n	800f060 <_printf_float+0x164>
 800f05a:	6822      	ldr	r2, [r4, #0]
 800f05c:	07d2      	lsls	r2, r2, #31
 800f05e:	d501      	bpl.n	800f064 <_printf_float+0x168>
 800f060:	3301      	adds	r3, #1
 800f062:	6123      	str	r3, [r4, #16]
 800f064:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d09c      	beq.n	800efa6 <_printf_float+0xaa>
 800f06c:	232d      	movs	r3, #45	; 0x2d
 800f06e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f072:	e798      	b.n	800efa6 <_printf_float+0xaa>
 800f074:	9a06      	ldr	r2, [sp, #24]
 800f076:	2a47      	cmp	r2, #71	; 0x47
 800f078:	d1be      	bne.n	800eff8 <_printf_float+0xfc>
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d1bc      	bne.n	800eff8 <_printf_float+0xfc>
 800f07e:	2301      	movs	r3, #1
 800f080:	e7b9      	b.n	800eff6 <_printf_float+0xfa>
 800f082:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f086:	d118      	bne.n	800f0ba <_printf_float+0x1be>
 800f088:	2900      	cmp	r1, #0
 800f08a:	6863      	ldr	r3, [r4, #4]
 800f08c:	dd0b      	ble.n	800f0a6 <_printf_float+0x1aa>
 800f08e:	6121      	str	r1, [r4, #16]
 800f090:	b913      	cbnz	r3, 800f098 <_printf_float+0x19c>
 800f092:	6822      	ldr	r2, [r4, #0]
 800f094:	07d0      	lsls	r0, r2, #31
 800f096:	d502      	bpl.n	800f09e <_printf_float+0x1a2>
 800f098:	3301      	adds	r3, #1
 800f09a:	440b      	add	r3, r1
 800f09c:	6123      	str	r3, [r4, #16]
 800f09e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f0a0:	f04f 0900 	mov.w	r9, #0
 800f0a4:	e7de      	b.n	800f064 <_printf_float+0x168>
 800f0a6:	b913      	cbnz	r3, 800f0ae <_printf_float+0x1b2>
 800f0a8:	6822      	ldr	r2, [r4, #0]
 800f0aa:	07d2      	lsls	r2, r2, #31
 800f0ac:	d501      	bpl.n	800f0b2 <_printf_float+0x1b6>
 800f0ae:	3302      	adds	r3, #2
 800f0b0:	e7f4      	b.n	800f09c <_printf_float+0x1a0>
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e7f2      	b.n	800f09c <_printf_float+0x1a0>
 800f0b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0bc:	4299      	cmp	r1, r3
 800f0be:	db05      	blt.n	800f0cc <_printf_float+0x1d0>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	6121      	str	r1, [r4, #16]
 800f0c4:	07d8      	lsls	r0, r3, #31
 800f0c6:	d5ea      	bpl.n	800f09e <_printf_float+0x1a2>
 800f0c8:	1c4b      	adds	r3, r1, #1
 800f0ca:	e7e7      	b.n	800f09c <_printf_float+0x1a0>
 800f0cc:	2900      	cmp	r1, #0
 800f0ce:	bfd4      	ite	le
 800f0d0:	f1c1 0202 	rsble	r2, r1, #2
 800f0d4:	2201      	movgt	r2, #1
 800f0d6:	4413      	add	r3, r2
 800f0d8:	e7e0      	b.n	800f09c <_printf_float+0x1a0>
 800f0da:	6823      	ldr	r3, [r4, #0]
 800f0dc:	055a      	lsls	r2, r3, #21
 800f0de:	d407      	bmi.n	800f0f0 <_printf_float+0x1f4>
 800f0e0:	6923      	ldr	r3, [r4, #16]
 800f0e2:	4642      	mov	r2, r8
 800f0e4:	4631      	mov	r1, r6
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	47b8      	blx	r7
 800f0ea:	3001      	adds	r0, #1
 800f0ec:	d12c      	bne.n	800f148 <_printf_float+0x24c>
 800f0ee:	e764      	b.n	800efba <_printf_float+0xbe>
 800f0f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f0f4:	f240 80e0 	bls.w	800f2b8 <_printf_float+0x3bc>
 800f0f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	2300      	movs	r3, #0
 800f100:	f7f1 fd02 	bl	8000b08 <__aeabi_dcmpeq>
 800f104:	2800      	cmp	r0, #0
 800f106:	d034      	beq.n	800f172 <_printf_float+0x276>
 800f108:	4a37      	ldr	r2, [pc, #220]	; (800f1e8 <_printf_float+0x2ec>)
 800f10a:	2301      	movs	r3, #1
 800f10c:	4631      	mov	r1, r6
 800f10e:	4628      	mov	r0, r5
 800f110:	47b8      	blx	r7
 800f112:	3001      	adds	r0, #1
 800f114:	f43f af51 	beq.w	800efba <_printf_float+0xbe>
 800f118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f11c:	429a      	cmp	r2, r3
 800f11e:	db02      	blt.n	800f126 <_printf_float+0x22a>
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	07d8      	lsls	r0, r3, #31
 800f124:	d510      	bpl.n	800f148 <_printf_float+0x24c>
 800f126:	ee18 3a10 	vmov	r3, s16
 800f12a:	4652      	mov	r2, sl
 800f12c:	4631      	mov	r1, r6
 800f12e:	4628      	mov	r0, r5
 800f130:	47b8      	blx	r7
 800f132:	3001      	adds	r0, #1
 800f134:	f43f af41 	beq.w	800efba <_printf_float+0xbe>
 800f138:	f04f 0800 	mov.w	r8, #0
 800f13c:	f104 091a 	add.w	r9, r4, #26
 800f140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f142:	3b01      	subs	r3, #1
 800f144:	4543      	cmp	r3, r8
 800f146:	dc09      	bgt.n	800f15c <_printf_float+0x260>
 800f148:	6823      	ldr	r3, [r4, #0]
 800f14a:	079b      	lsls	r3, r3, #30
 800f14c:	f100 8107 	bmi.w	800f35e <_printf_float+0x462>
 800f150:	68e0      	ldr	r0, [r4, #12]
 800f152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f154:	4298      	cmp	r0, r3
 800f156:	bfb8      	it	lt
 800f158:	4618      	movlt	r0, r3
 800f15a:	e730      	b.n	800efbe <_printf_float+0xc2>
 800f15c:	2301      	movs	r3, #1
 800f15e:	464a      	mov	r2, r9
 800f160:	4631      	mov	r1, r6
 800f162:	4628      	mov	r0, r5
 800f164:	47b8      	blx	r7
 800f166:	3001      	adds	r0, #1
 800f168:	f43f af27 	beq.w	800efba <_printf_float+0xbe>
 800f16c:	f108 0801 	add.w	r8, r8, #1
 800f170:	e7e6      	b.n	800f140 <_printf_float+0x244>
 800f172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f174:	2b00      	cmp	r3, #0
 800f176:	dc39      	bgt.n	800f1ec <_printf_float+0x2f0>
 800f178:	4a1b      	ldr	r2, [pc, #108]	; (800f1e8 <_printf_float+0x2ec>)
 800f17a:	2301      	movs	r3, #1
 800f17c:	4631      	mov	r1, r6
 800f17e:	4628      	mov	r0, r5
 800f180:	47b8      	blx	r7
 800f182:	3001      	adds	r0, #1
 800f184:	f43f af19 	beq.w	800efba <_printf_float+0xbe>
 800f188:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f18c:	4313      	orrs	r3, r2
 800f18e:	d102      	bne.n	800f196 <_printf_float+0x29a>
 800f190:	6823      	ldr	r3, [r4, #0]
 800f192:	07d9      	lsls	r1, r3, #31
 800f194:	d5d8      	bpl.n	800f148 <_printf_float+0x24c>
 800f196:	ee18 3a10 	vmov	r3, s16
 800f19a:	4652      	mov	r2, sl
 800f19c:	4631      	mov	r1, r6
 800f19e:	4628      	mov	r0, r5
 800f1a0:	47b8      	blx	r7
 800f1a2:	3001      	adds	r0, #1
 800f1a4:	f43f af09 	beq.w	800efba <_printf_float+0xbe>
 800f1a8:	f04f 0900 	mov.w	r9, #0
 800f1ac:	f104 0a1a 	add.w	sl, r4, #26
 800f1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1b2:	425b      	negs	r3, r3
 800f1b4:	454b      	cmp	r3, r9
 800f1b6:	dc01      	bgt.n	800f1bc <_printf_float+0x2c0>
 800f1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ba:	e792      	b.n	800f0e2 <_printf_float+0x1e6>
 800f1bc:	2301      	movs	r3, #1
 800f1be:	4652      	mov	r2, sl
 800f1c0:	4631      	mov	r1, r6
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	47b8      	blx	r7
 800f1c6:	3001      	adds	r0, #1
 800f1c8:	f43f aef7 	beq.w	800efba <_printf_float+0xbe>
 800f1cc:	f109 0901 	add.w	r9, r9, #1
 800f1d0:	e7ee      	b.n	800f1b0 <_printf_float+0x2b4>
 800f1d2:	bf00      	nop
 800f1d4:	7fefffff 	.word	0x7fefffff
 800f1d8:	08011f80 	.word	0x08011f80
 800f1dc:	08011f84 	.word	0x08011f84
 800f1e0:	08011f88 	.word	0x08011f88
 800f1e4:	08011f8c 	.word	0x08011f8c
 800f1e8:	08011f90 	.word	0x08011f90
 800f1ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	bfa8      	it	ge
 800f1f4:	461a      	movge	r2, r3
 800f1f6:	2a00      	cmp	r2, #0
 800f1f8:	4691      	mov	r9, r2
 800f1fa:	dc37      	bgt.n	800f26c <_printf_float+0x370>
 800f1fc:	f04f 0b00 	mov.w	fp, #0
 800f200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f204:	f104 021a 	add.w	r2, r4, #26
 800f208:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f20a:	9305      	str	r3, [sp, #20]
 800f20c:	eba3 0309 	sub.w	r3, r3, r9
 800f210:	455b      	cmp	r3, fp
 800f212:	dc33      	bgt.n	800f27c <_printf_float+0x380>
 800f214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f218:	429a      	cmp	r2, r3
 800f21a:	db3b      	blt.n	800f294 <_printf_float+0x398>
 800f21c:	6823      	ldr	r3, [r4, #0]
 800f21e:	07da      	lsls	r2, r3, #31
 800f220:	d438      	bmi.n	800f294 <_printf_float+0x398>
 800f222:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f226:	eba2 0903 	sub.w	r9, r2, r3
 800f22a:	9b05      	ldr	r3, [sp, #20]
 800f22c:	1ad2      	subs	r2, r2, r3
 800f22e:	4591      	cmp	r9, r2
 800f230:	bfa8      	it	ge
 800f232:	4691      	movge	r9, r2
 800f234:	f1b9 0f00 	cmp.w	r9, #0
 800f238:	dc35      	bgt.n	800f2a6 <_printf_float+0x3aa>
 800f23a:	f04f 0800 	mov.w	r8, #0
 800f23e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f242:	f104 0a1a 	add.w	sl, r4, #26
 800f246:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f24a:	1a9b      	subs	r3, r3, r2
 800f24c:	eba3 0309 	sub.w	r3, r3, r9
 800f250:	4543      	cmp	r3, r8
 800f252:	f77f af79 	ble.w	800f148 <_printf_float+0x24c>
 800f256:	2301      	movs	r3, #1
 800f258:	4652      	mov	r2, sl
 800f25a:	4631      	mov	r1, r6
 800f25c:	4628      	mov	r0, r5
 800f25e:	47b8      	blx	r7
 800f260:	3001      	adds	r0, #1
 800f262:	f43f aeaa 	beq.w	800efba <_printf_float+0xbe>
 800f266:	f108 0801 	add.w	r8, r8, #1
 800f26a:	e7ec      	b.n	800f246 <_printf_float+0x34a>
 800f26c:	4613      	mov	r3, r2
 800f26e:	4631      	mov	r1, r6
 800f270:	4642      	mov	r2, r8
 800f272:	4628      	mov	r0, r5
 800f274:	47b8      	blx	r7
 800f276:	3001      	adds	r0, #1
 800f278:	d1c0      	bne.n	800f1fc <_printf_float+0x300>
 800f27a:	e69e      	b.n	800efba <_printf_float+0xbe>
 800f27c:	2301      	movs	r3, #1
 800f27e:	4631      	mov	r1, r6
 800f280:	4628      	mov	r0, r5
 800f282:	9205      	str	r2, [sp, #20]
 800f284:	47b8      	blx	r7
 800f286:	3001      	adds	r0, #1
 800f288:	f43f ae97 	beq.w	800efba <_printf_float+0xbe>
 800f28c:	9a05      	ldr	r2, [sp, #20]
 800f28e:	f10b 0b01 	add.w	fp, fp, #1
 800f292:	e7b9      	b.n	800f208 <_printf_float+0x30c>
 800f294:	ee18 3a10 	vmov	r3, s16
 800f298:	4652      	mov	r2, sl
 800f29a:	4631      	mov	r1, r6
 800f29c:	4628      	mov	r0, r5
 800f29e:	47b8      	blx	r7
 800f2a0:	3001      	adds	r0, #1
 800f2a2:	d1be      	bne.n	800f222 <_printf_float+0x326>
 800f2a4:	e689      	b.n	800efba <_printf_float+0xbe>
 800f2a6:	9a05      	ldr	r2, [sp, #20]
 800f2a8:	464b      	mov	r3, r9
 800f2aa:	4442      	add	r2, r8
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4628      	mov	r0, r5
 800f2b0:	47b8      	blx	r7
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	d1c1      	bne.n	800f23a <_printf_float+0x33e>
 800f2b6:	e680      	b.n	800efba <_printf_float+0xbe>
 800f2b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f2ba:	2a01      	cmp	r2, #1
 800f2bc:	dc01      	bgt.n	800f2c2 <_printf_float+0x3c6>
 800f2be:	07db      	lsls	r3, r3, #31
 800f2c0:	d53a      	bpl.n	800f338 <_printf_float+0x43c>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	4642      	mov	r2, r8
 800f2c6:	4631      	mov	r1, r6
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	47b8      	blx	r7
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	f43f ae74 	beq.w	800efba <_printf_float+0xbe>
 800f2d2:	ee18 3a10 	vmov	r3, s16
 800f2d6:	4652      	mov	r2, sl
 800f2d8:	4631      	mov	r1, r6
 800f2da:	4628      	mov	r0, r5
 800f2dc:	47b8      	blx	r7
 800f2de:	3001      	adds	r0, #1
 800f2e0:	f43f ae6b 	beq.w	800efba <_printf_float+0xbe>
 800f2e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f2f0:	f7f1 fc0a 	bl	8000b08 <__aeabi_dcmpeq>
 800f2f4:	b9d8      	cbnz	r0, 800f32e <_printf_float+0x432>
 800f2f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f2fa:	f108 0201 	add.w	r2, r8, #1
 800f2fe:	4631      	mov	r1, r6
 800f300:	4628      	mov	r0, r5
 800f302:	47b8      	blx	r7
 800f304:	3001      	adds	r0, #1
 800f306:	d10e      	bne.n	800f326 <_printf_float+0x42a>
 800f308:	e657      	b.n	800efba <_printf_float+0xbe>
 800f30a:	2301      	movs	r3, #1
 800f30c:	4652      	mov	r2, sl
 800f30e:	4631      	mov	r1, r6
 800f310:	4628      	mov	r0, r5
 800f312:	47b8      	blx	r7
 800f314:	3001      	adds	r0, #1
 800f316:	f43f ae50 	beq.w	800efba <_printf_float+0xbe>
 800f31a:	f108 0801 	add.w	r8, r8, #1
 800f31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f320:	3b01      	subs	r3, #1
 800f322:	4543      	cmp	r3, r8
 800f324:	dcf1      	bgt.n	800f30a <_printf_float+0x40e>
 800f326:	464b      	mov	r3, r9
 800f328:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f32c:	e6da      	b.n	800f0e4 <_printf_float+0x1e8>
 800f32e:	f04f 0800 	mov.w	r8, #0
 800f332:	f104 0a1a 	add.w	sl, r4, #26
 800f336:	e7f2      	b.n	800f31e <_printf_float+0x422>
 800f338:	2301      	movs	r3, #1
 800f33a:	4642      	mov	r2, r8
 800f33c:	e7df      	b.n	800f2fe <_printf_float+0x402>
 800f33e:	2301      	movs	r3, #1
 800f340:	464a      	mov	r2, r9
 800f342:	4631      	mov	r1, r6
 800f344:	4628      	mov	r0, r5
 800f346:	47b8      	blx	r7
 800f348:	3001      	adds	r0, #1
 800f34a:	f43f ae36 	beq.w	800efba <_printf_float+0xbe>
 800f34e:	f108 0801 	add.w	r8, r8, #1
 800f352:	68e3      	ldr	r3, [r4, #12]
 800f354:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f356:	1a5b      	subs	r3, r3, r1
 800f358:	4543      	cmp	r3, r8
 800f35a:	dcf0      	bgt.n	800f33e <_printf_float+0x442>
 800f35c:	e6f8      	b.n	800f150 <_printf_float+0x254>
 800f35e:	f04f 0800 	mov.w	r8, #0
 800f362:	f104 0919 	add.w	r9, r4, #25
 800f366:	e7f4      	b.n	800f352 <_printf_float+0x456>

0800f368 <_printf_common>:
 800f368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f36c:	4616      	mov	r6, r2
 800f36e:	4699      	mov	r9, r3
 800f370:	688a      	ldr	r2, [r1, #8]
 800f372:	690b      	ldr	r3, [r1, #16]
 800f374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f378:	4293      	cmp	r3, r2
 800f37a:	bfb8      	it	lt
 800f37c:	4613      	movlt	r3, r2
 800f37e:	6033      	str	r3, [r6, #0]
 800f380:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f384:	4607      	mov	r7, r0
 800f386:	460c      	mov	r4, r1
 800f388:	b10a      	cbz	r2, 800f38e <_printf_common+0x26>
 800f38a:	3301      	adds	r3, #1
 800f38c:	6033      	str	r3, [r6, #0]
 800f38e:	6823      	ldr	r3, [r4, #0]
 800f390:	0699      	lsls	r1, r3, #26
 800f392:	bf42      	ittt	mi
 800f394:	6833      	ldrmi	r3, [r6, #0]
 800f396:	3302      	addmi	r3, #2
 800f398:	6033      	strmi	r3, [r6, #0]
 800f39a:	6825      	ldr	r5, [r4, #0]
 800f39c:	f015 0506 	ands.w	r5, r5, #6
 800f3a0:	d106      	bne.n	800f3b0 <_printf_common+0x48>
 800f3a2:	f104 0a19 	add.w	sl, r4, #25
 800f3a6:	68e3      	ldr	r3, [r4, #12]
 800f3a8:	6832      	ldr	r2, [r6, #0]
 800f3aa:	1a9b      	subs	r3, r3, r2
 800f3ac:	42ab      	cmp	r3, r5
 800f3ae:	dc26      	bgt.n	800f3fe <_printf_common+0x96>
 800f3b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f3b4:	1e13      	subs	r3, r2, #0
 800f3b6:	6822      	ldr	r2, [r4, #0]
 800f3b8:	bf18      	it	ne
 800f3ba:	2301      	movne	r3, #1
 800f3bc:	0692      	lsls	r2, r2, #26
 800f3be:	d42b      	bmi.n	800f418 <_printf_common+0xb0>
 800f3c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3c4:	4649      	mov	r1, r9
 800f3c6:	4638      	mov	r0, r7
 800f3c8:	47c0      	blx	r8
 800f3ca:	3001      	adds	r0, #1
 800f3cc:	d01e      	beq.n	800f40c <_printf_common+0xa4>
 800f3ce:	6823      	ldr	r3, [r4, #0]
 800f3d0:	6922      	ldr	r2, [r4, #16]
 800f3d2:	f003 0306 	and.w	r3, r3, #6
 800f3d6:	2b04      	cmp	r3, #4
 800f3d8:	bf02      	ittt	eq
 800f3da:	68e5      	ldreq	r5, [r4, #12]
 800f3dc:	6833      	ldreq	r3, [r6, #0]
 800f3de:	1aed      	subeq	r5, r5, r3
 800f3e0:	68a3      	ldr	r3, [r4, #8]
 800f3e2:	bf0c      	ite	eq
 800f3e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3e8:	2500      	movne	r5, #0
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	bfc4      	itt	gt
 800f3ee:	1a9b      	subgt	r3, r3, r2
 800f3f0:	18ed      	addgt	r5, r5, r3
 800f3f2:	2600      	movs	r6, #0
 800f3f4:	341a      	adds	r4, #26
 800f3f6:	42b5      	cmp	r5, r6
 800f3f8:	d11a      	bne.n	800f430 <_printf_common+0xc8>
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	e008      	b.n	800f410 <_printf_common+0xa8>
 800f3fe:	2301      	movs	r3, #1
 800f400:	4652      	mov	r2, sl
 800f402:	4649      	mov	r1, r9
 800f404:	4638      	mov	r0, r7
 800f406:	47c0      	blx	r8
 800f408:	3001      	adds	r0, #1
 800f40a:	d103      	bne.n	800f414 <_printf_common+0xac>
 800f40c:	f04f 30ff 	mov.w	r0, #4294967295
 800f410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f414:	3501      	adds	r5, #1
 800f416:	e7c6      	b.n	800f3a6 <_printf_common+0x3e>
 800f418:	18e1      	adds	r1, r4, r3
 800f41a:	1c5a      	adds	r2, r3, #1
 800f41c:	2030      	movs	r0, #48	; 0x30
 800f41e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f422:	4422      	add	r2, r4
 800f424:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f428:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f42c:	3302      	adds	r3, #2
 800f42e:	e7c7      	b.n	800f3c0 <_printf_common+0x58>
 800f430:	2301      	movs	r3, #1
 800f432:	4622      	mov	r2, r4
 800f434:	4649      	mov	r1, r9
 800f436:	4638      	mov	r0, r7
 800f438:	47c0      	blx	r8
 800f43a:	3001      	adds	r0, #1
 800f43c:	d0e6      	beq.n	800f40c <_printf_common+0xa4>
 800f43e:	3601      	adds	r6, #1
 800f440:	e7d9      	b.n	800f3f6 <_printf_common+0x8e>
	...

0800f444 <_printf_i>:
 800f444:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f448:	7e0f      	ldrb	r7, [r1, #24]
 800f44a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f44c:	2f78      	cmp	r7, #120	; 0x78
 800f44e:	4691      	mov	r9, r2
 800f450:	4680      	mov	r8, r0
 800f452:	460c      	mov	r4, r1
 800f454:	469a      	mov	sl, r3
 800f456:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f45a:	d807      	bhi.n	800f46c <_printf_i+0x28>
 800f45c:	2f62      	cmp	r7, #98	; 0x62
 800f45e:	d80a      	bhi.n	800f476 <_printf_i+0x32>
 800f460:	2f00      	cmp	r7, #0
 800f462:	f000 80d4 	beq.w	800f60e <_printf_i+0x1ca>
 800f466:	2f58      	cmp	r7, #88	; 0x58
 800f468:	f000 80c0 	beq.w	800f5ec <_printf_i+0x1a8>
 800f46c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f470:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f474:	e03a      	b.n	800f4ec <_printf_i+0xa8>
 800f476:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f47a:	2b15      	cmp	r3, #21
 800f47c:	d8f6      	bhi.n	800f46c <_printf_i+0x28>
 800f47e:	a101      	add	r1, pc, #4	; (adr r1, 800f484 <_printf_i+0x40>)
 800f480:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f484:	0800f4dd 	.word	0x0800f4dd
 800f488:	0800f4f1 	.word	0x0800f4f1
 800f48c:	0800f46d 	.word	0x0800f46d
 800f490:	0800f46d 	.word	0x0800f46d
 800f494:	0800f46d 	.word	0x0800f46d
 800f498:	0800f46d 	.word	0x0800f46d
 800f49c:	0800f4f1 	.word	0x0800f4f1
 800f4a0:	0800f46d 	.word	0x0800f46d
 800f4a4:	0800f46d 	.word	0x0800f46d
 800f4a8:	0800f46d 	.word	0x0800f46d
 800f4ac:	0800f46d 	.word	0x0800f46d
 800f4b0:	0800f5f5 	.word	0x0800f5f5
 800f4b4:	0800f51d 	.word	0x0800f51d
 800f4b8:	0800f5af 	.word	0x0800f5af
 800f4bc:	0800f46d 	.word	0x0800f46d
 800f4c0:	0800f46d 	.word	0x0800f46d
 800f4c4:	0800f617 	.word	0x0800f617
 800f4c8:	0800f46d 	.word	0x0800f46d
 800f4cc:	0800f51d 	.word	0x0800f51d
 800f4d0:	0800f46d 	.word	0x0800f46d
 800f4d4:	0800f46d 	.word	0x0800f46d
 800f4d8:	0800f5b7 	.word	0x0800f5b7
 800f4dc:	682b      	ldr	r3, [r5, #0]
 800f4de:	1d1a      	adds	r2, r3, #4
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	602a      	str	r2, [r5, #0]
 800f4e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	e09f      	b.n	800f630 <_printf_i+0x1ec>
 800f4f0:	6820      	ldr	r0, [r4, #0]
 800f4f2:	682b      	ldr	r3, [r5, #0]
 800f4f4:	0607      	lsls	r7, r0, #24
 800f4f6:	f103 0104 	add.w	r1, r3, #4
 800f4fa:	6029      	str	r1, [r5, #0]
 800f4fc:	d501      	bpl.n	800f502 <_printf_i+0xbe>
 800f4fe:	681e      	ldr	r6, [r3, #0]
 800f500:	e003      	b.n	800f50a <_printf_i+0xc6>
 800f502:	0646      	lsls	r6, r0, #25
 800f504:	d5fb      	bpl.n	800f4fe <_printf_i+0xba>
 800f506:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f50a:	2e00      	cmp	r6, #0
 800f50c:	da03      	bge.n	800f516 <_printf_i+0xd2>
 800f50e:	232d      	movs	r3, #45	; 0x2d
 800f510:	4276      	negs	r6, r6
 800f512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f516:	485a      	ldr	r0, [pc, #360]	; (800f680 <_printf_i+0x23c>)
 800f518:	230a      	movs	r3, #10
 800f51a:	e012      	b.n	800f542 <_printf_i+0xfe>
 800f51c:	682b      	ldr	r3, [r5, #0]
 800f51e:	6820      	ldr	r0, [r4, #0]
 800f520:	1d19      	adds	r1, r3, #4
 800f522:	6029      	str	r1, [r5, #0]
 800f524:	0605      	lsls	r5, r0, #24
 800f526:	d501      	bpl.n	800f52c <_printf_i+0xe8>
 800f528:	681e      	ldr	r6, [r3, #0]
 800f52a:	e002      	b.n	800f532 <_printf_i+0xee>
 800f52c:	0641      	lsls	r1, r0, #25
 800f52e:	d5fb      	bpl.n	800f528 <_printf_i+0xe4>
 800f530:	881e      	ldrh	r6, [r3, #0]
 800f532:	4853      	ldr	r0, [pc, #332]	; (800f680 <_printf_i+0x23c>)
 800f534:	2f6f      	cmp	r7, #111	; 0x6f
 800f536:	bf0c      	ite	eq
 800f538:	2308      	moveq	r3, #8
 800f53a:	230a      	movne	r3, #10
 800f53c:	2100      	movs	r1, #0
 800f53e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f542:	6865      	ldr	r5, [r4, #4]
 800f544:	60a5      	str	r5, [r4, #8]
 800f546:	2d00      	cmp	r5, #0
 800f548:	bfa2      	ittt	ge
 800f54a:	6821      	ldrge	r1, [r4, #0]
 800f54c:	f021 0104 	bicge.w	r1, r1, #4
 800f550:	6021      	strge	r1, [r4, #0]
 800f552:	b90e      	cbnz	r6, 800f558 <_printf_i+0x114>
 800f554:	2d00      	cmp	r5, #0
 800f556:	d04b      	beq.n	800f5f0 <_printf_i+0x1ac>
 800f558:	4615      	mov	r5, r2
 800f55a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f55e:	fb03 6711 	mls	r7, r3, r1, r6
 800f562:	5dc7      	ldrb	r7, [r0, r7]
 800f564:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f568:	4637      	mov	r7, r6
 800f56a:	42bb      	cmp	r3, r7
 800f56c:	460e      	mov	r6, r1
 800f56e:	d9f4      	bls.n	800f55a <_printf_i+0x116>
 800f570:	2b08      	cmp	r3, #8
 800f572:	d10b      	bne.n	800f58c <_printf_i+0x148>
 800f574:	6823      	ldr	r3, [r4, #0]
 800f576:	07de      	lsls	r6, r3, #31
 800f578:	d508      	bpl.n	800f58c <_printf_i+0x148>
 800f57a:	6923      	ldr	r3, [r4, #16]
 800f57c:	6861      	ldr	r1, [r4, #4]
 800f57e:	4299      	cmp	r1, r3
 800f580:	bfde      	ittt	le
 800f582:	2330      	movle	r3, #48	; 0x30
 800f584:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f588:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f58c:	1b52      	subs	r2, r2, r5
 800f58e:	6122      	str	r2, [r4, #16]
 800f590:	f8cd a000 	str.w	sl, [sp]
 800f594:	464b      	mov	r3, r9
 800f596:	aa03      	add	r2, sp, #12
 800f598:	4621      	mov	r1, r4
 800f59a:	4640      	mov	r0, r8
 800f59c:	f7ff fee4 	bl	800f368 <_printf_common>
 800f5a0:	3001      	adds	r0, #1
 800f5a2:	d14a      	bne.n	800f63a <_printf_i+0x1f6>
 800f5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a8:	b004      	add	sp, #16
 800f5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5ae:	6823      	ldr	r3, [r4, #0]
 800f5b0:	f043 0320 	orr.w	r3, r3, #32
 800f5b4:	6023      	str	r3, [r4, #0]
 800f5b6:	4833      	ldr	r0, [pc, #204]	; (800f684 <_printf_i+0x240>)
 800f5b8:	2778      	movs	r7, #120	; 0x78
 800f5ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f5be:	6823      	ldr	r3, [r4, #0]
 800f5c0:	6829      	ldr	r1, [r5, #0]
 800f5c2:	061f      	lsls	r7, r3, #24
 800f5c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5c8:	d402      	bmi.n	800f5d0 <_printf_i+0x18c>
 800f5ca:	065f      	lsls	r7, r3, #25
 800f5cc:	bf48      	it	mi
 800f5ce:	b2b6      	uxthmi	r6, r6
 800f5d0:	07df      	lsls	r7, r3, #31
 800f5d2:	bf48      	it	mi
 800f5d4:	f043 0320 	orrmi.w	r3, r3, #32
 800f5d8:	6029      	str	r1, [r5, #0]
 800f5da:	bf48      	it	mi
 800f5dc:	6023      	strmi	r3, [r4, #0]
 800f5de:	b91e      	cbnz	r6, 800f5e8 <_printf_i+0x1a4>
 800f5e0:	6823      	ldr	r3, [r4, #0]
 800f5e2:	f023 0320 	bic.w	r3, r3, #32
 800f5e6:	6023      	str	r3, [r4, #0]
 800f5e8:	2310      	movs	r3, #16
 800f5ea:	e7a7      	b.n	800f53c <_printf_i+0xf8>
 800f5ec:	4824      	ldr	r0, [pc, #144]	; (800f680 <_printf_i+0x23c>)
 800f5ee:	e7e4      	b.n	800f5ba <_printf_i+0x176>
 800f5f0:	4615      	mov	r5, r2
 800f5f2:	e7bd      	b.n	800f570 <_printf_i+0x12c>
 800f5f4:	682b      	ldr	r3, [r5, #0]
 800f5f6:	6826      	ldr	r6, [r4, #0]
 800f5f8:	6961      	ldr	r1, [r4, #20]
 800f5fa:	1d18      	adds	r0, r3, #4
 800f5fc:	6028      	str	r0, [r5, #0]
 800f5fe:	0635      	lsls	r5, r6, #24
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	d501      	bpl.n	800f608 <_printf_i+0x1c4>
 800f604:	6019      	str	r1, [r3, #0]
 800f606:	e002      	b.n	800f60e <_printf_i+0x1ca>
 800f608:	0670      	lsls	r0, r6, #25
 800f60a:	d5fb      	bpl.n	800f604 <_printf_i+0x1c0>
 800f60c:	8019      	strh	r1, [r3, #0]
 800f60e:	2300      	movs	r3, #0
 800f610:	6123      	str	r3, [r4, #16]
 800f612:	4615      	mov	r5, r2
 800f614:	e7bc      	b.n	800f590 <_printf_i+0x14c>
 800f616:	682b      	ldr	r3, [r5, #0]
 800f618:	1d1a      	adds	r2, r3, #4
 800f61a:	602a      	str	r2, [r5, #0]
 800f61c:	681d      	ldr	r5, [r3, #0]
 800f61e:	6862      	ldr	r2, [r4, #4]
 800f620:	2100      	movs	r1, #0
 800f622:	4628      	mov	r0, r5
 800f624:	f7f0 fdf4 	bl	8000210 <memchr>
 800f628:	b108      	cbz	r0, 800f62e <_printf_i+0x1ea>
 800f62a:	1b40      	subs	r0, r0, r5
 800f62c:	6060      	str	r0, [r4, #4]
 800f62e:	6863      	ldr	r3, [r4, #4]
 800f630:	6123      	str	r3, [r4, #16]
 800f632:	2300      	movs	r3, #0
 800f634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f638:	e7aa      	b.n	800f590 <_printf_i+0x14c>
 800f63a:	6923      	ldr	r3, [r4, #16]
 800f63c:	462a      	mov	r2, r5
 800f63e:	4649      	mov	r1, r9
 800f640:	4640      	mov	r0, r8
 800f642:	47d0      	blx	sl
 800f644:	3001      	adds	r0, #1
 800f646:	d0ad      	beq.n	800f5a4 <_printf_i+0x160>
 800f648:	6823      	ldr	r3, [r4, #0]
 800f64a:	079b      	lsls	r3, r3, #30
 800f64c:	d413      	bmi.n	800f676 <_printf_i+0x232>
 800f64e:	68e0      	ldr	r0, [r4, #12]
 800f650:	9b03      	ldr	r3, [sp, #12]
 800f652:	4298      	cmp	r0, r3
 800f654:	bfb8      	it	lt
 800f656:	4618      	movlt	r0, r3
 800f658:	e7a6      	b.n	800f5a8 <_printf_i+0x164>
 800f65a:	2301      	movs	r3, #1
 800f65c:	4632      	mov	r2, r6
 800f65e:	4649      	mov	r1, r9
 800f660:	4640      	mov	r0, r8
 800f662:	47d0      	blx	sl
 800f664:	3001      	adds	r0, #1
 800f666:	d09d      	beq.n	800f5a4 <_printf_i+0x160>
 800f668:	3501      	adds	r5, #1
 800f66a:	68e3      	ldr	r3, [r4, #12]
 800f66c:	9903      	ldr	r1, [sp, #12]
 800f66e:	1a5b      	subs	r3, r3, r1
 800f670:	42ab      	cmp	r3, r5
 800f672:	dcf2      	bgt.n	800f65a <_printf_i+0x216>
 800f674:	e7eb      	b.n	800f64e <_printf_i+0x20a>
 800f676:	2500      	movs	r5, #0
 800f678:	f104 0619 	add.w	r6, r4, #25
 800f67c:	e7f5      	b.n	800f66a <_printf_i+0x226>
 800f67e:	bf00      	nop
 800f680:	08011f92 	.word	0x08011f92
 800f684:	08011fa3 	.word	0x08011fa3

0800f688 <std>:
 800f688:	2300      	movs	r3, #0
 800f68a:	b510      	push	{r4, lr}
 800f68c:	4604      	mov	r4, r0
 800f68e:	e9c0 3300 	strd	r3, r3, [r0]
 800f692:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f696:	6083      	str	r3, [r0, #8]
 800f698:	8181      	strh	r1, [r0, #12]
 800f69a:	6643      	str	r3, [r0, #100]	; 0x64
 800f69c:	81c2      	strh	r2, [r0, #14]
 800f69e:	6183      	str	r3, [r0, #24]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	2208      	movs	r2, #8
 800f6a4:	305c      	adds	r0, #92	; 0x5c
 800f6a6:	f000 f8e2 	bl	800f86e <memset>
 800f6aa:	4b05      	ldr	r3, [pc, #20]	; (800f6c0 <std+0x38>)
 800f6ac:	6263      	str	r3, [r4, #36]	; 0x24
 800f6ae:	4b05      	ldr	r3, [pc, #20]	; (800f6c4 <std+0x3c>)
 800f6b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f6b2:	4b05      	ldr	r3, [pc, #20]	; (800f6c8 <std+0x40>)
 800f6b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f6b6:	4b05      	ldr	r3, [pc, #20]	; (800f6cc <std+0x44>)
 800f6b8:	6224      	str	r4, [r4, #32]
 800f6ba:	6323      	str	r3, [r4, #48]	; 0x30
 800f6bc:	bd10      	pop	{r4, pc}
 800f6be:	bf00      	nop
 800f6c0:	0800f7e9 	.word	0x0800f7e9
 800f6c4:	0800f80b 	.word	0x0800f80b
 800f6c8:	0800f843 	.word	0x0800f843
 800f6cc:	0800f867 	.word	0x0800f867

0800f6d0 <stdio_exit_handler>:
 800f6d0:	4a02      	ldr	r2, [pc, #8]	; (800f6dc <stdio_exit_handler+0xc>)
 800f6d2:	4903      	ldr	r1, [pc, #12]	; (800f6e0 <stdio_exit_handler+0x10>)
 800f6d4:	4803      	ldr	r0, [pc, #12]	; (800f6e4 <stdio_exit_handler+0x14>)
 800f6d6:	f000 b869 	b.w	800f7ac <_fwalk_sglue>
 800f6da:	bf00      	nop
 800f6dc:	20000014 	.word	0x20000014
 800f6e0:	08011131 	.word	0x08011131
 800f6e4:	20000020 	.word	0x20000020

0800f6e8 <cleanup_stdio>:
 800f6e8:	6841      	ldr	r1, [r0, #4]
 800f6ea:	4b0c      	ldr	r3, [pc, #48]	; (800f71c <cleanup_stdio+0x34>)
 800f6ec:	4299      	cmp	r1, r3
 800f6ee:	b510      	push	{r4, lr}
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	d001      	beq.n	800f6f8 <cleanup_stdio+0x10>
 800f6f4:	f001 fd1c 	bl	8011130 <_fflush_r>
 800f6f8:	68a1      	ldr	r1, [r4, #8]
 800f6fa:	4b09      	ldr	r3, [pc, #36]	; (800f720 <cleanup_stdio+0x38>)
 800f6fc:	4299      	cmp	r1, r3
 800f6fe:	d002      	beq.n	800f706 <cleanup_stdio+0x1e>
 800f700:	4620      	mov	r0, r4
 800f702:	f001 fd15 	bl	8011130 <_fflush_r>
 800f706:	68e1      	ldr	r1, [r4, #12]
 800f708:	4b06      	ldr	r3, [pc, #24]	; (800f724 <cleanup_stdio+0x3c>)
 800f70a:	4299      	cmp	r1, r3
 800f70c:	d004      	beq.n	800f718 <cleanup_stdio+0x30>
 800f70e:	4620      	mov	r0, r4
 800f710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f714:	f001 bd0c 	b.w	8011130 <_fflush_r>
 800f718:	bd10      	pop	{r4, pc}
 800f71a:	bf00      	nop
 800f71c:	20009640 	.word	0x20009640
 800f720:	200096a8 	.word	0x200096a8
 800f724:	20009710 	.word	0x20009710

0800f728 <global_stdio_init.part.0>:
 800f728:	b510      	push	{r4, lr}
 800f72a:	4b0b      	ldr	r3, [pc, #44]	; (800f758 <global_stdio_init.part.0+0x30>)
 800f72c:	4c0b      	ldr	r4, [pc, #44]	; (800f75c <global_stdio_init.part.0+0x34>)
 800f72e:	4a0c      	ldr	r2, [pc, #48]	; (800f760 <global_stdio_init.part.0+0x38>)
 800f730:	601a      	str	r2, [r3, #0]
 800f732:	4620      	mov	r0, r4
 800f734:	2200      	movs	r2, #0
 800f736:	2104      	movs	r1, #4
 800f738:	f7ff ffa6 	bl	800f688 <std>
 800f73c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f740:	2201      	movs	r2, #1
 800f742:	2109      	movs	r1, #9
 800f744:	f7ff ffa0 	bl	800f688 <std>
 800f748:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f74c:	2202      	movs	r2, #2
 800f74e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f752:	2112      	movs	r1, #18
 800f754:	f7ff bf98 	b.w	800f688 <std>
 800f758:	20009778 	.word	0x20009778
 800f75c:	20009640 	.word	0x20009640
 800f760:	0800f6d1 	.word	0x0800f6d1

0800f764 <__sfp_lock_acquire>:
 800f764:	4801      	ldr	r0, [pc, #4]	; (800f76c <__sfp_lock_acquire+0x8>)
 800f766:	f000 b955 	b.w	800fa14 <__retarget_lock_acquire_recursive>
 800f76a:	bf00      	nop
 800f76c:	20009781 	.word	0x20009781

0800f770 <__sfp_lock_release>:
 800f770:	4801      	ldr	r0, [pc, #4]	; (800f778 <__sfp_lock_release+0x8>)
 800f772:	f000 b950 	b.w	800fa16 <__retarget_lock_release_recursive>
 800f776:	bf00      	nop
 800f778:	20009781 	.word	0x20009781

0800f77c <__sinit>:
 800f77c:	b510      	push	{r4, lr}
 800f77e:	4604      	mov	r4, r0
 800f780:	f7ff fff0 	bl	800f764 <__sfp_lock_acquire>
 800f784:	6a23      	ldr	r3, [r4, #32]
 800f786:	b11b      	cbz	r3, 800f790 <__sinit+0x14>
 800f788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f78c:	f7ff bff0 	b.w	800f770 <__sfp_lock_release>
 800f790:	4b04      	ldr	r3, [pc, #16]	; (800f7a4 <__sinit+0x28>)
 800f792:	6223      	str	r3, [r4, #32]
 800f794:	4b04      	ldr	r3, [pc, #16]	; (800f7a8 <__sinit+0x2c>)
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d1f5      	bne.n	800f788 <__sinit+0xc>
 800f79c:	f7ff ffc4 	bl	800f728 <global_stdio_init.part.0>
 800f7a0:	e7f2      	b.n	800f788 <__sinit+0xc>
 800f7a2:	bf00      	nop
 800f7a4:	0800f6e9 	.word	0x0800f6e9
 800f7a8:	20009778 	.word	0x20009778

0800f7ac <_fwalk_sglue>:
 800f7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7b0:	4607      	mov	r7, r0
 800f7b2:	4688      	mov	r8, r1
 800f7b4:	4614      	mov	r4, r2
 800f7b6:	2600      	movs	r6, #0
 800f7b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7bc:	f1b9 0901 	subs.w	r9, r9, #1
 800f7c0:	d505      	bpl.n	800f7ce <_fwalk_sglue+0x22>
 800f7c2:	6824      	ldr	r4, [r4, #0]
 800f7c4:	2c00      	cmp	r4, #0
 800f7c6:	d1f7      	bne.n	800f7b8 <_fwalk_sglue+0xc>
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ce:	89ab      	ldrh	r3, [r5, #12]
 800f7d0:	2b01      	cmp	r3, #1
 800f7d2:	d907      	bls.n	800f7e4 <_fwalk_sglue+0x38>
 800f7d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	d003      	beq.n	800f7e4 <_fwalk_sglue+0x38>
 800f7dc:	4629      	mov	r1, r5
 800f7de:	4638      	mov	r0, r7
 800f7e0:	47c0      	blx	r8
 800f7e2:	4306      	orrs	r6, r0
 800f7e4:	3568      	adds	r5, #104	; 0x68
 800f7e6:	e7e9      	b.n	800f7bc <_fwalk_sglue+0x10>

0800f7e8 <__sread>:
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	460c      	mov	r4, r1
 800f7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f0:	f000 f8c2 	bl	800f978 <_read_r>
 800f7f4:	2800      	cmp	r0, #0
 800f7f6:	bfab      	itete	ge
 800f7f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f7fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f7fc:	181b      	addge	r3, r3, r0
 800f7fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f802:	bfac      	ite	ge
 800f804:	6563      	strge	r3, [r4, #84]	; 0x54
 800f806:	81a3      	strhlt	r3, [r4, #12]
 800f808:	bd10      	pop	{r4, pc}

0800f80a <__swrite>:
 800f80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f80e:	461f      	mov	r7, r3
 800f810:	898b      	ldrh	r3, [r1, #12]
 800f812:	05db      	lsls	r3, r3, #23
 800f814:	4605      	mov	r5, r0
 800f816:	460c      	mov	r4, r1
 800f818:	4616      	mov	r6, r2
 800f81a:	d505      	bpl.n	800f828 <__swrite+0x1e>
 800f81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f820:	2302      	movs	r3, #2
 800f822:	2200      	movs	r2, #0
 800f824:	f000 f896 	bl	800f954 <_lseek_r>
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f82e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f832:	81a3      	strh	r3, [r4, #12]
 800f834:	4632      	mov	r2, r6
 800f836:	463b      	mov	r3, r7
 800f838:	4628      	mov	r0, r5
 800f83a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f83e:	f000 b8ad 	b.w	800f99c <_write_r>

0800f842 <__sseek>:
 800f842:	b510      	push	{r4, lr}
 800f844:	460c      	mov	r4, r1
 800f846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f84a:	f000 f883 	bl	800f954 <_lseek_r>
 800f84e:	1c43      	adds	r3, r0, #1
 800f850:	89a3      	ldrh	r3, [r4, #12]
 800f852:	bf15      	itete	ne
 800f854:	6560      	strne	r0, [r4, #84]	; 0x54
 800f856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f85a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f85e:	81a3      	strheq	r3, [r4, #12]
 800f860:	bf18      	it	ne
 800f862:	81a3      	strhne	r3, [r4, #12]
 800f864:	bd10      	pop	{r4, pc}

0800f866 <__sclose>:
 800f866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f86a:	f000 b80d 	b.w	800f888 <_close_r>

0800f86e <memset>:
 800f86e:	4402      	add	r2, r0
 800f870:	4603      	mov	r3, r0
 800f872:	4293      	cmp	r3, r2
 800f874:	d100      	bne.n	800f878 <memset+0xa>
 800f876:	4770      	bx	lr
 800f878:	f803 1b01 	strb.w	r1, [r3], #1
 800f87c:	e7f9      	b.n	800f872 <memset+0x4>
	...

0800f880 <_localeconv_r>:
 800f880:	4800      	ldr	r0, [pc, #0]	; (800f884 <_localeconv_r+0x4>)
 800f882:	4770      	bx	lr
 800f884:	20000160 	.word	0x20000160

0800f888 <_close_r>:
 800f888:	b538      	push	{r3, r4, r5, lr}
 800f88a:	4d06      	ldr	r5, [pc, #24]	; (800f8a4 <_close_r+0x1c>)
 800f88c:	2300      	movs	r3, #0
 800f88e:	4604      	mov	r4, r0
 800f890:	4608      	mov	r0, r1
 800f892:	602b      	str	r3, [r5, #0]
 800f894:	f7f5 fc7f 	bl	8005196 <_close>
 800f898:	1c43      	adds	r3, r0, #1
 800f89a:	d102      	bne.n	800f8a2 <_close_r+0x1a>
 800f89c:	682b      	ldr	r3, [r5, #0]
 800f89e:	b103      	cbz	r3, 800f8a2 <_close_r+0x1a>
 800f8a0:	6023      	str	r3, [r4, #0]
 800f8a2:	bd38      	pop	{r3, r4, r5, pc}
 800f8a4:	2000977c 	.word	0x2000977c

0800f8a8 <_reclaim_reent>:
 800f8a8:	4b29      	ldr	r3, [pc, #164]	; (800f950 <_reclaim_reent+0xa8>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4283      	cmp	r3, r0
 800f8ae:	b570      	push	{r4, r5, r6, lr}
 800f8b0:	4604      	mov	r4, r0
 800f8b2:	d04b      	beq.n	800f94c <_reclaim_reent+0xa4>
 800f8b4:	69c3      	ldr	r3, [r0, #28]
 800f8b6:	b143      	cbz	r3, 800f8ca <_reclaim_reent+0x22>
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d144      	bne.n	800f948 <_reclaim_reent+0xa0>
 800f8be:	69e3      	ldr	r3, [r4, #28]
 800f8c0:	6819      	ldr	r1, [r3, #0]
 800f8c2:	b111      	cbz	r1, 800f8ca <_reclaim_reent+0x22>
 800f8c4:	4620      	mov	r0, r4
 800f8c6:	f000 ff31 	bl	801072c <_free_r>
 800f8ca:	6961      	ldr	r1, [r4, #20]
 800f8cc:	b111      	cbz	r1, 800f8d4 <_reclaim_reent+0x2c>
 800f8ce:	4620      	mov	r0, r4
 800f8d0:	f000 ff2c 	bl	801072c <_free_r>
 800f8d4:	69e1      	ldr	r1, [r4, #28]
 800f8d6:	b111      	cbz	r1, 800f8de <_reclaim_reent+0x36>
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f000 ff27 	bl	801072c <_free_r>
 800f8de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f8e0:	b111      	cbz	r1, 800f8e8 <_reclaim_reent+0x40>
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f000 ff22 	bl	801072c <_free_r>
 800f8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8ea:	b111      	cbz	r1, 800f8f2 <_reclaim_reent+0x4a>
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f000 ff1d 	bl	801072c <_free_r>
 800f8f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f8f4:	b111      	cbz	r1, 800f8fc <_reclaim_reent+0x54>
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f000 ff18 	bl	801072c <_free_r>
 800f8fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f8fe:	b111      	cbz	r1, 800f906 <_reclaim_reent+0x5e>
 800f900:	4620      	mov	r0, r4
 800f902:	f000 ff13 	bl	801072c <_free_r>
 800f906:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f908:	b111      	cbz	r1, 800f910 <_reclaim_reent+0x68>
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 ff0e 	bl	801072c <_free_r>
 800f910:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f912:	b111      	cbz	r1, 800f91a <_reclaim_reent+0x72>
 800f914:	4620      	mov	r0, r4
 800f916:	f000 ff09 	bl	801072c <_free_r>
 800f91a:	6a23      	ldr	r3, [r4, #32]
 800f91c:	b1b3      	cbz	r3, 800f94c <_reclaim_reent+0xa4>
 800f91e:	4620      	mov	r0, r4
 800f920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f924:	4718      	bx	r3
 800f926:	5949      	ldr	r1, [r1, r5]
 800f928:	b941      	cbnz	r1, 800f93c <_reclaim_reent+0x94>
 800f92a:	3504      	adds	r5, #4
 800f92c:	69e3      	ldr	r3, [r4, #28]
 800f92e:	2d80      	cmp	r5, #128	; 0x80
 800f930:	68d9      	ldr	r1, [r3, #12]
 800f932:	d1f8      	bne.n	800f926 <_reclaim_reent+0x7e>
 800f934:	4620      	mov	r0, r4
 800f936:	f000 fef9 	bl	801072c <_free_r>
 800f93a:	e7c0      	b.n	800f8be <_reclaim_reent+0x16>
 800f93c:	680e      	ldr	r6, [r1, #0]
 800f93e:	4620      	mov	r0, r4
 800f940:	f000 fef4 	bl	801072c <_free_r>
 800f944:	4631      	mov	r1, r6
 800f946:	e7ef      	b.n	800f928 <_reclaim_reent+0x80>
 800f948:	2500      	movs	r5, #0
 800f94a:	e7ef      	b.n	800f92c <_reclaim_reent+0x84>
 800f94c:	bd70      	pop	{r4, r5, r6, pc}
 800f94e:	bf00      	nop
 800f950:	2000006c 	.word	0x2000006c

0800f954 <_lseek_r>:
 800f954:	b538      	push	{r3, r4, r5, lr}
 800f956:	4d07      	ldr	r5, [pc, #28]	; (800f974 <_lseek_r+0x20>)
 800f958:	4604      	mov	r4, r0
 800f95a:	4608      	mov	r0, r1
 800f95c:	4611      	mov	r1, r2
 800f95e:	2200      	movs	r2, #0
 800f960:	602a      	str	r2, [r5, #0]
 800f962:	461a      	mov	r2, r3
 800f964:	f7f5 fc3e 	bl	80051e4 <_lseek>
 800f968:	1c43      	adds	r3, r0, #1
 800f96a:	d102      	bne.n	800f972 <_lseek_r+0x1e>
 800f96c:	682b      	ldr	r3, [r5, #0]
 800f96e:	b103      	cbz	r3, 800f972 <_lseek_r+0x1e>
 800f970:	6023      	str	r3, [r4, #0]
 800f972:	bd38      	pop	{r3, r4, r5, pc}
 800f974:	2000977c 	.word	0x2000977c

0800f978 <_read_r>:
 800f978:	b538      	push	{r3, r4, r5, lr}
 800f97a:	4d07      	ldr	r5, [pc, #28]	; (800f998 <_read_r+0x20>)
 800f97c:	4604      	mov	r4, r0
 800f97e:	4608      	mov	r0, r1
 800f980:	4611      	mov	r1, r2
 800f982:	2200      	movs	r2, #0
 800f984:	602a      	str	r2, [r5, #0]
 800f986:	461a      	mov	r2, r3
 800f988:	f7f5 fbcc 	bl	8005124 <_read>
 800f98c:	1c43      	adds	r3, r0, #1
 800f98e:	d102      	bne.n	800f996 <_read_r+0x1e>
 800f990:	682b      	ldr	r3, [r5, #0]
 800f992:	b103      	cbz	r3, 800f996 <_read_r+0x1e>
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	bd38      	pop	{r3, r4, r5, pc}
 800f998:	2000977c 	.word	0x2000977c

0800f99c <_write_r>:
 800f99c:	b538      	push	{r3, r4, r5, lr}
 800f99e:	4d07      	ldr	r5, [pc, #28]	; (800f9bc <_write_r+0x20>)
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	4608      	mov	r0, r1
 800f9a4:	4611      	mov	r1, r2
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	602a      	str	r2, [r5, #0]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	f7f5 fbd7 	bl	800515e <_write>
 800f9b0:	1c43      	adds	r3, r0, #1
 800f9b2:	d102      	bne.n	800f9ba <_write_r+0x1e>
 800f9b4:	682b      	ldr	r3, [r5, #0]
 800f9b6:	b103      	cbz	r3, 800f9ba <_write_r+0x1e>
 800f9b8:	6023      	str	r3, [r4, #0]
 800f9ba:	bd38      	pop	{r3, r4, r5, pc}
 800f9bc:	2000977c 	.word	0x2000977c

0800f9c0 <__errno>:
 800f9c0:	4b01      	ldr	r3, [pc, #4]	; (800f9c8 <__errno+0x8>)
 800f9c2:	6818      	ldr	r0, [r3, #0]
 800f9c4:	4770      	bx	lr
 800f9c6:	bf00      	nop
 800f9c8:	2000006c 	.word	0x2000006c

0800f9cc <__libc_init_array>:
 800f9cc:	b570      	push	{r4, r5, r6, lr}
 800f9ce:	4d0d      	ldr	r5, [pc, #52]	; (800fa04 <__libc_init_array+0x38>)
 800f9d0:	4c0d      	ldr	r4, [pc, #52]	; (800fa08 <__libc_init_array+0x3c>)
 800f9d2:	1b64      	subs	r4, r4, r5
 800f9d4:	10a4      	asrs	r4, r4, #2
 800f9d6:	2600      	movs	r6, #0
 800f9d8:	42a6      	cmp	r6, r4
 800f9da:	d109      	bne.n	800f9f0 <__libc_init_array+0x24>
 800f9dc:	4d0b      	ldr	r5, [pc, #44]	; (800fa0c <__libc_init_array+0x40>)
 800f9de:	4c0c      	ldr	r4, [pc, #48]	; (800fa10 <__libc_init_array+0x44>)
 800f9e0:	f001 feec 	bl	80117bc <_init>
 800f9e4:	1b64      	subs	r4, r4, r5
 800f9e6:	10a4      	asrs	r4, r4, #2
 800f9e8:	2600      	movs	r6, #0
 800f9ea:	42a6      	cmp	r6, r4
 800f9ec:	d105      	bne.n	800f9fa <__libc_init_array+0x2e>
 800f9ee:	bd70      	pop	{r4, r5, r6, pc}
 800f9f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9f4:	4798      	blx	r3
 800f9f6:	3601      	adds	r6, #1
 800f9f8:	e7ee      	b.n	800f9d8 <__libc_init_array+0xc>
 800f9fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9fe:	4798      	blx	r3
 800fa00:	3601      	adds	r6, #1
 800fa02:	e7f2      	b.n	800f9ea <__libc_init_array+0x1e>
 800fa04:	080122fc 	.word	0x080122fc
 800fa08:	080122fc 	.word	0x080122fc
 800fa0c:	080122fc 	.word	0x080122fc
 800fa10:	08012300 	.word	0x08012300

0800fa14 <__retarget_lock_acquire_recursive>:
 800fa14:	4770      	bx	lr

0800fa16 <__retarget_lock_release_recursive>:
 800fa16:	4770      	bx	lr

0800fa18 <memcpy>:
 800fa18:	440a      	add	r2, r1
 800fa1a:	4291      	cmp	r1, r2
 800fa1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fa20:	d100      	bne.n	800fa24 <memcpy+0xc>
 800fa22:	4770      	bx	lr
 800fa24:	b510      	push	{r4, lr}
 800fa26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fa2e:	4291      	cmp	r1, r2
 800fa30:	d1f9      	bne.n	800fa26 <memcpy+0xe>
 800fa32:	bd10      	pop	{r4, pc}

0800fa34 <quorem>:
 800fa34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa38:	6903      	ldr	r3, [r0, #16]
 800fa3a:	690c      	ldr	r4, [r1, #16]
 800fa3c:	42a3      	cmp	r3, r4
 800fa3e:	4607      	mov	r7, r0
 800fa40:	db7e      	blt.n	800fb40 <quorem+0x10c>
 800fa42:	3c01      	subs	r4, #1
 800fa44:	f101 0814 	add.w	r8, r1, #20
 800fa48:	f100 0514 	add.w	r5, r0, #20
 800fa4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa50:	9301      	str	r3, [sp, #4]
 800fa52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fa56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	429a      	cmp	r2, r3
 800fa5e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fa62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fa66:	fbb2 f6f3 	udiv	r6, r2, r3
 800fa6a:	d331      	bcc.n	800fad0 <quorem+0x9c>
 800fa6c:	f04f 0e00 	mov.w	lr, #0
 800fa70:	4640      	mov	r0, r8
 800fa72:	46ac      	mov	ip, r5
 800fa74:	46f2      	mov	sl, lr
 800fa76:	f850 2b04 	ldr.w	r2, [r0], #4
 800fa7a:	b293      	uxth	r3, r2
 800fa7c:	fb06 e303 	mla	r3, r6, r3, lr
 800fa80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fa84:	0c1a      	lsrs	r2, r3, #16
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	ebaa 0303 	sub.w	r3, sl, r3
 800fa8c:	f8dc a000 	ldr.w	sl, [ip]
 800fa90:	fa13 f38a 	uxtah	r3, r3, sl
 800fa94:	fb06 220e 	mla	r2, r6, lr, r2
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	9b00      	ldr	r3, [sp, #0]
 800fa9c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800faa0:	b292      	uxth	r2, r2
 800faa2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800faa6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800faaa:	f8bd 3000 	ldrh.w	r3, [sp]
 800faae:	4581      	cmp	r9, r0
 800fab0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fab4:	f84c 3b04 	str.w	r3, [ip], #4
 800fab8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fabc:	d2db      	bcs.n	800fa76 <quorem+0x42>
 800fabe:	f855 300b 	ldr.w	r3, [r5, fp]
 800fac2:	b92b      	cbnz	r3, 800fad0 <quorem+0x9c>
 800fac4:	9b01      	ldr	r3, [sp, #4]
 800fac6:	3b04      	subs	r3, #4
 800fac8:	429d      	cmp	r5, r3
 800faca:	461a      	mov	r2, r3
 800facc:	d32c      	bcc.n	800fb28 <quorem+0xf4>
 800face:	613c      	str	r4, [r7, #16]
 800fad0:	4638      	mov	r0, r7
 800fad2:	f001 f9a7 	bl	8010e24 <__mcmp>
 800fad6:	2800      	cmp	r0, #0
 800fad8:	db22      	blt.n	800fb20 <quorem+0xec>
 800fada:	3601      	adds	r6, #1
 800fadc:	4629      	mov	r1, r5
 800fade:	2000      	movs	r0, #0
 800fae0:	f858 2b04 	ldr.w	r2, [r8], #4
 800fae4:	f8d1 c000 	ldr.w	ip, [r1]
 800fae8:	b293      	uxth	r3, r2
 800faea:	1ac3      	subs	r3, r0, r3
 800faec:	0c12      	lsrs	r2, r2, #16
 800faee:	fa13 f38c 	uxtah	r3, r3, ip
 800faf2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800faf6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fb00:	45c1      	cmp	r9, r8
 800fb02:	f841 3b04 	str.w	r3, [r1], #4
 800fb06:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fb0a:	d2e9      	bcs.n	800fae0 <quorem+0xac>
 800fb0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb14:	b922      	cbnz	r2, 800fb20 <quorem+0xec>
 800fb16:	3b04      	subs	r3, #4
 800fb18:	429d      	cmp	r5, r3
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	d30a      	bcc.n	800fb34 <quorem+0x100>
 800fb1e:	613c      	str	r4, [r7, #16]
 800fb20:	4630      	mov	r0, r6
 800fb22:	b003      	add	sp, #12
 800fb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb28:	6812      	ldr	r2, [r2, #0]
 800fb2a:	3b04      	subs	r3, #4
 800fb2c:	2a00      	cmp	r2, #0
 800fb2e:	d1ce      	bne.n	800face <quorem+0x9a>
 800fb30:	3c01      	subs	r4, #1
 800fb32:	e7c9      	b.n	800fac8 <quorem+0x94>
 800fb34:	6812      	ldr	r2, [r2, #0]
 800fb36:	3b04      	subs	r3, #4
 800fb38:	2a00      	cmp	r2, #0
 800fb3a:	d1f0      	bne.n	800fb1e <quorem+0xea>
 800fb3c:	3c01      	subs	r4, #1
 800fb3e:	e7eb      	b.n	800fb18 <quorem+0xe4>
 800fb40:	2000      	movs	r0, #0
 800fb42:	e7ee      	b.n	800fb22 <quorem+0xee>
 800fb44:	0000      	movs	r0, r0
	...

0800fb48 <_dtoa_r>:
 800fb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb4c:	ed2d 8b04 	vpush	{d8-d9}
 800fb50:	69c5      	ldr	r5, [r0, #28]
 800fb52:	b093      	sub	sp, #76	; 0x4c
 800fb54:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fb58:	ec57 6b10 	vmov	r6, r7, d0
 800fb5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fb60:	9107      	str	r1, [sp, #28]
 800fb62:	4604      	mov	r4, r0
 800fb64:	920a      	str	r2, [sp, #40]	; 0x28
 800fb66:	930d      	str	r3, [sp, #52]	; 0x34
 800fb68:	b975      	cbnz	r5, 800fb88 <_dtoa_r+0x40>
 800fb6a:	2010      	movs	r0, #16
 800fb6c:	f000 fe2a 	bl	80107c4 <malloc>
 800fb70:	4602      	mov	r2, r0
 800fb72:	61e0      	str	r0, [r4, #28]
 800fb74:	b920      	cbnz	r0, 800fb80 <_dtoa_r+0x38>
 800fb76:	4bae      	ldr	r3, [pc, #696]	; (800fe30 <_dtoa_r+0x2e8>)
 800fb78:	21ef      	movs	r1, #239	; 0xef
 800fb7a:	48ae      	ldr	r0, [pc, #696]	; (800fe34 <_dtoa_r+0x2ec>)
 800fb7c:	f001 fb10 	bl	80111a0 <__assert_func>
 800fb80:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fb84:	6005      	str	r5, [r0, #0]
 800fb86:	60c5      	str	r5, [r0, #12]
 800fb88:	69e3      	ldr	r3, [r4, #28]
 800fb8a:	6819      	ldr	r1, [r3, #0]
 800fb8c:	b151      	cbz	r1, 800fba4 <_dtoa_r+0x5c>
 800fb8e:	685a      	ldr	r2, [r3, #4]
 800fb90:	604a      	str	r2, [r1, #4]
 800fb92:	2301      	movs	r3, #1
 800fb94:	4093      	lsls	r3, r2
 800fb96:	608b      	str	r3, [r1, #8]
 800fb98:	4620      	mov	r0, r4
 800fb9a:	f000 ff07 	bl	80109ac <_Bfree>
 800fb9e:	69e3      	ldr	r3, [r4, #28]
 800fba0:	2200      	movs	r2, #0
 800fba2:	601a      	str	r2, [r3, #0]
 800fba4:	1e3b      	subs	r3, r7, #0
 800fba6:	bfbb      	ittet	lt
 800fba8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fbac:	9303      	strlt	r3, [sp, #12]
 800fbae:	2300      	movge	r3, #0
 800fbb0:	2201      	movlt	r2, #1
 800fbb2:	bfac      	ite	ge
 800fbb4:	f8c8 3000 	strge.w	r3, [r8]
 800fbb8:	f8c8 2000 	strlt.w	r2, [r8]
 800fbbc:	4b9e      	ldr	r3, [pc, #632]	; (800fe38 <_dtoa_r+0x2f0>)
 800fbbe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fbc2:	ea33 0308 	bics.w	r3, r3, r8
 800fbc6:	d11b      	bne.n	800fc00 <_dtoa_r+0xb8>
 800fbc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fbca:	f242 730f 	movw	r3, #9999	; 0x270f
 800fbce:	6013      	str	r3, [r2, #0]
 800fbd0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fbd4:	4333      	orrs	r3, r6
 800fbd6:	f000 8593 	beq.w	8010700 <_dtoa_r+0xbb8>
 800fbda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbdc:	b963      	cbnz	r3, 800fbf8 <_dtoa_r+0xb0>
 800fbde:	4b97      	ldr	r3, [pc, #604]	; (800fe3c <_dtoa_r+0x2f4>)
 800fbe0:	e027      	b.n	800fc32 <_dtoa_r+0xea>
 800fbe2:	4b97      	ldr	r3, [pc, #604]	; (800fe40 <_dtoa_r+0x2f8>)
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	3308      	adds	r3, #8
 800fbe8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fbea:	6013      	str	r3, [r2, #0]
 800fbec:	9800      	ldr	r0, [sp, #0]
 800fbee:	b013      	add	sp, #76	; 0x4c
 800fbf0:	ecbd 8b04 	vpop	{d8-d9}
 800fbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf8:	4b90      	ldr	r3, [pc, #576]	; (800fe3c <_dtoa_r+0x2f4>)
 800fbfa:	9300      	str	r3, [sp, #0]
 800fbfc:	3303      	adds	r3, #3
 800fbfe:	e7f3      	b.n	800fbe8 <_dtoa_r+0xa0>
 800fc00:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc04:	2200      	movs	r2, #0
 800fc06:	ec51 0b17 	vmov	r0, r1, d7
 800fc0a:	eeb0 8a47 	vmov.f32	s16, s14
 800fc0e:	eef0 8a67 	vmov.f32	s17, s15
 800fc12:	2300      	movs	r3, #0
 800fc14:	f7f0 ff78 	bl	8000b08 <__aeabi_dcmpeq>
 800fc18:	4681      	mov	r9, r0
 800fc1a:	b160      	cbz	r0, 800fc36 <_dtoa_r+0xee>
 800fc1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc1e:	2301      	movs	r3, #1
 800fc20:	6013      	str	r3, [r2, #0]
 800fc22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f000 8568 	beq.w	80106fa <_dtoa_r+0xbb2>
 800fc2a:	4b86      	ldr	r3, [pc, #536]	; (800fe44 <_dtoa_r+0x2fc>)
 800fc2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fc2e:	6013      	str	r3, [r2, #0]
 800fc30:	3b01      	subs	r3, #1
 800fc32:	9300      	str	r3, [sp, #0]
 800fc34:	e7da      	b.n	800fbec <_dtoa_r+0xa4>
 800fc36:	aa10      	add	r2, sp, #64	; 0x40
 800fc38:	a911      	add	r1, sp, #68	; 0x44
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	eeb0 0a48 	vmov.f32	s0, s16
 800fc40:	eef0 0a68 	vmov.f32	s1, s17
 800fc44:	f001 f994 	bl	8010f70 <__d2b>
 800fc48:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fc4c:	4682      	mov	sl, r0
 800fc4e:	2d00      	cmp	r5, #0
 800fc50:	d07f      	beq.n	800fd52 <_dtoa_r+0x20a>
 800fc52:	ee18 3a90 	vmov	r3, s17
 800fc56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc5a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fc5e:	ec51 0b18 	vmov	r0, r1, d8
 800fc62:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fc66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fc6a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fc6e:	4619      	mov	r1, r3
 800fc70:	2200      	movs	r2, #0
 800fc72:	4b75      	ldr	r3, [pc, #468]	; (800fe48 <_dtoa_r+0x300>)
 800fc74:	f7f0 fb28 	bl	80002c8 <__aeabi_dsub>
 800fc78:	a367      	add	r3, pc, #412	; (adr r3, 800fe18 <_dtoa_r+0x2d0>)
 800fc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc7e:	f7f0 fcdb 	bl	8000638 <__aeabi_dmul>
 800fc82:	a367      	add	r3, pc, #412	; (adr r3, 800fe20 <_dtoa_r+0x2d8>)
 800fc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc88:	f7f0 fb20 	bl	80002cc <__adddf3>
 800fc8c:	4606      	mov	r6, r0
 800fc8e:	4628      	mov	r0, r5
 800fc90:	460f      	mov	r7, r1
 800fc92:	f7f0 fc67 	bl	8000564 <__aeabi_i2d>
 800fc96:	a364      	add	r3, pc, #400	; (adr r3, 800fe28 <_dtoa_r+0x2e0>)
 800fc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc9c:	f7f0 fccc 	bl	8000638 <__aeabi_dmul>
 800fca0:	4602      	mov	r2, r0
 800fca2:	460b      	mov	r3, r1
 800fca4:	4630      	mov	r0, r6
 800fca6:	4639      	mov	r1, r7
 800fca8:	f7f0 fb10 	bl	80002cc <__adddf3>
 800fcac:	4606      	mov	r6, r0
 800fcae:	460f      	mov	r7, r1
 800fcb0:	f7f0 ff72 	bl	8000b98 <__aeabi_d2iz>
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	4683      	mov	fp, r0
 800fcb8:	2300      	movs	r3, #0
 800fcba:	4630      	mov	r0, r6
 800fcbc:	4639      	mov	r1, r7
 800fcbe:	f7f0 ff2d 	bl	8000b1c <__aeabi_dcmplt>
 800fcc2:	b148      	cbz	r0, 800fcd8 <_dtoa_r+0x190>
 800fcc4:	4658      	mov	r0, fp
 800fcc6:	f7f0 fc4d 	bl	8000564 <__aeabi_i2d>
 800fcca:	4632      	mov	r2, r6
 800fccc:	463b      	mov	r3, r7
 800fcce:	f7f0 ff1b 	bl	8000b08 <__aeabi_dcmpeq>
 800fcd2:	b908      	cbnz	r0, 800fcd8 <_dtoa_r+0x190>
 800fcd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fcd8:	f1bb 0f16 	cmp.w	fp, #22
 800fcdc:	d857      	bhi.n	800fd8e <_dtoa_r+0x246>
 800fcde:	4b5b      	ldr	r3, [pc, #364]	; (800fe4c <_dtoa_r+0x304>)
 800fce0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce8:	ec51 0b18 	vmov	r0, r1, d8
 800fcec:	f7f0 ff16 	bl	8000b1c <__aeabi_dcmplt>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	d04e      	beq.n	800fd92 <_dtoa_r+0x24a>
 800fcf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	930c      	str	r3, [sp, #48]	; 0x30
 800fcfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fcfe:	1b5b      	subs	r3, r3, r5
 800fd00:	1e5a      	subs	r2, r3, #1
 800fd02:	bf45      	ittet	mi
 800fd04:	f1c3 0301 	rsbmi	r3, r3, #1
 800fd08:	9305      	strmi	r3, [sp, #20]
 800fd0a:	2300      	movpl	r3, #0
 800fd0c:	2300      	movmi	r3, #0
 800fd0e:	9206      	str	r2, [sp, #24]
 800fd10:	bf54      	ite	pl
 800fd12:	9305      	strpl	r3, [sp, #20]
 800fd14:	9306      	strmi	r3, [sp, #24]
 800fd16:	f1bb 0f00 	cmp.w	fp, #0
 800fd1a:	db3c      	blt.n	800fd96 <_dtoa_r+0x24e>
 800fd1c:	9b06      	ldr	r3, [sp, #24]
 800fd1e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fd22:	445b      	add	r3, fp
 800fd24:	9306      	str	r3, [sp, #24]
 800fd26:	2300      	movs	r3, #0
 800fd28:	9308      	str	r3, [sp, #32]
 800fd2a:	9b07      	ldr	r3, [sp, #28]
 800fd2c:	2b09      	cmp	r3, #9
 800fd2e:	d868      	bhi.n	800fe02 <_dtoa_r+0x2ba>
 800fd30:	2b05      	cmp	r3, #5
 800fd32:	bfc4      	itt	gt
 800fd34:	3b04      	subgt	r3, #4
 800fd36:	9307      	strgt	r3, [sp, #28]
 800fd38:	9b07      	ldr	r3, [sp, #28]
 800fd3a:	f1a3 0302 	sub.w	r3, r3, #2
 800fd3e:	bfcc      	ite	gt
 800fd40:	2500      	movgt	r5, #0
 800fd42:	2501      	movle	r5, #1
 800fd44:	2b03      	cmp	r3, #3
 800fd46:	f200 8085 	bhi.w	800fe54 <_dtoa_r+0x30c>
 800fd4a:	e8df f003 	tbb	[pc, r3]
 800fd4e:	3b2e      	.short	0x3b2e
 800fd50:	5839      	.short	0x5839
 800fd52:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fd56:	441d      	add	r5, r3
 800fd58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fd5c:	2b20      	cmp	r3, #32
 800fd5e:	bfc1      	itttt	gt
 800fd60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fd64:	fa08 f803 	lslgt.w	r8, r8, r3
 800fd68:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fd6c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fd70:	bfd6      	itet	le
 800fd72:	f1c3 0320 	rsble	r3, r3, #32
 800fd76:	ea48 0003 	orrgt.w	r0, r8, r3
 800fd7a:	fa06 f003 	lslle.w	r0, r6, r3
 800fd7e:	f7f0 fbe1 	bl	8000544 <__aeabi_ui2d>
 800fd82:	2201      	movs	r2, #1
 800fd84:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fd88:	3d01      	subs	r5, #1
 800fd8a:	920e      	str	r2, [sp, #56]	; 0x38
 800fd8c:	e76f      	b.n	800fc6e <_dtoa_r+0x126>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e7b3      	b.n	800fcfa <_dtoa_r+0x1b2>
 800fd92:	900c      	str	r0, [sp, #48]	; 0x30
 800fd94:	e7b2      	b.n	800fcfc <_dtoa_r+0x1b4>
 800fd96:	9b05      	ldr	r3, [sp, #20]
 800fd98:	eba3 030b 	sub.w	r3, r3, fp
 800fd9c:	9305      	str	r3, [sp, #20]
 800fd9e:	f1cb 0300 	rsb	r3, fp, #0
 800fda2:	9308      	str	r3, [sp, #32]
 800fda4:	2300      	movs	r3, #0
 800fda6:	930b      	str	r3, [sp, #44]	; 0x2c
 800fda8:	e7bf      	b.n	800fd2a <_dtoa_r+0x1e2>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	9309      	str	r3, [sp, #36]	; 0x24
 800fdae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	dc52      	bgt.n	800fe5a <_dtoa_r+0x312>
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	9301      	str	r3, [sp, #4]
 800fdb8:	9304      	str	r3, [sp, #16]
 800fdba:	461a      	mov	r2, r3
 800fdbc:	920a      	str	r2, [sp, #40]	; 0x28
 800fdbe:	e00b      	b.n	800fdd8 <_dtoa_r+0x290>
 800fdc0:	2301      	movs	r3, #1
 800fdc2:	e7f3      	b.n	800fdac <_dtoa_r+0x264>
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	9309      	str	r3, [sp, #36]	; 0x24
 800fdc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdca:	445b      	add	r3, fp
 800fdcc:	9301      	str	r3, [sp, #4]
 800fdce:	3301      	adds	r3, #1
 800fdd0:	2b01      	cmp	r3, #1
 800fdd2:	9304      	str	r3, [sp, #16]
 800fdd4:	bfb8      	it	lt
 800fdd6:	2301      	movlt	r3, #1
 800fdd8:	69e0      	ldr	r0, [r4, #28]
 800fdda:	2100      	movs	r1, #0
 800fddc:	2204      	movs	r2, #4
 800fdde:	f102 0614 	add.w	r6, r2, #20
 800fde2:	429e      	cmp	r6, r3
 800fde4:	d93d      	bls.n	800fe62 <_dtoa_r+0x31a>
 800fde6:	6041      	str	r1, [r0, #4]
 800fde8:	4620      	mov	r0, r4
 800fdea:	f000 fd9f 	bl	801092c <_Balloc>
 800fdee:	9000      	str	r0, [sp, #0]
 800fdf0:	2800      	cmp	r0, #0
 800fdf2:	d139      	bne.n	800fe68 <_dtoa_r+0x320>
 800fdf4:	4b16      	ldr	r3, [pc, #88]	; (800fe50 <_dtoa_r+0x308>)
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	f240 11af 	movw	r1, #431	; 0x1af
 800fdfc:	e6bd      	b.n	800fb7a <_dtoa_r+0x32>
 800fdfe:	2301      	movs	r3, #1
 800fe00:	e7e1      	b.n	800fdc6 <_dtoa_r+0x27e>
 800fe02:	2501      	movs	r5, #1
 800fe04:	2300      	movs	r3, #0
 800fe06:	9307      	str	r3, [sp, #28]
 800fe08:	9509      	str	r5, [sp, #36]	; 0x24
 800fe0a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe0e:	9301      	str	r3, [sp, #4]
 800fe10:	9304      	str	r3, [sp, #16]
 800fe12:	2200      	movs	r2, #0
 800fe14:	2312      	movs	r3, #18
 800fe16:	e7d1      	b.n	800fdbc <_dtoa_r+0x274>
 800fe18:	636f4361 	.word	0x636f4361
 800fe1c:	3fd287a7 	.word	0x3fd287a7
 800fe20:	8b60c8b3 	.word	0x8b60c8b3
 800fe24:	3fc68a28 	.word	0x3fc68a28
 800fe28:	509f79fb 	.word	0x509f79fb
 800fe2c:	3fd34413 	.word	0x3fd34413
 800fe30:	08011fc1 	.word	0x08011fc1
 800fe34:	08011fd8 	.word	0x08011fd8
 800fe38:	7ff00000 	.word	0x7ff00000
 800fe3c:	08011fbd 	.word	0x08011fbd
 800fe40:	08011fb4 	.word	0x08011fb4
 800fe44:	08011f91 	.word	0x08011f91
 800fe48:	3ff80000 	.word	0x3ff80000
 800fe4c:	080120c8 	.word	0x080120c8
 800fe50:	08012030 	.word	0x08012030
 800fe54:	2301      	movs	r3, #1
 800fe56:	9309      	str	r3, [sp, #36]	; 0x24
 800fe58:	e7d7      	b.n	800fe0a <_dtoa_r+0x2c2>
 800fe5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe5c:	9301      	str	r3, [sp, #4]
 800fe5e:	9304      	str	r3, [sp, #16]
 800fe60:	e7ba      	b.n	800fdd8 <_dtoa_r+0x290>
 800fe62:	3101      	adds	r1, #1
 800fe64:	0052      	lsls	r2, r2, #1
 800fe66:	e7ba      	b.n	800fdde <_dtoa_r+0x296>
 800fe68:	69e3      	ldr	r3, [r4, #28]
 800fe6a:	9a00      	ldr	r2, [sp, #0]
 800fe6c:	601a      	str	r2, [r3, #0]
 800fe6e:	9b04      	ldr	r3, [sp, #16]
 800fe70:	2b0e      	cmp	r3, #14
 800fe72:	f200 80a8 	bhi.w	800ffc6 <_dtoa_r+0x47e>
 800fe76:	2d00      	cmp	r5, #0
 800fe78:	f000 80a5 	beq.w	800ffc6 <_dtoa_r+0x47e>
 800fe7c:	f1bb 0f00 	cmp.w	fp, #0
 800fe80:	dd38      	ble.n	800fef4 <_dtoa_r+0x3ac>
 800fe82:	4bc0      	ldr	r3, [pc, #768]	; (8010184 <_dtoa_r+0x63c>)
 800fe84:	f00b 020f 	and.w	r2, fp, #15
 800fe88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fe8c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800fe90:	e9d3 6700 	ldrd	r6, r7, [r3]
 800fe94:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fe98:	d019      	beq.n	800fece <_dtoa_r+0x386>
 800fe9a:	4bbb      	ldr	r3, [pc, #748]	; (8010188 <_dtoa_r+0x640>)
 800fe9c:	ec51 0b18 	vmov	r0, r1, d8
 800fea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fea4:	f7f0 fcf2 	bl	800088c <__aeabi_ddiv>
 800fea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800feac:	f008 080f 	and.w	r8, r8, #15
 800feb0:	2503      	movs	r5, #3
 800feb2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010188 <_dtoa_r+0x640>
 800feb6:	f1b8 0f00 	cmp.w	r8, #0
 800feba:	d10a      	bne.n	800fed2 <_dtoa_r+0x38a>
 800febc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fec0:	4632      	mov	r2, r6
 800fec2:	463b      	mov	r3, r7
 800fec4:	f7f0 fce2 	bl	800088c <__aeabi_ddiv>
 800fec8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fecc:	e02b      	b.n	800ff26 <_dtoa_r+0x3de>
 800fece:	2502      	movs	r5, #2
 800fed0:	e7ef      	b.n	800feb2 <_dtoa_r+0x36a>
 800fed2:	f018 0f01 	tst.w	r8, #1
 800fed6:	d008      	beq.n	800feea <_dtoa_r+0x3a2>
 800fed8:	4630      	mov	r0, r6
 800feda:	4639      	mov	r1, r7
 800fedc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fee0:	f7f0 fbaa 	bl	8000638 <__aeabi_dmul>
 800fee4:	3501      	adds	r5, #1
 800fee6:	4606      	mov	r6, r0
 800fee8:	460f      	mov	r7, r1
 800feea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800feee:	f109 0908 	add.w	r9, r9, #8
 800fef2:	e7e0      	b.n	800feb6 <_dtoa_r+0x36e>
 800fef4:	f000 809f 	beq.w	8010036 <_dtoa_r+0x4ee>
 800fef8:	f1cb 0600 	rsb	r6, fp, #0
 800fefc:	4ba1      	ldr	r3, [pc, #644]	; (8010184 <_dtoa_r+0x63c>)
 800fefe:	4fa2      	ldr	r7, [pc, #648]	; (8010188 <_dtoa_r+0x640>)
 800ff00:	f006 020f 	and.w	r2, r6, #15
 800ff04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0c:	ec51 0b18 	vmov	r0, r1, d8
 800ff10:	f7f0 fb92 	bl	8000638 <__aeabi_dmul>
 800ff14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff18:	1136      	asrs	r6, r6, #4
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	2502      	movs	r5, #2
 800ff1e:	2e00      	cmp	r6, #0
 800ff20:	d17e      	bne.n	8010020 <_dtoa_r+0x4d8>
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d1d0      	bne.n	800fec8 <_dtoa_r+0x380>
 800ff26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff28:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	f000 8084 	beq.w	801003a <_dtoa_r+0x4f2>
 800ff32:	4b96      	ldr	r3, [pc, #600]	; (801018c <_dtoa_r+0x644>)
 800ff34:	2200      	movs	r2, #0
 800ff36:	4640      	mov	r0, r8
 800ff38:	4649      	mov	r1, r9
 800ff3a:	f7f0 fdef 	bl	8000b1c <__aeabi_dcmplt>
 800ff3e:	2800      	cmp	r0, #0
 800ff40:	d07b      	beq.n	801003a <_dtoa_r+0x4f2>
 800ff42:	9b04      	ldr	r3, [sp, #16]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d078      	beq.n	801003a <_dtoa_r+0x4f2>
 800ff48:	9b01      	ldr	r3, [sp, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	dd39      	ble.n	800ffc2 <_dtoa_r+0x47a>
 800ff4e:	4b90      	ldr	r3, [pc, #576]	; (8010190 <_dtoa_r+0x648>)
 800ff50:	2200      	movs	r2, #0
 800ff52:	4640      	mov	r0, r8
 800ff54:	4649      	mov	r1, r9
 800ff56:	f7f0 fb6f 	bl	8000638 <__aeabi_dmul>
 800ff5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff5e:	9e01      	ldr	r6, [sp, #4]
 800ff60:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ff64:	3501      	adds	r5, #1
 800ff66:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ff6a:	4628      	mov	r0, r5
 800ff6c:	f7f0 fafa 	bl	8000564 <__aeabi_i2d>
 800ff70:	4642      	mov	r2, r8
 800ff72:	464b      	mov	r3, r9
 800ff74:	f7f0 fb60 	bl	8000638 <__aeabi_dmul>
 800ff78:	4b86      	ldr	r3, [pc, #536]	; (8010194 <_dtoa_r+0x64c>)
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f7f0 f9a6 	bl	80002cc <__adddf3>
 800ff80:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ff84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff88:	9303      	str	r3, [sp, #12]
 800ff8a:	2e00      	cmp	r6, #0
 800ff8c:	d158      	bne.n	8010040 <_dtoa_r+0x4f8>
 800ff8e:	4b82      	ldr	r3, [pc, #520]	; (8010198 <_dtoa_r+0x650>)
 800ff90:	2200      	movs	r2, #0
 800ff92:	4640      	mov	r0, r8
 800ff94:	4649      	mov	r1, r9
 800ff96:	f7f0 f997 	bl	80002c8 <__aeabi_dsub>
 800ff9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ff9e:	4680      	mov	r8, r0
 800ffa0:	4689      	mov	r9, r1
 800ffa2:	f7f0 fdd9 	bl	8000b58 <__aeabi_dcmpgt>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	f040 8296 	bne.w	80104d8 <_dtoa_r+0x990>
 800ffac:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ffb0:	4640      	mov	r0, r8
 800ffb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ffb6:	4649      	mov	r1, r9
 800ffb8:	f7f0 fdb0 	bl	8000b1c <__aeabi_dcmplt>
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	f040 8289 	bne.w	80104d4 <_dtoa_r+0x98c>
 800ffc2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ffc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	f2c0 814e 	blt.w	801026a <_dtoa_r+0x722>
 800ffce:	f1bb 0f0e 	cmp.w	fp, #14
 800ffd2:	f300 814a 	bgt.w	801026a <_dtoa_r+0x722>
 800ffd6:	4b6b      	ldr	r3, [pc, #428]	; (8010184 <_dtoa_r+0x63c>)
 800ffd8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ffdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ffe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	f280 80dc 	bge.w	80101a0 <_dtoa_r+0x658>
 800ffe8:	9b04      	ldr	r3, [sp, #16]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	f300 80d8 	bgt.w	80101a0 <_dtoa_r+0x658>
 800fff0:	f040 826f 	bne.w	80104d2 <_dtoa_r+0x98a>
 800fff4:	4b68      	ldr	r3, [pc, #416]	; (8010198 <_dtoa_r+0x650>)
 800fff6:	2200      	movs	r2, #0
 800fff8:	4640      	mov	r0, r8
 800fffa:	4649      	mov	r1, r9
 800fffc:	f7f0 fb1c 	bl	8000638 <__aeabi_dmul>
 8010000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010004:	f7f0 fd9e 	bl	8000b44 <__aeabi_dcmpge>
 8010008:	9e04      	ldr	r6, [sp, #16]
 801000a:	4637      	mov	r7, r6
 801000c:	2800      	cmp	r0, #0
 801000e:	f040 8245 	bne.w	801049c <_dtoa_r+0x954>
 8010012:	9d00      	ldr	r5, [sp, #0]
 8010014:	2331      	movs	r3, #49	; 0x31
 8010016:	f805 3b01 	strb.w	r3, [r5], #1
 801001a:	f10b 0b01 	add.w	fp, fp, #1
 801001e:	e241      	b.n	80104a4 <_dtoa_r+0x95c>
 8010020:	07f2      	lsls	r2, r6, #31
 8010022:	d505      	bpl.n	8010030 <_dtoa_r+0x4e8>
 8010024:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010028:	f7f0 fb06 	bl	8000638 <__aeabi_dmul>
 801002c:	3501      	adds	r5, #1
 801002e:	2301      	movs	r3, #1
 8010030:	1076      	asrs	r6, r6, #1
 8010032:	3708      	adds	r7, #8
 8010034:	e773      	b.n	800ff1e <_dtoa_r+0x3d6>
 8010036:	2502      	movs	r5, #2
 8010038:	e775      	b.n	800ff26 <_dtoa_r+0x3de>
 801003a:	9e04      	ldr	r6, [sp, #16]
 801003c:	465f      	mov	r7, fp
 801003e:	e792      	b.n	800ff66 <_dtoa_r+0x41e>
 8010040:	9900      	ldr	r1, [sp, #0]
 8010042:	4b50      	ldr	r3, [pc, #320]	; (8010184 <_dtoa_r+0x63c>)
 8010044:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010048:	4431      	add	r1, r6
 801004a:	9102      	str	r1, [sp, #8]
 801004c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801004e:	eeb0 9a47 	vmov.f32	s18, s14
 8010052:	eef0 9a67 	vmov.f32	s19, s15
 8010056:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801005a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801005e:	2900      	cmp	r1, #0
 8010060:	d044      	beq.n	80100ec <_dtoa_r+0x5a4>
 8010062:	494e      	ldr	r1, [pc, #312]	; (801019c <_dtoa_r+0x654>)
 8010064:	2000      	movs	r0, #0
 8010066:	f7f0 fc11 	bl	800088c <__aeabi_ddiv>
 801006a:	ec53 2b19 	vmov	r2, r3, d9
 801006e:	f7f0 f92b 	bl	80002c8 <__aeabi_dsub>
 8010072:	9d00      	ldr	r5, [sp, #0]
 8010074:	ec41 0b19 	vmov	d9, r0, r1
 8010078:	4649      	mov	r1, r9
 801007a:	4640      	mov	r0, r8
 801007c:	f7f0 fd8c 	bl	8000b98 <__aeabi_d2iz>
 8010080:	4606      	mov	r6, r0
 8010082:	f7f0 fa6f 	bl	8000564 <__aeabi_i2d>
 8010086:	4602      	mov	r2, r0
 8010088:	460b      	mov	r3, r1
 801008a:	4640      	mov	r0, r8
 801008c:	4649      	mov	r1, r9
 801008e:	f7f0 f91b 	bl	80002c8 <__aeabi_dsub>
 8010092:	3630      	adds	r6, #48	; 0x30
 8010094:	f805 6b01 	strb.w	r6, [r5], #1
 8010098:	ec53 2b19 	vmov	r2, r3, d9
 801009c:	4680      	mov	r8, r0
 801009e:	4689      	mov	r9, r1
 80100a0:	f7f0 fd3c 	bl	8000b1c <__aeabi_dcmplt>
 80100a4:	2800      	cmp	r0, #0
 80100a6:	d164      	bne.n	8010172 <_dtoa_r+0x62a>
 80100a8:	4642      	mov	r2, r8
 80100aa:	464b      	mov	r3, r9
 80100ac:	4937      	ldr	r1, [pc, #220]	; (801018c <_dtoa_r+0x644>)
 80100ae:	2000      	movs	r0, #0
 80100b0:	f7f0 f90a 	bl	80002c8 <__aeabi_dsub>
 80100b4:	ec53 2b19 	vmov	r2, r3, d9
 80100b8:	f7f0 fd30 	bl	8000b1c <__aeabi_dcmplt>
 80100bc:	2800      	cmp	r0, #0
 80100be:	f040 80b6 	bne.w	801022e <_dtoa_r+0x6e6>
 80100c2:	9b02      	ldr	r3, [sp, #8]
 80100c4:	429d      	cmp	r5, r3
 80100c6:	f43f af7c 	beq.w	800ffc2 <_dtoa_r+0x47a>
 80100ca:	4b31      	ldr	r3, [pc, #196]	; (8010190 <_dtoa_r+0x648>)
 80100cc:	ec51 0b19 	vmov	r0, r1, d9
 80100d0:	2200      	movs	r2, #0
 80100d2:	f7f0 fab1 	bl	8000638 <__aeabi_dmul>
 80100d6:	4b2e      	ldr	r3, [pc, #184]	; (8010190 <_dtoa_r+0x648>)
 80100d8:	ec41 0b19 	vmov	d9, r0, r1
 80100dc:	2200      	movs	r2, #0
 80100de:	4640      	mov	r0, r8
 80100e0:	4649      	mov	r1, r9
 80100e2:	f7f0 faa9 	bl	8000638 <__aeabi_dmul>
 80100e6:	4680      	mov	r8, r0
 80100e8:	4689      	mov	r9, r1
 80100ea:	e7c5      	b.n	8010078 <_dtoa_r+0x530>
 80100ec:	ec51 0b17 	vmov	r0, r1, d7
 80100f0:	f7f0 faa2 	bl	8000638 <__aeabi_dmul>
 80100f4:	9b02      	ldr	r3, [sp, #8]
 80100f6:	9d00      	ldr	r5, [sp, #0]
 80100f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80100fa:	ec41 0b19 	vmov	d9, r0, r1
 80100fe:	4649      	mov	r1, r9
 8010100:	4640      	mov	r0, r8
 8010102:	f7f0 fd49 	bl	8000b98 <__aeabi_d2iz>
 8010106:	4606      	mov	r6, r0
 8010108:	f7f0 fa2c 	bl	8000564 <__aeabi_i2d>
 801010c:	3630      	adds	r6, #48	; 0x30
 801010e:	4602      	mov	r2, r0
 8010110:	460b      	mov	r3, r1
 8010112:	4640      	mov	r0, r8
 8010114:	4649      	mov	r1, r9
 8010116:	f7f0 f8d7 	bl	80002c8 <__aeabi_dsub>
 801011a:	f805 6b01 	strb.w	r6, [r5], #1
 801011e:	9b02      	ldr	r3, [sp, #8]
 8010120:	429d      	cmp	r5, r3
 8010122:	4680      	mov	r8, r0
 8010124:	4689      	mov	r9, r1
 8010126:	f04f 0200 	mov.w	r2, #0
 801012a:	d124      	bne.n	8010176 <_dtoa_r+0x62e>
 801012c:	4b1b      	ldr	r3, [pc, #108]	; (801019c <_dtoa_r+0x654>)
 801012e:	ec51 0b19 	vmov	r0, r1, d9
 8010132:	f7f0 f8cb 	bl	80002cc <__adddf3>
 8010136:	4602      	mov	r2, r0
 8010138:	460b      	mov	r3, r1
 801013a:	4640      	mov	r0, r8
 801013c:	4649      	mov	r1, r9
 801013e:	f7f0 fd0b 	bl	8000b58 <__aeabi_dcmpgt>
 8010142:	2800      	cmp	r0, #0
 8010144:	d173      	bne.n	801022e <_dtoa_r+0x6e6>
 8010146:	ec53 2b19 	vmov	r2, r3, d9
 801014a:	4914      	ldr	r1, [pc, #80]	; (801019c <_dtoa_r+0x654>)
 801014c:	2000      	movs	r0, #0
 801014e:	f7f0 f8bb 	bl	80002c8 <__aeabi_dsub>
 8010152:	4602      	mov	r2, r0
 8010154:	460b      	mov	r3, r1
 8010156:	4640      	mov	r0, r8
 8010158:	4649      	mov	r1, r9
 801015a:	f7f0 fcdf 	bl	8000b1c <__aeabi_dcmplt>
 801015e:	2800      	cmp	r0, #0
 8010160:	f43f af2f 	beq.w	800ffc2 <_dtoa_r+0x47a>
 8010164:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010166:	1e6b      	subs	r3, r5, #1
 8010168:	930f      	str	r3, [sp, #60]	; 0x3c
 801016a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801016e:	2b30      	cmp	r3, #48	; 0x30
 8010170:	d0f8      	beq.n	8010164 <_dtoa_r+0x61c>
 8010172:	46bb      	mov	fp, r7
 8010174:	e04a      	b.n	801020c <_dtoa_r+0x6c4>
 8010176:	4b06      	ldr	r3, [pc, #24]	; (8010190 <_dtoa_r+0x648>)
 8010178:	f7f0 fa5e 	bl	8000638 <__aeabi_dmul>
 801017c:	4680      	mov	r8, r0
 801017e:	4689      	mov	r9, r1
 8010180:	e7bd      	b.n	80100fe <_dtoa_r+0x5b6>
 8010182:	bf00      	nop
 8010184:	080120c8 	.word	0x080120c8
 8010188:	080120a0 	.word	0x080120a0
 801018c:	3ff00000 	.word	0x3ff00000
 8010190:	40240000 	.word	0x40240000
 8010194:	401c0000 	.word	0x401c0000
 8010198:	40140000 	.word	0x40140000
 801019c:	3fe00000 	.word	0x3fe00000
 80101a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80101a4:	9d00      	ldr	r5, [sp, #0]
 80101a6:	4642      	mov	r2, r8
 80101a8:	464b      	mov	r3, r9
 80101aa:	4630      	mov	r0, r6
 80101ac:	4639      	mov	r1, r7
 80101ae:	f7f0 fb6d 	bl	800088c <__aeabi_ddiv>
 80101b2:	f7f0 fcf1 	bl	8000b98 <__aeabi_d2iz>
 80101b6:	9001      	str	r0, [sp, #4]
 80101b8:	f7f0 f9d4 	bl	8000564 <__aeabi_i2d>
 80101bc:	4642      	mov	r2, r8
 80101be:	464b      	mov	r3, r9
 80101c0:	f7f0 fa3a 	bl	8000638 <__aeabi_dmul>
 80101c4:	4602      	mov	r2, r0
 80101c6:	460b      	mov	r3, r1
 80101c8:	4630      	mov	r0, r6
 80101ca:	4639      	mov	r1, r7
 80101cc:	f7f0 f87c 	bl	80002c8 <__aeabi_dsub>
 80101d0:	9e01      	ldr	r6, [sp, #4]
 80101d2:	9f04      	ldr	r7, [sp, #16]
 80101d4:	3630      	adds	r6, #48	; 0x30
 80101d6:	f805 6b01 	strb.w	r6, [r5], #1
 80101da:	9e00      	ldr	r6, [sp, #0]
 80101dc:	1bae      	subs	r6, r5, r6
 80101de:	42b7      	cmp	r7, r6
 80101e0:	4602      	mov	r2, r0
 80101e2:	460b      	mov	r3, r1
 80101e4:	d134      	bne.n	8010250 <_dtoa_r+0x708>
 80101e6:	f7f0 f871 	bl	80002cc <__adddf3>
 80101ea:	4642      	mov	r2, r8
 80101ec:	464b      	mov	r3, r9
 80101ee:	4606      	mov	r6, r0
 80101f0:	460f      	mov	r7, r1
 80101f2:	f7f0 fcb1 	bl	8000b58 <__aeabi_dcmpgt>
 80101f6:	b9c8      	cbnz	r0, 801022c <_dtoa_r+0x6e4>
 80101f8:	4642      	mov	r2, r8
 80101fa:	464b      	mov	r3, r9
 80101fc:	4630      	mov	r0, r6
 80101fe:	4639      	mov	r1, r7
 8010200:	f7f0 fc82 	bl	8000b08 <__aeabi_dcmpeq>
 8010204:	b110      	cbz	r0, 801020c <_dtoa_r+0x6c4>
 8010206:	9b01      	ldr	r3, [sp, #4]
 8010208:	07db      	lsls	r3, r3, #31
 801020a:	d40f      	bmi.n	801022c <_dtoa_r+0x6e4>
 801020c:	4651      	mov	r1, sl
 801020e:	4620      	mov	r0, r4
 8010210:	f000 fbcc 	bl	80109ac <_Bfree>
 8010214:	2300      	movs	r3, #0
 8010216:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010218:	702b      	strb	r3, [r5, #0]
 801021a:	f10b 0301 	add.w	r3, fp, #1
 801021e:	6013      	str	r3, [r2, #0]
 8010220:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010222:	2b00      	cmp	r3, #0
 8010224:	f43f ace2 	beq.w	800fbec <_dtoa_r+0xa4>
 8010228:	601d      	str	r5, [r3, #0]
 801022a:	e4df      	b.n	800fbec <_dtoa_r+0xa4>
 801022c:	465f      	mov	r7, fp
 801022e:	462b      	mov	r3, r5
 8010230:	461d      	mov	r5, r3
 8010232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010236:	2a39      	cmp	r2, #57	; 0x39
 8010238:	d106      	bne.n	8010248 <_dtoa_r+0x700>
 801023a:	9a00      	ldr	r2, [sp, #0]
 801023c:	429a      	cmp	r2, r3
 801023e:	d1f7      	bne.n	8010230 <_dtoa_r+0x6e8>
 8010240:	9900      	ldr	r1, [sp, #0]
 8010242:	2230      	movs	r2, #48	; 0x30
 8010244:	3701      	adds	r7, #1
 8010246:	700a      	strb	r2, [r1, #0]
 8010248:	781a      	ldrb	r2, [r3, #0]
 801024a:	3201      	adds	r2, #1
 801024c:	701a      	strb	r2, [r3, #0]
 801024e:	e790      	b.n	8010172 <_dtoa_r+0x62a>
 8010250:	4ba3      	ldr	r3, [pc, #652]	; (80104e0 <_dtoa_r+0x998>)
 8010252:	2200      	movs	r2, #0
 8010254:	f7f0 f9f0 	bl	8000638 <__aeabi_dmul>
 8010258:	2200      	movs	r2, #0
 801025a:	2300      	movs	r3, #0
 801025c:	4606      	mov	r6, r0
 801025e:	460f      	mov	r7, r1
 8010260:	f7f0 fc52 	bl	8000b08 <__aeabi_dcmpeq>
 8010264:	2800      	cmp	r0, #0
 8010266:	d09e      	beq.n	80101a6 <_dtoa_r+0x65e>
 8010268:	e7d0      	b.n	801020c <_dtoa_r+0x6c4>
 801026a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801026c:	2a00      	cmp	r2, #0
 801026e:	f000 80ca 	beq.w	8010406 <_dtoa_r+0x8be>
 8010272:	9a07      	ldr	r2, [sp, #28]
 8010274:	2a01      	cmp	r2, #1
 8010276:	f300 80ad 	bgt.w	80103d4 <_dtoa_r+0x88c>
 801027a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801027c:	2a00      	cmp	r2, #0
 801027e:	f000 80a5 	beq.w	80103cc <_dtoa_r+0x884>
 8010282:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010286:	9e08      	ldr	r6, [sp, #32]
 8010288:	9d05      	ldr	r5, [sp, #20]
 801028a:	9a05      	ldr	r2, [sp, #20]
 801028c:	441a      	add	r2, r3
 801028e:	9205      	str	r2, [sp, #20]
 8010290:	9a06      	ldr	r2, [sp, #24]
 8010292:	2101      	movs	r1, #1
 8010294:	441a      	add	r2, r3
 8010296:	4620      	mov	r0, r4
 8010298:	9206      	str	r2, [sp, #24]
 801029a:	f000 fc3d 	bl	8010b18 <__i2b>
 801029e:	4607      	mov	r7, r0
 80102a0:	b165      	cbz	r5, 80102bc <_dtoa_r+0x774>
 80102a2:	9b06      	ldr	r3, [sp, #24]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	dd09      	ble.n	80102bc <_dtoa_r+0x774>
 80102a8:	42ab      	cmp	r3, r5
 80102aa:	9a05      	ldr	r2, [sp, #20]
 80102ac:	bfa8      	it	ge
 80102ae:	462b      	movge	r3, r5
 80102b0:	1ad2      	subs	r2, r2, r3
 80102b2:	9205      	str	r2, [sp, #20]
 80102b4:	9a06      	ldr	r2, [sp, #24]
 80102b6:	1aed      	subs	r5, r5, r3
 80102b8:	1ad3      	subs	r3, r2, r3
 80102ba:	9306      	str	r3, [sp, #24]
 80102bc:	9b08      	ldr	r3, [sp, #32]
 80102be:	b1f3      	cbz	r3, 80102fe <_dtoa_r+0x7b6>
 80102c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f000 80a3 	beq.w	801040e <_dtoa_r+0x8c6>
 80102c8:	2e00      	cmp	r6, #0
 80102ca:	dd10      	ble.n	80102ee <_dtoa_r+0x7a6>
 80102cc:	4639      	mov	r1, r7
 80102ce:	4632      	mov	r2, r6
 80102d0:	4620      	mov	r0, r4
 80102d2:	f000 fce1 	bl	8010c98 <__pow5mult>
 80102d6:	4652      	mov	r2, sl
 80102d8:	4601      	mov	r1, r0
 80102da:	4607      	mov	r7, r0
 80102dc:	4620      	mov	r0, r4
 80102de:	f000 fc31 	bl	8010b44 <__multiply>
 80102e2:	4651      	mov	r1, sl
 80102e4:	4680      	mov	r8, r0
 80102e6:	4620      	mov	r0, r4
 80102e8:	f000 fb60 	bl	80109ac <_Bfree>
 80102ec:	46c2      	mov	sl, r8
 80102ee:	9b08      	ldr	r3, [sp, #32]
 80102f0:	1b9a      	subs	r2, r3, r6
 80102f2:	d004      	beq.n	80102fe <_dtoa_r+0x7b6>
 80102f4:	4651      	mov	r1, sl
 80102f6:	4620      	mov	r0, r4
 80102f8:	f000 fcce 	bl	8010c98 <__pow5mult>
 80102fc:	4682      	mov	sl, r0
 80102fe:	2101      	movs	r1, #1
 8010300:	4620      	mov	r0, r4
 8010302:	f000 fc09 	bl	8010b18 <__i2b>
 8010306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010308:	2b00      	cmp	r3, #0
 801030a:	4606      	mov	r6, r0
 801030c:	f340 8081 	ble.w	8010412 <_dtoa_r+0x8ca>
 8010310:	461a      	mov	r2, r3
 8010312:	4601      	mov	r1, r0
 8010314:	4620      	mov	r0, r4
 8010316:	f000 fcbf 	bl	8010c98 <__pow5mult>
 801031a:	9b07      	ldr	r3, [sp, #28]
 801031c:	2b01      	cmp	r3, #1
 801031e:	4606      	mov	r6, r0
 8010320:	dd7a      	ble.n	8010418 <_dtoa_r+0x8d0>
 8010322:	f04f 0800 	mov.w	r8, #0
 8010326:	6933      	ldr	r3, [r6, #16]
 8010328:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801032c:	6918      	ldr	r0, [r3, #16]
 801032e:	f000 fba5 	bl	8010a7c <__hi0bits>
 8010332:	f1c0 0020 	rsb	r0, r0, #32
 8010336:	9b06      	ldr	r3, [sp, #24]
 8010338:	4418      	add	r0, r3
 801033a:	f010 001f 	ands.w	r0, r0, #31
 801033e:	f000 8094 	beq.w	801046a <_dtoa_r+0x922>
 8010342:	f1c0 0320 	rsb	r3, r0, #32
 8010346:	2b04      	cmp	r3, #4
 8010348:	f340 8085 	ble.w	8010456 <_dtoa_r+0x90e>
 801034c:	9b05      	ldr	r3, [sp, #20]
 801034e:	f1c0 001c 	rsb	r0, r0, #28
 8010352:	4403      	add	r3, r0
 8010354:	9305      	str	r3, [sp, #20]
 8010356:	9b06      	ldr	r3, [sp, #24]
 8010358:	4403      	add	r3, r0
 801035a:	4405      	add	r5, r0
 801035c:	9306      	str	r3, [sp, #24]
 801035e:	9b05      	ldr	r3, [sp, #20]
 8010360:	2b00      	cmp	r3, #0
 8010362:	dd05      	ble.n	8010370 <_dtoa_r+0x828>
 8010364:	4651      	mov	r1, sl
 8010366:	461a      	mov	r2, r3
 8010368:	4620      	mov	r0, r4
 801036a:	f000 fcef 	bl	8010d4c <__lshift>
 801036e:	4682      	mov	sl, r0
 8010370:	9b06      	ldr	r3, [sp, #24]
 8010372:	2b00      	cmp	r3, #0
 8010374:	dd05      	ble.n	8010382 <_dtoa_r+0x83a>
 8010376:	4631      	mov	r1, r6
 8010378:	461a      	mov	r2, r3
 801037a:	4620      	mov	r0, r4
 801037c:	f000 fce6 	bl	8010d4c <__lshift>
 8010380:	4606      	mov	r6, r0
 8010382:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010384:	2b00      	cmp	r3, #0
 8010386:	d072      	beq.n	801046e <_dtoa_r+0x926>
 8010388:	4631      	mov	r1, r6
 801038a:	4650      	mov	r0, sl
 801038c:	f000 fd4a 	bl	8010e24 <__mcmp>
 8010390:	2800      	cmp	r0, #0
 8010392:	da6c      	bge.n	801046e <_dtoa_r+0x926>
 8010394:	2300      	movs	r3, #0
 8010396:	4651      	mov	r1, sl
 8010398:	220a      	movs	r2, #10
 801039a:	4620      	mov	r0, r4
 801039c:	f000 fb28 	bl	80109f0 <__multadd>
 80103a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80103a6:	4682      	mov	sl, r0
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	f000 81b0 	beq.w	801070e <_dtoa_r+0xbc6>
 80103ae:	2300      	movs	r3, #0
 80103b0:	4639      	mov	r1, r7
 80103b2:	220a      	movs	r2, #10
 80103b4:	4620      	mov	r0, r4
 80103b6:	f000 fb1b 	bl	80109f0 <__multadd>
 80103ba:	9b01      	ldr	r3, [sp, #4]
 80103bc:	2b00      	cmp	r3, #0
 80103be:	4607      	mov	r7, r0
 80103c0:	f300 8096 	bgt.w	80104f0 <_dtoa_r+0x9a8>
 80103c4:	9b07      	ldr	r3, [sp, #28]
 80103c6:	2b02      	cmp	r3, #2
 80103c8:	dc59      	bgt.n	801047e <_dtoa_r+0x936>
 80103ca:	e091      	b.n	80104f0 <_dtoa_r+0x9a8>
 80103cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80103ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80103d2:	e758      	b.n	8010286 <_dtoa_r+0x73e>
 80103d4:	9b04      	ldr	r3, [sp, #16]
 80103d6:	1e5e      	subs	r6, r3, #1
 80103d8:	9b08      	ldr	r3, [sp, #32]
 80103da:	42b3      	cmp	r3, r6
 80103dc:	bfbf      	itttt	lt
 80103de:	9b08      	ldrlt	r3, [sp, #32]
 80103e0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80103e2:	9608      	strlt	r6, [sp, #32]
 80103e4:	1af3      	sublt	r3, r6, r3
 80103e6:	bfb4      	ite	lt
 80103e8:	18d2      	addlt	r2, r2, r3
 80103ea:	1b9e      	subge	r6, r3, r6
 80103ec:	9b04      	ldr	r3, [sp, #16]
 80103ee:	bfbc      	itt	lt
 80103f0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80103f2:	2600      	movlt	r6, #0
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	bfb7      	itett	lt
 80103f8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80103fc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010400:	1a9d      	sublt	r5, r3, r2
 8010402:	2300      	movlt	r3, #0
 8010404:	e741      	b.n	801028a <_dtoa_r+0x742>
 8010406:	9e08      	ldr	r6, [sp, #32]
 8010408:	9d05      	ldr	r5, [sp, #20]
 801040a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801040c:	e748      	b.n	80102a0 <_dtoa_r+0x758>
 801040e:	9a08      	ldr	r2, [sp, #32]
 8010410:	e770      	b.n	80102f4 <_dtoa_r+0x7ac>
 8010412:	9b07      	ldr	r3, [sp, #28]
 8010414:	2b01      	cmp	r3, #1
 8010416:	dc19      	bgt.n	801044c <_dtoa_r+0x904>
 8010418:	9b02      	ldr	r3, [sp, #8]
 801041a:	b9bb      	cbnz	r3, 801044c <_dtoa_r+0x904>
 801041c:	9b03      	ldr	r3, [sp, #12]
 801041e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010422:	b99b      	cbnz	r3, 801044c <_dtoa_r+0x904>
 8010424:	9b03      	ldr	r3, [sp, #12]
 8010426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801042a:	0d1b      	lsrs	r3, r3, #20
 801042c:	051b      	lsls	r3, r3, #20
 801042e:	b183      	cbz	r3, 8010452 <_dtoa_r+0x90a>
 8010430:	9b05      	ldr	r3, [sp, #20]
 8010432:	3301      	adds	r3, #1
 8010434:	9305      	str	r3, [sp, #20]
 8010436:	9b06      	ldr	r3, [sp, #24]
 8010438:	3301      	adds	r3, #1
 801043a:	9306      	str	r3, [sp, #24]
 801043c:	f04f 0801 	mov.w	r8, #1
 8010440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010442:	2b00      	cmp	r3, #0
 8010444:	f47f af6f 	bne.w	8010326 <_dtoa_r+0x7de>
 8010448:	2001      	movs	r0, #1
 801044a:	e774      	b.n	8010336 <_dtoa_r+0x7ee>
 801044c:	f04f 0800 	mov.w	r8, #0
 8010450:	e7f6      	b.n	8010440 <_dtoa_r+0x8f8>
 8010452:	4698      	mov	r8, r3
 8010454:	e7f4      	b.n	8010440 <_dtoa_r+0x8f8>
 8010456:	d082      	beq.n	801035e <_dtoa_r+0x816>
 8010458:	9a05      	ldr	r2, [sp, #20]
 801045a:	331c      	adds	r3, #28
 801045c:	441a      	add	r2, r3
 801045e:	9205      	str	r2, [sp, #20]
 8010460:	9a06      	ldr	r2, [sp, #24]
 8010462:	441a      	add	r2, r3
 8010464:	441d      	add	r5, r3
 8010466:	9206      	str	r2, [sp, #24]
 8010468:	e779      	b.n	801035e <_dtoa_r+0x816>
 801046a:	4603      	mov	r3, r0
 801046c:	e7f4      	b.n	8010458 <_dtoa_r+0x910>
 801046e:	9b04      	ldr	r3, [sp, #16]
 8010470:	2b00      	cmp	r3, #0
 8010472:	dc37      	bgt.n	80104e4 <_dtoa_r+0x99c>
 8010474:	9b07      	ldr	r3, [sp, #28]
 8010476:	2b02      	cmp	r3, #2
 8010478:	dd34      	ble.n	80104e4 <_dtoa_r+0x99c>
 801047a:	9b04      	ldr	r3, [sp, #16]
 801047c:	9301      	str	r3, [sp, #4]
 801047e:	9b01      	ldr	r3, [sp, #4]
 8010480:	b963      	cbnz	r3, 801049c <_dtoa_r+0x954>
 8010482:	4631      	mov	r1, r6
 8010484:	2205      	movs	r2, #5
 8010486:	4620      	mov	r0, r4
 8010488:	f000 fab2 	bl	80109f0 <__multadd>
 801048c:	4601      	mov	r1, r0
 801048e:	4606      	mov	r6, r0
 8010490:	4650      	mov	r0, sl
 8010492:	f000 fcc7 	bl	8010e24 <__mcmp>
 8010496:	2800      	cmp	r0, #0
 8010498:	f73f adbb 	bgt.w	8010012 <_dtoa_r+0x4ca>
 801049c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801049e:	9d00      	ldr	r5, [sp, #0]
 80104a0:	ea6f 0b03 	mvn.w	fp, r3
 80104a4:	f04f 0800 	mov.w	r8, #0
 80104a8:	4631      	mov	r1, r6
 80104aa:	4620      	mov	r0, r4
 80104ac:	f000 fa7e 	bl	80109ac <_Bfree>
 80104b0:	2f00      	cmp	r7, #0
 80104b2:	f43f aeab 	beq.w	801020c <_dtoa_r+0x6c4>
 80104b6:	f1b8 0f00 	cmp.w	r8, #0
 80104ba:	d005      	beq.n	80104c8 <_dtoa_r+0x980>
 80104bc:	45b8      	cmp	r8, r7
 80104be:	d003      	beq.n	80104c8 <_dtoa_r+0x980>
 80104c0:	4641      	mov	r1, r8
 80104c2:	4620      	mov	r0, r4
 80104c4:	f000 fa72 	bl	80109ac <_Bfree>
 80104c8:	4639      	mov	r1, r7
 80104ca:	4620      	mov	r0, r4
 80104cc:	f000 fa6e 	bl	80109ac <_Bfree>
 80104d0:	e69c      	b.n	801020c <_dtoa_r+0x6c4>
 80104d2:	2600      	movs	r6, #0
 80104d4:	4637      	mov	r7, r6
 80104d6:	e7e1      	b.n	801049c <_dtoa_r+0x954>
 80104d8:	46bb      	mov	fp, r7
 80104da:	4637      	mov	r7, r6
 80104dc:	e599      	b.n	8010012 <_dtoa_r+0x4ca>
 80104de:	bf00      	nop
 80104e0:	40240000 	.word	0x40240000
 80104e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	f000 80c8 	beq.w	801067c <_dtoa_r+0xb34>
 80104ec:	9b04      	ldr	r3, [sp, #16]
 80104ee:	9301      	str	r3, [sp, #4]
 80104f0:	2d00      	cmp	r5, #0
 80104f2:	dd05      	ble.n	8010500 <_dtoa_r+0x9b8>
 80104f4:	4639      	mov	r1, r7
 80104f6:	462a      	mov	r2, r5
 80104f8:	4620      	mov	r0, r4
 80104fa:	f000 fc27 	bl	8010d4c <__lshift>
 80104fe:	4607      	mov	r7, r0
 8010500:	f1b8 0f00 	cmp.w	r8, #0
 8010504:	d05b      	beq.n	80105be <_dtoa_r+0xa76>
 8010506:	6879      	ldr	r1, [r7, #4]
 8010508:	4620      	mov	r0, r4
 801050a:	f000 fa0f 	bl	801092c <_Balloc>
 801050e:	4605      	mov	r5, r0
 8010510:	b928      	cbnz	r0, 801051e <_dtoa_r+0x9d6>
 8010512:	4b83      	ldr	r3, [pc, #524]	; (8010720 <_dtoa_r+0xbd8>)
 8010514:	4602      	mov	r2, r0
 8010516:	f240 21ef 	movw	r1, #751	; 0x2ef
 801051a:	f7ff bb2e 	b.w	800fb7a <_dtoa_r+0x32>
 801051e:	693a      	ldr	r2, [r7, #16]
 8010520:	3202      	adds	r2, #2
 8010522:	0092      	lsls	r2, r2, #2
 8010524:	f107 010c 	add.w	r1, r7, #12
 8010528:	300c      	adds	r0, #12
 801052a:	f7ff fa75 	bl	800fa18 <memcpy>
 801052e:	2201      	movs	r2, #1
 8010530:	4629      	mov	r1, r5
 8010532:	4620      	mov	r0, r4
 8010534:	f000 fc0a 	bl	8010d4c <__lshift>
 8010538:	9b00      	ldr	r3, [sp, #0]
 801053a:	3301      	adds	r3, #1
 801053c:	9304      	str	r3, [sp, #16]
 801053e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010542:	4413      	add	r3, r2
 8010544:	9308      	str	r3, [sp, #32]
 8010546:	9b02      	ldr	r3, [sp, #8]
 8010548:	f003 0301 	and.w	r3, r3, #1
 801054c:	46b8      	mov	r8, r7
 801054e:	9306      	str	r3, [sp, #24]
 8010550:	4607      	mov	r7, r0
 8010552:	9b04      	ldr	r3, [sp, #16]
 8010554:	4631      	mov	r1, r6
 8010556:	3b01      	subs	r3, #1
 8010558:	4650      	mov	r0, sl
 801055a:	9301      	str	r3, [sp, #4]
 801055c:	f7ff fa6a 	bl	800fa34 <quorem>
 8010560:	4641      	mov	r1, r8
 8010562:	9002      	str	r0, [sp, #8]
 8010564:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010568:	4650      	mov	r0, sl
 801056a:	f000 fc5b 	bl	8010e24 <__mcmp>
 801056e:	463a      	mov	r2, r7
 8010570:	9005      	str	r0, [sp, #20]
 8010572:	4631      	mov	r1, r6
 8010574:	4620      	mov	r0, r4
 8010576:	f000 fc71 	bl	8010e5c <__mdiff>
 801057a:	68c2      	ldr	r2, [r0, #12]
 801057c:	4605      	mov	r5, r0
 801057e:	bb02      	cbnz	r2, 80105c2 <_dtoa_r+0xa7a>
 8010580:	4601      	mov	r1, r0
 8010582:	4650      	mov	r0, sl
 8010584:	f000 fc4e 	bl	8010e24 <__mcmp>
 8010588:	4602      	mov	r2, r0
 801058a:	4629      	mov	r1, r5
 801058c:	4620      	mov	r0, r4
 801058e:	9209      	str	r2, [sp, #36]	; 0x24
 8010590:	f000 fa0c 	bl	80109ac <_Bfree>
 8010594:	9b07      	ldr	r3, [sp, #28]
 8010596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010598:	9d04      	ldr	r5, [sp, #16]
 801059a:	ea43 0102 	orr.w	r1, r3, r2
 801059e:	9b06      	ldr	r3, [sp, #24]
 80105a0:	4319      	orrs	r1, r3
 80105a2:	d110      	bne.n	80105c6 <_dtoa_r+0xa7e>
 80105a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80105a8:	d029      	beq.n	80105fe <_dtoa_r+0xab6>
 80105aa:	9b05      	ldr	r3, [sp, #20]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	dd02      	ble.n	80105b6 <_dtoa_r+0xa6e>
 80105b0:	9b02      	ldr	r3, [sp, #8]
 80105b2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80105b6:	9b01      	ldr	r3, [sp, #4]
 80105b8:	f883 9000 	strb.w	r9, [r3]
 80105bc:	e774      	b.n	80104a8 <_dtoa_r+0x960>
 80105be:	4638      	mov	r0, r7
 80105c0:	e7ba      	b.n	8010538 <_dtoa_r+0x9f0>
 80105c2:	2201      	movs	r2, #1
 80105c4:	e7e1      	b.n	801058a <_dtoa_r+0xa42>
 80105c6:	9b05      	ldr	r3, [sp, #20]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	db04      	blt.n	80105d6 <_dtoa_r+0xa8e>
 80105cc:	9907      	ldr	r1, [sp, #28]
 80105ce:	430b      	orrs	r3, r1
 80105d0:	9906      	ldr	r1, [sp, #24]
 80105d2:	430b      	orrs	r3, r1
 80105d4:	d120      	bne.n	8010618 <_dtoa_r+0xad0>
 80105d6:	2a00      	cmp	r2, #0
 80105d8:	dded      	ble.n	80105b6 <_dtoa_r+0xa6e>
 80105da:	4651      	mov	r1, sl
 80105dc:	2201      	movs	r2, #1
 80105de:	4620      	mov	r0, r4
 80105e0:	f000 fbb4 	bl	8010d4c <__lshift>
 80105e4:	4631      	mov	r1, r6
 80105e6:	4682      	mov	sl, r0
 80105e8:	f000 fc1c 	bl	8010e24 <__mcmp>
 80105ec:	2800      	cmp	r0, #0
 80105ee:	dc03      	bgt.n	80105f8 <_dtoa_r+0xab0>
 80105f0:	d1e1      	bne.n	80105b6 <_dtoa_r+0xa6e>
 80105f2:	f019 0f01 	tst.w	r9, #1
 80105f6:	d0de      	beq.n	80105b6 <_dtoa_r+0xa6e>
 80105f8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80105fc:	d1d8      	bne.n	80105b0 <_dtoa_r+0xa68>
 80105fe:	9a01      	ldr	r2, [sp, #4]
 8010600:	2339      	movs	r3, #57	; 0x39
 8010602:	7013      	strb	r3, [r2, #0]
 8010604:	462b      	mov	r3, r5
 8010606:	461d      	mov	r5, r3
 8010608:	3b01      	subs	r3, #1
 801060a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801060e:	2a39      	cmp	r2, #57	; 0x39
 8010610:	d06c      	beq.n	80106ec <_dtoa_r+0xba4>
 8010612:	3201      	adds	r2, #1
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	e747      	b.n	80104a8 <_dtoa_r+0x960>
 8010618:	2a00      	cmp	r2, #0
 801061a:	dd07      	ble.n	801062c <_dtoa_r+0xae4>
 801061c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010620:	d0ed      	beq.n	80105fe <_dtoa_r+0xab6>
 8010622:	9a01      	ldr	r2, [sp, #4]
 8010624:	f109 0301 	add.w	r3, r9, #1
 8010628:	7013      	strb	r3, [r2, #0]
 801062a:	e73d      	b.n	80104a8 <_dtoa_r+0x960>
 801062c:	9b04      	ldr	r3, [sp, #16]
 801062e:	9a08      	ldr	r2, [sp, #32]
 8010630:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010634:	4293      	cmp	r3, r2
 8010636:	d043      	beq.n	80106c0 <_dtoa_r+0xb78>
 8010638:	4651      	mov	r1, sl
 801063a:	2300      	movs	r3, #0
 801063c:	220a      	movs	r2, #10
 801063e:	4620      	mov	r0, r4
 8010640:	f000 f9d6 	bl	80109f0 <__multadd>
 8010644:	45b8      	cmp	r8, r7
 8010646:	4682      	mov	sl, r0
 8010648:	f04f 0300 	mov.w	r3, #0
 801064c:	f04f 020a 	mov.w	r2, #10
 8010650:	4641      	mov	r1, r8
 8010652:	4620      	mov	r0, r4
 8010654:	d107      	bne.n	8010666 <_dtoa_r+0xb1e>
 8010656:	f000 f9cb 	bl	80109f0 <__multadd>
 801065a:	4680      	mov	r8, r0
 801065c:	4607      	mov	r7, r0
 801065e:	9b04      	ldr	r3, [sp, #16]
 8010660:	3301      	adds	r3, #1
 8010662:	9304      	str	r3, [sp, #16]
 8010664:	e775      	b.n	8010552 <_dtoa_r+0xa0a>
 8010666:	f000 f9c3 	bl	80109f0 <__multadd>
 801066a:	4639      	mov	r1, r7
 801066c:	4680      	mov	r8, r0
 801066e:	2300      	movs	r3, #0
 8010670:	220a      	movs	r2, #10
 8010672:	4620      	mov	r0, r4
 8010674:	f000 f9bc 	bl	80109f0 <__multadd>
 8010678:	4607      	mov	r7, r0
 801067a:	e7f0      	b.n	801065e <_dtoa_r+0xb16>
 801067c:	9b04      	ldr	r3, [sp, #16]
 801067e:	9301      	str	r3, [sp, #4]
 8010680:	9d00      	ldr	r5, [sp, #0]
 8010682:	4631      	mov	r1, r6
 8010684:	4650      	mov	r0, sl
 8010686:	f7ff f9d5 	bl	800fa34 <quorem>
 801068a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801068e:	9b00      	ldr	r3, [sp, #0]
 8010690:	f805 9b01 	strb.w	r9, [r5], #1
 8010694:	1aea      	subs	r2, r5, r3
 8010696:	9b01      	ldr	r3, [sp, #4]
 8010698:	4293      	cmp	r3, r2
 801069a:	dd07      	ble.n	80106ac <_dtoa_r+0xb64>
 801069c:	4651      	mov	r1, sl
 801069e:	2300      	movs	r3, #0
 80106a0:	220a      	movs	r2, #10
 80106a2:	4620      	mov	r0, r4
 80106a4:	f000 f9a4 	bl	80109f0 <__multadd>
 80106a8:	4682      	mov	sl, r0
 80106aa:	e7ea      	b.n	8010682 <_dtoa_r+0xb3a>
 80106ac:	9b01      	ldr	r3, [sp, #4]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	bfc8      	it	gt
 80106b2:	461d      	movgt	r5, r3
 80106b4:	9b00      	ldr	r3, [sp, #0]
 80106b6:	bfd8      	it	le
 80106b8:	2501      	movle	r5, #1
 80106ba:	441d      	add	r5, r3
 80106bc:	f04f 0800 	mov.w	r8, #0
 80106c0:	4651      	mov	r1, sl
 80106c2:	2201      	movs	r2, #1
 80106c4:	4620      	mov	r0, r4
 80106c6:	f000 fb41 	bl	8010d4c <__lshift>
 80106ca:	4631      	mov	r1, r6
 80106cc:	4682      	mov	sl, r0
 80106ce:	f000 fba9 	bl	8010e24 <__mcmp>
 80106d2:	2800      	cmp	r0, #0
 80106d4:	dc96      	bgt.n	8010604 <_dtoa_r+0xabc>
 80106d6:	d102      	bne.n	80106de <_dtoa_r+0xb96>
 80106d8:	f019 0f01 	tst.w	r9, #1
 80106dc:	d192      	bne.n	8010604 <_dtoa_r+0xabc>
 80106de:	462b      	mov	r3, r5
 80106e0:	461d      	mov	r5, r3
 80106e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106e6:	2a30      	cmp	r2, #48	; 0x30
 80106e8:	d0fa      	beq.n	80106e0 <_dtoa_r+0xb98>
 80106ea:	e6dd      	b.n	80104a8 <_dtoa_r+0x960>
 80106ec:	9a00      	ldr	r2, [sp, #0]
 80106ee:	429a      	cmp	r2, r3
 80106f0:	d189      	bne.n	8010606 <_dtoa_r+0xabe>
 80106f2:	f10b 0b01 	add.w	fp, fp, #1
 80106f6:	2331      	movs	r3, #49	; 0x31
 80106f8:	e796      	b.n	8010628 <_dtoa_r+0xae0>
 80106fa:	4b0a      	ldr	r3, [pc, #40]	; (8010724 <_dtoa_r+0xbdc>)
 80106fc:	f7ff ba99 	b.w	800fc32 <_dtoa_r+0xea>
 8010700:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010702:	2b00      	cmp	r3, #0
 8010704:	f47f aa6d 	bne.w	800fbe2 <_dtoa_r+0x9a>
 8010708:	4b07      	ldr	r3, [pc, #28]	; (8010728 <_dtoa_r+0xbe0>)
 801070a:	f7ff ba92 	b.w	800fc32 <_dtoa_r+0xea>
 801070e:	9b01      	ldr	r3, [sp, #4]
 8010710:	2b00      	cmp	r3, #0
 8010712:	dcb5      	bgt.n	8010680 <_dtoa_r+0xb38>
 8010714:	9b07      	ldr	r3, [sp, #28]
 8010716:	2b02      	cmp	r3, #2
 8010718:	f73f aeb1 	bgt.w	801047e <_dtoa_r+0x936>
 801071c:	e7b0      	b.n	8010680 <_dtoa_r+0xb38>
 801071e:	bf00      	nop
 8010720:	08012030 	.word	0x08012030
 8010724:	08011f90 	.word	0x08011f90
 8010728:	08011fb4 	.word	0x08011fb4

0801072c <_free_r>:
 801072c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801072e:	2900      	cmp	r1, #0
 8010730:	d044      	beq.n	80107bc <_free_r+0x90>
 8010732:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010736:	9001      	str	r0, [sp, #4]
 8010738:	2b00      	cmp	r3, #0
 801073a:	f1a1 0404 	sub.w	r4, r1, #4
 801073e:	bfb8      	it	lt
 8010740:	18e4      	addlt	r4, r4, r3
 8010742:	f000 f8e7 	bl	8010914 <__malloc_lock>
 8010746:	4a1e      	ldr	r2, [pc, #120]	; (80107c0 <_free_r+0x94>)
 8010748:	9801      	ldr	r0, [sp, #4]
 801074a:	6813      	ldr	r3, [r2, #0]
 801074c:	b933      	cbnz	r3, 801075c <_free_r+0x30>
 801074e:	6063      	str	r3, [r4, #4]
 8010750:	6014      	str	r4, [r2, #0]
 8010752:	b003      	add	sp, #12
 8010754:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010758:	f000 b8e2 	b.w	8010920 <__malloc_unlock>
 801075c:	42a3      	cmp	r3, r4
 801075e:	d908      	bls.n	8010772 <_free_r+0x46>
 8010760:	6825      	ldr	r5, [r4, #0]
 8010762:	1961      	adds	r1, r4, r5
 8010764:	428b      	cmp	r3, r1
 8010766:	bf01      	itttt	eq
 8010768:	6819      	ldreq	r1, [r3, #0]
 801076a:	685b      	ldreq	r3, [r3, #4]
 801076c:	1949      	addeq	r1, r1, r5
 801076e:	6021      	streq	r1, [r4, #0]
 8010770:	e7ed      	b.n	801074e <_free_r+0x22>
 8010772:	461a      	mov	r2, r3
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	b10b      	cbz	r3, 801077c <_free_r+0x50>
 8010778:	42a3      	cmp	r3, r4
 801077a:	d9fa      	bls.n	8010772 <_free_r+0x46>
 801077c:	6811      	ldr	r1, [r2, #0]
 801077e:	1855      	adds	r5, r2, r1
 8010780:	42a5      	cmp	r5, r4
 8010782:	d10b      	bne.n	801079c <_free_r+0x70>
 8010784:	6824      	ldr	r4, [r4, #0]
 8010786:	4421      	add	r1, r4
 8010788:	1854      	adds	r4, r2, r1
 801078a:	42a3      	cmp	r3, r4
 801078c:	6011      	str	r1, [r2, #0]
 801078e:	d1e0      	bne.n	8010752 <_free_r+0x26>
 8010790:	681c      	ldr	r4, [r3, #0]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	6053      	str	r3, [r2, #4]
 8010796:	440c      	add	r4, r1
 8010798:	6014      	str	r4, [r2, #0]
 801079a:	e7da      	b.n	8010752 <_free_r+0x26>
 801079c:	d902      	bls.n	80107a4 <_free_r+0x78>
 801079e:	230c      	movs	r3, #12
 80107a0:	6003      	str	r3, [r0, #0]
 80107a2:	e7d6      	b.n	8010752 <_free_r+0x26>
 80107a4:	6825      	ldr	r5, [r4, #0]
 80107a6:	1961      	adds	r1, r4, r5
 80107a8:	428b      	cmp	r3, r1
 80107aa:	bf04      	itt	eq
 80107ac:	6819      	ldreq	r1, [r3, #0]
 80107ae:	685b      	ldreq	r3, [r3, #4]
 80107b0:	6063      	str	r3, [r4, #4]
 80107b2:	bf04      	itt	eq
 80107b4:	1949      	addeq	r1, r1, r5
 80107b6:	6021      	streq	r1, [r4, #0]
 80107b8:	6054      	str	r4, [r2, #4]
 80107ba:	e7ca      	b.n	8010752 <_free_r+0x26>
 80107bc:	b003      	add	sp, #12
 80107be:	bd30      	pop	{r4, r5, pc}
 80107c0:	20009784 	.word	0x20009784

080107c4 <malloc>:
 80107c4:	4b02      	ldr	r3, [pc, #8]	; (80107d0 <malloc+0xc>)
 80107c6:	4601      	mov	r1, r0
 80107c8:	6818      	ldr	r0, [r3, #0]
 80107ca:	f000 b823 	b.w	8010814 <_malloc_r>
 80107ce:	bf00      	nop
 80107d0:	2000006c 	.word	0x2000006c

080107d4 <sbrk_aligned>:
 80107d4:	b570      	push	{r4, r5, r6, lr}
 80107d6:	4e0e      	ldr	r6, [pc, #56]	; (8010810 <sbrk_aligned+0x3c>)
 80107d8:	460c      	mov	r4, r1
 80107da:	6831      	ldr	r1, [r6, #0]
 80107dc:	4605      	mov	r5, r0
 80107de:	b911      	cbnz	r1, 80107e6 <sbrk_aligned+0x12>
 80107e0:	f000 fcce 	bl	8011180 <_sbrk_r>
 80107e4:	6030      	str	r0, [r6, #0]
 80107e6:	4621      	mov	r1, r4
 80107e8:	4628      	mov	r0, r5
 80107ea:	f000 fcc9 	bl	8011180 <_sbrk_r>
 80107ee:	1c43      	adds	r3, r0, #1
 80107f0:	d00a      	beq.n	8010808 <sbrk_aligned+0x34>
 80107f2:	1cc4      	adds	r4, r0, #3
 80107f4:	f024 0403 	bic.w	r4, r4, #3
 80107f8:	42a0      	cmp	r0, r4
 80107fa:	d007      	beq.n	801080c <sbrk_aligned+0x38>
 80107fc:	1a21      	subs	r1, r4, r0
 80107fe:	4628      	mov	r0, r5
 8010800:	f000 fcbe 	bl	8011180 <_sbrk_r>
 8010804:	3001      	adds	r0, #1
 8010806:	d101      	bne.n	801080c <sbrk_aligned+0x38>
 8010808:	f04f 34ff 	mov.w	r4, #4294967295
 801080c:	4620      	mov	r0, r4
 801080e:	bd70      	pop	{r4, r5, r6, pc}
 8010810:	20009788 	.word	0x20009788

08010814 <_malloc_r>:
 8010814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010818:	1ccd      	adds	r5, r1, #3
 801081a:	f025 0503 	bic.w	r5, r5, #3
 801081e:	3508      	adds	r5, #8
 8010820:	2d0c      	cmp	r5, #12
 8010822:	bf38      	it	cc
 8010824:	250c      	movcc	r5, #12
 8010826:	2d00      	cmp	r5, #0
 8010828:	4607      	mov	r7, r0
 801082a:	db01      	blt.n	8010830 <_malloc_r+0x1c>
 801082c:	42a9      	cmp	r1, r5
 801082e:	d905      	bls.n	801083c <_malloc_r+0x28>
 8010830:	230c      	movs	r3, #12
 8010832:	603b      	str	r3, [r7, #0]
 8010834:	2600      	movs	r6, #0
 8010836:	4630      	mov	r0, r6
 8010838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801083c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010910 <_malloc_r+0xfc>
 8010840:	f000 f868 	bl	8010914 <__malloc_lock>
 8010844:	f8d8 3000 	ldr.w	r3, [r8]
 8010848:	461c      	mov	r4, r3
 801084a:	bb5c      	cbnz	r4, 80108a4 <_malloc_r+0x90>
 801084c:	4629      	mov	r1, r5
 801084e:	4638      	mov	r0, r7
 8010850:	f7ff ffc0 	bl	80107d4 <sbrk_aligned>
 8010854:	1c43      	adds	r3, r0, #1
 8010856:	4604      	mov	r4, r0
 8010858:	d155      	bne.n	8010906 <_malloc_r+0xf2>
 801085a:	f8d8 4000 	ldr.w	r4, [r8]
 801085e:	4626      	mov	r6, r4
 8010860:	2e00      	cmp	r6, #0
 8010862:	d145      	bne.n	80108f0 <_malloc_r+0xdc>
 8010864:	2c00      	cmp	r4, #0
 8010866:	d048      	beq.n	80108fa <_malloc_r+0xe6>
 8010868:	6823      	ldr	r3, [r4, #0]
 801086a:	4631      	mov	r1, r6
 801086c:	4638      	mov	r0, r7
 801086e:	eb04 0903 	add.w	r9, r4, r3
 8010872:	f000 fc85 	bl	8011180 <_sbrk_r>
 8010876:	4581      	cmp	r9, r0
 8010878:	d13f      	bne.n	80108fa <_malloc_r+0xe6>
 801087a:	6821      	ldr	r1, [r4, #0]
 801087c:	1a6d      	subs	r5, r5, r1
 801087e:	4629      	mov	r1, r5
 8010880:	4638      	mov	r0, r7
 8010882:	f7ff ffa7 	bl	80107d4 <sbrk_aligned>
 8010886:	3001      	adds	r0, #1
 8010888:	d037      	beq.n	80108fa <_malloc_r+0xe6>
 801088a:	6823      	ldr	r3, [r4, #0]
 801088c:	442b      	add	r3, r5
 801088e:	6023      	str	r3, [r4, #0]
 8010890:	f8d8 3000 	ldr.w	r3, [r8]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d038      	beq.n	801090a <_malloc_r+0xf6>
 8010898:	685a      	ldr	r2, [r3, #4]
 801089a:	42a2      	cmp	r2, r4
 801089c:	d12b      	bne.n	80108f6 <_malloc_r+0xe2>
 801089e:	2200      	movs	r2, #0
 80108a0:	605a      	str	r2, [r3, #4]
 80108a2:	e00f      	b.n	80108c4 <_malloc_r+0xb0>
 80108a4:	6822      	ldr	r2, [r4, #0]
 80108a6:	1b52      	subs	r2, r2, r5
 80108a8:	d41f      	bmi.n	80108ea <_malloc_r+0xd6>
 80108aa:	2a0b      	cmp	r2, #11
 80108ac:	d917      	bls.n	80108de <_malloc_r+0xca>
 80108ae:	1961      	adds	r1, r4, r5
 80108b0:	42a3      	cmp	r3, r4
 80108b2:	6025      	str	r5, [r4, #0]
 80108b4:	bf18      	it	ne
 80108b6:	6059      	strne	r1, [r3, #4]
 80108b8:	6863      	ldr	r3, [r4, #4]
 80108ba:	bf08      	it	eq
 80108bc:	f8c8 1000 	streq.w	r1, [r8]
 80108c0:	5162      	str	r2, [r4, r5]
 80108c2:	604b      	str	r3, [r1, #4]
 80108c4:	4638      	mov	r0, r7
 80108c6:	f104 060b 	add.w	r6, r4, #11
 80108ca:	f000 f829 	bl	8010920 <__malloc_unlock>
 80108ce:	f026 0607 	bic.w	r6, r6, #7
 80108d2:	1d23      	adds	r3, r4, #4
 80108d4:	1af2      	subs	r2, r6, r3
 80108d6:	d0ae      	beq.n	8010836 <_malloc_r+0x22>
 80108d8:	1b9b      	subs	r3, r3, r6
 80108da:	50a3      	str	r3, [r4, r2]
 80108dc:	e7ab      	b.n	8010836 <_malloc_r+0x22>
 80108de:	42a3      	cmp	r3, r4
 80108e0:	6862      	ldr	r2, [r4, #4]
 80108e2:	d1dd      	bne.n	80108a0 <_malloc_r+0x8c>
 80108e4:	f8c8 2000 	str.w	r2, [r8]
 80108e8:	e7ec      	b.n	80108c4 <_malloc_r+0xb0>
 80108ea:	4623      	mov	r3, r4
 80108ec:	6864      	ldr	r4, [r4, #4]
 80108ee:	e7ac      	b.n	801084a <_malloc_r+0x36>
 80108f0:	4634      	mov	r4, r6
 80108f2:	6876      	ldr	r6, [r6, #4]
 80108f4:	e7b4      	b.n	8010860 <_malloc_r+0x4c>
 80108f6:	4613      	mov	r3, r2
 80108f8:	e7cc      	b.n	8010894 <_malloc_r+0x80>
 80108fa:	230c      	movs	r3, #12
 80108fc:	603b      	str	r3, [r7, #0]
 80108fe:	4638      	mov	r0, r7
 8010900:	f000 f80e 	bl	8010920 <__malloc_unlock>
 8010904:	e797      	b.n	8010836 <_malloc_r+0x22>
 8010906:	6025      	str	r5, [r4, #0]
 8010908:	e7dc      	b.n	80108c4 <_malloc_r+0xb0>
 801090a:	605b      	str	r3, [r3, #4]
 801090c:	deff      	udf	#255	; 0xff
 801090e:	bf00      	nop
 8010910:	20009784 	.word	0x20009784

08010914 <__malloc_lock>:
 8010914:	4801      	ldr	r0, [pc, #4]	; (801091c <__malloc_lock+0x8>)
 8010916:	f7ff b87d 	b.w	800fa14 <__retarget_lock_acquire_recursive>
 801091a:	bf00      	nop
 801091c:	20009780 	.word	0x20009780

08010920 <__malloc_unlock>:
 8010920:	4801      	ldr	r0, [pc, #4]	; (8010928 <__malloc_unlock+0x8>)
 8010922:	f7ff b878 	b.w	800fa16 <__retarget_lock_release_recursive>
 8010926:	bf00      	nop
 8010928:	20009780 	.word	0x20009780

0801092c <_Balloc>:
 801092c:	b570      	push	{r4, r5, r6, lr}
 801092e:	69c6      	ldr	r6, [r0, #28]
 8010930:	4604      	mov	r4, r0
 8010932:	460d      	mov	r5, r1
 8010934:	b976      	cbnz	r6, 8010954 <_Balloc+0x28>
 8010936:	2010      	movs	r0, #16
 8010938:	f7ff ff44 	bl	80107c4 <malloc>
 801093c:	4602      	mov	r2, r0
 801093e:	61e0      	str	r0, [r4, #28]
 8010940:	b920      	cbnz	r0, 801094c <_Balloc+0x20>
 8010942:	4b18      	ldr	r3, [pc, #96]	; (80109a4 <_Balloc+0x78>)
 8010944:	4818      	ldr	r0, [pc, #96]	; (80109a8 <_Balloc+0x7c>)
 8010946:	216b      	movs	r1, #107	; 0x6b
 8010948:	f000 fc2a 	bl	80111a0 <__assert_func>
 801094c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010950:	6006      	str	r6, [r0, #0]
 8010952:	60c6      	str	r6, [r0, #12]
 8010954:	69e6      	ldr	r6, [r4, #28]
 8010956:	68f3      	ldr	r3, [r6, #12]
 8010958:	b183      	cbz	r3, 801097c <_Balloc+0x50>
 801095a:	69e3      	ldr	r3, [r4, #28]
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010962:	b9b8      	cbnz	r0, 8010994 <_Balloc+0x68>
 8010964:	2101      	movs	r1, #1
 8010966:	fa01 f605 	lsl.w	r6, r1, r5
 801096a:	1d72      	adds	r2, r6, #5
 801096c:	0092      	lsls	r2, r2, #2
 801096e:	4620      	mov	r0, r4
 8010970:	f000 fc34 	bl	80111dc <_calloc_r>
 8010974:	b160      	cbz	r0, 8010990 <_Balloc+0x64>
 8010976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801097a:	e00e      	b.n	801099a <_Balloc+0x6e>
 801097c:	2221      	movs	r2, #33	; 0x21
 801097e:	2104      	movs	r1, #4
 8010980:	4620      	mov	r0, r4
 8010982:	f000 fc2b 	bl	80111dc <_calloc_r>
 8010986:	69e3      	ldr	r3, [r4, #28]
 8010988:	60f0      	str	r0, [r6, #12]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d1e4      	bne.n	801095a <_Balloc+0x2e>
 8010990:	2000      	movs	r0, #0
 8010992:	bd70      	pop	{r4, r5, r6, pc}
 8010994:	6802      	ldr	r2, [r0, #0]
 8010996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801099a:	2300      	movs	r3, #0
 801099c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80109a0:	e7f7      	b.n	8010992 <_Balloc+0x66>
 80109a2:	bf00      	nop
 80109a4:	08011fc1 	.word	0x08011fc1
 80109a8:	08012041 	.word	0x08012041

080109ac <_Bfree>:
 80109ac:	b570      	push	{r4, r5, r6, lr}
 80109ae:	69c6      	ldr	r6, [r0, #28]
 80109b0:	4605      	mov	r5, r0
 80109b2:	460c      	mov	r4, r1
 80109b4:	b976      	cbnz	r6, 80109d4 <_Bfree+0x28>
 80109b6:	2010      	movs	r0, #16
 80109b8:	f7ff ff04 	bl	80107c4 <malloc>
 80109bc:	4602      	mov	r2, r0
 80109be:	61e8      	str	r0, [r5, #28]
 80109c0:	b920      	cbnz	r0, 80109cc <_Bfree+0x20>
 80109c2:	4b09      	ldr	r3, [pc, #36]	; (80109e8 <_Bfree+0x3c>)
 80109c4:	4809      	ldr	r0, [pc, #36]	; (80109ec <_Bfree+0x40>)
 80109c6:	218f      	movs	r1, #143	; 0x8f
 80109c8:	f000 fbea 	bl	80111a0 <__assert_func>
 80109cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80109d0:	6006      	str	r6, [r0, #0]
 80109d2:	60c6      	str	r6, [r0, #12]
 80109d4:	b13c      	cbz	r4, 80109e6 <_Bfree+0x3a>
 80109d6:	69eb      	ldr	r3, [r5, #28]
 80109d8:	6862      	ldr	r2, [r4, #4]
 80109da:	68db      	ldr	r3, [r3, #12]
 80109dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80109e0:	6021      	str	r1, [r4, #0]
 80109e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80109e6:	bd70      	pop	{r4, r5, r6, pc}
 80109e8:	08011fc1 	.word	0x08011fc1
 80109ec:	08012041 	.word	0x08012041

080109f0 <__multadd>:
 80109f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f4:	690d      	ldr	r5, [r1, #16]
 80109f6:	4607      	mov	r7, r0
 80109f8:	460c      	mov	r4, r1
 80109fa:	461e      	mov	r6, r3
 80109fc:	f101 0c14 	add.w	ip, r1, #20
 8010a00:	2000      	movs	r0, #0
 8010a02:	f8dc 3000 	ldr.w	r3, [ip]
 8010a06:	b299      	uxth	r1, r3
 8010a08:	fb02 6101 	mla	r1, r2, r1, r6
 8010a0c:	0c1e      	lsrs	r6, r3, #16
 8010a0e:	0c0b      	lsrs	r3, r1, #16
 8010a10:	fb02 3306 	mla	r3, r2, r6, r3
 8010a14:	b289      	uxth	r1, r1
 8010a16:	3001      	adds	r0, #1
 8010a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010a1c:	4285      	cmp	r5, r0
 8010a1e:	f84c 1b04 	str.w	r1, [ip], #4
 8010a22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010a26:	dcec      	bgt.n	8010a02 <__multadd+0x12>
 8010a28:	b30e      	cbz	r6, 8010a6e <__multadd+0x7e>
 8010a2a:	68a3      	ldr	r3, [r4, #8]
 8010a2c:	42ab      	cmp	r3, r5
 8010a2e:	dc19      	bgt.n	8010a64 <__multadd+0x74>
 8010a30:	6861      	ldr	r1, [r4, #4]
 8010a32:	4638      	mov	r0, r7
 8010a34:	3101      	adds	r1, #1
 8010a36:	f7ff ff79 	bl	801092c <_Balloc>
 8010a3a:	4680      	mov	r8, r0
 8010a3c:	b928      	cbnz	r0, 8010a4a <__multadd+0x5a>
 8010a3e:	4602      	mov	r2, r0
 8010a40:	4b0c      	ldr	r3, [pc, #48]	; (8010a74 <__multadd+0x84>)
 8010a42:	480d      	ldr	r0, [pc, #52]	; (8010a78 <__multadd+0x88>)
 8010a44:	21ba      	movs	r1, #186	; 0xba
 8010a46:	f000 fbab 	bl	80111a0 <__assert_func>
 8010a4a:	6922      	ldr	r2, [r4, #16]
 8010a4c:	3202      	adds	r2, #2
 8010a4e:	f104 010c 	add.w	r1, r4, #12
 8010a52:	0092      	lsls	r2, r2, #2
 8010a54:	300c      	adds	r0, #12
 8010a56:	f7fe ffdf 	bl	800fa18 <memcpy>
 8010a5a:	4621      	mov	r1, r4
 8010a5c:	4638      	mov	r0, r7
 8010a5e:	f7ff ffa5 	bl	80109ac <_Bfree>
 8010a62:	4644      	mov	r4, r8
 8010a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010a68:	3501      	adds	r5, #1
 8010a6a:	615e      	str	r6, [r3, #20]
 8010a6c:	6125      	str	r5, [r4, #16]
 8010a6e:	4620      	mov	r0, r4
 8010a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a74:	08012030 	.word	0x08012030
 8010a78:	08012041 	.word	0x08012041

08010a7c <__hi0bits>:
 8010a7c:	0c03      	lsrs	r3, r0, #16
 8010a7e:	041b      	lsls	r3, r3, #16
 8010a80:	b9d3      	cbnz	r3, 8010ab8 <__hi0bits+0x3c>
 8010a82:	0400      	lsls	r0, r0, #16
 8010a84:	2310      	movs	r3, #16
 8010a86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010a8a:	bf04      	itt	eq
 8010a8c:	0200      	lsleq	r0, r0, #8
 8010a8e:	3308      	addeq	r3, #8
 8010a90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010a94:	bf04      	itt	eq
 8010a96:	0100      	lsleq	r0, r0, #4
 8010a98:	3304      	addeq	r3, #4
 8010a9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010a9e:	bf04      	itt	eq
 8010aa0:	0080      	lsleq	r0, r0, #2
 8010aa2:	3302      	addeq	r3, #2
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	db05      	blt.n	8010ab4 <__hi0bits+0x38>
 8010aa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010aac:	f103 0301 	add.w	r3, r3, #1
 8010ab0:	bf08      	it	eq
 8010ab2:	2320      	moveq	r3, #32
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	4770      	bx	lr
 8010ab8:	2300      	movs	r3, #0
 8010aba:	e7e4      	b.n	8010a86 <__hi0bits+0xa>

08010abc <__lo0bits>:
 8010abc:	6803      	ldr	r3, [r0, #0]
 8010abe:	f013 0207 	ands.w	r2, r3, #7
 8010ac2:	d00c      	beq.n	8010ade <__lo0bits+0x22>
 8010ac4:	07d9      	lsls	r1, r3, #31
 8010ac6:	d422      	bmi.n	8010b0e <__lo0bits+0x52>
 8010ac8:	079a      	lsls	r2, r3, #30
 8010aca:	bf49      	itett	mi
 8010acc:	085b      	lsrmi	r3, r3, #1
 8010ace:	089b      	lsrpl	r3, r3, #2
 8010ad0:	6003      	strmi	r3, [r0, #0]
 8010ad2:	2201      	movmi	r2, #1
 8010ad4:	bf5c      	itt	pl
 8010ad6:	6003      	strpl	r3, [r0, #0]
 8010ad8:	2202      	movpl	r2, #2
 8010ada:	4610      	mov	r0, r2
 8010adc:	4770      	bx	lr
 8010ade:	b299      	uxth	r1, r3
 8010ae0:	b909      	cbnz	r1, 8010ae6 <__lo0bits+0x2a>
 8010ae2:	0c1b      	lsrs	r3, r3, #16
 8010ae4:	2210      	movs	r2, #16
 8010ae6:	b2d9      	uxtb	r1, r3
 8010ae8:	b909      	cbnz	r1, 8010aee <__lo0bits+0x32>
 8010aea:	3208      	adds	r2, #8
 8010aec:	0a1b      	lsrs	r3, r3, #8
 8010aee:	0719      	lsls	r1, r3, #28
 8010af0:	bf04      	itt	eq
 8010af2:	091b      	lsreq	r3, r3, #4
 8010af4:	3204      	addeq	r2, #4
 8010af6:	0799      	lsls	r1, r3, #30
 8010af8:	bf04      	itt	eq
 8010afa:	089b      	lsreq	r3, r3, #2
 8010afc:	3202      	addeq	r2, #2
 8010afe:	07d9      	lsls	r1, r3, #31
 8010b00:	d403      	bmi.n	8010b0a <__lo0bits+0x4e>
 8010b02:	085b      	lsrs	r3, r3, #1
 8010b04:	f102 0201 	add.w	r2, r2, #1
 8010b08:	d003      	beq.n	8010b12 <__lo0bits+0x56>
 8010b0a:	6003      	str	r3, [r0, #0]
 8010b0c:	e7e5      	b.n	8010ada <__lo0bits+0x1e>
 8010b0e:	2200      	movs	r2, #0
 8010b10:	e7e3      	b.n	8010ada <__lo0bits+0x1e>
 8010b12:	2220      	movs	r2, #32
 8010b14:	e7e1      	b.n	8010ada <__lo0bits+0x1e>
	...

08010b18 <__i2b>:
 8010b18:	b510      	push	{r4, lr}
 8010b1a:	460c      	mov	r4, r1
 8010b1c:	2101      	movs	r1, #1
 8010b1e:	f7ff ff05 	bl	801092c <_Balloc>
 8010b22:	4602      	mov	r2, r0
 8010b24:	b928      	cbnz	r0, 8010b32 <__i2b+0x1a>
 8010b26:	4b05      	ldr	r3, [pc, #20]	; (8010b3c <__i2b+0x24>)
 8010b28:	4805      	ldr	r0, [pc, #20]	; (8010b40 <__i2b+0x28>)
 8010b2a:	f240 1145 	movw	r1, #325	; 0x145
 8010b2e:	f000 fb37 	bl	80111a0 <__assert_func>
 8010b32:	2301      	movs	r3, #1
 8010b34:	6144      	str	r4, [r0, #20]
 8010b36:	6103      	str	r3, [r0, #16]
 8010b38:	bd10      	pop	{r4, pc}
 8010b3a:	bf00      	nop
 8010b3c:	08012030 	.word	0x08012030
 8010b40:	08012041 	.word	0x08012041

08010b44 <__multiply>:
 8010b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b48:	4691      	mov	r9, r2
 8010b4a:	690a      	ldr	r2, [r1, #16]
 8010b4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	bfb8      	it	lt
 8010b54:	460b      	movlt	r3, r1
 8010b56:	460c      	mov	r4, r1
 8010b58:	bfbc      	itt	lt
 8010b5a:	464c      	movlt	r4, r9
 8010b5c:	4699      	movlt	r9, r3
 8010b5e:	6927      	ldr	r7, [r4, #16]
 8010b60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010b64:	68a3      	ldr	r3, [r4, #8]
 8010b66:	6861      	ldr	r1, [r4, #4]
 8010b68:	eb07 060a 	add.w	r6, r7, sl
 8010b6c:	42b3      	cmp	r3, r6
 8010b6e:	b085      	sub	sp, #20
 8010b70:	bfb8      	it	lt
 8010b72:	3101      	addlt	r1, #1
 8010b74:	f7ff feda 	bl	801092c <_Balloc>
 8010b78:	b930      	cbnz	r0, 8010b88 <__multiply+0x44>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	4b44      	ldr	r3, [pc, #272]	; (8010c90 <__multiply+0x14c>)
 8010b7e:	4845      	ldr	r0, [pc, #276]	; (8010c94 <__multiply+0x150>)
 8010b80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010b84:	f000 fb0c 	bl	80111a0 <__assert_func>
 8010b88:	f100 0514 	add.w	r5, r0, #20
 8010b8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010b90:	462b      	mov	r3, r5
 8010b92:	2200      	movs	r2, #0
 8010b94:	4543      	cmp	r3, r8
 8010b96:	d321      	bcc.n	8010bdc <__multiply+0x98>
 8010b98:	f104 0314 	add.w	r3, r4, #20
 8010b9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ba0:	f109 0314 	add.w	r3, r9, #20
 8010ba4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010ba8:	9202      	str	r2, [sp, #8]
 8010baa:	1b3a      	subs	r2, r7, r4
 8010bac:	3a15      	subs	r2, #21
 8010bae:	f022 0203 	bic.w	r2, r2, #3
 8010bb2:	3204      	adds	r2, #4
 8010bb4:	f104 0115 	add.w	r1, r4, #21
 8010bb8:	428f      	cmp	r7, r1
 8010bba:	bf38      	it	cc
 8010bbc:	2204      	movcc	r2, #4
 8010bbe:	9201      	str	r2, [sp, #4]
 8010bc0:	9a02      	ldr	r2, [sp, #8]
 8010bc2:	9303      	str	r3, [sp, #12]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d80c      	bhi.n	8010be2 <__multiply+0x9e>
 8010bc8:	2e00      	cmp	r6, #0
 8010bca:	dd03      	ble.n	8010bd4 <__multiply+0x90>
 8010bcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d05b      	beq.n	8010c8c <__multiply+0x148>
 8010bd4:	6106      	str	r6, [r0, #16]
 8010bd6:	b005      	add	sp, #20
 8010bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bdc:	f843 2b04 	str.w	r2, [r3], #4
 8010be0:	e7d8      	b.n	8010b94 <__multiply+0x50>
 8010be2:	f8b3 a000 	ldrh.w	sl, [r3]
 8010be6:	f1ba 0f00 	cmp.w	sl, #0
 8010bea:	d024      	beq.n	8010c36 <__multiply+0xf2>
 8010bec:	f104 0e14 	add.w	lr, r4, #20
 8010bf0:	46a9      	mov	r9, r5
 8010bf2:	f04f 0c00 	mov.w	ip, #0
 8010bf6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010bfa:	f8d9 1000 	ldr.w	r1, [r9]
 8010bfe:	fa1f fb82 	uxth.w	fp, r2
 8010c02:	b289      	uxth	r1, r1
 8010c04:	fb0a 110b 	mla	r1, sl, fp, r1
 8010c08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010c0c:	f8d9 2000 	ldr.w	r2, [r9]
 8010c10:	4461      	add	r1, ip
 8010c12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c16:	fb0a c20b 	mla	r2, sl, fp, ip
 8010c1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010c1e:	b289      	uxth	r1, r1
 8010c20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c24:	4577      	cmp	r7, lr
 8010c26:	f849 1b04 	str.w	r1, [r9], #4
 8010c2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010c2e:	d8e2      	bhi.n	8010bf6 <__multiply+0xb2>
 8010c30:	9a01      	ldr	r2, [sp, #4]
 8010c32:	f845 c002 	str.w	ip, [r5, r2]
 8010c36:	9a03      	ldr	r2, [sp, #12]
 8010c38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	f1b9 0f00 	cmp.w	r9, #0
 8010c42:	d021      	beq.n	8010c88 <__multiply+0x144>
 8010c44:	6829      	ldr	r1, [r5, #0]
 8010c46:	f104 0c14 	add.w	ip, r4, #20
 8010c4a:	46ae      	mov	lr, r5
 8010c4c:	f04f 0a00 	mov.w	sl, #0
 8010c50:	f8bc b000 	ldrh.w	fp, [ip]
 8010c54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010c58:	fb09 220b 	mla	r2, r9, fp, r2
 8010c5c:	4452      	add	r2, sl
 8010c5e:	b289      	uxth	r1, r1
 8010c60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010c64:	f84e 1b04 	str.w	r1, [lr], #4
 8010c68:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010c6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c70:	f8be 1000 	ldrh.w	r1, [lr]
 8010c74:	fb09 110a 	mla	r1, r9, sl, r1
 8010c78:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010c7c:	4567      	cmp	r7, ip
 8010c7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010c82:	d8e5      	bhi.n	8010c50 <__multiply+0x10c>
 8010c84:	9a01      	ldr	r2, [sp, #4]
 8010c86:	50a9      	str	r1, [r5, r2]
 8010c88:	3504      	adds	r5, #4
 8010c8a:	e799      	b.n	8010bc0 <__multiply+0x7c>
 8010c8c:	3e01      	subs	r6, #1
 8010c8e:	e79b      	b.n	8010bc8 <__multiply+0x84>
 8010c90:	08012030 	.word	0x08012030
 8010c94:	08012041 	.word	0x08012041

08010c98 <__pow5mult>:
 8010c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c9c:	4615      	mov	r5, r2
 8010c9e:	f012 0203 	ands.w	r2, r2, #3
 8010ca2:	4606      	mov	r6, r0
 8010ca4:	460f      	mov	r7, r1
 8010ca6:	d007      	beq.n	8010cb8 <__pow5mult+0x20>
 8010ca8:	4c25      	ldr	r4, [pc, #148]	; (8010d40 <__pow5mult+0xa8>)
 8010caa:	3a01      	subs	r2, #1
 8010cac:	2300      	movs	r3, #0
 8010cae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010cb2:	f7ff fe9d 	bl	80109f0 <__multadd>
 8010cb6:	4607      	mov	r7, r0
 8010cb8:	10ad      	asrs	r5, r5, #2
 8010cba:	d03d      	beq.n	8010d38 <__pow5mult+0xa0>
 8010cbc:	69f4      	ldr	r4, [r6, #28]
 8010cbe:	b97c      	cbnz	r4, 8010ce0 <__pow5mult+0x48>
 8010cc0:	2010      	movs	r0, #16
 8010cc2:	f7ff fd7f 	bl	80107c4 <malloc>
 8010cc6:	4602      	mov	r2, r0
 8010cc8:	61f0      	str	r0, [r6, #28]
 8010cca:	b928      	cbnz	r0, 8010cd8 <__pow5mult+0x40>
 8010ccc:	4b1d      	ldr	r3, [pc, #116]	; (8010d44 <__pow5mult+0xac>)
 8010cce:	481e      	ldr	r0, [pc, #120]	; (8010d48 <__pow5mult+0xb0>)
 8010cd0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010cd4:	f000 fa64 	bl	80111a0 <__assert_func>
 8010cd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010cdc:	6004      	str	r4, [r0, #0]
 8010cde:	60c4      	str	r4, [r0, #12]
 8010ce0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010ce4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010ce8:	b94c      	cbnz	r4, 8010cfe <__pow5mult+0x66>
 8010cea:	f240 2171 	movw	r1, #625	; 0x271
 8010cee:	4630      	mov	r0, r6
 8010cf0:	f7ff ff12 	bl	8010b18 <__i2b>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010cfa:	4604      	mov	r4, r0
 8010cfc:	6003      	str	r3, [r0, #0]
 8010cfe:	f04f 0900 	mov.w	r9, #0
 8010d02:	07eb      	lsls	r3, r5, #31
 8010d04:	d50a      	bpl.n	8010d1c <__pow5mult+0x84>
 8010d06:	4639      	mov	r1, r7
 8010d08:	4622      	mov	r2, r4
 8010d0a:	4630      	mov	r0, r6
 8010d0c:	f7ff ff1a 	bl	8010b44 <__multiply>
 8010d10:	4639      	mov	r1, r7
 8010d12:	4680      	mov	r8, r0
 8010d14:	4630      	mov	r0, r6
 8010d16:	f7ff fe49 	bl	80109ac <_Bfree>
 8010d1a:	4647      	mov	r7, r8
 8010d1c:	106d      	asrs	r5, r5, #1
 8010d1e:	d00b      	beq.n	8010d38 <__pow5mult+0xa0>
 8010d20:	6820      	ldr	r0, [r4, #0]
 8010d22:	b938      	cbnz	r0, 8010d34 <__pow5mult+0x9c>
 8010d24:	4622      	mov	r2, r4
 8010d26:	4621      	mov	r1, r4
 8010d28:	4630      	mov	r0, r6
 8010d2a:	f7ff ff0b 	bl	8010b44 <__multiply>
 8010d2e:	6020      	str	r0, [r4, #0]
 8010d30:	f8c0 9000 	str.w	r9, [r0]
 8010d34:	4604      	mov	r4, r0
 8010d36:	e7e4      	b.n	8010d02 <__pow5mult+0x6a>
 8010d38:	4638      	mov	r0, r7
 8010d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d3e:	bf00      	nop
 8010d40:	08012190 	.word	0x08012190
 8010d44:	08011fc1 	.word	0x08011fc1
 8010d48:	08012041 	.word	0x08012041

08010d4c <__lshift>:
 8010d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d50:	460c      	mov	r4, r1
 8010d52:	6849      	ldr	r1, [r1, #4]
 8010d54:	6923      	ldr	r3, [r4, #16]
 8010d56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010d5a:	68a3      	ldr	r3, [r4, #8]
 8010d5c:	4607      	mov	r7, r0
 8010d5e:	4691      	mov	r9, r2
 8010d60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d64:	f108 0601 	add.w	r6, r8, #1
 8010d68:	42b3      	cmp	r3, r6
 8010d6a:	db0b      	blt.n	8010d84 <__lshift+0x38>
 8010d6c:	4638      	mov	r0, r7
 8010d6e:	f7ff fddd 	bl	801092c <_Balloc>
 8010d72:	4605      	mov	r5, r0
 8010d74:	b948      	cbnz	r0, 8010d8a <__lshift+0x3e>
 8010d76:	4602      	mov	r2, r0
 8010d78:	4b28      	ldr	r3, [pc, #160]	; (8010e1c <__lshift+0xd0>)
 8010d7a:	4829      	ldr	r0, [pc, #164]	; (8010e20 <__lshift+0xd4>)
 8010d7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010d80:	f000 fa0e 	bl	80111a0 <__assert_func>
 8010d84:	3101      	adds	r1, #1
 8010d86:	005b      	lsls	r3, r3, #1
 8010d88:	e7ee      	b.n	8010d68 <__lshift+0x1c>
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	f100 0114 	add.w	r1, r0, #20
 8010d90:	f100 0210 	add.w	r2, r0, #16
 8010d94:	4618      	mov	r0, r3
 8010d96:	4553      	cmp	r3, sl
 8010d98:	db33      	blt.n	8010e02 <__lshift+0xb6>
 8010d9a:	6920      	ldr	r0, [r4, #16]
 8010d9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010da0:	f104 0314 	add.w	r3, r4, #20
 8010da4:	f019 091f 	ands.w	r9, r9, #31
 8010da8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010dac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010db0:	d02b      	beq.n	8010e0a <__lshift+0xbe>
 8010db2:	f1c9 0e20 	rsb	lr, r9, #32
 8010db6:	468a      	mov	sl, r1
 8010db8:	2200      	movs	r2, #0
 8010dba:	6818      	ldr	r0, [r3, #0]
 8010dbc:	fa00 f009 	lsl.w	r0, r0, r9
 8010dc0:	4310      	orrs	r0, r2
 8010dc2:	f84a 0b04 	str.w	r0, [sl], #4
 8010dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dca:	459c      	cmp	ip, r3
 8010dcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8010dd0:	d8f3      	bhi.n	8010dba <__lshift+0x6e>
 8010dd2:	ebac 0304 	sub.w	r3, ip, r4
 8010dd6:	3b15      	subs	r3, #21
 8010dd8:	f023 0303 	bic.w	r3, r3, #3
 8010ddc:	3304      	adds	r3, #4
 8010dde:	f104 0015 	add.w	r0, r4, #21
 8010de2:	4584      	cmp	ip, r0
 8010de4:	bf38      	it	cc
 8010de6:	2304      	movcc	r3, #4
 8010de8:	50ca      	str	r2, [r1, r3]
 8010dea:	b10a      	cbz	r2, 8010df0 <__lshift+0xa4>
 8010dec:	f108 0602 	add.w	r6, r8, #2
 8010df0:	3e01      	subs	r6, #1
 8010df2:	4638      	mov	r0, r7
 8010df4:	612e      	str	r6, [r5, #16]
 8010df6:	4621      	mov	r1, r4
 8010df8:	f7ff fdd8 	bl	80109ac <_Bfree>
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e02:	f842 0f04 	str.w	r0, [r2, #4]!
 8010e06:	3301      	adds	r3, #1
 8010e08:	e7c5      	b.n	8010d96 <__lshift+0x4a>
 8010e0a:	3904      	subs	r1, #4
 8010e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e10:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e14:	459c      	cmp	ip, r3
 8010e16:	d8f9      	bhi.n	8010e0c <__lshift+0xc0>
 8010e18:	e7ea      	b.n	8010df0 <__lshift+0xa4>
 8010e1a:	bf00      	nop
 8010e1c:	08012030 	.word	0x08012030
 8010e20:	08012041 	.word	0x08012041

08010e24 <__mcmp>:
 8010e24:	b530      	push	{r4, r5, lr}
 8010e26:	6902      	ldr	r2, [r0, #16]
 8010e28:	690c      	ldr	r4, [r1, #16]
 8010e2a:	1b12      	subs	r2, r2, r4
 8010e2c:	d10e      	bne.n	8010e4c <__mcmp+0x28>
 8010e2e:	f100 0314 	add.w	r3, r0, #20
 8010e32:	3114      	adds	r1, #20
 8010e34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010e38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010e3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010e40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010e44:	42a5      	cmp	r5, r4
 8010e46:	d003      	beq.n	8010e50 <__mcmp+0x2c>
 8010e48:	d305      	bcc.n	8010e56 <__mcmp+0x32>
 8010e4a:	2201      	movs	r2, #1
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	bd30      	pop	{r4, r5, pc}
 8010e50:	4283      	cmp	r3, r0
 8010e52:	d3f3      	bcc.n	8010e3c <__mcmp+0x18>
 8010e54:	e7fa      	b.n	8010e4c <__mcmp+0x28>
 8010e56:	f04f 32ff 	mov.w	r2, #4294967295
 8010e5a:	e7f7      	b.n	8010e4c <__mcmp+0x28>

08010e5c <__mdiff>:
 8010e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e60:	460c      	mov	r4, r1
 8010e62:	4606      	mov	r6, r0
 8010e64:	4611      	mov	r1, r2
 8010e66:	4620      	mov	r0, r4
 8010e68:	4690      	mov	r8, r2
 8010e6a:	f7ff ffdb 	bl	8010e24 <__mcmp>
 8010e6e:	1e05      	subs	r5, r0, #0
 8010e70:	d110      	bne.n	8010e94 <__mdiff+0x38>
 8010e72:	4629      	mov	r1, r5
 8010e74:	4630      	mov	r0, r6
 8010e76:	f7ff fd59 	bl	801092c <_Balloc>
 8010e7a:	b930      	cbnz	r0, 8010e8a <__mdiff+0x2e>
 8010e7c:	4b3a      	ldr	r3, [pc, #232]	; (8010f68 <__mdiff+0x10c>)
 8010e7e:	4602      	mov	r2, r0
 8010e80:	f240 2137 	movw	r1, #567	; 0x237
 8010e84:	4839      	ldr	r0, [pc, #228]	; (8010f6c <__mdiff+0x110>)
 8010e86:	f000 f98b 	bl	80111a0 <__assert_func>
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e94:	bfa4      	itt	ge
 8010e96:	4643      	movge	r3, r8
 8010e98:	46a0      	movge	r8, r4
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010ea0:	bfa6      	itte	ge
 8010ea2:	461c      	movge	r4, r3
 8010ea4:	2500      	movge	r5, #0
 8010ea6:	2501      	movlt	r5, #1
 8010ea8:	f7ff fd40 	bl	801092c <_Balloc>
 8010eac:	b920      	cbnz	r0, 8010eb8 <__mdiff+0x5c>
 8010eae:	4b2e      	ldr	r3, [pc, #184]	; (8010f68 <__mdiff+0x10c>)
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	f240 2145 	movw	r1, #581	; 0x245
 8010eb6:	e7e5      	b.n	8010e84 <__mdiff+0x28>
 8010eb8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ebc:	6926      	ldr	r6, [r4, #16]
 8010ebe:	60c5      	str	r5, [r0, #12]
 8010ec0:	f104 0914 	add.w	r9, r4, #20
 8010ec4:	f108 0514 	add.w	r5, r8, #20
 8010ec8:	f100 0e14 	add.w	lr, r0, #20
 8010ecc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010ed0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010ed4:	f108 0210 	add.w	r2, r8, #16
 8010ed8:	46f2      	mov	sl, lr
 8010eda:	2100      	movs	r1, #0
 8010edc:	f859 3b04 	ldr.w	r3, [r9], #4
 8010ee0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010ee4:	fa11 f88b 	uxtah	r8, r1, fp
 8010ee8:	b299      	uxth	r1, r3
 8010eea:	0c1b      	lsrs	r3, r3, #16
 8010eec:	eba8 0801 	sub.w	r8, r8, r1
 8010ef0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010ef4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010ef8:	fa1f f888 	uxth.w	r8, r8
 8010efc:	1419      	asrs	r1, r3, #16
 8010efe:	454e      	cmp	r6, r9
 8010f00:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010f04:	f84a 3b04 	str.w	r3, [sl], #4
 8010f08:	d8e8      	bhi.n	8010edc <__mdiff+0x80>
 8010f0a:	1b33      	subs	r3, r6, r4
 8010f0c:	3b15      	subs	r3, #21
 8010f0e:	f023 0303 	bic.w	r3, r3, #3
 8010f12:	3304      	adds	r3, #4
 8010f14:	3415      	adds	r4, #21
 8010f16:	42a6      	cmp	r6, r4
 8010f18:	bf38      	it	cc
 8010f1a:	2304      	movcc	r3, #4
 8010f1c:	441d      	add	r5, r3
 8010f1e:	4473      	add	r3, lr
 8010f20:	469e      	mov	lr, r3
 8010f22:	462e      	mov	r6, r5
 8010f24:	4566      	cmp	r6, ip
 8010f26:	d30e      	bcc.n	8010f46 <__mdiff+0xea>
 8010f28:	f10c 0203 	add.w	r2, ip, #3
 8010f2c:	1b52      	subs	r2, r2, r5
 8010f2e:	f022 0203 	bic.w	r2, r2, #3
 8010f32:	3d03      	subs	r5, #3
 8010f34:	45ac      	cmp	ip, r5
 8010f36:	bf38      	it	cc
 8010f38:	2200      	movcc	r2, #0
 8010f3a:	4413      	add	r3, r2
 8010f3c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010f40:	b17a      	cbz	r2, 8010f62 <__mdiff+0x106>
 8010f42:	6107      	str	r7, [r0, #16]
 8010f44:	e7a4      	b.n	8010e90 <__mdiff+0x34>
 8010f46:	f856 8b04 	ldr.w	r8, [r6], #4
 8010f4a:	fa11 f288 	uxtah	r2, r1, r8
 8010f4e:	1414      	asrs	r4, r2, #16
 8010f50:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010f54:	b292      	uxth	r2, r2
 8010f56:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010f5a:	f84e 2b04 	str.w	r2, [lr], #4
 8010f5e:	1421      	asrs	r1, r4, #16
 8010f60:	e7e0      	b.n	8010f24 <__mdiff+0xc8>
 8010f62:	3f01      	subs	r7, #1
 8010f64:	e7ea      	b.n	8010f3c <__mdiff+0xe0>
 8010f66:	bf00      	nop
 8010f68:	08012030 	.word	0x08012030
 8010f6c:	08012041 	.word	0x08012041

08010f70 <__d2b>:
 8010f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f74:	460f      	mov	r7, r1
 8010f76:	2101      	movs	r1, #1
 8010f78:	ec59 8b10 	vmov	r8, r9, d0
 8010f7c:	4616      	mov	r6, r2
 8010f7e:	f7ff fcd5 	bl	801092c <_Balloc>
 8010f82:	4604      	mov	r4, r0
 8010f84:	b930      	cbnz	r0, 8010f94 <__d2b+0x24>
 8010f86:	4602      	mov	r2, r0
 8010f88:	4b24      	ldr	r3, [pc, #144]	; (801101c <__d2b+0xac>)
 8010f8a:	4825      	ldr	r0, [pc, #148]	; (8011020 <__d2b+0xb0>)
 8010f8c:	f240 310f 	movw	r1, #783	; 0x30f
 8010f90:	f000 f906 	bl	80111a0 <__assert_func>
 8010f94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f9c:	bb2d      	cbnz	r5, 8010fea <__d2b+0x7a>
 8010f9e:	9301      	str	r3, [sp, #4]
 8010fa0:	f1b8 0300 	subs.w	r3, r8, #0
 8010fa4:	d026      	beq.n	8010ff4 <__d2b+0x84>
 8010fa6:	4668      	mov	r0, sp
 8010fa8:	9300      	str	r3, [sp, #0]
 8010faa:	f7ff fd87 	bl	8010abc <__lo0bits>
 8010fae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010fb2:	b1e8      	cbz	r0, 8010ff0 <__d2b+0x80>
 8010fb4:	f1c0 0320 	rsb	r3, r0, #32
 8010fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8010fbc:	430b      	orrs	r3, r1
 8010fbe:	40c2      	lsrs	r2, r0
 8010fc0:	6163      	str	r3, [r4, #20]
 8010fc2:	9201      	str	r2, [sp, #4]
 8010fc4:	9b01      	ldr	r3, [sp, #4]
 8010fc6:	61a3      	str	r3, [r4, #24]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	bf14      	ite	ne
 8010fcc:	2202      	movne	r2, #2
 8010fce:	2201      	moveq	r2, #1
 8010fd0:	6122      	str	r2, [r4, #16]
 8010fd2:	b1bd      	cbz	r5, 8011004 <__d2b+0x94>
 8010fd4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010fd8:	4405      	add	r5, r0
 8010fda:	603d      	str	r5, [r7, #0]
 8010fdc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010fe0:	6030      	str	r0, [r6, #0]
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	b003      	add	sp, #12
 8010fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010fee:	e7d6      	b.n	8010f9e <__d2b+0x2e>
 8010ff0:	6161      	str	r1, [r4, #20]
 8010ff2:	e7e7      	b.n	8010fc4 <__d2b+0x54>
 8010ff4:	a801      	add	r0, sp, #4
 8010ff6:	f7ff fd61 	bl	8010abc <__lo0bits>
 8010ffa:	9b01      	ldr	r3, [sp, #4]
 8010ffc:	6163      	str	r3, [r4, #20]
 8010ffe:	3020      	adds	r0, #32
 8011000:	2201      	movs	r2, #1
 8011002:	e7e5      	b.n	8010fd0 <__d2b+0x60>
 8011004:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011008:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801100c:	6038      	str	r0, [r7, #0]
 801100e:	6918      	ldr	r0, [r3, #16]
 8011010:	f7ff fd34 	bl	8010a7c <__hi0bits>
 8011014:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011018:	e7e2      	b.n	8010fe0 <__d2b+0x70>
 801101a:	bf00      	nop
 801101c:	08012030 	.word	0x08012030
 8011020:	08012041 	.word	0x08012041

08011024 <__sflush_r>:
 8011024:	898a      	ldrh	r2, [r1, #12]
 8011026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801102a:	4605      	mov	r5, r0
 801102c:	0710      	lsls	r0, r2, #28
 801102e:	460c      	mov	r4, r1
 8011030:	d458      	bmi.n	80110e4 <__sflush_r+0xc0>
 8011032:	684b      	ldr	r3, [r1, #4]
 8011034:	2b00      	cmp	r3, #0
 8011036:	dc05      	bgt.n	8011044 <__sflush_r+0x20>
 8011038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801103a:	2b00      	cmp	r3, #0
 801103c:	dc02      	bgt.n	8011044 <__sflush_r+0x20>
 801103e:	2000      	movs	r0, #0
 8011040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011046:	2e00      	cmp	r6, #0
 8011048:	d0f9      	beq.n	801103e <__sflush_r+0x1a>
 801104a:	2300      	movs	r3, #0
 801104c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011050:	682f      	ldr	r7, [r5, #0]
 8011052:	6a21      	ldr	r1, [r4, #32]
 8011054:	602b      	str	r3, [r5, #0]
 8011056:	d032      	beq.n	80110be <__sflush_r+0x9a>
 8011058:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801105a:	89a3      	ldrh	r3, [r4, #12]
 801105c:	075a      	lsls	r2, r3, #29
 801105e:	d505      	bpl.n	801106c <__sflush_r+0x48>
 8011060:	6863      	ldr	r3, [r4, #4]
 8011062:	1ac0      	subs	r0, r0, r3
 8011064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011066:	b10b      	cbz	r3, 801106c <__sflush_r+0x48>
 8011068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801106a:	1ac0      	subs	r0, r0, r3
 801106c:	2300      	movs	r3, #0
 801106e:	4602      	mov	r2, r0
 8011070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011072:	6a21      	ldr	r1, [r4, #32]
 8011074:	4628      	mov	r0, r5
 8011076:	47b0      	blx	r6
 8011078:	1c43      	adds	r3, r0, #1
 801107a:	89a3      	ldrh	r3, [r4, #12]
 801107c:	d106      	bne.n	801108c <__sflush_r+0x68>
 801107e:	6829      	ldr	r1, [r5, #0]
 8011080:	291d      	cmp	r1, #29
 8011082:	d82b      	bhi.n	80110dc <__sflush_r+0xb8>
 8011084:	4a29      	ldr	r2, [pc, #164]	; (801112c <__sflush_r+0x108>)
 8011086:	410a      	asrs	r2, r1
 8011088:	07d6      	lsls	r6, r2, #31
 801108a:	d427      	bmi.n	80110dc <__sflush_r+0xb8>
 801108c:	2200      	movs	r2, #0
 801108e:	6062      	str	r2, [r4, #4]
 8011090:	04d9      	lsls	r1, r3, #19
 8011092:	6922      	ldr	r2, [r4, #16]
 8011094:	6022      	str	r2, [r4, #0]
 8011096:	d504      	bpl.n	80110a2 <__sflush_r+0x7e>
 8011098:	1c42      	adds	r2, r0, #1
 801109a:	d101      	bne.n	80110a0 <__sflush_r+0x7c>
 801109c:	682b      	ldr	r3, [r5, #0]
 801109e:	b903      	cbnz	r3, 80110a2 <__sflush_r+0x7e>
 80110a0:	6560      	str	r0, [r4, #84]	; 0x54
 80110a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110a4:	602f      	str	r7, [r5, #0]
 80110a6:	2900      	cmp	r1, #0
 80110a8:	d0c9      	beq.n	801103e <__sflush_r+0x1a>
 80110aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110ae:	4299      	cmp	r1, r3
 80110b0:	d002      	beq.n	80110b8 <__sflush_r+0x94>
 80110b2:	4628      	mov	r0, r5
 80110b4:	f7ff fb3a 	bl	801072c <_free_r>
 80110b8:	2000      	movs	r0, #0
 80110ba:	6360      	str	r0, [r4, #52]	; 0x34
 80110bc:	e7c0      	b.n	8011040 <__sflush_r+0x1c>
 80110be:	2301      	movs	r3, #1
 80110c0:	4628      	mov	r0, r5
 80110c2:	47b0      	blx	r6
 80110c4:	1c41      	adds	r1, r0, #1
 80110c6:	d1c8      	bne.n	801105a <__sflush_r+0x36>
 80110c8:	682b      	ldr	r3, [r5, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d0c5      	beq.n	801105a <__sflush_r+0x36>
 80110ce:	2b1d      	cmp	r3, #29
 80110d0:	d001      	beq.n	80110d6 <__sflush_r+0xb2>
 80110d2:	2b16      	cmp	r3, #22
 80110d4:	d101      	bne.n	80110da <__sflush_r+0xb6>
 80110d6:	602f      	str	r7, [r5, #0]
 80110d8:	e7b1      	b.n	801103e <__sflush_r+0x1a>
 80110da:	89a3      	ldrh	r3, [r4, #12]
 80110dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110e0:	81a3      	strh	r3, [r4, #12]
 80110e2:	e7ad      	b.n	8011040 <__sflush_r+0x1c>
 80110e4:	690f      	ldr	r7, [r1, #16]
 80110e6:	2f00      	cmp	r7, #0
 80110e8:	d0a9      	beq.n	801103e <__sflush_r+0x1a>
 80110ea:	0793      	lsls	r3, r2, #30
 80110ec:	680e      	ldr	r6, [r1, #0]
 80110ee:	bf08      	it	eq
 80110f0:	694b      	ldreq	r3, [r1, #20]
 80110f2:	600f      	str	r7, [r1, #0]
 80110f4:	bf18      	it	ne
 80110f6:	2300      	movne	r3, #0
 80110f8:	eba6 0807 	sub.w	r8, r6, r7
 80110fc:	608b      	str	r3, [r1, #8]
 80110fe:	f1b8 0f00 	cmp.w	r8, #0
 8011102:	dd9c      	ble.n	801103e <__sflush_r+0x1a>
 8011104:	6a21      	ldr	r1, [r4, #32]
 8011106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011108:	4643      	mov	r3, r8
 801110a:	463a      	mov	r2, r7
 801110c:	4628      	mov	r0, r5
 801110e:	47b0      	blx	r6
 8011110:	2800      	cmp	r0, #0
 8011112:	dc06      	bgt.n	8011122 <__sflush_r+0xfe>
 8011114:	89a3      	ldrh	r3, [r4, #12]
 8011116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801111a:	81a3      	strh	r3, [r4, #12]
 801111c:	f04f 30ff 	mov.w	r0, #4294967295
 8011120:	e78e      	b.n	8011040 <__sflush_r+0x1c>
 8011122:	4407      	add	r7, r0
 8011124:	eba8 0800 	sub.w	r8, r8, r0
 8011128:	e7e9      	b.n	80110fe <__sflush_r+0xda>
 801112a:	bf00      	nop
 801112c:	dfbffffe 	.word	0xdfbffffe

08011130 <_fflush_r>:
 8011130:	b538      	push	{r3, r4, r5, lr}
 8011132:	690b      	ldr	r3, [r1, #16]
 8011134:	4605      	mov	r5, r0
 8011136:	460c      	mov	r4, r1
 8011138:	b913      	cbnz	r3, 8011140 <_fflush_r+0x10>
 801113a:	2500      	movs	r5, #0
 801113c:	4628      	mov	r0, r5
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	b118      	cbz	r0, 801114a <_fflush_r+0x1a>
 8011142:	6a03      	ldr	r3, [r0, #32]
 8011144:	b90b      	cbnz	r3, 801114a <_fflush_r+0x1a>
 8011146:	f7fe fb19 	bl	800f77c <__sinit>
 801114a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d0f3      	beq.n	801113a <_fflush_r+0xa>
 8011152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011154:	07d0      	lsls	r0, r2, #31
 8011156:	d404      	bmi.n	8011162 <_fflush_r+0x32>
 8011158:	0599      	lsls	r1, r3, #22
 801115a:	d402      	bmi.n	8011162 <_fflush_r+0x32>
 801115c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801115e:	f7fe fc59 	bl	800fa14 <__retarget_lock_acquire_recursive>
 8011162:	4628      	mov	r0, r5
 8011164:	4621      	mov	r1, r4
 8011166:	f7ff ff5d 	bl	8011024 <__sflush_r>
 801116a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801116c:	07da      	lsls	r2, r3, #31
 801116e:	4605      	mov	r5, r0
 8011170:	d4e4      	bmi.n	801113c <_fflush_r+0xc>
 8011172:	89a3      	ldrh	r3, [r4, #12]
 8011174:	059b      	lsls	r3, r3, #22
 8011176:	d4e1      	bmi.n	801113c <_fflush_r+0xc>
 8011178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801117a:	f7fe fc4c 	bl	800fa16 <__retarget_lock_release_recursive>
 801117e:	e7dd      	b.n	801113c <_fflush_r+0xc>

08011180 <_sbrk_r>:
 8011180:	b538      	push	{r3, r4, r5, lr}
 8011182:	4d06      	ldr	r5, [pc, #24]	; (801119c <_sbrk_r+0x1c>)
 8011184:	2300      	movs	r3, #0
 8011186:	4604      	mov	r4, r0
 8011188:	4608      	mov	r0, r1
 801118a:	602b      	str	r3, [r5, #0]
 801118c:	f7f4 f838 	bl	8005200 <_sbrk>
 8011190:	1c43      	adds	r3, r0, #1
 8011192:	d102      	bne.n	801119a <_sbrk_r+0x1a>
 8011194:	682b      	ldr	r3, [r5, #0]
 8011196:	b103      	cbz	r3, 801119a <_sbrk_r+0x1a>
 8011198:	6023      	str	r3, [r4, #0]
 801119a:	bd38      	pop	{r3, r4, r5, pc}
 801119c:	2000977c 	.word	0x2000977c

080111a0 <__assert_func>:
 80111a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80111a2:	4614      	mov	r4, r2
 80111a4:	461a      	mov	r2, r3
 80111a6:	4b09      	ldr	r3, [pc, #36]	; (80111cc <__assert_func+0x2c>)
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	4605      	mov	r5, r0
 80111ac:	68d8      	ldr	r0, [r3, #12]
 80111ae:	b14c      	cbz	r4, 80111c4 <__assert_func+0x24>
 80111b0:	4b07      	ldr	r3, [pc, #28]	; (80111d0 <__assert_func+0x30>)
 80111b2:	9100      	str	r1, [sp, #0]
 80111b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80111b8:	4906      	ldr	r1, [pc, #24]	; (80111d4 <__assert_func+0x34>)
 80111ba:	462b      	mov	r3, r5
 80111bc:	f000 f844 	bl	8011248 <fiprintf>
 80111c0:	f000 f854 	bl	801126c <abort>
 80111c4:	4b04      	ldr	r3, [pc, #16]	; (80111d8 <__assert_func+0x38>)
 80111c6:	461c      	mov	r4, r3
 80111c8:	e7f3      	b.n	80111b2 <__assert_func+0x12>
 80111ca:	bf00      	nop
 80111cc:	2000006c 	.word	0x2000006c
 80111d0:	080121a6 	.word	0x080121a6
 80111d4:	080121b3 	.word	0x080121b3
 80111d8:	080121e1 	.word	0x080121e1

080111dc <_calloc_r>:
 80111dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80111de:	fba1 2402 	umull	r2, r4, r1, r2
 80111e2:	b94c      	cbnz	r4, 80111f8 <_calloc_r+0x1c>
 80111e4:	4611      	mov	r1, r2
 80111e6:	9201      	str	r2, [sp, #4]
 80111e8:	f7ff fb14 	bl	8010814 <_malloc_r>
 80111ec:	9a01      	ldr	r2, [sp, #4]
 80111ee:	4605      	mov	r5, r0
 80111f0:	b930      	cbnz	r0, 8011200 <_calloc_r+0x24>
 80111f2:	4628      	mov	r0, r5
 80111f4:	b003      	add	sp, #12
 80111f6:	bd30      	pop	{r4, r5, pc}
 80111f8:	220c      	movs	r2, #12
 80111fa:	6002      	str	r2, [r0, #0]
 80111fc:	2500      	movs	r5, #0
 80111fe:	e7f8      	b.n	80111f2 <_calloc_r+0x16>
 8011200:	4621      	mov	r1, r4
 8011202:	f7fe fb34 	bl	800f86e <memset>
 8011206:	e7f4      	b.n	80111f2 <_calloc_r+0x16>

08011208 <__ascii_mbtowc>:
 8011208:	b082      	sub	sp, #8
 801120a:	b901      	cbnz	r1, 801120e <__ascii_mbtowc+0x6>
 801120c:	a901      	add	r1, sp, #4
 801120e:	b142      	cbz	r2, 8011222 <__ascii_mbtowc+0x1a>
 8011210:	b14b      	cbz	r3, 8011226 <__ascii_mbtowc+0x1e>
 8011212:	7813      	ldrb	r3, [r2, #0]
 8011214:	600b      	str	r3, [r1, #0]
 8011216:	7812      	ldrb	r2, [r2, #0]
 8011218:	1e10      	subs	r0, r2, #0
 801121a:	bf18      	it	ne
 801121c:	2001      	movne	r0, #1
 801121e:	b002      	add	sp, #8
 8011220:	4770      	bx	lr
 8011222:	4610      	mov	r0, r2
 8011224:	e7fb      	b.n	801121e <__ascii_mbtowc+0x16>
 8011226:	f06f 0001 	mvn.w	r0, #1
 801122a:	e7f8      	b.n	801121e <__ascii_mbtowc+0x16>

0801122c <__ascii_wctomb>:
 801122c:	b149      	cbz	r1, 8011242 <__ascii_wctomb+0x16>
 801122e:	2aff      	cmp	r2, #255	; 0xff
 8011230:	bf85      	ittet	hi
 8011232:	238a      	movhi	r3, #138	; 0x8a
 8011234:	6003      	strhi	r3, [r0, #0]
 8011236:	700a      	strbls	r2, [r1, #0]
 8011238:	f04f 30ff 	movhi.w	r0, #4294967295
 801123c:	bf98      	it	ls
 801123e:	2001      	movls	r0, #1
 8011240:	4770      	bx	lr
 8011242:	4608      	mov	r0, r1
 8011244:	4770      	bx	lr
	...

08011248 <fiprintf>:
 8011248:	b40e      	push	{r1, r2, r3}
 801124a:	b503      	push	{r0, r1, lr}
 801124c:	4601      	mov	r1, r0
 801124e:	ab03      	add	r3, sp, #12
 8011250:	4805      	ldr	r0, [pc, #20]	; (8011268 <fiprintf+0x20>)
 8011252:	f853 2b04 	ldr.w	r2, [r3], #4
 8011256:	6800      	ldr	r0, [r0, #0]
 8011258:	9301      	str	r3, [sp, #4]
 801125a:	f000 f837 	bl	80112cc <_vfiprintf_r>
 801125e:	b002      	add	sp, #8
 8011260:	f85d eb04 	ldr.w	lr, [sp], #4
 8011264:	b003      	add	sp, #12
 8011266:	4770      	bx	lr
 8011268:	2000006c 	.word	0x2000006c

0801126c <abort>:
 801126c:	b508      	push	{r3, lr}
 801126e:	2006      	movs	r0, #6
 8011270:	f000 fa04 	bl	801167c <raise>
 8011274:	2001      	movs	r0, #1
 8011276:	f7f3 ff4b 	bl	8005110 <_exit>

0801127a <__sfputc_r>:
 801127a:	6893      	ldr	r3, [r2, #8]
 801127c:	3b01      	subs	r3, #1
 801127e:	2b00      	cmp	r3, #0
 8011280:	b410      	push	{r4}
 8011282:	6093      	str	r3, [r2, #8]
 8011284:	da08      	bge.n	8011298 <__sfputc_r+0x1e>
 8011286:	6994      	ldr	r4, [r2, #24]
 8011288:	42a3      	cmp	r3, r4
 801128a:	db01      	blt.n	8011290 <__sfputc_r+0x16>
 801128c:	290a      	cmp	r1, #10
 801128e:	d103      	bne.n	8011298 <__sfputc_r+0x1e>
 8011290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011294:	f000 b934 	b.w	8011500 <__swbuf_r>
 8011298:	6813      	ldr	r3, [r2, #0]
 801129a:	1c58      	adds	r0, r3, #1
 801129c:	6010      	str	r0, [r2, #0]
 801129e:	7019      	strb	r1, [r3, #0]
 80112a0:	4608      	mov	r0, r1
 80112a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80112a6:	4770      	bx	lr

080112a8 <__sfputs_r>:
 80112a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112aa:	4606      	mov	r6, r0
 80112ac:	460f      	mov	r7, r1
 80112ae:	4614      	mov	r4, r2
 80112b0:	18d5      	adds	r5, r2, r3
 80112b2:	42ac      	cmp	r4, r5
 80112b4:	d101      	bne.n	80112ba <__sfputs_r+0x12>
 80112b6:	2000      	movs	r0, #0
 80112b8:	e007      	b.n	80112ca <__sfputs_r+0x22>
 80112ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112be:	463a      	mov	r2, r7
 80112c0:	4630      	mov	r0, r6
 80112c2:	f7ff ffda 	bl	801127a <__sfputc_r>
 80112c6:	1c43      	adds	r3, r0, #1
 80112c8:	d1f3      	bne.n	80112b2 <__sfputs_r+0xa>
 80112ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080112cc <_vfiprintf_r>:
 80112cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112d0:	460d      	mov	r5, r1
 80112d2:	b09d      	sub	sp, #116	; 0x74
 80112d4:	4614      	mov	r4, r2
 80112d6:	4698      	mov	r8, r3
 80112d8:	4606      	mov	r6, r0
 80112da:	b118      	cbz	r0, 80112e4 <_vfiprintf_r+0x18>
 80112dc:	6a03      	ldr	r3, [r0, #32]
 80112de:	b90b      	cbnz	r3, 80112e4 <_vfiprintf_r+0x18>
 80112e0:	f7fe fa4c 	bl	800f77c <__sinit>
 80112e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80112e6:	07d9      	lsls	r1, r3, #31
 80112e8:	d405      	bmi.n	80112f6 <_vfiprintf_r+0x2a>
 80112ea:	89ab      	ldrh	r3, [r5, #12]
 80112ec:	059a      	lsls	r2, r3, #22
 80112ee:	d402      	bmi.n	80112f6 <_vfiprintf_r+0x2a>
 80112f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80112f2:	f7fe fb8f 	bl	800fa14 <__retarget_lock_acquire_recursive>
 80112f6:	89ab      	ldrh	r3, [r5, #12]
 80112f8:	071b      	lsls	r3, r3, #28
 80112fa:	d501      	bpl.n	8011300 <_vfiprintf_r+0x34>
 80112fc:	692b      	ldr	r3, [r5, #16]
 80112fe:	b99b      	cbnz	r3, 8011328 <_vfiprintf_r+0x5c>
 8011300:	4629      	mov	r1, r5
 8011302:	4630      	mov	r0, r6
 8011304:	f000 f93a 	bl	801157c <__swsetup_r>
 8011308:	b170      	cbz	r0, 8011328 <_vfiprintf_r+0x5c>
 801130a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801130c:	07dc      	lsls	r4, r3, #31
 801130e:	d504      	bpl.n	801131a <_vfiprintf_r+0x4e>
 8011310:	f04f 30ff 	mov.w	r0, #4294967295
 8011314:	b01d      	add	sp, #116	; 0x74
 8011316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801131a:	89ab      	ldrh	r3, [r5, #12]
 801131c:	0598      	lsls	r0, r3, #22
 801131e:	d4f7      	bmi.n	8011310 <_vfiprintf_r+0x44>
 8011320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011322:	f7fe fb78 	bl	800fa16 <__retarget_lock_release_recursive>
 8011326:	e7f3      	b.n	8011310 <_vfiprintf_r+0x44>
 8011328:	2300      	movs	r3, #0
 801132a:	9309      	str	r3, [sp, #36]	; 0x24
 801132c:	2320      	movs	r3, #32
 801132e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011332:	f8cd 800c 	str.w	r8, [sp, #12]
 8011336:	2330      	movs	r3, #48	; 0x30
 8011338:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80114ec <_vfiprintf_r+0x220>
 801133c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011340:	f04f 0901 	mov.w	r9, #1
 8011344:	4623      	mov	r3, r4
 8011346:	469a      	mov	sl, r3
 8011348:	f813 2b01 	ldrb.w	r2, [r3], #1
 801134c:	b10a      	cbz	r2, 8011352 <_vfiprintf_r+0x86>
 801134e:	2a25      	cmp	r2, #37	; 0x25
 8011350:	d1f9      	bne.n	8011346 <_vfiprintf_r+0x7a>
 8011352:	ebba 0b04 	subs.w	fp, sl, r4
 8011356:	d00b      	beq.n	8011370 <_vfiprintf_r+0xa4>
 8011358:	465b      	mov	r3, fp
 801135a:	4622      	mov	r2, r4
 801135c:	4629      	mov	r1, r5
 801135e:	4630      	mov	r0, r6
 8011360:	f7ff ffa2 	bl	80112a8 <__sfputs_r>
 8011364:	3001      	adds	r0, #1
 8011366:	f000 80a9 	beq.w	80114bc <_vfiprintf_r+0x1f0>
 801136a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801136c:	445a      	add	r2, fp
 801136e:	9209      	str	r2, [sp, #36]	; 0x24
 8011370:	f89a 3000 	ldrb.w	r3, [sl]
 8011374:	2b00      	cmp	r3, #0
 8011376:	f000 80a1 	beq.w	80114bc <_vfiprintf_r+0x1f0>
 801137a:	2300      	movs	r3, #0
 801137c:	f04f 32ff 	mov.w	r2, #4294967295
 8011380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011384:	f10a 0a01 	add.w	sl, sl, #1
 8011388:	9304      	str	r3, [sp, #16]
 801138a:	9307      	str	r3, [sp, #28]
 801138c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011390:	931a      	str	r3, [sp, #104]	; 0x68
 8011392:	4654      	mov	r4, sl
 8011394:	2205      	movs	r2, #5
 8011396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801139a:	4854      	ldr	r0, [pc, #336]	; (80114ec <_vfiprintf_r+0x220>)
 801139c:	f7ee ff38 	bl	8000210 <memchr>
 80113a0:	9a04      	ldr	r2, [sp, #16]
 80113a2:	b9d8      	cbnz	r0, 80113dc <_vfiprintf_r+0x110>
 80113a4:	06d1      	lsls	r1, r2, #27
 80113a6:	bf44      	itt	mi
 80113a8:	2320      	movmi	r3, #32
 80113aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113ae:	0713      	lsls	r3, r2, #28
 80113b0:	bf44      	itt	mi
 80113b2:	232b      	movmi	r3, #43	; 0x2b
 80113b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80113b8:	f89a 3000 	ldrb.w	r3, [sl]
 80113bc:	2b2a      	cmp	r3, #42	; 0x2a
 80113be:	d015      	beq.n	80113ec <_vfiprintf_r+0x120>
 80113c0:	9a07      	ldr	r2, [sp, #28]
 80113c2:	4654      	mov	r4, sl
 80113c4:	2000      	movs	r0, #0
 80113c6:	f04f 0c0a 	mov.w	ip, #10
 80113ca:	4621      	mov	r1, r4
 80113cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80113d0:	3b30      	subs	r3, #48	; 0x30
 80113d2:	2b09      	cmp	r3, #9
 80113d4:	d94d      	bls.n	8011472 <_vfiprintf_r+0x1a6>
 80113d6:	b1b0      	cbz	r0, 8011406 <_vfiprintf_r+0x13a>
 80113d8:	9207      	str	r2, [sp, #28]
 80113da:	e014      	b.n	8011406 <_vfiprintf_r+0x13a>
 80113dc:	eba0 0308 	sub.w	r3, r0, r8
 80113e0:	fa09 f303 	lsl.w	r3, r9, r3
 80113e4:	4313      	orrs	r3, r2
 80113e6:	9304      	str	r3, [sp, #16]
 80113e8:	46a2      	mov	sl, r4
 80113ea:	e7d2      	b.n	8011392 <_vfiprintf_r+0xc6>
 80113ec:	9b03      	ldr	r3, [sp, #12]
 80113ee:	1d19      	adds	r1, r3, #4
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	9103      	str	r1, [sp, #12]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	bfbb      	ittet	lt
 80113f8:	425b      	neglt	r3, r3
 80113fa:	f042 0202 	orrlt.w	r2, r2, #2
 80113fe:	9307      	strge	r3, [sp, #28]
 8011400:	9307      	strlt	r3, [sp, #28]
 8011402:	bfb8      	it	lt
 8011404:	9204      	strlt	r2, [sp, #16]
 8011406:	7823      	ldrb	r3, [r4, #0]
 8011408:	2b2e      	cmp	r3, #46	; 0x2e
 801140a:	d10c      	bne.n	8011426 <_vfiprintf_r+0x15a>
 801140c:	7863      	ldrb	r3, [r4, #1]
 801140e:	2b2a      	cmp	r3, #42	; 0x2a
 8011410:	d134      	bne.n	801147c <_vfiprintf_r+0x1b0>
 8011412:	9b03      	ldr	r3, [sp, #12]
 8011414:	1d1a      	adds	r2, r3, #4
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	9203      	str	r2, [sp, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	bfb8      	it	lt
 801141e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011422:	3402      	adds	r4, #2
 8011424:	9305      	str	r3, [sp, #20]
 8011426:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80114fc <_vfiprintf_r+0x230>
 801142a:	7821      	ldrb	r1, [r4, #0]
 801142c:	2203      	movs	r2, #3
 801142e:	4650      	mov	r0, sl
 8011430:	f7ee feee 	bl	8000210 <memchr>
 8011434:	b138      	cbz	r0, 8011446 <_vfiprintf_r+0x17a>
 8011436:	9b04      	ldr	r3, [sp, #16]
 8011438:	eba0 000a 	sub.w	r0, r0, sl
 801143c:	2240      	movs	r2, #64	; 0x40
 801143e:	4082      	lsls	r2, r0
 8011440:	4313      	orrs	r3, r2
 8011442:	3401      	adds	r4, #1
 8011444:	9304      	str	r3, [sp, #16]
 8011446:	f814 1b01 	ldrb.w	r1, [r4], #1
 801144a:	4829      	ldr	r0, [pc, #164]	; (80114f0 <_vfiprintf_r+0x224>)
 801144c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011450:	2206      	movs	r2, #6
 8011452:	f7ee fedd 	bl	8000210 <memchr>
 8011456:	2800      	cmp	r0, #0
 8011458:	d03f      	beq.n	80114da <_vfiprintf_r+0x20e>
 801145a:	4b26      	ldr	r3, [pc, #152]	; (80114f4 <_vfiprintf_r+0x228>)
 801145c:	bb1b      	cbnz	r3, 80114a6 <_vfiprintf_r+0x1da>
 801145e:	9b03      	ldr	r3, [sp, #12]
 8011460:	3307      	adds	r3, #7
 8011462:	f023 0307 	bic.w	r3, r3, #7
 8011466:	3308      	adds	r3, #8
 8011468:	9303      	str	r3, [sp, #12]
 801146a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801146c:	443b      	add	r3, r7
 801146e:	9309      	str	r3, [sp, #36]	; 0x24
 8011470:	e768      	b.n	8011344 <_vfiprintf_r+0x78>
 8011472:	fb0c 3202 	mla	r2, ip, r2, r3
 8011476:	460c      	mov	r4, r1
 8011478:	2001      	movs	r0, #1
 801147a:	e7a6      	b.n	80113ca <_vfiprintf_r+0xfe>
 801147c:	2300      	movs	r3, #0
 801147e:	3401      	adds	r4, #1
 8011480:	9305      	str	r3, [sp, #20]
 8011482:	4619      	mov	r1, r3
 8011484:	f04f 0c0a 	mov.w	ip, #10
 8011488:	4620      	mov	r0, r4
 801148a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801148e:	3a30      	subs	r2, #48	; 0x30
 8011490:	2a09      	cmp	r2, #9
 8011492:	d903      	bls.n	801149c <_vfiprintf_r+0x1d0>
 8011494:	2b00      	cmp	r3, #0
 8011496:	d0c6      	beq.n	8011426 <_vfiprintf_r+0x15a>
 8011498:	9105      	str	r1, [sp, #20]
 801149a:	e7c4      	b.n	8011426 <_vfiprintf_r+0x15a>
 801149c:	fb0c 2101 	mla	r1, ip, r1, r2
 80114a0:	4604      	mov	r4, r0
 80114a2:	2301      	movs	r3, #1
 80114a4:	e7f0      	b.n	8011488 <_vfiprintf_r+0x1bc>
 80114a6:	ab03      	add	r3, sp, #12
 80114a8:	9300      	str	r3, [sp, #0]
 80114aa:	462a      	mov	r2, r5
 80114ac:	4b12      	ldr	r3, [pc, #72]	; (80114f8 <_vfiprintf_r+0x22c>)
 80114ae:	a904      	add	r1, sp, #16
 80114b0:	4630      	mov	r0, r6
 80114b2:	f7fd fd23 	bl	800eefc <_printf_float>
 80114b6:	4607      	mov	r7, r0
 80114b8:	1c78      	adds	r0, r7, #1
 80114ba:	d1d6      	bne.n	801146a <_vfiprintf_r+0x19e>
 80114bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80114be:	07d9      	lsls	r1, r3, #31
 80114c0:	d405      	bmi.n	80114ce <_vfiprintf_r+0x202>
 80114c2:	89ab      	ldrh	r3, [r5, #12]
 80114c4:	059a      	lsls	r2, r3, #22
 80114c6:	d402      	bmi.n	80114ce <_vfiprintf_r+0x202>
 80114c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80114ca:	f7fe faa4 	bl	800fa16 <__retarget_lock_release_recursive>
 80114ce:	89ab      	ldrh	r3, [r5, #12]
 80114d0:	065b      	lsls	r3, r3, #25
 80114d2:	f53f af1d 	bmi.w	8011310 <_vfiprintf_r+0x44>
 80114d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80114d8:	e71c      	b.n	8011314 <_vfiprintf_r+0x48>
 80114da:	ab03      	add	r3, sp, #12
 80114dc:	9300      	str	r3, [sp, #0]
 80114de:	462a      	mov	r2, r5
 80114e0:	4b05      	ldr	r3, [pc, #20]	; (80114f8 <_vfiprintf_r+0x22c>)
 80114e2:	a904      	add	r1, sp, #16
 80114e4:	4630      	mov	r0, r6
 80114e6:	f7fd ffad 	bl	800f444 <_printf_i>
 80114ea:	e7e4      	b.n	80114b6 <_vfiprintf_r+0x1ea>
 80114ec:	080122e3 	.word	0x080122e3
 80114f0:	080122ed 	.word	0x080122ed
 80114f4:	0800eefd 	.word	0x0800eefd
 80114f8:	080112a9 	.word	0x080112a9
 80114fc:	080122e9 	.word	0x080122e9

08011500 <__swbuf_r>:
 8011500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011502:	460e      	mov	r6, r1
 8011504:	4614      	mov	r4, r2
 8011506:	4605      	mov	r5, r0
 8011508:	b118      	cbz	r0, 8011512 <__swbuf_r+0x12>
 801150a:	6a03      	ldr	r3, [r0, #32]
 801150c:	b90b      	cbnz	r3, 8011512 <__swbuf_r+0x12>
 801150e:	f7fe f935 	bl	800f77c <__sinit>
 8011512:	69a3      	ldr	r3, [r4, #24]
 8011514:	60a3      	str	r3, [r4, #8]
 8011516:	89a3      	ldrh	r3, [r4, #12]
 8011518:	071a      	lsls	r2, r3, #28
 801151a:	d525      	bpl.n	8011568 <__swbuf_r+0x68>
 801151c:	6923      	ldr	r3, [r4, #16]
 801151e:	b31b      	cbz	r3, 8011568 <__swbuf_r+0x68>
 8011520:	6823      	ldr	r3, [r4, #0]
 8011522:	6922      	ldr	r2, [r4, #16]
 8011524:	1a98      	subs	r0, r3, r2
 8011526:	6963      	ldr	r3, [r4, #20]
 8011528:	b2f6      	uxtb	r6, r6
 801152a:	4283      	cmp	r3, r0
 801152c:	4637      	mov	r7, r6
 801152e:	dc04      	bgt.n	801153a <__swbuf_r+0x3a>
 8011530:	4621      	mov	r1, r4
 8011532:	4628      	mov	r0, r5
 8011534:	f7ff fdfc 	bl	8011130 <_fflush_r>
 8011538:	b9e0      	cbnz	r0, 8011574 <__swbuf_r+0x74>
 801153a:	68a3      	ldr	r3, [r4, #8]
 801153c:	3b01      	subs	r3, #1
 801153e:	60a3      	str	r3, [r4, #8]
 8011540:	6823      	ldr	r3, [r4, #0]
 8011542:	1c5a      	adds	r2, r3, #1
 8011544:	6022      	str	r2, [r4, #0]
 8011546:	701e      	strb	r6, [r3, #0]
 8011548:	6962      	ldr	r2, [r4, #20]
 801154a:	1c43      	adds	r3, r0, #1
 801154c:	429a      	cmp	r2, r3
 801154e:	d004      	beq.n	801155a <__swbuf_r+0x5a>
 8011550:	89a3      	ldrh	r3, [r4, #12]
 8011552:	07db      	lsls	r3, r3, #31
 8011554:	d506      	bpl.n	8011564 <__swbuf_r+0x64>
 8011556:	2e0a      	cmp	r6, #10
 8011558:	d104      	bne.n	8011564 <__swbuf_r+0x64>
 801155a:	4621      	mov	r1, r4
 801155c:	4628      	mov	r0, r5
 801155e:	f7ff fde7 	bl	8011130 <_fflush_r>
 8011562:	b938      	cbnz	r0, 8011574 <__swbuf_r+0x74>
 8011564:	4638      	mov	r0, r7
 8011566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011568:	4621      	mov	r1, r4
 801156a:	4628      	mov	r0, r5
 801156c:	f000 f806 	bl	801157c <__swsetup_r>
 8011570:	2800      	cmp	r0, #0
 8011572:	d0d5      	beq.n	8011520 <__swbuf_r+0x20>
 8011574:	f04f 37ff 	mov.w	r7, #4294967295
 8011578:	e7f4      	b.n	8011564 <__swbuf_r+0x64>
	...

0801157c <__swsetup_r>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	4b2a      	ldr	r3, [pc, #168]	; (8011628 <__swsetup_r+0xac>)
 8011580:	4605      	mov	r5, r0
 8011582:	6818      	ldr	r0, [r3, #0]
 8011584:	460c      	mov	r4, r1
 8011586:	b118      	cbz	r0, 8011590 <__swsetup_r+0x14>
 8011588:	6a03      	ldr	r3, [r0, #32]
 801158a:	b90b      	cbnz	r3, 8011590 <__swsetup_r+0x14>
 801158c:	f7fe f8f6 	bl	800f77c <__sinit>
 8011590:	89a3      	ldrh	r3, [r4, #12]
 8011592:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011596:	0718      	lsls	r0, r3, #28
 8011598:	d422      	bmi.n	80115e0 <__swsetup_r+0x64>
 801159a:	06d9      	lsls	r1, r3, #27
 801159c:	d407      	bmi.n	80115ae <__swsetup_r+0x32>
 801159e:	2309      	movs	r3, #9
 80115a0:	602b      	str	r3, [r5, #0]
 80115a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80115a6:	81a3      	strh	r3, [r4, #12]
 80115a8:	f04f 30ff 	mov.w	r0, #4294967295
 80115ac:	e034      	b.n	8011618 <__swsetup_r+0x9c>
 80115ae:	0758      	lsls	r0, r3, #29
 80115b0:	d512      	bpl.n	80115d8 <__swsetup_r+0x5c>
 80115b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115b4:	b141      	cbz	r1, 80115c8 <__swsetup_r+0x4c>
 80115b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115ba:	4299      	cmp	r1, r3
 80115bc:	d002      	beq.n	80115c4 <__swsetup_r+0x48>
 80115be:	4628      	mov	r0, r5
 80115c0:	f7ff f8b4 	bl	801072c <_free_r>
 80115c4:	2300      	movs	r3, #0
 80115c6:	6363      	str	r3, [r4, #52]	; 0x34
 80115c8:	89a3      	ldrh	r3, [r4, #12]
 80115ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80115ce:	81a3      	strh	r3, [r4, #12]
 80115d0:	2300      	movs	r3, #0
 80115d2:	6063      	str	r3, [r4, #4]
 80115d4:	6923      	ldr	r3, [r4, #16]
 80115d6:	6023      	str	r3, [r4, #0]
 80115d8:	89a3      	ldrh	r3, [r4, #12]
 80115da:	f043 0308 	orr.w	r3, r3, #8
 80115de:	81a3      	strh	r3, [r4, #12]
 80115e0:	6923      	ldr	r3, [r4, #16]
 80115e2:	b94b      	cbnz	r3, 80115f8 <__swsetup_r+0x7c>
 80115e4:	89a3      	ldrh	r3, [r4, #12]
 80115e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80115ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115ee:	d003      	beq.n	80115f8 <__swsetup_r+0x7c>
 80115f0:	4621      	mov	r1, r4
 80115f2:	4628      	mov	r0, r5
 80115f4:	f000 f884 	bl	8011700 <__smakebuf_r>
 80115f8:	89a0      	ldrh	r0, [r4, #12]
 80115fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80115fe:	f010 0301 	ands.w	r3, r0, #1
 8011602:	d00a      	beq.n	801161a <__swsetup_r+0x9e>
 8011604:	2300      	movs	r3, #0
 8011606:	60a3      	str	r3, [r4, #8]
 8011608:	6963      	ldr	r3, [r4, #20]
 801160a:	425b      	negs	r3, r3
 801160c:	61a3      	str	r3, [r4, #24]
 801160e:	6923      	ldr	r3, [r4, #16]
 8011610:	b943      	cbnz	r3, 8011624 <__swsetup_r+0xa8>
 8011612:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011616:	d1c4      	bne.n	80115a2 <__swsetup_r+0x26>
 8011618:	bd38      	pop	{r3, r4, r5, pc}
 801161a:	0781      	lsls	r1, r0, #30
 801161c:	bf58      	it	pl
 801161e:	6963      	ldrpl	r3, [r4, #20]
 8011620:	60a3      	str	r3, [r4, #8]
 8011622:	e7f4      	b.n	801160e <__swsetup_r+0x92>
 8011624:	2000      	movs	r0, #0
 8011626:	e7f7      	b.n	8011618 <__swsetup_r+0x9c>
 8011628:	2000006c 	.word	0x2000006c

0801162c <_raise_r>:
 801162c:	291f      	cmp	r1, #31
 801162e:	b538      	push	{r3, r4, r5, lr}
 8011630:	4604      	mov	r4, r0
 8011632:	460d      	mov	r5, r1
 8011634:	d904      	bls.n	8011640 <_raise_r+0x14>
 8011636:	2316      	movs	r3, #22
 8011638:	6003      	str	r3, [r0, #0]
 801163a:	f04f 30ff 	mov.w	r0, #4294967295
 801163e:	bd38      	pop	{r3, r4, r5, pc}
 8011640:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011642:	b112      	cbz	r2, 801164a <_raise_r+0x1e>
 8011644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011648:	b94b      	cbnz	r3, 801165e <_raise_r+0x32>
 801164a:	4620      	mov	r0, r4
 801164c:	f000 f830 	bl	80116b0 <_getpid_r>
 8011650:	462a      	mov	r2, r5
 8011652:	4601      	mov	r1, r0
 8011654:	4620      	mov	r0, r4
 8011656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801165a:	f000 b817 	b.w	801168c <_kill_r>
 801165e:	2b01      	cmp	r3, #1
 8011660:	d00a      	beq.n	8011678 <_raise_r+0x4c>
 8011662:	1c59      	adds	r1, r3, #1
 8011664:	d103      	bne.n	801166e <_raise_r+0x42>
 8011666:	2316      	movs	r3, #22
 8011668:	6003      	str	r3, [r0, #0]
 801166a:	2001      	movs	r0, #1
 801166c:	e7e7      	b.n	801163e <_raise_r+0x12>
 801166e:	2400      	movs	r4, #0
 8011670:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011674:	4628      	mov	r0, r5
 8011676:	4798      	blx	r3
 8011678:	2000      	movs	r0, #0
 801167a:	e7e0      	b.n	801163e <_raise_r+0x12>

0801167c <raise>:
 801167c:	4b02      	ldr	r3, [pc, #8]	; (8011688 <raise+0xc>)
 801167e:	4601      	mov	r1, r0
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	f7ff bfd3 	b.w	801162c <_raise_r>
 8011686:	bf00      	nop
 8011688:	2000006c 	.word	0x2000006c

0801168c <_kill_r>:
 801168c:	b538      	push	{r3, r4, r5, lr}
 801168e:	4d07      	ldr	r5, [pc, #28]	; (80116ac <_kill_r+0x20>)
 8011690:	2300      	movs	r3, #0
 8011692:	4604      	mov	r4, r0
 8011694:	4608      	mov	r0, r1
 8011696:	4611      	mov	r1, r2
 8011698:	602b      	str	r3, [r5, #0]
 801169a:	f7f3 fd29 	bl	80050f0 <_kill>
 801169e:	1c43      	adds	r3, r0, #1
 80116a0:	d102      	bne.n	80116a8 <_kill_r+0x1c>
 80116a2:	682b      	ldr	r3, [r5, #0]
 80116a4:	b103      	cbz	r3, 80116a8 <_kill_r+0x1c>
 80116a6:	6023      	str	r3, [r4, #0]
 80116a8:	bd38      	pop	{r3, r4, r5, pc}
 80116aa:	bf00      	nop
 80116ac:	2000977c 	.word	0x2000977c

080116b0 <_getpid_r>:
 80116b0:	f7f3 bd16 	b.w	80050e0 <_getpid>

080116b4 <__swhatbuf_r>:
 80116b4:	b570      	push	{r4, r5, r6, lr}
 80116b6:	460c      	mov	r4, r1
 80116b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116bc:	2900      	cmp	r1, #0
 80116be:	b096      	sub	sp, #88	; 0x58
 80116c0:	4615      	mov	r5, r2
 80116c2:	461e      	mov	r6, r3
 80116c4:	da0d      	bge.n	80116e2 <__swhatbuf_r+0x2e>
 80116c6:	89a3      	ldrh	r3, [r4, #12]
 80116c8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80116cc:	f04f 0100 	mov.w	r1, #0
 80116d0:	bf0c      	ite	eq
 80116d2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80116d6:	2340      	movne	r3, #64	; 0x40
 80116d8:	2000      	movs	r0, #0
 80116da:	6031      	str	r1, [r6, #0]
 80116dc:	602b      	str	r3, [r5, #0]
 80116de:	b016      	add	sp, #88	; 0x58
 80116e0:	bd70      	pop	{r4, r5, r6, pc}
 80116e2:	466a      	mov	r2, sp
 80116e4:	f000 f848 	bl	8011778 <_fstat_r>
 80116e8:	2800      	cmp	r0, #0
 80116ea:	dbec      	blt.n	80116c6 <__swhatbuf_r+0x12>
 80116ec:	9901      	ldr	r1, [sp, #4]
 80116ee:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80116f2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80116f6:	4259      	negs	r1, r3
 80116f8:	4159      	adcs	r1, r3
 80116fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80116fe:	e7eb      	b.n	80116d8 <__swhatbuf_r+0x24>

08011700 <__smakebuf_r>:
 8011700:	898b      	ldrh	r3, [r1, #12]
 8011702:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011704:	079d      	lsls	r5, r3, #30
 8011706:	4606      	mov	r6, r0
 8011708:	460c      	mov	r4, r1
 801170a:	d507      	bpl.n	801171c <__smakebuf_r+0x1c>
 801170c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011710:	6023      	str	r3, [r4, #0]
 8011712:	6123      	str	r3, [r4, #16]
 8011714:	2301      	movs	r3, #1
 8011716:	6163      	str	r3, [r4, #20]
 8011718:	b002      	add	sp, #8
 801171a:	bd70      	pop	{r4, r5, r6, pc}
 801171c:	ab01      	add	r3, sp, #4
 801171e:	466a      	mov	r2, sp
 8011720:	f7ff ffc8 	bl	80116b4 <__swhatbuf_r>
 8011724:	9900      	ldr	r1, [sp, #0]
 8011726:	4605      	mov	r5, r0
 8011728:	4630      	mov	r0, r6
 801172a:	f7ff f873 	bl	8010814 <_malloc_r>
 801172e:	b948      	cbnz	r0, 8011744 <__smakebuf_r+0x44>
 8011730:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011734:	059a      	lsls	r2, r3, #22
 8011736:	d4ef      	bmi.n	8011718 <__smakebuf_r+0x18>
 8011738:	f023 0303 	bic.w	r3, r3, #3
 801173c:	f043 0302 	orr.w	r3, r3, #2
 8011740:	81a3      	strh	r3, [r4, #12]
 8011742:	e7e3      	b.n	801170c <__smakebuf_r+0xc>
 8011744:	89a3      	ldrh	r3, [r4, #12]
 8011746:	6020      	str	r0, [r4, #0]
 8011748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801174c:	81a3      	strh	r3, [r4, #12]
 801174e:	9b00      	ldr	r3, [sp, #0]
 8011750:	6163      	str	r3, [r4, #20]
 8011752:	9b01      	ldr	r3, [sp, #4]
 8011754:	6120      	str	r0, [r4, #16]
 8011756:	b15b      	cbz	r3, 8011770 <__smakebuf_r+0x70>
 8011758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801175c:	4630      	mov	r0, r6
 801175e:	f000 f81d 	bl	801179c <_isatty_r>
 8011762:	b128      	cbz	r0, 8011770 <__smakebuf_r+0x70>
 8011764:	89a3      	ldrh	r3, [r4, #12]
 8011766:	f023 0303 	bic.w	r3, r3, #3
 801176a:	f043 0301 	orr.w	r3, r3, #1
 801176e:	81a3      	strh	r3, [r4, #12]
 8011770:	89a3      	ldrh	r3, [r4, #12]
 8011772:	431d      	orrs	r5, r3
 8011774:	81a5      	strh	r5, [r4, #12]
 8011776:	e7cf      	b.n	8011718 <__smakebuf_r+0x18>

08011778 <_fstat_r>:
 8011778:	b538      	push	{r3, r4, r5, lr}
 801177a:	4d07      	ldr	r5, [pc, #28]	; (8011798 <_fstat_r+0x20>)
 801177c:	2300      	movs	r3, #0
 801177e:	4604      	mov	r4, r0
 8011780:	4608      	mov	r0, r1
 8011782:	4611      	mov	r1, r2
 8011784:	602b      	str	r3, [r5, #0]
 8011786:	f7f3 fd12 	bl	80051ae <_fstat>
 801178a:	1c43      	adds	r3, r0, #1
 801178c:	d102      	bne.n	8011794 <_fstat_r+0x1c>
 801178e:	682b      	ldr	r3, [r5, #0]
 8011790:	b103      	cbz	r3, 8011794 <_fstat_r+0x1c>
 8011792:	6023      	str	r3, [r4, #0]
 8011794:	bd38      	pop	{r3, r4, r5, pc}
 8011796:	bf00      	nop
 8011798:	2000977c 	.word	0x2000977c

0801179c <_isatty_r>:
 801179c:	b538      	push	{r3, r4, r5, lr}
 801179e:	4d06      	ldr	r5, [pc, #24]	; (80117b8 <_isatty_r+0x1c>)
 80117a0:	2300      	movs	r3, #0
 80117a2:	4604      	mov	r4, r0
 80117a4:	4608      	mov	r0, r1
 80117a6:	602b      	str	r3, [r5, #0]
 80117a8:	f7f3 fd11 	bl	80051ce <_isatty>
 80117ac:	1c43      	adds	r3, r0, #1
 80117ae:	d102      	bne.n	80117b6 <_isatty_r+0x1a>
 80117b0:	682b      	ldr	r3, [r5, #0]
 80117b2:	b103      	cbz	r3, 80117b6 <_isatty_r+0x1a>
 80117b4:	6023      	str	r3, [r4, #0]
 80117b6:	bd38      	pop	{r3, r4, r5, pc}
 80117b8:	2000977c 	.word	0x2000977c

080117bc <_init>:
 80117bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117be:	bf00      	nop
 80117c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117c2:	bc08      	pop	{r3}
 80117c4:	469e      	mov	lr, r3
 80117c6:	4770      	bx	lr

080117c8 <_fini>:
 80117c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117ca:	bf00      	nop
 80117cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80117ce:	bc08      	pop	{r3}
 80117d0:	469e      	mov	lr, r3
 80117d2:	4770      	bx	lr

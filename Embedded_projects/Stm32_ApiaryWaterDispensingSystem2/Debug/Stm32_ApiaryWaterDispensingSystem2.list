
Stm32_ApiaryWaterDispensingSystem2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011024  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  080111c8  080111c8  000211c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011c6c  08011c6c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011c6c  08011c6c  00021c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011c74  08011c74  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011c74  08011c74  00021c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011c78  08011c78  00021c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08011c7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000094ec  200001e0  08011e5c  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200096cc  08011e5c  000396cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023971  00000000  00000000  00030253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005480  00000000  00000000  00053bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce8  00000000  00000000  00059048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001663  00000000  00000000  0005ad30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d1f2  00000000  00000000  0005c393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025a17  00000000  00000000  00079585  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a599a  00000000  00000000  0009ef9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008864  00000000  00000000  00144938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0014d19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080111ac 	.word	0x080111ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080111ac 	.word	0x080111ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_ldivmod>:
 8000bf8:	b97b      	cbnz	r3, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfa:	b972      	cbnz	r2, 8000c1a <__aeabi_ldivmod+0x22>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bfbe      	ittt	lt
 8000c00:	2000      	movlt	r0, #0
 8000c02:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c06:	e006      	blt.n	8000c16 <__aeabi_ldivmod+0x1e>
 8000c08:	bf08      	it	eq
 8000c0a:	2800      	cmpeq	r0, #0
 8000c0c:	bf1c      	itt	ne
 8000c0e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c12:	f04f 30ff 	movne.w	r0, #4294967295
 8000c16:	f000 b9bb 	b.w	8000f90 <__aeabi_idiv0>
 8000c1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c22:	2900      	cmp	r1, #0
 8000c24:	db09      	blt.n	8000c3a <__aeabi_ldivmod+0x42>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	db1a      	blt.n	8000c60 <__aeabi_ldivmod+0x68>
 8000c2a:	f000 f84d 	bl	8000cc8 <__udivmoddi4>
 8000c2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c36:	b004      	add	sp, #16
 8000c38:	4770      	bx	lr
 8000c3a:	4240      	negs	r0, r0
 8000c3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	db1b      	blt.n	8000c7c <__aeabi_ldivmod+0x84>
 8000c44:	f000 f840 	bl	8000cc8 <__udivmoddi4>
 8000c48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c50:	b004      	add	sp, #16
 8000c52:	4240      	negs	r0, r0
 8000c54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c58:	4252      	negs	r2, r2
 8000c5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c5e:	4770      	bx	lr
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	f000 f82f 	bl	8000cc8 <__udivmoddi4>
 8000c6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c72:	b004      	add	sp, #16
 8000c74:	4240      	negs	r0, r0
 8000c76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7a:	4770      	bx	lr
 8000c7c:	4252      	negs	r2, r2
 8000c7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c82:	f000 f821 	bl	8000cc8 <__udivmoddi4>
 8000c86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8e:	b004      	add	sp, #16
 8000c90:	4252      	negs	r2, r2
 8000c92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <GFX_SetFont+0x1c>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6013      	str	r3, [r2, #0]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200001fc 	.word	0x200001fc

08000fb4 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	; 0x24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	71fb      	strb	r3, [r7, #7]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	2b7e      	cmp	r3, #126	; 0x7e
 8000fce:	f200 80a3 	bhi.w	8001118 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]
 8000fd6:	e096      	b.n	8001106 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000fd8:	4b51      	ldr	r3, [pc, #324]	; (8001120 <GFX_DrawChar+0x16c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3b20      	subs	r3, #32
 8000fe0:	494f      	ldr	r1, [pc, #316]	; (8001120 <GFX_DrawChar+0x16c>)
 8000fe2:	6809      	ldr	r1, [r1, #0]
 8000fe4:	3101      	adds	r1, #1
 8000fe6:	7809      	ldrb	r1, [r1, #0]
 8000fe8:	fb03 f101 	mul.w	r1, r3, r1
 8000fec:	7dfb      	ldrb	r3, [r7, #23]
 8000fee:	440b      	add	r3, r1
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	757b      	strb	r3, [r7, #21]
 8000ffc:	e078      	b.n	80010f0 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000ffe:	7dbb      	ldrb	r3, [r7, #22]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d032      	beq.n	800106e <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <GFX_DrawChar+0x170>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d113      	bne.n	8001038 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	b29a      	uxth	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4413      	add	r3, r2
 800101a:	b29b      	uxth	r3, r3
 800101c:	b218      	sxth	r0, r3
 800101e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001022:	b29a      	uxth	r2, r3
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	b29b      	uxth	r3, r3
 8001028:	4413      	add	r3, r2
 800102a:	b29b      	uxth	r3, r3
 800102c:	b21b      	sxth	r3, r3
 800102e:	79ba      	ldrb	r2, [r7, #6]
 8001030:	4619      	mov	r1, r3
 8001032:	f000 f9d1 	bl	80013d8 <SSD1306_DrawPixel>
 8001036:	e052      	b.n	80010de <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	4a3a      	ldr	r2, [pc, #232]	; (8001124 <GFX_DrawChar+0x170>)
 800103c:	7812      	ldrb	r2, [r2, #0]
 800103e:	fb03 f202 	mul.w	r2, r3, r2
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	18d0      	adds	r0, r2, r3
 8001046:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800104a:	4a36      	ldr	r2, [pc, #216]	; (8001124 <GFX_DrawChar+0x170>)
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	fb03 f202 	mul.w	r2, r3, r2
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	18d1      	adds	r1, r2, r3
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <GFX_DrawChar+0x170>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b31      	ldr	r3, [pc, #196]	; (8001124 <GFX_DrawChar+0x170>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b29c      	uxth	r4, r3
 8001062:	79bb      	ldrb	r3, [r7, #6]
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	4623      	mov	r3, r4
 8001068:	f000 f960 	bl	800132c <GFX_DrawFillRectangle>
 800106c:	e037      	b.n	80010de <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800106e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001072:	2b00      	cmp	r3, #0
 8001074:	d133      	bne.n	80010de <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <GFX_DrawChar+0x170>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d114      	bne.n	80010a8 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	b29a      	uxth	r2, r3
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	b29b      	uxth	r3, r3
 8001086:	4413      	add	r3, r2
 8001088:	b29b      	uxth	r3, r3
 800108a:	b218      	sxth	r0, r3
 800108c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001090:	b29a      	uxth	r2, r3
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	b29b      	uxth	r3, r3
 8001096:	4413      	add	r3, r2
 8001098:	b29b      	uxth	r3, r3
 800109a:	b21b      	sxth	r3, r3
 800109c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010a0:	4619      	mov	r1, r3
 80010a2:	f000 f999 	bl	80013d8 <SSD1306_DrawPixel>
 80010a6:	e01a      	b.n	80010de <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	4a1e      	ldr	r2, [pc, #120]	; (8001124 <GFX_DrawChar+0x170>)
 80010ac:	7812      	ldrb	r2, [r2, #0]
 80010ae:	fb03 f202 	mul.w	r2, r3, r2
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	18d0      	adds	r0, r2, r3
 80010b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010ba:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <GFX_DrawChar+0x170>)
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	fb03 f202 	mul.w	r2, r3, r2
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	18d1      	adds	r1, r2, r3
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <GFX_DrawChar+0x170>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	4b15      	ldr	r3, [pc, #84]	; (8001124 <GFX_DrawChar+0x170>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b29c      	uxth	r4, r3
 80010d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	4623      	mov	r3, r4
 80010da:	f000 f927 	bl	800132c <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80010de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	757b      	strb	r3, [r7, #21]
 80010ea:	7dbb      	ldrb	r3, [r7, #22]
 80010ec:	085b      	lsrs	r3, r3, #1
 80010ee:	75bb      	strb	r3, [r7, #22]
 80010f0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010f4:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <GFX_DrawChar+0x16c>)
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	f6ff af7f 	blt.w	8000ffe <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	3301      	adds	r3, #1
 8001104:	75fb      	strb	r3, [r7, #23]
 8001106:	4b06      	ldr	r3, [pc, #24]	; (8001120 <GFX_DrawChar+0x16c>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	429a      	cmp	r2, r3
 8001112:	f4ff af61 	bcc.w	8000fd8 <GFX_DrawChar+0x24>
 8001116:	e000      	b.n	800111a <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8001118:	bf00      	nop
            }
        }
    }
}
 800111a:	371c      	adds	r7, #28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	200001fc 	.word	0x200001fc
 8001124:	20000000 	.word	0x20000000

08001128 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af02      	add	r7, sp, #8
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8001140:	e03e      	b.n	80011c0 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8001142:	78f9      	ldrb	r1, [r7, #3]
 8001144:	7cfa      	ldrb	r2, [r7, #19]
 8001146:	f897 3020 	ldrb.w	r3, [r7, #32]
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	460b      	mov	r3, r1
 800114e:	68b9      	ldr	r1, [r7, #8]
 8001150:	6978      	ldr	r0, [r7, #20]
 8001152:	f7ff ff2f 	bl	8000fb4 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <GFX_DrawString+0xb0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <GFX_DrawString+0xb4>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	fb02 f303 	mul.w	r3, r2, r3
 8001168:	3301      	adds	r3, #1
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4413      	add	r3, r2
 800116e:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001170:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d120      	bne.n	80011ba <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001178:	2300      	movs	r3, #0
 800117a:	74bb      	strb	r3, [r7, #18]
 800117c:	e012      	b.n	80011a4 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	b29b      	uxth	r3, r3
 8001182:	3b01      	subs	r3, #1
 8001184:	b29b      	uxth	r3, r3
 8001186:	b218      	sxth	r0, r3
 8001188:	7cbb      	ldrb	r3, [r7, #18]
 800118a:	b29a      	uxth	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	b29b      	uxth	r3, r3
 8001190:	4413      	add	r3, r2
 8001192:	b29b      	uxth	r3, r3
 8001194:	b21b      	sxth	r3, r3
 8001196:	2200      	movs	r2, #0
 8001198:	4619      	mov	r1, r3
 800119a:	f000 f91d 	bl	80013d8 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800119e:	7cbb      	ldrb	r3, [r7, #18]
 80011a0:	3301      	adds	r3, #1
 80011a2:	74bb      	strb	r3, [r7, #18]
 80011a4:	7cba      	ldrb	r2, [r7, #18]
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <GFX_DrawString+0xb0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <GFX_DrawString+0xb4>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	fb01 f303 	mul.w	r3, r1, r3
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbe1      	blt.n	800117e <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1ba      	bne.n	8001142 <GFX_DrawString+0x1a>
	}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200001fc 	.word	0x200001fc
 80011dc:	20000000 	.word	0x20000000

080011e0 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	; 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1acb      	subs	r3, r1, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	bfb8      	it	lt
 8001206:	425b      	neglt	r3, r3
 8001208:	429a      	cmp	r2, r3
 800120a:	bfcc      	ite	gt
 800120c:	2301      	movgt	r3, #1
 800120e:	2300      	movle	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001214:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00b      	beq.n	8001234 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	623b      	str	r3, [r7, #32]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	429a      	cmp	r2, r3
 800123a:	dd0b      	ble.n	8001254 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	b29a      	uxth	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	b29b      	uxth	r3, r3
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	b29b      	uxth	r3, r3
 8001260:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	bfb8      	it	lt
 800126c:	425b      	neglt	r3, r3
 800126e:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001270:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001274:	0fda      	lsrs	r2, r3, #31
 8001276:	4413      	add	r3, r2
 8001278:	105b      	asrs	r3, r3, #1
 800127a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	429a      	cmp	r2, r3
 8001282:	da02      	bge.n	800128a <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001284:	2301      	movs	r3, #1
 8001286:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001288:	e030      	b.n	80012ec <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 800128a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001290:	e02c      	b.n	80012ec <GFX_WriteLine+0x10c>
	        if (steep) {
 8001292:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001296:	2b00      	cmp	r3, #0
 8001298:	d009      	beq.n	80012ae <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	b21b      	sxth	r3, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	b211      	sxth	r1, r2
 80012a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f896 	bl	80013d8 <SSD1306_DrawPixel>
 80012ac:	e008      	b.n	80012c0 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	b211      	sxth	r1, r2
 80012b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f88c 	bl	80013d8 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 80012c0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012c2:	8abb      	ldrh	r3, [r7, #20]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 80012ca:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	da09      	bge.n	80012e6 <GFX_WriteLine+0x106>
	            y_start += ystep;
 80012d2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	4413      	add	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
	            err += dx;
 80012dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80012de:	8afb      	ldrh	r3, [r7, #22]
 80012e0:	4413      	add	r3, r2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3301      	adds	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	ddce      	ble.n	8001292 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af02      	add	r7, sp, #8
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4413      	add	r3, r2
 8001312:	1e5a      	subs	r2, r3, #1
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	68fa      	ldr	r2, [r7, #12]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff ff5e 	bl	80011e0 <GFX_WriteLine>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	4611      	mov	r1, r2
 8001338:	461a      	mov	r2, r3
 800133a:	460b      	mov	r3, r1
 800133c:	80fb      	strh	r3, [r7, #6]
 800133e:	4613      	mov	r3, r2
 8001340:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 8001348:	88ba      	ldrh	r2, [r7, #4]
 800134a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	6978      	ldr	r0, [r7, #20]
 8001352:	f7ff ffd4 	bl	80012fe <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbef      	blt.n	8001348 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af04      	add	r7, sp, #16
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <SSD1306_Command+0x2c>)
 8001380:	6818      	ldr	r0, [r3, #0]
 8001382:	2364      	movs	r3, #100	; 0x64
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2301      	movs	r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2301      	movs	r3, #1
 8001390:	2200      	movs	r2, #0
 8001392:	2178      	movs	r1, #120	; 0x78
 8001394:	f005 f99a 	bl	80066cc <HAL_I2C_Mem_Write>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000200 	.word	0x20000200

080013a4 <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af04      	add	r7, sp, #16
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <SSD1306_Data+0x30>)
 80013b2:	6818      	ldr	r0, [r3, #0]
 80013b4:	2364      	movs	r3, #100	; 0x64
 80013b6:	9302      	str	r3, [sp, #8]
 80013b8:	887b      	ldrh	r3, [r7, #2]
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	2301      	movs	r3, #1
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	2178      	movs	r1, #120	; 0x78
 80013c6:	f005 f981 	bl	80066cc <HAL_I2C_Mem_Write>
#endif
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000200 	.word	0x20000200

080013d8 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	460b      	mov	r3, r1
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db79      	blt.n	80014e6 <SSD1306_DrawPixel+0x10e>
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	2b7f      	cmp	r3, #127	; 0x7f
 80013f8:	dc75      	bgt.n	80014e6 <SSD1306_DrawPixel+0x10e>
 80013fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db71      	blt.n	80014e6 <SSD1306_DrawPixel+0x10e>
 8001402:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001406:	2b3f      	cmp	r3, #63	; 0x3f
 8001408:	dc6d      	bgt.n	80014e6 <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d049      	beq.n	80014a4 <SSD1306_DrawPixel+0xcc>
 8001410:	2b02      	cmp	r3, #2
 8001412:	dc69      	bgt.n	80014e8 <SSD1306_DrawPixel+0x110>
 8001414:	2b00      	cmp	r3, #0
 8001416:	d022      	beq.n	800145e <SSD1306_DrawPixel+0x86>
 8001418:	2b01      	cmp	r3, #1
 800141a:	d165      	bne.n	80014e8 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 800141c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001420:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	da00      	bge.n	800142a <SSD1306_DrawPixel+0x52>
 8001428:	3307      	adds	r3, #7
 800142a:	10db      	asrs	r3, r3, #3
 800142c:	b218      	sxth	r0, r3
 800142e:	4603      	mov	r3, r0
 8001430:	01db      	lsls	r3, r3, #7
 8001432:	4413      	add	r3, r2
 8001434:	4a2f      	ldr	r2, [pc, #188]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	b25a      	sxtb	r2, r3
 800143a:	88bb      	ldrh	r3, [r7, #4]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	2101      	movs	r1, #1
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	b25b      	sxtb	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b259      	sxtb	r1, r3
 800144c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001450:	4603      	mov	r3, r0
 8001452:	01db      	lsls	r3, r3, #7
 8001454:	4413      	add	r3, r2
 8001456:	b2c9      	uxtb	r1, r1
 8001458:	4a26      	ldr	r2, [pc, #152]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 800145a:	54d1      	strb	r1, [r2, r3]
      break;
 800145c:	e044      	b.n	80014e8 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800145e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001462:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	da00      	bge.n	800146c <SSD1306_DrawPixel+0x94>
 800146a:	3307      	adds	r3, #7
 800146c:	10db      	asrs	r3, r3, #3
 800146e:	b218      	sxth	r0, r3
 8001470:	4603      	mov	r3, r0
 8001472:	01db      	lsls	r3, r3, #7
 8001474:	4413      	add	r3, r2
 8001476:	4a1f      	ldr	r2, [pc, #124]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 8001478:	5cd3      	ldrb	r3, [r2, r3]
 800147a:	b25a      	sxtb	r2, r3
 800147c:	88bb      	ldrh	r3, [r7, #4]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	2101      	movs	r1, #1
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	b25b      	sxtb	r3, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	b25b      	sxtb	r3, r3
 800148e:	4013      	ands	r3, r2
 8001490:	b259      	sxtb	r1, r3
 8001492:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001496:	4603      	mov	r3, r0
 8001498:	01db      	lsls	r3, r3, #7
 800149a:	4413      	add	r3, r2
 800149c:	b2c9      	uxtb	r1, r1
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 80014a0:	54d1      	strb	r1, [r2, r3]
      break;
 80014a2:	e021      	b.n	80014e8 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 80014a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014a8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da00      	bge.n	80014b2 <SSD1306_DrawPixel+0xda>
 80014b0:	3307      	adds	r3, #7
 80014b2:	10db      	asrs	r3, r3, #3
 80014b4:	b218      	sxth	r0, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	01db      	lsls	r3, r3, #7
 80014ba:	4413      	add	r3, r2
 80014bc:	4a0d      	ldr	r2, [pc, #52]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 80014be:	5cd3      	ldrb	r3, [r2, r3]
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	2101      	movs	r1, #1
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	4053      	eors	r3, r2
 80014d2:	b259      	sxtb	r1, r3
 80014d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014d8:	4603      	mov	r3, r0
 80014da:	01db      	lsls	r3, r3, #7
 80014dc:	4413      	add	r3, r2
 80014de:	b2c9      	uxtb	r1, r1
 80014e0:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <SSD1306_DrawPixel+0x11c>)
 80014e2:	54d1      	strb	r1, [r2, r3]
      break;
 80014e4:	e000      	b.n	80014e8 <SSD1306_DrawPixel+0x110>
	  return;
 80014e6:	bf00      	nop
    }
}
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000204 	.word	0x20000204

080014f8 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d008      	beq.n	800151a <SSD1306_Clear+0x22>
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10d      	bne.n	8001528 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 800150c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001510:	21ff      	movs	r1, #255	; 0xff
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <SSD1306_Clear+0x38>)
 8001514:	f00d fea3 	bl	800f25e <memset>
		break;
 8001518:	e006      	b.n	8001528 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 800151a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151e:	2100      	movs	r1, #0
 8001520:	4803      	ldr	r0, [pc, #12]	; (8001530 <SSD1306_Clear+0x38>)
 8001522:	f00d fe9c 	bl	800f25e <memset>
		break;
 8001526:	bf00      	nop
	}
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000204 	.word	0x20000204

08001534 <SSD1306_Display>:

void SSD1306_Display(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
//	SSD1306_Command(SSD1306_COLUMNADDR);
//	SSD1306_Command(0); // Column start address
//	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
//
//	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
	for (uint8_t i = 0; i < 8 ; i++)
 800153a:	2300      	movs	r3, #0
 800153c:	71fb      	strb	r3, [r7, #7]
 800153e:	e02d      	b.n	800159c <SSD1306_Display+0x68>
		{
			osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <SSD1306_Display+0x78>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	4618      	mov	r0, r3
 800154a:	f009 f9d1 	bl	800a8f0 <osMutexAcquire>
//	//		printf("TASK OLED I2C MUTEX is taken \n\r");
		    SSD1306_Command(SSD1306_PAGEADDR);
 800154e:	2022      	movs	r0, #34	; 0x22
 8001550:	f7ff ff10 	bl	8001374 <SSD1306_Command>
		    SSD1306_Command(i);                      // Page start address
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff ff0c 	bl	8001374 <SSD1306_Command>
			SSD1306_Command(i);                   // Page end (not really, but works here)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff08 	bl	8001374 <SSD1306_Command>
			SSD1306_Command(SSD1306_COLUMNADDR);
 8001564:	2021      	movs	r0, #33	; 0x21
 8001566:	f7ff ff05 	bl	8001374 <SSD1306_Command>
			SSD1306_Command(0); // Column start address
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff ff02 	bl	8001374 <SSD1306_Command>
			SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001570:	207f      	movs	r0, #127	; 0x7f
 8001572:	f7ff feff 	bl	8001374 <SSD1306_Command>

			SSD1306_Data(buffer+(i * SSD1306_LCDWIDTH), SSD1306_LCDWIDTH);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	01db      	lsls	r3, r3, #7
 800157a:	461a      	mov	r2, r3
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <SSD1306_Display+0x7c>)
 800157e:	4413      	add	r3, r2
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff0e 	bl	80013a4 <SSD1306_Data>
			osMutexRelease(MutexI2C2Handle);
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <SSD1306_Display+0x78>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f009 f9fa 	bl	800a986 <osMutexRelease>
	//		printf("TASK OLED I2C MUTEX is released \n\r");
			osThreadYield();
 8001592:	f008 ff0d 	bl	800a3b0 <osThreadYield>
	for (uint8_t i = 0; i < 8 ; i++)
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	3301      	adds	r3, #1
 800159a:	71fb      	strb	r3, [r7, #7]
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	d9ce      	bls.n	8001540 <SSD1306_Display+0xc>
		}
}
 80015a2:	bf00      	nop
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200006f0 	.word	0x200006f0
 80015b0:	20000204 	.word	0x20000204

080015b4 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 80015bc:	4a28      	ldr	r2, [pc, #160]	; (8001660 <SSD1306_Init+0xac>)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 80015c2:	20ae      	movs	r0, #174	; 0xae
 80015c4:	f7ff fed6 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 80015c8:	20d5      	movs	r0, #213	; 0xd5
 80015ca:	f7ff fed3 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x80);
 80015ce:	2080      	movs	r0, #128	; 0x80
 80015d0:	f7ff fed0 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 80015d4:	203f      	movs	r0, #63	; 0x3f
 80015d6:	f7ff fecd 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 80015da:	20d3      	movs	r0, #211	; 0xd3
 80015dc:	f7ff feca 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x00);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff fec7 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 80015e6:	2040      	movs	r0, #64	; 0x40
 80015e8:	f7ff fec4 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 80015ec:	208d      	movs	r0, #141	; 0x8d
 80015ee:	f7ff fec1 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x14);
 80015f2:	2014      	movs	r0, #20
 80015f4:	f7ff febe 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 80015f8:	2020      	movs	r0, #32
 80015fa:	f7ff febb 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff feb8 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001604:	20a1      	movs	r0, #161	; 0xa1
 8001606:	f7ff feb5 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 800160a:	20c8      	movs	r0, #200	; 0xc8
 800160c:	f7ff feb2 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001610:	20da      	movs	r0, #218	; 0xda
 8001612:	f7ff feaf 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001616:	2012      	movs	r0, #18
 8001618:	f7ff feac 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 800161c:	2081      	movs	r0, #129	; 0x81
 800161e:	f7ff fea9 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001622:	20ff      	movs	r0, #255	; 0xff
 8001624:	f7ff fea6 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 8001628:	20d9      	movs	r0, #217	; 0xd9
 800162a:	f7ff fea3 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0xF1);
 800162e:	20f1      	movs	r0, #241	; 0xf1
 8001630:	f7ff fea0 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 8001634:	20db      	movs	r0, #219	; 0xdb
 8001636:	f7ff fe9d 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(0x40);
 800163a:	2040      	movs	r0, #64	; 0x40
 800163c:	f7ff fe9a 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 8001640:	20a4      	movs	r0, #164	; 0xa4
 8001642:	f7ff fe97 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 8001646:	20a6      	movs	r0, #166	; 0xa6
 8001648:	f7ff fe94 	bl	8001374 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 800164c:	202e      	movs	r0, #46	; 0x2e
 800164e:	f7ff fe91 	bl	8001374 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 8001652:	20af      	movs	r0, #175	; 0xaf
 8001654:	f7ff fe8e 	bl	8001374 <SSD1306_Command>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000200 	.word	0x20000200

08001664 <BH1750_Init>:

//
//	Initialization.
//
BH1750_STATUS BH1750_Init(I2C_HandleTypeDef *hi2c)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	bh1750_i2c = hi2c;
 800166c:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <BH1750_Init+0x34>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
	if(BH1750_OK == BH1750_Reset())
 8001672:	f000 f813 	bl	800169c <BH1750_Reset>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d107      	bne.n	800168c <BH1750_Init+0x28>
	{
		if(BH1750_OK == BH1750_SetMtreg(BH1750_DEFAULT_MTREG)) // Set default value;
 800167c:	2045      	movs	r0, #69	; 0x45
 800167e:	f000 f859 	bl	8001734 <BH1750_SetMtreg>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <BH1750_Init+0x28>
			return BH1750_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <BH1750_Init+0x2a>
	}
	return BH1750_ERROR;
 800168c:	2301      	movs	r3, #1
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000604 	.word	0x20000604

0800169c <BH1750_Reset>:

//
//	Reset all registers to default value.
//
BH1750_STATUS BH1750_Reset(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af02      	add	r7, sp, #8
	uint8_t tmp = 0x07;
 80016a2:	2307      	movs	r3, #7
 80016a4:	71fb      	strb	r3, [r7, #7]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp, 1, 10))
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <BH1750_Reset+0x30>)
 80016a8:	6818      	ldr	r0, [r3, #0]
 80016aa:	1dfa      	adds	r2, r7, #7
 80016ac:	230a      	movs	r3, #10
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	2301      	movs	r3, #1
 80016b2:	2146      	movs	r1, #70	; 0x46
 80016b4:	f004 fce6 	bl	8006084 <HAL_I2C_Master_Transmit>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <BH1750_Reset+0x26>
		return BH1750_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <BH1750_Reset+0x28>

	return BH1750_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000604 	.word	0x20000604

080016d0 <BH1750_SetMode>:

//
//	Set the mode of converting. Look into bh1750_mode enum.
//
BH1750_STATUS BH1750_SetMode(bh1750_mode Mode)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
	if(!((Mode >> 4) || (Mode >> 5))) return BH1750_ERROR;
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d106      	bne.n	80016f2 <BH1750_SetMode+0x22>
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	095b      	lsrs	r3, r3, #5
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <BH1750_SetMode+0x22>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e018      	b.n	8001724 <BH1750_SetMode+0x54>
	if((Mode & 0x0F) > 3) return BH1750_ERROR;
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	f003 030c 	and.w	r3, r3, #12
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <BH1750_SetMode+0x30>
 80016fc:	2301      	movs	r3, #1
 80016fe:	e011      	b.n	8001724 <BH1750_SetMode+0x54>

	Bh1750_Mode = Mode;
 8001700:	79fa      	ldrb	r2, [r7, #7]
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <BH1750_SetMode+0x5c>)
 8001704:	701a      	strb	r2, [r3, #0]
	if(HAL_OK == HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &Mode, 1, 10))
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <BH1750_SetMode+0x60>)
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	1dfa      	adds	r2, r7, #7
 800170c:	230a      	movs	r3, #10
 800170e:	9300      	str	r3, [sp, #0]
 8001710:	2301      	movs	r3, #1
 8001712:	2146      	movs	r1, #70	; 0x46
 8001714:	f004 fcb6 	bl	8006084 <HAL_I2C_Master_Transmit>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <BH1750_SetMode+0x52>
		return BH1750_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <BH1750_SetMode+0x54>

	return BH1750_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000608 	.word	0x20000608
 8001730:	20000604 	.word	0x20000604

08001734 <BH1750_SetMtreg>:

//
//	Set the Measurement Time register. It allows to increase or decrease the sensitivity.
//
BH1750_STATUS BH1750_SetMtreg(uint8_t Mtreg)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af02      	add	r7, sp, #8
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef retCode;
	if (Mtreg < 31 || Mtreg > 254) {
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b1e      	cmp	r3, #30
 8001742:	d902      	bls.n	800174a <BH1750_SetMtreg+0x16>
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	2bff      	cmp	r3, #255	; 0xff
 8001748:	d101      	bne.n	800174e <BH1750_SetMtreg+0x1a>
		return BH1750_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e037      	b.n	80017be <BH1750_SetMtreg+0x8a>
	}

	Bh1750_Mtreg = Mtreg;
 800174e:	4a1e      	ldr	r2, [pc, #120]	; (80017c8 <BH1750_SetMtreg+0x94>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	7013      	strb	r3, [r2, #0]

	uint8_t tmp[2];

	tmp[0] = (0x40 | (Mtreg >> 5));
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	095b      	lsrs	r3, r3, #5
 8001758:	b2db      	uxtb	r3, r3
 800175a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800175e:	b2db      	uxtb	r3, r3
 8001760:	733b      	strb	r3, [r7, #12]
	tmp[1] = (0x60 | (Mtreg & 0x1F));
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	b25b      	sxtb	r3, r3
 800176c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001770:	b25b      	sxtb	r3, r3
 8001772:	b2db      	uxtb	r3, r3
 8001774:	737b      	strb	r3, [r7, #13]

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[0], 1, 10);
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <BH1750_SetMtreg+0x98>)
 8001778:	6818      	ldr	r0, [r3, #0]
 800177a:	f107 020c 	add.w	r2, r7, #12
 800177e:	230a      	movs	r3, #10
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	2301      	movs	r3, #1
 8001784:	2146      	movs	r1, #70	; 0x46
 8001786:	f004 fc7d 	bl	8006084 <HAL_I2C_Master_Transmit>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK != retCode) {
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <BH1750_SetMtreg+0x64>
		return BH1750_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e012      	b.n	80017be <BH1750_SetMtreg+0x8a>
	}

	retCode = HAL_I2C_Master_Transmit(bh1750_i2c, BH1750_ADDRESS, &tmp[1], 1, 10);
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <BH1750_SetMtreg+0x98>)
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	230a      	movs	r3, #10
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2301      	movs	r3, #1
 80017a8:	2146      	movs	r1, #70	; 0x46
 80017aa:	f004 fc6b 	bl	8006084 <HAL_I2C_Master_Transmit>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]
	if (HAL_OK == retCode) {
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <BH1750_SetMtreg+0x88>
		return BH1750_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	e000      	b.n	80017be <BH1750_SetMtreg+0x8a>
	}

	return BH1750_ERROR;
 80017bc:	2301      	movs	r3, #1
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000609 	.word	0x20000609
 80017cc:	20000604 	.word	0x20000604

080017d0 <BH1750_ReadLight>:

//
//	Read the converted value and calculate the result.
//
BH1750_STATUS BH1750_ReadLight(float *Result)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af02      	add	r7, sp, #8
 80017d6:	6078      	str	r0, [r7, #4]
	float result;
	uint8_t tmp[2];

	if(HAL_OK == HAL_I2C_Master_Receive(bh1750_i2c, BH1750_ADDRESS, tmp, 2, 10))
 80017d8:	4b25      	ldr	r3, [pc, #148]	; (8001870 <BH1750_ReadLight+0xa0>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	f107 0208 	add.w	r2, r7, #8
 80017e0:	230a      	movs	r3, #10
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2302      	movs	r3, #2
 80017e6:	2146      	movs	r1, #70	; 0x46
 80017e8:	f004 fd4a 	bl	8006280 <HAL_I2C_Master_Receive>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d138      	bne.n	8001864 <BH1750_ReadLight+0x94>
	{
		result = (tmp[0] << 8) | (tmp[1]);
 80017f2:	7a3b      	ldrb	r3, [r7, #8]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	7a7a      	ldrb	r2, [r7, #9]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	ee07 3a90 	vmov	s15, r3
 80017fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001802:	edc7 7a03 	vstr	s15, [r7, #12]

		if(Bh1750_Mtreg != BH1750_DEFAULT_MTREG)
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <BH1750_ReadLight+0xa4>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2b45      	cmp	r3, #69	; 0x45
 800180c:	d00f      	beq.n	800182e <BH1750_ReadLight+0x5e>
		{
			result *= (float)((uint8_t)BH1750_DEFAULT_MTREG/(float)Bh1750_Mtreg);
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <BH1750_ReadLight+0xa4>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	ee07 3a90 	vmov	s15, r3
 8001816:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800181a:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001878 <BH1750_ReadLight+0xa8>
 800181e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001822:	ed97 7a03 	vldr	s14, [r7, #12]
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		if(Bh1750_Mode == ONETIME_HIGH_RES_MODE_2 || Bh1750_Mode == CONTINUOUS_HIGH_RES_MODE_2)
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <BH1750_ReadLight+0xac>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b21      	cmp	r3, #33	; 0x21
 8001834:	d003      	beq.n	800183e <BH1750_ReadLight+0x6e>
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <BH1750_ReadLight+0xac>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b11      	cmp	r3, #17
 800183c:	d107      	bne.n	800184e <BH1750_ReadLight+0x7e>
		{
			result /= 2.0;
 800183e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001842:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184a:	edc7 7a03 	vstr	s15, [r7, #12]
		}

		*Result = result / (float)BH1750_CONVERSION_FACTOR;
 800184e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001852:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001880 <BH1750_ReadLight+0xb0>
 8001856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	edc3 7a00 	vstr	s15, [r3]
		return BH1750_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	e000      	b.n	8001866 <BH1750_ReadLight+0x96>
	}
	return BH1750_ERROR;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000604 	.word	0x20000604
 8001874:	20000609 	.word	0x20000609
 8001878:	428a0000 	.word	0x428a0000
 800187c:	20000608 	.word	0x20000608
 8001880:	3f99999a 	.word	0x3f99999a

08001884 <BME280_Read8>:
int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9, h2, h4, h5;
uint16_t t1, p1;
int32_t t_fine;

uint8_t BME280_Read8(uint8_t addr)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af04      	add	r7, sp, #16
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, &tmp, 1, 10);
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <BME280_Read8+0x38>)
 8001894:	6818      	ldr	r0, [r3, #0]
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	b29a      	uxth	r2, r3
 800189a:	230a      	movs	r3, #10
 800189c:	9302      	str	r3, [sp, #8]
 800189e:	2301      	movs	r3, #1
 80018a0:	9301      	str	r3, [sp, #4]
 80018a2:	f107 030f 	add.w	r3, r7, #15
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2301      	movs	r3, #1
 80018aa:	21ec      	movs	r1, #236	; 0xec
 80018ac:	f005 f808 	bl	80068c0 <HAL_I2C_Mem_Read>
	return tmp;
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000060c 	.word	0x2000060c

080018c0 <BME280_Read16>:

uint16_t BME280_Read16(uint8_t addr)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 2, 10);
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <BME280_Read16+0x40>)
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	230a      	movs	r3, #10
 80018d4:	9302      	str	r3, [sp, #8]
 80018d6:	2302      	movs	r3, #2
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	f107 030c 	add.w	r3, r7, #12
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	2301      	movs	r3, #1
 80018e2:	21ec      	movs	r1, #236	; 0xec
 80018e4:	f004 ffec 	bl	80068c0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 80018e8:	7b3b      	ldrb	r3, [r7, #12]
 80018ea:	021b      	lsls	r3, r3, #8
 80018ec:	b21a      	sxth	r2, r3
 80018ee:	7b7b      	ldrb	r3, [r7, #13]
 80018f0:	b21b      	sxth	r3, r3
 80018f2:	4313      	orrs	r3, r2
 80018f4:	b21b      	sxth	r3, r3
 80018f6:	b29b      	uxth	r3, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000060c 	.word	0x2000060c

08001904 <BME280_Read16LE>:

uint16_t BME280_Read16LE(uint8_t addr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BME280_Read16(addr);
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ffd5 	bl	80018c0 <BME280_Read16>
 8001916:	4603      	mov	r3, r0
 8001918:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	b29b      	uxth	r3, r3
 8001920:	b21a      	sxth	r2, r3
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21b      	sxth	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b21b      	sxth	r3, r3
 800192c:	b29b      	uxth	r3, r3
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <BME280_Write8>:

void BME280_Write8(uint8_t address, uint8_t data)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af04      	add	r7, sp, #16
 800193e:	4603      	mov	r3, r0
 8001940:	460a      	mov	r2, r1
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	4613      	mov	r3, r2
 8001946:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(i2c_h, BME280_I2CADDR, address, 1, &data, 1, 10);
 8001948:	4b08      	ldr	r3, [pc, #32]	; (800196c <BME280_Write8+0x34>)
 800194a:	6818      	ldr	r0, [r3, #0]
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	b29a      	uxth	r2, r3
 8001950:	230a      	movs	r3, #10
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	2301      	movs	r3, #1
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	1dbb      	adds	r3, r7, #6
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2301      	movs	r3, #1
 800195e:	21ec      	movs	r1, #236	; 0xec
 8001960:	f004 feb4 	bl	80066cc <HAL_I2C_Mem_Write>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000060c 	.word	0x2000060c

08001970 <BME280_Read24>:

uint32_t BME280_Read24(uint8_t addr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af04      	add	r7, sp, #16
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]

	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BME280_I2CADDR, addr, 1, tmp, 3, 10);
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <BME280_Read24+0x40>)
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	b29a      	uxth	r2, r3
 8001982:	230a      	movs	r3, #10
 8001984:	9302      	str	r3, [sp, #8]
 8001986:	2303      	movs	r3, #3
 8001988:	9301      	str	r3, [sp, #4]
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2301      	movs	r3, #1
 8001992:	21ec      	movs	r1, #236	; 0xec
 8001994:	f004 ff94 	bl	80068c0 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 8001998:	7b3b      	ldrb	r3, [r7, #12]
 800199a:	041a      	lsls	r2, r3, #16
 800199c:	7b7b      	ldrb	r3, [r7, #13]
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	4313      	orrs	r3, r2
 80019a2:	7bba      	ldrb	r2, [r7, #14]
 80019a4:	4313      	orrs	r3, r2
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000060c 	.word	0x2000060c

080019b4 <BME280_IsReadingCalibration>:
uint8_t BME280_IsReadingCalibration(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
	uint8_t Status = BME280_Read8(BME280_STATUS);
 80019ba:	20f3      	movs	r0, #243	; 0xf3
 80019bc:	f7ff ff62 	bl	8001884 <BME280_Read8>
 80019c0:	4603      	mov	r3, r0
 80019c2:	71fb      	strb	r3, [r7, #7]

	return ((Status & 1) != 0);
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <BME280_SetConfig>:

void BME280_SetConfig(uint8_t standby_time, uint8_t filter)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	460a      	mov	r2, r1
 80019e6:	71fb      	strb	r3, [r7, #7]
 80019e8:	4613      	mov	r3, r2
 80019ea:	71bb      	strb	r3, [r7, #6]
	BME280_Write8(BME280_CONFIG, (uint8_t)(((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	015b      	lsls	r3, r3, #5
 80019f0:	b25a      	sxtb	r2, r3
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	f003 031c 	and.w	r3, r3, #28
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f023 0303 	bic.w	r3, r3, #3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	20f5      	movs	r0, #245	; 0xf5
 8001a0e:	f7ff ff93 	bl	8001938 <BME280_Write8>
}
 8001a12:	bf00      	nop
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <BME280_Init>:


void BME280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t huminidity_oversampling, uint8_t mode)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	4608      	mov	r0, r1
 8001a26:	4611      	mov	r1, r2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	70fb      	strb	r3, [r7, #3]
 8001a2e:	460b      	mov	r3, r1
 8001a30:	70bb      	strb	r3, [r7, #2]
 8001a32:	4613      	mov	r3, r2
 8001a34:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 8001a36:	4a8f      	ldr	r2, [pc, #572]	; (8001c74 <BME280_Init+0x258>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6013      	str	r3, [r2, #0]
	uint8_t HumReg, i;

		if (mode > BME280_NORMALMODE)
 8001a3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d902      	bls.n	8001a4a <BME280_Init+0x2e>
		    mode = BME280_NORMALMODE;
 8001a44:	2303      	movs	r3, #3
 8001a46:	f887 3020 	strb.w	r3, [r7, #32]
		_mode = mode;
 8001a4a:	4a8b      	ldr	r2, [pc, #556]	; (8001c78 <BME280_Init+0x25c>)
 8001a4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a50:	7013      	strb	r3, [r2, #0]
		if(mode == BME280_FORCEDMODE)
 8001a52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d102      	bne.n	8001a60 <BME280_Init+0x44>
			mode = BME280_SLEEPMODE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 3020 	strb.w	r3, [r7, #32]

		if (temperature_resolution > BME280_TEMPERATURE_20BIT)
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d901      	bls.n	8001a6a <BME280_Init+0x4e>
			temperature_resolution = BME280_TEMPERATURE_20BIT;
 8001a66:	2305      	movs	r3, #5
 8001a68:	70fb      	strb	r3, [r7, #3]
		_temperature_res = temperature_resolution;
 8001a6a:	4a84      	ldr	r2, [pc, #528]	; (8001c7c <BME280_Init+0x260>)
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	7013      	strb	r3, [r2, #0]

		if (pressure_oversampling > BME280_PRESSURE_ULTRAHIGHRES)
 8001a70:	78bb      	ldrb	r3, [r7, #2]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d901      	bls.n	8001a7a <BME280_Init+0x5e>
			pressure_oversampling = BME280_PRESSURE_ULTRAHIGHRES;
 8001a76:	2305      	movs	r3, #5
 8001a78:	70bb      	strb	r3, [r7, #2]
		_pressure_oversampling = pressure_oversampling;
 8001a7a:	4a81      	ldr	r2, [pc, #516]	; (8001c80 <BME280_Init+0x264>)
 8001a7c:	78bb      	ldrb	r3, [r7, #2]
 8001a7e:	7013      	strb	r3, [r2, #0]

		if (huminidity_oversampling > BME280_HUMINIDITY_ULTRAHIGH)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d901      	bls.n	8001a8a <BME280_Init+0x6e>
			huminidity_oversampling = BME280_HUMINIDITY_ULTRAHIGH;
 8001a86:	2305      	movs	r3, #5
 8001a88:	707b      	strb	r3, [r7, #1]
		_huminidity_oversampling = huminidity_oversampling;
 8001a8a:	4a7e      	ldr	r2, [pc, #504]	; (8001c84 <BME280_Init+0x268>)
 8001a8c:	787b      	ldrb	r3, [r7, #1]
 8001a8e:	7013      	strb	r3, [r2, #0]

		while(BME280_Read8(BME280_CHIPID) != 0x60);
 8001a90:	bf00      	nop
 8001a92:	20d0      	movs	r0, #208	; 0xd0
 8001a94:	f7ff fef6 	bl	8001884 <BME280_Read8>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b60      	cmp	r3, #96	; 0x60
 8001a9c:	d1f9      	bne.n	8001a92 <BME280_Init+0x76>

		BME280_Write8(BME280_SOFTRESET, 0xB6);
 8001a9e:	21b6      	movs	r1, #182	; 0xb6
 8001aa0:	20e0      	movs	r0, #224	; 0xe0
 8001aa2:	f7ff ff49 	bl	8001938 <BME280_Write8>

		for(i = 0; i<30; i++)
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
 8001aaa:	e005      	b.n	8001ab8 <BME280_Init+0x9c>
			HAL_Delay(10); // Wait  300 msfor wake up
 8001aac:	200a      	movs	r0, #10
 8001aae:	f003 fd89 	bl	80055c4 <HAL_Delay>
		for(i = 0; i<30; i++)
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b1d      	cmp	r3, #29
 8001abc:	d9f6      	bls.n	8001aac <BME280_Init+0x90>

		while(BME280_IsReadingCalibration())
 8001abe:	e00b      	b.n	8001ad8 <BME280_Init+0xbc>
			for(i = 0; i<10; i++)
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
 8001ac4:	e005      	b.n	8001ad2 <BME280_Init+0xb6>
				HAL_Delay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f003 fd7c 	bl	80055c4 <HAL_Delay>
			for(i = 0; i<10; i++)
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	2b09      	cmp	r3, #9
 8001ad6:	d9f6      	bls.n	8001ac6 <BME280_Init+0xaa>
		while(BME280_IsReadingCalibration())
 8001ad8:	f7ff ff6c 	bl	80019b4 <BME280_IsReadingCalibration>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ee      	bne.n	8001ac0 <BME280_Init+0xa4>

		/* read calibration data */
		t1 = BME280_Read16LE(BME280_DIG_T1);
 8001ae2:	2088      	movs	r0, #136	; 0x88
 8001ae4:	f7ff ff0e 	bl	8001904 <BME280_Read16LE>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	461a      	mov	r2, r3
 8001aec:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <BME280_Init+0x26c>)
 8001aee:	801a      	strh	r2, [r3, #0]
		t2 = BME280_Read16LE(BME280_DIG_T2);
 8001af0:	208a      	movs	r0, #138	; 0x8a
 8001af2:	f7ff ff07 	bl	8001904 <BME280_Read16LE>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b21a      	sxth	r2, r3
 8001afa:	4b64      	ldr	r3, [pc, #400]	; (8001c8c <BME280_Init+0x270>)
 8001afc:	801a      	strh	r2, [r3, #0]
		t3 = BME280_Read16LE(BME280_DIG_T3);
 8001afe:	208c      	movs	r0, #140	; 0x8c
 8001b00:	f7ff ff00 	bl	8001904 <BME280_Read16LE>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	4b61      	ldr	r3, [pc, #388]	; (8001c90 <BME280_Init+0x274>)
 8001b0a:	801a      	strh	r2, [r3, #0]

		p1 = BME280_Read16LE(BME280_DIG_P1);
 8001b0c:	208e      	movs	r0, #142	; 0x8e
 8001b0e:	f7ff fef9 	bl	8001904 <BME280_Read16LE>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	4b5f      	ldr	r3, [pc, #380]	; (8001c94 <BME280_Init+0x278>)
 8001b18:	801a      	strh	r2, [r3, #0]
		p2 = BME280_Read16LE(BME280_DIG_P2);
 8001b1a:	2090      	movs	r0, #144	; 0x90
 8001b1c:	f7ff fef2 	bl	8001904 <BME280_Read16LE>
 8001b20:	4603      	mov	r3, r0
 8001b22:	b21a      	sxth	r2, r3
 8001b24:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <BME280_Init+0x27c>)
 8001b26:	801a      	strh	r2, [r3, #0]
		p3 = BME280_Read16LE(BME280_DIG_P3);
 8001b28:	2092      	movs	r0, #146	; 0x92
 8001b2a:	f7ff feeb 	bl	8001904 <BME280_Read16LE>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	b21a      	sxth	r2, r3
 8001b32:	4b5a      	ldr	r3, [pc, #360]	; (8001c9c <BME280_Init+0x280>)
 8001b34:	801a      	strh	r2, [r3, #0]
		p4 = BME280_Read16LE(BME280_DIG_P4);
 8001b36:	2094      	movs	r0, #148	; 0x94
 8001b38:	f7ff fee4 	bl	8001904 <BME280_Read16LE>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b21a      	sxth	r2, r3
 8001b40:	4b57      	ldr	r3, [pc, #348]	; (8001ca0 <BME280_Init+0x284>)
 8001b42:	801a      	strh	r2, [r3, #0]
		p5 = BME280_Read16LE(BME280_DIG_P5);
 8001b44:	2096      	movs	r0, #150	; 0x96
 8001b46:	f7ff fedd 	bl	8001904 <BME280_Read16LE>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b21a      	sxth	r2, r3
 8001b4e:	4b55      	ldr	r3, [pc, #340]	; (8001ca4 <BME280_Init+0x288>)
 8001b50:	801a      	strh	r2, [r3, #0]
		p6 = BME280_Read16LE(BME280_DIG_P6);
 8001b52:	2098      	movs	r0, #152	; 0x98
 8001b54:	f7ff fed6 	bl	8001904 <BME280_Read16LE>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	b21a      	sxth	r2, r3
 8001b5c:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <BME280_Init+0x28c>)
 8001b5e:	801a      	strh	r2, [r3, #0]
		p7 = BME280_Read16LE(BME280_DIG_P7);
 8001b60:	209a      	movs	r0, #154	; 0x9a
 8001b62:	f7ff fecf 	bl	8001904 <BME280_Read16LE>
 8001b66:	4603      	mov	r3, r0
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	4b50      	ldr	r3, [pc, #320]	; (8001cac <BME280_Init+0x290>)
 8001b6c:	801a      	strh	r2, [r3, #0]
		p8 = BME280_Read16LE(BME280_DIG_P8);
 8001b6e:	209c      	movs	r0, #156	; 0x9c
 8001b70:	f7ff fec8 	bl	8001904 <BME280_Read16LE>
 8001b74:	4603      	mov	r3, r0
 8001b76:	b21a      	sxth	r2, r3
 8001b78:	4b4d      	ldr	r3, [pc, #308]	; (8001cb0 <BME280_Init+0x294>)
 8001b7a:	801a      	strh	r2, [r3, #0]
		p9 = BME280_Read16LE(BME280_DIG_P9);
 8001b7c:	209e      	movs	r0, #158	; 0x9e
 8001b7e:	f7ff fec1 	bl	8001904 <BME280_Read16LE>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <BME280_Init+0x298>)
 8001b88:	801a      	strh	r2, [r3, #0]

		h1 = BME280_Read8(BME280_DIG_H1);
 8001b8a:	20a1      	movs	r0, #161	; 0xa1
 8001b8c:	f7ff fe7a 	bl	8001884 <BME280_Read8>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b48      	ldr	r3, [pc, #288]	; (8001cb8 <BME280_Init+0x29c>)
 8001b96:	701a      	strb	r2, [r3, #0]
		h2 = BME280_Read16LE(BME280_DIG_H2);
 8001b98:	20e1      	movs	r0, #225	; 0xe1
 8001b9a:	f7ff feb3 	bl	8001904 <BME280_Read16LE>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	4b46      	ldr	r3, [pc, #280]	; (8001cbc <BME280_Init+0x2a0>)
 8001ba4:	801a      	strh	r2, [r3, #0]
		h3 = BME280_Read8(BME280_DIG_H3);
 8001ba6:	20e3      	movs	r0, #227	; 0xe3
 8001ba8:	f7ff fe6c 	bl	8001884 <BME280_Read8>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <BME280_Init+0x2a4>)
 8001bb2:	701a      	strb	r2, [r3, #0]
		h4 = ((BME280_Read8(BME280_DIG_H4) << 4 ) | (BME280_Read8(BME280_DIG_H4+1) & 0xF));
 8001bb4:	20e4      	movs	r0, #228	; 0xe4
 8001bb6:	f7ff fe65 	bl	8001884 <BME280_Read8>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	011b      	lsls	r3, r3, #4
 8001bbe:	b21c      	sxth	r4, r3
 8001bc0:	20e5      	movs	r0, #229	; 0xe5
 8001bc2:	f7ff fe5f 	bl	8001884 <BME280_Read8>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	4323      	orrs	r3, r4
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <BME280_Init+0x2a8>)
 8001bd6:	801a      	strh	r2, [r3, #0]
		h5 = ((BME280_Read8(BME280_DIG_H5+1) << 4) | (BME280_Read8(BME280_DIG_H5) >> 4));
 8001bd8:	20e6      	movs	r0, #230	; 0xe6
 8001bda:	f7ff fe53 	bl	8001884 <BME280_Read8>
 8001bde:	4603      	mov	r3, r0
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	b21c      	sxth	r4, r3
 8001be4:	20e5      	movs	r0, #229	; 0xe5
 8001be6:	f7ff fe4d 	bl	8001884 <BME280_Read8>
 8001bea:	4603      	mov	r3, r0
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	4323      	orrs	r3, r4
 8001bf4:	b21a      	sxth	r2, r3
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <BME280_Init+0x2ac>)
 8001bf8:	801a      	strh	r2, [r3, #0]
		h6 = (int8_t)BME280_Read8(BME280_DIG_H6);
 8001bfa:	20e7      	movs	r0, #231	; 0xe7
 8001bfc:	f7ff fe42 	bl	8001884 <BME280_Read8>
 8001c00:	4603      	mov	r3, r0
 8001c02:	b25a      	sxtb	r2, r3
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <BME280_Init+0x2b0>)
 8001c06:	701a      	strb	r2, [r3, #0]

		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001c08:	20f2      	movs	r0, #242	; 0xf2
 8001c0a:	f7ff fe3b 	bl	8001884 <BME280_Read8>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73bb      	strb	r3, [r7, #14]
		HumReg &= 0xF8;
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	f023 0307 	bic.w	r3, r3, #7
 8001c18:	73bb      	strb	r3, [r7, #14]
		HumReg |= _huminidity_oversampling;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <BME280_Init+0x268>)
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	7bbb      	ldrb	r3, [r7, #14]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_HUM_CONTROL, HumReg);
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	4619      	mov	r1, r3
 8001c28:	20f2      	movs	r0, #242	; 0xf2
 8001c2a:	f7ff fe85 	bl	8001938 <BME280_Write8>
		HumReg = BME280_Read8(BME280_HUM_CONTROL);
 8001c2e:	20f2      	movs	r0, #242	; 0xf2
 8001c30:	f7ff fe28 	bl	8001884 <BME280_Read8>
 8001c34:	4603      	mov	r3, r0
 8001c36:	73bb      	strb	r3, [r7, #14]
		BME280_Write8(BME280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	015b      	lsls	r3, r3, #5
 8001c3c:	b25a      	sxtb	r2, r3
 8001c3e:	78bb      	ldrb	r3, [r7, #2]
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	b25b      	sxtb	r3, r3
 8001c44:	4313      	orrs	r3, r2
 8001c46:	b25a      	sxtb	r2, r3
 8001c48:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	4619      	mov	r1, r3
 8001c54:	20f4      	movs	r0, #244	; 0xf4
 8001c56:	f7ff fe6f 	bl	8001938 <BME280_Write8>

		if(mode == BME280_NORMALMODE)
 8001c5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d103      	bne.n	8001c6a <BME280_Init+0x24e>
		{
			BME280_SetConfig(BME280_STANDBY_MS_0_5, BME280_FILTER_OFF);
 8001c62:	2100      	movs	r1, #0
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff feb9 	bl	80019dc <BME280_SetConfig>
		}
}
 8001c6a:	bf00      	nop
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd90      	pop	{r4, r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000060c 	.word	0x2000060c
 8001c78:	20000613 	.word	0x20000613
 8001c7c:	20000610 	.word	0x20000610
 8001c80:	20000611 	.word	0x20000611
 8001c84:	20000612 	.word	0x20000612
 8001c88:	20000632 	.word	0x20000632
 8001c8c:	20000618 	.word	0x20000618
 8001c90:	2000061a 	.word	0x2000061a
 8001c94:	20000634 	.word	0x20000634
 8001c98:	2000061c 	.word	0x2000061c
 8001c9c:	2000061e 	.word	0x2000061e
 8001ca0:	20000620 	.word	0x20000620
 8001ca4:	20000622 	.word	0x20000622
 8001ca8:	20000624 	.word	0x20000624
 8001cac:	20000626 	.word	0x20000626
 8001cb0:	20000628 	.word	0x20000628
 8001cb4:	2000062a 	.word	0x2000062a
 8001cb8:	20000614 	.word	0x20000614
 8001cbc:	2000062c 	.word	0x2000062c
 8001cc0:	20000615 	.word	0x20000615
 8001cc4:	2000062e 	.word	0x2000062e
 8001cc8:	20000630 	.word	0x20000630
 8001ccc:	20000616 	.word	0x20000616

08001cd0 <BME280_ReadTemperature>:

float BME280_ReadTemperature(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BME280_FORCEDMODE)
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <BME280_ReadTemperature+0x104>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d12b      	bne.n	8001d36 <BME280_ReadTemperature+0x66>
  {
	  uint8_t mode;
	  uint8_t ctrl = BME280_Read8(BME280_CONTROL);
 8001cde:	20f4      	movs	r0, #244	; 0xf4
 8001ce0:	f7ff fdd0 	bl	8001884 <BME280_Read8>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BME280_FORCEDMODE;
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	75fb      	strb	r3, [r7, #23]
	  BME280_Write8(BME280_CONTROL, ctrl);
 8001cf8:	7dfb      	ldrb	r3, [r7, #23]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	20f4      	movs	r0, #244	; 0xf4
 8001cfe:	f7ff fe1b 	bl	8001938 <BME280_Write8>

	  mode = BME280_Read8(BME280_CONTROL); 	// Read written mode
 8001d02:	20f4      	movs	r0, #244	; 0xf4
 8001d04:	f7ff fdbe 	bl	8001884 <BME280_Read8>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 8001d0c:	7dbb      	ldrb	r3, [r7, #22]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	75bb      	strb	r3, [r7, #22]

	  if(mode == BME280_FORCEDMODE)
 8001d14:	7dbb      	ldrb	r3, [r7, #22]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10d      	bne.n	8001d36 <BME280_ReadTemperature+0x66>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BME280_Read8(BME280_CONTROL);
 8001d1a:	20f4      	movs	r0, #244	; 0xf4
 8001d1c:	f7ff fdb2 	bl	8001884 <BME280_Read8>
 8001d20:	4603      	mov	r3, r0
 8001d22:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001d24:	7dbb      	ldrb	r3, [r7, #22]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	75bb      	strb	r3, [r7, #22]
			  if(mode == BME280_SLEEPMODE)
 8001d2c:	7dbb      	ldrb	r3, [r7, #22]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d000      	beq.n	8001d34 <BME280_ReadTemperature+0x64>
			  mode = BME280_Read8(BME280_CONTROL);
 8001d32:	e7f2      	b.n	8001d1a <BME280_ReadTemperature+0x4a>
				  break;
 8001d34:	bf00      	nop
		  }
	  }
  }

  int32_t adc_T = BME280_Read24(BME280_TEMPDATA);
 8001d36:	20fa      	movs	r0, #250	; 0xfa
 8001d38:	f7ff fe1a 	bl	8001970 <BME280_Read24>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	613b      	str	r3, [r7, #16]
  if (adc_T == 0x800000)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d46:	d102      	bne.n	8001d4e <BME280_ReadTemperature+0x7e>
	  return -99;
 8001d48:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001dd8 <BME280_ReadTemperature+0x108>
 8001d4c:	e03b      	b.n	8001dc6 <BME280_ReadTemperature+0xf6>

  adc_T >>= 4;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	111b      	asrs	r3, r3, #4
 8001d52:	613b      	str	r3, [r7, #16]

  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	10da      	asrs	r2, r3, #3
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <BME280_ReadTemperature+0x10c>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	1ad3      	subs	r3, r2, r3
		  ((int32_t)t2)) >> 11;
 8001d60:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <BME280_ReadTemperature+0x110>)
 8001d62:	f9b2 2000 	ldrsh.w	r2, [r2]
  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001d66:	fb02 f303 	mul.w	r3, r2, r3
 8001d6a:	12db      	asrs	r3, r3, #11
 8001d6c:	60fb      	str	r3, [r7, #12]

  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	111b      	asrs	r3, r3, #4
 8001d72:	4a1a      	ldr	r2, [pc, #104]	; (8001ddc <BME280_ReadTemperature+0x10c>)
 8001d74:	8812      	ldrh	r2, [r2, #0]
 8001d76:	1a9b      	subs	r3, r3, r2
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	1112      	asrs	r2, r2, #4
 8001d7c:	4917      	ldr	r1, [pc, #92]	; (8001ddc <BME280_ReadTemperature+0x10c>)
 8001d7e:	8809      	ldrh	r1, [r1, #0]
 8001d80:	1a52      	subs	r2, r2, r1
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001d86:	131b      	asrs	r3, r3, #12
		  ((int32_t)t3)) >> 14;
 8001d88:	4a16      	ldr	r2, [pc, #88]	; (8001de4 <BME280_ReadTemperature+0x114>)
 8001d8a:	f9b2 2000 	ldrsh.w	r2, [r2]
		  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001d92:	139b      	asrs	r3, r3, #14
 8001d94:	60bb      	str	r3, [r7, #8]

  t_fine = var1 + var2;
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <BME280_ReadTemperature+0x118>)
 8001d9e:	6013      	str	r3, [r2, #0]

  float T  = (t_fine * 5 + 128) >> 8;
 8001da0:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <BME280_ReadTemperature+0x118>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	3380      	adds	r3, #128	; 0x80
 8001dac:	121b      	asrs	r3, r3, #8
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db6:	edc7 7a01 	vstr	s15, [r7, #4]
  return T/100;
 8001dba:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbe:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001dec <BME280_ReadTemperature+0x11c>
 8001dc2:	ee87 7aa6 	vdiv.f32	s14, s15, s13

  return -99;
}
 8001dc6:	eef0 7a47 	vmov.f32	s15, s14
 8001dca:	eeb0 0a67 	vmov.f32	s0, s15
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20000613 	.word	0x20000613
 8001dd8:	c2c60000 	.word	0xc2c60000
 8001ddc:	20000632 	.word	0x20000632
 8001de0:	20000618 	.word	0x20000618
 8001de4:	2000061a 	.word	0x2000061a
 8001de8:	20000638 	.word	0x20000638
 8001dec:	42c80000 	.word	0x42c80000

08001df0 <BME280_ReadTemperatureAndPressureAndHuminidity>:
	  float h = (v_x1_u32r>>12);
	  return  h / 1024.0;
}

uint8_t BME280_ReadTemperatureAndPressureAndHuminidity(float *temperature, int32_t *pressure, float *huminidity)
{
 8001df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001df4:	b0d2      	sub	sp, #328	; 0x148
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001dfc:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 8001e00:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	// Must be done first to get the t_fine variable set up
	*temperature = BME280_ReadTemperature();
 8001e04:	f7ff ff64 	bl	8001cd0 <BME280_ReadTemperature>
 8001e08:	eef0 7a40 	vmov.f32	s15, s0
 8001e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e10:	edc3 7a00 	vstr	s15, [r3]

	if(*temperature == -99)
 8001e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 80020ec <BME280_ReadTemperatureAndPressureAndHuminidity+0x2fc>
 8001e20:	eef4 7a47 	vcmp.f32	s15, s14
 8001e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e28:	d101      	bne.n	8001e2e <BME280_ReadTemperatureAndPressureAndHuminidity+0x3e>
	  return -1;
 8001e2a:	23ff      	movs	r3, #255	; 0xff
 8001e2c:	e33f      	b.n	80024ae <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t adc_P = BME280_Read24(BME280_PRESSUREDATA);
 8001e2e:	20f7      	movs	r0, #247	; 0xf7
 8001e30:	f7ff fd9e 	bl	8001970 <BME280_Read24>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	adc_P >>= 4;
 8001e3a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001e3e:	111b      	asrs	r3, r3, #4
 8001e40:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	var1 = ((int64_t)t_fine) - 128000;
 8001e44:	4baa      	ldr	r3, [pc, #680]	; (80020f0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x300>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	17da      	asrs	r2, r3, #31
 8001e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001e4e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001e52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8001e56:	460b      	mov	r3, r1
 8001e58:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 8001e5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e5e:	4613      	mov	r3, r2
 8001e60:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001e64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e66:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e6a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = var1 * var1 * (int64_t)p6;
 8001e6e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001e72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e76:	fb03 f102 	mul.w	r1, r3, r2
 8001e7a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001e7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	18ca      	adds	r2, r1, r3
 8001e88:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001e8c:	fba3 4503 	umull	r4, r5, r3, r3
 8001e90:	1953      	adds	r3, r2, r5
 8001e92:	461d      	mov	r5, r3
 8001e94:	4b97      	ldr	r3, [pc, #604]	; (80020f4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x304>)
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	b21b      	sxth	r3, r3
 8001e9c:	17da      	asrs	r2, r3, #31
 8001e9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ea2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001ea6:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	fb03 f205 	mul.w	r2, r3, r5
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	fb04 f303 	mul.w	r3, r4, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4602      	mov	r2, r0
 8001eba:	fba4 8902 	umull	r8, r9, r4, r2
 8001ebe:	444b      	add	r3, r9
 8001ec0:	4699      	mov	r9, r3
 8001ec2:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
 8001ec6:	e9c7 894c 	strd	r8, r9, [r7, #304]	; 0x130
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8001eca:	4b8b      	ldr	r3, [pc, #556]	; (80020f8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x308>)
 8001ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	17da      	asrs	r2, r3, #31
 8001ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ed8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001edc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ee0:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001ee4:	462a      	mov	r2, r5
 8001ee6:	fb02 f203 	mul.w	r2, r2, r3
 8001eea:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001eee:	4621      	mov	r1, r4
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	441a      	add	r2, r3
 8001ef6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001efa:	4621      	mov	r1, r4
 8001efc:	fba3 ab01 	umull	sl, fp, r3, r1
 8001f00:	eb02 030b 	add.w	r3, r2, fp
 8001f04:	469b      	mov	fp, r3
 8001f06:	f04f 0000 	mov.w	r0, #0
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001f12:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001f16:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001f1a:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f1e:	1814      	adds	r4, r2, r0
 8001f20:	643c      	str	r4, [r7, #64]	; 0x40
 8001f22:	414b      	adcs	r3, r1
 8001f24:	647b      	str	r3, [r7, #68]	; 0x44
 8001f26:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001f2a:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var2 = var2 + (((int64_t)p4)<<35);
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <BME280_ReadTemperatureAndPressureAndHuminidity+0x30c>)
 8001f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	17da      	asrs	r2, r3, #31
 8001f38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f3c:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001f40:	f04f 0000 	mov.w	r0, #0
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f4c:	00d9      	lsls	r1, r3, #3
 8001f4e:	2000      	movs	r0, #0
 8001f50:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8001f54:	1814      	adds	r4, r2, r0
 8001f56:	63bc      	str	r4, [r7, #56]	; 0x38
 8001f58:	414b      	adcs	r3, r1
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f5c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001f60:	e9c7 344c 	strd	r3, r4, [r7, #304]	; 0x130
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001f64:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001f68:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f6c:	fb03 f102 	mul.w	r1, r3, r2
 8001f70:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8001f74:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f78:	fb02 f303 	mul.w	r3, r2, r3
 8001f7c:	18ca      	adds	r2, r1, r3
 8001f7e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f82:	fba3 1303 	umull	r1, r3, r3, r3
 8001f86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f94:	18d3      	adds	r3, r2, r3
 8001f96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001f9a:	4b59      	ldr	r3, [pc, #356]	; (8002100 <BME280_ReadTemperatureAndPressureAndHuminidity+0x310>)
 8001f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	17da      	asrs	r2, r3, #31
 8001fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001fac:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001fb0:	462b      	mov	r3, r5
 8001fb2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001fb6:	4642      	mov	r2, r8
 8001fb8:	fb02 f203 	mul.w	r2, r2, r3
 8001fbc:	464b      	mov	r3, r9
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	4641      	mov	r1, r8
 8001fca:	fba2 1201 	umull	r1, r2, r2, r1
 8001fce:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001fd2:	460a      	mov	r2, r1
 8001fd4:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001fd8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8001fdc:	4413      	add	r3, r2
 8001fde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001fe2:	f04f 0000 	mov.w	r0, #0
 8001fe6:	f04f 0100 	mov.w	r1, #0
 8001fea:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 8001fee:	4623      	mov	r3, r4
 8001ff0:	0a18      	lsrs	r0, r3, #8
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ff8:	462b      	mov	r3, r5
 8001ffa:	1219      	asrs	r1, r3, #8
			((var1 * (int64_t)p2)<<12);
 8001ffc:	4b41      	ldr	r3, [pc, #260]	; (8002104 <BME280_ReadTemperatureAndPressureAndHuminidity+0x314>)
 8001ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002002:	b21b      	sxth	r3, r3
 8002004:	17da      	asrs	r2, r3, #31
 8002006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800200a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800200e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002016:	464a      	mov	r2, r9
 8002018:	fb02 f203 	mul.w	r2, r2, r3
 800201c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002020:	4644      	mov	r4, r8
 8002022:	fb04 f303 	mul.w	r3, r4, r3
 8002026:	441a      	add	r2, r3
 8002028:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800202c:	4644      	mov	r4, r8
 800202e:	fba3 4304 	umull	r4, r3, r3, r4
 8002032:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002036:	4623      	mov	r3, r4
 8002038:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800203c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002040:	18d3      	adds	r3, r2, r3
 8002042:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8002052:	464c      	mov	r4, r9
 8002054:	0323      	lsls	r3, r4, #12
 8002056:	4644      	mov	r4, r8
 8002058:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800205c:	4644      	mov	r4, r8
 800205e:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8002060:	1884      	adds	r4, r0, r2
 8002062:	633c      	str	r4, [r7, #48]	; 0x30
 8002064:	eb41 0303 	adc.w	r3, r1, r3
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
 800206a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800206e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8002072:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002076:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800207a:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800207e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <BME280_ReadTemperatureAndPressureAndHuminidity+0x318>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	2200      	movs	r2, #0
 800208a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800208e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002092:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8002096:	462b      	mov	r3, r5
 8002098:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800209c:	4642      	mov	r2, r8
 800209e:	fb02 f203 	mul.w	r2, r2, r3
 80020a2:	464b      	mov	r3, r9
 80020a4:	4621      	mov	r1, r4
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	4622      	mov	r2, r4
 80020ae:	4641      	mov	r1, r8
 80020b0:	fba2 1201 	umull	r1, r2, r2, r1
 80020b4:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80020b8:	460a      	mov	r2, r1
 80020ba:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80020be:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80020c2:	4413      	add	r3, r2
 80020c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80020d4:	4629      	mov	r1, r5
 80020d6:	104a      	asrs	r2, r1, #1
 80020d8:	4629      	mov	r1, r5
 80020da:	17cb      	asrs	r3, r1, #31
 80020dc:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138

	if (var1 == 0) {
 80020e0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80020e4:	4313      	orrs	r3, r2
 80020e6:	d111      	bne.n	800210c <BME280_ReadTemperatureAndPressureAndHuminidity+0x31c>
		return 0;  // avoid exception caused by division by zero
 80020e8:	2300      	movs	r3, #0
 80020ea:	e1e0      	b.n	80024ae <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>
 80020ec:	c2c60000 	.word	0xc2c60000
 80020f0:	20000638 	.word	0x20000638
 80020f4:	20000624 	.word	0x20000624
 80020f8:	20000622 	.word	0x20000622
 80020fc:	20000620 	.word	0x20000620
 8002100:	2000061e 	.word	0x2000061e
 8002104:	2000061c 	.word	0x2000061c
 8002108:	20000634 	.word	0x20000634
	}
	p = 1048576 - adc_P;
 800210c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002110:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8002114:	17da      	asrs	r2, r3, #31
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
 8002118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800211a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800211e:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	p = (((p<<31) - var2)*3125) / var1;
 8002122:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002126:	105b      	asrs	r3, r3, #1
 8002128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800212c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002130:	07db      	lsls	r3, r3, #31
 8002132:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002136:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 800213a:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800213e:	4621      	mov	r1, r4
 8002140:	1a89      	subs	r1, r1, r2
 8002142:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002146:	4629      	mov	r1, r5
 8002148:	eb61 0303 	sbc.w	r3, r1, r3
 800214c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002150:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002154:	4622      	mov	r2, r4
 8002156:	462b      	mov	r3, r5
 8002158:	1891      	adds	r1, r2, r2
 800215a:	6239      	str	r1, [r7, #32]
 800215c:	415b      	adcs	r3, r3
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
 8002160:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002164:	4621      	mov	r1, r4
 8002166:	1851      	adds	r1, r2, r1
 8002168:	61b9      	str	r1, [r7, #24]
 800216a:	4629      	mov	r1, r5
 800216c:	414b      	adcs	r3, r1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	f04f 0200 	mov.w	r2, #0
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800217c:	4649      	mov	r1, r9
 800217e:	018b      	lsls	r3, r1, #6
 8002180:	4641      	mov	r1, r8
 8002182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002186:	4641      	mov	r1, r8
 8002188:	018a      	lsls	r2, r1, #6
 800218a:	4641      	mov	r1, r8
 800218c:	1889      	adds	r1, r1, r2
 800218e:	6139      	str	r1, [r7, #16]
 8002190:	4649      	mov	r1, r9
 8002192:	eb43 0101 	adc.w	r1, r3, r1
 8002196:	6179      	str	r1, [r7, #20]
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80021a4:	4649      	mov	r1, r9
 80021a6:	008b      	lsls	r3, r1, #2
 80021a8:	4641      	mov	r1, r8
 80021aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021ae:	4641      	mov	r1, r8
 80021b0:	008a      	lsls	r2, r1, #2
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	4622      	mov	r2, r4
 80021ba:	189b      	adds	r3, r3, r2
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	460b      	mov	r3, r1
 80021c0:	462a      	mov	r2, r5
 80021c2:	eb42 0303 	adc.w	r3, r2, r3
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80021d4:	4649      	mov	r1, r9
 80021d6:	008b      	lsls	r3, r1, #2
 80021d8:	4641      	mov	r1, r8
 80021da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021de:	4641      	mov	r1, r8
 80021e0:	008a      	lsls	r2, r1, #2
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	4622      	mov	r2, r4
 80021ea:	189b      	adds	r3, r3, r2
 80021ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80021ee:	462b      	mov	r3, r5
 80021f0:	460a      	mov	r2, r1
 80021f2:	eb42 0303 	adc.w	r3, r2, r3
 80021f6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021f8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80021fc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002200:	f7fe fcfa 	bl	8000bf8 <__aeabi_ldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 800220c:	4bab      	ldr	r3, [pc, #684]	; (80024bc <BME280_ReadTemperatureAndPressureAndHuminidity+0x6cc>)
 800220e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002212:	b21b      	sxth	r3, r3
 8002214:	17da      	asrs	r2, r3, #31
 8002216:	673b      	str	r3, [r7, #112]	; 0x70
 8002218:	677a      	str	r2, [r7, #116]	; 0x74
 800221a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800221e:	f04f 0000 	mov.w	r0, #0
 8002222:	f04f 0100 	mov.w	r1, #0
 8002226:	0b50      	lsrs	r0, r2, #13
 8002228:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800222c:	1359      	asrs	r1, r3, #13
 800222e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002232:	462b      	mov	r3, r5
 8002234:	fb00 f203 	mul.w	r2, r0, r3
 8002238:	4623      	mov	r3, r4
 800223a:	fb03 f301 	mul.w	r3, r3, r1
 800223e:	4413      	add	r3, r2
 8002240:	4622      	mov	r2, r4
 8002242:	fba2 1200 	umull	r1, r2, r2, r0
 8002246:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800224a:	460a      	mov	r2, r1
 800224c:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8002250:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002254:	4413      	add	r3, r2
 8002256:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800225a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 800225e:	f04f 0000 	mov.w	r0, #0
 8002262:	f04f 0100 	mov.w	r1, #0
 8002266:	0b50      	lsrs	r0, r2, #13
 8002268:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800226c:	1359      	asrs	r1, r3, #13
 800226e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8002272:	462b      	mov	r3, r5
 8002274:	fb00 f203 	mul.w	r2, r0, r3
 8002278:	4623      	mov	r3, r4
 800227a:	fb03 f301 	mul.w	r3, r3, r1
 800227e:	4413      	add	r3, r2
 8002280:	4622      	mov	r2, r4
 8002282:	fba2 1200 	umull	r1, r2, r2, r0
 8002286:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800228a:	460a      	mov	r2, r1
 800228c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8002290:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002294:	4413      	add	r3, r2
 8002296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80022a6:	4621      	mov	r1, r4
 80022a8:	0e4a      	lsrs	r2, r1, #25
 80022aa:	4629      	mov	r1, r5
 80022ac:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80022b0:	4629      	mov	r1, r5
 80022b2:	164b      	asrs	r3, r1, #25
 80022b4:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	var2 = (((int64_t)p8) * p) >> 19;
 80022b8:	4b81      	ldr	r3, [pc, #516]	; (80024c0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d0>)
 80022ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022be:	b21b      	sxth	r3, r3
 80022c0:	17da      	asrs	r2, r3, #31
 80022c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80022c4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80022ca:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80022ce:	462a      	mov	r2, r5
 80022d0:	fb02 f203 	mul.w	r2, r2, r3
 80022d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022d8:	4621      	mov	r1, r4
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80022e4:	4621      	mov	r1, r4
 80022e6:	fba2 1201 	umull	r1, r2, r2, r1
 80022ea:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80022ee:	460a      	mov	r2, r1
 80022f0:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 80022f4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80022f8:	4413      	add	r3, r2
 80022fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800230a:	4621      	mov	r1, r4
 800230c:	0cca      	lsrs	r2, r1, #19
 800230e:	4629      	mov	r1, r5
 8002310:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8002314:	4629      	mov	r1, r5
 8002316:	14cb      	asrs	r3, r1, #19
 8002318:	e9c7 234c 	strd	r2, r3, [r7, #304]	; 0x130

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 800231c:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002320:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002324:	1884      	adds	r4, r0, r2
 8002326:	663c      	str	r4, [r7, #96]	; 0x60
 8002328:	eb41 0303 	adc.w	r3, r1, r3
 800232c:	667b      	str	r3, [r7, #100]	; 0x64
 800232e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002332:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002336:	4621      	mov	r1, r4
 8002338:	1889      	adds	r1, r1, r2
 800233a:	65b9      	str	r1, [r7, #88]	; 0x58
 800233c:	4629      	mov	r1, r5
 800233e:	eb43 0101 	adc.w	r1, r3, r1
 8002342:	65f9      	str	r1, [r7, #92]	; 0x5c
 8002344:	f04f 0000 	mov.w	r0, #0
 8002348:	f04f 0100 	mov.w	r1, #0
 800234c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002350:	4623      	mov	r3, r4
 8002352:	0a18      	lsrs	r0, r3, #8
 8002354:	462b      	mov	r3, r5
 8002356:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800235a:	462b      	mov	r3, r5
 800235c:	1219      	asrs	r1, r3, #8
 800235e:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d4>)
 8002360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002364:	b21b      	sxth	r3, r3
 8002366:	17da      	asrs	r2, r3, #31
 8002368:	653b      	str	r3, [r7, #80]	; 0x50
 800236a:	657a      	str	r2, [r7, #84]	; 0x54
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002378:	464c      	mov	r4, r9
 800237a:	0123      	lsls	r3, r4, #4
 800237c:	4644      	mov	r4, r8
 800237e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002382:	4644      	mov	r4, r8
 8002384:	0122      	lsls	r2, r4, #4
 8002386:	1884      	adds	r4, r0, r2
 8002388:	603c      	str	r4, [r7, #0]
 800238a:	eb41 0303 	adc.w	r3, r1, r3
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002394:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	*pressure = (int32_t)p/256;
 8002398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800239c:	2b00      	cmp	r3, #0
 800239e:	da00      	bge.n	80023a2 <BME280_ReadTemperatureAndPressureAndHuminidity+0x5b2>
 80023a0:	33ff      	adds	r3, #255	; 0xff
 80023a2:	121b      	asrs	r3, r3, #8
 80023a4:	461a      	mov	r2, r3
 80023a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023aa:	601a      	str	r2, [r3, #0]

	// Pressure section
	int32_t adc_H = BME280_Read16(BME280_HUMIDDATA);
 80023ac:	20fd      	movs	r0, #253	; 0xfd
 80023ae:	f7ff fa87 	bl	80018c0 <BME280_Read16>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80023b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c0:	d101      	bne.n	80023c6 <BME280_ReadTemperatureAndPressureAndHuminidity+0x5d6>
		return -1; //error
 80023c2:	23ff      	movs	r3, #255	; 0xff
 80023c4:	e073      	b.n	80024ae <BME280_ReadTemperatureAndPressureAndHuminidity+0x6be>

	int32_t v_x1_u32r;

	v_x1_u32r = (t_fine - ((int32_t)76800));
 80023c6:	4b40      	ldr	r3, [pc, #256]	; (80024c8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6d8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80023ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80023d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80023d6:	039a      	lsls	r2, r3, #14
 80023d8:	4b3c      	ldr	r3, [pc, #240]	; (80024cc <BME280_ReadTemperatureAndPressureAndHuminidity+0x6dc>)
 80023da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023de:	051b      	lsls	r3, r3, #20
 80023e0:	1ad2      	subs	r2, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e0>)
 80023e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80023ee:	fb01 f303 	mul.w	r3, r1, r3
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 80023f2:	1ad3      	subs	r3, r2, r3
				  (((int32_t)h5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80023f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80023f8:	13db      	asrs	r3, r3, #15
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 80023fa:	4a36      	ldr	r2, [pc, #216]	; (80024d4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e4>)
 80023fc:	f992 2000 	ldrsb.w	r2, [r2]
 8002400:	4611      	mov	r1, r2
 8002402:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002406:	fb01 f202 	mul.w	r2, r1, r2
 800240a:	1292      	asrs	r2, r2, #10
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 800240c:	4932      	ldr	r1, [pc, #200]	; (80024d8 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6e8>)
 800240e:	7809      	ldrb	r1, [r1, #0]
 8002410:	4608      	mov	r0, r1
 8002412:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8002416:	fb00 f101 	mul.w	r1, r0, r1
 800241a:	12c9      	asrs	r1, r1, #11
 800241c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
			   (((((((v_x1_u32r * ((int32_t)h6)) >> 10) *
 8002420:	fb01 f202 	mul.w	r2, r1, r2
					(((v_x1_u32r * ((int32_t)h3)) >> 11) + ((int32_t)32768))) >> 10) +
 8002424:	1292      	asrs	r2, r2, #10
 8002426:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
				  ((int32_t)2097152)) * ((int32_t)h2) + 8192) >> 14));
 800242a:	492c      	ldr	r1, [pc, #176]	; (80024dc <BME280_ReadTemperatureAndPressureAndHuminidity+0x6ec>)
 800242c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8002430:	fb01 f202 	mul.w	r2, r1, r2
 8002434:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8002438:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)h4) << 20) -
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8002442:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002446:	13db      	asrs	r3, r3, #15
 8002448:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800244c:	13d2      	asrs	r2, r2, #15
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	11db      	asrs	r3, r3, #7
							 ((int32_t)h1)) >> 4));
 8002454:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f0>)
 8002456:	7812      	ldrb	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 8002458:	fb02 f303 	mul.w	r3, r2, r3
							 ((int32_t)h1)) >> 4));
 800245c:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 800245e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120

	v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 8002468:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800246c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002470:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
 8002474:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002478:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 800247c:	bfa8      	it	ge
 800247e:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8002482:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	float h = (v_x1_u32r>>12);
 8002486:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800248a:	131b      	asrs	r3, r3, #12
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002494:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
	*huminidity = h / 1024.0;
 8002498:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 800249c:	eddf 6a11 	vldr	s13, [pc, #68]	; 80024e4 <BME280_ReadTemperatureAndPressureAndHuminidity+0x6f4>
 80024a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80024a8:	edc3 7a00 	vstr	s15, [r3]

	return 0;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 80024b4:	46bd      	mov	sp, r7
 80024b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ba:	bf00      	nop
 80024bc:	2000062a 	.word	0x2000062a
 80024c0:	20000628 	.word	0x20000628
 80024c4:	20000626 	.word	0x20000626
 80024c8:	20000638 	.word	0x20000638
 80024cc:	2000062e 	.word	0x2000062e
 80024d0:	20000630 	.word	0x20000630
 80024d4:	20000616 	.word	0x20000616
 80024d8:	20000615 	.word	0x20000615
 80024dc:	2000062c 	.word	0x2000062c
 80024e0:	20000614 	.word	0x20000614
 80024e4:	44800000 	.word	0x44800000

080024e8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	607b      	str	r3, [r7, #4]
 80024f2:	4b20      	ldr	r3, [pc, #128]	; (8002574 <MX_DMA_Init+0x8c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <MX_DMA_Init+0x8c>)
 80024f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b1d      	ldr	r3, [pc, #116]	; (8002574 <MX_DMA_Init+0x8c>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	607b      	str	r3, [r7, #4]
 8002508:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <MX_DMA_Init+0x90>)
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <MX_DMA_Init+0x94>)
 800250e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <MX_DMA_Init+0x90>)
 8002512:	2200      	movs	r2, #0
 8002514:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <MX_DMA_Init+0x90>)
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <MX_DMA_Init+0x90>)
 800251e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002522:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_DMA_Init+0x90>)
 8002526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800252a:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <MX_DMA_Init+0x90>)
 800252e:	2200      	movs	r2, #0
 8002530:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_DMA_Init+0x90>)
 8002534:	2200      	movs	r2, #0
 8002536:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_DMA_Init+0x90>)
 800253a:	2200      	movs	r2, #0
 800253c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_DMA_Init+0x90>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_DMA_Init+0x90>)
 8002546:	2204      	movs	r2, #4
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_DMA_Init+0x90>)
 800254c:	2203      	movs	r2, #3
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_DMA_Init+0x90>)
 8002552:	2200      	movs	r2, #0
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_DMA_Init+0x90>)
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 800255c:	4806      	ldr	r0, [pc, #24]	; (8002578 <MX_DMA_Init+0x90>)
 800255e:	f003 f937 	bl	80057d0 <HAL_DMA_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_DMA_Init+0x84>
  {
    Error_Handler();
 8002568:	f000 ffbc 	bl	80034e4 <Error_Handler>
  }

}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	40023800 	.word	0x40023800
 8002578:	2000063c 	.word	0x2000063c
 800257c:	40026410 	.word	0x40026410

08002580 <drv8835_mode_control>:
#include "stm32f4xx_hal_tim.h"



void drv8835_mode_control(DRV8835_Mode mode)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
	if(mode == Phase_Enable_Mode)
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <drv8835_mode_control+0x1c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, SET);
 8002590:	2201      	movs	r2, #1
 8002592:	2180      	movs	r1, #128	; 0x80
 8002594:	4807      	ldr	r0, [pc, #28]	; (80025b4 <drv8835_mode_control+0x34>)
 8002596:	f003 fc17 	bl	8005dc8 <HAL_GPIO_WritePin>
	else if(mode == In_In_Mode)
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
}
 800259a:	e007      	b.n	80025ac <drv8835_mode_control+0x2c>
	else if(mode == In_In_Mode)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d104      	bne.n	80025ac <drv8835_mode_control+0x2c>
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, RESET);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	4803      	ldr	r0, [pc, #12]	; (80025b4 <drv8835_mode_control+0x34>)
 80025a8:	f003 fc0e 	bl	8005dc8 <HAL_GPIO_WritePin>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40020000 	.word	0x40020000

080025b8 <drv8835_set_motorA_direction>:

void drv8835_set_motorA_direction(DRV8835_Direction dir)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
	if(dir == CW)
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <drv8835_set_motorA_direction+0x1c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, SET);
 80025c8:	2201      	movs	r2, #1
 80025ca:	2140      	movs	r1, #64	; 0x40
 80025cc:	4807      	ldr	r0, [pc, #28]	; (80025ec <drv8835_set_motorA_direction+0x34>)
 80025ce:	f003 fbfb 	bl	8005dc8 <HAL_GPIO_WritePin>
	else if(dir == CCW)
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
}
 80025d2:	e007      	b.n	80025e4 <drv8835_set_motorA_direction+0x2c>
	else if(dir == CCW)
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d104      	bne.n	80025e4 <drv8835_set_motorA_direction+0x2c>
		HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, RESET);
 80025da:	2200      	movs	r2, #0
 80025dc:	2140      	movs	r1, #64	; 0x40
 80025de:	4803      	ldr	r0, [pc, #12]	; (80025ec <drv8835_set_motorA_direction+0x34>)
 80025e0:	f003 fbf2 	bl	8005dc8 <HAL_GPIO_WritePin>
}
 80025e4:	bf00      	nop
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40020400 	.word	0x40020400

080025f0 <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint8_t speed)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	71fb      	strb	r3, [r7, #7]
	if(speed >= htim3.Instance->ARR)
 80025fa:	79fa      	ldrb	r2, [r7, #7]
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <drv8835_set_motorA_speed+0x34>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	429a      	cmp	r2, r3
 8002604:	d303      	bcc.n	800260e <drv8835_set_motorA_speed+0x1e>
		speed = htim3.Instance->ARR;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <drv8835_set_motorA_speed+0x34>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	71fb      	strb	r3, [r7, #7]

	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, speed);
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <drv8835_set_motorA_speed+0x34>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	79fa      	ldrb	r2, [r7, #7]
 8002614:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	200007c8 	.word	0x200007c8

08002628 <drv8835_init>:

void drv8835_init()
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
	drv8835_mode_control(Phase_Enable_Mode);
 800262c:	2001      	movs	r0, #1
 800262e:	f7ff ffa7 	bl	8002580 <drv8835_mode_control>
	drv8835_set_motorA_direction(CCW);
 8002632:	2001      	movs	r0, #1
 8002634:	f7ff ffc0 	bl	80025b8 <drv8835_set_motorA_direction>
	drv8835_set_motorA_speed(0);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff ffd9 	bl	80025f0 <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800263e:	2100      	movs	r1, #0
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <drv8835_init+0x24>)
 8002642:	f006 fafd 	bl	8008c40 <HAL_TIM_PWM_Start>
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200007c8 	.word	0x200007c8

08002650 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 8002654:	4869      	ldr	r0, [pc, #420]	; (80027fc <MX_FREERTOS_Init+0x1ac>)
 8002656:	f008 f8c5 	bl	800a7e4 <osMutexNew>
 800265a:	4603      	mov	r3, r0
 800265c:	4a68      	ldr	r2, [pc, #416]	; (8002800 <MX_FREERTOS_Init+0x1b0>)
 800265e:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C */
  MutexI2CHandle = osMutexNew(&MutexI2C_attributes);
 8002660:	4868      	ldr	r0, [pc, #416]	; (8002804 <MX_FREERTOS_Init+0x1b4>)
 8002662:	f008 f8bf 	bl	800a7e4 <osMutexNew>
 8002666:	4603      	mov	r3, r0
 8002668:	4a67      	ldr	r2, [pc, #412]	; (8002808 <MX_FREERTOS_Init+0x1b8>)
 800266a:	6013      	str	r3, [r2, #0]

  /* creation of MutexRTC */
  MutexRTCHandle = osMutexNew(&MutexRTC_attributes);
 800266c:	4867      	ldr	r0, [pc, #412]	; (800280c <MX_FREERTOS_Init+0x1bc>)
 800266e:	f008 f8b9 	bl	800a7e4 <osMutexNew>
 8002672:	4603      	mov	r3, r0
 8002674:	4a66      	ldr	r2, [pc, #408]	; (8002810 <MX_FREERTOS_Init+0x1c0>)
 8002676:	6013      	str	r3, [r2, #0]

  /* creation of MutexAlarm */
  MutexAlarmHandle = osMutexNew(&MutexAlarm_attributes);
 8002678:	4866      	ldr	r0, [pc, #408]	; (8002814 <MX_FREERTOS_Init+0x1c4>)
 800267a:	f008 f8b3 	bl	800a7e4 <osMutexNew>
 800267e:	4603      	mov	r3, r0
 8002680:	4a65      	ldr	r2, [pc, #404]	; (8002818 <MX_FREERTOS_Init+0x1c8>)
 8002682:	6013      	str	r3, [r2, #0]

  /* creation of MutexI2C2 */
  MutexI2C2Handle = osMutexNew(&MutexI2C2_attributes);
 8002684:	4865      	ldr	r0, [pc, #404]	; (800281c <MX_FREERTOS_Init+0x1cc>)
 8002686:	f008 f8ad 	bl	800a7e4 <osMutexNew>
 800268a:	4603      	mov	r3, r0
 800268c:	4a64      	ldr	r2, [pc, #400]	; (8002820 <MX_FREERTOS_Init+0x1d0>)
 800268e:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySemBme280 */
  BinarySemBme280Handle = osSemaphoreNew(1, 1, &BinarySemBme280_attributes);
 8002690:	4a64      	ldr	r2, [pc, #400]	; (8002824 <MX_FREERTOS_Init+0x1d4>)
 8002692:	2101      	movs	r1, #1
 8002694:	2001      	movs	r0, #1
 8002696:	f008 f9b3 	bl	800aa00 <osSemaphoreNew>
 800269a:	4603      	mov	r3, r0
 800269c:	4a62      	ldr	r2, [pc, #392]	; (8002828 <MX_FREERTOS_Init+0x1d8>)
 800269e:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemBH1750 */
  BinarySemBH1750Handle = osSemaphoreNew(1, 1, &BinarySemBH1750_attributes);
 80026a0:	4a62      	ldr	r2, [pc, #392]	; (800282c <MX_FREERTOS_Init+0x1dc>)
 80026a2:	2101      	movs	r1, #1
 80026a4:	2001      	movs	r0, #1
 80026a6:	f008 f9ab 	bl	800aa00 <osSemaphoreNew>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4a60      	ldr	r2, [pc, #384]	; (8002830 <MX_FREERTOS_Init+0x1e0>)
 80026ae:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemRTC */
  BinarySemRTCHandle = osSemaphoreNew(1, 1, &BinarySemRTC_attributes);
 80026b0:	4a60      	ldr	r2, [pc, #384]	; (8002834 <MX_FREERTOS_Init+0x1e4>)
 80026b2:	2101      	movs	r1, #1
 80026b4:	2001      	movs	r0, #1
 80026b6:	f008 f9a3 	bl	800aa00 <osSemaphoreNew>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4a5e      	ldr	r2, [pc, #376]	; (8002838 <MX_FREERTOS_Init+0x1e8>)
 80026be:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemCounter */
  BinarySemCounterHandle = osSemaphoreNew(1, 1, &BinarySemCounter_attributes);
 80026c0:	4a5e      	ldr	r2, [pc, #376]	; (800283c <MX_FREERTOS_Init+0x1ec>)
 80026c2:	2101      	movs	r1, #1
 80026c4:	2001      	movs	r0, #1
 80026c6:	f008 f99b 	bl	800aa00 <osSemaphoreNew>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a5c      	ldr	r2, [pc, #368]	; (8002840 <MX_FREERTOS_Init+0x1f0>)
 80026ce:	6013      	str	r3, [r2, #0]

  /* creation of BinarySemSetAlarm */
  BinarySemSetAlarmHandle = osSemaphoreNew(1, 1, &BinarySemSetAlarm_attributes);
 80026d0:	4a5c      	ldr	r2, [pc, #368]	; (8002844 <MX_FREERTOS_Init+0x1f4>)
 80026d2:	2101      	movs	r1, #1
 80026d4:	2001      	movs	r0, #1
 80026d6:	f008 f993 	bl	800aa00 <osSemaphoreNew>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a5a      	ldr	r2, [pc, #360]	; (8002848 <MX_FREERTOS_Init+0x1f8>)
 80026de:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of TimerBmeData */
  TimerBmeDataHandle = osTimerNew(CallbackTimerBmeData, osTimerPeriodic, NULL, &TimerBmeData_attributes);
 80026e0:	4b5a      	ldr	r3, [pc, #360]	; (800284c <MX_FREERTOS_Init+0x1fc>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	2101      	movs	r1, #1
 80026e6:	485a      	ldr	r0, [pc, #360]	; (8002850 <MX_FREERTOS_Init+0x200>)
 80026e8:	f007 ffd2 	bl	800a690 <osTimerNew>
 80026ec:	4603      	mov	r3, r0
 80026ee:	4a59      	ldr	r2, [pc, #356]	; (8002854 <MX_FREERTOS_Init+0x204>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* creation of TimerBh1750Data */
  TimerBh1750DataHandle = osTimerNew(CallbackTimerBh1750Data, osTimerPeriodic, NULL, &TimerBh1750Data_attributes);
 80026f2:	4b59      	ldr	r3, [pc, #356]	; (8002858 <MX_FREERTOS_Init+0x208>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	2101      	movs	r1, #1
 80026f8:	4858      	ldr	r0, [pc, #352]	; (800285c <MX_FREERTOS_Init+0x20c>)
 80026fa:	f007 ffc9 	bl	800a690 <osTimerNew>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a57      	ldr	r2, [pc, #348]	; (8002860 <MX_FREERTOS_Init+0x210>)
 8002702:	6013      	str	r3, [r2, #0]

  /* creation of TimerRTC */
  TimerRTCHandle = osTimerNew(CallbackTimerRTC, osTimerPeriodic, NULL, &TimerRTC_attributes);
 8002704:	4b57      	ldr	r3, [pc, #348]	; (8002864 <MX_FREERTOS_Init+0x214>)
 8002706:	2200      	movs	r2, #0
 8002708:	2101      	movs	r1, #1
 800270a:	4857      	ldr	r0, [pc, #348]	; (8002868 <MX_FREERTOS_Init+0x218>)
 800270c:	f007 ffc0 	bl	800a690 <osTimerNew>
 8002710:	4603      	mov	r3, r0
 8002712:	4a56      	ldr	r2, [pc, #344]	; (800286c <MX_FREERTOS_Init+0x21c>)
 8002714:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of QueueBme */
  QueueBmeHandle = osMessageQueueNew (16, sizeof(BmeData_t), &QueueBme_attributes);
 8002716:	4a56      	ldr	r2, [pc, #344]	; (8002870 <MX_FREERTOS_Init+0x220>)
 8002718:	210c      	movs	r1, #12
 800271a:	2010      	movs	r0, #16
 800271c:	f008 fa90 	bl	800ac40 <osMessageQueueNew>
 8002720:	4603      	mov	r3, r0
 8002722:	4a54      	ldr	r2, [pc, #336]	; (8002874 <MX_FREERTOS_Init+0x224>)
 8002724:	6013      	str	r3, [r2, #0]

  /* creation of QueueBh1750 */
  QueueBh1750Handle = osMessageQueueNew (16, sizeof(BHData_t), &QueueBh1750_attributes);
 8002726:	4a54      	ldr	r2, [pc, #336]	; (8002878 <MX_FREERTOS_Init+0x228>)
 8002728:	2104      	movs	r1, #4
 800272a:	2010      	movs	r0, #16
 800272c:	f008 fa88 	bl	800ac40 <osMessageQueueNew>
 8002730:	4603      	mov	r3, r0
 8002732:	4a52      	ldr	r2, [pc, #328]	; (800287c <MX_FREERTOS_Init+0x22c>)
 8002734:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCData */
  QueueRTCDataHandle = osMessageQueueNew (16, sizeof(RTC_DateTypeDef), &QueueRTCData_attributes);
 8002736:	4a52      	ldr	r2, [pc, #328]	; (8002880 <MX_FREERTOS_Init+0x230>)
 8002738:	2104      	movs	r1, #4
 800273a:	2010      	movs	r0, #16
 800273c:	f008 fa80 	bl	800ac40 <osMessageQueueNew>
 8002740:	4603      	mov	r3, r0
 8002742:	4a50      	ldr	r2, [pc, #320]	; (8002884 <MX_FREERTOS_Init+0x234>)
 8002744:	6013      	str	r3, [r2, #0]

  /* creation of QueueRTCTime */
  QueueRTCTimeHandle = osMessageQueueNew (16, sizeof(RTC_TimeTypeDef), &QueueRTCTime_attributes);
 8002746:	4a50      	ldr	r2, [pc, #320]	; (8002888 <MX_FREERTOS_Init+0x238>)
 8002748:	2114      	movs	r1, #20
 800274a:	2010      	movs	r0, #16
 800274c:	f008 fa78 	bl	800ac40 <osMessageQueueNew>
 8002750:	4603      	mov	r3, r0
 8002752:	4a4e      	ldr	r2, [pc, #312]	; (800288c <MX_FREERTOS_Init+0x23c>)
 8002754:	6013      	str	r3, [r2, #0]

  /* creation of QueueCounterPump */
  QueueCounterPumpHandle = osMessageQueueNew (1, sizeof(uint8_t), &QueueCounterPump_attributes);
 8002756:	4a4e      	ldr	r2, [pc, #312]	; (8002890 <MX_FREERTOS_Init+0x240>)
 8002758:	2101      	movs	r1, #1
 800275a:	2001      	movs	r0, #1
 800275c:	f008 fa70 	bl	800ac40 <osMessageQueueNew>
 8002760:	4603      	mov	r3, r0
 8002762:	4a4c      	ldr	r2, [pc, #304]	; (8002894 <MX_FREERTOS_Init+0x244>)
 8002764:	6013      	str	r3, [r2, #0]

  /* creation of QueueCounterAlarm */
  QueueCounterAlarmHandle = osMessageQueueNew (1, sizeof(uint8_t), &QueueCounterAlarm_attributes);
 8002766:	4a4c      	ldr	r2, [pc, #304]	; (8002898 <MX_FREERTOS_Init+0x248>)
 8002768:	2101      	movs	r1, #1
 800276a:	2001      	movs	r0, #1
 800276c:	f008 fa68 	bl	800ac40 <osMessageQueueNew>
 8002770:	4603      	mov	r3, r0
 8002772:	4a4a      	ldr	r2, [pc, #296]	; (800289c <MX_FREERTOS_Init+0x24c>)
 8002774:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskRTC */
  TaskRTCHandle = osThreadNew(StartTaskRTC, NULL, &TaskRTC_attributes);
 8002776:	4a4a      	ldr	r2, [pc, #296]	; (80028a0 <MX_FREERTOS_Init+0x250>)
 8002778:	2100      	movs	r1, #0
 800277a:	484a      	ldr	r0, [pc, #296]	; (80028a4 <MX_FREERTOS_Init+0x254>)
 800277c:	f007 fd86 	bl	800a28c <osThreadNew>
 8002780:	4603      	mov	r3, r0
 8002782:	4a49      	ldr	r2, [pc, #292]	; (80028a8 <MX_FREERTOS_Init+0x258>)
 8002784:	6013      	str	r3, [r2, #0]

  /* creation of TaskBme280 */
  TaskBme280Handle = osThreadNew(StartTaskBme280, NULL, &TaskBme280_attributes);
 8002786:	4a49      	ldr	r2, [pc, #292]	; (80028ac <MX_FREERTOS_Init+0x25c>)
 8002788:	2100      	movs	r1, #0
 800278a:	4849      	ldr	r0, [pc, #292]	; (80028b0 <MX_FREERTOS_Init+0x260>)
 800278c:	f007 fd7e 	bl	800a28c <osThreadNew>
 8002790:	4603      	mov	r3, r0
 8002792:	4a48      	ldr	r2, [pc, #288]	; (80028b4 <MX_FREERTOS_Init+0x264>)
 8002794:	6013      	str	r3, [r2, #0]

  /* creation of TaskBH1750 */
  TaskBH1750Handle = osThreadNew(StartTaskBH1750, NULL, &TaskBH1750_attributes);
 8002796:	4a48      	ldr	r2, [pc, #288]	; (80028b8 <MX_FREERTOS_Init+0x268>)
 8002798:	2100      	movs	r1, #0
 800279a:	4848      	ldr	r0, [pc, #288]	; (80028bc <MX_FREERTOS_Init+0x26c>)
 800279c:	f007 fd76 	bl	800a28c <osThreadNew>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a47      	ldr	r2, [pc, #284]	; (80028c0 <MX_FREERTOS_Init+0x270>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* creation of TaskSSD1306 */
  TaskSSD1306Handle = osThreadNew(StartTaskSSD1306, NULL, &TaskSSD1306_attributes);
 80027a6:	4a47      	ldr	r2, [pc, #284]	; (80028c4 <MX_FREERTOS_Init+0x274>)
 80027a8:	2100      	movs	r1, #0
 80027aa:	4847      	ldr	r0, [pc, #284]	; (80028c8 <MX_FREERTOS_Init+0x278>)
 80027ac:	f007 fd6e 	bl	800a28c <osThreadNew>
 80027b0:	4603      	mov	r3, r0
 80027b2:	4a46      	ldr	r2, [pc, #280]	; (80028cc <MX_FREERTOS_Init+0x27c>)
 80027b4:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpON */
  TaskPumpONHandle = osThreadNew(StartTaskPumpON, NULL, &TaskPumpON_attributes);
 80027b6:	4a46      	ldr	r2, [pc, #280]	; (80028d0 <MX_FREERTOS_Init+0x280>)
 80027b8:	2100      	movs	r1, #0
 80027ba:	4846      	ldr	r0, [pc, #280]	; (80028d4 <MX_FREERTOS_Init+0x284>)
 80027bc:	f007 fd66 	bl	800a28c <osThreadNew>
 80027c0:	4603      	mov	r3, r0
 80027c2:	4a45      	ldr	r2, [pc, #276]	; (80028d8 <MX_FREERTOS_Init+0x288>)
 80027c4:	6013      	str	r3, [r2, #0]

  /* creation of TaskPumpOFF */
  TaskPumpOFFHandle = osThreadNew(StartTaskPumpOFF, NULL, &TaskPumpOFF_attributes);
 80027c6:	4a45      	ldr	r2, [pc, #276]	; (80028dc <MX_FREERTOS_Init+0x28c>)
 80027c8:	2100      	movs	r1, #0
 80027ca:	4845      	ldr	r0, [pc, #276]	; (80028e0 <MX_FREERTOS_Init+0x290>)
 80027cc:	f007 fd5e 	bl	800a28c <osThreadNew>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4a44      	ldr	r2, [pc, #272]	; (80028e4 <MX_FREERTOS_Init+0x294>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* creation of TaskCounterPump */
  TaskCounterPumpHandle = osThreadNew(StartTaskCounterPump, NULL, &TaskCounterPump_attributes);
 80027d6:	4a44      	ldr	r2, [pc, #272]	; (80028e8 <MX_FREERTOS_Init+0x298>)
 80027d8:	2100      	movs	r1, #0
 80027da:	4844      	ldr	r0, [pc, #272]	; (80028ec <MX_FREERTOS_Init+0x29c>)
 80027dc:	f007 fd56 	bl	800a28c <osThreadNew>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4a43      	ldr	r2, [pc, #268]	; (80028f0 <MX_FREERTOS_Init+0x2a0>)
 80027e4:	6013      	str	r3, [r2, #0]

  /* creation of TaskAlarmCounte */
  TaskAlarmCounteHandle = osThreadNew(StartTaskAlarmCounter, NULL, &TaskAlarmCounte_attributes);
 80027e6:	4a43      	ldr	r2, [pc, #268]	; (80028f4 <MX_FREERTOS_Init+0x2a4>)
 80027e8:	2100      	movs	r1, #0
 80027ea:	4843      	ldr	r0, [pc, #268]	; (80028f8 <MX_FREERTOS_Init+0x2a8>)
 80027ec:	f007 fd4e 	bl	800a28c <osThreadNew>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a42      	ldr	r2, [pc, #264]	; (80028fc <MX_FREERTOS_Init+0x2ac>)
 80027f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	080117e4 	.word	0x080117e4
 8002800:	200006e0 	.word	0x200006e0
 8002804:	080117f4 	.word	0x080117f4
 8002808:	200006e4 	.word	0x200006e4
 800280c:	08011804 	.word	0x08011804
 8002810:	200006e8 	.word	0x200006e8
 8002814:	08011814 	.word	0x08011814
 8002818:	200006ec 	.word	0x200006ec
 800281c:	08011824 	.word	0x08011824
 8002820:	200006f0 	.word	0x200006f0
 8002824:	08011834 	.word	0x08011834
 8002828:	200006f4 	.word	0x200006f4
 800282c:	08011844 	.word	0x08011844
 8002830:	200006f8 	.word	0x200006f8
 8002834:	08011854 	.word	0x08011854
 8002838:	200006fc 	.word	0x200006fc
 800283c:	08011864 	.word	0x08011864
 8002840:	20000700 	.word	0x20000700
 8002844:	08011874 	.word	0x08011874
 8002848:	20000704 	.word	0x20000704
 800284c:	080117b4 	.word	0x080117b4
 8002850:	0800310d 	.word	0x0800310d
 8002854:	200006d4 	.word	0x200006d4
 8002858:	080117c4 	.word	0x080117c4
 800285c:	0800312d 	.word	0x0800312d
 8002860:	200006d8 	.word	0x200006d8
 8002864:	080117d4 	.word	0x080117d4
 8002868:	0800314d 	.word	0x0800314d
 800286c:	200006dc 	.word	0x200006dc
 8002870:	08011724 	.word	0x08011724
 8002874:	200006bc 	.word	0x200006bc
 8002878:	0801173c 	.word	0x0801173c
 800287c:	200006c0 	.word	0x200006c0
 8002880:	08011754 	.word	0x08011754
 8002884:	200006c4 	.word	0x200006c4
 8002888:	0801176c 	.word	0x0801176c
 800288c:	200006c8 	.word	0x200006c8
 8002890:	08011784 	.word	0x08011784
 8002894:	200006cc 	.word	0x200006cc
 8002898:	0801179c 	.word	0x0801179c
 800289c:	200006d0 	.word	0x200006d0
 80028a0:	08011604 	.word	0x08011604
 80028a4:	08002901 	.word	0x08002901
 80028a8:	2000069c 	.word	0x2000069c
 80028ac:	08011628 	.word	0x08011628
 80028b0:	08002b69 	.word	0x08002b69
 80028b4:	200006a0 	.word	0x200006a0
 80028b8:	0801164c 	.word	0x0801164c
 80028bc:	08002c51 	.word	0x08002c51
 80028c0:	200006a4 	.word	0x200006a4
 80028c4:	08011670 	.word	0x08011670
 80028c8:	08002d19 	.word	0x08002d19
 80028cc:	200006a8 	.word	0x200006a8
 80028d0:	08011694 	.word	0x08011694
 80028d4:	08002f61 	.word	0x08002f61
 80028d8:	200006ac 	.word	0x200006ac
 80028dc:	080116b8 	.word	0x080116b8
 80028e0:	08002f87 	.word	0x08002f87
 80028e4:	200006b0 	.word	0x200006b0
 80028e8:	080116dc 	.word	0x080116dc
 80028ec:	08002fa5 	.word	0x08002fa5
 80028f0:	200006b4 	.word	0x200006b4
 80028f4:	08011700 	.word	0x08011700
 80028f8:	08003059 	.word	0x08003059
 80028fc:	200006b8 	.word	0x200006b8

08002900 <StartTaskRTC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTaskRTC */
void StartTaskRTC(void *argument)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b09e      	sub	sp, #120	; 0x78
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]





	 	 _AlarmON.AlarmTime.Hours = 8 ;
 8002908:	2308      	movs	r3, #8
 800290a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	 	 _AlarmON.AlarmTime.Minutes = 0 ;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	 	_AlarmON.AlarmTime.Seconds = 0 ;
 8002914:	2300      	movs	r3, #0
 8002916:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36


		 _AlarmOFF.AlarmTime.Hours = 8 ;
 800291a:	2308      	movs	r3, #8
 800291c:	733b      	strb	r3, [r7, #12]
		 _AlarmOFF.AlarmTime.Minutes = 1 ;
 800291e:	2301      	movs	r3, #1
 8002920:	737b      	strb	r3, [r7, #13]
		_AlarmOFF.AlarmTime.Seconds = 0 ;
 8002922:	2300      	movs	r3, #0
 8002924:	73bb      	strb	r3, [r7, #14]




	 	HAL_RTC_Init(&hrtc);
 8002926:	4881      	ldr	r0, [pc, #516]	; (8002b2c <StartTaskRTC+0x22c>)
 8002928:	f005 fc56 	bl	80081d8 <HAL_RTC_Init>
		HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 800292c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002930:	2200      	movs	r2, #0
 8002932:	4619      	mov	r1, r3
 8002934:	487d      	ldr	r0, [pc, #500]	; (8002b2c <StartTaskRTC+0x22c>)
 8002936:	f005 fe41 	bl	80085bc <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 800293a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800293e:	2200      	movs	r2, #0
 8002940:	4619      	mov	r1, r3
 8002942:	487a      	ldr	r0, [pc, #488]	; (8002b2c <StartTaskRTC+0x22c>)
 8002944:	f005 fd58 	bl	80083f8 <HAL_RTC_GetTime>

		HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 8002948:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800294c:	2200      	movs	r2, #0
 800294e:	4619      	mov	r1, r3
 8002950:	4876      	ldr	r0, [pc, #472]	; (8002b2c <StartTaskRTC+0x22c>)
 8002952:	f005 fe82 	bl	800865a <HAL_RTC_SetAlarm>
		HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	2200      	movs	r2, #0
 800295c:	4619      	mov	r1, r3
 800295e:	4873      	ldr	r0, [pc, #460]	; (8002b2c <StartTaskRTC+0x22c>)
 8002960:	f005 fe7b 	bl	800865a <HAL_RTC_SetAlarm>
	//    _RTCTime.Minutes =0x0;
	//	_RTCTime.Seconds =0x0;
	// 	HAL_RTC_SetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
	// 	HAL_RTC_SetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);

		osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 8002964:	4b72      	ldr	r3, [pc, #456]	; (8002b30 <StartTaskRTC+0x230>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
 800296c:	2200      	movs	r2, #0
 800296e:	4971      	ldr	r1, [pc, #452]	; (8002b34 <StartTaskRTC+0x234>)
 8002970:	f008 f9da 	bl	800ad28 <osMessageQueuePut>
		osMessageQueuePut(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 8002974:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <StartTaskRTC+0x238>)
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	f04f 33ff 	mov.w	r3, #4294967295
 800297c:	2200      	movs	r2, #0
 800297e:	496f      	ldr	r1, [pc, #444]	; (8002b3c <StartTaskRTC+0x23c>)
 8002980:	f008 f9d2 	bl	800ad28 <osMessageQueuePut>
	 	osTimerStart(TimerRTCHandle, 100);
 8002984:	4b6e      	ldr	r3, [pc, #440]	; (8002b40 <StartTaskRTC+0x240>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2164      	movs	r1, #100	; 0x64
 800298a:	4618      	mov	r0, r3
 800298c:	f007 fefc 	bl	800a788 <osTimerStart>
	 	uint32_t tick4 = osKernelGetTickCount();
 8002990:	f007 fc5e 	bl	800a250 <osKernelGetTickCount>
 8002994:	6778      	str	r0, [r7, #116]	; 0x74
  for(;;)
  {
	  //	  osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, 10);
	  //	  osMessageQueuePut(QueueAlarmHandle, &_AlarmPeriod, 0, 10);

	  	  HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 8002996:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800299a:	2200      	movs	r2, #0
 800299c:	4619      	mov	r1, r3
 800299e:	4863      	ldr	r0, [pc, #396]	; (8002b2c <StartTaskRTC+0x22c>)
 80029a0:	f005 fe0c 	bl	80085bc <HAL_RTC_GetDate>
	  	  HAL_RTC_GetTime(&hrtc, &_RTCTime, RTC_FORMAT_BIN);
 80029a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80029a8:	2200      	movs	r2, #0
 80029aa:	4619      	mov	r1, r3
 80029ac:	485f      	ldr	r0, [pc, #380]	; (8002b2c <StartTaskRTC+0x22c>)
 80029ae:	f005 fd23 	bl	80083f8 <HAL_RTC_GetTime>

	  	if (osOK == osSemaphoreAcquire(BinarySemCounterHandle, 0))
 80029b2:	4b64      	ldr	r3, [pc, #400]	; (8002b44 <StartTaskRTC+0x244>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f008 f8ab 	bl	800ab14 <osSemaphoreAcquire>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <StartTaskRTC+0xdc>
	  	{
	  		osMessageQueueGet(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 80029c4:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <StartTaskRTC+0x238>)
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
 80029cc:	2200      	movs	r2, #0
 80029ce:	495b      	ldr	r1, [pc, #364]	; (8002b3c <StartTaskRTC+0x23c>)
 80029d0:	f008 fa0a 	bl	800ade8 <osMessageQueueGet>
	  		_AlarmOFF.AlarmTime.Minutes = _PumpDispensing;
 80029d4:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <StartTaskRTC+0x23c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	737b      	strb	r3, [r7, #13]
 80029da:	e010      	b.n	80029fe <StartTaskRTC+0xfe>

	  	}
	  	else if (osOK == osSemaphoreAcquire(BinarySemSetAlarmHandle, 0))
 80029dc:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <StartTaskRTC+0x248>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2100      	movs	r1, #0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f008 f896 	bl	800ab14 <osSemaphoreAcquire>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d107      	bne.n	80029fe <StartTaskRTC+0xfe>
	  	{
	  		osMessageQueueGet(QueueCounterAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 80029ee:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <StartTaskRTC+0x230>)
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	2200      	movs	r2, #0
 80029f8:	494e      	ldr	r1, [pc, #312]	; (8002b34 <StartTaskRTC+0x234>)
 80029fa:	f008 f9f5 	bl	800ade8 <osMessageQueueGet>
	  //			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
	  //		}



	  	   if (_AlarmON.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmON.AlarmTime.Minutes ==  _RTCTime.Minutes )
 80029fe:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002a02:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d137      	bne.n	8002a7a <StartTaskRTC+0x17a>
 8002a0a:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002a0e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d131      	bne.n	8002a7a <StartTaskRTC+0x17a>
	  	  	  {
	  		  osMutexAcquire(MutexAlarmHandle, osWaitForever);
 8002a16:	4b4d      	ldr	r3, [pc, #308]	; (8002b4c <StartTaskRTC+0x24c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f007 ff66 	bl	800a8f0 <osMutexAcquire>
	  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	2120      	movs	r1, #32
 8002a28:	4849      	ldr	r0, [pc, #292]	; (8002b50 <StartTaskRTC+0x250>)
 8002a2a:	f003 f9cd 	bl	8005dc8 <HAL_GPIO_WritePin>
	  			  osThreadFlagsSet(TaskPumpONHandle, 0x00000001U);
 8002a2e:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <StartTaskRTC+0x254>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f007 fcdb 	bl	800a3f0 <osThreadFlagsSet>
	  			  _AlarmON.AlarmTime.Hours = _AlarmON.AlarmTime.Hours + _AlarmPeriod;
 8002a3a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <StartTaskRTC+0x234>)
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	  			  if(_AlarmON.AlarmTime.Hours >= 24 || _AlarmON.AlarmTime.Hours <= 8)
 8002a4a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a4e:	2b17      	cmp	r3, #23
 8002a50:	d803      	bhi.n	8002a5a <StartTaskRTC+0x15a>
 8002a52:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d802      	bhi.n	8002a60 <StartTaskRTC+0x160>
	  				  {
	  					  _AlarmON.AlarmTime.Hours = 8;
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	  				  }
	  			  HAL_RTC_SetAlarm(&hrtc, &_AlarmON, RTC_FORMAT_BIN);
 8002a60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a64:	2200      	movs	r2, #0
 8002a66:	4619      	mov	r1, r3
 8002a68:	4830      	ldr	r0, [pc, #192]	; (8002b2c <StartTaskRTC+0x22c>)
 8002a6a:	f005 fdf6 	bl	800865a <HAL_RTC_SetAlarm>
	  			  osMutexRelease(MutexAlarmHandle);
 8002a6e:	4b37      	ldr	r3, [pc, #220]	; (8002b4c <StartTaskRTC+0x24c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f007 ff87 	bl	800a986 <osMutexRelease>
 8002a78:	e035      	b.n	8002ae6 <StartTaskRTC+0x1e6>
	  	  	  }
	  	  else if(_AlarmOFF.AlarmTime.Hours ==  _RTCTime.Hours && _AlarmOFF.AlarmTime.Minutes ==  _RTCTime.Minutes )
 8002a7a:	7b3a      	ldrb	r2, [r7, #12]
 8002a7c:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d130      	bne.n	8002ae6 <StartTaskRTC+0x1e6>
 8002a84:	7b7a      	ldrb	r2, [r7, #13]
 8002a86:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d12b      	bne.n	8002ae6 <StartTaskRTC+0x1e6>
	  	  	  {
	  		  	  osMutexAcquire(MutexAlarmHandle, osWaitForever);
 8002a8e:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <StartTaskRTC+0x24c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f04f 31ff 	mov.w	r1, #4294967295
 8002a96:	4618      	mov	r0, r3
 8002a98:	f007 ff2a 	bl	800a8f0 <osMutexAcquire>
	  			  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2120      	movs	r1, #32
 8002aa0:	482b      	ldr	r0, [pc, #172]	; (8002b50 <StartTaskRTC+0x250>)
 8002aa2:	f003 f991 	bl	8005dc8 <HAL_GPIO_WritePin>
	  			  osThreadFlagsSet(TaskPumpOFFHandle, 0x00000010U);
 8002aa6:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <StartTaskRTC+0x258>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2110      	movs	r1, #16
 8002aac:	4618      	mov	r0, r3
 8002aae:	f007 fc9f 	bl	800a3f0 <osThreadFlagsSet>

	  			  _AlarmOFF.AlarmTime.Hours = _AlarmOFF.AlarmTime.Hours + _AlarmPeriod;
 8002ab2:	7b3a      	ldrb	r2, [r7, #12]
 8002ab4:	4b1f      	ldr	r3, [pc, #124]	; (8002b34 <StartTaskRTC+0x234>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	4413      	add	r3, r2
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	733b      	strb	r3, [r7, #12]

	  			if(_AlarmOFF.AlarmTime.Hours >= 24 || _AlarmOFF.AlarmTime.Hours <= 8)
 8002abe:	7b3b      	ldrb	r3, [r7, #12]
 8002ac0:	2b17      	cmp	r3, #23
 8002ac2:	d802      	bhi.n	8002aca <StartTaskRTC+0x1ca>
 8002ac4:	7b3b      	ldrb	r3, [r7, #12]
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d801      	bhi.n	8002ace <StartTaskRTC+0x1ce>
	  			  	 {
	  			  		  _AlarmOFF.AlarmTime.Hours = 8;
 8002aca:	2308      	movs	r3, #8
 8002acc:	733b      	strb	r3, [r7, #12]
	  			  	 }

	  			  HAL_RTC_SetAlarm(&hrtc, &_AlarmOFF, RTC_FORMAT_BIN);
 8002ace:	f107 030c 	add.w	r3, r7, #12
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4815      	ldr	r0, [pc, #84]	; (8002b2c <StartTaskRTC+0x22c>)
 8002ad8:	f005 fdbf 	bl	800865a <HAL_RTC_SetAlarm>
	  			  osMutexRelease(MutexAlarmHandle);
 8002adc:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <StartTaskRTC+0x24c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f007 ff50 	bl	800a986 <osMutexRelease>
	  //	  {
	  //
	  //
	  //		  CompareSeconds = RTCTime.Seconds;
	  //	  }
	  	  if (osOK == osSemaphoreAcquire(BinarySemRTCHandle, 0)) {
 8002ae6:	4b1d      	ldr	r3, [pc, #116]	; (8002b5c <StartTaskRTC+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f008 f811 	bl	800ab14 <osSemaphoreAcquire>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d108      	bne.n	8002b0a <StartTaskRTC+0x20a>
	  //	  	  			osMessageQueuePut(QueueRTCDataHandle, &_RTCDate, 0, osWaitForever);
	  	  	  			osMessageQueuePut(QueueRTCTimeHandle, &_RTCTime, 0, osWaitForever);
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <StartTaskRTC+0x260>)
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8002b00:	f04f 33ff 	mov.w	r3, #4294967295
 8002b04:	2200      	movs	r2, #0
 8002b06:	f008 f90f 	bl	800ad28 <osMessageQueuePut>
	  	  	  		}

	  	  tick4 += ((70 * osKernelGetTickFreq()) / 1000);
 8002b0a:	f007 fbb6 	bl	800a27a <osKernelGetTickFreq>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2246      	movs	r2, #70	; 0x46
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <StartTaskRTC+0x264>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b20:	4413      	add	r3, r2
 8002b22:	677b      	str	r3, [r7, #116]	; 0x74
	  	  osDelayUntil(tick4);
 8002b24:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002b26:	f007 fd70 	bl	800a60a <osDelayUntil>
	  	  HAL_RTC_GetDate(&hrtc, &_RTCDate, RTC_FORMAT_BIN);
 8002b2a:	e734      	b.n	8002996 <StartTaskRTC+0x96>
 8002b2c:	2000075c 	.word	0x2000075c
 8002b30:	200006d0 	.word	0x200006d0
 8002b34:	20000001 	.word	0x20000001
 8002b38:	200006cc 	.word	0x200006cc
 8002b3c:	20000002 	.word	0x20000002
 8002b40:	200006dc 	.word	0x200006dc
 8002b44:	20000700 	.word	0x20000700
 8002b48:	20000704 	.word	0x20000704
 8002b4c:	200006ec 	.word	0x200006ec
 8002b50:	40020000 	.word	0x40020000
 8002b54:	200006ac 	.word	0x200006ac
 8002b58:	200006b0 	.word	0x200006b0
 8002b5c:	200006fc 	.word	0x200006fc
 8002b60:	200006c8 	.word	0x200006c8
 8002b64:	10624dd3 	.word	0x10624dd3

08002b68 <StartTaskBme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBme280 */
void StartTaskBme280(void *argument)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBme280 */
	BmeData_t _BmeData;
		uint32_t tick3;
		osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002b70:	4b30      	ldr	r3, [pc, #192]	; (8002c34 <StartTaskBme280+0xcc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f007 feb9 	bl	800a8f0 <osMutexAcquire>
		BME280_Init(&hi2c1, BME280_TEMPERATURE_16BIT, BME280_PRESSURE_ULTRALOWPOWER,
 8002b7e:	2303      	movs	r3, #3
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	2303      	movs	r3, #3
 8002b84:	2201      	movs	r2, #1
 8002b86:	2101      	movs	r1, #1
 8002b88:	482b      	ldr	r0, [pc, #172]	; (8002c38 <StartTaskBme280+0xd0>)
 8002b8a:	f7fe ff47 	bl	8001a1c <BME280_Init>
		BME280_HUMINIDITY_STANDARD, BME280_NORMALMODE);
		BME280_SetConfig(BME280_STANDBY_MS_10, BME280_FILTER_OFF);
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2006      	movs	r0, #6
 8002b92:	f7fe ff23 	bl	80019dc <BME280_SetConfig>
		osMutexRelease(MutexI2CHandle);
 8002b96:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <StartTaskBme280+0xcc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f007 fef3 	bl	800a986 <osMutexRelease>
		osTimerStart(TimerBmeDataHandle, 100);
 8002ba0:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <StartTaskBme280+0xd4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2164      	movs	r1, #100	; 0x64
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f007 fdee 	bl	800a788 <osTimerStart>

		tick3 = osKernelGetTickCount();
 8002bac:	f007 fb50 	bl	800a250 <osKernelGetTickCount>
 8002bb0:	6178      	str	r0, [r7, #20]
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <StartTaskBme280+0xcc>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f007 fe98 	bl	800a8f0 <osMutexAcquire>
	  	  BME280_ReadTemperatureAndPressureAndHuminidity(&_BmeData.Temperature,
 8002bc0:	f107 0208 	add.w	r2, r7, #8
 8002bc4:	f107 0308 	add.w	r3, r7, #8
 8002bc8:	f103 0108 	add.w	r1, r3, #8
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff f90c 	bl	8001df0 <BME280_ReadTemperatureAndPressureAndHuminidity>
	  	  				&_BmeData.Pressure, &_BmeData.Humidity);
	  	  osMutexRelease(MutexI2CHandle);
 8002bd8:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <StartTaskBme280+0xcc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f007 fed2 	bl	800a986 <osMutexRelease>

	  	  if (osOK == osSemaphoreAcquire(BinarySemBme280Handle, 0)) {
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <StartTaskBme280+0xd8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f007 ff93 	bl	800ab14 <osSemaphoreAcquire>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d108      	bne.n	8002c06 <StartTaskBme280+0x9e>
	  	  			osMessageQueuePut(QueueBmeHandle, &_BmeData, 0, osWaitForever);
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <StartTaskBme280+0xdc>)
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	f107 0108 	add.w	r1, r7, #8
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8002c00:	2200      	movs	r2, #0
 8002c02:	f008 f891 	bl	800ad28 <osMessageQueuePut>
	  	  		}
	  		printf("TASK BME280 \n\r ");
 8002c06:	4810      	ldr	r0, [pc, #64]	; (8002c48 <StartTaskBme280+0xe0>)
 8002c08:	f002 f8d8 	bl	8004dbc <printf_>
	  //	  printf("Temperature: %.2f, Humidity: %.2f z \n\r", _BmeData.Temperature, _BmeData.Humidity);
	  //////    osDelay(100);
	  		tick3 += (75 * osKernelGetTickFreq()) / 1000;
 8002c0c:	f007 fb35 	bl	800a27a <osKernelGetTickFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	011a      	lsls	r2, r3, #4
 8002c1a:	1ad3      	subs	r3, r2, r3
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <StartTaskBme280+0xe4>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	4413      	add	r3, r2
 8002c28:	617b      	str	r3, [r7, #20]
	  		osDelayUntil(tick3);
 8002c2a:	6978      	ldr	r0, [r7, #20]
 8002c2c:	f007 fced 	bl	800a60a <osDelayUntil>
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002c30:	e7bf      	b.n	8002bb2 <StartTaskBme280+0x4a>
 8002c32:	bf00      	nop
 8002c34:	200006e4 	.word	0x200006e4
 8002c38:	20000708 	.word	0x20000708
 8002c3c:	200006d4 	.word	0x200006d4
 8002c40:	200006f4 	.word	0x200006f4
 8002c44:	200006bc 	.word	0x200006bc
 8002c48:	0801134c 	.word	0x0801134c
 8002c4c:	10624dd3 	.word	0x10624dd3

08002c50 <StartTaskBH1750>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBH1750 */
void StartTaskBH1750(void *argument)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	uint32_t tick4;
		BHData_t _BHData;

		//	float BH1750_lux;

		osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002c58:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <StartTaskBH1750+0xac>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c60:	4618      	mov	r0, r3
 8002c62:	f007 fe45 	bl	800a8f0 <osMutexAcquire>
		BH1750_Init(&hi2c1);
 8002c66:	4826      	ldr	r0, [pc, #152]	; (8002d00 <StartTaskBH1750+0xb0>)
 8002c68:	f7fe fcfc 	bl	8001664 <BH1750_Init>
		BH1750_SetMode(CONTINUOUS_HIGH_RES_MODE_2);
 8002c6c:	2011      	movs	r0, #17
 8002c6e:	f7fe fd2f 	bl	80016d0 <BH1750_SetMode>
		osMutexRelease(MutexI2CHandle);
 8002c72:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <StartTaskBH1750+0xac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f007 fe85 	bl	800a986 <osMutexRelease>

		osTimerStart(TimerBh1750DataHandle, 100);
 8002c7c:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <StartTaskBH1750+0xb4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2164      	movs	r1, #100	; 0x64
 8002c82:	4618      	mov	r0, r3
 8002c84:	f007 fd80 	bl	800a788 <osTimerStart>
		tick4 = osKernelGetTickCount();
 8002c88:	f007 fae2 	bl	800a250 <osKernelGetTickCount>
 8002c8c:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	; (8002cfc <StartTaskBH1750+0xac>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f04f 31ff 	mov.w	r1, #4294967295
 8002c96:	4618      	mov	r0, r3
 8002c98:	f007 fe2a 	bl	800a8f0 <osMutexAcquire>

	 	  		BH1750_ReadLight(&_BHData.LightIntensity);
 8002c9c:	f107 0308 	add.w	r3, r7, #8
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe fd95 	bl	80017d0 <BH1750_ReadLight>
	 	  //	  	  printf("Light: %.2f \n\r", _BhData.LightIntensity);
	 	  		osMutexRelease(MutexI2CHandle);
 8002ca6:	4b15      	ldr	r3, [pc, #84]	; (8002cfc <StartTaskBH1750+0xac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f007 fe6b 	bl	800a986 <osMutexRelease>

	 	  		if (osOK == osSemaphoreAcquire(BinarySemBH1750Handle, 0)) {
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <StartTaskBH1750+0xb8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f007 ff2c 	bl	800ab14 <osSemaphoreAcquire>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d108      	bne.n	8002cd4 <StartTaskBH1750+0x84>
	 	  			osMessageQueuePut(QueueBh1750Handle, &_BHData, 0, osWaitForever);
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <StartTaskBH1750+0xbc>)
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	f107 0108 	add.w	r1, r7, #8
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f008 f82a 	bl	800ad28 <osMessageQueuePut>
	 	  //	  	 	  if(BH1750_OK == BH1750_ReadLight(&BH1750_lux))
	 	  //	  	 	  	  {
	 	  //	  	 	  		  size = sprintf(buffer, "BH1750 Lux: %.2f\n\r", BH1750_lux);
	 	  //	  	 	  	  	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, size, 100);
	 	  //	  	 	  	  }
	 	  		printf("TASK BH1750 \n\r ");
 8002cd4:	480e      	ldr	r0, [pc, #56]	; (8002d10 <StartTaskBH1750+0xc0>)
 8002cd6:	f002 f871 	bl	8004dbc <printf_>
	 	  		tick4 += ((65 * osKernelGetTickFreq()) / 1000);
 8002cda:	f007 face 	bl	800a27a <osKernelGetTickFreq>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	019b      	lsls	r3, r3, #6
 8002ce4:	4413      	add	r3, r2
 8002ce6:	4a0b      	ldr	r2, [pc, #44]	; (8002d14 <StartTaskBH1750+0xc4>)
 8002ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cec:	099b      	lsrs	r3, r3, #6
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]
	 	  		osDelayUntil(tick4);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f007 fc88 	bl	800a60a <osDelayUntil>
	  osMutexAcquire(MutexI2CHandle, osWaitForever);
 8002cfa:	e7c8      	b.n	8002c8e <StartTaskBH1750+0x3e>
 8002cfc:	200006e4 	.word	0x200006e4
 8002d00:	20000708 	.word	0x20000708
 8002d04:	200006d8 	.word	0x200006d8
 8002d08:	200006f8 	.word	0x200006f8
 8002d0c:	200006c0 	.word	0x200006c0
 8002d10:	0801135c 	.word	0x0801135c
 8002d14:	10624dd3 	.word	0x10624dd3

08002d18 <StartTaskSSD1306>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSSD1306 */
void StartTaskSSD1306(void *argument)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0c0      	sub	sp, #256	; 0x100
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	6078      	str	r0, [r7, #4]


	BmeData_t _BmeData;
	BHData_t _BHData;
	RTC_TimeTypeDef _RTCTime;
	uint8_t _AlarmPeriod = 1;
 8002d20:	2301      	movs	r3, #1
 8002d22:	73fb      	strb	r3, [r7, #15]

	uint8_t _PumpDispensing = 1;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73bb      	strb	r3, [r7, #14]


	uint32_t tick2;


	osMutexAcquire(MutexI2C2Handle, osWaitForever);
 8002d28:	4b7b      	ldr	r3, [pc, #492]	; (8002f18 <StartTaskSSD1306+0x200>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	4618      	mov	r0, r3
 8002d32:	f007 fddd 	bl	800a8f0 <osMutexAcquire>
	SSD1306_Init(&hi2c1);
 8002d36:	4879      	ldr	r0, [pc, #484]	; (8002f1c <StartTaskSSD1306+0x204>)
 8002d38:	f7fe fc3c 	bl	80015b4 <SSD1306_Init>
	osMutexRelease(MutexI2C2Handle);
 8002d3c:	4b76      	ldr	r3, [pc, #472]	; (8002f18 <StartTaskSSD1306+0x200>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f007 fe20 	bl	800a986 <osMutexRelease>

	GFX_SetFont(font_8x5);
 8002d46:	4876      	ldr	r0, [pc, #472]	; (8002f20 <StartTaskSSD1306+0x208>)
 8002d48:	f7fe f924 	bl	8000f94 <GFX_SetFont>
	SSD1306_Clear(BLACK);
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fe fbd3 	bl	80014f8 <SSD1306_Clear>
	SSD1306_Display();
 8002d52:	f7fe fbef 	bl	8001534 <SSD1306_Display>

	tick2 = osKernelGetTickCount();
 8002d56:	f007 fa7b 	bl	800a250 <osKernelGetTickCount>
 8002d5a:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  /* Infinite loop */
  for(;;)
  {
	  	  SSD1306_Clear(BLACK);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fe fbca 	bl	80014f8 <SSD1306_Clear>
	  	  osMessageQueueGet(QueueBmeHandle, &_BmeData, 0, osWaitForever);
 8002d64:	4b6f      	ldr	r3, [pc, #444]	; (8002f24 <StartTaskSSD1306+0x20c>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	2200      	movs	r2, #0
 8002d72:	f008 f839 	bl	800ade8 <osMessageQueueGet>
	  	  osMessageQueueGet(QueueBh1750Handle, &_BHData, 0, osWaitForever);
 8002d76:	4b6c      	ldr	r3, [pc, #432]	; (8002f28 <StartTaskSSD1306+0x210>)
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	2200      	movs	r2, #0
 8002d84:	f008 f830 	bl	800ade8 <osMessageQueueGet>
	  //	  osMessageQueueGet(QueueRTCDataHandle, &_RTCDate, 0,osWaitForever);
	  	  osMessageQueueGet(QueueRTCTimeHandle, &_RTCTime, 0, osWaitForever);
 8002d88:	4b68      	ldr	r3, [pc, #416]	; (8002f2c <StartTaskSSD1306+0x214>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	f107 0110 	add.w	r1, r7, #16
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
 8002d94:	2200      	movs	r2, #0
 8002d96:	f008 f827 	bl	800ade8 <osMessageQueueGet>



	  	  if(osOK== osMessageQueueGet(QueueCounterPumpHandle, &_PumpDispensing, 0, 50))
 8002d9a:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <StartTaskSSD1306+0x218>)
 8002d9c:	6818      	ldr	r0, [r3, #0]
 8002d9e:	f107 010e 	add.w	r1, r7, #14
 8002da2:	2332      	movs	r3, #50	; 0x32
 8002da4:	2200      	movs	r2, #0
 8002da6:	f008 f81f 	bl	800ade8 <osMessageQueueGet>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10e      	bne.n	8002dce <StartTaskSSD1306+0xb6>
	  	  {

	  		  osMessageQueuePut(QueueCounterPumpHandle, &_PumpDispensing, 0, osWaitForever);
 8002db0:	4b5f      	ldr	r3, [pc, #380]	; (8002f30 <StartTaskSSD1306+0x218>)
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	f107 010e 	add.w	r1, r7, #14
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f007 ffb3 	bl	800ad28 <osMessageQueuePut>
	  		  osSemaphoreRelease(BinarySemCounterHandle);
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <StartTaskSSD1306+0x21c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f007 fef6 	bl	800abb8 <osSemaphoreRelease>
 8002dcc:	e018      	b.n	8002e00 <StartTaskSSD1306+0xe8>
	  	  }

	  	  else 	if(osOK== osMessageQueueGet(QueueCounterAlarmHandle, &_AlarmPeriod, 0, 50))
 8002dce:	4b5a      	ldr	r3, [pc, #360]	; (8002f38 <StartTaskSSD1306+0x220>)
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	f107 010f 	add.w	r1, r7, #15
 8002dd6:	2332      	movs	r3, #50	; 0x32
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f008 f805 	bl	800ade8 <osMessageQueueGet>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <StartTaskSSD1306+0xe8>
	  		  	  {

	  		  		 osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod, 0, osWaitForever);
 8002de4:	4b54      	ldr	r3, [pc, #336]	; (8002f38 <StartTaskSSD1306+0x220>)
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	f107 010f 	add.w	r1, r7, #15
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
 8002df0:	2200      	movs	r2, #0
 8002df2:	f007 ff99 	bl	800ad28 <osMessageQueuePut>
	  		  		osSemaphoreRelease(BinarySemSetAlarmHandle);
 8002df6:	4b51      	ldr	r3, [pc, #324]	; (8002f3c <StartTaskSSD1306+0x224>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f007 fedc 	bl	800abb8 <osSemaphoreRelease>


//	  	   osMessageQueuePut(QueueCounterPumpHandle, &_PumpOperatingTime, 0, osWaitForever);


	  	  sprintf(MessageTemp, "Temperature: %.2f ", _BmeData.Temperature);
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fba8 	bl	8000558 <__aeabi_f2d>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8002e10:	494b      	ldr	r1, [pc, #300]	; (8002f40 <StartTaskSSD1306+0x228>)
 8002e12:	f001 ffef 	bl	8004df4 <sprintf_>
	  	  sprintf(MessageHum, "Humidity: %.2f", _BmeData.Humidity);
 8002e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd fb9d 	bl	8000558 <__aeabi_f2d>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	460b      	mov	r3, r1
 8002e22:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8002e26:	4947      	ldr	r1, [pc, #284]	; (8002f44 <StartTaskSSD1306+0x22c>)
 8002e28:	f001 ffe4 	bl	8004df4 <sprintf_>
	  	  sprintf(MessageInten, "Lx: %.2f,", _BHData.LightIntensity);
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fb92 	bl	8000558 <__aeabi_f2d>
 8002e34:	4602      	mov	r2, r0
 8002e36:	460b      	mov	r3, r1
 8002e38:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8002e3c:	4942      	ldr	r1, [pc, #264]	; (8002f48 <StartTaskSSD1306+0x230>)
 8002e3e:	f001 ffd9 	bl	8004df4 <sprintf_>
	  //	  sprintf(MessageData, "Data: %02d.%02d.20%02d  Time: %02d:%02d:%02d:%02d",_RTCDate.Date,_RTCDate.Month,_RTCDate.Year,_RTCTime.Hours,_RTCTime.Minutes,_RTCTime.Seconds);
	  	  sprintf(MessageTime, "Time: %02d:%02d:%02d",_RTCTime.Hours,_RTCTime.Minutes,_RTCTime.Seconds);
 8002e42:	7c3b      	ldrb	r3, [r7, #16]
 8002e44:	461a      	mov	r2, r3
 8002e46:	7c7b      	ldrb	r3, [r7, #17]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	7cbb      	ldrb	r3, [r7, #18]
 8002e4c:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	460b      	mov	r3, r1
 8002e54:	493d      	ldr	r1, [pc, #244]	; (8002f4c <StartTaskSSD1306+0x234>)
 8002e56:	f001 ffcd 	bl	8004df4 <sprintf_>
	  	  sprintf(MessageTimePump, "Pump OP Time: %02d Min",_PumpDispensing);
 8002e5a:	7bbb      	ldrb	r3, [r7, #14]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e62:	493b      	ldr	r1, [pc, #236]	; (8002f50 <StartTaskSSD1306+0x238>)
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 ffc5 	bl	8004df4 <sprintf_>
	  	  sprintf(MessageFreqAlarm, "Alarm Period: %02d H", _AlarmPeriod);
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e72:	4938      	ldr	r1, [pc, #224]	; (8002f54 <StartTaskSSD1306+0x23c>)
 8002e74:	4618      	mov	r0, r3
 8002e76:	f001 ffbd 	bl	8004df4 <sprintf_>

	  	  GFX_DrawString(0, 0, MessageTime, WHITE, 0);
 8002e7a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8002e7e:	2300      	movs	r3, #0
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2301      	movs	r3, #1
 8002e84:	2100      	movs	r1, #0
 8002e86:	2000      	movs	r0, #0
 8002e88:	f7fe f94e 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 10, MessageTemp, WHITE, 0);
 8002e8c:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8002e90:	2300      	movs	r3, #0
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	2301      	movs	r3, #1
 8002e96:	210a      	movs	r1, #10
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7fe f945 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 20, MessageHum, WHITE, 0);
 8002e9e:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	2114      	movs	r1, #20
 8002eaa:	2000      	movs	r0, #0
 8002eac:	f7fe f93c 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 30, MessageInten, WHITE, 0);
 8002eb0:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2301      	movs	r3, #1
 8002eba:	211e      	movs	r1, #30
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7fe f933 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 40, MessageTimePump, WHITE, 0);
 8002ec2:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	2301      	movs	r3, #1
 8002ecc:	2128      	movs	r1, #40	; 0x28
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f7fe f92a 	bl	8001128 <GFX_DrawString>
	  	  GFX_DrawString(0, 50, MessageFreqAlarm, WHITE, 0);
 8002ed4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002ed8:	2300      	movs	r3, #0
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2301      	movs	r3, #1
 8002ede:	2132      	movs	r1, #50	; 0x32
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	f7fe f921 	bl	8001128 <GFX_DrawString>

	  	  SSD1306_Display();
 8002ee6:	f7fe fb25 	bl	8001534 <SSD1306_Display>

	  	  printf("TASK OLED \n\r");
 8002eea:	481b      	ldr	r0, [pc, #108]	; (8002f58 <StartTaskSSD1306+0x240>)
 8002eec:	f001 ff66 	bl	8004dbc <printf_>

	  //		printf("TASK OLED I2C MUTEX is released \n\r");
	        tick2 += (200 * osKernelGetTickFreq()) / 1000;
 8002ef0:	f007 f9c3 	bl	800a27a <osKernelGetTickFreq>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	22c8      	movs	r2, #200	; 0xc8
 8002ef8:	fb02 f303 	mul.w	r3, r2, r3
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <StartTaskSSD1306+0x244>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	099b      	lsrs	r3, r3, #6
 8002f04:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8002f08:	4413      	add	r3, r2
 8002f0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	  	  osDelayUntil(tick2);
 8002f0e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8002f12:	f007 fb7a 	bl	800a60a <osDelayUntil>
	  	  SSD1306_Clear(BLACK);
 8002f16:	e722      	b.n	8002d5e <StartTaskSSD1306+0x46>
 8002f18:	200006f0 	.word	0x200006f0
 8002f1c:	20000708 	.word	0x20000708
 8002f20:	08011424 	.word	0x08011424
 8002f24:	200006bc 	.word	0x200006bc
 8002f28:	200006c0 	.word	0x200006c0
 8002f2c:	200006c8 	.word	0x200006c8
 8002f30:	200006cc 	.word	0x200006cc
 8002f34:	20000700 	.word	0x20000700
 8002f38:	200006d0 	.word	0x200006d0
 8002f3c:	20000704 	.word	0x20000704
 8002f40:	0801136c 	.word	0x0801136c
 8002f44:	08011380 	.word	0x08011380
 8002f48:	08011390 	.word	0x08011390
 8002f4c:	0801139c 	.word	0x0801139c
 8002f50:	080113b4 	.word	0x080113b4
 8002f54:	080113cc 	.word	0x080113cc
 8002f58:	080113e4 	.word	0x080113e4
 8002f5c:	10624dd3 	.word	0x10624dd3

08002f60 <StartTaskPumpON>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpON */
void StartTaskPumpON(void *argument)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPumpON */
	drv8835_init();
 8002f68:	f7ff fb5e 	bl	8002628 <drv8835_init>
  /* Infinite loop */
  for(;;)
  {

	  osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8002f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f70:	2100      	movs	r1, #0
 8002f72:	2001      	movs	r0, #1
 8002f74:	f007 fac8 	bl	800a508 <osThreadFlagsWait>

	  drv8835_set_motorA_speed(99);
 8002f78:	2063      	movs	r0, #99	; 0x63
 8002f7a:	f7ff fb39 	bl	80025f0 <drv8835_set_motorA_speed>
	  osThreadFlagsClear(0x00000001U);
 8002f7e:	2001      	movs	r0, #1
 8002f80:	f007 fa84 	bl	800a48c <osThreadFlagsClear>
	  osThreadFlagsWait(0x00000001U, osFlagsWaitAny, osWaitForever);
 8002f84:	e7f2      	b.n	8002f6c <StartTaskPumpON+0xc>

08002f86 <StartTaskPumpOFF>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskPumpOFF */
void StartTaskPumpOFF(void *argument)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskPumpOFF */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(0x00000010U, osFlagsWaitAll, osWaitForever);
 8002f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f92:	2101      	movs	r1, #1
 8002f94:	2010      	movs	r0, #16
 8002f96:	f007 fab7 	bl	800a508 <osThreadFlagsWait>


	  	  drv8835_set_motorA_speed(0);
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	f7ff fb28 	bl	80025f0 <drv8835_set_motorA_speed>
	  osThreadFlagsWait(0x00000010U, osFlagsWaitAll, osWaitForever);
 8002fa0:	e7f5      	b.n	8002f8e <StartTaskPumpOFF+0x8>
	...

08002fa4 <StartTaskCounterPump>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskCounterPump */
void StartTaskCounterPump(void *argument)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskCounterPump */
	static uint8_t _PumpDipensing = 1;
	uint32_t tick = osKernelGetTickCount();
 8002fac:	f007 f950 	bl	800a250 <osKernelGetTickCount>
 8002fb0:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4824      	ldr	r0, [pc, #144]	; (8003048 <StartTaskCounterPump+0xa4>)
 8002fb6:	f002 feef 	bl	8005d98 <HAL_GPIO_ReadPin>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d114      	bne.n	8002fea <StartTaskCounterPump+0x46>
	 	  {
	 	  	  _PumpDipensing= _PumpDipensing + 1;
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <StartTaskCounterPump+0xa8>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <StartTaskCounterPump+0xa8>)
 8002fca:	701a      	strb	r2, [r3, #0]
	 	  		if(_PumpDipensing >=60)
 8002fcc:	4b1f      	ldr	r3, [pc, #124]	; (800304c <StartTaskCounterPump+0xa8>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b3b      	cmp	r3, #59	; 0x3b
 8002fd2:	d902      	bls.n	8002fda <StartTaskCounterPump+0x36>
	 	  		{
	 	  			_PumpDipensing = 1;
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <StartTaskCounterPump+0xa8>)
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	701a      	strb	r2, [r3, #0]
	 	  		}
	 	  		osMessageQueuePut(QueueCounterPumpHandle, &_PumpDipensing , 0, 50);
 8002fda:	4b1d      	ldr	r3, [pc, #116]	; (8003050 <StartTaskCounterPump+0xac>)
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	2332      	movs	r3, #50	; 0x32
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	491a      	ldr	r1, [pc, #104]	; (800304c <StartTaskCounterPump+0xa8>)
 8002fe4:	f007 fea0 	bl	800ad28 <osMessageQueuePut>
 8002fe8:	e01a      	b.n	8003020 <StartTaskCounterPump+0x7c>
	 	  }
	 	  else if(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin)== GPIO_PIN_RESET)
 8002fea:	2102      	movs	r1, #2
 8002fec:	4816      	ldr	r0, [pc, #88]	; (8003048 <StartTaskCounterPump+0xa4>)
 8002fee:	f002 fed3 	bl	8005d98 <HAL_GPIO_ReadPin>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d113      	bne.n	8003020 <StartTaskCounterPump+0x7c>
	 	  {
	 		  _PumpDipensing= _PumpDipensing -1;
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <StartTaskCounterPump+0xa8>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <StartTaskCounterPump+0xa8>)
 8003002:	701a      	strb	r2, [r3, #0]
	 		 	  		if(_PumpDipensing <=0)
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <StartTaskCounterPump+0xa8>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <StartTaskCounterPump+0x6e>
	 		 	  		{
	 		 	  			_PumpDipensing = 59;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <StartTaskCounterPump+0xa8>)
 800300e:	223b      	movs	r2, #59	; 0x3b
 8003010:	701a      	strb	r2, [r3, #0]
	 		 	  		}
	 		   osMessageQueuePut(QueueCounterPumpHandle, &_PumpDipensing , 0, 50);
 8003012:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <StartTaskCounterPump+0xac>)
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	2332      	movs	r3, #50	; 0x32
 8003018:	2200      	movs	r2, #0
 800301a:	490c      	ldr	r1, [pc, #48]	; (800304c <StartTaskCounterPump+0xa8>)
 800301c:	f007 fe84 	bl	800ad28 <osMessageQueuePut>
	 	  }

	 	  	  	tick += (120 * osKernelGetTickFreq()) / 1000;
 8003020:	f007 f92b 	bl	800a27a <osKernelGetTickFreq>
 8003024:	4602      	mov	r2, r0
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	461a      	mov	r2, r3
 8003030:	4b08      	ldr	r3, [pc, #32]	; (8003054 <StartTaskCounterPump+0xb0>)
 8003032:	fba3 2302 	umull	r2, r3, r3, r2
 8003036:	099b      	lsrs	r3, r3, #6
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	60fb      	str	r3, [r7, #12]
	 	  	  	osDelayUntil(tick);
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f007 fae3 	bl	800a60a <osDelayUntil>
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)== GPIO_PIN_RESET)
 8003044:	e7b5      	b.n	8002fb2 <StartTaskCounterPump+0xe>
 8003046:	bf00      	nop
 8003048:	40020800 	.word	0x40020800
 800304c:	20000003 	.word	0x20000003
 8003050:	200006cc 	.word	0x200006cc
 8003054:	10624dd3 	.word	0x10624dd3

08003058 <StartTaskAlarmCounter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAlarmCounter */
void StartTaskAlarmCounter(void *argument)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAlarmCounter */
	static uint8_t _AlarmPeriod = 1;
	uint32_t tick = osKernelGetTickCount();
 8003060:	f007 f8f6 	bl	800a250 <osKernelGetTickCount>
 8003064:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)== GPIO_PIN_RESET)
 8003066:	2101      	movs	r1, #1
 8003068:	4823      	ldr	r0, [pc, #140]	; (80030f8 <StartTaskAlarmCounter+0xa0>)
 800306a:	f002 fe95 	bl	8005d98 <HAL_GPIO_ReadPin>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d114      	bne.n	800309e <StartTaskAlarmCounter+0x46>
	 	 	  {
	 	 	  	  _AlarmPeriod= _AlarmPeriod + 1;
 8003074:	4b21      	ldr	r3, [pc, #132]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	b2da      	uxtb	r2, r3
 800307c:	4b1f      	ldr	r3, [pc, #124]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 800307e:	701a      	strb	r2, [r3, #0]
	 	 	  		if(_AlarmPeriod >=16)
 8003080:	4b1e      	ldr	r3, [pc, #120]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b0f      	cmp	r3, #15
 8003086:	d902      	bls.n	800308e <StartTaskAlarmCounter+0x36>
	 	 	  		{
	 	 	  			_AlarmPeriod = 1;
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
	 	 	  		}
	 	 	  		osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod , 0, 50);
 800308e:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <StartTaskAlarmCounter+0xa8>)
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	2332      	movs	r3, #50	; 0x32
 8003094:	2200      	movs	r2, #0
 8003096:	4919      	ldr	r1, [pc, #100]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 8003098:	f007 fe46 	bl	800ad28 <osMessageQueuePut>
 800309c:	e01a      	b.n	80030d4 <StartTaskAlarmCounter+0x7c>
	 	 	  }
	 	 	  else if(HAL_GPIO_ReadPin(B4_GPIO_Port, B4_Pin)== GPIO_PIN_RESET)
 800309e:	2108      	movs	r1, #8
 80030a0:	4818      	ldr	r0, [pc, #96]	; (8003104 <StartTaskAlarmCounter+0xac>)
 80030a2:	f002 fe79 	bl	8005d98 <HAL_GPIO_ReadPin>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d113      	bne.n	80030d4 <StartTaskAlarmCounter+0x7c>
	 	 	  {
	 	 		  _AlarmPeriod= _AlarmPeriod - 1;
 80030ac:	4b13      	ldr	r3, [pc, #76]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b11      	ldr	r3, [pc, #68]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 80030b6:	701a      	strb	r2, [r3, #0]
	 	 		 	  		if(_AlarmPeriod <=0)
 80030b8:	4b10      	ldr	r3, [pc, #64]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <StartTaskAlarmCounter+0x6e>
	 	 		 	  		{
	 	 		 	  			_AlarmPeriod = 16;
 80030c0:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 80030c2:	2210      	movs	r2, #16
 80030c4:	701a      	strb	r2, [r3, #0]
	 	 		 	  		}
	 	 		   osMessageQueuePut(QueueCounterAlarmHandle, &_AlarmPeriod , 0, 50);
 80030c6:	4b0e      	ldr	r3, [pc, #56]	; (8003100 <StartTaskAlarmCounter+0xa8>)
 80030c8:	6818      	ldr	r0, [r3, #0]
 80030ca:	2332      	movs	r3, #50	; 0x32
 80030cc:	2200      	movs	r2, #0
 80030ce:	490b      	ldr	r1, [pc, #44]	; (80030fc <StartTaskAlarmCounter+0xa4>)
 80030d0:	f007 fe2a 	bl	800ad28 <osMessageQueuePut>
	 	 	  }

	 	 	  	  	tick += (100 * osKernelGetTickFreq()) / 1000;
 80030d4:	f007 f8d1 	bl	800a27a <osKernelGetTickFreq>
 80030d8:	4603      	mov	r3, r0
 80030da:	2264      	movs	r2, #100	; 0x64
 80030dc:	fb02 f303 	mul.w	r3, r2, r3
 80030e0:	4a09      	ldr	r2, [pc, #36]	; (8003108 <StartTaskAlarmCounter+0xb0>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
	 	 	  	  	osDelayUntil(tick);
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f007 fa8b 	bl	800a60a <osDelayUntil>
	  if(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin)== GPIO_PIN_RESET)
 80030f4:	e7b7      	b.n	8003066 <StartTaskAlarmCounter+0xe>
 80030f6:	bf00      	nop
 80030f8:	40020400 	.word	0x40020400
 80030fc:	20000004 	.word	0x20000004
 8003100:	200006d0 	.word	0x200006d0
 8003104:	40020800 	.word	0x40020800
 8003108:	10624dd3 	.word	0x10624dd3

0800310c <CallbackTimerBmeData>:
  /* USER CODE END StartTaskAlarmCounter */
}

/* CallbackTimerBmeData function */
void CallbackTimerBmeData(void *argument)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBmeData */
	osSemaphoreRelease(BinarySemBme280Handle);
 8003114:	4b04      	ldr	r3, [pc, #16]	; (8003128 <CallbackTimerBmeData+0x1c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f007 fd4d 	bl	800abb8 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerBmeData */
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	200006f4 	.word	0x200006f4

0800312c <CallbackTimerBh1750Data>:

/* CallbackTimerBh1750Data function */
void CallbackTimerBh1750Data(void *argument)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerBh1750Data */
	osSemaphoreRelease(BinarySemBH1750Handle);
 8003134:	4b04      	ldr	r3, [pc, #16]	; (8003148 <CallbackTimerBh1750Data+0x1c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f007 fd3d 	bl	800abb8 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerBh1750Data */
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200006f8 	.word	0x200006f8

0800314c <CallbackTimerRTC>:

/* CallbackTimerRTC function */
void CallbackTimerRTC(void *argument)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerRTC */
	osSemaphoreRelease(BinarySemRTCHandle);
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <CallbackTimerRTC+0x1c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4618      	mov	r0, r3
 800315a:	f007 fd2d 	bl	800abb8 <osSemaphoreRelease>
  /* USER CODE END CallbackTimerRTC */
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	200006fc 	.word	0x200006fc

0800316c <_putchar>:
//
//	}
//
//}

void _putchar(char character) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	71fb      	strb	r3, [r7, #7]
	// send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 8003176:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <_putchar+0x38>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f04f 31ff 	mov.w	r1, #4294967295
 800317e:	4618      	mov	r0, r3
 8003180:	f007 fbb6 	bl	800a8f0 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8003184:	1df9      	adds	r1, r7, #7
 8003186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800318a:	2201      	movs	r2, #1
 800318c:	4806      	ldr	r0, [pc, #24]	; (80031a8 <_putchar+0x3c>)
 800318e:	f006 fc5c 	bl	8009a4a <HAL_UART_Transmit>

	osMutexRelease(MutexPrintfHandle);
 8003192:	4b04      	ldr	r3, [pc, #16]	; (80031a4 <_putchar+0x38>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f007 fbf5 	bl	800a986 <osMutexRelease>
}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	200006e0 	.word	0x200006e0
 80031a8:	20000810 	.word	0x20000810

080031ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b2:	f107 0314 	add.w	r3, r7, #20
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	609a      	str	r2, [r3, #8]
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	4b3c      	ldr	r3, [pc, #240]	; (80032b8 <MX_GPIO_Init+0x10c>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a3b      	ldr	r2, [pc, #236]	; (80032b8 <MX_GPIO_Init+0x10c>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b39      	ldr	r3, [pc, #228]	; (80032b8 <MX_GPIO_Init+0x10c>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	4b35      	ldr	r3, [pc, #212]	; (80032b8 <MX_GPIO_Init+0x10c>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	4a34      	ldr	r2, [pc, #208]	; (80032b8 <MX_GPIO_Init+0x10c>)
 80031e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031ec:	6313      	str	r3, [r2, #48]	; 0x30
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <MX_GPIO_Init+0x10c>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b2e      	ldr	r3, [pc, #184]	; (80032b8 <MX_GPIO_Init+0x10c>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a2d      	ldr	r2, [pc, #180]	; (80032b8 <MX_GPIO_Init+0x10c>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <MX_GPIO_Init+0x10c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]
 800321a:	4b27      	ldr	r3, [pc, #156]	; (80032b8 <MX_GPIO_Init+0x10c>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a26      	ldr	r2, [pc, #152]	; (80032b8 <MX_GPIO_Init+0x10c>)
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <MX_GPIO_Init+0x10c>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MODE_Pin, GPIO_PIN_RESET);
 8003232:	2200      	movs	r2, #0
 8003234:	21a0      	movs	r1, #160	; 0xa0
 8003236:	4821      	ldr	r0, [pc, #132]	; (80032bc <MX_GPIO_Init+0x110>)
 8003238:	f002 fdc6 	bl	8005dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(APHASE_GPIO_Port, APHASE_Pin, GPIO_PIN_RESET);
 800323c:	2200      	movs	r2, #0
 800323e:	2140      	movs	r1, #64	; 0x40
 8003240:	481f      	ldr	r0, [pc, #124]	; (80032c0 <MX_GPIO_Init+0x114>)
 8003242:	f002 fdc1 	bl	8005dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin|B4_Pin;
 8003246:	230b      	movs	r3, #11
 8003248:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800324a:	2300      	movs	r3, #0
 800324c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800324e:	2301      	movs	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	4619      	mov	r1, r3
 8003258:	481a      	ldr	r0, [pc, #104]	; (80032c4 <MX_GPIO_Init+0x118>)
 800325a:	f002 fc19 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MODE_Pin;
 800325e:	23a0      	movs	r3, #160	; 0xa0
 8003260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003262:	2301      	movs	r3, #1
 8003264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326a:	2300      	movs	r3, #0
 800326c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326e:	f107 0314 	add.w	r3, r7, #20
 8003272:	4619      	mov	r1, r3
 8003274:	4811      	ldr	r0, [pc, #68]	; (80032bc <MX_GPIO_Init+0x110>)
 8003276:	f002 fc0b 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 800327a:	2301      	movs	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003282:	2301      	movs	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	4619      	mov	r1, r3
 800328c:	480c      	ldr	r0, [pc, #48]	; (80032c0 <MX_GPIO_Init+0x114>)
 800328e:	f002 fbff 	bl	8005a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = APHASE_Pin;
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003296:	2301      	movs	r3, #1
 8003298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	2300      	movs	r3, #0
 80032a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(APHASE_GPIO_Port, &GPIO_InitStruct);
 80032a2:	f107 0314 	add.w	r3, r7, #20
 80032a6:	4619      	mov	r1, r3
 80032a8:	4805      	ldr	r0, [pc, #20]	; (80032c0 <MX_GPIO_Init+0x114>)
 80032aa:	f002 fbf1 	bl	8005a90 <HAL_GPIO_Init>

}
 80032ae:	bf00      	nop
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40020000 	.word	0x40020000
 80032c0:	40020400 	.word	0x40020400
 80032c4:	40020800 	.word	0x40020800

080032c8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032cc:	4b12      	ldr	r3, [pc, #72]	; (8003318 <MX_I2C1_Init+0x50>)
 80032ce:	4a13      	ldr	r2, [pc, #76]	; (800331c <MX_I2C1_Init+0x54>)
 80032d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <MX_I2C1_Init+0x50>)
 80032d4:	4a12      	ldr	r2, [pc, #72]	; (8003320 <MX_I2C1_Init+0x58>)
 80032d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <MX_I2C1_Init+0x50>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80032de:	4b0e      	ldr	r3, [pc, #56]	; (8003318 <MX_I2C1_Init+0x50>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <MX_I2C1_Init+0x50>)
 80032e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <MX_I2C1_Init+0x50>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <MX_I2C1_Init+0x50>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032f8:	4b07      	ldr	r3, [pc, #28]	; (8003318 <MX_I2C1_Init+0x50>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <MX_I2C1_Init+0x50>)
 8003300:	2200      	movs	r2, #0
 8003302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003304:	4804      	ldr	r0, [pc, #16]	; (8003318 <MX_I2C1_Init+0x50>)
 8003306:	f002 fd79 	bl	8005dfc <HAL_I2C_Init>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003310:	f000 f8e8 	bl	80034e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003314:	bf00      	nop
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000708 	.word	0x20000708
 800331c:	40005400 	.word	0x40005400
 8003320:	00061a80 	.word	0x00061a80

08003324 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08a      	sub	sp, #40	; 0x28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0314 	add.w	r3, r7, #20
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <HAL_I2C_MspInit+0x84>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d12c      	bne.n	80033a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	4b18      	ldr	r3, [pc, #96]	; (80033ac <HAL_I2C_MspInit+0x88>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a17      	ldr	r2, [pc, #92]	; (80033ac <HAL_I2C_MspInit+0x88>)
 8003350:	f043 0302 	orr.w	r3, r3, #2
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b15      	ldr	r3, [pc, #84]	; (80033ac <HAL_I2C_MspInit+0x88>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	613b      	str	r3, [r7, #16]
 8003360:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003362:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003368:	2312      	movs	r3, #18
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003370:	2303      	movs	r3, #3
 8003372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003374:	2304      	movs	r3, #4
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	480c      	ldr	r0, [pc, #48]	; (80033b0 <HAL_I2C_MspInit+0x8c>)
 8003380:	f002 fb86 	bl	8005a90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_I2C_MspInit+0x88>)
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	4a07      	ldr	r2, [pc, #28]	; (80033ac <HAL_I2C_MspInit+0x88>)
 800338e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003392:	6413      	str	r3, [r2, #64]	; 0x40
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <HAL_I2C_MspInit+0x88>)
 8003396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80033a0:	bf00      	nop
 80033a2:	3728      	adds	r7, #40	; 0x28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40005400 	.word	0x40005400
 80033ac:	40023800 	.word	0x40023800
 80033b0:	40020400 	.word	0x40020400

080033b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033b8:	f002 f8c2 	bl	8005540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033bc:	f000 f814 	bl	80033e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033c0:	f7ff fef4 	bl	80031ac <MX_GPIO_Init>
  MX_DMA_Init();
 80033c4:	f7ff f890 	bl	80024e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80033c8:	f002 f81e 	bl	8005408 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80033cc:	f7ff ff7c 	bl	80032c8 <MX_I2C1_Init>
  MX_RTC_Init();
 80033d0:	f001 fd2c 	bl	8004e2c <MX_RTC_Init>
  MX_TIM3_Init();
 80033d4:	f001 ff46 	bl	8005264 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80033d8:	f006 fef0 	bl	800a1bc <osKernelInitialize>
  MX_FREERTOS_Init();
 80033dc:	f7ff f938 	bl	8002650 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80033e0:	f006 ff10 	bl	800a204 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80033e4:	e7fe      	b.n	80033e4 <main+0x30>
	...

080033e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b094      	sub	sp, #80	; 0x50
 80033ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ee:	f107 0320 	add.w	r3, r7, #32
 80033f2:	2230      	movs	r2, #48	; 0x30
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f00b ff31 	bl	800f25e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <SystemClock_Config+0xd0>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4a28      	ldr	r2, [pc, #160]	; (80034b8 <SystemClock_Config+0xd0>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	; 0x40
 800341c:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <SystemClock_Config+0xd0>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003428:	2300      	movs	r3, #0
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <SystemClock_Config+0xd4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <SystemClock_Config+0xd4>)
 8003432:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <SystemClock_Config+0xd4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003444:	2306      	movs	r3, #6
 8003446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003448:	2301      	movs	r3, #1
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800344c:	2301      	movs	r3, #1
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003450:	2310      	movs	r3, #16
 8003452:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003454:	2302      	movs	r3, #2
 8003456:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003458:	2300      	movs	r3, #0
 800345a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800345c:	2310      	movs	r3, #16
 800345e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003460:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003464:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003466:	2304      	movs	r3, #4
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800346a:	2304      	movs	r3, #4
 800346c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800346e:	f107 0320 	add.w	r3, r7, #32
 8003472:	4618      	mov	r0, r3
 8003474:	f004 f8f6 	bl	8007664 <HAL_RCC_OscConfig>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800347e:	f000 f831 	bl	80034e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003482:	230f      	movs	r3, #15
 8003484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003486:	2302      	movs	r3, #2
 8003488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800348e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003498:	f107 030c 	add.w	r3, r7, #12
 800349c:	2102      	movs	r1, #2
 800349e:	4618      	mov	r0, r3
 80034a0:	f004 fb58 	bl	8007b54 <HAL_RCC_ClockConfig>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80034aa:	f000 f81b 	bl	80034e4 <Error_Handler>
  }
}
 80034ae:	bf00      	nop
 80034b0:	3750      	adds	r7, #80	; 0x50
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000

080034c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d101      	bne.n	80034d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034d2:	f002 f857 	bl	8005584 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40014400 	.word	0x40014400

080034e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034e8:	b672      	cpsid	i
}
 80034ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034ec:	e7fe      	b.n	80034ec <Error_Handler+0x8>

080034ee <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b085      	sub	sp, #20
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d204      	bcs.n	8003510 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	7bfa      	ldrb	r2, [r7, #15]
 800350e:	701a      	strb	r2, [r3, #0]
  }
}
 8003510:	bf00      	nop
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	4603      	mov	r3, r0
 800352a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800352c:	bf00      	nop
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60b9      	str	r1, [r7, #8]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4603      	mov	r3, r0
 8003546:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8003548:	7bfb      	ldrb	r3, [r7, #15]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <_out_char+0x1e>
    _putchar(character);
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	4618      	mov	r0, r3
 8003552:	f7ff fe0b 	bl	800316c <_putchar>
  }
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800355e:	b480      	push	{r7}
 8003560:	b085      	sub	sp, #20
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e002      	b.n	8003574 <_strnlen_s+0x16>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3301      	adds	r3, #1
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <_strnlen_s+0x28>
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	1e5a      	subs	r2, r3, #1
 8003580:	603a      	str	r2, [r7, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f3      	bne.n	800356e <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	1ad3      	subs	r3, r2, r3
}
 800358c:	4618      	mov	r0, r3
 800358e:	3714      	adds	r7, #20
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	2b2f      	cmp	r3, #47	; 0x2f
 80035a6:	d904      	bls.n	80035b2 <_is_digit+0x1a>
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	2b39      	cmp	r3, #57	; 0x39
 80035ac:	d801      	bhi.n	80035b2 <_is_digit+0x1a>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <_is_digit+0x1c>
 80035b2:	2300      	movs	r3, #0
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80035d2:	e00e      	b.n	80035f2 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	1c59      	adds	r1, r3, #1
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6011      	str	r1, [r2, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4403      	add	r3, r0
 80035ee:	3b30      	subs	r3, #48	; 0x30
 80035f0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ffcd 	bl	8003598 <_is_digit>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e7      	bne.n	80035d4 <_atoi+0xe>
  }
  return i;
 8003604:	68fb      	ldr	r3, [r7, #12]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800360e:	b590      	push	{r4, r7, lr}
 8003610:	b087      	sub	sp, #28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8003620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d125      	bne.n	8003676 <_out_rev+0x68>
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d120      	bne.n	8003676 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	e00a      	b.n	8003650 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	1c53      	adds	r3, r2, #1
 800363e:	607b      	str	r3, [r7, #4]
 8003640:	68fc      	ldr	r4, [r7, #12]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	2020      	movs	r0, #32
 8003648:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3301      	adds	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003654:	429a      	cmp	r2, r3
 8003656:	d3f0      	bcc.n	800363a <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8003658:	e00d      	b.n	8003676 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800365a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365c:	3b01      	subs	r3, #1
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003664:	4413      	add	r3, r2
 8003666:	7818      	ldrb	r0, [r3, #0]
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	1c53      	adds	r3, r2, #1
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	68fc      	ldr	r4, [r7, #12]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	47a0      	blx	r4
  while (len) {
 8003676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1ee      	bne.n	800365a <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00e      	beq.n	80036a4 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8003686:	e007      	b.n	8003698 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	1c53      	adds	r3, r2, #1
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	68fc      	ldr	r4, [r7, #12]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	2020      	movs	r0, #32
 8003696:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d8f1      	bhi.n	8003688 <_out_rev+0x7a>
    }
  }

  return idx;
 80036a4:	687b      	ldr	r3, [r7, #4]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd90      	pop	{r4, r7, pc}

080036ae <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b088      	sub	sp, #32
 80036b2:	af04      	add	r7, sp, #16
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
 80036ba:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d136      	bne.n	8003734 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80036c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d018      	beq.n	80036fe <_ntoa_format+0x50>
 80036cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d013      	beq.n	80036fe <_ntoa_format+0x50>
 80036d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <_ntoa_format+0x3a>
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00a      	beq.n	80036fe <_ntoa_format+0x50>
      width--;
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	3b01      	subs	r3, #1
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80036ee:	e006      	b.n	80036fe <_ntoa_format+0x50>
      buf[len++] = '0';
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	1c5a      	adds	r2, r3, #1
 80036f4:	61fa      	str	r2, [r7, #28]
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4413      	add	r3, r2
 80036fa:	2230      	movs	r2, #48	; 0x30
 80036fc:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003702:	429a      	cmp	r2, r3
 8003704:	d20a      	bcs.n	800371c <_ntoa_format+0x6e>
 8003706:	69fb      	ldr	r3, [r7, #28]
 8003708:	2b1f      	cmp	r3, #31
 800370a:	d9f1      	bls.n	80036f0 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800370c:	e006      	b.n	800371c <_ntoa_format+0x6e>
      buf[len++] = '0';
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	61fa      	str	r2, [r7, #28]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4413      	add	r3, r2
 8003718:	2230      	movs	r2, #48	; 0x30
 800371a:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d006      	beq.n	8003734 <_ntoa_format+0x86>
 8003726:	69fa      	ldr	r2, [r7, #28]
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	429a      	cmp	r2, r3
 800372c:	d202      	bcs.n	8003734 <_ntoa_format+0x86>
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b1f      	cmp	r3, #31
 8003732:	d9ec      	bls.n	800370e <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	d058      	beq.n	80037f0 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d116      	bne.n	8003776 <_ntoa_format+0xc8>
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d013      	beq.n	8003776 <_ntoa_format+0xc8>
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	429a      	cmp	r2, r3
 8003754:	d003      	beq.n	800375e <_ntoa_format+0xb0>
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375a:	429a      	cmp	r2, r3
 800375c:	d10b      	bne.n	8003776 <_ntoa_format+0xc8>
      len--;
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	3b01      	subs	r3, #1
 8003762:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <_ntoa_format+0xc8>
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	2b10      	cmp	r3, #16
 800376e:	d102      	bne.n	8003776 <_ntoa_format+0xc8>
        len--;
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	3b01      	subs	r3, #1
 8003774:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	2b10      	cmp	r3, #16
 800377a:	d10f      	bne.n	800379c <_ntoa_format+0xee>
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10a      	bne.n	800379c <_ntoa_format+0xee>
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2b1f      	cmp	r3, #31
 800378a:	d807      	bhi.n	800379c <_ntoa_format+0xee>
      buf[len++] = 'x';
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	61fa      	str	r2, [r7, #28]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4413      	add	r3, r2
 8003796:	2278      	movs	r2, #120	; 0x78
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e01f      	b.n	80037dc <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d10f      	bne.n	80037c2 <_ntoa_format+0x114>
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	f003 0320 	and.w	r3, r3, #32
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <_ntoa_format+0x114>
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	2b1f      	cmp	r3, #31
 80037b0:	d807      	bhi.n	80037c2 <_ntoa_format+0x114>
      buf[len++] = 'X';
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	61fa      	str	r2, [r7, #28]
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	2258      	movs	r2, #88	; 0x58
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e00c      	b.n	80037dc <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d109      	bne.n	80037dc <_ntoa_format+0x12e>
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b1f      	cmp	r3, #31
 80037cc:	d806      	bhi.n	80037dc <_ntoa_format+0x12e>
      buf[len++] = 'b';
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	61fa      	str	r2, [r7, #28]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	4413      	add	r3, r2
 80037d8:	2262      	movs	r2, #98	; 0x62
 80037da:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b1f      	cmp	r3, #31
 80037e0:	d806      	bhi.n	80037f0 <_ntoa_format+0x142>
      buf[len++] = '0';
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	61fa      	str	r2, [r7, #28]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	2230      	movs	r2, #48	; 0x30
 80037ee:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b1f      	cmp	r3, #31
 80037f4:	d824      	bhi.n	8003840 <_ntoa_format+0x192>
    if (negative) {
 80037f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <_ntoa_format+0x160>
      buf[len++] = '-';
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	61fa      	str	r2, [r7, #28]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	4413      	add	r3, r2
 8003808:	222d      	movs	r2, #45	; 0x2d
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e018      	b.n	8003840 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	61fa      	str	r2, [r7, #28]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4413      	add	r3, r2
 8003822:	222b      	movs	r2, #43	; 0x2b
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	e00b      	b.n	8003840 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8003828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d006      	beq.n	8003840 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	61fa      	str	r2, [r7, #28]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4413      	add	r3, r2
 800383c:	2220      	movs	r2, #32
 800383e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003842:	9303      	str	r3, [sp, #12]
 8003844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fed9 	bl	800360e <_out_rev>
 800385c:	4603      	mov	r3, r0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b096      	sub	sp, #88	; 0x58
 800386a:	af08      	add	r7, sp, #32
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 800387e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003880:	f023 0310 	bic.w	r3, r3, #16
 8003884:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800388c:	2b00      	cmp	r3, #0
 800388e:	d002      	beq.n	8003896 <_ntoa_long+0x30>
 8003890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d032      	beq.n	80038fc <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8003896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800389a:	fbb3 f2f2 	udiv	r2, r3, r2
 800389e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80038a0:	fb01 f202 	mul.w	r2, r1, r2
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80038aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038ae:	2b09      	cmp	r3, #9
 80038b0:	d804      	bhi.n	80038bc <_ntoa_long+0x56>
 80038b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038b6:	3330      	adds	r3, #48	; 0x30
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	e00d      	b.n	80038d8 <_ntoa_long+0x72>
 80038bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <_ntoa_long+0x64>
 80038c6:	2241      	movs	r2, #65	; 0x41
 80038c8:	e000      	b.n	80038cc <_ntoa_long+0x66>
 80038ca:	2261      	movs	r2, #97	; 0x61
 80038cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80038d0:	4413      	add	r3, r2
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	3b0a      	subs	r3, #10
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038da:	1c59      	adds	r1, r3, #1
 80038dc:	6379      	str	r1, [r7, #52]	; 0x34
 80038de:	3338      	adds	r3, #56	; 0x38
 80038e0:	443b      	add	r3, r7
 80038e2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80038e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ee:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80038f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <_ntoa_long+0x96>
 80038f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f8:	2b1f      	cmp	r3, #31
 80038fa:	d9cc      	bls.n	8003896 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80038fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fe:	9306      	str	r3, [sp, #24]
 8003900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003902:	9305      	str	r3, [sp, #20]
 8003904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003906:	9304      	str	r3, [sp, #16]
 8003908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390a:	9303      	str	r3, [sp, #12]
 800390c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003910:	9302      	str	r3, [sp, #8]
 8003912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	f107 0310 	add.w	r3, r7, #16
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f7ff fec3 	bl	80036ae <_ntoa_format>
 8003928:	4603      	mov	r3, r0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3738      	adds	r7, #56	; 0x38
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b096      	sub	sp, #88	; 0x58
 8003936:	af08      	add	r7, sp, #32
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8003944:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003948:	4313      	orrs	r3, r2
 800394a:	d103      	bne.n	8003954 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 800394c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800394e:	f023 0310 	bic.w	r3, r3, #16
 8003952:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8003954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <_ntoa_long_long+0x34>
 800395e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003962:	4313      	orrs	r3, r2
 8003964:	d037      	beq.n	80039d6 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8003966:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800396a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800396e:	f7fd f993 	bl	8000c98 <__aeabi_uldivmod>
 8003972:	4613      	mov	r3, r2
 8003974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8003978:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800397c:	2b09      	cmp	r3, #9
 800397e:	d804      	bhi.n	800398a <_ntoa_long_long+0x58>
 8003980:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003984:	3330      	adds	r3, #48	; 0x30
 8003986:	b2da      	uxtb	r2, r3
 8003988:	e00d      	b.n	80039a6 <_ntoa_long_long+0x74>
 800398a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <_ntoa_long_long+0x66>
 8003994:	2241      	movs	r2, #65	; 0x41
 8003996:	e000      	b.n	800399a <_ntoa_long_long+0x68>
 8003998:	2261      	movs	r2, #97	; 0x61
 800399a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800399e:	4413      	add	r3, r2
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	3b0a      	subs	r3, #10
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a8:	1c59      	adds	r1, r3, #1
 80039aa:	6379      	str	r1, [r7, #52]	; 0x34
 80039ac:	3338      	adds	r3, #56	; 0x38
 80039ae:	443b      	add	r3, r7
 80039b0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80039b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039b8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80039bc:	f7fd f96c 	bl	8000c98 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80039c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039cc:	4313      	orrs	r3, r2
 80039ce:	d002      	beq.n	80039d6 <_ntoa_long_long+0xa4>
 80039d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d2:	2b1f      	cmp	r3, #31
 80039d4:	d9c7      	bls.n	8003966 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80039d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039da:	9206      	str	r2, [sp, #24]
 80039dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039de:	9205      	str	r2, [sp, #20]
 80039e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039e2:	9204      	str	r2, [sp, #16]
 80039e4:	9303      	str	r3, [sp, #12]
 80039e6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80039ea:	9302      	str	r3, [sp, #8]
 80039ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	f107 0310 	add.w	r3, r7, #16
 80039f4:	9300      	str	r3, [sp, #0]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff fe56 	bl	80036ae <_ntoa_format>
 8003a02:	4603      	mov	r3, r0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3738      	adds	r7, #56	; 0x38
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	0000      	movs	r0, r0
	...

08003a10 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003a10:	b590      	push	{r4, r7, lr}
 8003a12:	b09d      	sub	sp, #116	; 0x74
 8003a14:	af04      	add	r7, sp, #16
 8003a16:	6178      	str	r0, [r7, #20]
 8003a18:	6139      	str	r1, [r7, #16]
 8003a1a:	60fa      	str	r2, [r7, #12]
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8003a22:	2300      	movs	r3, #0
 8003a24:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	f04f 0300 	mov.w	r3, #0
 8003a2e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8003a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a3a:	f7fd f84d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10f      	bne.n	8003a64 <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a46:	9303      	str	r3, [sp, #12]
 8003a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a4a:	9302      	str	r3, [sp, #8]
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	4ba7      	ldr	r3, [pc, #668]	; (8003cf0 <_ftoa+0x2e0>)
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	6939      	ldr	r1, [r7, #16]
 8003a5a:	6978      	ldr	r0, [r7, #20]
 8003a5c:	f7ff fdd7 	bl	800360e <_out_rev>
 8003a60:	4603      	mov	r3, r0
 8003a62:	e222      	b.n	8003eaa <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295
 8003a68:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003a6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a70:	f7fd f83c 	bl	8000aec <__aeabi_dcmplt>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00f      	beq.n	8003a9a <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003a7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a7c:	9303      	str	r3, [sp, #12]
 8003a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a80:	9302      	str	r3, [sp, #8]
 8003a82:	2304      	movs	r3, #4
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	4b9b      	ldr	r3, [pc, #620]	; (8003cf4 <_ftoa+0x2e4>)
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	6939      	ldr	r1, [r7, #16]
 8003a90:	6978      	ldr	r0, [r7, #20]
 8003a92:	f7ff fdbc 	bl	800360e <_out_rev>
 8003a96:	4603      	mov	r3, r0
 8003a98:	e207      	b.n	8003eaa <_ftoa+0x49a>
  if (value > DBL_MAX)
 8003a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a9e:	4b96      	ldr	r3, [pc, #600]	; (8003cf8 <_ftoa+0x2e8>)
 8003aa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003aa4:	f7fd f840 	bl	8000b28 <__aeabi_dcmpgt>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d01d      	beq.n	8003aea <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <_ftoa+0xac>
 8003ab8:	4b90      	ldr	r3, [pc, #576]	; (8003cfc <_ftoa+0x2ec>)
 8003aba:	e000      	b.n	8003abe <_ftoa+0xae>
 8003abc:	4b90      	ldr	r3, [pc, #576]	; (8003d00 <_ftoa+0x2f0>)
 8003abe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ac0:	f002 0204 	and.w	r2, r2, #4
 8003ac4:	2a00      	cmp	r2, #0
 8003ac6:	d001      	beq.n	8003acc <_ftoa+0xbc>
 8003ac8:	2204      	movs	r2, #4
 8003aca:	e000      	b.n	8003ace <_ftoa+0xbe>
 8003acc:	2203      	movs	r2, #3
 8003ace:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8003ad0:	9103      	str	r1, [sp, #12]
 8003ad2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003ad4:	9102      	str	r1, [sp, #8]
 8003ad6:	9201      	str	r2, [sp, #4]
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	6939      	ldr	r1, [r7, #16]
 8003ae0:	6978      	ldr	r0, [r7, #20]
 8003ae2:	f7ff fd94 	bl	800360e <_out_rev>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	e1df      	b.n	8003eaa <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8003aea:	a37d      	add	r3, pc, #500	; (adr r3, 8003ce0 <_ftoa+0x2d0>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003af4:	f7fd f818 	bl	8000b28 <__aeabi_dcmpgt>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <_ftoa+0x102>
 8003afe:	a37a      	add	r3, pc, #488	; (adr r3, 8003ce8 <_ftoa+0x2d8>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b08:	f7fc fff0 	bl	8000aec <__aeabi_dcmplt>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00f      	beq.n	8003b32 <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003b12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b14:	9302      	str	r3, [sp, #8]
 8003b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	ed97 0b00 	vldr	d0, [r7]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	6939      	ldr	r1, [r7, #16]
 8003b28:	6978      	ldr	r0, [r7, #20]
 8003b2a:	f000 f9c9 	bl	8003ec0 <_etoa>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	e1bb      	b.n	8003eaa <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b44:	f7fc ffd2 	bl	8000aec <__aeabi_dcmplt>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00e      	beq.n	8003b6c <_ftoa+0x15c>
    negative = true;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8003b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b58:	f04f 0000 	mov.w	r0, #0
 8003b5c:	f04f 0100 	mov.w	r1, #0
 8003b60:	f7fc fb9a 	bl	8000298 <__aeabi_dsub>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003b6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003b76:	2306      	movs	r3, #6
 8003b78:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003b7a:	e00a      	b.n	8003b92 <_ftoa+0x182>
    buf[len++] = '0';
 8003b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b7e:	1c5a      	adds	r2, r3, #1
 8003b80:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003b82:	3360      	adds	r3, #96	; 0x60
 8003b84:	443b      	add	r3, r7
 8003b86:	2230      	movs	r2, #48	; 0x30
 8003b88:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8003b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b94:	2b1f      	cmp	r3, #31
 8003b96:	d802      	bhi.n	8003b9e <_ftoa+0x18e>
 8003b98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b9a:	2b09      	cmp	r3, #9
 8003b9c:	d8ee      	bhi.n	8003b7c <_ftoa+0x16c>
  }

  int whole = (int)value;
 8003b9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ba2:	f7fc ffe1 	bl	8000b68 <__aeabi_d2iz>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8003baa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003bac:	f7fc fcc2 	bl	8000534 <__aeabi_i2d>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bb8:	f7fc fb6e 	bl	8000298 <__aeabi_dsub>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4a4f      	ldr	r2, [pc, #316]	; (8003d04 <_ftoa+0x2f4>)
 8003bc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f7fc fd1a 	bl	8000608 <__aeabi_dmul>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8003bdc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003be0:	f7fc ffea 	bl	8000bb8 <__aeabi_d2uiz>
 8003be4:	4603      	mov	r3, r0
 8003be6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8003be8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003bea:	f7fc fc93 	bl	8000514 <__aeabi_ui2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003bf6:	f7fc fb4f 	bl	8000298 <__aeabi_dsub>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	4b40      	ldr	r3, [pc, #256]	; (8003d08 <_ftoa+0x2f8>)
 8003c08:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c0c:	f7fc ff8c 	bl	8000b28 <__aeabi_dcmpgt>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <_ftoa+0x234>
    ++frac;
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	3301      	adds	r3, #1
 8003c1a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8003c1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003c1e:	f7fc fc79 	bl	8000514 <__aeabi_ui2d>
 8003c22:	4a38      	ldr	r2, [pc, #224]	; (8003d04 <_ftoa+0x2f4>)
 8003c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	4413      	add	r3, r2
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	f7fc ff71 	bl	8000b14 <__aeabi_dcmpge>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <_ftoa+0x25e>
      frac = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3e:	3301      	adds	r3, #1
 8003c40:	657b      	str	r3, [r7, #84]	; 0x54
 8003c42:	e014      	b.n	8003c6e <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	4b2f      	ldr	r3, [pc, #188]	; (8003d08 <_ftoa+0x2f8>)
 8003c4a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c4e:	f7fc ff4d 	bl	8000aec <__aeabi_dcmplt>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8003c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d004      	beq.n	8003c68 <_ftoa+0x258>
 8003c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d002      	beq.n	8003c6e <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8003c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d14b      	bne.n	8003d0c <_ftoa+0x2fc>
    diff = value - (double)whole;
 8003c74:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8003c76:	f7fc fc5d 	bl	8000534 <__aeabi_i2d>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c82:	f7fc fb09 	bl	8000298 <__aeabi_dsub>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8003c8e:	2301      	movs	r3, #1
 8003c90:	461c      	mov	r4, r3
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <_ftoa+0x2f8>)
 8003c98:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003c9c:	f7fc ff26 	bl	8000aec <__aeabi_dcmplt>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <_ftoa+0x29a>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	461c      	mov	r4, r3
 8003caa:	b2e3      	uxtb	r3, r4
 8003cac:	f083 0301 	eor.w	r3, r3, #1
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <_ftoa+0x2ba>
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <_ftoa+0x2f8>)
 8003cbc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003cc0:	f7fc ff32 	bl	8000b28 <__aeabi_dcmpgt>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d064      	beq.n	8003d94 <_ftoa+0x384>
 8003cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8081 	beq.w	8003dd8 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd8:	3301      	adds	r3, #1
 8003cda:	657b      	str	r3, [r7, #84]	; 0x54
 8003cdc:	e07c      	b.n	8003dd8 <_ftoa+0x3c8>
 8003cde:	bf00      	nop
 8003ce0:	00000000 	.word	0x00000000
 8003ce4:	41cdcd65 	.word	0x41cdcd65
 8003ce8:	00000000 	.word	0x00000000
 8003cec:	c1cdcd65 	.word	0xc1cdcd65
 8003cf0:	080113f4 	.word	0x080113f4
 8003cf4:	080113f8 	.word	0x080113f8
 8003cf8:	7fefffff 	.word	0x7fefffff
 8003cfc:	08011400 	.word	0x08011400
 8003d00:	08011408 	.word	0x08011408
 8003d04:	08011888 	.word	0x08011888
 8003d08:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8003d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d10:	e01f      	b.n	8003d52 <_ftoa+0x342>
      --count;
 8003d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d14:	3b01      	subs	r3, #1
 8003d16:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8003d18:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003d1a:	4b66      	ldr	r3, [pc, #408]	; (8003eb4 <_ftoa+0x4a4>)
 8003d1c:	fba3 2301 	umull	r2, r3, r3, r1
 8003d20:	08da      	lsrs	r2, r3, #3
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	1aca      	subs	r2, r1, r3
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d30:	1c59      	adds	r1, r3, #1
 8003d32:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003d34:	3230      	adds	r2, #48	; 0x30
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	3360      	adds	r3, #96	; 0x60
 8003d3a:	443b      	add	r3, r7
 8003d3c:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8003d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d42:	4a5c      	ldr	r2, [pc, #368]	; (8003eb4 <_ftoa+0x4a4>)
 8003d44:	fba2 2303 	umull	r2, r3, r2, r3
 8003d48:	08db      	lsrs	r3, r3, #3
 8003d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8003d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d54:	2b1f      	cmp	r3, #31
 8003d56:	d9dc      	bls.n	8003d12 <_ftoa+0x302>
 8003d58:	e009      	b.n	8003d6e <_ftoa+0x35e>
        break;
 8003d5a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003d5c:	e007      	b.n	8003d6e <_ftoa+0x35e>
      buf[len++] = '0';
 8003d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d60:	1c5a      	adds	r2, r3, #1
 8003d62:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d64:	3360      	adds	r3, #96	; 0x60
 8003d66:	443b      	add	r3, r7
 8003d68:	2230      	movs	r2, #48	; 0x30
 8003d6a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003d6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d70:	2b1f      	cmp	r3, #31
 8003d72:	d804      	bhi.n	8003d7e <_ftoa+0x36e>
 8003d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1ef      	bne.n	8003d5e <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d80:	2b1f      	cmp	r3, #31
 8003d82:	d829      	bhi.n	8003dd8 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 8003d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d8a:	3360      	adds	r3, #96	; 0x60
 8003d8c:	443b      	add	r3, r7
 8003d8e:	222e      	movs	r2, #46	; 0x2e
 8003d90:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003d94:	e020      	b.n	8003dd8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8003d96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d98:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <_ftoa+0x4a8>)
 8003d9a:	fb83 1302 	smull	r1, r3, r3, r2
 8003d9e:	1099      	asrs	r1, r3, #2
 8003da0:	17d3      	asrs	r3, r2, #31
 8003da2:	1ac9      	subs	r1, r1, r3
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	1ad1      	subs	r1, r2, r3
 8003dae:	b2ca      	uxtb	r2, r1
 8003db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003db2:	1c59      	adds	r1, r3, #1
 8003db4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003db6:	3230      	adds	r2, #48	; 0x30
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	3360      	adds	r3, #96	; 0x60
 8003dbc:	443b      	add	r3, r7
 8003dbe:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8003dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc4:	4a3c      	ldr	r2, [pc, #240]	; (8003eb8 <_ftoa+0x4a8>)
 8003dc6:	fb82 1203 	smull	r1, r2, r2, r3
 8003dca:	1092      	asrs	r2, r2, #2
 8003dcc:	17db      	asrs	r3, r3, #31
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	657b      	str	r3, [r7, #84]	; 0x54
 8003dd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dda:	2b1f      	cmp	r3, #31
 8003ddc:	d9db      	bls.n	8003d96 <_ftoa+0x386>
 8003dde:	e000      	b.n	8003de2 <_ftoa+0x3d2>
      break;
 8003de0:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003de2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d123      	bne.n	8003e34 <_ftoa+0x424>
 8003dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01e      	beq.n	8003e34 <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d014      	beq.n	8003e26 <_ftoa+0x416>
 8003dfc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d104      	bne.n	8003e0e <_ftoa+0x3fe>
 8003e04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e06:	f003 030c 	and.w	r3, r3, #12
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <_ftoa+0x416>
      width--;
 8003e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e10:	3b01      	subs	r3, #1
 8003e12:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003e14:	e007      	b.n	8003e26 <_ftoa+0x416>
      buf[len++] = '0';
 8003e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e1c:	3360      	adds	r3, #96	; 0x60
 8003e1e:	443b      	add	r3, r7
 8003e20:	2230      	movs	r2, #48	; 0x30
 8003e22:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003e26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d202      	bcs.n	8003e34 <_ftoa+0x424>
 8003e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e30:	2b1f      	cmp	r3, #31
 8003e32:	d9f0      	bls.n	8003e16 <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e36:	2b1f      	cmp	r3, #31
 8003e38:	d827      	bhi.n	8003e8a <_ftoa+0x47a>
    if (negative) {
 8003e3a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <_ftoa+0x444>
      buf[len++] = '-';
 8003e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e48:	3360      	adds	r3, #96	; 0x60
 8003e4a:	443b      	add	r3, r7
 8003e4c:	222d      	movs	r2, #45	; 0x2d
 8003e4e:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003e52:	e01a      	b.n	8003e8a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 8003e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e64:	3360      	adds	r3, #96	; 0x60
 8003e66:	443b      	add	r3, r7
 8003e68:	222b      	movs	r2, #43	; 0x2b
 8003e6a:	f803 2c48 	strb.w	r2, [r3, #-72]
 8003e6e:	e00c      	b.n	8003e8a <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 8003e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d007      	beq.n	8003e8a <_ftoa+0x47a>
      buf[len++] = ' ';
 8003e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003e80:	3360      	adds	r3, #96	; 0x60
 8003e82:	443b      	add	r3, r7
 8003e84:	2220      	movs	r2, #32
 8003e86:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8003e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e8c:	9303      	str	r3, [sp, #12]
 8003e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e90:	9302      	str	r3, [sp, #8]
 8003e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e94:	9301      	str	r3, [sp, #4]
 8003e96:	f107 0318 	add.w	r3, r7, #24
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	6939      	ldr	r1, [r7, #16]
 8003ea2:	6978      	ldr	r0, [r7, #20]
 8003ea4:	f7ff fbb3 	bl	800360e <_out_rev>
 8003ea8:	4603      	mov	r3, r0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3764      	adds	r7, #100	; 0x64
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd90      	pop	{r4, r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	cccccccd 	.word	0xcccccccd
 8003eb8:	66666667 	.word	0x66666667
 8003ebc:	00000000 	.word	0x00000000

08003ec0 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8003ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	b09f      	sub	sp, #124	; 0x7c
 8003ec6:	af06      	add	r7, sp, #24
 8003ec8:	6278      	str	r0, [r7, #36]	; 0x24
 8003eca:	6239      	str	r1, [r7, #32]
 8003ecc:	61fa      	str	r2, [r7, #28]
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8003ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ed8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003edc:	f7fc fdfc 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d014      	beq.n	8003f10 <_etoa+0x50>
 8003ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eea:	4bc1      	ldr	r3, [pc, #772]	; (80041f0 <_etoa+0x330>)
 8003eec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ef0:	f7fc fe1a 	bl	8000b28 <__aeabi_dcmpgt>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10a      	bne.n	8003f10 <_etoa+0x50>
 8003efa:	f04f 32ff 	mov.w	r2, #4294967295
 8003efe:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003f02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f06:	f7fc fdf1 	bl	8000aec <__aeabi_dcmplt>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d012      	beq.n	8003f36 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f14:	9302      	str	r3, [sp, #8]
 8003f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	ed97 0b04 	vldr	d0, [r7, #16]
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	6a39      	ldr	r1, [r7, #32]
 8003f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f2e:	f7ff fd6f 	bl	8003a10 <_ftoa>
 8003f32:	4603      	mov	r3, r0
 8003f34:	e23f      	b.n	80043b6 <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8003f36:	2301      	movs	r3, #1
 8003f38:	461e      	mov	r6, r3
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003f46:	f7fc fdd1 	bl	8000aec <__aeabi_dcmplt>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <_etoa+0x94>
 8003f50:	2300      	movs	r3, #0
 8003f52:	461e      	mov	r6, r3
 8003f54:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8003f58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <_etoa+0xb4>
    value = -value;
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003f6a:	607b      	str	r3, [r7, #4]
 8003f6c:	ed97 7b00 	vldr	d7, [r7]
 8003f70:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003f80:	2306      	movs	r3, #6
 8003f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003f86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	0d0a      	lsrs	r2, r1, #20
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fa4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8003faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fae:	4690      	mov	r8, r2
 8003fb0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8003fb4:	4644      	mov	r4, r8
 8003fb6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8003fba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003fbe:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003fc2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003fc4:	f7fc fab6 	bl	8000534 <__aeabi_i2d>
 8003fc8:	a37d      	add	r3, pc, #500	; (adr r3, 80041c0 <_etoa+0x300>)
 8003fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fce:	f7fc fb1b 	bl	8000608 <__aeabi_dmul>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	a37b      	add	r3, pc, #492	; (adr r3, 80041c8 <_etoa+0x308>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fc f95c 	bl	800029c <__adddf3>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	4614      	mov	r4, r2
 8003fea:	461d      	mov	r5, r3
 8003fec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	4b7f      	ldr	r3, [pc, #508]	; (80041f4 <_etoa+0x334>)
 8003ff6:	f7fc f94f 	bl	8000298 <__aeabi_dsub>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4610      	mov	r0, r2
 8004000:	4619      	mov	r1, r3
 8004002:	a373      	add	r3, pc, #460	; (adr r3, 80041d0 <_etoa+0x310>)
 8004004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004008:	f7fc fafe 	bl	8000608 <__aeabi_dmul>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4620      	mov	r0, r4
 8004012:	4629      	mov	r1, r5
 8004014:	f7fc f942 	bl	800029c <__adddf3>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4610      	mov	r0, r2
 800401e:	4619      	mov	r1, r3
 8004020:	f7fc fda2 	bl	8000b68 <__aeabi_d2iz>
 8004024:	4603      	mov	r3, r0
 8004026:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8004028:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800402a:	f7fc fa83 	bl	8000534 <__aeabi_i2d>
 800402e:	a36a      	add	r3, pc, #424	; (adr r3, 80041d8 <_etoa+0x318>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc fae8 	bl	8000608 <__aeabi_dmul>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4610      	mov	r0, r2
 800403e:	4619      	mov	r1, r3
 8004040:	f04f 0200 	mov.w	r2, #0
 8004044:	4b6c      	ldr	r3, [pc, #432]	; (80041f8 <_etoa+0x338>)
 8004046:	f7fc f929 	bl	800029c <__adddf3>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4610      	mov	r0, r2
 8004050:	4619      	mov	r1, r3
 8004052:	f7fc fd89 	bl	8000b68 <__aeabi_d2iz>
 8004056:	4603      	mov	r3, r0
 8004058:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800405a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800405c:	f7fc fa6a 	bl	8000534 <__aeabi_i2d>
 8004060:	a35f      	add	r3, pc, #380	; (adr r3, 80041e0 <_etoa+0x320>)
 8004062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004066:	f7fc facf 	bl	8000608 <__aeabi_dmul>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4614      	mov	r4, r2
 8004070:	461d      	mov	r5, r3
 8004072:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004074:	f7fc fa5e 	bl	8000534 <__aeabi_i2d>
 8004078:	a35b      	add	r3, pc, #364	; (adr r3, 80041e8 <_etoa+0x328>)
 800407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407e:	f7fc fac3 	bl	8000608 <__aeabi_dmul>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4620      	mov	r0, r4
 8004088:	4629      	mov	r1, r5
 800408a:	f7fc f905 	bl	8000298 <__aeabi_dsub>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8004096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800409a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800409e:	f7fc fab3 	bl	8000608 <__aeabi_dmul>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80040aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ac:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80040b0:	17da      	asrs	r2, r3, #31
 80040b2:	469a      	mov	sl, r3
 80040b4:	4693      	mov	fp, r2
 80040b6:	f04f 0200 	mov.w	r2, #0
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80040c2:	2200      	movs	r2, #0
 80040c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80040c8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80040cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	f7fc f8e2 	bl	800029c <__adddf3>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4690      	mov	r8, r2
 80040de:	4699      	mov	r9, r3
 80040e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040e4:	f04f 0000 	mov.w	r0, #0
 80040e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80040ec:	f7fc f8d4 	bl	8000298 <__aeabi_dsub>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4692      	mov	sl, r2
 80040f6:	469b      	mov	fp, r3
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	4b3f      	ldr	r3, [pc, #252]	; (80041fc <_etoa+0x33c>)
 80040fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004102:	f7fc fbab 	bl	800085c <__aeabi_ddiv>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <_etoa+0x340>)
 8004114:	f7fc f8c2 	bl	800029c <__adddf3>
 8004118:	4602      	mov	r2, r0
 800411a:	460b      	mov	r3, r1
 800411c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004120:	f7fc fb9c 	bl	800085c <__aeabi_ddiv>
 8004124:	4602      	mov	r2, r0
 8004126:	460b      	mov	r3, r1
 8004128:	4610      	mov	r0, r2
 800412a:	4619      	mov	r1, r3
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	4b34      	ldr	r3, [pc, #208]	; (8004204 <_etoa+0x344>)
 8004132:	f7fc f8b3 	bl	800029c <__adddf3>
 8004136:	4602      	mov	r2, r0
 8004138:	460b      	mov	r3, r1
 800413a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800413e:	f7fc fb8d 	bl	800085c <__aeabi_ddiv>
 8004142:	4602      	mov	r2, r0
 8004144:	460b      	mov	r3, r1
 8004146:	4650      	mov	r0, sl
 8004148:	4659      	mov	r1, fp
 800414a:	f7fc f8a7 	bl	800029c <__adddf3>
 800414e:	4602      	mov	r2, r0
 8004150:	460b      	mov	r3, r1
 8004152:	4640      	mov	r0, r8
 8004154:	4649      	mov	r1, r9
 8004156:	f7fc fb81 	bl	800085c <__aeabi_ddiv>
 800415a:	4602      	mov	r2, r0
 800415c:	460b      	mov	r3, r1
 800415e:	4610      	mov	r0, r2
 8004160:	4619      	mov	r1, r3
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	4b28      	ldr	r3, [pc, #160]	; (8004208 <_etoa+0x348>)
 8004168:	f7fc f898 	bl	800029c <__adddf3>
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4620      	mov	r0, r4
 8004172:	4629      	mov	r1, r5
 8004174:	f7fc fa48 	bl	8000608 <__aeabi_dmul>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8004180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004184:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004188:	f7fc fcb0 	bl	8000aec <__aeabi_dcmplt>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00d      	beq.n	80041ae <_etoa+0x2ee>
    expval--;
 8004192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004194:	3b01      	subs	r3, #1
 8004196:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8004198:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <_etoa+0x340>)
 80041a2:	f7fc fb5b 	bl	800085c <__aeabi_ddiv>
 80041a6:	4602      	mov	r2, r0
 80041a8:	460b      	mov	r3, r1
 80041aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80041ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b0:	2b63      	cmp	r3, #99	; 0x63
 80041b2:	dc2b      	bgt.n	800420c <_etoa+0x34c>
 80041b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041b6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80041ba:	db27      	blt.n	800420c <_etoa+0x34c>
 80041bc:	2304      	movs	r3, #4
 80041be:	e026      	b.n	800420e <_etoa+0x34e>
 80041c0:	509f79fb 	.word	0x509f79fb
 80041c4:	3fd34413 	.word	0x3fd34413
 80041c8:	8b60c8b3 	.word	0x8b60c8b3
 80041cc:	3fc68a28 	.word	0x3fc68a28
 80041d0:	636f4361 	.word	0x636f4361
 80041d4:	3fd287a7 	.word	0x3fd287a7
 80041d8:	0979a371 	.word	0x0979a371
 80041dc:	400a934f 	.word	0x400a934f
 80041e0:	bbb55516 	.word	0xbbb55516
 80041e4:	40026bb1 	.word	0x40026bb1
 80041e8:	fefa39ef 	.word	0xfefa39ef
 80041ec:	3fe62e42 	.word	0x3fe62e42
 80041f0:	7fefffff 	.word	0x7fefffff
 80041f4:	3ff80000 	.word	0x3ff80000
 80041f8:	3fe00000 	.word	0x3fe00000
 80041fc:	402c0000 	.word	0x402c0000
 8004200:	40240000 	.word	0x40240000
 8004204:	40180000 	.word	0x40180000
 8004208:	3ff00000 	.word	0x3ff00000
 800420c:	2305      	movs	r3, #5
 800420e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8004210:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004218:	2b00      	cmp	r3, #0
 800421a:	d03d      	beq.n	8004298 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800421c:	a368      	add	r3, pc, #416	; (adr r3, 80043c0 <_etoa+0x500>)
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004226:	f7fc fc75 	bl	8000b14 <__aeabi_dcmpge>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d024      	beq.n	800427a <_etoa+0x3ba>
 8004230:	a365      	add	r3, pc, #404	; (adr r3, 80043c8 <_etoa+0x508>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800423a:	f7fc fc57 	bl	8000aec <__aeabi_dcmplt>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d01a      	beq.n	800427a <_etoa+0x3ba>
      if ((int)prec > expval) {
 8004244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004248:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800424a:	429a      	cmp	r2, r3
 800424c:	da07      	bge.n	800425e <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800424e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800425c:	e002      	b.n	8004264 <_etoa+0x3a4>
      }
      else {
        prec = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8004264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800426c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004278:	e00e      	b.n	8004298 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800427a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <_etoa+0x3d8>
 8004282:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <_etoa+0x3d8>
        --prec;
 800428e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004292:	3b01      	subs	r3, #1
 8004294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8004298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800429c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800429e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d904      	bls.n	80042b2 <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80042a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80042aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	657b      	str	r3, [r7, #84]	; 0x54
 80042b0:	e001      	b.n	80042b6 <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80042b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d004      	beq.n	80042cc <_etoa+0x40c>
 80042c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80042cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d009      	beq.n	80042e6 <_etoa+0x426>
    value /= conv.F;
 80042d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042da:	f7fc fabf 	bl	800085c <__aeabi_ddiv>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80042ea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d006      	beq.n	8004300 <_etoa+0x440>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	e003      	b.n	8004308 <_etoa+0x448>
 8004300:	ed97 7b04 	vldr	d7, [r7, #16]
 8004304:	ed87 7b02 	vstr	d7, [r7, #8]
 8004308:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800430c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004310:	9302      	str	r3, [sp, #8]
 8004312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004314:	9301      	str	r3, [sp, #4]
 8004316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	ed97 0b02 	vldr	d0, [r7, #8]
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	6a39      	ldr	r1, [r7, #32]
 8004326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004328:	f7ff fb72 	bl	8003a10 <_ftoa>
 800432c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800432e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004330:	2b00      	cmp	r3, #0
 8004332:	d03f      	beq.n	80043b4 <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8004334:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <_etoa+0x484>
 8004340:	2045      	movs	r0, #69	; 0x45
 8004342:	e000      	b.n	8004346 <_etoa+0x486>
 8004344:	2065      	movs	r0, #101	; 0x65
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	1c53      	adds	r3, r2, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	6a39      	ldr	r1, [r7, #32]
 8004352:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8004354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004356:	2b00      	cmp	r3, #0
 8004358:	bfb8      	it	lt
 800435a:	425b      	neglt	r3, r3
 800435c:	4618      	mov	r0, r3
 800435e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004360:	0fdb      	lsrs	r3, r3, #31
 8004362:	b2db      	uxtb	r3, r3
 8004364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004366:	3a01      	subs	r2, #1
 8004368:	2105      	movs	r1, #5
 800436a:	9105      	str	r1, [sp, #20]
 800436c:	9204      	str	r2, [sp, #16]
 800436e:	2200      	movs	r2, #0
 8004370:	9203      	str	r2, [sp, #12]
 8004372:	220a      	movs	r2, #10
 8004374:	9202      	str	r2, [sp, #8]
 8004376:	9301      	str	r3, [sp, #4]
 8004378:	9000      	str	r0, [sp, #0]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	69fa      	ldr	r2, [r7, #28]
 800437e:	6a39      	ldr	r1, [r7, #32]
 8004380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004382:	f7ff fa70 	bl	8003866 <_ntoa_long>
 8004386:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8004388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00f      	beq.n	80043b4 <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8004394:	e007      	b.n	80043a6 <_etoa+0x4e6>
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	1c53      	adds	r3, r2, #1
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	6a39      	ldr	r1, [r7, #32]
 80043a2:	2020      	movs	r0, #32
 80043a4:	47a0      	blx	r4
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d8f0      	bhi.n	8004396 <_etoa+0x4d6>
    }
  }
  return idx;
 80043b4:	69fb      	ldr	r3, [r7, #28]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3764      	adds	r7, #100	; 0x64
 80043ba:	46bd      	mov	sp, r7
 80043bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043c0:	eb1c432d 	.word	0xeb1c432d
 80043c4:	3f1a36e2 	.word	0x3f1a36e2
 80043c8:	00000000 	.word	0x00000000
 80043cc:	412e8480 	.word	0x412e8480

080043d0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80043d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043d4:	b0a3      	sub	sp, #140	; 0x8c
 80043d6:	af0a      	add	r7, sp, #40	; 0x28
 80043d8:	6178      	str	r0, [r7, #20]
 80043da:	6139      	str	r1, [r7, #16]
 80043dc:	60fa      	str	r2, [r7, #12]
 80043de:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 84cf 	bne.w	8004d8a <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 80043ec:	4ba8      	ldr	r3, [pc, #672]	; (8004690 <_vsnprintf+0x2c0>)
 80043ee:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 80043f0:	f000 bccb 	b.w	8004d8a <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b25      	cmp	r3, #37	; 0x25
 80043fa:	d00d      	beq.n	8004418 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	7818      	ldrb	r0, [r3, #0]
 8004400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004402:	1c53      	adds	r3, r2, #1
 8004404:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004406:	697c      	ldr	r4, [r7, #20]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6939      	ldr	r1, [r7, #16]
 800440c:	47a0      	blx	r4
      format++;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	3301      	adds	r3, #1
 8004412:	60bb      	str	r3, [r7, #8]
      continue;
 8004414:	f000 bcb9 	b.w	8004d8a <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	3301      	adds	r3, #1
 800441c:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	3b20      	subs	r3, #32
 8004428:	2b10      	cmp	r3, #16
 800442a:	d857      	bhi.n	80044dc <_vsnprintf+0x10c>
 800442c:	a201      	add	r2, pc, #4	; (adr r2, 8004434 <_vsnprintf+0x64>)
 800442e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004432:	bf00      	nop
 8004434:	080044b5 	.word	0x080044b5
 8004438:	080044dd 	.word	0x080044dd
 800443c:	080044dd 	.word	0x080044dd
 8004440:	080044c9 	.word	0x080044c9
 8004444:	080044dd 	.word	0x080044dd
 8004448:	080044dd 	.word	0x080044dd
 800444c:	080044dd 	.word	0x080044dd
 8004450:	080044dd 	.word	0x080044dd
 8004454:	080044dd 	.word	0x080044dd
 8004458:	080044dd 	.word	0x080044dd
 800445c:	080044dd 	.word	0x080044dd
 8004460:	080044a1 	.word	0x080044a1
 8004464:	080044dd 	.word	0x080044dd
 8004468:	0800448d 	.word	0x0800448d
 800446c:	080044dd 	.word	0x080044dd
 8004470:	080044dd 	.word	0x080044dd
 8004474:	08004479 	.word	0x08004479
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800447a:	f043 0301 	orr.w	r3, r3, #1
 800447e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	3301      	adds	r3, #1
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	2301      	movs	r3, #1
 8004488:	653b      	str	r3, [r7, #80]	; 0x50
 800448a:	e02a      	b.n	80044e2 <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800448c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448e:	f043 0302 	orr.w	r3, r3, #2
 8004492:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	3301      	adds	r3, #1
 8004498:	60bb      	str	r3, [r7, #8]
 800449a:	2301      	movs	r3, #1
 800449c:	653b      	str	r3, [r7, #80]	; 0x50
 800449e:	e020      	b.n	80044e2 <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80044a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a2:	f043 0304 	orr.w	r3, r3, #4
 80044a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	3301      	adds	r3, #1
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	2301      	movs	r3, #1
 80044b0:	653b      	str	r3, [r7, #80]	; 0x50
 80044b2:	e016      	b.n	80044e2 <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80044b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044b6:	f043 0308 	orr.w	r3, r3, #8
 80044ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	3301      	adds	r3, #1
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	2301      	movs	r3, #1
 80044c4:	653b      	str	r3, [r7, #80]	; 0x50
 80044c6:	e00c      	b.n	80044e2 <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80044c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ca:	f043 0310 	orr.w	r3, r3, #16
 80044ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	2301      	movs	r3, #1
 80044d8:	653b      	str	r3, [r7, #80]	; 0x50
 80044da:	e002      	b.n	80044e2 <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 80044dc:	2300      	movs	r3, #0
 80044de:	653b      	str	r3, [r7, #80]	; 0x50
 80044e0:	bf00      	nop
      }
    } while (n);
 80044e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d19c      	bne.n	8004422 <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff f851 	bl	8003598 <_is_digit>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d006      	beq.n	800450a <_vsnprintf+0x13a>
      width = _atoi(&format);
 80044fc:	f107 0308 	add.w	r3, r7, #8
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff f860 	bl	80035c6 <_atoi>
 8004506:	65b8      	str	r0, [r7, #88]	; 0x58
 8004508:	e01a      	b.n	8004540 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b2a      	cmp	r3, #42	; 0x2a
 8004510:	d116      	bne.n	8004540 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 8004512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004516:	1d1a      	adds	r2, r3, #4
 8004518:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	2b00      	cmp	r3, #0
 8004524:	da07      	bge.n	8004536 <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 8004526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004528:	f043 0302 	orr.w	r3, r3, #2
 800452c:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	425b      	negs	r3, r3
 8004532:	65bb      	str	r3, [r7, #88]	; 0x58
 8004534:	e001      	b.n	800453a <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	3301      	adds	r3, #1
 800453e:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 8004540:	2300      	movs	r3, #0
 8004542:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b2e      	cmp	r3, #46	; 0x2e
 800454a:	d127      	bne.n	800459c <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 800454c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800454e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004552:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	3301      	adds	r3, #1
 8004558:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	4618      	mov	r0, r3
 8004560:	f7ff f81a 	bl	8003598 <_is_digit>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d006      	beq.n	8004578 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff f829 	bl	80035c6 <_atoi>
 8004574:	6578      	str	r0, [r7, #84]	; 0x54
 8004576:	e011      	b.n	800459c <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b2a      	cmp	r3, #42	; 0x2a
 800457e:	d10d      	bne.n	800459c <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 8004580:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004584:	1d1a      	adds	r2, r3, #4
 8004586:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800458e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004590:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004594:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3301      	adds	r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	3b68      	subs	r3, #104	; 0x68
 80045a2:	2b12      	cmp	r3, #18
 80045a4:	d866      	bhi.n	8004674 <_vsnprintf+0x2a4>
 80045a6:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <_vsnprintf+0x1dc>)
 80045a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ac:	0800461f 	.word	0x0800461f
 80045b0:	08004675 	.word	0x08004675
 80045b4:	08004655 	.word	0x08004655
 80045b8:	08004675 	.word	0x08004675
 80045bc:	080045f9 	.word	0x080045f9
 80045c0:	08004675 	.word	0x08004675
 80045c4:	08004675 	.word	0x08004675
 80045c8:	08004675 	.word	0x08004675
 80045cc:	08004675 	.word	0x08004675
 80045d0:	08004675 	.word	0x08004675
 80045d4:	08004675 	.word	0x08004675
 80045d8:	08004675 	.word	0x08004675
 80045dc:	08004645 	.word	0x08004645
 80045e0:	08004675 	.word	0x08004675
 80045e4:	08004675 	.word	0x08004675
 80045e8:	08004675 	.word	0x08004675
 80045ec:	08004675 	.word	0x08004675
 80045f0:	08004675 	.word	0x08004675
 80045f4:	08004665 	.word	0x08004665
      case 'l' :
        flags |= FLAGS_LONG;
 80045f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045fe:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	3301      	adds	r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b6c      	cmp	r3, #108	; 0x6c
 800460c:	d134      	bne.n	8004678 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 800460e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004614:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	3301      	adds	r3, #1
 800461a:	60bb      	str	r3, [r7, #8]
        }
        break;
 800461c:	e02c      	b.n	8004678 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 800461e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004624:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3301      	adds	r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b68      	cmp	r3, #104	; 0x68
 8004632:	d123      	bne.n	800467c <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8004634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800463a:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	3301      	adds	r3, #1
 8004640:	60bb      	str	r3, [r7, #8]
        }
        break;
 8004642:	e01b      	b.n	800467c <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800464a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	3301      	adds	r3, #1
 8004650:	60bb      	str	r3, [r7, #8]
        break;
 8004652:	e014      	b.n	800467e <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800465a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	3301      	adds	r3, #1
 8004660:	60bb      	str	r3, [r7, #8]
        break;
 8004662:	e00c      	b.n	800467e <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466a:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	3301      	adds	r3, #1
 8004670:	60bb      	str	r3, [r7, #8]
        break;
 8004672:	e004      	b.n	800467e <_vsnprintf+0x2ae>
      default :
        break;
 8004674:	bf00      	nop
 8004676:	e002      	b.n	800467e <_vsnprintf+0x2ae>
        break;
 8004678:	bf00      	nop
 800467a:	e000      	b.n	800467e <_vsnprintf+0x2ae>
        break;
 800467c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b67      	cmp	r3, #103	; 0x67
 8004684:	f300 80b8 	bgt.w	80047f8 <_vsnprintf+0x428>
 8004688:	2b25      	cmp	r3, #37	; 0x25
 800468a:	da27      	bge.n	80046dc <_vsnprintf+0x30c>
 800468c:	e370      	b.n	8004d70 <_vsnprintf+0x9a0>
 800468e:	bf00      	nop
 8004690:	0800351d 	.word	0x0800351d
 8004694:	3b69      	subs	r3, #105	; 0x69
 8004696:	2201      	movs	r2, #1
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	f249 0241 	movw	r2, #36929	; 0x9041
 80046a0:	401a      	ands	r2, r3
 80046a2:	2a00      	cmp	r2, #0
 80046a4:	bf14      	ite	ne
 80046a6:	2201      	movne	r2, #1
 80046a8:	2200      	moveq	r2, #0
 80046aa:	b2d2      	uxtb	r2, r2
 80046ac:	2a00      	cmp	r2, #0
 80046ae:	f040 80aa 	bne.w	8004806 <_vsnprintf+0x436>
 80046b2:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80046b6:	2a00      	cmp	r2, #0
 80046b8:	bf14      	ite	ne
 80046ba:	2201      	movne	r2, #1
 80046bc:	2200      	moveq	r2, #0
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	2a00      	cmp	r2, #0
 80046c2:	f040 82fb 	bne.w	8004cbc <_vsnprintf+0x8ec>
 80046c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bf14      	ite	ne
 80046ce:	2301      	movne	r3, #1
 80046d0:	2300      	moveq	r3, #0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f040 828d 	bne.w	8004bf4 <_vsnprintf+0x824>
 80046da:	e349      	b.n	8004d70 <_vsnprintf+0x9a0>
 80046dc:	3b25      	subs	r3, #37	; 0x25
 80046de:	2b42      	cmp	r3, #66	; 0x42
 80046e0:	f200 8346 	bhi.w	8004d70 <_vsnprintf+0x9a0>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <_vsnprintf+0x31c>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004d59 	.word	0x08004d59
 80046f0:	08004d71 	.word	0x08004d71
 80046f4:	08004d71 	.word	0x08004d71
 80046f8:	08004d71 	.word	0x08004d71
 80046fc:	08004d71 	.word	0x08004d71
 8004700:	08004d71 	.word	0x08004d71
 8004704:	08004d71 	.word	0x08004d71
 8004708:	08004d71 	.word	0x08004d71
 800470c:	08004d71 	.word	0x08004d71
 8004710:	08004d71 	.word	0x08004d71
 8004714:	08004d71 	.word	0x08004d71
 8004718:	08004d71 	.word	0x08004d71
 800471c:	08004d71 	.word	0x08004d71
 8004720:	08004d71 	.word	0x08004d71
 8004724:	08004d71 	.word	0x08004d71
 8004728:	08004d71 	.word	0x08004d71
 800472c:	08004d71 	.word	0x08004d71
 8004730:	08004d71 	.word	0x08004d71
 8004734:	08004d71 	.word	0x08004d71
 8004738:	08004d71 	.word	0x08004d71
 800473c:	08004d71 	.word	0x08004d71
 8004740:	08004d71 	.word	0x08004d71
 8004744:	08004d71 	.word	0x08004d71
 8004748:	08004d71 	.word	0x08004d71
 800474c:	08004d71 	.word	0x08004d71
 8004750:	08004d71 	.word	0x08004d71
 8004754:	08004d71 	.word	0x08004d71
 8004758:	08004d71 	.word	0x08004d71
 800475c:	08004d71 	.word	0x08004d71
 8004760:	08004d71 	.word	0x08004d71
 8004764:	08004d71 	.word	0x08004d71
 8004768:	08004d71 	.word	0x08004d71
 800476c:	08004b0d 	.word	0x08004b0d
 8004770:	08004abd 	.word	0x08004abd
 8004774:	08004b0d 	.word	0x08004b0d
 8004778:	08004d71 	.word	0x08004d71
 800477c:	08004d71 	.word	0x08004d71
 8004780:	08004d71 	.word	0x08004d71
 8004784:	08004d71 	.word	0x08004d71
 8004788:	08004d71 	.word	0x08004d71
 800478c:	08004d71 	.word	0x08004d71
 8004790:	08004d71 	.word	0x08004d71
 8004794:	08004d71 	.word	0x08004d71
 8004798:	08004d71 	.word	0x08004d71
 800479c:	08004d71 	.word	0x08004d71
 80047a0:	08004d71 	.word	0x08004d71
 80047a4:	08004d71 	.word	0x08004d71
 80047a8:	08004d71 	.word	0x08004d71
 80047ac:	08004d71 	.word	0x08004d71
 80047b0:	08004d71 	.word	0x08004d71
 80047b4:	08004d71 	.word	0x08004d71
 80047b8:	08004807 	.word	0x08004807
 80047bc:	08004d71 	.word	0x08004d71
 80047c0:	08004d71 	.word	0x08004d71
 80047c4:	08004d71 	.word	0x08004d71
 80047c8:	08004d71 	.word	0x08004d71
 80047cc:	08004d71 	.word	0x08004d71
 80047d0:	08004d71 	.word	0x08004d71
 80047d4:	08004d71 	.word	0x08004d71
 80047d8:	08004d71 	.word	0x08004d71
 80047dc:	08004d71 	.word	0x08004d71
 80047e0:	08004807 	.word	0x08004807
 80047e4:	08004b7d 	.word	0x08004b7d
 80047e8:	08004807 	.word	0x08004807
 80047ec:	08004b0d 	.word	0x08004b0d
 80047f0:	08004abd 	.word	0x08004abd
 80047f4:	08004b0d 	.word	0x08004b0d
 80047f8:	2b78      	cmp	r3, #120	; 0x78
 80047fa:	f300 82b9 	bgt.w	8004d70 <_vsnprintf+0x9a0>
 80047fe:	2b69      	cmp	r3, #105	; 0x69
 8004800:	f6bf af48 	bge.w	8004694 <_vsnprintf+0x2c4>
 8004804:	e2b4      	b.n	8004d70 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b78      	cmp	r3, #120	; 0x78
 800480c:	d003      	beq.n	8004816 <_vsnprintf+0x446>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b58      	cmp	r3, #88	; 0x58
 8004814:	d102      	bne.n	800481c <_vsnprintf+0x44c>
          base = 16U;
 8004816:	2310      	movs	r3, #16
 8004818:	64bb      	str	r3, [r7, #72]	; 0x48
 800481a:	e013      	b.n	8004844 <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b6f      	cmp	r3, #111	; 0x6f
 8004822:	d102      	bne.n	800482a <_vsnprintf+0x45a>
          base =  8U;
 8004824:	2308      	movs	r3, #8
 8004826:	64bb      	str	r3, [r7, #72]	; 0x48
 8004828:	e00c      	b.n	8004844 <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b62      	cmp	r3, #98	; 0x62
 8004830:	d102      	bne.n	8004838 <_vsnprintf+0x468>
          base =  2U;
 8004832:	2302      	movs	r3, #2
 8004834:	64bb      	str	r3, [r7, #72]	; 0x48
 8004836:	e005      	b.n	8004844 <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8004838:	230a      	movs	r3, #10
 800483a:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800483c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b58      	cmp	r3, #88	; 0x58
 800484a:	d103      	bne.n	8004854 <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 800484c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800484e:	f043 0320 	orr.w	r3, r3, #32
 8004852:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b69      	cmp	r3, #105	; 0x69
 800485a:	d007      	beq.n	800486c <_vsnprintf+0x49c>
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b64      	cmp	r3, #100	; 0x64
 8004862:	d003      	beq.n	800486c <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004866:	f023 030c 	bic.w	r3, r3, #12
 800486a:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800486c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8004876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b69      	cmp	r3, #105	; 0x69
 8004884:	d004      	beq.n	8004890 <_vsnprintf+0x4c0>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	f040 8098 	bne.w	80049c0 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8004890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004896:	2b00      	cmp	r3, #0
 8004898:	d031      	beq.n	80048fe <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800489a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800489e:	3307      	adds	r3, #7
 80048a0:	f023 0307 	bic.w	r3, r3, #7
 80048a4:	f103 0208 	add.w	r2, r3, #8
 80048a8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80048ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80048b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	da06      	bge.n	80048ca <_vsnprintf+0x4fa>
 80048bc:	2100      	movs	r1, #0
 80048be:	f1d2 0800 	rsbs	r8, r2, #0
 80048c2:	eb61 0903 	sbc.w	r9, r1, r3
 80048c6:	4642      	mov	r2, r8
 80048c8:	464b      	mov	r3, r9
 80048ca:	69f9      	ldr	r1, [r7, #28]
 80048cc:	0fc9      	lsrs	r1, r1, #31
 80048ce:	b2c9      	uxtb	r1, r1
 80048d0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80048d2:	2400      	movs	r4, #0
 80048d4:	4682      	mov	sl, r0
 80048d6:	46a3      	mov	fp, r4
 80048d8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80048da:	9008      	str	r0, [sp, #32]
 80048dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80048de:	9007      	str	r0, [sp, #28]
 80048e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80048e2:	9006      	str	r0, [sp, #24]
 80048e4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80048e8:	9102      	str	r1, [sp, #8]
 80048ea:	e9cd 2300 	strd	r2, r3, [sp]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048f2:	6939      	ldr	r1, [r7, #16]
 80048f4:	6978      	ldr	r0, [r7, #20]
 80048f6:	f7ff f81c 	bl	8003932 <_ntoa_long_long>
 80048fa:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80048fc:	e0da      	b.n	8004ab4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80048fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d020      	beq.n	800494a <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8004908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800490c:	1d1a      	adds	r2, r3, #4
 800490e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	2b00      	cmp	r3, #0
 800491a:	bfb8      	it	lt
 800491c:	425b      	neglt	r3, r3
 800491e:	4619      	mov	r1, r3
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	0fdb      	lsrs	r3, r3, #31
 8004924:	b2db      	uxtb	r3, r3
 8004926:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004928:	9205      	str	r2, [sp, #20]
 800492a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800492c:	9204      	str	r2, [sp, #16]
 800492e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004930:	9203      	str	r2, [sp, #12]
 8004932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004934:	9202      	str	r2, [sp, #8]
 8004936:	9301      	str	r3, [sp, #4]
 8004938:	9100      	str	r1, [sp, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800493e:	6939      	ldr	r1, [r7, #16]
 8004940:	6978      	ldr	r0, [r7, #20]
 8004942:	f7fe ff90 	bl	8003866 <_ntoa_long>
 8004946:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8004948:	e0b4      	b.n	8004ab4 <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800494a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <_vsnprintf+0x594>
 8004954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004958:	1d1a      	adds	r2, r3, #4
 800495a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e012      	b.n	800498a <_vsnprintf+0x5ba>
 8004964:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <_vsnprintf+0x5ae>
 800496e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	b21b      	sxth	r3, r3
 800497c:	e005      	b.n	800498a <_vsnprintf+0x5ba>
 800497e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004982:	1d1a      	adds	r2, r3, #4
 8004984:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	bfb8      	it	lt
 8004992:	425b      	neglt	r3, r3
 8004994:	4619      	mov	r1, r3
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	0fdb      	lsrs	r3, r3, #31
 800499a:	b2db      	uxtb	r3, r3
 800499c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800499e:	9205      	str	r2, [sp, #20]
 80049a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80049a2:	9204      	str	r2, [sp, #16]
 80049a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049a6:	9203      	str	r2, [sp, #12]
 80049a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049aa:	9202      	str	r2, [sp, #8]
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	9100      	str	r1, [sp, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b4:	6939      	ldr	r1, [r7, #16]
 80049b6:	6978      	ldr	r0, [r7, #20]
 80049b8:	f7fe ff55 	bl	8003866 <_ntoa_long>
 80049bc:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 80049be:	e079      	b.n	8004ab4 <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80049c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d022      	beq.n	8004a10 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80049ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049ce:	3307      	adds	r3, #7
 80049d0:	f023 0307 	bic.w	r3, r3, #7
 80049d4:	f103 0208 	add.w	r2, r3, #8
 80049d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80049dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049e2:	2000      	movs	r0, #0
 80049e4:	460d      	mov	r5, r1
 80049e6:	4606      	mov	r6, r0
 80049e8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80049ea:	9108      	str	r1, [sp, #32]
 80049ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049ee:	9107      	str	r1, [sp, #28]
 80049f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80049f2:	9106      	str	r1, [sp, #24]
 80049f4:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80049f8:	2100      	movs	r1, #0
 80049fa:	9102      	str	r1, [sp, #8]
 80049fc:	e9cd 2300 	strd	r2, r3, [sp]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a04:	6939      	ldr	r1, [r7, #16]
 8004a06:	6978      	ldr	r0, [r7, #20]
 8004a08:	f7fe ff93 	bl	8003932 <_ntoa_long_long>
 8004a0c:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004a0e:	e051      	b.n	8004ab4 <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8004a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d018      	beq.n	8004a4c <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a28:	9205      	str	r2, [sp, #20]
 8004a2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a2c:	9204      	str	r2, [sp, #16]
 8004a2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a30:	9203      	str	r2, [sp, #12]
 8004a32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a34:	9202      	str	r2, [sp, #8]
 8004a36:	2200      	movs	r2, #0
 8004a38:	9201      	str	r2, [sp, #4]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a40:	6939      	ldr	r1, [r7, #16]
 8004a42:	6978      	ldr	r0, [r7, #20]
 8004a44:	f7fe ff0f 	bl	8003866 <_ntoa_long>
 8004a48:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004a4a:	e033      	b.n	8004ab4 <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d007      	beq.n	8004a66 <_vsnprintf+0x696>
 8004a56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a5a:	1d1a      	adds	r2, r3, #4
 8004a5c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e012      	b.n	8004a8c <_vsnprintf+0x6bc>
 8004a66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <_vsnprintf+0x6b0>
 8004a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a74:	1d1a      	adds	r2, r3, #4
 8004a76:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	e005      	b.n	8004a8c <_vsnprintf+0x6bc>
 8004a80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a84:	1d1a      	adds	r2, r3, #4
 8004a86:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a90:	9305      	str	r3, [sp, #20]
 8004a92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a94:	9304      	str	r3, [sp, #16]
 8004a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a98:	9303      	str	r3, [sp, #12]
 8004a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9c:	9302      	str	r3, [sp, #8]
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	9301      	str	r3, [sp, #4]
 8004aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004aaa:	6939      	ldr	r1, [r7, #16]
 8004aac:	6978      	ldr	r0, [r7, #20]
 8004aae:	f7fe feda 	bl	8003866 <_ntoa_long>
 8004ab2:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]
        break;
 8004aba:	e166      	b.n	8004d8a <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b46      	cmp	r3, #70	; 0x46
 8004ac2:	d103      	bne.n	8004acc <_vsnprintf+0x6fc>
 8004ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac6:	f043 0320 	orr.w	r3, r3, #32
 8004aca:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ad0:	3307      	adds	r3, #7
 8004ad2:	f023 0307 	bic.w	r3, r3, #7
 8004ad6:	f103 0208 	add.w	r2, r3, #8
 8004ada:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ade:	ed93 7b00 	vldr	d7, [r3]
 8004ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae4:	9302      	str	r3, [sp, #8]
 8004ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	eeb0 0a47 	vmov.f32	s0, s14
 8004af2:	eef0 0a67 	vmov.f32	s1, s15
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004afa:	6939      	ldr	r1, [r7, #16]
 8004afc:	6978      	ldr	r0, [r7, #20]
 8004afe:	f7fe ff87 	bl	8003a10 <_ftoa>
 8004b02:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	3301      	adds	r3, #1
 8004b08:	60bb      	str	r3, [r7, #8]
        break;
 8004b0a:	e13e      	b.n	8004d8a <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b67      	cmp	r3, #103	; 0x67
 8004b12:	d003      	beq.n	8004b1c <_vsnprintf+0x74c>
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b47      	cmp	r3, #71	; 0x47
 8004b1a:	d103      	bne.n	8004b24 <_vsnprintf+0x754>
 8004b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b1e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b22:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b45      	cmp	r3, #69	; 0x45
 8004b2a:	d003      	beq.n	8004b34 <_vsnprintf+0x764>
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b47      	cmp	r3, #71	; 0x47
 8004b32:	d103      	bne.n	8004b3c <_vsnprintf+0x76c>
 8004b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b36:	f043 0320 	orr.w	r3, r3, #32
 8004b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b40:	3307      	adds	r3, #7
 8004b42:	f023 0307 	bic.w	r3, r3, #7
 8004b46:	f103 0208 	add.w	r2, r3, #8
 8004b4a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004b4e:	ed93 7b00 	vldr	d7, [r3]
 8004b52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b54:	9302      	str	r3, [sp, #8]
 8004b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	eeb0 0a47 	vmov.f32	s0, s14
 8004b62:	eef0 0a67 	vmov.f32	s1, s15
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b6a:	6939      	ldr	r1, [r7, #16]
 8004b6c:	6978      	ldr	r0, [r7, #20]
 8004b6e:	f7ff f9a7 	bl	8003ec0 <_etoa>
 8004b72:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	3301      	adds	r3, #1
 8004b78:	60bb      	str	r3, [r7, #8]
        break;
 8004b7a:	e106      	b.n	8004d8a <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8004b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10e      	bne.n	8004ba8 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8004b8a:	e007      	b.n	8004b9c <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8004b8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b8e:	1c53      	adds	r3, r2, #1
 8004b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b92:	697c      	ldr	r4, [r7, #20]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6939      	ldr	r1, [r7, #16]
 8004b98:	2020      	movs	r0, #32
 8004b9a:	47a0      	blx	r4
          while (l++ < width) {
 8004b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	647a      	str	r2, [r7, #68]	; 0x44
 8004ba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d8f1      	bhi.n	8004b8c <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004ba8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bac:	1d1a      	adds	r2, r3, #4
 8004bae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b2d8      	uxtb	r0, r3
 8004bb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bb8:	1c53      	adds	r3, r2, #1
 8004bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bbc:	697c      	ldr	r4, [r7, #20]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6939      	ldr	r1, [r7, #16]
 8004bc2:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8004bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00e      	beq.n	8004bec <_vsnprintf+0x81c>
          while (l++ < width) {
 8004bce:	e007      	b.n	8004be0 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8004bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004bd2:	1c53      	adds	r3, r2, #1
 8004bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bd6:	697c      	ldr	r4, [r7, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6939      	ldr	r1, [r7, #16]
 8004bdc:	2020      	movs	r0, #32
 8004bde:	47a0      	blx	r4
          while (l++ < width) {
 8004be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	647a      	str	r2, [r7, #68]	; 0x44
 8004be6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d8f1      	bhi.n	8004bd0 <_vsnprintf+0x800>
          }
        }
        format++;
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	60bb      	str	r3, [r7, #8]
        break;
 8004bf2:	e0ca      	b.n	8004d8a <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8004bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bf8:	1d1a      	adds	r2, r3, #4
 8004bfa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <_vsnprintf+0x83c>
 8004c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0a:	e001      	b.n	8004c10 <_vsnprintf+0x840>
 8004c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c10:	4619      	mov	r1, r3
 8004c12:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004c14:	f7fe fca3 	bl	800355e <_strnlen_s>
 8004c18:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8004c1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 8004c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	bf28      	it	cs
 8004c2c:	4613      	movcs	r3, r2
 8004c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 8004c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11a      	bne.n	8004c70 <_vsnprintf+0x8a0>
          while (l++ < width) {
 8004c3a:	e007      	b.n	8004c4c <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 8004c3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c3e:	1c53      	adds	r3, r2, #1
 8004c40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c42:	697c      	ldr	r4, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6939      	ldr	r1, [r7, #16]
 8004c48:	2020      	movs	r0, #32
 8004c4a:	47a0      	blx	r4
          while (l++ < width) {
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4e:	1c5a      	adds	r2, r3, #1
 8004c50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d8f1      	bhi.n	8004c3c <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004c58:	e00a      	b.n	8004c70 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 8004c5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	643a      	str	r2, [r7, #64]	; 0x40
 8004c60:	7818      	ldrb	r0, [r3, #0]
 8004c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c64:	1c53      	adds	r3, r2, #1
 8004c66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c68:	697c      	ldr	r4, [r7, #20]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6939      	ldr	r1, [r7, #16]
 8004c6e:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d009      	beq.n	8004c8c <_vsnprintf+0x8bc>
 8004c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0eb      	beq.n	8004c5a <_vsnprintf+0x88a>
 8004c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c84:	1e5a      	subs	r2, r3, #1
 8004c86:	657a      	str	r2, [r7, #84]	; 0x54
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1e6      	bne.n	8004c5a <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8004c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00e      	beq.n	8004cb4 <_vsnprintf+0x8e4>
          while (l++ < width) {
 8004c96:	e007      	b.n	8004ca8 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8004c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004c9a:	1c53      	adds	r3, r2, #1
 8004c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c9e:	697c      	ldr	r4, [r7, #20]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6939      	ldr	r1, [r7, #16]
 8004ca4:	2020      	movs	r0, #32
 8004ca6:	47a0      	blx	r4
          while (l++ < width) {
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004cae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d8f1      	bhi.n	8004c98 <_vsnprintf+0x8c8>
          }
        }
        format++;
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60bb      	str	r3, [r7, #8]
        break;
 8004cba:	e066      	b.n	8004d8a <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004cbc:	2308      	movs	r3, #8
 8004cbe:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc2:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8004cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8004cce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d023      	beq.n	8004d1e <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8004cd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cda:	1d1a      	adds	r2, r3, #4
 8004cdc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	603a      	str	r2, [r7, #0]
 8004ce8:	607b      	str	r3, [r7, #4]
 8004cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cec:	9308      	str	r3, [sp, #32]
 8004cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cf0:	9307      	str	r3, [sp, #28]
 8004cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf4:	9306      	str	r3, [sp, #24]
 8004cf6:	f04f 0210 	mov.w	r2, #16
 8004cfa:	f04f 0300 	mov.w	r3, #0
 8004cfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9302      	str	r3, [sp, #8]
 8004d06:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d0a:	e9cd 3400 	strd	r3, r4, [sp]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d12:	6939      	ldr	r1, [r7, #16]
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	f7fe fe0c 	bl	8003932 <_ntoa_long_long>
 8004d1a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8004d1c:	e018      	b.n	8004d50 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004d1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d22:	1d1a      	adds	r2, r3, #4
 8004d24:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2e:	9305      	str	r3, [sp, #20]
 8004d30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d32:	9304      	str	r3, [sp, #16]
 8004d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d36:	9303      	str	r3, [sp, #12]
 8004d38:	2310      	movs	r3, #16
 8004d3a:	9302      	str	r3, [sp, #8]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	9200      	str	r2, [sp, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d46:	6939      	ldr	r1, [r7, #16]
 8004d48:	6978      	ldr	r0, [r7, #20]
 8004d4a:	f7fe fd8c 	bl	8003866 <_ntoa_long>
 8004d4e:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	3301      	adds	r3, #1
 8004d54:	60bb      	str	r3, [r7, #8]
        break;
 8004d56:	e018      	b.n	8004d8a <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8004d58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d5a:	1c53      	adds	r3, r2, #1
 8004d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d5e:	697c      	ldr	r4, [r7, #20]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6939      	ldr	r1, [r7, #16]
 8004d64:	2025      	movs	r0, #37	; 0x25
 8004d66:	47a0      	blx	r4
        format++;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
        break;
 8004d6e:	e00c      	b.n	8004d8a <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	7818      	ldrb	r0, [r3, #0]
 8004d74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d76:	1c53      	adds	r3, r2, #1
 8004d78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d7a:	697c      	ldr	r4, [r7, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6939      	ldr	r1, [r7, #16]
 8004d80:	47a0      	blx	r4
        format++;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	3301      	adds	r3, #1
 8004d86:	60bb      	str	r3, [r7, #8]
        break;
 8004d88:	bf00      	nop
  while (*format)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	f47f ab30 	bne.w	80043f4 <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d302      	bcc.n	8004da2 <_vsnprintf+0x9d2>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	1e5a      	subs	r2, r3, #1
 8004da0:	e000      	b.n	8004da4 <_vsnprintf+0x9d4>
 8004da2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004da4:	697c      	ldr	r4, [r7, #20]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6939      	ldr	r1, [r7, #16]
 8004daa:	2000      	movs	r0, #0
 8004dac:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3764      	adds	r7, #100	; 0x64
 8004db4:	46bd      	mov	sp, r7
 8004db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dba:	bf00      	nop

08004dbc <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004dbc:	b40f      	push	{r0, r1, r2, r3}
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b086      	sub	sp, #24
 8004dc2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004dc4:	f107 031c 	add.w	r3, r7, #28
 8004dc8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8004dca:	1d39      	adds	r1, r7, #4
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd6:	4806      	ldr	r0, [pc, #24]	; (8004df0 <printf_+0x34>)
 8004dd8:	f7ff fafa 	bl	80043d0 <_vsnprintf>
 8004ddc:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dea:	b004      	add	sp, #16
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	08003539 	.word	0x08003539

08004df4 <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 8004df4:	b40e      	push	{r1, r2, r3}
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b087      	sub	sp, #28
 8004dfa:	af02      	add	r7, sp, #8
 8004dfc:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8004dfe:	f107 0320 	add.w	r3, r7, #32
 8004e02:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4805      	ldr	r0, [pc, #20]	; (8004e28 <sprintf_+0x34>)
 8004e12:	f7ff fadd 	bl	80043d0 <_vsnprintf>
 8004e16:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8004e18:	68fb      	ldr	r3, [r7, #12]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e24:	b003      	add	sp, #12
 8004e26:	4770      	bx	lr
 8004e28:	080034ef 	.word	0x080034ef

08004e2c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b086      	sub	sp, #24
 8004e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004e32:	1d3b      	adds	r3, r7, #4
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	605a      	str	r2, [r3, #4]
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	60da      	str	r2, [r3, #12]
 8004e3e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004e40:	2300      	movs	r3, #0
 8004e42:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004e44:	4b24      	ldr	r3, [pc, #144]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004e46:	4a25      	ldr	r2, [pc, #148]	; (8004edc <MX_RTC_Init+0xb0>)
 8004e48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004e4a:	4b23      	ldr	r3, [pc, #140]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004e50:	4b21      	ldr	r3, [pc, #132]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004e52:	227f      	movs	r2, #127	; 0x7f
 8004e54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004e56:	4b20      	ldr	r3, [pc, #128]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004e58:	22ff      	movs	r2, #255	; 0xff
 8004e5a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004e5c:	4b1e      	ldr	r3, [pc, #120]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004e62:	4b1d      	ldr	r3, [pc, #116]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004e68:	4b1b      	ldr	r3, [pc, #108]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004e6e:	481a      	ldr	r0, [pc, #104]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004e70:	f003 f9b2 	bl	80081d8 <HAL_RTC_Init>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8004e7a:	f7fe fb33 	bl	80034e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8004e7e:	2307      	movs	r3, #7
 8004e80:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 8004e82:	233b      	movs	r3, #59	; 0x3b
 8004e84:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 30;
 8004e86:	231e      	movs	r3, #30
 8004e88:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004e92:	1d3b      	adds	r3, r7, #4
 8004e94:	2200      	movs	r2, #0
 8004e96:	4619      	mov	r1, r3
 8004e98:	480f      	ldr	r0, [pc, #60]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004e9a:	f003 fa13 	bl	80082c4 <HAL_RTC_SetTime>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004ea4:	f7fe fb1e 	bl	80034e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8004eac:	2301      	movs	r3, #1
 8004eae:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8004eb8:	463b      	mov	r3, r7
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4806      	ldr	r0, [pc, #24]	; (8004ed8 <MX_RTC_Init+0xac>)
 8004ec0:	f003 faf8 	bl	80084b4 <HAL_RTC_SetDate>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8004eca:	f7fe fb0b 	bl	80034e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004ece:	bf00      	nop
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	2000075c 	.word	0x2000075c
 8004edc:	40002800 	.word	0x40002800

08004ee0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ee8:	f107 0308 	add.w	r3, r7, #8
 8004eec:	2200      	movs	r2, #0
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	605a      	str	r2, [r3, #4]
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	60da      	str	r2, [r3, #12]
 8004ef6:	611a      	str	r2, [r3, #16]
 8004ef8:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a0c      	ldr	r2, [pc, #48]	; (8004f30 <HAL_RTC_MspInit+0x50>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d111      	bne.n	8004f28 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004f04:	2302      	movs	r3, #2
 8004f06:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004f08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f0c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f0e:	f107 0308 	add.w	r3, r7, #8
 8004f12:	4618      	mov	r0, r3
 8004f14:	f003 f870 	bl	8007ff8 <HAL_RCCEx_PeriphCLKConfig>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004f1e:	f7fe fae1 	bl	80034e4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f22:	4b04      	ldr	r3, [pc, #16]	; (8004f34 <HAL_RTC_MspInit+0x54>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004f28:	bf00      	nop
 8004f2a:	3720      	adds	r7, #32
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	40002800 	.word	0x40002800
 8004f34:	42470e3c 	.word	0x42470e3c

08004f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	4b12      	ldr	r3, [pc, #72]	; (8004f8c <HAL_MspInit+0x54>)
 8004f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f46:	4a11      	ldr	r2, [pc, #68]	; (8004f8c <HAL_MspInit+0x54>)
 8004f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f4e:	4b0f      	ldr	r3, [pc, #60]	; (8004f8c <HAL_MspInit+0x54>)
 8004f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4b0b      	ldr	r3, [pc, #44]	; (8004f8c <HAL_MspInit+0x54>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <HAL_MspInit+0x54>)
 8004f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f68:	6413      	str	r3, [r2, #64]	; 0x40
 8004f6a:	4b08      	ldr	r3, [pc, #32]	; (8004f8c <HAL_MspInit+0x54>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f76:	2200      	movs	r2, #0
 8004f78:	210f      	movs	r1, #15
 8004f7a:	f06f 0001 	mvn.w	r0, #1
 8004f7e:	f000 fbfd 	bl	800577c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40023800 	.word	0x40023800

08004f90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08c      	sub	sp, #48	; 0x30
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	4b2e      	ldr	r3, [pc, #184]	; (8005060 <HAL_InitTick+0xd0>)
 8004fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa8:	4a2d      	ldr	r2, [pc, #180]	; (8005060 <HAL_InitTick+0xd0>)
 8004faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fae:	6453      	str	r3, [r2, #68]	; 0x44
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <HAL_InitTick+0xd0>)
 8004fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb8:	60bb      	str	r3, [r7, #8]
 8004fba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004fbc:	f107 020c 	add.w	r2, r7, #12
 8004fc0:	f107 0310 	add.w	r3, r7, #16
 8004fc4:	4611      	mov	r1, r2
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f002 ffe4 	bl	8007f94 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004fcc:	f002 ffce 	bl	8007f6c <HAL_RCC_GetPCLK2Freq>
 8004fd0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	4a23      	ldr	r2, [pc, #140]	; (8005064 <HAL_InitTick+0xd4>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	0c9b      	lsrs	r3, r3, #18
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8004fe0:	4b21      	ldr	r3, [pc, #132]	; (8005068 <HAL_InitTick+0xd8>)
 8004fe2:	4a22      	ldr	r2, [pc, #136]	; (800506c <HAL_InitTick+0xdc>)
 8004fe4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_InitTick+0xd8>)
 8004fe8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fec:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8004fee:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <HAL_InitTick+0xd8>)
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8004ff4:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <HAL_InitTick+0xd8>)
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ffa:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_InitTick+0xd8>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005000:	4b19      	ldr	r3, [pc, #100]	; (8005068 <HAL_InitTick+0xd8>)
 8005002:	2200      	movs	r2, #0
 8005004:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8005006:	4818      	ldr	r0, [pc, #96]	; (8005068 <HAL_InitTick+0xd8>)
 8005008:	f003 fd0e 	bl	8008a28 <HAL_TIM_Base_Init>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005012:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d11b      	bne.n	8005052 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 800501a:	4813      	ldr	r0, [pc, #76]	; (8005068 <HAL_InitTick+0xd8>)
 800501c:	f003 fd54 	bl	8008ac8 <HAL_TIM_Base_Start_IT>
 8005020:	4603      	mov	r3, r0
 8005022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800502a:	2b00      	cmp	r3, #0
 800502c:	d111      	bne.n	8005052 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800502e:	2019      	movs	r0, #25
 8005030:	f000 fbc0 	bl	80057b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	d808      	bhi.n	800504c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800503a:	2200      	movs	r2, #0
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	2019      	movs	r0, #25
 8005040:	f000 fb9c 	bl	800577c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005044:	4a0a      	ldr	r2, [pc, #40]	; (8005070 <HAL_InitTick+0xe0>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6013      	str	r3, [r2, #0]
 800504a:	e002      	b.n	8005052 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8005052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005056:	4618      	mov	r0, r3
 8005058:	3730      	adds	r7, #48	; 0x30
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800
 8005064:	431bde83 	.word	0x431bde83
 8005068:	2000077c 	.word	0x2000077c
 800506c:	40014400 	.word	0x40014400
 8005070:	2000000c 	.word	0x2000000c

08005074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005078:	e7fe      	b.n	8005078 <NMI_Handler+0x4>

0800507a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800507a:	b480      	push	{r7}
 800507c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800507e:	e7fe      	b.n	800507e <HardFault_Handler+0x4>

08005080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005080:	b480      	push	{r7}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005084:	e7fe      	b.n	8005084 <MemManage_Handler+0x4>

08005086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005086:	b480      	push	{r7}
 8005088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800508a:	e7fe      	b.n	800508a <BusFault_Handler+0x4>

0800508c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005090:	e7fe      	b.n	8005090 <UsageFault_Handler+0x4>

08005092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005092:	b480      	push	{r7}
 8005094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80050a4:	4802      	ldr	r0, [pc, #8]	; (80050b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80050a6:	f003 fe7b 	bl	8008da0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80050aa:	bf00      	nop
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	2000077c 	.word	0x2000077c

080050b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  return 1;
 80050b8:	2301      	movs	r3, #1
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <_kill>:

int _kill(int pid, int sig)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050ce:	f00a f96f 	bl	800f3b0 <__errno>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2216      	movs	r2, #22
 80050d6:	601a      	str	r2, [r3, #0]
  return -1;
 80050d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3708      	adds	r7, #8
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <_exit>:

void _exit (int status)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050ec:	f04f 31ff 	mov.w	r1, #4294967295
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f7ff ffe7 	bl	80050c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80050f6:	e7fe      	b.n	80050f6 <_exit+0x12>

080050f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005104:	2300      	movs	r3, #0
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	e00a      	b.n	8005120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800510a:	f3af 8000 	nop.w
 800510e:	4601      	mov	r1, r0
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	60ba      	str	r2, [r7, #8]
 8005116:	b2ca      	uxtb	r2, r1
 8005118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	3301      	adds	r3, #1
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	dbf0      	blt.n	800510a <_read+0x12>
  }

  return len;
 8005128:	687b      	ldr	r3, [r7, #4]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b086      	sub	sp, #24
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	e009      	b.n	8005158 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	1c5a      	adds	r2, r3, #1
 8005148:	60ba      	str	r2, [r7, #8]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	4618      	mov	r0, r3
 800514e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	3301      	adds	r3, #1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	697a      	ldr	r2, [r7, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	429a      	cmp	r2, r3
 800515e:	dbf1      	blt.n	8005144 <_write+0x12>
  }
  return len;
 8005160:	687b      	ldr	r3, [r7, #4]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <_close>:

int _close(int file)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005192:	605a      	str	r2, [r3, #4]
  return 0;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <_isatty>:

int _isatty(int file)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80051aa:	2301      	movs	r3, #1
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
	...

080051d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051dc:	4a14      	ldr	r2, [pc, #80]	; (8005230 <_sbrk+0x5c>)
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <_sbrk+0x60>)
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051e8:	4b13      	ldr	r3, [pc, #76]	; (8005238 <_sbrk+0x64>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d102      	bne.n	80051f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051f0:	4b11      	ldr	r3, [pc, #68]	; (8005238 <_sbrk+0x64>)
 80051f2:	4a12      	ldr	r2, [pc, #72]	; (800523c <_sbrk+0x68>)
 80051f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051f6:	4b10      	ldr	r3, [pc, #64]	; (8005238 <_sbrk+0x64>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4413      	add	r3, r2
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	429a      	cmp	r2, r3
 8005202:	d207      	bcs.n	8005214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005204:	f00a f8d4 	bl	800f3b0 <__errno>
 8005208:	4603      	mov	r3, r0
 800520a:	220c      	movs	r2, #12
 800520c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800520e:	f04f 33ff 	mov.w	r3, #4294967295
 8005212:	e009      	b.n	8005228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005214:	4b08      	ldr	r3, [pc, #32]	; (8005238 <_sbrk+0x64>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <_sbrk+0x64>)
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4413      	add	r3, r2
 8005222:	4a05      	ldr	r2, [pc, #20]	; (8005238 <_sbrk+0x64>)
 8005224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005226:	68fb      	ldr	r3, [r7, #12]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20020000 	.word	0x20020000
 8005234:	00000400 	.word	0x00000400
 8005238:	200007c4 	.word	0x200007c4
 800523c:	200096d0 	.word	0x200096d0

08005240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005240:	b480      	push	{r7}
 8005242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005244:	4b06      	ldr	r3, [pc, #24]	; (8005260 <SystemInit+0x20>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524a:	4a05      	ldr	r2, [pc, #20]	; (8005260 <SystemInit+0x20>)
 800524c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	e000ed00 	.word	0xe000ed00

08005264 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b08e      	sub	sp, #56	; 0x38
 8005268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800526a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800526e:	2200      	movs	r2, #0
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	605a      	str	r2, [r3, #4]
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005278:	f107 0320 	add.w	r3, r7, #32
 800527c:	2200      	movs	r2, #0
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	605a      	str	r2, [r3, #4]
 800528a:	609a      	str	r2, [r3, #8]
 800528c:	60da      	str	r2, [r3, #12]
 800528e:	611a      	str	r2, [r3, #16]
 8005290:	615a      	str	r2, [r3, #20]
 8005292:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005294:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <MX_TIM3_Init+0xe4>)
 8005296:	4a2d      	ldr	r2, [pc, #180]	; (800534c <MX_TIM3_Init+0xe8>)
 8005298:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800529a:	4b2b      	ldr	r3, [pc, #172]	; (8005348 <MX_TIM3_Init+0xe4>)
 800529c:	2253      	movs	r2, #83	; 0x53
 800529e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052a0:	4b29      	ldr	r3, [pc, #164]	; (8005348 <MX_TIM3_Init+0xe4>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80052a6:	4b28      	ldr	r3, [pc, #160]	; (8005348 <MX_TIM3_Init+0xe4>)
 80052a8:	2263      	movs	r2, #99	; 0x63
 80052aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052ac:	4b26      	ldr	r3, [pc, #152]	; (8005348 <MX_TIM3_Init+0xe4>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052b2:	4b25      	ldr	r3, [pc, #148]	; (8005348 <MX_TIM3_Init+0xe4>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80052b8:	4823      	ldr	r0, [pc, #140]	; (8005348 <MX_TIM3_Init+0xe4>)
 80052ba:	f003 fbb5 	bl	8008a28 <HAL_TIM_Base_Init>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80052c4:	f7fe f90e 	bl	80034e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80052c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80052ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d2:	4619      	mov	r1, r3
 80052d4:	481c      	ldr	r0, [pc, #112]	; (8005348 <MX_TIM3_Init+0xe4>)
 80052d6:	f003 ff2d 	bl	8009134 <HAL_TIM_ConfigClockSource>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d001      	beq.n	80052e4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80052e0:	f7fe f900 	bl	80034e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80052e4:	4818      	ldr	r0, [pc, #96]	; (8005348 <MX_TIM3_Init+0xe4>)
 80052e6:	f003 fc51 	bl	8008b8c <HAL_TIM_PWM_Init>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d001      	beq.n	80052f4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80052f0:	f7fe f8f8 	bl	80034e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80052f4:	2320      	movs	r3, #32
 80052f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80052fc:	f107 0320 	add.w	r3, r7, #32
 8005300:	4619      	mov	r1, r3
 8005302:	4811      	ldr	r0, [pc, #68]	; (8005348 <MX_TIM3_Init+0xe4>)
 8005304:	f004 fad2 	bl	80098ac <HAL_TIMEx_MasterConfigSynchronization>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800530e:	f7fe f8e9 	bl	80034e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005312:	2360      	movs	r3, #96	; 0x60
 8005314:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005322:	1d3b      	adds	r3, r7, #4
 8005324:	2200      	movs	r2, #0
 8005326:	4619      	mov	r1, r3
 8005328:	4807      	ldr	r0, [pc, #28]	; (8005348 <MX_TIM3_Init+0xe4>)
 800532a:	f003 fe41 	bl	8008fb0 <HAL_TIM_PWM_ConfigChannel>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8005334:	f7fe f8d6 	bl	80034e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005338:	4803      	ldr	r0, [pc, #12]	; (8005348 <MX_TIM3_Init+0xe4>)
 800533a:	f000 f82b 	bl	8005394 <HAL_TIM_MspPostInit>

}
 800533e:	bf00      	nop
 8005340:	3738      	adds	r7, #56	; 0x38
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	200007c8 	.word	0x200007c8
 800534c:	40000400 	.word	0x40000400

08005350 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a0b      	ldr	r2, [pc, #44]	; (800538c <HAL_TIM_Base_MspInit+0x3c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d10d      	bne.n	800537e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <HAL_TIM_Base_MspInit+0x40>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536a:	4a09      	ldr	r2, [pc, #36]	; (8005390 <HAL_TIM_Base_MspInit+0x40>)
 800536c:	f043 0302 	orr.w	r3, r3, #2
 8005370:	6413      	str	r3, [r2, #64]	; 0x40
 8005372:	4b07      	ldr	r3, [pc, #28]	; (8005390 <HAL_TIM_Base_MspInit+0x40>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800537e:	bf00      	nop
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
 800538a:	bf00      	nop
 800538c:	40000400 	.word	0x40000400
 8005390:	40023800 	.word	0x40023800

08005394 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800539c:	f107 030c 	add.w	r3, r7, #12
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	60da      	str	r2, [r3, #12]
 80053aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a12      	ldr	r2, [pc, #72]	; (80053fc <HAL_TIM_MspPostInit+0x68>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d11d      	bne.n	80053f2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]
 80053ba:	4b11      	ldr	r3, [pc, #68]	; (8005400 <HAL_TIM_MspPostInit+0x6c>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	4a10      	ldr	r2, [pc, #64]	; (8005400 <HAL_TIM_MspPostInit+0x6c>)
 80053c0:	f043 0301 	orr.w	r3, r3, #1
 80053c4:	6313      	str	r3, [r2, #48]	; 0x30
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <HAL_TIM_MspPostInit+0x6c>)
 80053c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	60bb      	str	r3, [r7, #8]
 80053d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = AENABLE_Pin;
 80053d2:	2340      	movs	r3, #64	; 0x40
 80053d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d6:	2302      	movs	r3, #2
 80053d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053de:	2300      	movs	r3, #0
 80053e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80053e2:	2302      	movs	r3, #2
 80053e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(AENABLE_GPIO_Port, &GPIO_InitStruct);
 80053e6:	f107 030c 	add.w	r3, r7, #12
 80053ea:	4619      	mov	r1, r3
 80053ec:	4805      	ldr	r0, [pc, #20]	; (8005404 <HAL_TIM_MspPostInit+0x70>)
 80053ee:	f000 fb4f 	bl	8005a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80053f2:	bf00      	nop
 80053f4:	3720      	adds	r7, #32
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	40000400 	.word	0x40000400
 8005400:	40023800 	.word	0x40023800
 8005404:	40020000 	.word	0x40020000

08005408 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800540c:	4b11      	ldr	r3, [pc, #68]	; (8005454 <MX_USART2_UART_Init+0x4c>)
 800540e:	4a12      	ldr	r2, [pc, #72]	; (8005458 <MX_USART2_UART_Init+0x50>)
 8005410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005412:	4b10      	ldr	r3, [pc, #64]	; (8005454 <MX_USART2_UART_Init+0x4c>)
 8005414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800541a:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <MX_USART2_UART_Init+0x4c>)
 800541c:	2200      	movs	r2, #0
 800541e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005420:	4b0c      	ldr	r3, [pc, #48]	; (8005454 <MX_USART2_UART_Init+0x4c>)
 8005422:	2200      	movs	r2, #0
 8005424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005426:	4b0b      	ldr	r3, [pc, #44]	; (8005454 <MX_USART2_UART_Init+0x4c>)
 8005428:	2200      	movs	r2, #0
 800542a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800542c:	4b09      	ldr	r3, [pc, #36]	; (8005454 <MX_USART2_UART_Init+0x4c>)
 800542e:	220c      	movs	r2, #12
 8005430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005432:	4b08      	ldr	r3, [pc, #32]	; (8005454 <MX_USART2_UART_Init+0x4c>)
 8005434:	2200      	movs	r2, #0
 8005436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005438:	4b06      	ldr	r3, [pc, #24]	; (8005454 <MX_USART2_UART_Init+0x4c>)
 800543a:	2200      	movs	r2, #0
 800543c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800543e:	4805      	ldr	r0, [pc, #20]	; (8005454 <MX_USART2_UART_Init+0x4c>)
 8005440:	f004 fab6 	bl	80099b0 <HAL_UART_Init>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800544a:	f7fe f84b 	bl	80034e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800544e:	bf00      	nop
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000810 	.word	0x20000810
 8005458:	40004400 	.word	0x40004400

0800545c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005464:	f107 0314 	add.w	r3, r7, #20
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	609a      	str	r2, [r3, #8]
 8005470:	60da      	str	r2, [r3, #12]
 8005472:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <HAL_UART_MspInit+0x84>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d12b      	bne.n	80054d6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800547e:	2300      	movs	r3, #0
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <HAL_UART_MspInit+0x88>)
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <HAL_UART_MspInit+0x88>)
 8005488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800548c:	6413      	str	r3, [r2, #64]	; 0x40
 800548e:	4b15      	ldr	r3, [pc, #84]	; (80054e4 <HAL_UART_MspInit+0x88>)
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
 800549e:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <HAL_UART_MspInit+0x88>)
 80054a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a2:	4a10      	ldr	r2, [pc, #64]	; (80054e4 <HAL_UART_MspInit+0x88>)
 80054a4:	f043 0301 	orr.w	r3, r3, #1
 80054a8:	6313      	str	r3, [r2, #48]	; 0x30
 80054aa:	4b0e      	ldr	r3, [pc, #56]	; (80054e4 <HAL_UART_MspInit+0x88>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	60fb      	str	r3, [r7, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80054b6:	230c      	movs	r3, #12
 80054b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ba:	2302      	movs	r3, #2
 80054bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c2:	2303      	movs	r3, #3
 80054c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054c6:	2307      	movs	r3, #7
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ca:	f107 0314 	add.w	r3, r7, #20
 80054ce:	4619      	mov	r1, r3
 80054d0:	4805      	ldr	r0, [pc, #20]	; (80054e8 <HAL_UART_MspInit+0x8c>)
 80054d2:	f000 fadd 	bl	8005a90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80054d6:	bf00      	nop
 80054d8:	3728      	adds	r7, #40	; 0x28
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40004400 	.word	0x40004400
 80054e4:	40023800 	.word	0x40023800
 80054e8:	40020000 	.word	0x40020000

080054ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80054ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054f0:	480d      	ldr	r0, [pc, #52]	; (8005528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054f2:	490e      	ldr	r1, [pc, #56]	; (800552c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054f4:	4a0e      	ldr	r2, [pc, #56]	; (8005530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054f8:	e002      	b.n	8005500 <LoopCopyDataInit>

080054fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054fe:	3304      	adds	r3, #4

08005500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005504:	d3f9      	bcc.n	80054fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005506:	4a0b      	ldr	r2, [pc, #44]	; (8005534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005508:	4c0b      	ldr	r4, [pc, #44]	; (8005538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800550a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800550c:	e001      	b.n	8005512 <LoopFillZerobss>

0800550e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800550e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005510:	3204      	adds	r2, #4

08005512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005514:	d3fb      	bcc.n	800550e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005516:	f7ff fe93 	bl	8005240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800551a:	f009 ff4f 	bl	800f3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800551e:	f7fd ff49 	bl	80033b4 <main>
  bx  lr    
 8005522:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800552c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8005530:	08011c7c 	.word	0x08011c7c
  ldr r2, =_sbss
 8005534:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8005538:	200096cc 	.word	0x200096cc

0800553c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800553c:	e7fe      	b.n	800553c <ADC_IRQHandler>
	...

08005540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005544:	4b0e      	ldr	r3, [pc, #56]	; (8005580 <HAL_Init+0x40>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a0d      	ldr	r2, [pc, #52]	; (8005580 <HAL_Init+0x40>)
 800554a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800554e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_Init+0x40>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <HAL_Init+0x40>)
 8005556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800555a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <HAL_Init+0x40>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a07      	ldr	r2, [pc, #28]	; (8005580 <HAL_Init+0x40>)
 8005562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005568:	2003      	movs	r0, #3
 800556a:	f000 f8fc 	bl	8005766 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800556e:	2005      	movs	r0, #5
 8005570:	f7ff fd0e 	bl	8004f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005574:	f7ff fce0 	bl	8004f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40023c00 	.word	0x40023c00

08005584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005588:	4b06      	ldr	r3, [pc, #24]	; (80055a4 <HAL_IncTick+0x20>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	461a      	mov	r2, r3
 800558e:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <HAL_IncTick+0x24>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4413      	add	r3, r2
 8005594:	4a04      	ldr	r2, [pc, #16]	; (80055a8 <HAL_IncTick+0x24>)
 8005596:	6013      	str	r3, [r2, #0]
}
 8005598:	bf00      	nop
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	20000010 	.word	0x20000010
 80055a8:	20000854 	.word	0x20000854

080055ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return uwTick;
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <HAL_GetTick+0x14>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000854 	.word	0x20000854

080055c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055cc:	f7ff ffee 	bl	80055ac <HAL_GetTick>
 80055d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055dc:	d005      	beq.n	80055ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055de:	4b0a      	ldr	r3, [pc, #40]	; (8005608 <HAL_Delay+0x44>)
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055ea:	bf00      	nop
 80055ec:	f7ff ffde 	bl	80055ac <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d8f7      	bhi.n	80055ec <HAL_Delay+0x28>
  {
  }
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000010 	.word	0x20000010

0800560c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800561c:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <__NVIC_SetPriorityGrouping+0x44>)
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005628:	4013      	ands	r3, r2
 800562a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005634:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800563c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800563e:	4a04      	ldr	r2, [pc, #16]	; (8005650 <__NVIC_SetPriorityGrouping+0x44>)
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	60d3      	str	r3, [r2, #12]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	e000ed00 	.word	0xe000ed00

08005654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <__NVIC_GetPriorityGrouping+0x18>)
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	0a1b      	lsrs	r3, r3, #8
 800565e:	f003 0307 	and.w	r3, r3, #7
}
 8005662:	4618      	mov	r0, r3
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000ed00 	.word	0xe000ed00

08005670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800567a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800567e:	2b00      	cmp	r3, #0
 8005680:	db0b      	blt.n	800569a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	f003 021f 	and.w	r2, r3, #31
 8005688:	4907      	ldr	r1, [pc, #28]	; (80056a8 <__NVIC_EnableIRQ+0x38>)
 800568a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568e:	095b      	lsrs	r3, r3, #5
 8005690:	2001      	movs	r0, #1
 8005692:	fa00 f202 	lsl.w	r2, r0, r2
 8005696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	e000e100 	.word	0xe000e100

080056ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	4603      	mov	r3, r0
 80056b4:	6039      	str	r1, [r7, #0]
 80056b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80056b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	db0a      	blt.n	80056d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	490c      	ldr	r1, [pc, #48]	; (80056f8 <__NVIC_SetPriority+0x4c>)
 80056c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056ca:	0112      	lsls	r2, r2, #4
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	440b      	add	r3, r1
 80056d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056d4:	e00a      	b.n	80056ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	4908      	ldr	r1, [pc, #32]	; (80056fc <__NVIC_SetPriority+0x50>)
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	f003 030f 	and.w	r3, r3, #15
 80056e2:	3b04      	subs	r3, #4
 80056e4:	0112      	lsls	r2, r2, #4
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	440b      	add	r3, r1
 80056ea:	761a      	strb	r2, [r3, #24]
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	e000e100 	.word	0xe000e100
 80056fc:	e000ed00 	.word	0xe000ed00

08005700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005700:	b480      	push	{r7}
 8005702:	b089      	sub	sp, #36	; 0x24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f1c3 0307 	rsb	r3, r3, #7
 800571a:	2b04      	cmp	r3, #4
 800571c:	bf28      	it	cs
 800571e:	2304      	movcs	r3, #4
 8005720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	3304      	adds	r3, #4
 8005726:	2b06      	cmp	r3, #6
 8005728:	d902      	bls.n	8005730 <NVIC_EncodePriority+0x30>
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	3b03      	subs	r3, #3
 800572e:	e000      	b.n	8005732 <NVIC_EncodePriority+0x32>
 8005730:	2300      	movs	r3, #0
 8005732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005734:	f04f 32ff 	mov.w	r2, #4294967295
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43da      	mvns	r2, r3
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	401a      	ands	r2, r3
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005748:	f04f 31ff 	mov.w	r1, #4294967295
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	fa01 f303 	lsl.w	r3, r1, r3
 8005752:	43d9      	mvns	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005758:	4313      	orrs	r3, r2
         );
}
 800575a:	4618      	mov	r0, r3
 800575c:	3724      	adds	r7, #36	; 0x24
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff ff4c 	bl	800560c <__NVIC_SetPriorityGrouping>
}
 8005774:	bf00      	nop
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	4603      	mov	r3, r0
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800578a:	2300      	movs	r3, #0
 800578c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800578e:	f7ff ff61 	bl	8005654 <__NVIC_GetPriorityGrouping>
 8005792:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	6978      	ldr	r0, [r7, #20]
 800579a:	f7ff ffb1 	bl	8005700 <NVIC_EncodePriority>
 800579e:	4602      	mov	r2, r0
 80057a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7ff ff80 	bl	80056ac <__NVIC_SetPriority>
}
 80057ac:	bf00      	nop
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	4603      	mov	r3, r0
 80057bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff ff54 	bl	8005670 <__NVIC_EnableIRQ>
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057dc:	f7ff fee6 	bl	80055ac <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e099      	b.n	8005920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0201 	bic.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800580c:	e00f      	b.n	800582e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800580e:	f7ff fecd 	bl	80055ac <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b05      	cmp	r3, #5
 800581a:	d908      	bls.n	800582e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2220      	movs	r2, #32
 8005820:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2203      	movs	r2, #3
 8005826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e078      	b.n	8005920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e8      	bne.n	800580e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	4b38      	ldr	r3, [pc, #224]	; (8005928 <HAL_DMA_Init+0x158>)
 8005848:	4013      	ands	r3, r2
 800584a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800585a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	2b04      	cmp	r3, #4
 8005886:	d107      	bne.n	8005898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005890:	4313      	orrs	r3, r2
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d117      	bne.n	80058f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00e      	beq.n	80058f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f85f 	bl	8005998 <DMA_CheckFifoParam>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d008      	beq.n	80058f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2240      	movs	r2, #64	; 0x40
 80058e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80058ee:	2301      	movs	r3, #1
 80058f0:	e016      	b.n	8005920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f816 	bl	800592c <DMA_CalcBaseAndBitshift>
 8005900:	4603      	mov	r3, r0
 8005902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005908:	223f      	movs	r2, #63	; 0x3f
 800590a:	409a      	lsls	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	f010803f 	.word	0xf010803f

0800592c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	b2db      	uxtb	r3, r3
 800593a:	3b10      	subs	r3, #16
 800593c:	4a14      	ldr	r2, [pc, #80]	; (8005990 <DMA_CalcBaseAndBitshift+0x64>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	091b      	lsrs	r3, r3, #4
 8005944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005946:	4a13      	ldr	r2, [pc, #76]	; (8005994 <DMA_CalcBaseAndBitshift+0x68>)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d909      	bls.n	800596e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005962:	f023 0303 	bic.w	r3, r3, #3
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	659a      	str	r2, [r3, #88]	; 0x58
 800596c:	e007      	b.n	800597e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005976:	f023 0303 	bic.w	r3, r3, #3
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	aaaaaaab 	.word	0xaaaaaaab
 8005994:	080118f0 	.word	0x080118f0

08005998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d11f      	bne.n	80059f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d856      	bhi.n	8005a66 <DMA_CheckFifoParam+0xce>
 80059b8:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <DMA_CheckFifoParam+0x28>)
 80059ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059be:	bf00      	nop
 80059c0:	080059d1 	.word	0x080059d1
 80059c4:	080059e3 	.word	0x080059e3
 80059c8:	080059d1 	.word	0x080059d1
 80059cc:	08005a67 	.word	0x08005a67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d046      	beq.n	8005a6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e0:	e043      	b.n	8005a6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059ea:	d140      	bne.n	8005a6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059f0:	e03d      	b.n	8005a6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fa:	d121      	bne.n	8005a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d837      	bhi.n	8005a72 <DMA_CheckFifoParam+0xda>
 8005a02:	a201      	add	r2, pc, #4	; (adr r2, 8005a08 <DMA_CheckFifoParam+0x70>)
 8005a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a08:	08005a19 	.word	0x08005a19
 8005a0c:	08005a1f 	.word	0x08005a1f
 8005a10:	08005a19 	.word	0x08005a19
 8005a14:	08005a31 	.word	0x08005a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1c:	e030      	b.n	8005a80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d025      	beq.n	8005a76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a2e:	e022      	b.n	8005a76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a38:	d11f      	bne.n	8005a7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a3e:	e01c      	b.n	8005a7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d903      	bls.n	8005a4e <DMA_CheckFifoParam+0xb6>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d003      	beq.n	8005a54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a4c:	e018      	b.n	8005a80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	73fb      	strb	r3, [r7, #15]
      break;
 8005a52:	e015      	b.n	8005a80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00e      	beq.n	8005a7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	73fb      	strb	r3, [r7, #15]
      break;
 8005a64:	e00b      	b.n	8005a7e <DMA_CheckFifoParam+0xe6>
      break;
 8005a66:	bf00      	nop
 8005a68:	e00a      	b.n	8005a80 <DMA_CheckFifoParam+0xe8>
      break;
 8005a6a:	bf00      	nop
 8005a6c:	e008      	b.n	8005a80 <DMA_CheckFifoParam+0xe8>
      break;
 8005a6e:	bf00      	nop
 8005a70:	e006      	b.n	8005a80 <DMA_CheckFifoParam+0xe8>
      break;
 8005a72:	bf00      	nop
 8005a74:	e004      	b.n	8005a80 <DMA_CheckFifoParam+0xe8>
      break;
 8005a76:	bf00      	nop
 8005a78:	e002      	b.n	8005a80 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a7a:	bf00      	nop
 8005a7c:	e000      	b.n	8005a80 <DMA_CheckFifoParam+0xe8>
      break;
 8005a7e:	bf00      	nop
    }
  } 
  
  return status; 
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop

08005a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b089      	sub	sp, #36	; 0x24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61fb      	str	r3, [r7, #28]
 8005aaa:	e159      	b.n	8005d60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005aac:	2201      	movs	r2, #1
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4013      	ands	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	f040 8148 	bne.w	8005d5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d005      	beq.n	8005ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d130      	bne.n	8005b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	2203      	movs	r2, #3
 8005aee:	fa02 f303 	lsl.w	r3, r2, r3
 8005af2:	43db      	mvns	r3, r3
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	4013      	ands	r3, r2
 8005af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b18:	2201      	movs	r2, #1
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	43db      	mvns	r3, r3
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	4013      	ands	r3, r2
 8005b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 0201 	and.w	r2, r3, #1
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f003 0303 	and.w	r3, r3, #3
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d017      	beq.n	8005b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	2203      	movs	r2, #3
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f003 0303 	and.w	r3, r3, #3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d123      	bne.n	8005bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	08da      	lsrs	r2, r3, #3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	3208      	adds	r2, #8
 8005b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	220f      	movs	r2, #15
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	43db      	mvns	r3, r3
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	4013      	ands	r3, r2
 8005bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	08da      	lsrs	r2, r3, #3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	3208      	adds	r2, #8
 8005bce:	69b9      	ldr	r1, [r7, #24]
 8005bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	2203      	movs	r2, #3
 8005be0:	fa02 f303 	lsl.w	r3, r2, r3
 8005be4:	43db      	mvns	r3, r3
 8005be6:	69ba      	ldr	r2, [r7, #24]
 8005be8:	4013      	ands	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f003 0203 	and.w	r2, r3, #3
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80a2 	beq.w	8005d5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	4b57      	ldr	r3, [pc, #348]	; (8005d78 <HAL_GPIO_Init+0x2e8>)
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	4a56      	ldr	r2, [pc, #344]	; (8005d78 <HAL_GPIO_Init+0x2e8>)
 8005c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c24:	6453      	str	r3, [r2, #68]	; 0x44
 8005c26:	4b54      	ldr	r3, [pc, #336]	; (8005d78 <HAL_GPIO_Init+0x2e8>)
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c32:	4a52      	ldr	r2, [pc, #328]	; (8005d7c <HAL_GPIO_Init+0x2ec>)
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	089b      	lsrs	r3, r3, #2
 8005c38:	3302      	adds	r3, #2
 8005c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	220f      	movs	r2, #15
 8005c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	69ba      	ldr	r2, [r7, #24]
 8005c52:	4013      	ands	r3, r2
 8005c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a49      	ldr	r2, [pc, #292]	; (8005d80 <HAL_GPIO_Init+0x2f0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d019      	beq.n	8005c92 <HAL_GPIO_Init+0x202>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a48      	ldr	r2, [pc, #288]	; (8005d84 <HAL_GPIO_Init+0x2f4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d013      	beq.n	8005c8e <HAL_GPIO_Init+0x1fe>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a47      	ldr	r2, [pc, #284]	; (8005d88 <HAL_GPIO_Init+0x2f8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d00d      	beq.n	8005c8a <HAL_GPIO_Init+0x1fa>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a46      	ldr	r2, [pc, #280]	; (8005d8c <HAL_GPIO_Init+0x2fc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d007      	beq.n	8005c86 <HAL_GPIO_Init+0x1f6>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a45      	ldr	r2, [pc, #276]	; (8005d90 <HAL_GPIO_Init+0x300>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d101      	bne.n	8005c82 <HAL_GPIO_Init+0x1f2>
 8005c7e:	2304      	movs	r3, #4
 8005c80:	e008      	b.n	8005c94 <HAL_GPIO_Init+0x204>
 8005c82:	2307      	movs	r3, #7
 8005c84:	e006      	b.n	8005c94 <HAL_GPIO_Init+0x204>
 8005c86:	2303      	movs	r3, #3
 8005c88:	e004      	b.n	8005c94 <HAL_GPIO_Init+0x204>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e002      	b.n	8005c94 <HAL_GPIO_Init+0x204>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <HAL_GPIO_Init+0x204>
 8005c92:	2300      	movs	r3, #0
 8005c94:	69fa      	ldr	r2, [r7, #28]
 8005c96:	f002 0203 	and.w	r2, r2, #3
 8005c9a:	0092      	lsls	r2, r2, #2
 8005c9c:	4093      	lsls	r3, r2
 8005c9e:	69ba      	ldr	r2, [r7, #24]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ca4:	4935      	ldr	r1, [pc, #212]	; (8005d7c <HAL_GPIO_Init+0x2ec>)
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	089b      	lsrs	r3, r3, #2
 8005caa:	3302      	adds	r3, #2
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005cb2:	4b38      	ldr	r3, [pc, #224]	; (8005d94 <HAL_GPIO_Init+0x304>)
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cd6:	4a2f      	ldr	r2, [pc, #188]	; (8005d94 <HAL_GPIO_Init+0x304>)
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cdc:	4b2d      	ldr	r3, [pc, #180]	; (8005d94 <HAL_GPIO_Init+0x304>)
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	69ba      	ldr	r2, [r7, #24]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005d00:	4a24      	ldr	r2, [pc, #144]	; (8005d94 <HAL_GPIO_Init+0x304>)
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005d06:	4b23      	ldr	r3, [pc, #140]	; (8005d94 <HAL_GPIO_Init+0x304>)
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	43db      	mvns	r3, r3
 8005d10:	69ba      	ldr	r2, [r7, #24]
 8005d12:	4013      	ands	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005d22:	69ba      	ldr	r2, [r7, #24]
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d2a:	4a1a      	ldr	r2, [pc, #104]	; (8005d94 <HAL_GPIO_Init+0x304>)
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d30:	4b18      	ldr	r3, [pc, #96]	; (8005d94 <HAL_GPIO_Init+0x304>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	43db      	mvns	r3, r3
 8005d3a:	69ba      	ldr	r2, [r7, #24]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d003      	beq.n	8005d54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d54:	4a0f      	ldr	r2, [pc, #60]	; (8005d94 <HAL_GPIO_Init+0x304>)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	2b0f      	cmp	r3, #15
 8005d64:	f67f aea2 	bls.w	8005aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3724      	adds	r7, #36	; 0x24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40013800 	.word	0x40013800
 8005d80:	40020000 	.word	0x40020000
 8005d84:	40020400 	.word	0x40020400
 8005d88:	40020800 	.word	0x40020800
 8005d8c:	40020c00 	.word	0x40020c00
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40013c00 	.word	0x40013c00

08005d98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	460b      	mov	r3, r1
 8005da2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691a      	ldr	r2, [r3, #16]
 8005da8:	887b      	ldrh	r3, [r7, #2]
 8005daa:	4013      	ands	r3, r2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005db0:	2301      	movs	r3, #1
 8005db2:	73fb      	strb	r3, [r7, #15]
 8005db4:	e001      	b.n	8005dba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	807b      	strh	r3, [r7, #2]
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dd8:	787b      	ldrb	r3, [r7, #1]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dde:	887a      	ldrh	r2, [r7, #2]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005de4:	e003      	b.n	8005dee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005de6:	887b      	ldrh	r3, [r7, #2]
 8005de8:	041a      	lsls	r2, r3, #16
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	619a      	str	r2, [r3, #24]
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
	...

08005dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e12b      	b.n	8006066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f7fd fa7e 	bl	8003324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2224      	movs	r2, #36	; 0x24
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0201 	bic.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e60:	f002 f870 	bl	8007f44 <HAL_RCC_GetPCLK1Freq>
 8005e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4a81      	ldr	r2, [pc, #516]	; (8006070 <HAL_I2C_Init+0x274>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d807      	bhi.n	8005e80 <HAL_I2C_Init+0x84>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4a80      	ldr	r2, [pc, #512]	; (8006074 <HAL_I2C_Init+0x278>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	bf94      	ite	ls
 8005e78:	2301      	movls	r3, #1
 8005e7a:	2300      	movhi	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	e006      	b.n	8005e8e <HAL_I2C_Init+0x92>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4a7d      	ldr	r2, [pc, #500]	; (8006078 <HAL_I2C_Init+0x27c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	bf94      	ite	ls
 8005e88:	2301      	movls	r3, #1
 8005e8a:	2300      	movhi	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e0e7      	b.n	8006066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a78      	ldr	r2, [pc, #480]	; (800607c <HAL_I2C_Init+0x280>)
 8005e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9e:	0c9b      	lsrs	r3, r3, #18
 8005ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4a6a      	ldr	r2, [pc, #424]	; (8006070 <HAL_I2C_Init+0x274>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d802      	bhi.n	8005ed0 <HAL_I2C_Init+0xd4>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	e009      	b.n	8005ee4 <HAL_I2C_Init+0xe8>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ed6:	fb02 f303 	mul.w	r3, r2, r3
 8005eda:	4a69      	ldr	r2, [pc, #420]	; (8006080 <HAL_I2C_Init+0x284>)
 8005edc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee0:	099b      	lsrs	r3, r3, #6
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6812      	ldr	r2, [r2, #0]
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	495c      	ldr	r1, [pc, #368]	; (8006070 <HAL_I2C_Init+0x274>)
 8005f00:	428b      	cmp	r3, r1
 8005f02:	d819      	bhi.n	8005f38 <HAL_I2C_Init+0x13c>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	1e59      	subs	r1, r3, #1
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	005b      	lsls	r3, r3, #1
 8005f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f12:	1c59      	adds	r1, r3, #1
 8005f14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f18:	400b      	ands	r3, r1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <HAL_I2C_Init+0x138>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1e59      	subs	r1, r3, #1
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f32:	e051      	b.n	8005fd8 <HAL_I2C_Init+0x1dc>
 8005f34:	2304      	movs	r3, #4
 8005f36:	e04f      	b.n	8005fd8 <HAL_I2C_Init+0x1dc>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d111      	bne.n	8005f64 <HAL_I2C_Init+0x168>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	1e58      	subs	r0, r3, #1
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6859      	ldr	r1, [r3, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	440b      	add	r3, r1
 8005f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f52:	3301      	adds	r3, #1
 8005f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	e012      	b.n	8005f8a <HAL_I2C_Init+0x18e>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1e58      	subs	r0, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6859      	ldr	r1, [r3, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	440b      	add	r3, r1
 8005f72:	0099      	lsls	r1, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	bf0c      	ite	eq
 8005f84:	2301      	moveq	r3, #1
 8005f86:	2300      	movne	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <HAL_I2C_Init+0x196>
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e022      	b.n	8005fd8 <HAL_I2C_Init+0x1dc>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10e      	bne.n	8005fb8 <HAL_I2C_Init+0x1bc>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	1e58      	subs	r0, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6859      	ldr	r1, [r3, #4]
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	440b      	add	r3, r1
 8005fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fac:	3301      	adds	r3, #1
 8005fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fb6:	e00f      	b.n	8005fd8 <HAL_I2C_Init+0x1dc>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	1e58      	subs	r0, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6859      	ldr	r1, [r3, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	440b      	add	r3, r1
 8005fc6:	0099      	lsls	r1, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fce:	3301      	adds	r3, #1
 8005fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	6809      	ldr	r1, [r1, #0]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69da      	ldr	r2, [r3, #28]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	6911      	ldr	r1, [r2, #16]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	68d2      	ldr	r2, [r2, #12]
 8006012:	4311      	orrs	r1, r2
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	430b      	orrs	r3, r1
 800601a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	431a      	orrs	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	000186a0 	.word	0x000186a0
 8006074:	001e847f 	.word	0x001e847f
 8006078:	003d08ff 	.word	0x003d08ff
 800607c:	431bde83 	.word	0x431bde83
 8006080:	10624dd3 	.word	0x10624dd3

08006084 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af02      	add	r7, sp, #8
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	607a      	str	r2, [r7, #4]
 800608e:	461a      	mov	r2, r3
 8006090:	460b      	mov	r3, r1
 8006092:	817b      	strh	r3, [r7, #10]
 8006094:	4613      	mov	r3, r2
 8006096:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006098:	f7ff fa88 	bl	80055ac <HAL_GetTick>
 800609c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	f040 80e0 	bne.w	800626c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	2319      	movs	r3, #25
 80060b2:	2201      	movs	r2, #1
 80060b4:	4970      	ldr	r1, [pc, #448]	; (8006278 <HAL_I2C_Master_Transmit+0x1f4>)
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f001 f8f6 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
 80060c4:	e0d3      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_I2C_Master_Transmit+0x50>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e0cc      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d007      	beq.n	80060fa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006108:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2221      	movs	r2, #33	; 0x21
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2210      	movs	r2, #16
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	893a      	ldrh	r2, [r7, #8]
 800612a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a50      	ldr	r2, [pc, #320]	; (800627c <HAL_I2C_Master_Transmit+0x1f8>)
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800613c:	8979      	ldrh	r1, [r7, #10]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	6a3a      	ldr	r2, [r7, #32]
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f000 fde2 	bl	8006d0c <I2C_MasterRequestWrite>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e08d      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	699b      	ldr	r3, [r3, #24]
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006168:	e066      	b.n	8006238 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800616a:	697a      	ldr	r2, [r7, #20]
 800616c:	6a39      	ldr	r1, [r7, #32]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f001 f970 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00d      	beq.n	8006196 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	2b04      	cmp	r3, #4
 8006180:	d107      	bne.n	8006192 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006190:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e06b      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619a:	781a      	ldrb	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d11b      	bne.n	800620c <HAL_I2C_Master_Transmit+0x188>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d017      	beq.n	800620c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	3b01      	subs	r3, #1
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800620c:	697a      	ldr	r2, [r7, #20]
 800620e:	6a39      	ldr	r1, [r7, #32]
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f001 f960 	bl	80074d6 <I2C_WaitOnBTFFlagUntilTimeout>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00d      	beq.n	8006238 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	2b04      	cmp	r3, #4
 8006222:	d107      	bne.n	8006234 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006232:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e01a      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800623c:	2b00      	cmp	r3, #0
 800623e:	d194      	bne.n	800616a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800624e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006268:	2300      	movs	r3, #0
 800626a:	e000      	b.n	800626e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800626c:	2302      	movs	r3, #2
  }
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	00100002 	.word	0x00100002
 800627c:	ffff0000 	.word	0xffff0000

08006280 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08c      	sub	sp, #48	; 0x30
 8006284:	af02      	add	r7, sp, #8
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	607a      	str	r2, [r7, #4]
 800628a:	461a      	mov	r2, r3
 800628c:	460b      	mov	r3, r1
 800628e:	817b      	strh	r3, [r7, #10]
 8006290:	4613      	mov	r3, r2
 8006292:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006294:	f7ff f98a 	bl	80055ac <HAL_GetTick>
 8006298:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	f040 820b 	bne.w	80066be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	2319      	movs	r3, #25
 80062ae:	2201      	movs	r2, #1
 80062b0:	497c      	ldr	r1, [pc, #496]	; (80064a4 <HAL_I2C_Master_Receive+0x224>)
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fff8 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80062be:	2302      	movs	r3, #2
 80062c0:	e1fe      	b.n	80066c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_I2C_Master_Receive+0x50>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e1f7      	b.n	80066c0 <HAL_I2C_Master_Receive+0x440>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d007      	beq.n	80062f6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f042 0201 	orr.w	r2, r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006304:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2222      	movs	r2, #34	; 0x22
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2210      	movs	r2, #16
 8006312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2200      	movs	r2, #0
 800631a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	893a      	ldrh	r2, [r7, #8]
 8006326:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4a5c      	ldr	r2, [pc, #368]	; (80064a8 <HAL_I2C_Master_Receive+0x228>)
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006338:	8979      	ldrh	r1, [r7, #10]
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f000 fd66 	bl	8006e10 <I2C_MasterRequestRead>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e1b8      	b.n	80066c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	2b00      	cmp	r3, #0
 8006354:	d113      	bne.n	800637e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006356:	2300      	movs	r3, #0
 8006358:	623b      	str	r3, [r7, #32]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	623b      	str	r3, [r7, #32]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	623b      	str	r3, [r7, #32]
 800636a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e18c      	b.n	8006698 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006382:	2b01      	cmp	r3, #1
 8006384:	d11b      	bne.n	80063be <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006396:	2300      	movs	r3, #0
 8006398:	61fb      	str	r3, [r7, #28]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	61fb      	str	r3, [r7, #28]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	61fb      	str	r3, [r7, #28]
 80063aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e16c      	b.n	8006698 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d11b      	bne.n	80063fe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063e6:	2300      	movs	r3, #0
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	61bb      	str	r3, [r7, #24]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	e14c      	b.n	8006698 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800640c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800640e:	2300      	movs	r3, #0
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	617b      	str	r3, [r7, #20]
 8006422:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006424:	e138      	b.n	8006698 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800642a:	2b03      	cmp	r3, #3
 800642c:	f200 80f1 	bhi.w	8006612 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006434:	2b01      	cmp	r3, #1
 8006436:	d123      	bne.n	8006480 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800643a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f001 f88b 	bl	8007558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006442:	4603      	mov	r3, r0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e139      	b.n	80066c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006456:	b2d2      	uxtb	r2, r2
 8006458:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006468:	3b01      	subs	r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800647e:	e10b      	b.n	8006698 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006484:	2b02      	cmp	r3, #2
 8006486:	d14e      	bne.n	8006526 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648e:	2200      	movs	r2, #0
 8006490:	4906      	ldr	r1, [pc, #24]	; (80064ac <HAL_I2C_Master_Receive+0x22c>)
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f000 ff08 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d008      	beq.n	80064b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e10e      	b.n	80066c0 <HAL_I2C_Master_Receive+0x440>
 80064a2:	bf00      	nop
 80064a4:	00100002 	.word	0x00100002
 80064a8:	ffff0000 	.word	0xffff0000
 80064ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691a      	ldr	r2, [r3, #16]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	691a      	ldr	r2, [r3, #16]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	b2d2      	uxtb	r2, r2
 80064fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	1c5a      	adds	r2, r3, #1
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651a:	b29b      	uxth	r3, r3
 800651c:	3b01      	subs	r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006524:	e0b8      	b.n	8006698 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006528:	9300      	str	r3, [sp, #0]
 800652a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652c:	2200      	movs	r2, #0
 800652e:	4966      	ldr	r1, [pc, #408]	; (80066c8 <HAL_I2C_Master_Receive+0x448>)
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 feb9 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0bf      	b.n	80066c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800654e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691a      	ldr	r2, [r3, #16]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006578:	b29b      	uxth	r3, r3
 800657a:	3b01      	subs	r3, #1
 800657c:	b29a      	uxth	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	2200      	movs	r2, #0
 800658a:	494f      	ldr	r1, [pc, #316]	; (80066c8 <HAL_I2C_Master_Receive+0x448>)
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 fe8b 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e091      	b.n	80066c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c8:	3b01      	subs	r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	3b01      	subs	r3, #1
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	691a      	ldr	r2, [r3, #16]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	1c5a      	adds	r2, r3, #1
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006606:	b29b      	uxth	r3, r3
 8006608:	3b01      	subs	r3, #1
 800660a:	b29a      	uxth	r2, r3
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006610:	e042      	b.n	8006698 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 ff9e 	bl	8007558 <I2C_WaitOnRXNEFlagUntilTimeout>
 800661c:	4603      	mov	r3, r0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d001      	beq.n	8006626 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e04c      	b.n	80066c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691a      	ldr	r2, [r3, #16]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	b2d2      	uxtb	r2, r2
 8006632:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006642:	3b01      	subs	r3, #1
 8006644:	b29a      	uxth	r2, r3
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f003 0304 	and.w	r3, r3, #4
 8006662:	2b04      	cmp	r3, #4
 8006664:	d118      	bne.n	8006698 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006682:	3b01      	subs	r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668e:	b29b      	uxth	r3, r3
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669c:	2b00      	cmp	r3, #0
 800669e:	f47f aec2 	bne.w	8006426 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	e000      	b.n	80066c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80066be:	2302      	movs	r3, #2
  }
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3728      	adds	r7, #40	; 0x28
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	00010004 	.word	0x00010004

080066cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b088      	sub	sp, #32
 80066d0:	af02      	add	r7, sp, #8
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	4608      	mov	r0, r1
 80066d6:	4611      	mov	r1, r2
 80066d8:	461a      	mov	r2, r3
 80066da:	4603      	mov	r3, r0
 80066dc:	817b      	strh	r3, [r7, #10]
 80066de:	460b      	mov	r3, r1
 80066e0:	813b      	strh	r3, [r7, #8]
 80066e2:	4613      	mov	r3, r2
 80066e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066e6:	f7fe ff61 	bl	80055ac <HAL_GetTick>
 80066ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	f040 80d9 	bne.w	80068ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	2319      	movs	r3, #25
 8006700:	2201      	movs	r2, #1
 8006702:	496d      	ldr	r1, [pc, #436]	; (80068b8 <HAL_I2C_Mem_Write+0x1ec>)
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 fdcf 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 800670a:	4603      	mov	r3, r0
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006710:	2302      	movs	r3, #2
 8006712:	e0cc      	b.n	80068ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_I2C_Mem_Write+0x56>
 800671e:	2302      	movs	r3, #2
 8006720:	e0c5      	b.n	80068ae <HAL_I2C_Mem_Write+0x1e2>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	2b01      	cmp	r3, #1
 8006736:	d007      	beq.n	8006748 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0201 	orr.w	r2, r2, #1
 8006746:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006756:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2221      	movs	r2, #33	; 0x21
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2240      	movs	r2, #64	; 0x40
 8006764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6a3a      	ldr	r2, [r7, #32]
 8006772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800677e:	b29a      	uxth	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	4a4d      	ldr	r2, [pc, #308]	; (80068bc <HAL_I2C_Mem_Write+0x1f0>)
 8006788:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800678a:	88f8      	ldrh	r0, [r7, #6]
 800678c:	893a      	ldrh	r2, [r7, #8]
 800678e:	8979      	ldrh	r1, [r7, #10]
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	9301      	str	r3, [sp, #4]
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4603      	mov	r3, r0
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fc06 	bl	8006fac <I2C_RequestMemoryWrite>
 80067a0:	4603      	mov	r3, r0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d052      	beq.n	800684c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e081      	b.n	80068ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067aa:	697a      	ldr	r2, [r7, #20]
 80067ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 fe50 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00d      	beq.n	80067d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	2b04      	cmp	r3, #4
 80067c0:	d107      	bne.n	80067d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e06b      	b.n	80068ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	781a      	ldrb	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	1c5a      	adds	r2, r3, #1
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	3b01      	subs	r3, #1
 8006800:	b29a      	uxth	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695b      	ldr	r3, [r3, #20]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b04      	cmp	r3, #4
 8006812:	d11b      	bne.n	800684c <HAL_I2C_Mem_Write+0x180>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006818:	2b00      	cmp	r3, #0
 800681a:	d017      	beq.n	800684c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	781a      	ldrb	r2, [r3, #0]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006836:	3b01      	subs	r3, #1
 8006838:	b29a      	uxth	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1aa      	bne.n	80067aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 fe3c 	bl	80074d6 <I2C_WaitOnBTFFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00d      	beq.n	8006880 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	2b04      	cmp	r3, #4
 800686a:	d107      	bne.n	800687c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800687a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e016      	b.n	80068ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800688e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068a8:	2300      	movs	r3, #0
 80068aa:	e000      	b.n	80068ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80068ac:	2302      	movs	r3, #2
  }
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3718      	adds	r7, #24
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	00100002 	.word	0x00100002
 80068bc:	ffff0000 	.word	0xffff0000

080068c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08c      	sub	sp, #48	; 0x30
 80068c4:	af02      	add	r7, sp, #8
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	4608      	mov	r0, r1
 80068ca:	4611      	mov	r1, r2
 80068cc:	461a      	mov	r2, r3
 80068ce:	4603      	mov	r3, r0
 80068d0:	817b      	strh	r3, [r7, #10]
 80068d2:	460b      	mov	r3, r1
 80068d4:	813b      	strh	r3, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068da:	f7fe fe67 	bl	80055ac <HAL_GetTick>
 80068de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b20      	cmp	r3, #32
 80068ea:	f040 8208 	bne.w	8006cfe <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	2319      	movs	r3, #25
 80068f4:	2201      	movs	r2, #1
 80068f6:	497b      	ldr	r1, [pc, #492]	; (8006ae4 <HAL_I2C_Mem_Read+0x224>)
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 fcd5 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006904:	2302      	movs	r3, #2
 8006906:	e1fb      	b.n	8006d00 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_I2C_Mem_Read+0x56>
 8006912:	2302      	movs	r3, #2
 8006914:	e1f4      	b.n	8006d00 <HAL_I2C_Mem_Read+0x440>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b01      	cmp	r3, #1
 800692a:	d007      	beq.n	800693c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0201 	orr.w	r2, r2, #1
 800693a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800694a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2222      	movs	r2, #34	; 0x22
 8006950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2240      	movs	r2, #64	; 0x40
 8006958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006966:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800696c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4a5b      	ldr	r2, [pc, #364]	; (8006ae8 <HAL_I2C_Mem_Read+0x228>)
 800697c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800697e:	88f8      	ldrh	r0, [r7, #6]
 8006980:	893a      	ldrh	r2, [r7, #8]
 8006982:	8979      	ldrh	r1, [r7, #10]
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	4603      	mov	r3, r0
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fba2 	bl	80070d8 <I2C_RequestMemoryRead>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d001      	beq.n	800699e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e1b0      	b.n	8006d00 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d113      	bne.n	80069ce <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069a6:	2300      	movs	r3, #0
 80069a8:	623b      	str	r3, [r7, #32]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	623b      	str	r3, [r7, #32]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	e184      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d11b      	bne.n	8006a0e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a0a:	601a      	str	r2, [r3, #0]
 8006a0c:	e164      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d11b      	bne.n	8006a4e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a36:	2300      	movs	r3, #0
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	e144      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a64:	e138      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6a:	2b03      	cmp	r3, #3
 8006a6c:	f200 80f1 	bhi.w	8006c52 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d123      	bne.n	8006ac0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 fd6b 	bl	8007558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e139      	b.n	8006d00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	691a      	ldr	r2, [r3, #16]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	b2d2      	uxtb	r2, r2
 8006a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9e:	1c5a      	adds	r2, r3, #1
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006abe:	e10b      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d14e      	bne.n	8006b66 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	2200      	movs	r2, #0
 8006ad0:	4906      	ldr	r1, [pc, #24]	; (8006aec <HAL_I2C_Mem_Read+0x22c>)
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 fbe8 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e10e      	b.n	8006d00 <HAL_I2C_Mem_Read+0x440>
 8006ae2:	bf00      	nop
 8006ae4:	00100002 	.word	0x00100002
 8006ae8:	ffff0000 	.word	0xffff0000
 8006aec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691a      	ldr	r2, [r3, #16]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	691a      	ldr	r2, [r3, #16]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	b2d2      	uxtb	r2, r2
 8006b3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	1c5a      	adds	r2, r3, #1
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b64:	e0b8      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	4966      	ldr	r1, [pc, #408]	; (8006d08 <HAL_I2C_Mem_Read+0x448>)
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 fb99 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006b76:	4603      	mov	r3, r0
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d001      	beq.n	8006b80 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0bf      	b.n	8006d00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	b2d2      	uxtb	r2, r2
 8006b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	1c5a      	adds	r2, r3, #1
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bac:	3b01      	subs	r3, #1
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	9300      	str	r3, [sp, #0]
 8006bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc8:	2200      	movs	r2, #0
 8006bca:	494f      	ldr	r1, [pc, #316]	; (8006d08 <HAL_I2C_Mem_Read+0x448>)
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fb6b 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e091      	b.n	8006d00 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	691a      	ldr	r2, [r3, #16]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	b2d2      	uxtb	r2, r2
 8006bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691a      	ldr	r2, [r3, #16]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c50:	e042      	b.n	8006cd8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f000 fc7e 	bl	8007558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e04c      	b.n	8006d00 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	b2d2      	uxtb	r2, r2
 8006c72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	695b      	ldr	r3, [r3, #20]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d118      	bne.n	8006cd8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691a      	ldr	r2, [r3, #16]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb0:	b2d2      	uxtb	r2, r2
 8006cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb8:	1c5a      	adds	r2, r3, #1
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f47f aec2 	bne.w	8006a66 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e000      	b.n	8006d00 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006cfe:	2302      	movs	r3, #2
  }
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3728      	adds	r7, #40	; 0x28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	00010004 	.word	0x00010004

08006d0c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	607a      	str	r2, [r7, #4]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b08      	cmp	r3, #8
 8006d26:	d006      	beq.n	8006d36 <I2C_MasterRequestWrite+0x2a>
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d003      	beq.n	8006d36 <I2C_MasterRequestWrite+0x2a>
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d34:	d108      	bne.n	8006d48 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e00b      	b.n	8006d60 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4c:	2b12      	cmp	r3, #18
 8006d4e:	d107      	bne.n	8006d60 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 fa9b 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00d      	beq.n	8006d94 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d86:	d103      	bne.n	8006d90 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e035      	b.n	8006e00 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d9c:	d108      	bne.n	8006db0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006d9e:	897b      	ldrh	r3, [r7, #10]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	461a      	mov	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006dac:	611a      	str	r2, [r3, #16]
 8006dae:	e01b      	b.n	8006de8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006db0:	897b      	ldrh	r3, [r7, #10]
 8006db2:	11db      	asrs	r3, r3, #7
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	f003 0306 	and.w	r3, r3, #6
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f063 030f 	orn	r3, r3, #15
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	490e      	ldr	r1, [pc, #56]	; (8006e08 <I2C_MasterRequestWrite+0xfc>)
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fac1 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e010      	b.n	8006e00 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006dde:	897b      	ldrh	r3, [r7, #10]
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	687a      	ldr	r2, [r7, #4]
 8006dec:	4907      	ldr	r1, [pc, #28]	; (8006e0c <I2C_MasterRequestWrite+0x100>)
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fab1 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3718      	adds	r7, #24
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	00010008 	.word	0x00010008
 8006e0c:	00010002 	.word	0x00010002

08006e10 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e34:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b08      	cmp	r3, #8
 8006e3a:	d006      	beq.n	8006e4a <I2C_MasterRequestRead+0x3a>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d003      	beq.n	8006e4a <I2C_MasterRequestRead+0x3a>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e48:	d108      	bne.n	8006e5c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	e00b      	b.n	8006e74 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e60:	2b11      	cmp	r3, #17
 8006e62:	d107      	bne.n	8006e74 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f000 fa11 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00d      	beq.n	8006ea8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e9a:	d103      	bne.n	8006ea4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ea2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e079      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eb0:	d108      	bne.n	8006ec4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006eb2:	897b      	ldrh	r3, [r7, #10]
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	b2da      	uxtb	r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	611a      	str	r2, [r3, #16]
 8006ec2:	e05f      	b.n	8006f84 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006ec4:	897b      	ldrh	r3, [r7, #10]
 8006ec6:	11db      	asrs	r3, r3, #7
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	f003 0306 	and.w	r3, r3, #6
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	f063 030f 	orn	r3, r3, #15
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	4930      	ldr	r1, [pc, #192]	; (8006fa4 <I2C_MasterRequestRead+0x194>)
 8006ee2:	68f8      	ldr	r0, [r7, #12]
 8006ee4:	f000 fa37 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e054      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006ef2:	897b      	ldrh	r3, [r7, #10]
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	4929      	ldr	r1, [pc, #164]	; (8006fa8 <I2C_MasterRequestRead+0x198>)
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 fa27 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	e044      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f12:	2300      	movs	r3, #0
 8006f14:	613b      	str	r3, [r7, #16]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	613b      	str	r3, [r7, #16]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	613b      	str	r3, [r7, #16]
 8006f26:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f36:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f9af 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00d      	beq.n	8006f6c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f5e:	d103      	bne.n	8006f68 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e017      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006f6c:	897b      	ldrh	r3, [r7, #10]
 8006f6e:	11db      	asrs	r3, r3, #7
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	f003 0306 	and.w	r3, r3, #6
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	f063 030e 	orn	r3, r3, #14
 8006f7c:	b2da      	uxtb	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	4907      	ldr	r1, [pc, #28]	; (8006fa8 <I2C_MasterRequestRead+0x198>)
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f9e3 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e000      	b.n	8006f9c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3718      	adds	r7, #24
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	00010008 	.word	0x00010008
 8006fa8:	00010002 	.word	0x00010002

08006fac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	817b      	strh	r3, [r7, #10]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	813b      	strh	r3, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 f960 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00d      	beq.n	800700a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ffc:	d103      	bne.n	8007006 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007004:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e05f      	b.n	80070ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800700a:	897b      	ldrh	r3, [r7, #10]
 800700c:	b2db      	uxtb	r3, r3
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007018:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800701a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701c:	6a3a      	ldr	r2, [r7, #32]
 800701e:	492d      	ldr	r1, [pc, #180]	; (80070d4 <I2C_RequestMemoryWrite+0x128>)
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f000 f998 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e04c      	b.n	80070ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	695b      	ldr	r3, [r3, #20]
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007048:	6a39      	ldr	r1, [r7, #32]
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	f000 fa02 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00d      	beq.n	8007072 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	2b04      	cmp	r3, #4
 800705c:	d107      	bne.n	800706e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800706c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e02b      	b.n	80070ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	2b01      	cmp	r3, #1
 8007076:	d105      	bne.n	8007084 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007078:	893b      	ldrh	r3, [r7, #8]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	611a      	str	r2, [r3, #16]
 8007082:	e021      	b.n	80070c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007084:	893b      	ldrh	r3, [r7, #8]
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	b29b      	uxth	r3, r3
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007094:	6a39      	ldr	r1, [r7, #32]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f9dc 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00d      	beq.n	80070be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d107      	bne.n	80070ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e005      	b.n	80070ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070be:	893b      	ldrh	r3, [r7, #8]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	00010002 	.word	0x00010002

080070d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af02      	add	r7, sp, #8
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	4608      	mov	r0, r1
 80070e2:	4611      	mov	r1, r2
 80070e4:	461a      	mov	r2, r3
 80070e6:	4603      	mov	r3, r0
 80070e8:	817b      	strh	r3, [r7, #10]
 80070ea:	460b      	mov	r3, r1
 80070ec:	813b      	strh	r3, [r7, #8]
 80070ee:	4613      	mov	r3, r2
 80070f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007100:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007110:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	2200      	movs	r2, #0
 800711a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 f8c2 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00d      	beq.n	8007146 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007138:	d103      	bne.n	8007142 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007140:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e0aa      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007146:	897b      	ldrh	r3, [r7, #10]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	461a      	mov	r2, r3
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007154:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007158:	6a3a      	ldr	r2, [r7, #32]
 800715a:	4952      	ldr	r1, [pc, #328]	; (80072a4 <I2C_RequestMemoryRead+0x1cc>)
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 f8fa 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e097      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	617b      	str	r3, [r7, #20]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	699b      	ldr	r3, [r3, #24]
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007184:	6a39      	ldr	r1, [r7, #32]
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f964 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	2b04      	cmp	r3, #4
 8007198:	d107      	bne.n	80071aa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e076      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d105      	bne.n	80071c0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071b4:	893b      	ldrh	r3, [r7, #8]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	611a      	str	r2, [r3, #16]
 80071be:	e021      	b.n	8007204 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071c0:	893b      	ldrh	r3, [r7, #8]
 80071c2:	0a1b      	lsrs	r3, r3, #8
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d0:	6a39      	ldr	r1, [r7, #32]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 f93e 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00d      	beq.n	80071fa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d107      	bne.n	80071f6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e050      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071fa:	893b      	ldrh	r3, [r7, #8]
 80071fc:	b2da      	uxtb	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007206:	6a39      	ldr	r1, [r7, #32]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 f923 	bl	8007454 <I2C_WaitOnTXEFlagUntilTimeout>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	2b04      	cmp	r3, #4
 800721a:	d107      	bne.n	800722c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800722a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e035      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800723e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	2200      	movs	r2, #0
 8007248:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f82b 	bl	80072a8 <I2C_WaitOnFlagUntilTimeout>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00d      	beq.n	8007274 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007266:	d103      	bne.n	8007270 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800726e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e013      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007274:	897b      	ldrh	r3, [r7, #10]
 8007276:	b2db      	uxtb	r3, r3
 8007278:	f043 0301 	orr.w	r3, r3, #1
 800727c:	b2da      	uxtb	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	6a3a      	ldr	r2, [r7, #32]
 8007288:	4906      	ldr	r1, [pc, #24]	; (80072a4 <I2C_RequestMemoryRead+0x1cc>)
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f863 	bl	8007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3718      	adds	r7, #24
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	00010002 	.word	0x00010002

080072a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072b8:	e025      	b.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	d021      	beq.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c2:	f7fe f973 	bl	80055ac <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d302      	bcc.n	80072d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d116      	bne.n	8007306 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e023      	b.n	800734e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	d10d      	bne.n	800732c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	43da      	mvns	r2, r3
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4013      	ands	r3, r2
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	bf0c      	ite	eq
 8007322:	2301      	moveq	r3, #1
 8007324:	2300      	movne	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	e00c      	b.n	8007346 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	699b      	ldr	r3, [r3, #24]
 8007332:	43da      	mvns	r2, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	4013      	ands	r3, r2
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	bf0c      	ite	eq
 800733e:	2301      	moveq	r3, #1
 8007340:	2300      	movne	r3, #0
 8007342:	b2db      	uxtb	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	429a      	cmp	r2, r3
 800734a:	d0b6      	beq.n	80072ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b084      	sub	sp, #16
 800735a:	af00      	add	r7, sp, #0
 800735c:	60f8      	str	r0, [r7, #12]
 800735e:	60b9      	str	r1, [r7, #8]
 8007360:	607a      	str	r2, [r7, #4]
 8007362:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007364:	e051      	b.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007374:	d123      	bne.n	80073be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007384:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800738e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2220      	movs	r2, #32
 800739a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	f043 0204 	orr.w	r2, r3, #4
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e046      	b.n	800744c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c4:	d021      	beq.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c6:	f7fe f8f1 	bl	80055ac <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d302      	bcc.n	80073dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d116      	bne.n	800740a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2220      	movs	r2, #32
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f6:	f043 0220 	orr.w	r2, r3, #32
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007406:	2301      	movs	r3, #1
 8007408:	e020      	b.n	800744c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	d10c      	bne.n	800742e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	43da      	mvns	r2, r3
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	4013      	ands	r3, r2
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	bf14      	ite	ne
 8007426:	2301      	movne	r3, #1
 8007428:	2300      	moveq	r3, #0
 800742a:	b2db      	uxtb	r3, r3
 800742c:	e00b      	b.n	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	43da      	mvns	r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	4013      	ands	r3, r2
 800743a:	b29b      	uxth	r3, r3
 800743c:	2b00      	cmp	r3, #0
 800743e:	bf14      	ite	ne
 8007440:	2301      	movne	r3, #1
 8007442:	2300      	moveq	r3, #0
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d18d      	bne.n	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007460:	e02d      	b.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f000 f8ce 	bl	8007604 <I2C_IsAcknowledgeFailed>
 8007468:	4603      	mov	r3, r0
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e02d      	b.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d021      	beq.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800747a:	f7fe f897 	bl	80055ac <HAL_GetTick>
 800747e:	4602      	mov	r2, r0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	1ad3      	subs	r3, r2, r3
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	429a      	cmp	r2, r3
 8007488:	d302      	bcc.n	8007490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d116      	bne.n	80074be <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2220      	movs	r2, #32
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f043 0220 	orr.w	r2, r3, #32
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e007      	b.n	80074ce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c8:	2b80      	cmp	r3, #128	; 0x80
 80074ca:	d1ca      	bne.n	8007462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074e2:	e02d      	b.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 f88d 	bl	8007604 <I2C_IsAcknowledgeFailed>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e02d      	b.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d021      	beq.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074fc:	f7fe f856 	bl	80055ac <HAL_GetTick>
 8007500:	4602      	mov	r2, r0
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	d302      	bcc.n	8007512 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d116      	bne.n	8007540 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2200      	movs	r2, #0
 8007516:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2220      	movs	r2, #32
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752c:	f043 0220 	orr.w	r2, r3, #32
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e007      	b.n	8007550 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b04      	cmp	r3, #4
 800754c:	d1ca      	bne.n	80074e4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007564:	e042      	b.n	80075ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b10      	cmp	r3, #16
 8007572:	d119      	bne.n	80075a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f06f 0210 	mvn.w	r2, #16
 800757c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2220      	movs	r2, #32
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075a4:	2301      	movs	r3, #1
 80075a6:	e029      	b.n	80075fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075a8:	f7fe f800 	bl	80055ac <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d302      	bcc.n	80075be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d116      	bne.n	80075ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2220      	movs	r2, #32
 80075c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	f043 0220 	orr.w	r2, r3, #32
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	e007      	b.n	80075fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d1b5      	bne.n	8007566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761a:	d11b      	bne.n	8007654 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007624:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	f043 0204 	orr.w	r2, r3, #4
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
	...

08007664 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e267      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	d075      	beq.n	800776e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007682:	4b88      	ldr	r3, [pc, #544]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 030c 	and.w	r3, r3, #12
 800768a:	2b04      	cmp	r3, #4
 800768c:	d00c      	beq.n	80076a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800768e:	4b85      	ldr	r3, [pc, #532]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007696:	2b08      	cmp	r3, #8
 8007698:	d112      	bne.n	80076c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800769a:	4b82      	ldr	r3, [pc, #520]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076a6:	d10b      	bne.n	80076c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a8:	4b7e      	ldr	r3, [pc, #504]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d05b      	beq.n	800776c <HAL_RCC_OscConfig+0x108>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d157      	bne.n	800776c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	e242      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076c8:	d106      	bne.n	80076d8 <HAL_RCC_OscConfig+0x74>
 80076ca:	4b76      	ldr	r3, [pc, #472]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a75      	ldr	r2, [pc, #468]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80076d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d4:	6013      	str	r3, [r2, #0]
 80076d6:	e01d      	b.n	8007714 <HAL_RCC_OscConfig+0xb0>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076e0:	d10c      	bne.n	80076fc <HAL_RCC_OscConfig+0x98>
 80076e2:	4b70      	ldr	r3, [pc, #448]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a6f      	ldr	r2, [pc, #444]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80076e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076ec:	6013      	str	r3, [r2, #0]
 80076ee:	4b6d      	ldr	r3, [pc, #436]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a6c      	ldr	r2, [pc, #432]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80076f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	e00b      	b.n	8007714 <HAL_RCC_OscConfig+0xb0>
 80076fc:	4b69      	ldr	r3, [pc, #420]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a68      	ldr	r2, [pc, #416]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	4b66      	ldr	r3, [pc, #408]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a65      	ldr	r2, [pc, #404]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 800770e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007712:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d013      	beq.n	8007744 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771c:	f7fd ff46 	bl	80055ac <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007724:	f7fd ff42 	bl	80055ac <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b64      	cmp	r3, #100	; 0x64
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e207      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007736:	4b5b      	ldr	r3, [pc, #364]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d0f0      	beq.n	8007724 <HAL_RCC_OscConfig+0xc0>
 8007742:	e014      	b.n	800776e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007744:	f7fd ff32 	bl	80055ac <HAL_GetTick>
 8007748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800774a:	e008      	b.n	800775e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800774c:	f7fd ff2e 	bl	80055ac <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b64      	cmp	r3, #100	; 0x64
 8007758:	d901      	bls.n	800775e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e1f3      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800775e:	4b51      	ldr	r3, [pc, #324]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f0      	bne.n	800774c <HAL_RCC_OscConfig+0xe8>
 800776a:	e000      	b.n	800776e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800776c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d063      	beq.n	8007842 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800777a:	4b4a      	ldr	r3, [pc, #296]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f003 030c 	and.w	r3, r3, #12
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007786:	4b47      	ldr	r3, [pc, #284]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800778e:	2b08      	cmp	r3, #8
 8007790:	d11c      	bne.n	80077cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007792:	4b44      	ldr	r3, [pc, #272]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d116      	bne.n	80077cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800779e:	4b41      	ldr	r3, [pc, #260]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0302 	and.w	r3, r3, #2
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d005      	beq.n	80077b6 <HAL_RCC_OscConfig+0x152>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d001      	beq.n	80077b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e1c7      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077b6:	4b3b      	ldr	r3, [pc, #236]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	4937      	ldr	r1, [pc, #220]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ca:	e03a      	b.n	8007842 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d020      	beq.n	8007816 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077d4:	4b34      	ldr	r3, [pc, #208]	; (80078a8 <HAL_RCC_OscConfig+0x244>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077da:	f7fd fee7 	bl	80055ac <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077e2:	f7fd fee3 	bl	80055ac <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e1a8      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f4:	4b2b      	ldr	r3, [pc, #172]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0302 	and.w	r3, r3, #2
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0f0      	beq.n	80077e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007800:	4b28      	ldr	r3, [pc, #160]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	691b      	ldr	r3, [r3, #16]
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	4925      	ldr	r1, [pc, #148]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007810:	4313      	orrs	r3, r2
 8007812:	600b      	str	r3, [r1, #0]
 8007814:	e015      	b.n	8007842 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007816:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <HAL_RCC_OscConfig+0x244>)
 8007818:	2200      	movs	r2, #0
 800781a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781c:	f7fd fec6 	bl	80055ac <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007824:	f7fd fec2 	bl	80055ac <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b02      	cmp	r3, #2
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e187      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007836:	4b1b      	ldr	r3, [pc, #108]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f0      	bne.n	8007824 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0308 	and.w	r3, r3, #8
 800784a:	2b00      	cmp	r3, #0
 800784c:	d036      	beq.n	80078bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d016      	beq.n	8007884 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007856:	4b15      	ldr	r3, [pc, #84]	; (80078ac <HAL_RCC_OscConfig+0x248>)
 8007858:	2201      	movs	r2, #1
 800785a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785c:	f7fd fea6 	bl	80055ac <HAL_GetTick>
 8007860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007862:	e008      	b.n	8007876 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007864:	f7fd fea2 	bl	80055ac <HAL_GetTick>
 8007868:	4602      	mov	r2, r0
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d901      	bls.n	8007876 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e167      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007876:	4b0b      	ldr	r3, [pc, #44]	; (80078a4 <HAL_RCC_OscConfig+0x240>)
 8007878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0f0      	beq.n	8007864 <HAL_RCC_OscConfig+0x200>
 8007882:	e01b      	b.n	80078bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007884:	4b09      	ldr	r3, [pc, #36]	; (80078ac <HAL_RCC_OscConfig+0x248>)
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800788a:	f7fd fe8f 	bl	80055ac <HAL_GetTick>
 800788e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007890:	e00e      	b.n	80078b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007892:	f7fd fe8b 	bl	80055ac <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	2b02      	cmp	r3, #2
 800789e:	d907      	bls.n	80078b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e150      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
 80078a4:	40023800 	.word	0x40023800
 80078a8:	42470000 	.word	0x42470000
 80078ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078b0:	4b88      	ldr	r3, [pc, #544]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 80078b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1ea      	bne.n	8007892 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 8097 	beq.w	80079f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ca:	2300      	movs	r3, #0
 80078cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078ce:	4b81      	ldr	r3, [pc, #516]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d10f      	bne.n	80078fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]
 80078de:	4b7d      	ldr	r3, [pc, #500]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	4a7c      	ldr	r2, [pc, #496]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 80078e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078e8:	6413      	str	r3, [r2, #64]	; 0x40
 80078ea:	4b7a      	ldr	r3, [pc, #488]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f2:	60bb      	str	r3, [r7, #8]
 80078f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078f6:	2301      	movs	r3, #1
 80078f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078fa:	4b77      	ldr	r3, [pc, #476]	; (8007ad8 <HAL_RCC_OscConfig+0x474>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	2b00      	cmp	r3, #0
 8007904:	d118      	bne.n	8007938 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007906:	4b74      	ldr	r3, [pc, #464]	; (8007ad8 <HAL_RCC_OscConfig+0x474>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a73      	ldr	r2, [pc, #460]	; (8007ad8 <HAL_RCC_OscConfig+0x474>)
 800790c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007910:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007912:	f7fd fe4b 	bl	80055ac <HAL_GetTick>
 8007916:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007918:	e008      	b.n	800792c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800791a:	f7fd fe47 	bl	80055ac <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d901      	bls.n	800792c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e10c      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800792c:	4b6a      	ldr	r3, [pc, #424]	; (8007ad8 <HAL_RCC_OscConfig+0x474>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0f0      	beq.n	800791a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d106      	bne.n	800794e <HAL_RCC_OscConfig+0x2ea>
 8007940:	4b64      	ldr	r3, [pc, #400]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007944:	4a63      	ldr	r2, [pc, #396]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007946:	f043 0301 	orr.w	r3, r3, #1
 800794a:	6713      	str	r3, [r2, #112]	; 0x70
 800794c:	e01c      	b.n	8007988 <HAL_RCC_OscConfig+0x324>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	2b05      	cmp	r3, #5
 8007954:	d10c      	bne.n	8007970 <HAL_RCC_OscConfig+0x30c>
 8007956:	4b5f      	ldr	r3, [pc, #380]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795a:	4a5e      	ldr	r2, [pc, #376]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 800795c:	f043 0304 	orr.w	r3, r3, #4
 8007960:	6713      	str	r3, [r2, #112]	; 0x70
 8007962:	4b5c      	ldr	r3, [pc, #368]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007966:	4a5b      	ldr	r2, [pc, #364]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007968:	f043 0301 	orr.w	r3, r3, #1
 800796c:	6713      	str	r3, [r2, #112]	; 0x70
 800796e:	e00b      	b.n	8007988 <HAL_RCC_OscConfig+0x324>
 8007970:	4b58      	ldr	r3, [pc, #352]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007974:	4a57      	ldr	r2, [pc, #348]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007976:	f023 0301 	bic.w	r3, r3, #1
 800797a:	6713      	str	r3, [r2, #112]	; 0x70
 800797c:	4b55      	ldr	r3, [pc, #340]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 800797e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007980:	4a54      	ldr	r2, [pc, #336]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007982:	f023 0304 	bic.w	r3, r3, #4
 8007986:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d015      	beq.n	80079bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007990:	f7fd fe0c 	bl	80055ac <HAL_GetTick>
 8007994:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007996:	e00a      	b.n	80079ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007998:	f7fd fe08 	bl	80055ac <HAL_GetTick>
 800799c:	4602      	mov	r2, r0
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d901      	bls.n	80079ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e0cb      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ae:	4b49      	ldr	r3, [pc, #292]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 80079b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0ee      	beq.n	8007998 <HAL_RCC_OscConfig+0x334>
 80079ba:	e014      	b.n	80079e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079bc:	f7fd fdf6 	bl	80055ac <HAL_GetTick>
 80079c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c2:	e00a      	b.n	80079da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079c4:	f7fd fdf2 	bl	80055ac <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e0b5      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079da:	4b3e      	ldr	r3, [pc, #248]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 80079dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d1ee      	bne.n	80079c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079e6:	7dfb      	ldrb	r3, [r7, #23]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d105      	bne.n	80079f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ec:	4b39      	ldr	r3, [pc, #228]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 80079ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f0:	4a38      	ldr	r2, [pc, #224]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 80079f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 80a1 	beq.w	8007b44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a02:	4b34      	ldr	r3, [pc, #208]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 030c 	and.w	r3, r3, #12
 8007a0a:	2b08      	cmp	r3, #8
 8007a0c:	d05c      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d141      	bne.n	8007a9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a16:	4b31      	ldr	r3, [pc, #196]	; (8007adc <HAL_RCC_OscConfig+0x478>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a1c:	f7fd fdc6 	bl	80055ac <HAL_GetTick>
 8007a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a24:	f7fd fdc2 	bl	80055ac <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e087      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a36:	4b27      	ldr	r3, [pc, #156]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1f0      	bne.n	8007a24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	69da      	ldr	r2, [r3, #28]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	431a      	orrs	r2, r3
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a50:	019b      	lsls	r3, r3, #6
 8007a52:	431a      	orrs	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	085b      	lsrs	r3, r3, #1
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	041b      	lsls	r3, r3, #16
 8007a5e:	431a      	orrs	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	061b      	lsls	r3, r3, #24
 8007a66:	491b      	ldr	r1, [pc, #108]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a6c:	4b1b      	ldr	r3, [pc, #108]	; (8007adc <HAL_RCC_OscConfig+0x478>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a72:	f7fd fd9b 	bl	80055ac <HAL_GetTick>
 8007a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a78:	e008      	b.n	8007a8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a7a:	f7fd fd97 	bl	80055ac <HAL_GetTick>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d901      	bls.n	8007a8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e05c      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a8c:	4b11      	ldr	r3, [pc, #68]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0f0      	beq.n	8007a7a <HAL_RCC_OscConfig+0x416>
 8007a98:	e054      	b.n	8007b44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a9a:	4b10      	ldr	r3, [pc, #64]	; (8007adc <HAL_RCC_OscConfig+0x478>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa0:	f7fd fd84 	bl	80055ac <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aa6:	e008      	b.n	8007aba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aa8:	f7fd fd80 	bl	80055ac <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d901      	bls.n	8007aba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e045      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aba:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <HAL_RCC_OscConfig+0x470>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1f0      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x444>
 8007ac6:	e03d      	b.n	8007b44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d107      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e038      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
 8007ad4:	40023800 	.word	0x40023800
 8007ad8:	40007000 	.word	0x40007000
 8007adc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ae0:	4b1b      	ldr	r3, [pc, #108]	; (8007b50 <HAL_RCC_OscConfig+0x4ec>)
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d028      	beq.n	8007b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d121      	bne.n	8007b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d11a      	bne.n	8007b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b10:	4013      	ands	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d111      	bne.n	8007b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	085b      	lsrs	r3, r3, #1
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d107      	bne.n	8007b40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d001      	beq.n	8007b44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	e000      	b.n	8007b46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3718      	adds	r7, #24
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	40023800 	.word	0x40023800

08007b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d101      	bne.n	8007b68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e0cc      	b.n	8007d02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b68:	4b68      	ldr	r3, [pc, #416]	; (8007d0c <HAL_RCC_ClockConfig+0x1b8>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d90c      	bls.n	8007b90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b76:	4b65      	ldr	r3, [pc, #404]	; (8007d0c <HAL_RCC_ClockConfig+0x1b8>)
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b7e:	4b63      	ldr	r3, [pc, #396]	; (8007d0c <HAL_RCC_ClockConfig+0x1b8>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	683a      	ldr	r2, [r7, #0]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d001      	beq.n	8007b90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	e0b8      	b.n	8007d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d020      	beq.n	8007bde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0304 	and.w	r3, r3, #4
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ba8:	4b59      	ldr	r3, [pc, #356]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	4a58      	ldr	r2, [pc, #352]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007bae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d005      	beq.n	8007bcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bc0:	4b53      	ldr	r3, [pc, #332]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	4a52      	ldr	r2, [pc, #328]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bcc:	4b50      	ldr	r3, [pc, #320]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	494d      	ldr	r1, [pc, #308]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f003 0301 	and.w	r3, r3, #1
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d044      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d107      	bne.n	8007c02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bf2:	4b47      	ldr	r3, [pc, #284]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d119      	bne.n	8007c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e07f      	b.n	8007d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d003      	beq.n	8007c12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d107      	bne.n	8007c22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c12:	4b3f      	ldr	r3, [pc, #252]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e06f      	b.n	8007d02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c22:	4b3b      	ldr	r3, [pc, #236]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e067      	b.n	8007d02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c32:	4b37      	ldr	r3, [pc, #220]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f023 0203 	bic.w	r2, r3, #3
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	4934      	ldr	r1, [pc, #208]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007c40:	4313      	orrs	r3, r2
 8007c42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c44:	f7fd fcb2 	bl	80055ac <HAL_GetTick>
 8007c48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c4a:	e00a      	b.n	8007c62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c4c:	f7fd fcae 	bl	80055ac <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e04f      	b.n	8007d02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c62:	4b2b      	ldr	r3, [pc, #172]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f003 020c 	and.w	r2, r3, #12
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d1eb      	bne.n	8007c4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c74:	4b25      	ldr	r3, [pc, #148]	; (8007d0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0307 	and.w	r3, r3, #7
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d20c      	bcs.n	8007c9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c82:	4b22      	ldr	r3, [pc, #136]	; (8007d0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	b2d2      	uxtb	r2, r2
 8007c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8a:	4b20      	ldr	r3, [pc, #128]	; (8007d0c <HAL_RCC_ClockConfig+0x1b8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0307 	and.w	r3, r3, #7
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d001      	beq.n	8007c9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e032      	b.n	8007d02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0304 	and.w	r3, r3, #4
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d008      	beq.n	8007cba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ca8:	4b19      	ldr	r3, [pc, #100]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	4916      	ldr	r1, [pc, #88]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d009      	beq.n	8007cda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cc6:	4b12      	ldr	r3, [pc, #72]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	00db      	lsls	r3, r3, #3
 8007cd4:	490e      	ldr	r1, [pc, #56]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cda:	f000 f821 	bl	8007d20 <HAL_RCC_GetSysClockFreq>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	4b0b      	ldr	r3, [pc, #44]	; (8007d10 <HAL_RCC_ClockConfig+0x1bc>)
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	091b      	lsrs	r3, r3, #4
 8007ce6:	f003 030f 	and.w	r3, r3, #15
 8007cea:	490a      	ldr	r1, [pc, #40]	; (8007d14 <HAL_RCC_ClockConfig+0x1c0>)
 8007cec:	5ccb      	ldrb	r3, [r1, r3]
 8007cee:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf2:	4a09      	ldr	r2, [pc, #36]	; (8007d18 <HAL_RCC_ClockConfig+0x1c4>)
 8007cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cf6:	4b09      	ldr	r3, [pc, #36]	; (8007d1c <HAL_RCC_ClockConfig+0x1c8>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fd f948 	bl	8004f90 <HAL_InitTick>

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40023c00 	.word	0x40023c00
 8007d10:	40023800 	.word	0x40023800
 8007d14:	080118d8 	.word	0x080118d8
 8007d18:	20000008 	.word	0x20000008
 8007d1c:	2000000c 	.word	0x2000000c

08007d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d24:	b094      	sub	sp, #80	; 0x50
 8007d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d30:	2300      	movs	r3, #0
 8007d32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d38:	4b79      	ldr	r3, [pc, #484]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f003 030c 	and.w	r3, r3, #12
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d00d      	beq.n	8007d60 <HAL_RCC_GetSysClockFreq+0x40>
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	f200 80e1 	bhi.w	8007f0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d002      	beq.n	8007d54 <HAL_RCC_GetSysClockFreq+0x34>
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d003      	beq.n	8007d5a <HAL_RCC_GetSysClockFreq+0x3a>
 8007d52:	e0db      	b.n	8007f0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d54:	4b73      	ldr	r3, [pc, #460]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007d58:	e0db      	b.n	8007f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d5a:	4b73      	ldr	r3, [pc, #460]	; (8007f28 <HAL_RCC_GetSysClockFreq+0x208>)
 8007d5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d5e:	e0d8      	b.n	8007f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d60:	4b6f      	ldr	r3, [pc, #444]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d6a:	4b6d      	ldr	r3, [pc, #436]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d063      	beq.n	8007e3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d76:	4b6a      	ldr	r3, [pc, #424]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	099b      	lsrs	r3, r3, #6
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d88:	633b      	str	r3, [r7, #48]	; 0x30
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007d92:	4622      	mov	r2, r4
 8007d94:	462b      	mov	r3, r5
 8007d96:	f04f 0000 	mov.w	r0, #0
 8007d9a:	f04f 0100 	mov.w	r1, #0
 8007d9e:	0159      	lsls	r1, r3, #5
 8007da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007da4:	0150      	lsls	r0, r2, #5
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4621      	mov	r1, r4
 8007dac:	1a51      	subs	r1, r2, r1
 8007dae:	6139      	str	r1, [r7, #16]
 8007db0:	4629      	mov	r1, r5
 8007db2:	eb63 0301 	sbc.w	r3, r3, r1
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	f04f 0300 	mov.w	r3, #0
 8007dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007dc4:	4659      	mov	r1, fp
 8007dc6:	018b      	lsls	r3, r1, #6
 8007dc8:	4651      	mov	r1, sl
 8007dca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007dce:	4651      	mov	r1, sl
 8007dd0:	018a      	lsls	r2, r1, #6
 8007dd2:	4651      	mov	r1, sl
 8007dd4:	ebb2 0801 	subs.w	r8, r2, r1
 8007dd8:	4659      	mov	r1, fp
 8007dda:	eb63 0901 	sbc.w	r9, r3, r1
 8007dde:	f04f 0200 	mov.w	r2, #0
 8007de2:	f04f 0300 	mov.w	r3, #0
 8007de6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007df2:	4690      	mov	r8, r2
 8007df4:	4699      	mov	r9, r3
 8007df6:	4623      	mov	r3, r4
 8007df8:	eb18 0303 	adds.w	r3, r8, r3
 8007dfc:	60bb      	str	r3, [r7, #8]
 8007dfe:	462b      	mov	r3, r5
 8007e00:	eb49 0303 	adc.w	r3, r9, r3
 8007e04:	60fb      	str	r3, [r7, #12]
 8007e06:	f04f 0200 	mov.w	r2, #0
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e12:	4629      	mov	r1, r5
 8007e14:	024b      	lsls	r3, r1, #9
 8007e16:	4621      	mov	r1, r4
 8007e18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	024a      	lsls	r2, r1, #9
 8007e20:	4610      	mov	r0, r2
 8007e22:	4619      	mov	r1, r3
 8007e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e26:	2200      	movs	r2, #0
 8007e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e30:	f7f8 ff32 	bl	8000c98 <__aeabi_uldivmod>
 8007e34:	4602      	mov	r2, r0
 8007e36:	460b      	mov	r3, r1
 8007e38:	4613      	mov	r3, r2
 8007e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e3c:	e058      	b.n	8007ef0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e3e:	4b38      	ldr	r3, [pc, #224]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	099b      	lsrs	r3, r3, #6
 8007e44:	2200      	movs	r2, #0
 8007e46:	4618      	mov	r0, r3
 8007e48:	4611      	mov	r1, r2
 8007e4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e4e:	623b      	str	r3, [r7, #32]
 8007e50:	2300      	movs	r3, #0
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
 8007e54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e58:	4642      	mov	r2, r8
 8007e5a:	464b      	mov	r3, r9
 8007e5c:	f04f 0000 	mov.w	r0, #0
 8007e60:	f04f 0100 	mov.w	r1, #0
 8007e64:	0159      	lsls	r1, r3, #5
 8007e66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e6a:	0150      	lsls	r0, r2, #5
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4641      	mov	r1, r8
 8007e72:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e76:	4649      	mov	r1, r9
 8007e78:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e90:	ebb2 040a 	subs.w	r4, r2, sl
 8007e94:	eb63 050b 	sbc.w	r5, r3, fp
 8007e98:	f04f 0200 	mov.w	r2, #0
 8007e9c:	f04f 0300 	mov.w	r3, #0
 8007ea0:	00eb      	lsls	r3, r5, #3
 8007ea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ea6:	00e2      	lsls	r2, r4, #3
 8007ea8:	4614      	mov	r4, r2
 8007eaa:	461d      	mov	r5, r3
 8007eac:	4643      	mov	r3, r8
 8007eae:	18e3      	adds	r3, r4, r3
 8007eb0:	603b      	str	r3, [r7, #0]
 8007eb2:	464b      	mov	r3, r9
 8007eb4:	eb45 0303 	adc.w	r3, r5, r3
 8007eb8:	607b      	str	r3, [r7, #4]
 8007eba:	f04f 0200 	mov.w	r2, #0
 8007ebe:	f04f 0300 	mov.w	r3, #0
 8007ec2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	028b      	lsls	r3, r1, #10
 8007eca:	4621      	mov	r1, r4
 8007ecc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	028a      	lsls	r2, r1, #10
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eda:	2200      	movs	r2, #0
 8007edc:	61bb      	str	r3, [r7, #24]
 8007ede:	61fa      	str	r2, [r7, #28]
 8007ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ee4:	f7f8 fed8 	bl	8000c98 <__aeabi_uldivmod>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4613      	mov	r3, r2
 8007eee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ef0:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	0c1b      	lsrs	r3, r3, #16
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	3301      	adds	r3, #1
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007f00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f0a:	e002      	b.n	8007f12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f0c:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f0e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3750      	adds	r7, #80	; 0x50
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f1e:	bf00      	nop
 8007f20:	40023800 	.word	0x40023800
 8007f24:	00f42400 	.word	0x00f42400
 8007f28:	007a1200 	.word	0x007a1200

08007f2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f30:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f32:	681b      	ldr	r3, [r3, #0]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20000008 	.word	0x20000008

08007f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f48:	f7ff fff0 	bl	8007f2c <HAL_RCC_GetHCLKFreq>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	0a9b      	lsrs	r3, r3, #10
 8007f54:	f003 0307 	and.w	r3, r3, #7
 8007f58:	4903      	ldr	r1, [pc, #12]	; (8007f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f5a:	5ccb      	ldrb	r3, [r1, r3]
 8007f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	40023800 	.word	0x40023800
 8007f68:	080118e8 	.word	0x080118e8

08007f6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f70:	f7ff ffdc 	bl	8007f2c <HAL_RCC_GetHCLKFreq>
 8007f74:	4602      	mov	r2, r0
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	0b5b      	lsrs	r3, r3, #13
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	4903      	ldr	r1, [pc, #12]	; (8007f90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f82:	5ccb      	ldrb	r3, [r1, r3]
 8007f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	40023800 	.word	0x40023800
 8007f90:	080118e8 	.word	0x080118e8

08007f94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	220f      	movs	r2, #15
 8007fa2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fa4:	4b12      	ldr	r3, [pc, #72]	; (8007ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f003 0203 	and.w	r2, r3, #3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007fbc:	4b0c      	ldr	r3, [pc, #48]	; (8007ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007fc8:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <HAL_RCC_GetClockConfig+0x5c>)
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	08db      	lsrs	r3, r3, #3
 8007fce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fd6:	4b07      	ldr	r3, [pc, #28]	; (8007ff4 <HAL_RCC_GetClockConfig+0x60>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0207 	and.w	r2, r3, #7
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	601a      	str	r2, [r3, #0]
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	40023c00 	.word	0x40023c00

08007ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800801c:	2b00      	cmp	r3, #0
 800801e:	d038      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008020:	4b68      	ldr	r3, [pc, #416]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008022:	2200      	movs	r2, #0
 8008024:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008026:	f7fd fac1 	bl	80055ac <HAL_GetTick>
 800802a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800802c:	e008      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800802e:	f7fd fabd 	bl	80055ac <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d901      	bls.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e0bd      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008040:	4b61      	ldr	r3, [pc, #388]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1f0      	bne.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	019b      	lsls	r3, r3, #6
 8008056:	431a      	orrs	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	071b      	lsls	r3, r3, #28
 800805e:	495a      	ldr	r1, [pc, #360]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008060:	4313      	orrs	r3, r2
 8008062:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008066:	4b57      	ldr	r3, [pc, #348]	; (80081c4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008068:	2201      	movs	r2, #1
 800806a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800806c:	f7fd fa9e 	bl	80055ac <HAL_GetTick>
 8008070:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008072:	e008      	b.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008074:	f7fd fa9a 	bl	80055ac <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e09a      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008086:	4b50      	ldr	r3, [pc, #320]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f0      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 8083 	beq.w	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080a0:	2300      	movs	r3, #0
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	4b48      	ldr	r3, [pc, #288]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a8:	4a47      	ldr	r2, [pc, #284]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ae:	6413      	str	r3, [r2, #64]	; 0x40
 80080b0:	4b45      	ldr	r3, [pc, #276]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80080bc:	4b43      	ldr	r3, [pc, #268]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a42      	ldr	r2, [pc, #264]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080c6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80080c8:	f7fd fa70 	bl	80055ac <HAL_GetTick>
 80080cc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80080ce:	e008      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80080d0:	f7fd fa6c 	bl	80055ac <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e06c      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80080e2:	4b3a      	ldr	r3, [pc, #232]	; (80081cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0f0      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80080ee:	4b36      	ldr	r3, [pc, #216]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d02f      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	429a      	cmp	r2, r3
 800810a:	d028      	beq.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800810c:	4b2e      	ldr	r3, [pc, #184]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800810e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008114:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008116:	4b2e      	ldr	r3, [pc, #184]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008118:	2201      	movs	r2, #1
 800811a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800811c:	4b2c      	ldr	r3, [pc, #176]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800811e:	2200      	movs	r2, #0
 8008120:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008122:	4a29      	ldr	r2, [pc, #164]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008128:	4b27      	ldr	r3, [pc, #156]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800812a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b01      	cmp	r3, #1
 8008132:	d114      	bne.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008134:	f7fd fa3a 	bl	80055ac <HAL_GetTick>
 8008138:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800813a:	e00a      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800813c:	f7fd fa36 	bl	80055ac <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	f241 3288 	movw	r2, #5000	; 0x1388
 800814a:	4293      	cmp	r3, r2
 800814c:	d901      	bls.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e034      	b.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008152:	4b1d      	ldr	r3, [pc, #116]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008156:	f003 0302 	and.w	r3, r3, #2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0ee      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800816a:	d10d      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800816c:	4b16      	ldr	r3, [pc, #88]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800817c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008180:	4911      	ldr	r1, [pc, #68]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008182:	4313      	orrs	r3, r2
 8008184:	608b      	str	r3, [r1, #8]
 8008186:	e005      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8008188:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4a0e      	ldr	r2, [pc, #56]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800818e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008192:	6093      	str	r3, [r2, #8]
 8008194:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081a0:	4909      	ldr	r1, [pc, #36]	; (80081c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0308 	and.w	r3, r3, #8
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	7d1a      	ldrb	r2, [r3, #20]
 80081b6:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80081b8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3718      	adds	r7, #24
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	42470068 	.word	0x42470068
 80081c8:	40023800 	.word	0x40023800
 80081cc:	40007000 	.word	0x40007000
 80081d0:	42470e40 	.word	0x42470e40
 80081d4:	424711e0 	.word	0x424711e0

080081d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d101      	bne.n	80081ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e066      	b.n	80082bc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	7f5b      	ldrb	r3, [r3, #29]
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d105      	bne.n	8008204 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7fc fe6e 	bl	8004ee0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	22ca      	movs	r2, #202	; 0xca
 8008210:	625a      	str	r2, [r3, #36]	; 0x24
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2253      	movs	r2, #83	; 0x53
 8008218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fb6f 	bl	80088fe <RTC_EnterInitMode>
 8008220:	4603      	mov	r3, r0
 8008222:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d12c      	bne.n	8008284 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	6812      	ldr	r2, [r2, #0]
 8008234:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008238:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800823c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6899      	ldr	r1, [r3, #8]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	431a      	orrs	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	431a      	orrs	r2, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	68d2      	ldr	r2, [r2, #12]
 8008264:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6919      	ldr	r1, [r3, #16]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	041a      	lsls	r2, r3, #16
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fb76 	bl	800896c <RTC_ExitInitMode>
 8008280:	4603      	mov	r3, r0
 8008282:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d113      	bne.n	80082b2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008298:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699a      	ldr	r2, [r3, #24]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	22ff      	movs	r2, #255	; 0xff
 80082b8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80082c4:	b590      	push	{r4, r7, lr}
 80082c6:	b087      	sub	sp, #28
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80082d0:	2300      	movs	r3, #0
 80082d2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	7f1b      	ldrb	r3, [r3, #28]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d101      	bne.n	80082e0 <HAL_RTC_SetTime+0x1c>
 80082dc:	2302      	movs	r3, #2
 80082de:	e087      	b.n	80083f0 <HAL_RTC_SetTime+0x12c>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2202      	movs	r2, #2
 80082ea:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d126      	bne.n	8008340 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d102      	bne.n	8008306 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2200      	movs	r2, #0
 8008304:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fb53 	bl	80089b6 <RTC_ByteToBcd2>
 8008310:	4603      	mov	r3, r0
 8008312:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	785b      	ldrb	r3, [r3, #1]
 8008318:	4618      	mov	r0, r3
 800831a:	f000 fb4c 	bl	80089b6 <RTC_ByteToBcd2>
 800831e:	4603      	mov	r3, r0
 8008320:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008322:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	789b      	ldrb	r3, [r3, #2]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fb44 	bl	80089b6 <RTC_ByteToBcd2>
 800832e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008330:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	78db      	ldrb	r3, [r3, #3]
 8008338:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800833a:	4313      	orrs	r3, r2
 800833c:	617b      	str	r3, [r7, #20]
 800833e:	e018      	b.n	8008372 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2200      	movs	r2, #0
 8008352:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	785b      	ldrb	r3, [r3, #1]
 800835e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008360:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008366:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	78db      	ldrb	r3, [r3, #3]
 800836c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800836e:	4313      	orrs	r3, r2
 8008370:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	22ca      	movs	r2, #202	; 0xca
 8008378:	625a      	str	r2, [r3, #36]	; 0x24
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2253      	movs	r2, #83	; 0x53
 8008380:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 fabb 	bl	80088fe <RTC_EnterInitMode>
 8008388:	4603      	mov	r3, r0
 800838a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800838c:	7cfb      	ldrb	r3, [r7, #19]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d120      	bne.n	80083d4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800839c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80083a0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689a      	ldr	r2, [r3, #8]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083b0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6899      	ldr	r1, [r3, #8]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	68da      	ldr	r2, [r3, #12]
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	431a      	orrs	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	430a      	orrs	r2, r1
 80083c8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80083ca:	68f8      	ldr	r0, [r7, #12]
 80083cc:	f000 face 	bl	800896c <RTC_ExitInitMode>
 80083d0:	4603      	mov	r3, r0
 80083d2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80083d4:	7cfb      	ldrb	r3, [r7, #19]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d102      	bne.n	80083e0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2201      	movs	r2, #1
 80083de:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	22ff      	movs	r2, #255	; 0xff
 80083e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	771a      	strb	r2, [r3, #28]

  return status;
 80083ee:	7cfb      	ldrb	r3, [r7, #19]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd90      	pop	{r4, r7, pc}

080083f8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008404:	2300      	movs	r3, #0
 8008406:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800842a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800842e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	0c1b      	lsrs	r3, r3, #16
 8008434:	b2db      	uxtb	r3, r3
 8008436:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800843a:	b2da      	uxtb	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	0a1b      	lsrs	r3, r3, #8
 8008444:	b2db      	uxtb	r3, r3
 8008446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800844a:	b2da      	uxtb	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008458:	b2da      	uxtb	r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	0d9b      	lsrs	r3, r3, #22
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f003 0301 	and.w	r3, r3, #1
 8008468:	b2da      	uxtb	r2, r3
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d11a      	bne.n	80084aa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	4618      	mov	r0, r3
 800847a:	f000 fab9 	bl	80089f0 <RTC_Bcd2ToByte>
 800847e:	4603      	mov	r3, r0
 8008480:	461a      	mov	r2, r3
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	4618      	mov	r0, r3
 800848c:	f000 fab0 	bl	80089f0 <RTC_Bcd2ToByte>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	789b      	ldrb	r3, [r3, #2]
 800849c:	4618      	mov	r0, r3
 800849e:	f000 faa7 	bl	80089f0 <RTC_Bcd2ToByte>
 80084a2:	4603      	mov	r3, r0
 80084a4:	461a      	mov	r2, r3
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80084b4:	b590      	push	{r4, r7, lr}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	7f1b      	ldrb	r3, [r3, #28]
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_RTC_SetDate+0x1c>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e071      	b.n	80085b4 <HAL_RTC_SetDate+0x100>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2201      	movs	r2, #1
 80084d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2202      	movs	r2, #2
 80084da:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10e      	bne.n	8008500 <HAL_RTC_SetDate+0x4c>
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	f003 0310 	and.w	r3, r3, #16
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d008      	beq.n	8008500 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	785b      	ldrb	r3, [r3, #1]
 80084f2:	f023 0310 	bic.w	r3, r3, #16
 80084f6:	b2db      	uxtb	r3, r3
 80084f8:	330a      	adds	r3, #10
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d11c      	bne.n	8008540 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	78db      	ldrb	r3, [r3, #3]
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fa53 	bl	80089b6 <RTC_ByteToBcd2>
 8008510:	4603      	mov	r3, r0
 8008512:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	785b      	ldrb	r3, [r3, #1]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 fa4c 	bl	80089b6 <RTC_ByteToBcd2>
 800851e:	4603      	mov	r3, r0
 8008520:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008522:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	789b      	ldrb	r3, [r3, #2]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fa44 	bl	80089b6 <RTC_ByteToBcd2>
 800852e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008530:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]
 800853e:	e00e      	b.n	800855e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	78db      	ldrb	r3, [r3, #3]
 8008544:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	785b      	ldrb	r3, [r3, #1]
 800854a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800854c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008552:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	22ca      	movs	r2, #202	; 0xca
 8008564:	625a      	str	r2, [r3, #36]	; 0x24
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2253      	movs	r2, #83	; 0x53
 800856c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f000 f9c5 	bl	80088fe <RTC_EnterInitMode>
 8008574:	4603      	mov	r3, r0
 8008576:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008578:	7cfb      	ldrb	r3, [r7, #19]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10c      	bne.n	8008598 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008588:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800858c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 f9ec 	bl	800896c <RTC_ExitInitMode>
 8008594:	4603      	mov	r3, r0
 8008596:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008598:	7cfb      	ldrb	r3, [r7, #19]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d102      	bne.n	80085a4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	22ff      	movs	r2, #255	; 0xff
 80085aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	771a      	strb	r2, [r3, #28]

  return status;
 80085b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd90      	pop	{r4, r7, pc}

080085bc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80085d6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085da:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	0c1b      	lsrs	r3, r3, #16
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	0a1b      	lsrs	r3, r3, #8
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	0b5b      	lsrs	r3, r3, #13
 8008608:	b2db      	uxtb	r3, r3
 800860a:	f003 0307 	and.w	r3, r3, #7
 800860e:	b2da      	uxtb	r2, r3
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d11a      	bne.n	8008650 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	78db      	ldrb	r3, [r3, #3]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f9e6 	bl	80089f0 <RTC_Bcd2ToByte>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	785b      	ldrb	r3, [r3, #1]
 8008630:	4618      	mov	r0, r3
 8008632:	f000 f9dd 	bl	80089f0 <RTC_Bcd2ToByte>
 8008636:	4603      	mov	r3, r0
 8008638:	461a      	mov	r2, r3
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	789b      	ldrb	r3, [r3, #2]
 8008642:	4618      	mov	r0, r3
 8008644:	f000 f9d4 	bl	80089f0 <RTC_Bcd2ToByte>
 8008648:	4603      	mov	r3, r0
 800864a:	461a      	mov	r2, r3
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800865a:	b590      	push	{r4, r7, lr}
 800865c:	b089      	sub	sp, #36	; 0x24
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008666:	2300      	movs	r3, #0
 8008668:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	7f1b      	ldrb	r3, [r3, #28]
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <HAL_RTC_SetAlarm+0x24>
 800867a:	2302      	movs	r3, #2
 800867c:	e113      	b.n	80088a6 <HAL_RTC_SetAlarm+0x24c>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2202      	movs	r2, #2
 8008688:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d137      	bne.n	8008700 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d102      	bne.n	80086a4 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2200      	movs	r2, #0
 80086a2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 f984 	bl	80089b6 <RTC_ByteToBcd2>
 80086ae:	4603      	mov	r3, r0
 80086b0:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	785b      	ldrb	r3, [r3, #1]
 80086b6:	4618      	mov	r0, r3
 80086b8:	f000 f97d 	bl	80089b6 <RTC_ByteToBcd2>
 80086bc:	4603      	mov	r3, r0
 80086be:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80086c0:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	789b      	ldrb	r3, [r3, #2]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 f975 	bl	80089b6 <RTC_ByteToBcd2>
 80086cc:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80086ce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	78db      	ldrb	r3, [r3, #3]
 80086d6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80086d8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 f967 	bl	80089b6 <RTC_ByteToBcd2>
 80086e8:	4603      	mov	r3, r0
 80086ea:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80086ec:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80086f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80086fa:	4313      	orrs	r3, r2
 80086fc:	61fb      	str	r3, [r7, #28]
 80086fe:	e023      	b.n	8008748 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2200      	movs	r2, #0
 8008712:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	785b      	ldrb	r3, [r3, #1]
 800871e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008720:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008722:	68ba      	ldr	r2, [r7, #8]
 8008724:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008726:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	78db      	ldrb	r3, [r3, #3]
 800872c:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800872e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008736:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008738:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800873e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008744:	4313      	orrs	r3, r2
 8008746:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008750:	4313      	orrs	r3, r2
 8008752:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	22ca      	movs	r2, #202	; 0xca
 800875a:	625a      	str	r2, [r3, #36]	; 0x24
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2253      	movs	r2, #83	; 0x53
 8008762:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800876c:	d148      	bne.n	8008800 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689a      	ldr	r2, [r3, #8]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800877c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800878c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	b2da      	uxtb	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800879e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087a0:	f7fc ff04 	bl	80055ac <HAL_GetTick>
 80087a4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80087a6:	e013      	b.n	80087d0 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80087a8:	f7fc ff00 	bl	80055ac <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087b6:	d90b      	bls.n	80087d0 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	22ff      	movs	r2, #255	; 0xff
 80087be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2203      	movs	r2, #3
 80087c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2200      	movs	r2, #0
 80087ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e06a      	b.n	80088a6 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	f003 0301 	and.w	r3, r3, #1
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0e4      	beq.n	80087a8 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	69fa      	ldr	r2, [r7, #28]
 80087e4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	697a      	ldr	r2, [r7, #20]
 80087ec:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	689a      	ldr	r2, [r3, #8]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80087fc:	609a      	str	r2, [r3, #8]
 80087fe:	e047      	b.n	8008890 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800880e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800881e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008830:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008832:	f7fc febb 	bl	80055ac <HAL_GetTick>
 8008836:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008838:	e013      	b.n	8008862 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800883a:	f7fc feb7 	bl	80055ac <HAL_GetTick>
 800883e:	4602      	mov	r2, r0
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	1ad3      	subs	r3, r2, r3
 8008844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008848:	d90b      	bls.n	8008862 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	22ff      	movs	r2, #255	; 0xff
 8008850:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2203      	movs	r2, #3
 8008856:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e021      	b.n	80088a6 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f003 0302 	and.w	r3, r3, #2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0e4      	beq.n	800883a <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	69fa      	ldr	r2, [r7, #28]
 8008876:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	689a      	ldr	r2, [r3, #8]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800888e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	22ff      	movs	r2, #255	; 0xff
 8008896:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3724      	adds	r7, #36	; 0x24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd90      	pop	{r4, r7, pc}

080088ae <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b084      	sub	sp, #16
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088c8:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088ca:	f7fc fe6f 	bl	80055ac <HAL_GetTick>
 80088ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80088d0:	e009      	b.n	80088e6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80088d2:	f7fc fe6b 	bl	80055ac <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088e0:	d901      	bls.n	80088e6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e007      	b.n	80088f6 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d0ee      	beq.n	80088d2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008906:	2300      	movs	r3, #0
 8008908:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008918:	2b00      	cmp	r3, #0
 800891a:	d122      	bne.n	8008962 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68da      	ldr	r2, [r3, #12]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800892a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800892c:	f7fc fe3e 	bl	80055ac <HAL_GetTick>
 8008930:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008932:	e00c      	b.n	800894e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008934:	f7fc fe3a 	bl	80055ac <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008942:	d904      	bls.n	800894e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2204      	movs	r2, #4
 8008948:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d102      	bne.n	8008962 <RTC_EnterInitMode+0x64>
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d1e8      	bne.n	8008934 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68da      	ldr	r2, [r3, #12]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008986:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f003 0320 	and.w	r3, r3, #32
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10a      	bne.n	80089ac <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff ff89 	bl	80088ae <HAL_RTC_WaitForSynchro>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d004      	beq.n	80089ac <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2204      	movs	r2, #4
 80089a6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80089b6:	b480      	push	{r7}
 80089b8:	b085      	sub	sp, #20
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	4603      	mov	r3, r0
 80089be:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80089c4:	e005      	b.n	80089d2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	3301      	adds	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80089cc:	79fb      	ldrb	r3, [r7, #7]
 80089ce:	3b0a      	subs	r3, #10
 80089d0:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	2b09      	cmp	r3, #9
 80089d6:	d8f6      	bhi.n	80089c6 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	79fb      	ldrb	r3, [r7, #7]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	b2db      	uxtb	r3, r3
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3714      	adds	r7, #20
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	4603      	mov	r3, r0
 80089f8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	091b      	lsrs	r3, r3, #4
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	0092      	lsls	r2, r2, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	f003 030f 	and.w	r3, r3, #15
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	4413      	add	r3, r2
 8008a1a:	b2db      	uxtb	r3, r3
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e041      	b.n	8008abe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d106      	bne.n	8008a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7fc fc7e 	bl	8005350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2202      	movs	r2, #2
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	3304      	adds	r3, #4
 8008a64:	4619      	mov	r1, r3
 8008a66:	4610      	mov	r0, r2
 8008a68:	f000 fc54 	bl	8009314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2201      	movs	r2, #1
 8008a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2201      	movs	r2, #1
 8008a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d001      	beq.n	8008ae0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e044      	b.n	8008b6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2202      	movs	r2, #2
 8008ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68da      	ldr	r2, [r3, #12]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0201 	orr.w	r2, r2, #1
 8008af6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a1e      	ldr	r2, [pc, #120]	; (8008b78 <HAL_TIM_Base_Start_IT+0xb0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d018      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x6c>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b0a:	d013      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x6c>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a1a      	ldr	r2, [pc, #104]	; (8008b7c <HAL_TIM_Base_Start_IT+0xb4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d00e      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x6c>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a19      	ldr	r2, [pc, #100]	; (8008b80 <HAL_TIM_Base_Start_IT+0xb8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d009      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x6c>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a17      	ldr	r2, [pc, #92]	; (8008b84 <HAL_TIM_Base_Start_IT+0xbc>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d004      	beq.n	8008b34 <HAL_TIM_Base_Start_IT+0x6c>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a16      	ldr	r2, [pc, #88]	; (8008b88 <HAL_TIM_Base_Start_IT+0xc0>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d111      	bne.n	8008b58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f003 0307 	and.w	r3, r3, #7
 8008b3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2b06      	cmp	r3, #6
 8008b44:	d010      	beq.n	8008b68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0201 	orr.w	r2, r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b56:	e007      	b.n	8008b68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr
 8008b76:	bf00      	nop
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	40000400 	.word	0x40000400
 8008b80:	40000800 	.word	0x40000800
 8008b84:	40000c00 	.word	0x40000c00
 8008b88:	40014000 	.word	0x40014000

08008b8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d101      	bne.n	8008b9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e041      	b.n	8008c22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d106      	bne.n	8008bb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f839 	bl	8008c2a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2202      	movs	r2, #2
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f000 fba2 	bl	8009314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c20:	2300      	movs	r3, #0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
	...

08008c40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d109      	bne.n	8008c64 <HAL_TIM_PWM_Start+0x24>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	bf14      	ite	ne
 8008c5c:	2301      	movne	r3, #1
 8008c5e:	2300      	moveq	r3, #0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	e022      	b.n	8008caa <HAL_TIM_PWM_Start+0x6a>
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	2b04      	cmp	r3, #4
 8008c68:	d109      	bne.n	8008c7e <HAL_TIM_PWM_Start+0x3e>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	bf14      	ite	ne
 8008c76:	2301      	movne	r3, #1
 8008c78:	2300      	moveq	r3, #0
 8008c7a:	b2db      	uxtb	r3, r3
 8008c7c:	e015      	b.n	8008caa <HAL_TIM_PWM_Start+0x6a>
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	2b08      	cmp	r3, #8
 8008c82:	d109      	bne.n	8008c98 <HAL_TIM_PWM_Start+0x58>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	bf14      	ite	ne
 8008c90:	2301      	movne	r3, #1
 8008c92:	2300      	moveq	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	e008      	b.n	8008caa <HAL_TIM_PWM_Start+0x6a>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	bf14      	ite	ne
 8008ca4:	2301      	movne	r3, #1
 8008ca6:	2300      	moveq	r3, #0
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	e068      	b.n	8008d84 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d104      	bne.n	8008cc2 <HAL_TIM_PWM_Start+0x82>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2202      	movs	r2, #2
 8008cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cc0:	e013      	b.n	8008cea <HAL_TIM_PWM_Start+0xaa>
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	2b04      	cmp	r3, #4
 8008cc6:	d104      	bne.n	8008cd2 <HAL_TIM_PWM_Start+0x92>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cd0:	e00b      	b.n	8008cea <HAL_TIM_PWM_Start+0xaa>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b08      	cmp	r3, #8
 8008cd6:	d104      	bne.n	8008ce2 <HAL_TIM_PWM_Start+0xa2>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2202      	movs	r2, #2
 8008cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ce0:	e003      	b.n	8008cea <HAL_TIM_PWM_Start+0xaa>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2202      	movs	r2, #2
 8008ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	6839      	ldr	r1, [r7, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 fdb4 	bl	8009860 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a23      	ldr	r2, [pc, #140]	; (8008d8c <HAL_TIM_PWM_Start+0x14c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d107      	bne.n	8008d12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a1d      	ldr	r2, [pc, #116]	; (8008d8c <HAL_TIM_PWM_Start+0x14c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d018      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x10e>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d24:	d013      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x10e>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a19      	ldr	r2, [pc, #100]	; (8008d90 <HAL_TIM_PWM_Start+0x150>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00e      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x10e>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a17      	ldr	r2, [pc, #92]	; (8008d94 <HAL_TIM_PWM_Start+0x154>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d009      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x10e>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a16      	ldr	r2, [pc, #88]	; (8008d98 <HAL_TIM_PWM_Start+0x158>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d004      	beq.n	8008d4e <HAL_TIM_PWM_Start+0x10e>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a14      	ldr	r2, [pc, #80]	; (8008d9c <HAL_TIM_PWM_Start+0x15c>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d111      	bne.n	8008d72 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	f003 0307 	and.w	r3, r3, #7
 8008d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b06      	cmp	r3, #6
 8008d5e:	d010      	beq.n	8008d82 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f042 0201 	orr.w	r2, r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d70:	e007      	b.n	8008d82 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f042 0201 	orr.w	r2, r2, #1
 8008d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008d82:	2300      	movs	r3, #0
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	40010000 	.word	0x40010000
 8008d90:	40000400 	.word	0x40000400
 8008d94:	40000800 	.word	0x40000800
 8008d98:	40000c00 	.word	0x40000c00
 8008d9c:	40014000 	.word	0x40014000

08008da0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d122      	bne.n	8008dfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d11b      	bne.n	8008dfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f06f 0202 	mvn.w	r2, #2
 8008dcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 fa77 	bl	80092d6 <HAL_TIM_IC_CaptureCallback>
 8008de8:	e005      	b.n	8008df6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa69 	bl	80092c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fa7a 	bl	80092ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	f003 0304 	and.w	r3, r3, #4
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d122      	bne.n	8008e50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f003 0304 	and.w	r3, r3, #4
 8008e14:	2b04      	cmp	r3, #4
 8008e16:	d11b      	bne.n	8008e50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f06f 0204 	mvn.w	r2, #4
 8008e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2202      	movs	r2, #2
 8008e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 fa4d 	bl	80092d6 <HAL_TIM_IC_CaptureCallback>
 8008e3c:	e005      	b.n	8008e4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fa3f 	bl	80092c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 fa50 	bl	80092ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	691b      	ldr	r3, [r3, #16]
 8008e56:	f003 0308 	and.w	r3, r3, #8
 8008e5a:	2b08      	cmp	r3, #8
 8008e5c:	d122      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	f003 0308 	and.w	r3, r3, #8
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d11b      	bne.n	8008ea4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f06f 0208 	mvn.w	r2, #8
 8008e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2204      	movs	r2, #4
 8008e7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fa23 	bl	80092d6 <HAL_TIM_IC_CaptureCallback>
 8008e90:	e005      	b.n	8008e9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fa15 	bl	80092c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fa26 	bl	80092ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	f003 0310 	and.w	r3, r3, #16
 8008eae:	2b10      	cmp	r3, #16
 8008eb0:	d122      	bne.n	8008ef8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f003 0310 	and.w	r3, r3, #16
 8008ebc:	2b10      	cmp	r3, #16
 8008ebe:	d11b      	bne.n	8008ef8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f06f 0210 	mvn.w	r2, #16
 8008ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2208      	movs	r2, #8
 8008ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	69db      	ldr	r3, [r3, #28]
 8008ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f9f9 	bl	80092d6 <HAL_TIM_IC_CaptureCallback>
 8008ee4:	e005      	b.n	8008ef2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f9eb 	bl	80092c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f000 f9fc 	bl	80092ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d10e      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	f003 0301 	and.w	r3, r3, #1
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d107      	bne.n	8008f24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f06f 0201 	mvn.w	r2, #1
 8008f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7fa face 	bl	80034c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f2e:	2b80      	cmp	r3, #128	; 0x80
 8008f30:	d10e      	bne.n	8008f50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f3c:	2b80      	cmp	r3, #128	; 0x80
 8008f3e:	d107      	bne.n	8008f50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fd26 	bl	800999c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f5a:	2b40      	cmp	r3, #64	; 0x40
 8008f5c:	d10e      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68db      	ldr	r3, [r3, #12]
 8008f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f68:	2b40      	cmp	r3, #64	; 0x40
 8008f6a:	d107      	bne.n	8008f7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f9c1 	bl	80092fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	f003 0320 	and.w	r3, r3, #32
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d10e      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	f003 0320 	and.w	r3, r3, #32
 8008f94:	2b20      	cmp	r3, #32
 8008f96:	d107      	bne.n	8008fa8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f06f 0220 	mvn.w	r2, #32
 8008fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 fcf0 	bl	8009988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008fa8:	bf00      	nop
 8008faa:	3708      	adds	r7, #8
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d101      	bne.n	8008fce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008fca:	2302      	movs	r3, #2
 8008fcc:	e0ae      	b.n	800912c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b0c      	cmp	r3, #12
 8008fda:	f200 809f 	bhi.w	800911c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008fde:	a201      	add	r2, pc, #4	; (adr r2, 8008fe4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe4:	08009019 	.word	0x08009019
 8008fe8:	0800911d 	.word	0x0800911d
 8008fec:	0800911d 	.word	0x0800911d
 8008ff0:	0800911d 	.word	0x0800911d
 8008ff4:	08009059 	.word	0x08009059
 8008ff8:	0800911d 	.word	0x0800911d
 8008ffc:	0800911d 	.word	0x0800911d
 8009000:	0800911d 	.word	0x0800911d
 8009004:	0800909b 	.word	0x0800909b
 8009008:	0800911d 	.word	0x0800911d
 800900c:	0800911d 	.word	0x0800911d
 8009010:	0800911d 	.word	0x0800911d
 8009014:	080090db 	.word	0x080090db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68b9      	ldr	r1, [r7, #8]
 800901e:	4618      	mov	r0, r3
 8009020:	f000 f9f8 	bl	8009414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 0208 	orr.w	r2, r2, #8
 8009032:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	699a      	ldr	r2, [r3, #24]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0204 	bic.w	r2, r2, #4
 8009042:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	6999      	ldr	r1, [r3, #24]
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	691a      	ldr	r2, [r3, #16]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	619a      	str	r2, [r3, #24]
      break;
 8009056:	e064      	b.n	8009122 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 fa3e 	bl	80094e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6999      	ldr	r1, [r3, #24]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	021a      	lsls	r2, r3, #8
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	619a      	str	r2, [r3, #24]
      break;
 8009098:	e043      	b.n	8009122 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68b9      	ldr	r1, [r7, #8]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f000 fa89 	bl	80095b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	69da      	ldr	r2, [r3, #28]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f042 0208 	orr.w	r2, r2, #8
 80090b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69da      	ldr	r2, [r3, #28]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f022 0204 	bic.w	r2, r2, #4
 80090c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69d9      	ldr	r1, [r3, #28]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	691a      	ldr	r2, [r3, #16]
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	61da      	str	r2, [r3, #28]
      break;
 80090d8:	e023      	b.n	8009122 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68b9      	ldr	r1, [r7, #8]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fad3 	bl	800968c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69da      	ldr	r2, [r3, #28]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69da      	ldr	r2, [r3, #28]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69d9      	ldr	r1, [r3, #28]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	021a      	lsls	r2, r3, #8
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	61da      	str	r2, [r3, #28]
      break;
 800911a:	e002      	b.n	8009122 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800911c:	2301      	movs	r3, #1
 800911e:	75fb      	strb	r3, [r7, #23]
      break;
 8009120:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800912a:	7dfb      	ldrb	r3, [r7, #23]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009148:	2b01      	cmp	r3, #1
 800914a:	d101      	bne.n	8009150 <HAL_TIM_ConfigClockSource+0x1c>
 800914c:	2302      	movs	r3, #2
 800914e:	e0b4      	b.n	80092ba <HAL_TIM_ConfigClockSource+0x186>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800916e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009176:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009188:	d03e      	beq.n	8009208 <HAL_TIM_ConfigClockSource+0xd4>
 800918a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800918e:	f200 8087 	bhi.w	80092a0 <HAL_TIM_ConfigClockSource+0x16c>
 8009192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009196:	f000 8086 	beq.w	80092a6 <HAL_TIM_ConfigClockSource+0x172>
 800919a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800919e:	d87f      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x16c>
 80091a0:	2b70      	cmp	r3, #112	; 0x70
 80091a2:	d01a      	beq.n	80091da <HAL_TIM_ConfigClockSource+0xa6>
 80091a4:	2b70      	cmp	r3, #112	; 0x70
 80091a6:	d87b      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x16c>
 80091a8:	2b60      	cmp	r3, #96	; 0x60
 80091aa:	d050      	beq.n	800924e <HAL_TIM_ConfigClockSource+0x11a>
 80091ac:	2b60      	cmp	r3, #96	; 0x60
 80091ae:	d877      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x16c>
 80091b0:	2b50      	cmp	r3, #80	; 0x50
 80091b2:	d03c      	beq.n	800922e <HAL_TIM_ConfigClockSource+0xfa>
 80091b4:	2b50      	cmp	r3, #80	; 0x50
 80091b6:	d873      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x16c>
 80091b8:	2b40      	cmp	r3, #64	; 0x40
 80091ba:	d058      	beq.n	800926e <HAL_TIM_ConfigClockSource+0x13a>
 80091bc:	2b40      	cmp	r3, #64	; 0x40
 80091be:	d86f      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x16c>
 80091c0:	2b30      	cmp	r3, #48	; 0x30
 80091c2:	d064      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x15a>
 80091c4:	2b30      	cmp	r3, #48	; 0x30
 80091c6:	d86b      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x16c>
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d060      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x15a>
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	d867      	bhi.n	80092a0 <HAL_TIM_ConfigClockSource+0x16c>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d05c      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x15a>
 80091d4:	2b10      	cmp	r3, #16
 80091d6:	d05a      	beq.n	800928e <HAL_TIM_ConfigClockSource+0x15a>
 80091d8:	e062      	b.n	80092a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	6899      	ldr	r1, [r3, #8]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	685a      	ldr	r2, [r3, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f000 fb19 	bl	8009820 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80091fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	609a      	str	r2, [r3, #8]
      break;
 8009206:	e04f      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6818      	ldr	r0, [r3, #0]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	6899      	ldr	r1, [r3, #8]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f000 fb02 	bl	8009820 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689a      	ldr	r2, [r3, #8]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800922a:	609a      	str	r2, [r3, #8]
      break;
 800922c:	e03c      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	6859      	ldr	r1, [r3, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	461a      	mov	r2, r3
 800923c:	f000 fa76 	bl	800972c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2150      	movs	r1, #80	; 0x50
 8009246:	4618      	mov	r0, r3
 8009248:	f000 facf 	bl	80097ea <TIM_ITRx_SetConfig>
      break;
 800924c:	e02c      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6818      	ldr	r0, [r3, #0]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	6859      	ldr	r1, [r3, #4]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	461a      	mov	r2, r3
 800925c:	f000 fa95 	bl	800978a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2160      	movs	r1, #96	; 0x60
 8009266:	4618      	mov	r0, r3
 8009268:	f000 fabf 	bl	80097ea <TIM_ITRx_SetConfig>
      break;
 800926c:	e01c      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	6859      	ldr	r1, [r3, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	461a      	mov	r2, r3
 800927c:	f000 fa56 	bl	800972c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2140      	movs	r1, #64	; 0x40
 8009286:	4618      	mov	r0, r3
 8009288:	f000 faaf 	bl	80097ea <TIM_ITRx_SetConfig>
      break;
 800928c:	e00c      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4619      	mov	r1, r3
 8009298:	4610      	mov	r0, r2
 800929a:	f000 faa6 	bl	80097ea <TIM_ITRx_SetConfig>
      break;
 800929e:	e003      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	73fb      	strb	r3, [r7, #15]
      break;
 80092a4:	e000      	b.n	80092a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80092a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80092b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092ca:	bf00      	nop
 80092cc:	370c      	adds	r7, #12
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b083      	sub	sp, #12
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092de:	bf00      	nop
 80092e0:	370c      	adds	r7, #12
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092ea:	b480      	push	{r7}
 80092ec:	b083      	sub	sp, #12
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092f2:	bf00      	nop
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009306:	bf00      	nop
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
	...

08009314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a34      	ldr	r2, [pc, #208]	; (80093f8 <TIM_Base_SetConfig+0xe4>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00f      	beq.n	800934c <TIM_Base_SetConfig+0x38>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009332:	d00b      	beq.n	800934c <TIM_Base_SetConfig+0x38>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a31      	ldr	r2, [pc, #196]	; (80093fc <TIM_Base_SetConfig+0xe8>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_Base_SetConfig+0x38>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a30      	ldr	r2, [pc, #192]	; (8009400 <TIM_Base_SetConfig+0xec>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_Base_SetConfig+0x38>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a2f      	ldr	r2, [pc, #188]	; (8009404 <TIM_Base_SetConfig+0xf0>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d108      	bne.n	800935e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	4313      	orrs	r3, r2
 800935c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a25      	ldr	r2, [pc, #148]	; (80093f8 <TIM_Base_SetConfig+0xe4>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d01b      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800936c:	d017      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	4a22      	ldr	r2, [pc, #136]	; (80093fc <TIM_Base_SetConfig+0xe8>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d013      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a21      	ldr	r2, [pc, #132]	; (8009400 <TIM_Base_SetConfig+0xec>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d00f      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a20      	ldr	r2, [pc, #128]	; (8009404 <TIM_Base_SetConfig+0xf0>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d00b      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a1f      	ldr	r2, [pc, #124]	; (8009408 <TIM_Base_SetConfig+0xf4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d007      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	4a1e      	ldr	r2, [pc, #120]	; (800940c <TIM_Base_SetConfig+0xf8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d003      	beq.n	800939e <TIM_Base_SetConfig+0x8a>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	4a1d      	ldr	r2, [pc, #116]	; (8009410 <TIM_Base_SetConfig+0xfc>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d108      	bne.n	80093b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	68fa      	ldr	r2, [r7, #12]
 80093ac:	4313      	orrs	r3, r2
 80093ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	695b      	ldr	r3, [r3, #20]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	689a      	ldr	r2, [r3, #8]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a08      	ldr	r2, [pc, #32]	; (80093f8 <TIM_Base_SetConfig+0xe4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d103      	bne.n	80093e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	691a      	ldr	r2, [r3, #16]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	615a      	str	r2, [r3, #20]
}
 80093ea:	bf00      	nop
 80093ec:	3714      	adds	r7, #20
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	40010000 	.word	0x40010000
 80093fc:	40000400 	.word	0x40000400
 8009400:	40000800 	.word	0x40000800
 8009404:	40000c00 	.word	0x40000c00
 8009408:	40014000 	.word	0x40014000
 800940c:	40014400 	.word	0x40014400
 8009410:	40014800 	.word	0x40014800

08009414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a1b      	ldr	r3, [r3, #32]
 8009422:	f023 0201 	bic.w	r2, r3, #1
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 0303 	bic.w	r3, r3, #3
 800944a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4313      	orrs	r3, r2
 8009454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f023 0302 	bic.w	r3, r3, #2
 800945c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	4313      	orrs	r3, r2
 8009466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a1c      	ldr	r2, [pc, #112]	; (80094dc <TIM_OC1_SetConfig+0xc8>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d10c      	bne.n	800948a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	f023 0308 	bic.w	r3, r3, #8
 8009476:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	4313      	orrs	r3, r2
 8009480:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f023 0304 	bic.w	r3, r3, #4
 8009488:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a13      	ldr	r2, [pc, #76]	; (80094dc <TIM_OC1_SetConfig+0xc8>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d111      	bne.n	80094b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	693a      	ldr	r2, [r7, #16]
 80094b2:	4313      	orrs	r3, r2
 80094b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68fa      	ldr	r2, [r7, #12]
 80094c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	685a      	ldr	r2, [r3, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	697a      	ldr	r2, [r7, #20]
 80094ce:	621a      	str	r2, [r3, #32]
}
 80094d0:	bf00      	nop
 80094d2:	371c      	adds	r7, #28
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr
 80094dc:	40010000 	.word	0x40010000

080094e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	f023 0210 	bic.w	r2, r3, #16
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800950e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f023 0320 	bic.w	r3, r3, #32
 800952a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	4313      	orrs	r3, r2
 8009536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a1e      	ldr	r2, [pc, #120]	; (80095b4 <TIM_OC2_SetConfig+0xd4>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d10d      	bne.n	800955c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	011b      	lsls	r3, r3, #4
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4313      	orrs	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800955a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a15      	ldr	r2, [pc, #84]	; (80095b4 <TIM_OC2_SetConfig+0xd4>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d113      	bne.n	800958c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800956a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009572:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	4313      	orrs	r3, r2
 800957e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4313      	orrs	r3, r2
 800958a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	685a      	ldr	r2, [r3, #4]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	621a      	str	r2, [r3, #32]
}
 80095a6:	bf00      	nop
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	40010000 	.word	0x40010000

080095b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0303 	bic.w	r3, r3, #3
 80095ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	021b      	lsls	r3, r3, #8
 8009608:	697a      	ldr	r2, [r7, #20]
 800960a:	4313      	orrs	r3, r2
 800960c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a1d      	ldr	r2, [pc, #116]	; (8009688 <TIM_OC3_SetConfig+0xd0>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d10d      	bne.n	8009632 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800961c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	021b      	lsls	r3, r3, #8
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	4313      	orrs	r3, r2
 8009628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a14      	ldr	r2, [pc, #80]	; (8009688 <TIM_OC3_SetConfig+0xd0>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d113      	bne.n	8009662 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	011b      	lsls	r3, r3, #4
 8009650:	693a      	ldr	r2, [r7, #16]
 8009652:	4313      	orrs	r3, r2
 8009654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	693a      	ldr	r2, [r7, #16]
 800965e:	4313      	orrs	r3, r2
 8009660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	693a      	ldr	r2, [r7, #16]
 8009666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	685a      	ldr	r2, [r3, #4]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	621a      	str	r2, [r3, #32]
}
 800967c:	bf00      	nop
 800967e:	371c      	adds	r7, #28
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	40010000 	.word	0x40010000

0800968c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800968c:	b480      	push	{r7}
 800968e:	b087      	sub	sp, #28
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a1b      	ldr	r3, [r3, #32]
 800969a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	021b      	lsls	r3, r3, #8
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	031b      	lsls	r3, r3, #12
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a10      	ldr	r2, [pc, #64]	; (8009728 <TIM_OC4_SetConfig+0x9c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d109      	bne.n	8009700 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	695b      	ldr	r3, [r3, #20]
 80096f8:	019b      	lsls	r3, r3, #6
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	685a      	ldr	r2, [r3, #4]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	621a      	str	r2, [r3, #32]
}
 800971a:	bf00      	nop
 800971c:	371c      	adds	r7, #28
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	40010000 	.word	0x40010000

0800972c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	f023 0201 	bic.w	r2, r3, #1
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	699b      	ldr	r3, [r3, #24]
 800974e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	011b      	lsls	r3, r3, #4
 800975c:	693a      	ldr	r2, [r7, #16]
 800975e:	4313      	orrs	r3, r2
 8009760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f023 030a 	bic.w	r3, r3, #10
 8009768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	4313      	orrs	r3, r2
 8009770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	697a      	ldr	r2, [r7, #20]
 800977c:	621a      	str	r2, [r3, #32]
}
 800977e:	bf00      	nop
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800978a:	b480      	push	{r7}
 800978c:	b087      	sub	sp, #28
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	60b9      	str	r1, [r7, #8]
 8009794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6a1b      	ldr	r3, [r3, #32]
 800979a:	f023 0210 	bic.w	r2, r3, #16
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	6a1b      	ldr	r3, [r3, #32]
 80097ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	031b      	lsls	r3, r3, #12
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4313      	orrs	r3, r2
 80097be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	011b      	lsls	r3, r3, #4
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	4313      	orrs	r3, r2
 80097d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	693a      	ldr	r2, [r7, #16]
 80097dc:	621a      	str	r2, [r3, #32]
}
 80097de:	bf00      	nop
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097ea:	b480      	push	{r7}
 80097ec:	b085      	sub	sp, #20
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	4313      	orrs	r3, r2
 8009808:	f043 0307 	orr.w	r3, r3, #7
 800980c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	609a      	str	r2, [r3, #8]
}
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
 800982c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	689b      	ldr	r3, [r3, #8]
 8009832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800983a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	021a      	lsls	r2, r3, #8
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	431a      	orrs	r2, r3
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	4313      	orrs	r3, r2
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	4313      	orrs	r3, r2
 800984c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	609a      	str	r2, [r3, #8]
}
 8009854:	bf00      	nop
 8009856:	371c      	adds	r7, #28
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009860:	b480      	push	{r7}
 8009862:	b087      	sub	sp, #28
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	f003 031f 	and.w	r3, r3, #31
 8009872:	2201      	movs	r2, #1
 8009874:	fa02 f303 	lsl.w	r3, r2, r3
 8009878:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6a1a      	ldr	r2, [r3, #32]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	43db      	mvns	r3, r3
 8009882:	401a      	ands	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6a1a      	ldr	r2, [r3, #32]
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	f003 031f 	and.w	r3, r3, #31
 8009892:	6879      	ldr	r1, [r7, #4]
 8009894:	fa01 f303 	lsl.w	r3, r1, r3
 8009898:	431a      	orrs	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
	...

080098ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d101      	bne.n	80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098c0:	2302      	movs	r3, #2
 80098c2:	e050      	b.n	8009966 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2202      	movs	r2, #2
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a1c      	ldr	r2, [pc, #112]	; (8009974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d018      	beq.n	800993a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009910:	d013      	beq.n	800993a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a18      	ldr	r2, [pc, #96]	; (8009978 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00e      	beq.n	800993a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a16      	ldr	r2, [pc, #88]	; (800997c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d009      	beq.n	800993a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a15      	ldr	r2, [pc, #84]	; (8009980 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d004      	beq.n	800993a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a13      	ldr	r2, [pc, #76]	; (8009984 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d10c      	bne.n	8009954 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	4313      	orrs	r3, r2
 800994a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68ba      	ldr	r2, [r7, #8]
 8009952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	40010000 	.word	0x40010000
 8009978:	40000400 	.word	0x40000400
 800997c:	40000800 	.word	0x40000800
 8009980:	40000c00 	.word	0x40000c00
 8009984:	40014000 	.word	0x40014000

08009988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e03f      	b.n	8009a42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d106      	bne.n	80099dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7fb fd40 	bl	800545c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2224      	movs	r2, #36	; 0x24
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f000 f929 	bl	8009c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	695a      	ldr	r2, [r3, #20]
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68da      	ldr	r2, [r3, #12]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b08a      	sub	sp, #40	; 0x28
 8009a4e:	af02      	add	r7, sp, #8
 8009a50:	60f8      	str	r0, [r7, #12]
 8009a52:	60b9      	str	r1, [r7, #8]
 8009a54:	603b      	str	r3, [r7, #0]
 8009a56:	4613      	mov	r3, r2
 8009a58:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	2b20      	cmp	r3, #32
 8009a68:	d17c      	bne.n	8009b64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <HAL_UART_Transmit+0x2c>
 8009a70:	88fb      	ldrh	r3, [r7, #6]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009a76:	2301      	movs	r3, #1
 8009a78:	e075      	b.n	8009b66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_UART_Transmit+0x3e>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e06e      	b.n	8009b66 <HAL_UART_Transmit+0x11c>
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	2221      	movs	r2, #33	; 0x21
 8009a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a9e:	f7fb fd85 	bl	80055ac <HAL_GetTick>
 8009aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	88fa      	ldrh	r2, [r7, #6]
 8009aa8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	88fa      	ldrh	r2, [r7, #6]
 8009aae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	689b      	ldr	r3, [r3, #8]
 8009ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab8:	d108      	bne.n	8009acc <HAL_UART_Transmit+0x82>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d104      	bne.n	8009acc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	e003      	b.n	8009ad4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009adc:	e02a      	b.n	8009b34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	9300      	str	r3, [sp, #0]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	2180      	movs	r1, #128	; 0x80
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 f840 	bl	8009b6e <UART_WaitOnFlagUntilTimeout>
 8009aee:	4603      	mov	r3, r0
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d001      	beq.n	8009af8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e036      	b.n	8009b66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10b      	bne.n	8009b16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	3302      	adds	r3, #2
 8009b12:	61bb      	str	r3, [r7, #24]
 8009b14:	e007      	b.n	8009b26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	3301      	adds	r3, #1
 8009b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1cf      	bne.n	8009ade <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2200      	movs	r2, #0
 8009b46:	2140      	movs	r1, #64	; 0x40
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 f810 	bl	8009b6e <UART_WaitOnFlagUntilTimeout>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e006      	b.n	8009b66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	e000      	b.n	8009b66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009b64:	2302      	movs	r3, #2
  }
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3720      	adds	r7, #32
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b090      	sub	sp, #64	; 0x40
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	603b      	str	r3, [r7, #0]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b7e:	e050      	b.n	8009c22 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b86:	d04c      	beq.n	8009c22 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d007      	beq.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x30>
 8009b8e:	f7fb fd0d 	bl	80055ac <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d241      	bcs.n	8009c22 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	330c      	adds	r3, #12
 8009ba4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	e853 3f00 	ldrex	r3, [r3]
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	330c      	adds	r3, #12
 8009bbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bbe:	637a      	str	r2, [r7, #52]	; 0x34
 8009bc0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009bc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bc6:	e841 2300 	strex	r3, r2, [r1]
 8009bca:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d1e5      	bne.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	3314      	adds	r3, #20
 8009bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	e853 3f00 	ldrex	r3, [r3]
 8009be0:	613b      	str	r3, [r7, #16]
   return(result);
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	f023 0301 	bic.w	r3, r3, #1
 8009be8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	3314      	adds	r3, #20
 8009bf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bf2:	623a      	str	r2, [r7, #32]
 8009bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf6:	69f9      	ldr	r1, [r7, #28]
 8009bf8:	6a3a      	ldr	r2, [r7, #32]
 8009bfa:	e841 2300 	strex	r3, r2, [r1]
 8009bfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d1e5      	bne.n	8009bd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e00f      	b.n	8009c42 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	68ba      	ldr	r2, [r7, #8]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	bf0c      	ite	eq
 8009c32:	2301      	moveq	r3, #1
 8009c34:	2300      	movne	r3, #0
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	461a      	mov	r2, r3
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d09f      	beq.n	8009b80 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3740      	adds	r7, #64	; 0x40
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c50:	b0c0      	sub	sp, #256	; 0x100
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c68:	68d9      	ldr	r1, [r3, #12]
 8009c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	ea40 0301 	orr.w	r3, r0, r1
 8009c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c7a:	689a      	ldr	r2, [r3, #8]
 8009c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c80:	691b      	ldr	r3, [r3, #16]
 8009c82:	431a      	orrs	r2, r3
 8009c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c88:	695b      	ldr	r3, [r3, #20]
 8009c8a:	431a      	orrs	r2, r3
 8009c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	68db      	ldr	r3, [r3, #12]
 8009ca0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ca4:	f021 010c 	bic.w	r1, r1, #12
 8009ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009cb2:	430b      	orrs	r3, r1
 8009cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	695b      	ldr	r3, [r3, #20]
 8009cbe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc6:	6999      	ldr	r1, [r3, #24]
 8009cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	ea40 0301 	orr.w	r3, r0, r1
 8009cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	4b8f      	ldr	r3, [pc, #572]	; (8009f18 <UART_SetConfig+0x2cc>)
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d005      	beq.n	8009cec <UART_SetConfig+0xa0>
 8009ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	4b8d      	ldr	r3, [pc, #564]	; (8009f1c <UART_SetConfig+0x2d0>)
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d104      	bne.n	8009cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009cec:	f7fe f93e 	bl	8007f6c <HAL_RCC_GetPCLK2Freq>
 8009cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009cf4:	e003      	b.n	8009cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009cf6:	f7fe f925 	bl	8007f44 <HAL_RCC_GetPCLK1Freq>
 8009cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d02:	69db      	ldr	r3, [r3, #28]
 8009d04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d08:	f040 810c 	bne.w	8009f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d10:	2200      	movs	r2, #0
 8009d12:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d16:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009d1e:	4622      	mov	r2, r4
 8009d20:	462b      	mov	r3, r5
 8009d22:	1891      	adds	r1, r2, r2
 8009d24:	65b9      	str	r1, [r7, #88]	; 0x58
 8009d26:	415b      	adcs	r3, r3
 8009d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009d2e:	4621      	mov	r1, r4
 8009d30:	eb12 0801 	adds.w	r8, r2, r1
 8009d34:	4629      	mov	r1, r5
 8009d36:	eb43 0901 	adc.w	r9, r3, r1
 8009d3a:	f04f 0200 	mov.w	r2, #0
 8009d3e:	f04f 0300 	mov.w	r3, #0
 8009d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009d4e:	4690      	mov	r8, r2
 8009d50:	4699      	mov	r9, r3
 8009d52:	4623      	mov	r3, r4
 8009d54:	eb18 0303 	adds.w	r3, r8, r3
 8009d58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d5c:	462b      	mov	r3, r5
 8009d5e:	eb49 0303 	adc.w	r3, r9, r3
 8009d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d6a:	685b      	ldr	r3, [r3, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d72:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	18db      	adds	r3, r3, r3
 8009d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8009d80:	4613      	mov	r3, r2
 8009d82:	eb42 0303 	adc.w	r3, r2, r3
 8009d86:	657b      	str	r3, [r7, #84]	; 0x54
 8009d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009d90:	f7f6 ff82 	bl	8000c98 <__aeabi_uldivmod>
 8009d94:	4602      	mov	r2, r0
 8009d96:	460b      	mov	r3, r1
 8009d98:	4b61      	ldr	r3, [pc, #388]	; (8009f20 <UART_SetConfig+0x2d4>)
 8009d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8009d9e:	095b      	lsrs	r3, r3, #5
 8009da0:	011c      	lsls	r4, r3, #4
 8009da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009da6:	2200      	movs	r2, #0
 8009da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009db4:	4642      	mov	r2, r8
 8009db6:	464b      	mov	r3, r9
 8009db8:	1891      	adds	r1, r2, r2
 8009dba:	64b9      	str	r1, [r7, #72]	; 0x48
 8009dbc:	415b      	adcs	r3, r3
 8009dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009dc4:	4641      	mov	r1, r8
 8009dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8009dca:	4649      	mov	r1, r9
 8009dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8009dd0:	f04f 0200 	mov.w	r2, #0
 8009dd4:	f04f 0300 	mov.w	r3, #0
 8009dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009de4:	4692      	mov	sl, r2
 8009de6:	469b      	mov	fp, r3
 8009de8:	4643      	mov	r3, r8
 8009dea:	eb1a 0303 	adds.w	r3, sl, r3
 8009dee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009df2:	464b      	mov	r3, r9
 8009df4:	eb4b 0303 	adc.w	r3, fp, r3
 8009df8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009e08:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009e10:	460b      	mov	r3, r1
 8009e12:	18db      	adds	r3, r3, r3
 8009e14:	643b      	str	r3, [r7, #64]	; 0x40
 8009e16:	4613      	mov	r3, r2
 8009e18:	eb42 0303 	adc.w	r3, r2, r3
 8009e1c:	647b      	str	r3, [r7, #68]	; 0x44
 8009e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009e26:	f7f6 ff37 	bl	8000c98 <__aeabi_uldivmod>
 8009e2a:	4602      	mov	r2, r0
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4b3b      	ldr	r3, [pc, #236]	; (8009f20 <UART_SetConfig+0x2d4>)
 8009e32:	fba3 2301 	umull	r2, r3, r3, r1
 8009e36:	095b      	lsrs	r3, r3, #5
 8009e38:	2264      	movs	r2, #100	; 0x64
 8009e3a:	fb02 f303 	mul.w	r3, r2, r3
 8009e3e:	1acb      	subs	r3, r1, r3
 8009e40:	00db      	lsls	r3, r3, #3
 8009e42:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009e46:	4b36      	ldr	r3, [pc, #216]	; (8009f20 <UART_SetConfig+0x2d4>)
 8009e48:	fba3 2302 	umull	r2, r3, r3, r2
 8009e4c:	095b      	lsrs	r3, r3, #5
 8009e4e:	005b      	lsls	r3, r3, #1
 8009e50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009e54:	441c      	add	r4, r3
 8009e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009e60:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009e68:	4642      	mov	r2, r8
 8009e6a:	464b      	mov	r3, r9
 8009e6c:	1891      	adds	r1, r2, r2
 8009e6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e70:	415b      	adcs	r3, r3
 8009e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e78:	4641      	mov	r1, r8
 8009e7a:	1851      	adds	r1, r2, r1
 8009e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8009e7e:	4649      	mov	r1, r9
 8009e80:	414b      	adcs	r3, r1
 8009e82:	637b      	str	r3, [r7, #52]	; 0x34
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	f04f 0300 	mov.w	r3, #0
 8009e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009e90:	4659      	mov	r1, fp
 8009e92:	00cb      	lsls	r3, r1, #3
 8009e94:	4651      	mov	r1, sl
 8009e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e9a:	4651      	mov	r1, sl
 8009e9c:	00ca      	lsls	r2, r1, #3
 8009e9e:	4610      	mov	r0, r2
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	4642      	mov	r2, r8
 8009ea6:	189b      	adds	r3, r3, r2
 8009ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009eac:	464b      	mov	r3, r9
 8009eae:	460a      	mov	r2, r1
 8009eb0:	eb42 0303 	adc.w	r3, r2, r3
 8009eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ecc:	460b      	mov	r3, r1
 8009ece:	18db      	adds	r3, r3, r3
 8009ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	eb42 0303 	adc.w	r3, r2, r3
 8009ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009ee2:	f7f6 fed9 	bl	8000c98 <__aeabi_uldivmod>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	4b0d      	ldr	r3, [pc, #52]	; (8009f20 <UART_SetConfig+0x2d4>)
 8009eec:	fba3 1302 	umull	r1, r3, r3, r2
 8009ef0:	095b      	lsrs	r3, r3, #5
 8009ef2:	2164      	movs	r1, #100	; 0x64
 8009ef4:	fb01 f303 	mul.w	r3, r1, r3
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	00db      	lsls	r3, r3, #3
 8009efc:	3332      	adds	r3, #50	; 0x32
 8009efe:	4a08      	ldr	r2, [pc, #32]	; (8009f20 <UART_SetConfig+0x2d4>)
 8009f00:	fba2 2303 	umull	r2, r3, r2, r3
 8009f04:	095b      	lsrs	r3, r3, #5
 8009f06:	f003 0207 	and.w	r2, r3, #7
 8009f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4422      	add	r2, r4
 8009f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009f14:	e106      	b.n	800a124 <UART_SetConfig+0x4d8>
 8009f16:	bf00      	nop
 8009f18:	40011000 	.word	0x40011000
 8009f1c:	40011400 	.word	0x40011400
 8009f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009f36:	4642      	mov	r2, r8
 8009f38:	464b      	mov	r3, r9
 8009f3a:	1891      	adds	r1, r2, r2
 8009f3c:	6239      	str	r1, [r7, #32]
 8009f3e:	415b      	adcs	r3, r3
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24
 8009f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009f46:	4641      	mov	r1, r8
 8009f48:	1854      	adds	r4, r2, r1
 8009f4a:	4649      	mov	r1, r9
 8009f4c:	eb43 0501 	adc.w	r5, r3, r1
 8009f50:	f04f 0200 	mov.w	r2, #0
 8009f54:	f04f 0300 	mov.w	r3, #0
 8009f58:	00eb      	lsls	r3, r5, #3
 8009f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009f5e:	00e2      	lsls	r2, r4, #3
 8009f60:	4614      	mov	r4, r2
 8009f62:	461d      	mov	r5, r3
 8009f64:	4643      	mov	r3, r8
 8009f66:	18e3      	adds	r3, r4, r3
 8009f68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f6c:	464b      	mov	r3, r9
 8009f6e:	eb45 0303 	adc.w	r3, r5, r3
 8009f72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f82:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009f92:	4629      	mov	r1, r5
 8009f94:	008b      	lsls	r3, r1, #2
 8009f96:	4621      	mov	r1, r4
 8009f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	008a      	lsls	r2, r1, #2
 8009fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009fa4:	f7f6 fe78 	bl	8000c98 <__aeabi_uldivmod>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	460b      	mov	r3, r1
 8009fac:	4b60      	ldr	r3, [pc, #384]	; (800a130 <UART_SetConfig+0x4e4>)
 8009fae:	fba3 2302 	umull	r2, r3, r3, r2
 8009fb2:	095b      	lsrs	r3, r3, #5
 8009fb4:	011c      	lsls	r4, r3, #4
 8009fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009fc0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009fc8:	4642      	mov	r2, r8
 8009fca:	464b      	mov	r3, r9
 8009fcc:	1891      	adds	r1, r2, r2
 8009fce:	61b9      	str	r1, [r7, #24]
 8009fd0:	415b      	adcs	r3, r3
 8009fd2:	61fb      	str	r3, [r7, #28]
 8009fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009fd8:	4641      	mov	r1, r8
 8009fda:	1851      	adds	r1, r2, r1
 8009fdc:	6139      	str	r1, [r7, #16]
 8009fde:	4649      	mov	r1, r9
 8009fe0:	414b      	adcs	r3, r1
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	f04f 0200 	mov.w	r2, #0
 8009fe8:	f04f 0300 	mov.w	r3, #0
 8009fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ff0:	4659      	mov	r1, fp
 8009ff2:	00cb      	lsls	r3, r1, #3
 8009ff4:	4651      	mov	r1, sl
 8009ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009ffa:	4651      	mov	r1, sl
 8009ffc:	00ca      	lsls	r2, r1, #3
 8009ffe:	4610      	mov	r0, r2
 800a000:	4619      	mov	r1, r3
 800a002:	4603      	mov	r3, r0
 800a004:	4642      	mov	r2, r8
 800a006:	189b      	adds	r3, r3, r2
 800a008:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a00c:	464b      	mov	r3, r9
 800a00e:	460a      	mov	r2, r1
 800a010:	eb42 0303 	adc.w	r3, r2, r3
 800a014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	67bb      	str	r3, [r7, #120]	; 0x78
 800a022:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a024:	f04f 0200 	mov.w	r2, #0
 800a028:	f04f 0300 	mov.w	r3, #0
 800a02c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a030:	4649      	mov	r1, r9
 800a032:	008b      	lsls	r3, r1, #2
 800a034:	4641      	mov	r1, r8
 800a036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a03a:	4641      	mov	r1, r8
 800a03c:	008a      	lsls	r2, r1, #2
 800a03e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a042:	f7f6 fe29 	bl	8000c98 <__aeabi_uldivmod>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4611      	mov	r1, r2
 800a04c:	4b38      	ldr	r3, [pc, #224]	; (800a130 <UART_SetConfig+0x4e4>)
 800a04e:	fba3 2301 	umull	r2, r3, r3, r1
 800a052:	095b      	lsrs	r3, r3, #5
 800a054:	2264      	movs	r2, #100	; 0x64
 800a056:	fb02 f303 	mul.w	r3, r2, r3
 800a05a:	1acb      	subs	r3, r1, r3
 800a05c:	011b      	lsls	r3, r3, #4
 800a05e:	3332      	adds	r3, #50	; 0x32
 800a060:	4a33      	ldr	r2, [pc, #204]	; (800a130 <UART_SetConfig+0x4e4>)
 800a062:	fba2 2303 	umull	r2, r3, r2, r3
 800a066:	095b      	lsrs	r3, r3, #5
 800a068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a06c:	441c      	add	r4, r3
 800a06e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a072:	2200      	movs	r2, #0
 800a074:	673b      	str	r3, [r7, #112]	; 0x70
 800a076:	677a      	str	r2, [r7, #116]	; 0x74
 800a078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a07c:	4642      	mov	r2, r8
 800a07e:	464b      	mov	r3, r9
 800a080:	1891      	adds	r1, r2, r2
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	415b      	adcs	r3, r3
 800a086:	60fb      	str	r3, [r7, #12]
 800a088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a08c:	4641      	mov	r1, r8
 800a08e:	1851      	adds	r1, r2, r1
 800a090:	6039      	str	r1, [r7, #0]
 800a092:	4649      	mov	r1, r9
 800a094:	414b      	adcs	r3, r1
 800a096:	607b      	str	r3, [r7, #4]
 800a098:	f04f 0200 	mov.w	r2, #0
 800a09c:	f04f 0300 	mov.w	r3, #0
 800a0a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a0a4:	4659      	mov	r1, fp
 800a0a6:	00cb      	lsls	r3, r1, #3
 800a0a8:	4651      	mov	r1, sl
 800a0aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0ae:	4651      	mov	r1, sl
 800a0b0:	00ca      	lsls	r2, r1, #3
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	4642      	mov	r2, r8
 800a0ba:	189b      	adds	r3, r3, r2
 800a0bc:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0be:	464b      	mov	r3, r9
 800a0c0:	460a      	mov	r2, r1
 800a0c2:	eb42 0303 	adc.w	r3, r2, r3
 800a0c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a0d2:	667a      	str	r2, [r7, #100]	; 0x64
 800a0d4:	f04f 0200 	mov.w	r2, #0
 800a0d8:	f04f 0300 	mov.w	r3, #0
 800a0dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	008b      	lsls	r3, r1, #2
 800a0e4:	4641      	mov	r1, r8
 800a0e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a0ea:	4641      	mov	r1, r8
 800a0ec:	008a      	lsls	r2, r1, #2
 800a0ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a0f2:	f7f6 fdd1 	bl	8000c98 <__aeabi_uldivmod>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <UART_SetConfig+0x4e4>)
 800a0fc:	fba3 1302 	umull	r1, r3, r3, r2
 800a100:	095b      	lsrs	r3, r3, #5
 800a102:	2164      	movs	r1, #100	; 0x64
 800a104:	fb01 f303 	mul.w	r3, r1, r3
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	011b      	lsls	r3, r3, #4
 800a10c:	3332      	adds	r3, #50	; 0x32
 800a10e:	4a08      	ldr	r2, [pc, #32]	; (800a130 <UART_SetConfig+0x4e4>)
 800a110:	fba2 2303 	umull	r2, r3, r2, r3
 800a114:	095b      	lsrs	r3, r3, #5
 800a116:	f003 020f 	and.w	r2, r3, #15
 800a11a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4422      	add	r2, r4
 800a122:	609a      	str	r2, [r3, #8]
}
 800a124:	bf00      	nop
 800a126:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a12a:	46bd      	mov	sp, r7
 800a12c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a130:	51eb851f 	.word	0x51eb851f

0800a134 <__NVIC_SetPriority>:
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	4603      	mov	r3, r0
 800a13c:	6039      	str	r1, [r7, #0]
 800a13e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a144:	2b00      	cmp	r3, #0
 800a146:	db0a      	blt.n	800a15e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	490c      	ldr	r1, [pc, #48]	; (800a180 <__NVIC_SetPriority+0x4c>)
 800a14e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a152:	0112      	lsls	r2, r2, #4
 800a154:	b2d2      	uxtb	r2, r2
 800a156:	440b      	add	r3, r1
 800a158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a15c:	e00a      	b.n	800a174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	b2da      	uxtb	r2, r3
 800a162:	4908      	ldr	r1, [pc, #32]	; (800a184 <__NVIC_SetPriority+0x50>)
 800a164:	79fb      	ldrb	r3, [r7, #7]
 800a166:	f003 030f 	and.w	r3, r3, #15
 800a16a:	3b04      	subs	r3, #4
 800a16c:	0112      	lsls	r2, r2, #4
 800a16e:	b2d2      	uxtb	r2, r2
 800a170:	440b      	add	r3, r1
 800a172:	761a      	strb	r2, [r3, #24]
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	e000e100 	.word	0xe000e100
 800a184:	e000ed00 	.word	0xe000ed00

0800a188 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a188:	b580      	push	{r7, lr}
 800a18a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a18c:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <SysTick_Handler+0x1c>)
 800a18e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a190:	f002 fee8 	bl	800cf64 <xTaskGetSchedulerState>
 800a194:	4603      	mov	r3, r0
 800a196:	2b01      	cmp	r3, #1
 800a198:	d001      	beq.n	800a19e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a19a:	f004 f88d 	bl	800e2b8 <xPortSysTickHandler>
  }
}
 800a19e:	bf00      	nop
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	e000e010 	.word	0xe000e010

0800a1a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	f06f 0004 	mvn.w	r0, #4
 800a1b2:	f7ff ffbf 	bl	800a134 <__NVIC_SetPriority>
#endif
}
 800a1b6:	bf00      	nop
 800a1b8:	bd80      	pop	{r7, pc}
	...

0800a1bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c2:	f3ef 8305 	mrs	r3, IPSR
 800a1c6:	603b      	str	r3, [r7, #0]
  return(result);
 800a1c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d003      	beq.n	800a1d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1ce:	f06f 0305 	mvn.w	r3, #5
 800a1d2:	607b      	str	r3, [r7, #4]
 800a1d4:	e00c      	b.n	800a1f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1d6:	4b0a      	ldr	r3, [pc, #40]	; (800a200 <osKernelInitialize+0x44>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d105      	bne.n	800a1ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a1de:	4b08      	ldr	r3, [pc, #32]	; (800a200 <osKernelInitialize+0x44>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	607b      	str	r3, [r7, #4]
 800a1e8:	e002      	b.n	800a1f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a1f0:	687b      	ldr	r3, [r7, #4]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	370c      	adds	r7, #12
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	20000858 	.word	0x20000858

0800a204 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a20a:	f3ef 8305 	mrs	r3, IPSR
 800a20e:	603b      	str	r3, [r7, #0]
  return(result);
 800a210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a216:	f06f 0305 	mvn.w	r3, #5
 800a21a:	607b      	str	r3, [r7, #4]
 800a21c:	e010      	b.n	800a240 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a21e:	4b0b      	ldr	r3, [pc, #44]	; (800a24c <osKernelStart+0x48>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d109      	bne.n	800a23a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a226:	f7ff ffbf 	bl	800a1a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a22a:	4b08      	ldr	r3, [pc, #32]	; (800a24c <osKernelStart+0x48>)
 800a22c:	2202      	movs	r2, #2
 800a22e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a230:	f002 fa1a 	bl	800c668 <vTaskStartScheduler>
      stat = osOK;
 800a234:	2300      	movs	r3, #0
 800a236:	607b      	str	r3, [r7, #4]
 800a238:	e002      	b.n	800a240 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a23a:	f04f 33ff 	mov.w	r3, #4294967295
 800a23e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a240:	687b      	ldr	r3, [r7, #4]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20000858 	.word	0x20000858

0800a250 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a256:	f3ef 8305 	mrs	r3, IPSR
 800a25a:	603b      	str	r3, [r7, #0]
  return(result);
 800a25c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a262:	f002 fb2d 	bl	800c8c0 <xTaskGetTickCountFromISR>
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	e002      	b.n	800a270 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a26a:	f002 fb19 	bl	800c8a0 <xTaskGetTickCount>
 800a26e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a270:	687b      	ldr	r3, [r7, #4]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 800a27a:	b480      	push	{r7}
 800a27c:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 800a27e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 800a282:	4618      	mov	r0, r3
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08e      	sub	sp, #56	; 0x38
 800a290:	af04      	add	r7, sp, #16
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a298:	2300      	movs	r3, #0
 800a29a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a29c:	f3ef 8305 	mrs	r3, IPSR
 800a2a0:	617b      	str	r3, [r7, #20]
  return(result);
 800a2a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d17e      	bne.n	800a3a6 <osThreadNew+0x11a>
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d07b      	beq.n	800a3a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a2ae:	2380      	movs	r3, #128	; 0x80
 800a2b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a2b2:	2318      	movs	r3, #24
 800a2b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a2be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d045      	beq.n	800a352 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d002      	beq.n	800a2d4 <osThreadNew+0x48>
        name = attr->name;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d008      	beq.n	800a2fa <osThreadNew+0x6e>
 800a2e8:	69fb      	ldr	r3, [r7, #28]
 800a2ea:	2b38      	cmp	r3, #56	; 0x38
 800a2ec:	d805      	bhi.n	800a2fa <osThreadNew+0x6e>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	f003 0301 	and.w	r3, r3, #1
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d001      	beq.n	800a2fe <osThreadNew+0x72>
        return (NULL);
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	e054      	b.n	800a3a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	695b      	ldr	r3, [r3, #20]
 800a30a:	089b      	lsrs	r3, r3, #2
 800a30c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00e      	beq.n	800a334 <osThreadNew+0xa8>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	2ba7      	cmp	r3, #167	; 0xa7
 800a31c:	d90a      	bls.n	800a334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a322:	2b00      	cmp	r3, #0
 800a324:	d006      	beq.n	800a334 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	695b      	ldr	r3, [r3, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <osThreadNew+0xa8>
        mem = 1;
 800a32e:	2301      	movs	r3, #1
 800a330:	61bb      	str	r3, [r7, #24]
 800a332:	e010      	b.n	800a356 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10c      	bne.n	800a356 <osThreadNew+0xca>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d108      	bne.n	800a356 <osThreadNew+0xca>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d104      	bne.n	800a356 <osThreadNew+0xca>
          mem = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	61bb      	str	r3, [r7, #24]
 800a350:	e001      	b.n	800a356 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d110      	bne.n	800a37e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a364:	9202      	str	r2, [sp, #8]
 800a366:	9301      	str	r3, [sp, #4]
 800a368:	69fb      	ldr	r3, [r7, #28]
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	6a3a      	ldr	r2, [r7, #32]
 800a370:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a372:	68f8      	ldr	r0, [r7, #12]
 800a374:	f001 ff42 	bl	800c1fc <xTaskCreateStatic>
 800a378:	4603      	mov	r3, r0
 800a37a:	613b      	str	r3, [r7, #16]
 800a37c:	e013      	b.n	800a3a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a37e:	69bb      	ldr	r3, [r7, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d110      	bne.n	800a3a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	b29a      	uxth	r2, r3
 800a388:	f107 0310 	add.w	r3, r7, #16
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	69fb      	ldr	r3, [r7, #28]
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f001 ff8d 	bl	800c2b6 <xTaskCreate>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b01      	cmp	r3, #1
 800a3a0:	d001      	beq.n	800a3a6 <osThreadNew+0x11a>
            hTask = NULL;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3a6:	693b      	ldr	r3, [r7, #16]
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3728      	adds	r7, #40	; 0x28
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3b6:	f3ef 8305 	mrs	r3, IPSR
 800a3ba:	603b      	str	r3, [r7, #0]
  return(result);
 800a3bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d003      	beq.n	800a3ca <osThreadYield+0x1a>
    stat = osErrorISR;
 800a3c2:	f06f 0305 	mvn.w	r3, #5
 800a3c6:	607b      	str	r3, [r7, #4]
 800a3c8:	e009      	b.n	800a3de <osThreadYield+0x2e>
  } else {
    stat = osOK;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	607b      	str	r3, [r7, #4]
    taskYIELD();
 800a3ce:	4b07      	ldr	r3, [pc, #28]	; (800a3ec <osThreadYield+0x3c>)
 800a3d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800a3de:	687b      	ldr	r3, [r7, #4]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	e000ed04 	.word	0xe000ed04

0800a3f0 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b088      	sub	sp, #32
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d002      	beq.n	800a40a <osThreadFlagsSet+0x1a>
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	da03      	bge.n	800a412 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800a40a:	f06f 0303 	mvn.w	r3, #3
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	e035      	b.n	800a47e <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 800a412:	f04f 33ff 	mov.w	r3, #4294967295
 800a416:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a418:	f3ef 8305 	mrs	r3, IPSR
 800a41c:	613b      	str	r3, [r7, #16]
  return(result);
 800a41e:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 800a420:	2b00      	cmp	r3, #0
 800a422:	d01f      	beq.n	800a464 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 800a424:	2300      	movs	r3, #0
 800a426:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800a428:	f107 0308 	add.w	r3, r7, #8
 800a42c:	9300      	str	r3, [sp, #0]
 800a42e:	2300      	movs	r3, #0
 800a430:	2201      	movs	r2, #1
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6978      	ldr	r0, [r7, #20]
 800a436:	f003 f83d 	bl	800d4b4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800a43a:	f107 030c 	add.w	r3, r7, #12
 800a43e:	2200      	movs	r2, #0
 800a440:	9200      	str	r2, [sp, #0]
 800a442:	2200      	movs	r2, #0
 800a444:	2100      	movs	r1, #0
 800a446:	6978      	ldr	r0, [r7, #20]
 800a448:	f003 f834 	bl	800d4b4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d015      	beq.n	800a47e <osThreadFlagsSet+0x8e>
 800a452:	4b0d      	ldr	r3, [pc, #52]	; (800a488 <osThreadFlagsSet+0x98>)
 800a454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a458:	601a      	str	r2, [r3, #0]
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	e00c      	b.n	800a47e <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800a464:	2300      	movs	r3, #0
 800a466:	2201      	movs	r2, #1
 800a468:	6839      	ldr	r1, [r7, #0]
 800a46a:	6978      	ldr	r0, [r7, #20]
 800a46c:	f002 ff64 	bl	800d338 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800a470:	f107 030c 	add.w	r3, r7, #12
 800a474:	2200      	movs	r2, #0
 800a476:	2100      	movs	r1, #0
 800a478:	6978      	ldr	r0, [r7, #20]
 800a47a:	f002 ff5d 	bl	800d338 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800a47e:	68fb      	ldr	r3, [r7, #12]
}
 800a480:	4618      	mov	r0, r3
 800a482:	3718      	adds	r7, #24
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	e000ed04 	.word	0xe000ed04

0800a48c <osThreadFlagsClear>:

uint32_t osThreadFlagsClear (uint32_t flags) {
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a494:	f3ef 8305 	mrs	r3, IPSR
 800a498:	60fb      	str	r3, [r7, #12]
  return(result);
 800a49a:	68fb      	ldr	r3, [r7, #12]
  TaskHandle_t hTask;
  uint32_t rflags, cflags;

  if (IS_IRQ()) {
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d003      	beq.n	800a4a8 <osThreadFlagsClear+0x1c>
    rflags = (uint32_t)osErrorISR;
 800a4a0:	f06f 0305 	mvn.w	r3, #5
 800a4a4:	617b      	str	r3, [r7, #20]
 800a4a6:	e02a      	b.n	800a4fe <osThreadFlagsClear+0x72>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	da03      	bge.n	800a4b6 <osThreadFlagsClear+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800a4ae:	f06f 0303 	mvn.w	r3, #3
 800a4b2:	617b      	str	r3, [r7, #20]
 800a4b4:	e023      	b.n	800a4fe <osThreadFlagsClear+0x72>
  }
  else {
    hTask = xTaskGetCurrentTaskHandle();
 800a4b6:	f002 fd45 	bl	800cf44 <xTaskGetCurrentTaskHandle>
 800a4ba:	6138      	str	r0, [r7, #16]

    if (xTaskNotifyAndQuery (hTask, 0, eNoAction, &cflags) == pdPASS) {
 800a4bc:	f107 0308 	add.w	r3, r7, #8
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	2100      	movs	r1, #0
 800a4c4:	6938      	ldr	r0, [r7, #16]
 800a4c6:	f002 ff37 	bl	800d338 <xTaskGenericNotify>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b01      	cmp	r3, #1
 800a4ce:	d113      	bne.n	800a4f8 <osThreadFlagsClear+0x6c>
      rflags = cflags;
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	617b      	str	r3, [r7, #20]
      cflags &= ~flags;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	43da      	mvns	r2, r3
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	60bb      	str	r3, [r7, #8]

      if (xTaskNotify (hTask, cflags, eSetValueWithOverwrite) != pdPASS) {
 800a4de:	68b9      	ldr	r1, [r7, #8]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	2203      	movs	r2, #3
 800a4e4:	6938      	ldr	r0, [r7, #16]
 800a4e6:	f002 ff27 	bl	800d338 <xTaskGenericNotify>
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d006      	beq.n	800a4fe <osThreadFlagsClear+0x72>
        rflags = (uint32_t)osError;
 800a4f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f4:	617b      	str	r3, [r7, #20]
 800a4f6:	e002      	b.n	800a4fe <osThreadFlagsClear+0x72>
      }
    }
    else {
      rflags = (uint32_t)osError;
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fc:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return flags before clearing */
  return (rflags);
 800a4fe:	697b      	ldr	r3, [r7, #20]
}
 800a500:	4618      	mov	r0, r3
 800a502:	3718      	adds	r7, #24
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08c      	sub	sp, #48	; 0x30
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a514:	f3ef 8305 	mrs	r3, IPSR
 800a518:	617b      	str	r3, [r7, #20]
  return(result);
 800a51a:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d003      	beq.n	800a528 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 800a520:	f06f 0305 	mvn.w	r3, #5
 800a524:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a526:	e06b      	b.n	800a600 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	da03      	bge.n	800a536 <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 800a52e:	f06f 0303 	mvn.w	r3, #3
 800a532:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a534:	e064      	b.n	800a600 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	f003 0302 	and.w	r3, r3, #2
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <osThreadFlagsWait+0x3e>
      clear = 0U;
 800a540:	2300      	movs	r3, #0
 800a542:	62bb      	str	r3, [r7, #40]	; 0x28
 800a544:	e001      	b.n	800a54a <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 800a54a:	2300      	movs	r3, #0
 800a54c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 800a552:	f002 f9a5 	bl	800c8a0 <xTaskGetTickCount>
 800a556:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800a558:	f107 0210 	add.w	r2, r7, #16
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a560:	2000      	movs	r0, #0
 800a562:	f002 fe89 	bl	800d278 <xTaskNotifyWait>
 800a566:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d137      	bne.n	800a5de <osThreadFlagsWait+0xd6>
        rflags &= flags;
 800a56e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4013      	ands	r3, r2
 800a574:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a57a:	4313      	orrs	r3, r2
 800a57c:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00c      	beq.n	800a5a2 <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 800a588:	68fa      	ldr	r2, [r7, #12]
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	4013      	ands	r3, r2
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	429a      	cmp	r2, r3
 800a592:	d032      	beq.n	800a5fa <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10f      	bne.n	800a5ba <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a59a:	f06f 0302 	mvn.w	r3, #2
 800a59e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a5a0:	e02e      	b.n	800a600 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d128      	bne.n	800a5fe <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d103      	bne.n	800a5ba <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800a5b2:	f06f 0302 	mvn.w	r3, #2
 800a5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 800a5b8:	e022      	b.n	800a600 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800a5ba:	f002 f971 	bl	800c8a0 <xTaskGetTickCount>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	6a3b      	ldr	r3, [r7, #32]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800a5c6:	69ba      	ldr	r2, [r7, #24]
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d902      	bls.n	800a5d4 <osThreadFlagsWait+0xcc>
          tout  = 0;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d2:	e00e      	b.n	800a5f2 <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800a5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
 800a5dc:	e009      	b.n	800a5f2 <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d103      	bne.n	800a5ec <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800a5e4:	f06f 0302 	mvn.w	r3, #2
 800a5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5ea:	e002      	b.n	800a5f2 <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800a5ec:	f06f 0301 	mvn.w	r3, #1
 800a5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d1af      	bne.n	800a558 <osThreadFlagsWait+0x50>
 800a5f8:	e002      	b.n	800a600 <osThreadFlagsWait+0xf8>
            break;
 800a5fa:	bf00      	nop
 800a5fc:	e000      	b.n	800a600 <osThreadFlagsWait+0xf8>
            break;
 800a5fe:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a602:	4618      	mov	r0, r3
 800a604:	3730      	adds	r7, #48	; 0x30
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b086      	sub	sp, #24
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a612:	f3ef 8305 	mrs	r3, IPSR
 800a616:	60fb      	str	r3, [r7, #12]
  return(result);
 800a618:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800a61e:	f06f 0305 	mvn.w	r3, #5
 800a622:	617b      	str	r3, [r7, #20]
 800a624:	e019      	b.n	800a65a <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800a626:	2300      	movs	r3, #0
 800a628:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800a62a:	f002 f939 	bl	800c8a0 <xTaskGetTickCount>
 800a62e:	4603      	mov	r3, r0
 800a630:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	1ad3      	subs	r3, r2, r3
 800a638:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d009      	beq.n	800a654 <osDelayUntil+0x4a>
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	2b00      	cmp	r3, #0
 800a644:	db06      	blt.n	800a654 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800a646:	f107 0308 	add.w	r3, r7, #8
 800a64a:	6939      	ldr	r1, [r7, #16]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f001 ff8d 	bl	800c56c <vTaskDelayUntil>
 800a652:	e002      	b.n	800a65a <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800a654:	f06f 0303 	mvn.w	r3, #3
 800a658:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a65a:	697b      	ldr	r3, [r7, #20]
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3718      	adds	r7, #24
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <TimerCallback>:

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f003 fc41 	bl	800def4 <pvTimerGetTimerID>
 800a672:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d005      	beq.n	800a686 <TimerCallback+0x22>
    callb->func (callb->arg);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	6852      	ldr	r2, [r2, #4]
 800a682:	4610      	mov	r0, r2
 800a684:	4798      	blx	r3
  }
}
 800a686:	bf00      	nop
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
	...

0800a690 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	; 0x30
 800a694:	af02      	add	r7, sp, #8
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	607a      	str	r2, [r7, #4]
 800a69a:	603b      	str	r3, [r7, #0]
 800a69c:	460b      	mov	r3, r1
 800a69e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6a4:	f3ef 8305 	mrs	r3, IPSR
 800a6a8:	613b      	str	r3, [r7, #16]
  return(result);
 800a6aa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d163      	bne.n	800a778 <osTimerNew+0xe8>
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d060      	beq.n	800a778 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a6b6:	2008      	movs	r0, #8
 800a6b8:	f003 fe8e 	bl	800e3d8 <pvPortMalloc>
 800a6bc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d059      	beq.n	800a778 <osTimerNew+0xe8>
      callb->func = func;
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	68fa      	ldr	r2, [r7, #12]
 800a6c8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a6d0:	7afb      	ldrb	r3, [r7, #11]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d102      	bne.n	800a6dc <osTimerNew+0x4c>
        reload = pdFALSE;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	61fb      	str	r3, [r7, #28]
 800a6da:	e001      	b.n	800a6e0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800a6e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a6e4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d01c      	beq.n	800a72a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <osTimerNew+0x6e>
          name = attr->name;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d006      	beq.n	800a714 <osTimerNew+0x84>
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	2b2b      	cmp	r3, #43	; 0x2b
 800a70c:	d902      	bls.n	800a714 <osTimerNew+0x84>
          mem = 1;
 800a70e:	2301      	movs	r3, #1
 800a710:	61bb      	str	r3, [r7, #24]
 800a712:	e00c      	b.n	800a72e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d108      	bne.n	800a72e <osTimerNew+0x9e>
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d104      	bne.n	800a72e <osTimerNew+0x9e>
            mem = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	61bb      	str	r3, [r7, #24]
 800a728:	e001      	b.n	800a72e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d10c      	bne.n	800a74e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a734:	683b      	ldr	r3, [r7, #0]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <osTimerNew+0xf4>)
 800a73c:	9300      	str	r3, [sp, #0]
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	2101      	movs	r1, #1
 800a744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a746:	f003 f856 	bl	800d7f6 <xTimerCreateStatic>
 800a74a:	6238      	str	r0, [r7, #32]
 800a74c:	e00b      	b.n	800a766 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d108      	bne.n	800a766 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a754:	4b0b      	ldr	r3, [pc, #44]	; (800a784 <osTimerNew+0xf4>)
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	2101      	movs	r1, #1
 800a75e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a760:	f003 f828 	bl	800d7b4 <xTimerCreate>
 800a764:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800a766:	6a3b      	ldr	r3, [r7, #32]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d105      	bne.n	800a778 <osTimerNew+0xe8>
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d002      	beq.n	800a778 <osTimerNew+0xe8>
        vPortFree (callb);
 800a772:	6978      	ldr	r0, [r7, #20]
 800a774:	f003 fefc 	bl	800e570 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a778:	6a3b      	ldr	r3, [r7, #32]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3728      	adds	r7, #40	; 0x28
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	0800a665 	.word	0x0800a665

0800a788 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af02      	add	r7, sp, #8
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a796:	f3ef 8305 	mrs	r3, IPSR
 800a79a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a79c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <osTimerStart+0x22>
    stat = osErrorISR;
 800a7a2:	f06f 0305 	mvn.w	r3, #5
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	e017      	b.n	800a7da <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d103      	bne.n	800a7b8 <osTimerStart+0x30>
    stat = osErrorParameter;
 800a7b0:	f06f 0303 	mvn.w	r3, #3
 800a7b4:	617b      	str	r3, [r7, #20]
 800a7b6:	e010      	b.n	800a7da <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	2300      	movs	r3, #0
 800a7be:	683a      	ldr	r2, [r7, #0]
 800a7c0:	2104      	movs	r1, #4
 800a7c2:	6938      	ldr	r0, [r7, #16]
 800a7c4:	f003 f890 	bl	800d8e8 <xTimerGenericCommand>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d102      	bne.n	800a7d4 <osTimerStart+0x4c>
      stat = osOK;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	617b      	str	r3, [r7, #20]
 800a7d2:	e002      	b.n	800a7da <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800a7d4:	f06f 0302 	mvn.w	r3, #2
 800a7d8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a7da:	697b      	ldr	r3, [r7, #20]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3718      	adds	r7, #24
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b088      	sub	sp, #32
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7f0:	f3ef 8305 	mrs	r3, IPSR
 800a7f4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7f6:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d174      	bne.n	800a8e6 <osMutexNew+0x102>
    if (attr != NULL) {
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <osMutexNew+0x26>
      type = attr->attr_bits;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	61bb      	str	r3, [r7, #24]
 800a808:	e001      	b.n	800a80e <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a80a:	2300      	movs	r3, #0
 800a80c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a80e:	69bb      	ldr	r3, [r7, #24]
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d002      	beq.n	800a81e <osMutexNew+0x3a>
      rmtx = 1U;
 800a818:	2301      	movs	r3, #1
 800a81a:	617b      	str	r3, [r7, #20]
 800a81c:	e001      	b.n	800a822 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	f003 0308 	and.w	r3, r3, #8
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d15c      	bne.n	800a8e6 <osMutexNew+0x102>
      mem = -1;
 800a82c:	f04f 33ff 	mov.w	r3, #4294967295
 800a830:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d015      	beq.n	800a864 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d006      	beq.n	800a84e <osMutexNew+0x6a>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	2b4f      	cmp	r3, #79	; 0x4f
 800a846:	d902      	bls.n	800a84e <osMutexNew+0x6a>
          mem = 1;
 800a848:	2301      	movs	r3, #1
 800a84a:	613b      	str	r3, [r7, #16]
 800a84c:	e00c      	b.n	800a868 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d108      	bne.n	800a868 <osMutexNew+0x84>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d104      	bne.n	800a868 <osMutexNew+0x84>
            mem = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	613b      	str	r3, [r7, #16]
 800a862:	e001      	b.n	800a868 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d112      	bne.n	800a894 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d007      	beq.n	800a884 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	4619      	mov	r1, r3
 800a87a:	2004      	movs	r0, #4
 800a87c:	f000 fd69 	bl	800b352 <xQueueCreateMutexStatic>
 800a880:	61f8      	str	r0, [r7, #28]
 800a882:	e016      	b.n	800a8b2 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	4619      	mov	r1, r3
 800a88a:	2001      	movs	r0, #1
 800a88c:	f000 fd61 	bl	800b352 <xQueueCreateMutexStatic>
 800a890:	61f8      	str	r0, [r7, #28]
 800a892:	e00e      	b.n	800a8b2 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10b      	bne.n	800a8b2 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d004      	beq.n	800a8aa <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a8a0:	2004      	movs	r0, #4
 800a8a2:	f000 fd3e 	bl	800b322 <xQueueCreateMutex>
 800a8a6:	61f8      	str	r0, [r7, #28]
 800a8a8:	e003      	b.n	800a8b2 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	f000 fd39 	bl	800b322 <xQueueCreateMutex>
 800a8b0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00c      	beq.n	800a8d2 <osMutexNew+0xee>
        if (attr != NULL) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d003      	beq.n	800a8c6 <osMutexNew+0xe2>
          name = attr->name;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	60fb      	str	r3, [r7, #12]
 800a8c4:	e001      	b.n	800a8ca <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a8ca:	68f9      	ldr	r1, [r7, #12]
 800a8cc:	69f8      	ldr	r0, [r7, #28]
 800a8ce:	f001 fc0d 	bl	800c0ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d006      	beq.n	800a8e6 <osMutexNew+0x102>
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	f043 0301 	orr.w	r3, r3, #1
 800a8e4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a8e6:	69fb      	ldr	r3, [r7, #28]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3720      	adds	r7, #32
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f023 0301 	bic.w	r3, r3, #1
 800a900:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a90e:	f3ef 8305 	mrs	r3, IPSR
 800a912:	60bb      	str	r3, [r7, #8]
  return(result);
 800a914:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a916:	2b00      	cmp	r3, #0
 800a918:	d003      	beq.n	800a922 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a91a:	f06f 0305 	mvn.w	r3, #5
 800a91e:	617b      	str	r3, [r7, #20]
 800a920:	e02c      	b.n	800a97c <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d103      	bne.n	800a930 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a928:	f06f 0303 	mvn.w	r3, #3
 800a92c:	617b      	str	r3, [r7, #20]
 800a92e:	e025      	b.n	800a97c <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d011      	beq.n	800a95a <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a936:	6839      	ldr	r1, [r7, #0]
 800a938:	6938      	ldr	r0, [r7, #16]
 800a93a:	f000 fd59 	bl	800b3f0 <xQueueTakeMutexRecursive>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b01      	cmp	r3, #1
 800a942:	d01b      	beq.n	800a97c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d003      	beq.n	800a952 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a94a:	f06f 0301 	mvn.w	r3, #1
 800a94e:	617b      	str	r3, [r7, #20]
 800a950:	e014      	b.n	800a97c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a952:	f06f 0302 	mvn.w	r3, #2
 800a956:	617b      	str	r3, [r7, #20]
 800a958:	e010      	b.n	800a97c <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6938      	ldr	r0, [r7, #16]
 800a95e:	f001 f8ed 	bl	800bb3c <xQueueSemaphoreTake>
 800a962:	4603      	mov	r3, r0
 800a964:	2b01      	cmp	r3, #1
 800a966:	d009      	beq.n	800a97c <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a96e:	f06f 0301 	mvn.w	r3, #1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	e002      	b.n	800a97c <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a976:	f06f 0302 	mvn.w	r3, #2
 800a97a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a97c:	697b      	ldr	r3, [r7, #20]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a986:	b580      	push	{r7, lr}
 800a988:	b086      	sub	sp, #24
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f023 0301 	bic.w	r3, r3, #1
 800a994:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f003 0301 	and.w	r3, r3, #1
 800a99c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9a2:	f3ef 8305 	mrs	r3, IPSR
 800a9a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a9a8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d003      	beq.n	800a9b6 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a9ae:	f06f 0305 	mvn.w	r3, #5
 800a9b2:	617b      	str	r3, [r7, #20]
 800a9b4:	e01f      	b.n	800a9f6 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d103      	bne.n	800a9c4 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a9bc:	f06f 0303 	mvn.w	r3, #3
 800a9c0:	617b      	str	r3, [r7, #20]
 800a9c2:	e018      	b.n	800a9f6 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d009      	beq.n	800a9de <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a9ca:	6938      	ldr	r0, [r7, #16]
 800a9cc:	f000 fcdc 	bl	800b388 <xQueueGiveMutexRecursive>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d00f      	beq.n	800a9f6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a9d6:	f06f 0302 	mvn.w	r3, #2
 800a9da:	617b      	str	r3, [r7, #20]
 800a9dc:	e00b      	b.n	800a9f6 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	6938      	ldr	r0, [r7, #16]
 800a9e6:	f000 fda3 	bl	800b530 <xQueueGenericSend>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d002      	beq.n	800a9f6 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a9f0:	f06f 0302 	mvn.w	r3, #2
 800a9f4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a9f6:	697b      	ldr	r3, [r7, #20]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3718      	adds	r7, #24
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b08a      	sub	sp, #40	; 0x28
 800aa04:	af02      	add	r7, sp, #8
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa10:	f3ef 8305 	mrs	r3, IPSR
 800aa14:	613b      	str	r3, [r7, #16]
  return(result);
 800aa16:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d175      	bne.n	800ab08 <osSemaphoreNew+0x108>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d072      	beq.n	800ab08 <osSemaphoreNew+0x108>
 800aa22:	68ba      	ldr	r2, [r7, #8]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d86e      	bhi.n	800ab08 <osSemaphoreNew+0x108>
    mem = -1;
 800aa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d015      	beq.n	800aa62 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d006      	beq.n	800aa4c <osSemaphoreNew+0x4c>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	68db      	ldr	r3, [r3, #12]
 800aa42:	2b4f      	cmp	r3, #79	; 0x4f
 800aa44:	d902      	bls.n	800aa4c <osSemaphoreNew+0x4c>
        mem = 1;
 800aa46:	2301      	movs	r3, #1
 800aa48:	61bb      	str	r3, [r7, #24]
 800aa4a:	e00c      	b.n	800aa66 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d108      	bne.n	800aa66 <osSemaphoreNew+0x66>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d104      	bne.n	800aa66 <osSemaphoreNew+0x66>
          mem = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	61bb      	str	r3, [r7, #24]
 800aa60:	e001      	b.n	800aa66 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa6c:	d04c      	beq.n	800ab08 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d128      	bne.n	800aac6 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800aa74:	69bb      	ldr	r3, [r7, #24]
 800aa76:	2b01      	cmp	r3, #1
 800aa78:	d10a      	bne.n	800aa90 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	689b      	ldr	r3, [r3, #8]
 800aa7e:	2203      	movs	r2, #3
 800aa80:	9200      	str	r2, [sp, #0]
 800aa82:	2200      	movs	r2, #0
 800aa84:	2100      	movs	r1, #0
 800aa86:	2001      	movs	r0, #1
 800aa88:	f000 fb5c 	bl	800b144 <xQueueGenericCreateStatic>
 800aa8c:	61f8      	str	r0, [r7, #28]
 800aa8e:	e005      	b.n	800aa9c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800aa90:	2203      	movs	r2, #3
 800aa92:	2100      	movs	r1, #0
 800aa94:	2001      	movs	r0, #1
 800aa96:	f000 fbcd 	bl	800b234 <xQueueGenericCreate>
 800aa9a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800aa9c:	69fb      	ldr	r3, [r7, #28]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d022      	beq.n	800aae8 <osSemaphoreNew+0xe8>
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d01f      	beq.n	800aae8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	2200      	movs	r2, #0
 800aaac:	2100      	movs	r1, #0
 800aaae:	69f8      	ldr	r0, [r7, #28]
 800aab0:	f000 fd3e 	bl	800b530 <xQueueGenericSend>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b01      	cmp	r3, #1
 800aab8:	d016      	beq.n	800aae8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800aaba:	69f8      	ldr	r0, [r7, #28]
 800aabc:	f001 f9ca 	bl	800be54 <vQueueDelete>
            hSemaphore = NULL;
 800aac0:	2300      	movs	r3, #0
 800aac2:	61fb      	str	r3, [r7, #28]
 800aac4:	e010      	b.n	800aae8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d108      	bne.n	800aade <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	461a      	mov	r2, r3
 800aad2:	68b9      	ldr	r1, [r7, #8]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f000 fcc1 	bl	800b45c <xQueueCreateCountingSemaphoreStatic>
 800aada:	61f8      	str	r0, [r7, #28]
 800aadc:	e004      	b.n	800aae8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aade:	68b9      	ldr	r1, [r7, #8]
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 fcf2 	bl	800b4ca <xQueueCreateCountingSemaphore>
 800aae6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00c      	beq.n	800ab08 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <osSemaphoreNew+0xfc>
          name = attr->name;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	617b      	str	r3, [r7, #20]
 800aafa:	e001      	b.n	800ab00 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800aafc:	2300      	movs	r3, #0
 800aafe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ab00:	6979      	ldr	r1, [r7, #20]
 800ab02:	69f8      	ldr	r0, [r7, #28]
 800ab04:	f001 faf2 	bl	800c0ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ab08:	69fb      	ldr	r3, [r7, #28]
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3720      	adds	r7, #32
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b086      	sub	sp, #24
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ab22:	2300      	movs	r3, #0
 800ab24:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d103      	bne.n	800ab34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ab2c:	f06f 0303 	mvn.w	r3, #3
 800ab30:	617b      	str	r3, [r7, #20]
 800ab32:	e039      	b.n	800aba8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab34:	f3ef 8305 	mrs	r3, IPSR
 800ab38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d022      	beq.n	800ab86 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d003      	beq.n	800ab4e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ab46:	f06f 0303 	mvn.w	r3, #3
 800ab4a:	617b      	str	r3, [r7, #20]
 800ab4c:	e02c      	b.n	800aba8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ab52:	f107 0308 	add.w	r3, r7, #8
 800ab56:	461a      	mov	r2, r3
 800ab58:	2100      	movs	r1, #0
 800ab5a:	6938      	ldr	r0, [r7, #16]
 800ab5c:	f001 f8fa 	bl	800bd54 <xQueueReceiveFromISR>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d003      	beq.n	800ab6e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ab66:	f06f 0302 	mvn.w	r3, #2
 800ab6a:	617b      	str	r3, [r7, #20]
 800ab6c:	e01c      	b.n	800aba8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d019      	beq.n	800aba8 <osSemaphoreAcquire+0x94>
 800ab74:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <osSemaphoreAcquire+0xa0>)
 800ab76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab7a:	601a      	str	r2, [r3, #0]
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	e010      	b.n	800aba8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	6938      	ldr	r0, [r7, #16]
 800ab8a:	f000 ffd7 	bl	800bb3c <xQueueSemaphoreTake>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d009      	beq.n	800aba8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ab9a:	f06f 0301 	mvn.w	r3, #1
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	e002      	b.n	800aba8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800aba2:	f06f 0302 	mvn.w	r3, #2
 800aba6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aba8:	697b      	ldr	r3, [r7, #20]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	e000ed04 	.word	0xe000ed04

0800abb8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800abb8:	b580      	push	{r7, lr}
 800abba:	b086      	sub	sp, #24
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d103      	bne.n	800abd6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800abce:	f06f 0303 	mvn.w	r3, #3
 800abd2:	617b      	str	r3, [r7, #20]
 800abd4:	e02c      	b.n	800ac30 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800abd6:	f3ef 8305 	mrs	r3, IPSR
 800abda:	60fb      	str	r3, [r7, #12]
  return(result);
 800abdc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d01a      	beq.n	800ac18 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800abe2:	2300      	movs	r3, #0
 800abe4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800abe6:	f107 0308 	add.w	r3, r7, #8
 800abea:	4619      	mov	r1, r3
 800abec:	6938      	ldr	r0, [r7, #16]
 800abee:	f000 fe38 	bl	800b862 <xQueueGiveFromISR>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d003      	beq.n	800ac00 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800abf8:	f06f 0302 	mvn.w	r3, #2
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	e017      	b.n	800ac30 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d014      	beq.n	800ac30 <osSemaphoreRelease+0x78>
 800ac06:	4b0d      	ldr	r3, [pc, #52]	; (800ac3c <osSemaphoreRelease+0x84>)
 800ac08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	f3bf 8f4f 	dsb	sy
 800ac12:	f3bf 8f6f 	isb	sy
 800ac16:	e00b      	b.n	800ac30 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ac18:	2300      	movs	r3, #0
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	2100      	movs	r1, #0
 800ac1e:	6938      	ldr	r0, [r7, #16]
 800ac20:	f000 fc86 	bl	800b530 <xQueueGenericSend>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d002      	beq.n	800ac30 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ac2a:	f06f 0302 	mvn.w	r3, #2
 800ac2e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ac30:	697b      	ldr	r3, [r7, #20]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	e000ed04 	.word	0xe000ed04

0800ac40 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08a      	sub	sp, #40	; 0x28
 800ac44:	af02      	add	r7, sp, #8
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac50:	f3ef 8305 	mrs	r3, IPSR
 800ac54:	613b      	str	r3, [r7, #16]
  return(result);
 800ac56:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d15f      	bne.n	800ad1c <osMessageQueueNew+0xdc>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d05c      	beq.n	800ad1c <osMessageQueueNew+0xdc>
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d059      	beq.n	800ad1c <osMessageQueueNew+0xdc>
    mem = -1;
 800ac68:	f04f 33ff 	mov.w	r3, #4294967295
 800ac6c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d029      	beq.n	800acc8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d012      	beq.n	800aca2 <osMessageQueueNew+0x62>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	2b4f      	cmp	r3, #79	; 0x4f
 800ac82:	d90e      	bls.n	800aca2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00a      	beq.n	800aca2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	695a      	ldr	r2, [r3, #20]
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	68b9      	ldr	r1, [r7, #8]
 800ac94:	fb01 f303 	mul.w	r3, r1, r3
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d302      	bcc.n	800aca2 <osMessageQueueNew+0x62>
        mem = 1;
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	61bb      	str	r3, [r7, #24]
 800aca0:	e014      	b.n	800accc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	689b      	ldr	r3, [r3, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d110      	bne.n	800accc <osMessageQueueNew+0x8c>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10c      	bne.n	800accc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d108      	bne.n	800accc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	695b      	ldr	r3, [r3, #20]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d104      	bne.n	800accc <osMessageQueueNew+0x8c>
          mem = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	61bb      	str	r3, [r7, #24]
 800acc6:	e001      	b.n	800accc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800acc8:	2300      	movs	r3, #0
 800acca:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	2b01      	cmp	r3, #1
 800acd0:	d10b      	bne.n	800acea <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	2100      	movs	r1, #0
 800acdc:	9100      	str	r1, [sp, #0]
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 fa2f 	bl	800b144 <xQueueGenericCreateStatic>
 800ace6:	61f8      	str	r0, [r7, #28]
 800ace8:	e008      	b.n	800acfc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d105      	bne.n	800acfc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800acf0:	2200      	movs	r2, #0
 800acf2:	68b9      	ldr	r1, [r7, #8]
 800acf4:	68f8      	ldr	r0, [r7, #12]
 800acf6:	f000 fa9d 	bl	800b234 <xQueueGenericCreate>
 800acfa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00c      	beq.n	800ad1c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	617b      	str	r3, [r7, #20]
 800ad0e:	e001      	b.n	800ad14 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ad10:	2300      	movs	r3, #0
 800ad12:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ad14:	6979      	ldr	r1, [r7, #20]
 800ad16:	69f8      	ldr	r0, [r7, #28]
 800ad18:	f001 f9e8 	bl	800c0ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ad1c:	69fb      	ldr	r3, [r7, #28]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3720      	adds	r7, #32
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	603b      	str	r3, [r7, #0]
 800ad34:	4613      	mov	r3, r2
 800ad36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ad40:	f3ef 8305 	mrs	r3, IPSR
 800ad44:	617b      	str	r3, [r7, #20]
  return(result);
 800ad46:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d028      	beq.n	800ad9e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d005      	beq.n	800ad5e <osMessageQueuePut+0x36>
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <osMessageQueuePut+0x36>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ad5e:	f06f 0303 	mvn.w	r3, #3
 800ad62:	61fb      	str	r3, [r7, #28]
 800ad64:	e038      	b.n	800add8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ad66:	2300      	movs	r3, #0
 800ad68:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ad6a:	f107 0210 	add.w	r2, r7, #16
 800ad6e:	2300      	movs	r3, #0
 800ad70:	68b9      	ldr	r1, [r7, #8]
 800ad72:	69b8      	ldr	r0, [r7, #24]
 800ad74:	f000 fcda 	bl	800b72c <xQueueGenericSendFromISR>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d003      	beq.n	800ad86 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ad7e:	f06f 0302 	mvn.w	r3, #2
 800ad82:	61fb      	str	r3, [r7, #28]
 800ad84:	e028      	b.n	800add8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d025      	beq.n	800add8 <osMessageQueuePut+0xb0>
 800ad8c:	4b15      	ldr	r3, [pc, #84]	; (800ade4 <osMessageQueuePut+0xbc>)
 800ad8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	e01c      	b.n	800add8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <osMessageQueuePut+0x82>
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d103      	bne.n	800adb2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800adaa:	f06f 0303 	mvn.w	r3, #3
 800adae:	61fb      	str	r3, [r7, #28]
 800adb0:	e012      	b.n	800add8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800adb2:	2300      	movs	r3, #0
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	68b9      	ldr	r1, [r7, #8]
 800adb8:	69b8      	ldr	r0, [r7, #24]
 800adba:	f000 fbb9 	bl	800b530 <xQueueGenericSend>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d009      	beq.n	800add8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800adca:	f06f 0301 	mvn.w	r3, #1
 800adce:	61fb      	str	r3, [r7, #28]
 800add0:	e002      	b.n	800add8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800add2:	f06f 0302 	mvn.w	r3, #2
 800add6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800add8:	69fb      	ldr	r3, [r7, #28]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3720      	adds	r7, #32
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	e000ed04 	.word	0xe000ed04

0800ade8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ade8:	b580      	push	{r7, lr}
 800adea:	b088      	sub	sp, #32
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adfe:	f3ef 8305 	mrs	r3, IPSR
 800ae02:	617b      	str	r3, [r7, #20]
  return(result);
 800ae04:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d028      	beq.n	800ae5c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d005      	beq.n	800ae1c <osMessageQueueGet+0x34>
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d002      	beq.n	800ae1c <osMessageQueueGet+0x34>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d003      	beq.n	800ae24 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ae1c:	f06f 0303 	mvn.w	r3, #3
 800ae20:	61fb      	str	r3, [r7, #28]
 800ae22:	e037      	b.n	800ae94 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ae28:	f107 0310 	add.w	r3, r7, #16
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	68b9      	ldr	r1, [r7, #8]
 800ae30:	69b8      	ldr	r0, [r7, #24]
 800ae32:	f000 ff8f 	bl	800bd54 <xQueueReceiveFromISR>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d003      	beq.n	800ae44 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ae3c:	f06f 0302 	mvn.w	r3, #2
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	e027      	b.n	800ae94 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d024      	beq.n	800ae94 <osMessageQueueGet+0xac>
 800ae4a:	4b15      	ldr	r3, [pc, #84]	; (800aea0 <osMessageQueueGet+0xb8>)
 800ae4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	f3bf 8f4f 	dsb	sy
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	e01b      	b.n	800ae94 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ae5c:	69bb      	ldr	r3, [r7, #24]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <osMessageQueueGet+0x80>
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d103      	bne.n	800ae70 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ae68:	f06f 0303 	mvn.w	r3, #3
 800ae6c:	61fb      	str	r3, [r7, #28]
 800ae6e:	e011      	b.n	800ae94 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ae70:	683a      	ldr	r2, [r7, #0]
 800ae72:	68b9      	ldr	r1, [r7, #8]
 800ae74:	69b8      	ldr	r0, [r7, #24]
 800ae76:	f000 fd81 	bl	800b97c <xQueueReceive>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d009      	beq.n	800ae94 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d003      	beq.n	800ae8e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ae86:	f06f 0301 	mvn.w	r3, #1
 800ae8a:	61fb      	str	r3, [r7, #28]
 800ae8c:	e002      	b.n	800ae94 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ae8e:	f06f 0302 	mvn.w	r3, #2
 800ae92:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ae94:	69fb      	ldr	r3, [r7, #28]
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3720      	adds	r7, #32
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}
 800ae9e:	bf00      	nop
 800aea0:	e000ed04 	.word	0xe000ed04

0800aea4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4a07      	ldr	r2, [pc, #28]	; (800aed0 <vApplicationGetIdleTaskMemory+0x2c>)
 800aeb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	4a06      	ldr	r2, [pc, #24]	; (800aed4 <vApplicationGetIdleTaskMemory+0x30>)
 800aeba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2280      	movs	r2, #128	; 0x80
 800aec0:	601a      	str	r2, [r3, #0]
}
 800aec2:	bf00      	nop
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	2000085c 	.word	0x2000085c
 800aed4:	20000904 	.word	0x20000904

0800aed8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	4a07      	ldr	r2, [pc, #28]	; (800af04 <vApplicationGetTimerTaskMemory+0x2c>)
 800aee8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	4a06      	ldr	r2, [pc, #24]	; (800af08 <vApplicationGetTimerTaskMemory+0x30>)
 800aeee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aef6:	601a      	str	r2, [r3, #0]
}
 800aef8:	bf00      	nop
 800aefa:	3714      	adds	r7, #20
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	20000b04 	.word	0x20000b04
 800af08:	20000bac 	.word	0x20000bac

0800af0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f103 0208 	add.w	r2, r3, #8
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f04f 32ff 	mov.w	r2, #4294967295
 800af24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f103 0208 	add.w	r2, r3, #8
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f103 0208 	add.w	r2, r3, #8
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800af5a:	bf00      	nop
 800af5c:	370c      	adds	r7, #12
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800af66:	b480      	push	{r7}
 800af68:	b085      	sub	sp, #20
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	68fa      	ldr	r2, [r7, #12]
 800af7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	689a      	ldr	r2, [r3, #8]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	689b      	ldr	r3, [r3, #8]
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	1c5a      	adds	r2, r3, #1
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	601a      	str	r2, [r3, #0]
}
 800afa2:	bf00      	nop
 800afa4:	3714      	adds	r7, #20
 800afa6:	46bd      	mov	sp, r7
 800afa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afac:	4770      	bx	lr

0800afae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800afae:	b480      	push	{r7}
 800afb0:	b085      	sub	sp, #20
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc4:	d103      	bne.n	800afce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	60fb      	str	r3, [r7, #12]
 800afcc:	e00c      	b.n	800afe8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3308      	adds	r3, #8
 800afd2:	60fb      	str	r3, [r7, #12]
 800afd4:	e002      	b.n	800afdc <vListInsert+0x2e>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	60fb      	str	r3, [r7, #12]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68ba      	ldr	r2, [r7, #8]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d2f6      	bcs.n	800afd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	683a      	ldr	r2, [r7, #0]
 800aff6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	68fa      	ldr	r2, [r7, #12]
 800affc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	683a      	ldr	r2, [r7, #0]
 800b002:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	1c5a      	adds	r2, r3, #1
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	601a      	str	r2, [r3, #0]
}
 800b014:	bf00      	nop
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	6892      	ldr	r2, [r2, #8]
 800b036:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	6852      	ldr	r2, [r2, #4]
 800b040:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d103      	bne.n	800b054 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689a      	ldr	r2, [r3, #8]
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	1e5a      	subs	r2, r3, #1
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3714      	adds	r7, #20
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr

0800b074 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b09a:	bf00      	nop
 800b09c:	e7fe      	b.n	800b09c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b09e:	f003 f879 	bl	800e194 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0aa:	68f9      	ldr	r1, [r7, #12]
 800b0ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0ae:	fb01 f303 	mul.w	r3, r1, r3
 800b0b2:	441a      	add	r2, r3
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	68f9      	ldr	r1, [r7, #12]
 800b0d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b0d4:	fb01 f303 	mul.w	r3, r1, r3
 800b0d8:	441a      	add	r2, r3
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	22ff      	movs	r2, #255	; 0xff
 800b0e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	22ff      	movs	r2, #255	; 0xff
 800b0ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d114      	bne.n	800b11e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	691b      	ldr	r3, [r3, #16]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d01a      	beq.n	800b132 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	3310      	adds	r3, #16
 800b100:	4618      	mov	r0, r3
 800b102:	f001 fd5d 	bl	800cbc0 <xTaskRemoveFromEventList>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d012      	beq.n	800b132 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <xQueueGenericReset+0xcc>)
 800b10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	f3bf 8f6f 	isb	sy
 800b11c:	e009      	b.n	800b132 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	3310      	adds	r3, #16
 800b122:	4618      	mov	r0, r3
 800b124:	f7ff fef2 	bl	800af0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3324      	adds	r3, #36	; 0x24
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7ff feed 	bl	800af0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b132:	f003 f85f 	bl	800e1f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b136:	2301      	movs	r3, #1
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08e      	sub	sp, #56	; 0x38
 800b148:	af02      	add	r7, sp, #8
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	607a      	str	r2, [r7, #4]
 800b150:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10a      	bne.n	800b16e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b16a:	bf00      	nop
 800b16c:	e7fe      	b.n	800b16c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d10a      	bne.n	800b18a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b178:	f383 8811 	msr	BASEPRI, r3
 800b17c:	f3bf 8f6f 	isb	sy
 800b180:	f3bf 8f4f 	dsb	sy
 800b184:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b186:	bf00      	nop
 800b188:	e7fe      	b.n	800b188 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d002      	beq.n	800b196 <xQueueGenericCreateStatic+0x52>
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d001      	beq.n	800b19a <xQueueGenericCreateStatic+0x56>
 800b196:	2301      	movs	r3, #1
 800b198:	e000      	b.n	800b19c <xQueueGenericCreateStatic+0x58>
 800b19a:	2300      	movs	r3, #0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10a      	bne.n	800b1b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	623b      	str	r3, [r7, #32]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d102      	bne.n	800b1c2 <xQueueGenericCreateStatic+0x7e>
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <xQueueGenericCreateStatic+0x82>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e000      	b.n	800b1c8 <xQueueGenericCreateStatic+0x84>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d10a      	bne.n	800b1e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	61fb      	str	r3, [r7, #28]
}
 800b1de:	bf00      	nop
 800b1e0:	e7fe      	b.n	800b1e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b1e2:	2350      	movs	r3, #80	; 0x50
 800b1e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b50      	cmp	r3, #80	; 0x50
 800b1ea:	d00a      	beq.n	800b202 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f0:	f383 8811 	msr	BASEPRI, r3
 800b1f4:	f3bf 8f6f 	isb	sy
 800b1f8:	f3bf 8f4f 	dsb	sy
 800b1fc:	61bb      	str	r3, [r7, #24]
}
 800b1fe:	bf00      	nop
 800b200:	e7fe      	b.n	800b200 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b202:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00d      	beq.n	800b22a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	2201      	movs	r2, #1
 800b212:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b216:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	4613      	mov	r3, r2
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	68b9      	ldr	r1, [r7, #8]
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 f83f 	bl	800b2a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b22c:	4618      	mov	r0, r3
 800b22e:	3730      	adds	r7, #48	; 0x30
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}

0800b234 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b234:	b580      	push	{r7, lr}
 800b236:	b08a      	sub	sp, #40	; 0x28
 800b238:	af02      	add	r7, sp, #8
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	4613      	mov	r3, r2
 800b240:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <xQueueGenericCreate+0x2a>
	__asm volatile
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	613b      	str	r3, [r7, #16]
}
 800b25a:	bf00      	nop
 800b25c:	e7fe      	b.n	800b25c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	68ba      	ldr	r2, [r7, #8]
 800b262:	fb02 f303 	mul.w	r3, r2, r3
 800b266:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	3350      	adds	r3, #80	; 0x50
 800b26c:	4618      	mov	r0, r3
 800b26e:	f003 f8b3 	bl	800e3d8 <pvPortMalloc>
 800b272:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d011      	beq.n	800b29e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	3350      	adds	r3, #80	; 0x50
 800b282:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b28c:	79fa      	ldrb	r2, [r7, #7]
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4613      	mov	r3, r2
 800b294:	697a      	ldr	r2, [r7, #20]
 800b296:	68b9      	ldr	r1, [r7, #8]
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f000 f805 	bl	800b2a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b29e:	69bb      	ldr	r3, [r7, #24]
	}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3720      	adds	r7, #32
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d103      	bne.n	800b2c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b2bc:	69bb      	ldr	r3, [r7, #24]
 800b2be:	69ba      	ldr	r2, [r7, #24]
 800b2c0:	601a      	str	r2, [r3, #0]
 800b2c2:	e002      	b.n	800b2ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	687a      	ldr	r2, [r7, #4]
 800b2c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	69b8      	ldr	r0, [r7, #24]
 800b2da:	f7ff fecb 	bl	800b074 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	78fa      	ldrb	r2, [r7, #3]
 800b2e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b082      	sub	sp, #8
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d00e      	beq.n	800b31a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2200      	movs	r2, #0
 800b300:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b30e:	2300      	movs	r3, #0
 800b310:	2200      	movs	r2, #0
 800b312:	2100      	movs	r1, #0
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f90b 	bl	800b530 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b31a:	bf00      	nop
 800b31c:	3708      	adds	r7, #8
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}

0800b322 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b322:	b580      	push	{r7, lr}
 800b324:	b086      	sub	sp, #24
 800b326:	af00      	add	r7, sp, #0
 800b328:	4603      	mov	r3, r0
 800b32a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b32c:	2301      	movs	r3, #1
 800b32e:	617b      	str	r3, [r7, #20]
 800b330:	2300      	movs	r3, #0
 800b332:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b334:	79fb      	ldrb	r3, [r7, #7]
 800b336:	461a      	mov	r2, r3
 800b338:	6939      	ldr	r1, [r7, #16]
 800b33a:	6978      	ldr	r0, [r7, #20]
 800b33c:	f7ff ff7a 	bl	800b234 <xQueueGenericCreate>
 800b340:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7ff ffd3 	bl	800b2ee <prvInitialiseMutex>

		return xNewQueue;
 800b348:	68fb      	ldr	r3, [r7, #12]
	}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b352:	b580      	push	{r7, lr}
 800b354:	b088      	sub	sp, #32
 800b356:	af02      	add	r7, sp, #8
 800b358:	4603      	mov	r3, r0
 800b35a:	6039      	str	r1, [r7, #0]
 800b35c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b35e:	2301      	movs	r3, #1
 800b360:	617b      	str	r3, [r7, #20]
 800b362:	2300      	movs	r3, #0
 800b364:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2200      	movs	r2, #0
 800b36e:	6939      	ldr	r1, [r7, #16]
 800b370:	6978      	ldr	r0, [r7, #20]
 800b372:	f7ff fee7 	bl	800b144 <xQueueGenericCreateStatic>
 800b376:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7ff ffb8 	bl	800b2ee <prvInitialiseMutex>

		return xNewQueue;
 800b37e:	68fb      	ldr	r3, [r7, #12]
	}
 800b380:	4618      	mov	r0, r3
 800b382:	3718      	adds	r7, #24
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}

0800b388 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b388:	b590      	push	{r4, r7, lr}
 800b38a:	b087      	sub	sp, #28
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10a      	bne.n	800b3b0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	60fb      	str	r3, [r7, #12]
}
 800b3ac:	bf00      	nop
 800b3ae:	e7fe      	b.n	800b3ae <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	689c      	ldr	r4, [r3, #8]
 800b3b4:	f001 fdc6 	bl	800cf44 <xTaskGetCurrentTaskHandle>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	429c      	cmp	r4, r3
 800b3bc:	d111      	bne.n	800b3e2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	1e5a      	subs	r2, r3, #1
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d105      	bne.n	800b3dc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	2100      	movs	r1, #0
 800b3d6:	6938      	ldr	r0, [r7, #16]
 800b3d8:	f000 f8aa 	bl	800b530 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	e001      	b.n	800b3e6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b3e6:	697b      	ldr	r3, [r7, #20]
	}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	371c      	adds	r7, #28
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd90      	pop	{r4, r7, pc}

0800b3f0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b3f0:	b590      	push	{r4, r7, lr}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800b404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b408:	f383 8811 	msr	BASEPRI, r3
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f3bf 8f4f 	dsb	sy
 800b414:	60fb      	str	r3, [r7, #12]
}
 800b416:	bf00      	nop
 800b418:	e7fe      	b.n	800b418 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	689c      	ldr	r4, [r3, #8]
 800b41e:	f001 fd91 	bl	800cf44 <xTaskGetCurrentTaskHandle>
 800b422:	4603      	mov	r3, r0
 800b424:	429c      	cmp	r4, r3
 800b426:	d107      	bne.n	800b438 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b432:	2301      	movs	r3, #1
 800b434:	617b      	str	r3, [r7, #20]
 800b436:	e00c      	b.n	800b452 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	6938      	ldr	r0, [r7, #16]
 800b43c:	f000 fb7e 	bl	800bb3c <xQueueSemaphoreTake>
 800b440:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d004      	beq.n	800b452 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	1c5a      	adds	r2, r3, #1
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b452:	697b      	ldr	r3, [r7, #20]
	}
 800b454:	4618      	mov	r0, r3
 800b456:	371c      	adds	r7, #28
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd90      	pop	{r4, r7, pc}

0800b45c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b08a      	sub	sp, #40	; 0x28
 800b460:	af02      	add	r7, sp, #8
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d10a      	bne.n	800b484 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b472:	f383 8811 	msr	BASEPRI, r3
 800b476:	f3bf 8f6f 	isb	sy
 800b47a:	f3bf 8f4f 	dsb	sy
 800b47e:	61bb      	str	r3, [r7, #24]
}
 800b480:	bf00      	nop
 800b482:	e7fe      	b.n	800b482 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d90a      	bls.n	800b4a2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800b48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b490:	f383 8811 	msr	BASEPRI, r3
 800b494:	f3bf 8f6f 	isb	sy
 800b498:	f3bf 8f4f 	dsb	sy
 800b49c:	617b      	str	r3, [r7, #20]
}
 800b49e:	bf00      	nop
 800b4a0:	e7fe      	b.n	800b4a0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f7ff fe49 	bl	800b144 <xQueueGenericCreateStatic>
 800b4b2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b4b4:	69fb      	ldr	r3, [r7, #28]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d002      	beq.n	800b4c0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
	}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3720      	adds	r7, #32
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b086      	sub	sp, #24
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10a      	bne.n	800b4f0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	613b      	str	r3, [r7, #16]
}
 800b4ec:	bf00      	nop
 800b4ee:	e7fe      	b.n	800b4ee <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d90a      	bls.n	800b50e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	60fb      	str	r3, [r7, #12]
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b50e:	2202      	movs	r2, #2
 800b510:	2100      	movs	r1, #0
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7ff fe8e 	bl	800b234 <xQueueGenericCreate>
 800b518:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d002      	beq.n	800b526 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b526:	697b      	ldr	r3, [r7, #20]
	}
 800b528:	4618      	mov	r0, r3
 800b52a:	3718      	adds	r7, #24
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08e      	sub	sp, #56	; 0x38
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
 800b53c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b53e:	2300      	movs	r3, #0
 800b540:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10a      	bne.n	800b562 <xQueueGenericSend+0x32>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d103      	bne.n	800b570 <xQueueGenericSend+0x40>
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <xQueueGenericSend+0x44>
 800b570:	2301      	movs	r3, #1
 800b572:	e000      	b.n	800b576 <xQueueGenericSend+0x46>
 800b574:	2300      	movs	r3, #0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10a      	bne.n	800b590 <xQueueGenericSend+0x60>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b58c:	bf00      	nop
 800b58e:	e7fe      	b.n	800b58e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b02      	cmp	r3, #2
 800b594:	d103      	bne.n	800b59e <xQueueGenericSend+0x6e>
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d101      	bne.n	800b5a2 <xQueueGenericSend+0x72>
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e000      	b.n	800b5a4 <xQueueGenericSend+0x74>
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10a      	bne.n	800b5be <xQueueGenericSend+0x8e>
	__asm volatile
 800b5a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ac:	f383 8811 	msr	BASEPRI, r3
 800b5b0:	f3bf 8f6f 	isb	sy
 800b5b4:	f3bf 8f4f 	dsb	sy
 800b5b8:	623b      	str	r3, [r7, #32]
}
 800b5ba:	bf00      	nop
 800b5bc:	e7fe      	b.n	800b5bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b5be:	f001 fcd1 	bl	800cf64 <xTaskGetSchedulerState>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d102      	bne.n	800b5ce <xQueueGenericSend+0x9e>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d101      	bne.n	800b5d2 <xQueueGenericSend+0xa2>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e000      	b.n	800b5d4 <xQueueGenericSend+0xa4>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10a      	bne.n	800b5ee <xQueueGenericSend+0xbe>
	__asm volatile
 800b5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	61fb      	str	r3, [r7, #28]
}
 800b5ea:	bf00      	nop
 800b5ec:	e7fe      	b.n	800b5ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b5ee:	f002 fdd1 	bl	800e194 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d302      	bcc.n	800b604 <xQueueGenericSend+0xd4>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b02      	cmp	r3, #2
 800b602:	d129      	bne.n	800b658 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b604:	683a      	ldr	r2, [r7, #0]
 800b606:	68b9      	ldr	r1, [r7, #8]
 800b608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b60a:	f000 fc5e 	bl	800beca <prvCopyDataToQueue>
 800b60e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	2b00      	cmp	r3, #0
 800b616:	d010      	beq.n	800b63a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	3324      	adds	r3, #36	; 0x24
 800b61c:	4618      	mov	r0, r3
 800b61e:	f001 facf 	bl	800cbc0 <xTaskRemoveFromEventList>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d013      	beq.n	800b650 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b628:	4b3f      	ldr	r3, [pc, #252]	; (800b728 <xQueueGenericSend+0x1f8>)
 800b62a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b62e:	601a      	str	r2, [r3, #0]
 800b630:	f3bf 8f4f 	dsb	sy
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	e00a      	b.n	800b650 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d007      	beq.n	800b650 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b640:	4b39      	ldr	r3, [pc, #228]	; (800b728 <xQueueGenericSend+0x1f8>)
 800b642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b646:	601a      	str	r2, [r3, #0]
 800b648:	f3bf 8f4f 	dsb	sy
 800b64c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b650:	f002 fdd0 	bl	800e1f4 <vPortExitCritical>
				return pdPASS;
 800b654:	2301      	movs	r3, #1
 800b656:	e063      	b.n	800b720 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d103      	bne.n	800b666 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b65e:	f002 fdc9 	bl	800e1f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b662:	2300      	movs	r3, #0
 800b664:	e05c      	b.n	800b720 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d106      	bne.n	800b67a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b66c:	f107 0314 	add.w	r3, r7, #20
 800b670:	4618      	mov	r0, r3
 800b672:	f001 fb09 	bl	800cc88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b676:	2301      	movs	r3, #1
 800b678:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b67a:	f002 fdbb 	bl	800e1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b67e:	f001 f863 	bl	800c748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b682:	f002 fd87 	bl	800e194 <vPortEnterCritical>
 800b686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b68c:	b25b      	sxtb	r3, r3
 800b68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b692:	d103      	bne.n	800b69c <xQueueGenericSend+0x16c>
 800b694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b696:	2200      	movs	r2, #0
 800b698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6a2:	b25b      	sxtb	r3, r3
 800b6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a8:	d103      	bne.n	800b6b2 <xQueueGenericSend+0x182>
 800b6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6b2:	f002 fd9f 	bl	800e1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b6b6:	1d3a      	adds	r2, r7, #4
 800b6b8:	f107 0314 	add.w	r3, r7, #20
 800b6bc:	4611      	mov	r1, r2
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f001 faf8 	bl	800ccb4 <xTaskCheckForTimeOut>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d124      	bne.n	800b714 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b6ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6cc:	f000 fcf5 	bl	800c0ba <prvIsQueueFull>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d018      	beq.n	800b708 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d8:	3310      	adds	r3, #16
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	4611      	mov	r1, r2
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f001 fa1e 	bl	800cb20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b6e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b6e6:	f000 fc80 	bl	800bfea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b6ea:	f001 f83b 	bl	800c764 <xTaskResumeAll>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f47f af7c 	bne.w	800b5ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800b6f6:	4b0c      	ldr	r3, [pc, #48]	; (800b728 <xQueueGenericSend+0x1f8>)
 800b6f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6fc:	601a      	str	r2, [r3, #0]
 800b6fe:	f3bf 8f4f 	dsb	sy
 800b702:	f3bf 8f6f 	isb	sy
 800b706:	e772      	b.n	800b5ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b70a:	f000 fc6e 	bl	800bfea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b70e:	f001 f829 	bl	800c764 <xTaskResumeAll>
 800b712:	e76c      	b.n	800b5ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b716:	f000 fc68 	bl	800bfea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b71a:	f001 f823 	bl	800c764 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b71e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b720:	4618      	mov	r0, r3
 800b722:	3738      	adds	r7, #56	; 0x38
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}
 800b728:	e000ed04 	.word	0xe000ed04

0800b72c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b090      	sub	sp, #64	; 0x40
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b740:	2b00      	cmp	r3, #0
 800b742:	d10a      	bne.n	800b75a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b756:	bf00      	nop
 800b758:	e7fe      	b.n	800b758 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <xQueueGenericSendFromISR+0x3c>
 800b760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b764:	2b00      	cmp	r3, #0
 800b766:	d101      	bne.n	800b76c <xQueueGenericSendFromISR+0x40>
 800b768:	2301      	movs	r3, #1
 800b76a:	e000      	b.n	800b76e <xQueueGenericSendFromISR+0x42>
 800b76c:	2300      	movs	r3, #0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10a      	bne.n	800b788 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b784:	bf00      	nop
 800b786:	e7fe      	b.n	800b786 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d103      	bne.n	800b796 <xQueueGenericSendFromISR+0x6a>
 800b78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b792:	2b01      	cmp	r3, #1
 800b794:	d101      	bne.n	800b79a <xQueueGenericSendFromISR+0x6e>
 800b796:	2301      	movs	r3, #1
 800b798:	e000      	b.n	800b79c <xQueueGenericSendFromISR+0x70>
 800b79a:	2300      	movs	r3, #0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10a      	bne.n	800b7b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	623b      	str	r3, [r7, #32]
}
 800b7b2:	bf00      	nop
 800b7b4:	e7fe      	b.n	800b7b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b7b6:	f002 fdcf 	bl	800e358 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b7ba:	f3ef 8211 	mrs	r2, BASEPRI
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	61fa      	str	r2, [r7, #28]
 800b7d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b7d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b7d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b7d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d302      	bcc.n	800b7e8 <xQueueGenericSendFromISR+0xbc>
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b02      	cmp	r3, #2
 800b7e6:	d12f      	bne.n	800b848 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b7f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b7f8:	683a      	ldr	r2, [r7, #0]
 800b7fa:	68b9      	ldr	r1, [r7, #8]
 800b7fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b7fe:	f000 fb64 	bl	800beca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b802:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b80a:	d112      	bne.n	800b832 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b810:	2b00      	cmp	r3, #0
 800b812:	d016      	beq.n	800b842 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	3324      	adds	r3, #36	; 0x24
 800b818:	4618      	mov	r0, r3
 800b81a:	f001 f9d1 	bl	800cbc0 <xTaskRemoveFromEventList>
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d00e      	beq.n	800b842 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00b      	beq.n	800b842 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2201      	movs	r2, #1
 800b82e:	601a      	str	r2, [r3, #0]
 800b830:	e007      	b.n	800b842 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b832:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b836:	3301      	adds	r3, #1
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	b25a      	sxtb	r2, r3
 800b83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b83e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b842:	2301      	movs	r3, #1
 800b844:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b846:	e001      	b.n	800b84c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b848:	2300      	movs	r3, #0
 800b84a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b84e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b856:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3740      	adds	r7, #64	; 0x40
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b862:	b580      	push	{r7, lr}
 800b864:	b08e      	sub	sp, #56	; 0x38
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
 800b86a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b872:	2b00      	cmp	r3, #0
 800b874:	d10a      	bne.n	800b88c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800b876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87a:	f383 8811 	msr	BASEPRI, r3
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f3bf 8f4f 	dsb	sy
 800b886:	623b      	str	r3, [r7, #32]
}
 800b888:	bf00      	nop
 800b88a:	e7fe      	b.n	800b88a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00a      	beq.n	800b8aa <xQueueGiveFromISR+0x48>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	f383 8811 	msr	BASEPRI, r3
 800b89c:	f3bf 8f6f 	isb	sy
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	61fb      	str	r3, [r7, #28]
}
 800b8a6:	bf00      	nop
 800b8a8:	e7fe      	b.n	800b8a8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d103      	bne.n	800b8ba <xQueueGiveFromISR+0x58>
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <xQueueGiveFromISR+0x5c>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e000      	b.n	800b8c0 <xQueueGiveFromISR+0x5e>
 800b8be:	2300      	movs	r3, #0
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d10a      	bne.n	800b8da <xQueueGiveFromISR+0x78>
	__asm volatile
 800b8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c8:	f383 8811 	msr	BASEPRI, r3
 800b8cc:	f3bf 8f6f 	isb	sy
 800b8d0:	f3bf 8f4f 	dsb	sy
 800b8d4:	61bb      	str	r3, [r7, #24]
}
 800b8d6:	bf00      	nop
 800b8d8:	e7fe      	b.n	800b8d8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b8da:	f002 fd3d 	bl	800e358 <vPortValidateInterruptPriority>
	__asm volatile
 800b8de:	f3ef 8211 	mrs	r2, BASEPRI
 800b8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e6:	f383 8811 	msr	BASEPRI, r3
 800b8ea:	f3bf 8f6f 	isb	sy
 800b8ee:	f3bf 8f4f 	dsb	sy
 800b8f2:	617a      	str	r2, [r7, #20]
 800b8f4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b8f6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b906:	429a      	cmp	r2, r3
 800b908:	d22b      	bcs.n	800b962 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b90c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b916:	1c5a      	adds	r2, r3, #1
 800b918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b91c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b924:	d112      	bne.n	800b94c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d016      	beq.n	800b95c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b930:	3324      	adds	r3, #36	; 0x24
 800b932:	4618      	mov	r0, r3
 800b934:	f001 f944 	bl	800cbc0 <xTaskRemoveFromEventList>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d00e      	beq.n	800b95c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00b      	beq.n	800b95c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	2201      	movs	r2, #1
 800b948:	601a      	str	r2, [r3, #0]
 800b94a:	e007      	b.n	800b95c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b94c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b950:	3301      	adds	r3, #1
 800b952:	b2db      	uxtb	r3, r3
 800b954:	b25a      	sxtb	r2, r3
 800b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b95c:	2301      	movs	r3, #1
 800b95e:	637b      	str	r3, [r7, #52]	; 0x34
 800b960:	e001      	b.n	800b966 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b962:	2300      	movs	r3, #0
 800b964:	637b      	str	r3, [r7, #52]	; 0x34
 800b966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b968:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f383 8811 	msr	BASEPRI, r3
}
 800b970:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b974:	4618      	mov	r0, r3
 800b976:	3738      	adds	r7, #56	; 0x38
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b08c      	sub	sp, #48	; 0x30
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b988:	2300      	movs	r3, #0
 800b98a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b992:	2b00      	cmp	r3, #0
 800b994:	d10a      	bne.n	800b9ac <xQueueReceive+0x30>
	__asm volatile
 800b996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99a:	f383 8811 	msr	BASEPRI, r3
 800b99e:	f3bf 8f6f 	isb	sy
 800b9a2:	f3bf 8f4f 	dsb	sy
 800b9a6:	623b      	str	r3, [r7, #32]
}
 800b9a8:	bf00      	nop
 800b9aa:	e7fe      	b.n	800b9aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d103      	bne.n	800b9ba <xQueueReceive+0x3e>
 800b9b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d101      	bne.n	800b9be <xQueueReceive+0x42>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e000      	b.n	800b9c0 <xQueueReceive+0x44>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10a      	bne.n	800b9da <xQueueReceive+0x5e>
	__asm volatile
 800b9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c8:	f383 8811 	msr	BASEPRI, r3
 800b9cc:	f3bf 8f6f 	isb	sy
 800b9d0:	f3bf 8f4f 	dsb	sy
 800b9d4:	61fb      	str	r3, [r7, #28]
}
 800b9d6:	bf00      	nop
 800b9d8:	e7fe      	b.n	800b9d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9da:	f001 fac3 	bl	800cf64 <xTaskGetSchedulerState>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d102      	bne.n	800b9ea <xQueueReceive+0x6e>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <xQueueReceive+0x72>
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e000      	b.n	800b9f0 <xQueueReceive+0x74>
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10a      	bne.n	800ba0a <xQueueReceive+0x8e>
	__asm volatile
 800b9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f8:	f383 8811 	msr	BASEPRI, r3
 800b9fc:	f3bf 8f6f 	isb	sy
 800ba00:	f3bf 8f4f 	dsb	sy
 800ba04:	61bb      	str	r3, [r7, #24]
}
 800ba06:	bf00      	nop
 800ba08:	e7fe      	b.n	800ba08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ba0a:	f002 fbc3 	bl	800e194 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ba14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d01f      	beq.n	800ba5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ba1a:	68b9      	ldr	r1, [r7, #8]
 800ba1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba1e:	f000 fabe 	bl	800bf9e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ba22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba24:	1e5a      	subs	r2, r3, #1
 800ba26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00f      	beq.n	800ba52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba34:	3310      	adds	r3, #16
 800ba36:	4618      	mov	r0, r3
 800ba38:	f001 f8c2 	bl	800cbc0 <xTaskRemoveFromEventList>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d007      	beq.n	800ba52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba42:	4b3d      	ldr	r3, [pc, #244]	; (800bb38 <xQueueReceive+0x1bc>)
 800ba44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	f3bf 8f4f 	dsb	sy
 800ba4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba52:	f002 fbcf 	bl	800e1f4 <vPortExitCritical>
				return pdPASS;
 800ba56:	2301      	movs	r3, #1
 800ba58:	e069      	b.n	800bb2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d103      	bne.n	800ba68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ba60:	f002 fbc8 	bl	800e1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba64:	2300      	movs	r3, #0
 800ba66:	e062      	b.n	800bb2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d106      	bne.n	800ba7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba6e:	f107 0310 	add.w	r3, r7, #16
 800ba72:	4618      	mov	r0, r3
 800ba74:	f001 f908 	bl	800cc88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba7c:	f002 fbba 	bl	800e1f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba80:	f000 fe62 	bl	800c748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba84:	f002 fb86 	bl	800e194 <vPortEnterCritical>
 800ba88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba8e:	b25b      	sxtb	r3, r3
 800ba90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba94:	d103      	bne.n	800ba9e <xQueueReceive+0x122>
 800ba96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800baa4:	b25b      	sxtb	r3, r3
 800baa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baaa:	d103      	bne.n	800bab4 <xQueueReceive+0x138>
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	2200      	movs	r2, #0
 800bab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bab4:	f002 fb9e 	bl	800e1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bab8:	1d3a      	adds	r2, r7, #4
 800baba:	f107 0310 	add.w	r3, r7, #16
 800babe:	4611      	mov	r1, r2
 800bac0:	4618      	mov	r0, r3
 800bac2:	f001 f8f7 	bl	800ccb4 <xTaskCheckForTimeOut>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d123      	bne.n	800bb14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bacc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bace:	f000 fade 	bl	800c08e <prvIsQueueEmpty>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d017      	beq.n	800bb08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bada:	3324      	adds	r3, #36	; 0x24
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	4611      	mov	r1, r2
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 f81d 	bl	800cb20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bae8:	f000 fa7f 	bl	800bfea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800baec:	f000 fe3a 	bl	800c764 <xTaskResumeAll>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d189      	bne.n	800ba0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800baf6:	4b10      	ldr	r3, [pc, #64]	; (800bb38 <xQueueReceive+0x1bc>)
 800baf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bafc:	601a      	str	r2, [r3, #0]
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	f3bf 8f6f 	isb	sy
 800bb06:	e780      	b.n	800ba0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bb08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb0a:	f000 fa6e 	bl	800bfea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb0e:	f000 fe29 	bl	800c764 <xTaskResumeAll>
 800bb12:	e77a      	b.n	800ba0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bb14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb16:	f000 fa68 	bl	800bfea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb1a:	f000 fe23 	bl	800c764 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bb20:	f000 fab5 	bl	800c08e <prvIsQueueEmpty>
 800bb24:	4603      	mov	r3, r0
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f43f af6f 	beq.w	800ba0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3730      	adds	r7, #48	; 0x30
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	e000ed04 	.word	0xe000ed04

0800bb3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08e      	sub	sp, #56	; 0x38
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10a      	bne.n	800bb6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	623b      	str	r3, [r7, #32]
}
 800bb6a:	bf00      	nop
 800bb6c:	e7fe      	b.n	800bb6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d00a      	beq.n	800bb8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	61fb      	str	r3, [r7, #28]
}
 800bb88:	bf00      	nop
 800bb8a:	e7fe      	b.n	800bb8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb8c:	f001 f9ea 	bl	800cf64 <xTaskGetSchedulerState>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d102      	bne.n	800bb9c <xQueueSemaphoreTake+0x60>
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d101      	bne.n	800bba0 <xQueueSemaphoreTake+0x64>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e000      	b.n	800bba2 <xQueueSemaphoreTake+0x66>
 800bba0:	2300      	movs	r3, #0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10a      	bne.n	800bbbc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	61bb      	str	r3, [r7, #24]
}
 800bbb8:	bf00      	nop
 800bbba:	e7fe      	b.n	800bbba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbbc:	f002 faea 	bl	800e194 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbc4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d024      	beq.n	800bc16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbce:	1e5a      	subs	r2, r3, #1
 800bbd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d104      	bne.n	800bbe6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bbdc:	f001 fb38 	bl	800d250 <pvTaskIncrementMutexHeldCount>
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe8:	691b      	ldr	r3, [r3, #16]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00f      	beq.n	800bc0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbf0:	3310      	adds	r3, #16
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 ffe4 	bl	800cbc0 <xTaskRemoveFromEventList>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d007      	beq.n	800bc0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bbfe:	4b54      	ldr	r3, [pc, #336]	; (800bd50 <xQueueSemaphoreTake+0x214>)
 800bc00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc04:	601a      	str	r2, [r3, #0]
 800bc06:	f3bf 8f4f 	dsb	sy
 800bc0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc0e:	f002 faf1 	bl	800e1f4 <vPortExitCritical>
				return pdPASS;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e097      	b.n	800bd46 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d111      	bne.n	800bc40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00a      	beq.n	800bc38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	617b      	str	r3, [r7, #20]
}
 800bc34:	bf00      	nop
 800bc36:	e7fe      	b.n	800bc36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bc38:	f002 fadc 	bl	800e1f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	e082      	b.n	800bd46 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d106      	bne.n	800bc54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc46:	f107 030c 	add.w	r3, r7, #12
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f001 f81c 	bl	800cc88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc50:	2301      	movs	r3, #1
 800bc52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc54:	f002 face 	bl	800e1f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc58:	f000 fd76 	bl	800c748 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc5c:	f002 fa9a 	bl	800e194 <vPortEnterCritical>
 800bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc66:	b25b      	sxtb	r3, r3
 800bc68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc6c:	d103      	bne.n	800bc76 <xQueueSemaphoreTake+0x13a>
 800bc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc7c:	b25b      	sxtb	r3, r3
 800bc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc82:	d103      	bne.n	800bc8c <xQueueSemaphoreTake+0x150>
 800bc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc86:	2200      	movs	r2, #0
 800bc88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc8c:	f002 fab2 	bl	800e1f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc90:	463a      	mov	r2, r7
 800bc92:	f107 030c 	add.w	r3, r7, #12
 800bc96:	4611      	mov	r1, r2
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f001 f80b 	bl	800ccb4 <xTaskCheckForTimeOut>
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d132      	bne.n	800bd0a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bca4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bca6:	f000 f9f2 	bl	800c08e <prvIsQueueEmpty>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d026      	beq.n	800bcfe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d109      	bne.n	800bccc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800bcb8:	f002 fa6c 	bl	800e194 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f001 f96d 	bl	800cfa0 <xTaskPriorityInherit>
 800bcc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bcc8:	f002 fa94 	bl	800e1f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcce:	3324      	adds	r3, #36	; 0x24
 800bcd0:	683a      	ldr	r2, [r7, #0]
 800bcd2:	4611      	mov	r1, r2
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 ff23 	bl	800cb20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bcdc:	f000 f985 	bl	800bfea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bce0:	f000 fd40 	bl	800c764 <xTaskResumeAll>
 800bce4:	4603      	mov	r3, r0
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	f47f af68 	bne.w	800bbbc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800bcec:	4b18      	ldr	r3, [pc, #96]	; (800bd50 <xQueueSemaphoreTake+0x214>)
 800bcee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	e75e      	b.n	800bbbc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bcfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd00:	f000 f973 	bl	800bfea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd04:	f000 fd2e 	bl	800c764 <xTaskResumeAll>
 800bd08:	e758      	b.n	800bbbc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bd0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd0c:	f000 f96d 	bl	800bfea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd10:	f000 fd28 	bl	800c764 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd16:	f000 f9ba 	bl	800c08e <prvIsQueueEmpty>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f43f af4d 	beq.w	800bbbc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00d      	beq.n	800bd44 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800bd28:	f002 fa34 	bl	800e194 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bd2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd2e:	f000 f8b4 	bl	800be9a <prvGetDisinheritPriorityAfterTimeout>
 800bd32:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bd34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f001 fa06 	bl	800d14c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bd40:	f002 fa58 	bl	800e1f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3738      	adds	r7, #56	; 0x38
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	e000ed04 	.word	0xe000ed04

0800bd54 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b08e      	sub	sp, #56	; 0x38
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10a      	bne.n	800bd80 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	623b      	str	r3, [r7, #32]
}
 800bd7c:	bf00      	nop
 800bd7e:	e7fe      	b.n	800bd7e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d103      	bne.n	800bd8e <xQueueReceiveFromISR+0x3a>
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d101      	bne.n	800bd92 <xQueueReceiveFromISR+0x3e>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <xQueueReceiveFromISR+0x40>
 800bd92:	2300      	movs	r3, #0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	61fb      	str	r3, [r7, #28]
}
 800bdaa:	bf00      	nop
 800bdac:	e7fe      	b.n	800bdac <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdae:	f002 fad3 	bl	800e358 <vPortValidateInterruptPriority>
	__asm volatile
 800bdb2:	f3ef 8211 	mrs	r2, BASEPRI
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	61ba      	str	r2, [r7, #24]
 800bdc8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bdca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bdcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d02f      	beq.n	800be3a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bde0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bde4:	68b9      	ldr	r1, [r7, #8]
 800bde6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bde8:	f000 f8d9 	bl	800bf9e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdee:	1e5a      	subs	r2, r3, #1
 800bdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bdf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bdf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfc:	d112      	bne.n	800be24 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	691b      	ldr	r3, [r3, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d016      	beq.n	800be34 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be08:	3310      	adds	r3, #16
 800be0a:	4618      	mov	r0, r3
 800be0c:	f000 fed8 	bl	800cbc0 <xTaskRemoveFromEventList>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00e      	beq.n	800be34 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00b      	beq.n	800be34 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2201      	movs	r2, #1
 800be20:	601a      	str	r2, [r3, #0]
 800be22:	e007      	b.n	800be34 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800be24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be28:	3301      	adds	r3, #1
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	b25a      	sxtb	r2, r3
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800be34:	2301      	movs	r3, #1
 800be36:	637b      	str	r3, [r7, #52]	; 0x34
 800be38:	e001      	b.n	800be3e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	637b      	str	r3, [r7, #52]	; 0x34
 800be3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	f383 8811 	msr	BASEPRI, r3
}
 800be48:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3738      	adds	r7, #56	; 0x38
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b084      	sub	sp, #16
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10a      	bne.n	800be7c <vQueueDelete+0x28>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	60bb      	str	r3, [r7, #8]
}
 800be78:	bf00      	nop
 800be7a:	e7fe      	b.n	800be7a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f000 f95f 	bl	800c140 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d102      	bne.n	800be92 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800be8c:	68f8      	ldr	r0, [r7, #12]
 800be8e:	f002 fb6f 	bl	800e570 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800be92:	bf00      	nop
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800be9a:	b480      	push	{r7}
 800be9c:	b085      	sub	sp, #20
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d006      	beq.n	800beb8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800beb4:	60fb      	str	r3, [r7, #12]
 800beb6:	e001      	b.n	800bebc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bebc:	68fb      	ldr	r3, [r7, #12]
	}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3714      	adds	r7, #20
 800bec2:	46bd      	mov	sp, r7
 800bec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec8:	4770      	bx	lr

0800beca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b086      	sub	sp, #24
 800bece:	af00      	add	r7, sp, #0
 800bed0:	60f8      	str	r0, [r7, #12]
 800bed2:	60b9      	str	r1, [r7, #8]
 800bed4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bed6:	2300      	movs	r3, #0
 800bed8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bede:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10d      	bne.n	800bf04 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d14d      	bne.n	800bf8c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f001 f8bb 	bl	800d070 <xTaskPriorityDisinherit>
 800befa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	609a      	str	r2, [r3, #8]
 800bf02:	e043      	b.n	800bf8c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d119      	bne.n	800bf3e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	6858      	ldr	r0, [r3, #4]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf12:	461a      	mov	r2, r3
 800bf14:	68b9      	ldr	r1, [r7, #8]
 800bf16:	f003 fa77 	bl	800f408 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	685a      	ldr	r2, [r3, #4]
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf22:	441a      	add	r2, r3
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	685a      	ldr	r2, [r3, #4]
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d32b      	bcc.n	800bf8c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	605a      	str	r2, [r3, #4]
 800bf3c:	e026      	b.n	800bf8c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	68d8      	ldr	r0, [r3, #12]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf46:	461a      	mov	r2, r3
 800bf48:	68b9      	ldr	r1, [r7, #8]
 800bf4a:	f003 fa5d 	bl	800f408 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	68da      	ldr	r2, [r3, #12]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf56:	425b      	negs	r3, r3
 800bf58:	441a      	add	r2, r3
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68da      	ldr	r2, [r3, #12]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d207      	bcs.n	800bf7a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689a      	ldr	r2, [r3, #8]
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf72:	425b      	negs	r3, r3
 800bf74:	441a      	add	r2, r3
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b02      	cmp	r3, #2
 800bf7e:	d105      	bne.n	800bf8c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d002      	beq.n	800bf8c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	3b01      	subs	r3, #1
 800bf8a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	1c5a      	adds	r2, r3, #1
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bf94:	697b      	ldr	r3, [r7, #20]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3718      	adds	r7, #24
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d018      	beq.n	800bfe2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68da      	ldr	r2, [r3, #12]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb8:	441a      	add	r2, r3
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d303      	bcc.n	800bfd2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	68d9      	ldr	r1, [r3, #12]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfda:	461a      	mov	r2, r3
 800bfdc:	6838      	ldr	r0, [r7, #0]
 800bfde:	f003 fa13 	bl	800f408 <memcpy>
	}
}
 800bfe2:	bf00      	nop
 800bfe4:	3708      	adds	r7, #8
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800bff2:	f002 f8cf 	bl	800e194 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bffc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800bffe:	e011      	b.n	800c024 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	2b00      	cmp	r3, #0
 800c006:	d012      	beq.n	800c02e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	3324      	adds	r3, #36	; 0x24
 800c00c:	4618      	mov	r0, r3
 800c00e:	f000 fdd7 	bl	800cbc0 <xTaskRemoveFromEventList>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d001      	beq.n	800c01c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c018:	f000 feae 	bl	800cd78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
 800c01e:	3b01      	subs	r3, #1
 800c020:	b2db      	uxtb	r3, r3
 800c022:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	dce9      	bgt.n	800c000 <prvUnlockQueue+0x16>
 800c02c:	e000      	b.n	800c030 <prvUnlockQueue+0x46>
					break;
 800c02e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	22ff      	movs	r2, #255	; 0xff
 800c034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c038:	f002 f8dc 	bl	800e1f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c03c:	f002 f8aa 	bl	800e194 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c046:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c048:	e011      	b.n	800c06e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d012      	beq.n	800c078 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3310      	adds	r3, #16
 800c056:	4618      	mov	r0, r3
 800c058:	f000 fdb2 	bl	800cbc0 <xTaskRemoveFromEventList>
 800c05c:	4603      	mov	r3, r0
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c062:	f000 fe89 	bl	800cd78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c066:	7bbb      	ldrb	r3, [r7, #14]
 800c068:	3b01      	subs	r3, #1
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c06e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c072:	2b00      	cmp	r3, #0
 800c074:	dce9      	bgt.n	800c04a <prvUnlockQueue+0x60>
 800c076:	e000      	b.n	800c07a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c078:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	22ff      	movs	r2, #255	; 0xff
 800c07e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c082:	f002 f8b7 	bl	800e1f4 <vPortExitCritical>
}
 800c086:	bf00      	nop
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c08e:	b580      	push	{r7, lr}
 800c090:	b084      	sub	sp, #16
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c096:	f002 f87d 	bl	800e194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d102      	bne.n	800c0a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	60fb      	str	r3, [r7, #12]
 800c0a6:	e001      	b.n	800c0ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0ac:	f002 f8a2 	bl	800e1f4 <vPortExitCritical>

	return xReturn;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}

0800c0ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c0ba:	b580      	push	{r7, lr}
 800c0bc:	b084      	sub	sp, #16
 800c0be:	af00      	add	r7, sp, #0
 800c0c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c0c2:	f002 f867 	bl	800e194 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d102      	bne.n	800c0d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	60fb      	str	r3, [r7, #12]
 800c0d6:	e001      	b.n	800c0dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c0dc:	f002 f88a 	bl	800e1f4 <vPortExitCritical>

	return xReturn;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}
	...

0800c0ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
 800c0f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	60fb      	str	r3, [r7, #12]
 800c0fa:	e014      	b.n	800c126 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c0fc:	4a0f      	ldr	r2, [pc, #60]	; (800c13c <vQueueAddToRegistry+0x50>)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d10b      	bne.n	800c120 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c108:	490c      	ldr	r1, [pc, #48]	; (800c13c <vQueueAddToRegistry+0x50>)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c112:	4a0a      	ldr	r2, [pc, #40]	; (800c13c <vQueueAddToRegistry+0x50>)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	4413      	add	r3, r2
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c11e:	e006      	b.n	800c12e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3301      	adds	r3, #1
 800c124:	60fb      	str	r3, [r7, #12]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b07      	cmp	r3, #7
 800c12a:	d9e7      	bls.n	800c0fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c12c:	bf00      	nop
 800c12e:	bf00      	nop
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr
 800c13a:	bf00      	nop
 800c13c:	20000fac 	.word	0x20000fac

0800c140 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c148:	2300      	movs	r3, #0
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e016      	b.n	800c17c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c14e:	4a10      	ldr	r2, [pc, #64]	; (800c190 <vQueueUnregisterQueue+0x50>)
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	00db      	lsls	r3, r3, #3
 800c154:	4413      	add	r3, r2
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	687a      	ldr	r2, [r7, #4]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d10b      	bne.n	800c176 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c15e:	4a0c      	ldr	r2, [pc, #48]	; (800c190 <vQueueUnregisterQueue+0x50>)
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2100      	movs	r1, #0
 800c164:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c168:	4a09      	ldr	r2, [pc, #36]	; (800c190 <vQueueUnregisterQueue+0x50>)
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	00db      	lsls	r3, r3, #3
 800c16e:	4413      	add	r3, r2
 800c170:	2200      	movs	r2, #0
 800c172:	605a      	str	r2, [r3, #4]
				break;
 800c174:	e006      	b.n	800c184 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3301      	adds	r3, #1
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2b07      	cmp	r3, #7
 800c180:	d9e5      	bls.n	800c14e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	20000fac 	.word	0x20000fac

0800c194 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c1a4:	f001 fff6 	bl	800e194 <vPortEnterCritical>
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1ae:	b25b      	sxtb	r3, r3
 800c1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b4:	d103      	bne.n	800c1be <vQueueWaitForMessageRestricted+0x2a>
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1c4:	b25b      	sxtb	r3, r3
 800c1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ca:	d103      	bne.n	800c1d4 <vQueueWaitForMessageRestricted+0x40>
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1d4:	f002 f80e 	bl	800e1f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d106      	bne.n	800c1ee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	3324      	adds	r3, #36	; 0x24
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	68b9      	ldr	r1, [r7, #8]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 fcbd 	bl	800cb68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c1ee:	6978      	ldr	r0, [r7, #20]
 800c1f0:	f7ff fefb 	bl	800bfea <prvUnlockQueue>
	}
 800c1f4:	bf00      	nop
 800c1f6:	3718      	adds	r7, #24
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b08e      	sub	sp, #56	; 0x38
 800c200:	af04      	add	r7, sp, #16
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10a      	bne.n	800c226 <xTaskCreateStatic+0x2a>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	623b      	str	r3, [r7, #32]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d10a      	bne.n	800c242 <xTaskCreateStatic+0x46>
	__asm volatile
 800c22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c230:	f383 8811 	msr	BASEPRI, r3
 800c234:	f3bf 8f6f 	isb	sy
 800c238:	f3bf 8f4f 	dsb	sy
 800c23c:	61fb      	str	r3, [r7, #28]
}
 800c23e:	bf00      	nop
 800c240:	e7fe      	b.n	800c240 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c242:	23a8      	movs	r3, #168	; 0xa8
 800c244:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	2ba8      	cmp	r3, #168	; 0xa8
 800c24a:	d00a      	beq.n	800c262 <xTaskCreateStatic+0x66>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	61bb      	str	r3, [r7, #24]
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c262:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c266:	2b00      	cmp	r3, #0
 800c268:	d01e      	beq.n	800c2a8 <xTaskCreateStatic+0xac>
 800c26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d01b      	beq.n	800c2a8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c278:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	2202      	movs	r2, #2
 800c27e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c282:	2300      	movs	r3, #0
 800c284:	9303      	str	r3, [sp, #12]
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	9302      	str	r3, [sp, #8]
 800c28a:	f107 0314 	add.w	r3, r7, #20
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	9300      	str	r3, [sp, #0]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	68b9      	ldr	r1, [r7, #8]
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f000 f850 	bl	800c340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2a2:	f000 f8f3 	bl	800c48c <prvAddNewTaskToReadyList>
 800c2a6:	e001      	b.n	800c2ac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2ac:	697b      	ldr	r3, [r7, #20]
	}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3728      	adds	r7, #40	; 0x28
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b08c      	sub	sp, #48	; 0x30
 800c2ba:	af04      	add	r7, sp, #16
 800c2bc:	60f8      	str	r0, [r7, #12]
 800c2be:	60b9      	str	r1, [r7, #8]
 800c2c0:	603b      	str	r3, [r7, #0]
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c2c6:	88fb      	ldrh	r3, [r7, #6]
 800c2c8:	009b      	lsls	r3, r3, #2
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f002 f884 	bl	800e3d8 <pvPortMalloc>
 800c2d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00e      	beq.n	800c2f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c2d8:	20a8      	movs	r0, #168	; 0xa8
 800c2da:	f002 f87d 	bl	800e3d8 <pvPortMalloc>
 800c2de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d003      	beq.n	800c2ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	697a      	ldr	r2, [r7, #20]
 800c2ea:	631a      	str	r2, [r3, #48]	; 0x30
 800c2ec:	e005      	b.n	800c2fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c2ee:	6978      	ldr	r0, [r7, #20]
 800c2f0:	f002 f93e 	bl	800e570 <vPortFree>
 800c2f4:	e001      	b.n	800c2fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d017      	beq.n	800c330 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	2200      	movs	r2, #0
 800c304:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c308:	88fa      	ldrh	r2, [r7, #6]
 800c30a:	2300      	movs	r3, #0
 800c30c:	9303      	str	r3, [sp, #12]
 800c30e:	69fb      	ldr	r3, [r7, #28]
 800c310:	9302      	str	r3, [sp, #8]
 800c312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c314:	9301      	str	r3, [sp, #4]
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	68b9      	ldr	r1, [r7, #8]
 800c31e:	68f8      	ldr	r0, [r7, #12]
 800c320:	f000 f80e 	bl	800c340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c324:	69f8      	ldr	r0, [r7, #28]
 800c326:	f000 f8b1 	bl	800c48c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c32a:	2301      	movs	r3, #1
 800c32c:	61bb      	str	r3, [r7, #24]
 800c32e:	e002      	b.n	800c336 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c330:	f04f 33ff 	mov.w	r3, #4294967295
 800c334:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c336:	69bb      	ldr	r3, [r7, #24]
	}
 800c338:	4618      	mov	r0, r3
 800c33a:	3720      	adds	r7, #32
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b088      	sub	sp, #32
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
 800c34c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c350:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	461a      	mov	r2, r3
 800c358:	21a5      	movs	r1, #165	; 0xa5
 800c35a:	f002 ff80 	bl	800f25e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c368:	3b01      	subs	r3, #1
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	f023 0307 	bic.w	r3, r3, #7
 800c376:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	f003 0307 	and.w	r3, r3, #7
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00a      	beq.n	800c398 <prvInitialiseNewTask+0x58>
	__asm volatile
 800c382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c386:	f383 8811 	msr	BASEPRI, r3
 800c38a:	f3bf 8f6f 	isb	sy
 800c38e:	f3bf 8f4f 	dsb	sy
 800c392:	617b      	str	r3, [r7, #20]
}
 800c394:	bf00      	nop
 800c396:	e7fe      	b.n	800c396 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d01f      	beq.n	800c3de <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c39e:	2300      	movs	r3, #0
 800c3a0:	61fb      	str	r3, [r7, #28]
 800c3a2:	e012      	b.n	800c3ca <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3a4:	68ba      	ldr	r2, [r7, #8]
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	7819      	ldrb	r1, [r3, #0]
 800c3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	4413      	add	r3, r2
 800c3b2:	3334      	adds	r3, #52	; 0x34
 800c3b4:	460a      	mov	r2, r1
 800c3b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	4413      	add	r3, r2
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d006      	beq.n	800c3d2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	61fb      	str	r3, [r7, #28]
 800c3ca:	69fb      	ldr	r3, [r7, #28]
 800c3cc:	2b0f      	cmp	r3, #15
 800c3ce:	d9e9      	bls.n	800c3a4 <prvInitialiseNewTask+0x64>
 800c3d0:	e000      	b.n	800c3d4 <prvInitialiseNewTask+0x94>
			{
				break;
 800c3d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3dc:	e003      	b.n	800c3e6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3e8:	2b37      	cmp	r3, #55	; 0x37
 800c3ea:	d901      	bls.n	800c3f0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c3ec:	2337      	movs	r3, #55	; 0x37
 800c3ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fe:	2200      	movs	r2, #0
 800c400:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c404:	3304      	adds	r3, #4
 800c406:	4618      	mov	r0, r3
 800c408:	f7fe fda0 	bl	800af4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40e:	3318      	adds	r3, #24
 800c410:	4618      	mov	r0, r3
 800c412:	f7fe fd9b 	bl	800af4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c41a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c424:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c42a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c42e:	2200      	movs	r2, #0
 800c430:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c436:	2200      	movs	r2, #0
 800c438:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	3354      	adds	r3, #84	; 0x54
 800c440:	224c      	movs	r2, #76	; 0x4c
 800c442:	2100      	movs	r1, #0
 800c444:	4618      	mov	r0, r3
 800c446:	f002 ff0a 	bl	800f25e <memset>
 800c44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44c:	4a0c      	ldr	r2, [pc, #48]	; (800c480 <prvInitialiseNewTask+0x140>)
 800c44e:	659a      	str	r2, [r3, #88]	; 0x58
 800c450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c452:	4a0c      	ldr	r2, [pc, #48]	; (800c484 <prvInitialiseNewTask+0x144>)
 800c454:	65da      	str	r2, [r3, #92]	; 0x5c
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	4a0b      	ldr	r2, [pc, #44]	; (800c488 <prvInitialiseNewTask+0x148>)
 800c45a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	68f9      	ldr	r1, [r7, #12]
 800c460:	69b8      	ldr	r0, [r7, #24]
 800c462:	f001 fd67 	bl	800df34 <pxPortInitialiseStack>
 800c466:	4602      	mov	r2, r0
 800c468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d002      	beq.n	800c478 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c476:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c478:	bf00      	nop
 800c47a:	3720      	adds	r7, #32
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	20009580 	.word	0x20009580
 800c484:	200095e8 	.word	0x200095e8
 800c488:	20009650 	.word	0x20009650

0800c48c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c494:	f001 fe7e 	bl	800e194 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c498:	4b2d      	ldr	r3, [pc, #180]	; (800c550 <prvAddNewTaskToReadyList+0xc4>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	3301      	adds	r3, #1
 800c49e:	4a2c      	ldr	r2, [pc, #176]	; (800c550 <prvAddNewTaskToReadyList+0xc4>)
 800c4a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4a2:	4b2c      	ldr	r3, [pc, #176]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d109      	bne.n	800c4be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4aa:	4a2a      	ldr	r2, [pc, #168]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4b0:	4b27      	ldr	r3, [pc, #156]	; (800c550 <prvAddNewTaskToReadyList+0xc4>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d110      	bne.n	800c4da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c4b8:	f000 fc82 	bl	800cdc0 <prvInitialiseTaskLists>
 800c4bc:	e00d      	b.n	800c4da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c4be:	4b26      	ldr	r3, [pc, #152]	; (800c558 <prvAddNewTaskToReadyList+0xcc>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d109      	bne.n	800c4da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c4c6:	4b23      	ldr	r3, [pc, #140]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d802      	bhi.n	800c4da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4d4:	4a1f      	ldr	r2, [pc, #124]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4da:	4b20      	ldr	r3, [pc, #128]	; (800c55c <prvAddNewTaskToReadyList+0xd0>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	4a1e      	ldr	r2, [pc, #120]	; (800c55c <prvAddNewTaskToReadyList+0xd0>)
 800c4e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c4e4:	4b1d      	ldr	r3, [pc, #116]	; (800c55c <prvAddNewTaskToReadyList+0xd0>)
 800c4e6:	681a      	ldr	r2, [r3, #0]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4f0:	4b1b      	ldr	r3, [pc, #108]	; (800c560 <prvAddNewTaskToReadyList+0xd4>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d903      	bls.n	800c500 <prvAddNewTaskToReadyList+0x74>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fc:	4a18      	ldr	r2, [pc, #96]	; (800c560 <prvAddNewTaskToReadyList+0xd4>)
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c504:	4613      	mov	r3, r2
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	4413      	add	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4a15      	ldr	r2, [pc, #84]	; (800c564 <prvAddNewTaskToReadyList+0xd8>)
 800c50e:	441a      	add	r2, r3
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	3304      	adds	r3, #4
 800c514:	4619      	mov	r1, r3
 800c516:	4610      	mov	r0, r2
 800c518:	f7fe fd25 	bl	800af66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c51c:	f001 fe6a 	bl	800e1f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c520:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <prvAddNewTaskToReadyList+0xcc>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00e      	beq.n	800c546 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c528:	4b0a      	ldr	r3, [pc, #40]	; (800c554 <prvAddNewTaskToReadyList+0xc8>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c532:	429a      	cmp	r2, r3
 800c534:	d207      	bcs.n	800c546 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c536:	4b0c      	ldr	r3, [pc, #48]	; (800c568 <prvAddNewTaskToReadyList+0xdc>)
 800c538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53c:	601a      	str	r2, [r3, #0]
 800c53e:	f3bf 8f4f 	dsb	sy
 800c542:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c546:	bf00      	nop
 800c548:	3708      	adds	r7, #8
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}
 800c54e:	bf00      	nop
 800c550:	200014c0 	.word	0x200014c0
 800c554:	20000fec 	.word	0x20000fec
 800c558:	200014cc 	.word	0x200014cc
 800c55c:	200014dc 	.word	0x200014dc
 800c560:	200014c8 	.word	0x200014c8
 800c564:	20000ff0 	.word	0x20000ff0
 800c568:	e000ed04 	.word	0xe000ed04

0800c56c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b08a      	sub	sp, #40	; 0x28
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c576:	2300      	movs	r3, #0
 800c578:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d10a      	bne.n	800c596 <vTaskDelayUntil+0x2a>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	617b      	str	r3, [r7, #20]
}
 800c592:	bf00      	nop
 800c594:	e7fe      	b.n	800c594 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d10a      	bne.n	800c5b2 <vTaskDelayUntil+0x46>
	__asm volatile
 800c59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a0:	f383 8811 	msr	BASEPRI, r3
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	f3bf 8f4f 	dsb	sy
 800c5ac:	613b      	str	r3, [r7, #16]
}
 800c5ae:	bf00      	nop
 800c5b0:	e7fe      	b.n	800c5b0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800c5b2:	4b2a      	ldr	r3, [pc, #168]	; (800c65c <vTaskDelayUntil+0xf0>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d00a      	beq.n	800c5d0 <vTaskDelayUntil+0x64>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	60fb      	str	r3, [r7, #12]
}
 800c5cc:	bf00      	nop
 800c5ce:	e7fe      	b.n	800c5ce <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800c5d0:	f000 f8ba 	bl	800c748 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c5d4:	4b22      	ldr	r3, [pc, #136]	; (800c660 <vTaskDelayUntil+0xf4>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	683a      	ldr	r2, [r7, #0]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6a3a      	ldr	r2, [r7, #32]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d20b      	bcs.n	800c606 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	69fa      	ldr	r2, [r7, #28]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d211      	bcs.n	800c61c <vTaskDelayUntil+0xb0>
 800c5f8:	69fa      	ldr	r2, [r7, #28]
 800c5fa:	6a3b      	ldr	r3, [r7, #32]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	d90d      	bls.n	800c61c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c600:	2301      	movs	r3, #1
 800c602:	627b      	str	r3, [r7, #36]	; 0x24
 800c604:	e00a      	b.n	800c61c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	69fa      	ldr	r2, [r7, #28]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d303      	bcc.n	800c618 <vTaskDelayUntil+0xac>
 800c610:	69fa      	ldr	r2, [r7, #28]
 800c612:	6a3b      	ldr	r3, [r7, #32]
 800c614:	429a      	cmp	r2, r3
 800c616:	d901      	bls.n	800c61c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800c618:	2301      	movs	r3, #1
 800c61a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	69fa      	ldr	r2, [r7, #28]
 800c620:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c624:	2b00      	cmp	r3, #0
 800c626:	d006      	beq.n	800c636 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c628:	69fa      	ldr	r2, [r7, #28]
 800c62a:	6a3b      	ldr	r3, [r7, #32]
 800c62c:	1ad3      	subs	r3, r2, r3
 800c62e:	2100      	movs	r1, #0
 800c630:	4618      	mov	r0, r3
 800c632:	f001 f823 	bl	800d67c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c636:	f000 f895 	bl	800c764 <xTaskResumeAll>
 800c63a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d107      	bne.n	800c652 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800c642:	4b08      	ldr	r3, [pc, #32]	; (800c664 <vTaskDelayUntil+0xf8>)
 800c644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	f3bf 8f4f 	dsb	sy
 800c64e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c652:	bf00      	nop
 800c654:	3728      	adds	r7, #40	; 0x28
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	200014e8 	.word	0x200014e8
 800c660:	200014c4 	.word	0x200014c4
 800c664:	e000ed04 	.word	0xe000ed04

0800c668 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08a      	sub	sp, #40	; 0x28
 800c66c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c66e:	2300      	movs	r3, #0
 800c670:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c672:	2300      	movs	r3, #0
 800c674:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c676:	463a      	mov	r2, r7
 800c678:	1d39      	adds	r1, r7, #4
 800c67a:	f107 0308 	add.w	r3, r7, #8
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fe fc10 	bl	800aea4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c684:	6839      	ldr	r1, [r7, #0]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	9202      	str	r2, [sp, #8]
 800c68c:	9301      	str	r3, [sp, #4]
 800c68e:	2300      	movs	r3, #0
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	2300      	movs	r3, #0
 800c694:	460a      	mov	r2, r1
 800c696:	4924      	ldr	r1, [pc, #144]	; (800c728 <vTaskStartScheduler+0xc0>)
 800c698:	4824      	ldr	r0, [pc, #144]	; (800c72c <vTaskStartScheduler+0xc4>)
 800c69a:	f7ff fdaf 	bl	800c1fc <xTaskCreateStatic>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	4a23      	ldr	r2, [pc, #140]	; (800c730 <vTaskStartScheduler+0xc8>)
 800c6a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c6a4:	4b22      	ldr	r3, [pc, #136]	; (800c730 <vTaskStartScheduler+0xc8>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d002      	beq.n	800c6b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	617b      	str	r3, [r7, #20]
 800c6b0:	e001      	b.n	800c6b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d102      	bne.n	800c6c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c6bc:	f001 f832 	bl	800d724 <xTimerCreateTimerTask>
 800c6c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d11b      	bne.n	800c700 <vTaskStartScheduler+0x98>
	__asm volatile
 800c6c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6cc:	f383 8811 	msr	BASEPRI, r3
 800c6d0:	f3bf 8f6f 	isb	sy
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	613b      	str	r3, [r7, #16]
}
 800c6da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c6dc:	4b15      	ldr	r3, [pc, #84]	; (800c734 <vTaskStartScheduler+0xcc>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	3354      	adds	r3, #84	; 0x54
 800c6e2:	4a15      	ldr	r2, [pc, #84]	; (800c738 <vTaskStartScheduler+0xd0>)
 800c6e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c6e6:	4b15      	ldr	r3, [pc, #84]	; (800c73c <vTaskStartScheduler+0xd4>)
 800c6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c6ee:	4b14      	ldr	r3, [pc, #80]	; (800c740 <vTaskStartScheduler+0xd8>)
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6f4:	4b13      	ldr	r3, [pc, #76]	; (800c744 <vTaskStartScheduler+0xdc>)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c6fa:	f001 fca9 	bl	800e050 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c6fe:	e00e      	b.n	800c71e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c706:	d10a      	bne.n	800c71e <vTaskStartScheduler+0xb6>
	__asm volatile
 800c708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70c:	f383 8811 	msr	BASEPRI, r3
 800c710:	f3bf 8f6f 	isb	sy
 800c714:	f3bf 8f4f 	dsb	sy
 800c718:	60fb      	str	r3, [r7, #12]
}
 800c71a:	bf00      	nop
 800c71c:	e7fe      	b.n	800c71c <vTaskStartScheduler+0xb4>
}
 800c71e:	bf00      	nop
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	0801140c 	.word	0x0801140c
 800c72c:	0800cd91 	.word	0x0800cd91
 800c730:	200014e4 	.word	0x200014e4
 800c734:	20000fec 	.word	0x20000fec
 800c738:	20000070 	.word	0x20000070
 800c73c:	200014e0 	.word	0x200014e0
 800c740:	200014cc 	.word	0x200014cc
 800c744:	200014c4 	.word	0x200014c4

0800c748 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c748:	b480      	push	{r7}
 800c74a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c74c:	4b04      	ldr	r3, [pc, #16]	; (800c760 <vTaskSuspendAll+0x18>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3301      	adds	r3, #1
 800c752:	4a03      	ldr	r2, [pc, #12]	; (800c760 <vTaskSuspendAll+0x18>)
 800c754:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c756:	bf00      	nop
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	200014e8 	.word	0x200014e8

0800c764 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b084      	sub	sp, #16
 800c768:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c76e:	2300      	movs	r3, #0
 800c770:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c772:	4b42      	ldr	r3, [pc, #264]	; (800c87c <xTaskResumeAll+0x118>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d10a      	bne.n	800c790 <xTaskResumeAll+0x2c>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	603b      	str	r3, [r7, #0]
}
 800c78c:	bf00      	nop
 800c78e:	e7fe      	b.n	800c78e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c790:	f001 fd00 	bl	800e194 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c794:	4b39      	ldr	r3, [pc, #228]	; (800c87c <xTaskResumeAll+0x118>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3b01      	subs	r3, #1
 800c79a:	4a38      	ldr	r2, [pc, #224]	; (800c87c <xTaskResumeAll+0x118>)
 800c79c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c79e:	4b37      	ldr	r3, [pc, #220]	; (800c87c <xTaskResumeAll+0x118>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d162      	bne.n	800c86c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c7a6:	4b36      	ldr	r3, [pc, #216]	; (800c880 <xTaskResumeAll+0x11c>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d05e      	beq.n	800c86c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7ae:	e02f      	b.n	800c810 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7b0:	4b34      	ldr	r3, [pc, #208]	; (800c884 <xTaskResumeAll+0x120>)
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	68db      	ldr	r3, [r3, #12]
 800c7b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	3318      	adds	r3, #24
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fe fc2f 	bl	800b020 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	3304      	adds	r3, #4
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f7fe fc2a 	bl	800b020 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d0:	4b2d      	ldr	r3, [pc, #180]	; (800c888 <xTaskResumeAll+0x124>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d903      	bls.n	800c7e0 <xTaskResumeAll+0x7c>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7dc:	4a2a      	ldr	r2, [pc, #168]	; (800c888 <xTaskResumeAll+0x124>)
 800c7de:	6013      	str	r3, [r2, #0]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4a27      	ldr	r2, [pc, #156]	; (800c88c <xTaskResumeAll+0x128>)
 800c7ee:	441a      	add	r2, r3
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	3304      	adds	r3, #4
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	f7fe fbb5 	bl	800af66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c800:	4b23      	ldr	r3, [pc, #140]	; (800c890 <xTaskResumeAll+0x12c>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c806:	429a      	cmp	r2, r3
 800c808:	d302      	bcc.n	800c810 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c80a:	4b22      	ldr	r3, [pc, #136]	; (800c894 <xTaskResumeAll+0x130>)
 800c80c:	2201      	movs	r2, #1
 800c80e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c810:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <xTaskResumeAll+0x120>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d1cb      	bne.n	800c7b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d001      	beq.n	800c822 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c81e:	f000 fb71 	bl	800cf04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c822:	4b1d      	ldr	r3, [pc, #116]	; (800c898 <xTaskResumeAll+0x134>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d010      	beq.n	800c850 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c82e:	f000 f859 	bl	800c8e4 <xTaskIncrementTick>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c838:	4b16      	ldr	r3, [pc, #88]	; (800c894 <xTaskResumeAll+0x130>)
 800c83a:	2201      	movs	r2, #1
 800c83c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	3b01      	subs	r3, #1
 800c842:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d1f1      	bne.n	800c82e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c84a:	4b13      	ldr	r3, [pc, #76]	; (800c898 <xTaskResumeAll+0x134>)
 800c84c:	2200      	movs	r2, #0
 800c84e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c850:	4b10      	ldr	r3, [pc, #64]	; (800c894 <xTaskResumeAll+0x130>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d009      	beq.n	800c86c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c858:	2301      	movs	r3, #1
 800c85a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c85c:	4b0f      	ldr	r3, [pc, #60]	; (800c89c <xTaskResumeAll+0x138>)
 800c85e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c862:	601a      	str	r2, [r3, #0]
 800c864:	f3bf 8f4f 	dsb	sy
 800c868:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c86c:	f001 fcc2 	bl	800e1f4 <vPortExitCritical>

	return xAlreadyYielded;
 800c870:	68bb      	ldr	r3, [r7, #8]
}
 800c872:	4618      	mov	r0, r3
 800c874:	3710      	adds	r7, #16
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	200014e8 	.word	0x200014e8
 800c880:	200014c0 	.word	0x200014c0
 800c884:	20001480 	.word	0x20001480
 800c888:	200014c8 	.word	0x200014c8
 800c88c:	20000ff0 	.word	0x20000ff0
 800c890:	20000fec 	.word	0x20000fec
 800c894:	200014d4 	.word	0x200014d4
 800c898:	200014d0 	.word	0x200014d0
 800c89c:	e000ed04 	.word	0xe000ed04

0800c8a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b083      	sub	sp, #12
 800c8a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c8a6:	4b05      	ldr	r3, [pc, #20]	; (800c8bc <xTaskGetTickCount+0x1c>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c8ac:	687b      	ldr	r3, [r7, #4]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	370c      	adds	r7, #12
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	200014c4 	.word	0x200014c4

0800c8c0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b082      	sub	sp, #8
 800c8c4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8c6:	f001 fd47 	bl	800e358 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c8ce:	4b04      	ldr	r3, [pc, #16]	; (800c8e0 <xTaskGetTickCountFromISR+0x20>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8d4:	683b      	ldr	r3, [r7, #0]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	200014c4 	.word	0x200014c4

0800c8e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c8ee:	4b4f      	ldr	r3, [pc, #316]	; (800ca2c <xTaskIncrementTick+0x148>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	f040 808f 	bne.w	800ca16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c8f8:	4b4d      	ldr	r3, [pc, #308]	; (800ca30 <xTaskIncrementTick+0x14c>)
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c900:	4a4b      	ldr	r2, [pc, #300]	; (800ca30 <xTaskIncrementTick+0x14c>)
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d120      	bne.n	800c94e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c90c:	4b49      	ldr	r3, [pc, #292]	; (800ca34 <xTaskIncrementTick+0x150>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00a      	beq.n	800c92c <xTaskIncrementTick+0x48>
	__asm volatile
 800c916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c91a:	f383 8811 	msr	BASEPRI, r3
 800c91e:	f3bf 8f6f 	isb	sy
 800c922:	f3bf 8f4f 	dsb	sy
 800c926:	603b      	str	r3, [r7, #0]
}
 800c928:	bf00      	nop
 800c92a:	e7fe      	b.n	800c92a <xTaskIncrementTick+0x46>
 800c92c:	4b41      	ldr	r3, [pc, #260]	; (800ca34 <xTaskIncrementTick+0x150>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	60fb      	str	r3, [r7, #12]
 800c932:	4b41      	ldr	r3, [pc, #260]	; (800ca38 <xTaskIncrementTick+0x154>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a3f      	ldr	r2, [pc, #252]	; (800ca34 <xTaskIncrementTick+0x150>)
 800c938:	6013      	str	r3, [r2, #0]
 800c93a:	4a3f      	ldr	r2, [pc, #252]	; (800ca38 <xTaskIncrementTick+0x154>)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6013      	str	r3, [r2, #0]
 800c940:	4b3e      	ldr	r3, [pc, #248]	; (800ca3c <xTaskIncrementTick+0x158>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3301      	adds	r3, #1
 800c946:	4a3d      	ldr	r2, [pc, #244]	; (800ca3c <xTaskIncrementTick+0x158>)
 800c948:	6013      	str	r3, [r2, #0]
 800c94a:	f000 fadb 	bl	800cf04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c94e:	4b3c      	ldr	r3, [pc, #240]	; (800ca40 <xTaskIncrementTick+0x15c>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	429a      	cmp	r2, r3
 800c956:	d349      	bcc.n	800c9ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c958:	4b36      	ldr	r3, [pc, #216]	; (800ca34 <xTaskIncrementTick+0x150>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d104      	bne.n	800c96c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c962:	4b37      	ldr	r3, [pc, #220]	; (800ca40 <xTaskIncrementTick+0x15c>)
 800c964:	f04f 32ff 	mov.w	r2, #4294967295
 800c968:	601a      	str	r2, [r3, #0]
					break;
 800c96a:	e03f      	b.n	800c9ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c96c:	4b31      	ldr	r3, [pc, #196]	; (800ca34 <xTaskIncrementTick+0x150>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	429a      	cmp	r2, r3
 800c982:	d203      	bcs.n	800c98c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c984:	4a2e      	ldr	r2, [pc, #184]	; (800ca40 <xTaskIncrementTick+0x15c>)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c98a:	e02f      	b.n	800c9ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	3304      	adds	r3, #4
 800c990:	4618      	mov	r0, r3
 800c992:	f7fe fb45 	bl	800b020 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d004      	beq.n	800c9a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	3318      	adds	r3, #24
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe fb3c 	bl	800b020 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ac:	4b25      	ldr	r3, [pc, #148]	; (800ca44 <xTaskIncrementTick+0x160>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d903      	bls.n	800c9bc <xTaskIncrementTick+0xd8>
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b8:	4a22      	ldr	r2, [pc, #136]	; (800ca44 <xTaskIncrementTick+0x160>)
 800c9ba:	6013      	str	r3, [r2, #0]
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	4413      	add	r3, r2
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	4a1f      	ldr	r2, [pc, #124]	; (800ca48 <xTaskIncrementTick+0x164>)
 800c9ca:	441a      	add	r2, r3
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	3304      	adds	r3, #4
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	4610      	mov	r0, r2
 800c9d4:	f7fe fac7 	bl	800af66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9dc:	4b1b      	ldr	r3, [pc, #108]	; (800ca4c <xTaskIncrementTick+0x168>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d3b8      	bcc.n	800c958 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9ea:	e7b5      	b.n	800c958 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c9ec:	4b17      	ldr	r3, [pc, #92]	; (800ca4c <xTaskIncrementTick+0x168>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9f2:	4915      	ldr	r1, [pc, #84]	; (800ca48 <xTaskIncrementTick+0x164>)
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	009b      	lsls	r3, r3, #2
 800c9f8:	4413      	add	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	440b      	add	r3, r1
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b01      	cmp	r3, #1
 800ca02:	d901      	bls.n	800ca08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ca04:	2301      	movs	r3, #1
 800ca06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ca08:	4b11      	ldr	r3, [pc, #68]	; (800ca50 <xTaskIncrementTick+0x16c>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d007      	beq.n	800ca20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ca10:	2301      	movs	r3, #1
 800ca12:	617b      	str	r3, [r7, #20]
 800ca14:	e004      	b.n	800ca20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ca16:	4b0f      	ldr	r3, [pc, #60]	; (800ca54 <xTaskIncrementTick+0x170>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	4a0d      	ldr	r2, [pc, #52]	; (800ca54 <xTaskIncrementTick+0x170>)
 800ca1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ca20:	697b      	ldr	r3, [r7, #20]
}
 800ca22:	4618      	mov	r0, r3
 800ca24:	3718      	adds	r7, #24
 800ca26:	46bd      	mov	sp, r7
 800ca28:	bd80      	pop	{r7, pc}
 800ca2a:	bf00      	nop
 800ca2c:	200014e8 	.word	0x200014e8
 800ca30:	200014c4 	.word	0x200014c4
 800ca34:	20001478 	.word	0x20001478
 800ca38:	2000147c 	.word	0x2000147c
 800ca3c:	200014d8 	.word	0x200014d8
 800ca40:	200014e0 	.word	0x200014e0
 800ca44:	200014c8 	.word	0x200014c8
 800ca48:	20000ff0 	.word	0x20000ff0
 800ca4c:	20000fec 	.word	0x20000fec
 800ca50:	200014d4 	.word	0x200014d4
 800ca54:	200014d0 	.word	0x200014d0

0800ca58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca5e:	4b2a      	ldr	r3, [pc, #168]	; (800cb08 <vTaskSwitchContext+0xb0>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d003      	beq.n	800ca6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ca66:	4b29      	ldr	r3, [pc, #164]	; (800cb0c <vTaskSwitchContext+0xb4>)
 800ca68:	2201      	movs	r2, #1
 800ca6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ca6c:	e046      	b.n	800cafc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ca6e:	4b27      	ldr	r3, [pc, #156]	; (800cb0c <vTaskSwitchContext+0xb4>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca74:	4b26      	ldr	r3, [pc, #152]	; (800cb10 <vTaskSwitchContext+0xb8>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	60fb      	str	r3, [r7, #12]
 800ca7a:	e010      	b.n	800ca9e <vTaskSwitchContext+0x46>
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10a      	bne.n	800ca98 <vTaskSwitchContext+0x40>
	__asm volatile
 800ca82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca86:	f383 8811 	msr	BASEPRI, r3
 800ca8a:	f3bf 8f6f 	isb	sy
 800ca8e:	f3bf 8f4f 	dsb	sy
 800ca92:	607b      	str	r3, [r7, #4]
}
 800ca94:	bf00      	nop
 800ca96:	e7fe      	b.n	800ca96 <vTaskSwitchContext+0x3e>
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	491d      	ldr	r1, [pc, #116]	; (800cb14 <vTaskSwitchContext+0xbc>)
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	4613      	mov	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	440b      	add	r3, r1
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0e4      	beq.n	800ca7c <vTaskSwitchContext+0x24>
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	4613      	mov	r3, r2
 800cab6:	009b      	lsls	r3, r3, #2
 800cab8:	4413      	add	r3, r2
 800caba:	009b      	lsls	r3, r3, #2
 800cabc:	4a15      	ldr	r2, [pc, #84]	; (800cb14 <vTaskSwitchContext+0xbc>)
 800cabe:	4413      	add	r3, r2
 800cac0:	60bb      	str	r3, [r7, #8]
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	605a      	str	r2, [r3, #4]
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	685a      	ldr	r2, [r3, #4]
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	3308      	adds	r3, #8
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d104      	bne.n	800cae2 <vTaskSwitchContext+0x8a>
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	685b      	ldr	r3, [r3, #4]
 800cadc:	685a      	ldr	r2, [r3, #4]
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	605a      	str	r2, [r3, #4]
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	68db      	ldr	r3, [r3, #12]
 800cae8:	4a0b      	ldr	r2, [pc, #44]	; (800cb18 <vTaskSwitchContext+0xc0>)
 800caea:	6013      	str	r3, [r2, #0]
 800caec:	4a08      	ldr	r2, [pc, #32]	; (800cb10 <vTaskSwitchContext+0xb8>)
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800caf2:	4b09      	ldr	r3, [pc, #36]	; (800cb18 <vTaskSwitchContext+0xc0>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	3354      	adds	r3, #84	; 0x54
 800caf8:	4a08      	ldr	r2, [pc, #32]	; (800cb1c <vTaskSwitchContext+0xc4>)
 800cafa:	6013      	str	r3, [r2, #0]
}
 800cafc:	bf00      	nop
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr
 800cb08:	200014e8 	.word	0x200014e8
 800cb0c:	200014d4 	.word	0x200014d4
 800cb10:	200014c8 	.word	0x200014c8
 800cb14:	20000ff0 	.word	0x20000ff0
 800cb18:	20000fec 	.word	0x20000fec
 800cb1c:	20000070 	.word	0x20000070

0800cb20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d10a      	bne.n	800cb46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cb30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb34:	f383 8811 	msr	BASEPRI, r3
 800cb38:	f3bf 8f6f 	isb	sy
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	60fb      	str	r3, [r7, #12]
}
 800cb42:	bf00      	nop
 800cb44:	e7fe      	b.n	800cb44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb46:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <vTaskPlaceOnEventList+0x44>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	3318      	adds	r3, #24
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7fe fa2d 	bl	800afae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb54:	2101      	movs	r1, #1
 800cb56:	6838      	ldr	r0, [r7, #0]
 800cb58:	f000 fd90 	bl	800d67c <prvAddCurrentTaskToDelayedList>
}
 800cb5c:	bf00      	nop
 800cb5e:	3710      	adds	r7, #16
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	20000fec 	.word	0x20000fec

0800cb68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10a      	bne.n	800cb90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800cb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb7e:	f383 8811 	msr	BASEPRI, r3
 800cb82:	f3bf 8f6f 	isb	sy
 800cb86:	f3bf 8f4f 	dsb	sy
 800cb8a:	617b      	str	r3, [r7, #20]
}
 800cb8c:	bf00      	nop
 800cb8e:	e7fe      	b.n	800cb8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cb90:	4b0a      	ldr	r3, [pc, #40]	; (800cbbc <vTaskPlaceOnEventListRestricted+0x54>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	3318      	adds	r3, #24
 800cb96:	4619      	mov	r1, r3
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7fe f9e4 	bl	800af66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d002      	beq.n	800cbaa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800cba4:	f04f 33ff 	mov.w	r3, #4294967295
 800cba8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	68b8      	ldr	r0, [r7, #8]
 800cbae:	f000 fd65 	bl	800d67c <prvAddCurrentTaskToDelayedList>
	}
 800cbb2:	bf00      	nop
 800cbb4:	3718      	adds	r7, #24
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	20000fec 	.word	0x20000fec

0800cbc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	68db      	ldr	r3, [r3, #12]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cbd0:	693b      	ldr	r3, [r7, #16]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d10a      	bne.n	800cbec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cbd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	60fb      	str	r3, [r7, #12]
}
 800cbe8:	bf00      	nop
 800cbea:	e7fe      	b.n	800cbea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cbec:	693b      	ldr	r3, [r7, #16]
 800cbee:	3318      	adds	r3, #24
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fe fa15 	bl	800b020 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbf6:	4b1e      	ldr	r3, [pc, #120]	; (800cc70 <xTaskRemoveFromEventList+0xb0>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d11d      	bne.n	800cc3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	3304      	adds	r3, #4
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fe fa0c 	bl	800b020 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc0c:	4b19      	ldr	r3, [pc, #100]	; (800cc74 <xTaskRemoveFromEventList+0xb4>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d903      	bls.n	800cc1c <xTaskRemoveFromEventList+0x5c>
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc18:	4a16      	ldr	r2, [pc, #88]	; (800cc74 <xTaskRemoveFromEventList+0xb4>)
 800cc1a:	6013      	str	r3, [r2, #0]
 800cc1c:	693b      	ldr	r3, [r7, #16]
 800cc1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc20:	4613      	mov	r3, r2
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	4413      	add	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4a13      	ldr	r2, [pc, #76]	; (800cc78 <xTaskRemoveFromEventList+0xb8>)
 800cc2a:	441a      	add	r2, r3
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	3304      	adds	r3, #4
 800cc30:	4619      	mov	r1, r3
 800cc32:	4610      	mov	r0, r2
 800cc34:	f7fe f997 	bl	800af66 <vListInsertEnd>
 800cc38:	e005      	b.n	800cc46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	3318      	adds	r3, #24
 800cc3e:	4619      	mov	r1, r3
 800cc40:	480e      	ldr	r0, [pc, #56]	; (800cc7c <xTaskRemoveFromEventList+0xbc>)
 800cc42:	f7fe f990 	bl	800af66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <xTaskRemoveFromEventList+0xc0>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d905      	bls.n	800cc60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc54:	2301      	movs	r3, #1
 800cc56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc58:	4b0a      	ldr	r3, [pc, #40]	; (800cc84 <xTaskRemoveFromEventList+0xc4>)
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	e001      	b.n	800cc64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cc60:	2300      	movs	r3, #0
 800cc62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc64:	697b      	ldr	r3, [r7, #20]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3718      	adds	r7, #24
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	200014e8 	.word	0x200014e8
 800cc74:	200014c8 	.word	0x200014c8
 800cc78:	20000ff0 	.word	0x20000ff0
 800cc7c:	20001480 	.word	0x20001480
 800cc80:	20000fec 	.word	0x20000fec
 800cc84:	200014d4 	.word	0x200014d4

0800cc88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cc90:	4b06      	ldr	r3, [pc, #24]	; (800ccac <vTaskInternalSetTimeOutState+0x24>)
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cc98:	4b05      	ldr	r3, [pc, #20]	; (800ccb0 <vTaskInternalSetTimeOutState+0x28>)
 800cc9a:	681a      	ldr	r2, [r3, #0]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	605a      	str	r2, [r3, #4]
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	200014d8 	.word	0x200014d8
 800ccb0:	200014c4 	.word	0x200014c4

0800ccb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b088      	sub	sp, #32
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	613b      	str	r3, [r7, #16]
}
 800ccd6:	bf00      	nop
 800ccd8:	e7fe      	b.n	800ccd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d10a      	bne.n	800ccf6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce4:	f383 8811 	msr	BASEPRI, r3
 800cce8:	f3bf 8f6f 	isb	sy
 800ccec:	f3bf 8f4f 	dsb	sy
 800ccf0:	60fb      	str	r3, [r7, #12]
}
 800ccf2:	bf00      	nop
 800ccf4:	e7fe      	b.n	800ccf4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ccf6:	f001 fa4d 	bl	800e194 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ccfa:	4b1d      	ldr	r3, [pc, #116]	; (800cd70 <xTaskCheckForTimeOut+0xbc>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	69ba      	ldr	r2, [r7, #24]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd12:	d102      	bne.n	800cd1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd14:	2300      	movs	r3, #0
 800cd16:	61fb      	str	r3, [r7, #28]
 800cd18:	e023      	b.n	800cd62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	681a      	ldr	r2, [r3, #0]
 800cd1e:	4b15      	ldr	r3, [pc, #84]	; (800cd74 <xTaskCheckForTimeOut+0xc0>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d007      	beq.n	800cd36 <xTaskCheckForTimeOut+0x82>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	69ba      	ldr	r2, [r7, #24]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d302      	bcc.n	800cd36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd30:	2301      	movs	r3, #1
 800cd32:	61fb      	str	r3, [r7, #28]
 800cd34:	e015      	b.n	800cd62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	697a      	ldr	r2, [r7, #20]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d20b      	bcs.n	800cd58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	1ad2      	subs	r2, r2, r3
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f7ff ff9b 	bl	800cc88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd52:	2300      	movs	r3, #0
 800cd54:	61fb      	str	r3, [r7, #28]
 800cd56:	e004      	b.n	800cd62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd62:	f001 fa47 	bl	800e1f4 <vPortExitCritical>

	return xReturn;
 800cd66:	69fb      	ldr	r3, [r7, #28]
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3720      	adds	r7, #32
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}
 800cd70:	200014c4 	.word	0x200014c4
 800cd74:	200014d8 	.word	0x200014d8

0800cd78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cd78:	b480      	push	{r7}
 800cd7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cd7c:	4b03      	ldr	r3, [pc, #12]	; (800cd8c <vTaskMissedYield+0x14>)
 800cd7e:	2201      	movs	r2, #1
 800cd80:	601a      	str	r2, [r3, #0]
}
 800cd82:	bf00      	nop
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	200014d4 	.word	0x200014d4

0800cd90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cd98:	f000 f852 	bl	800ce40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cd9c:	4b06      	ldr	r3, [pc, #24]	; (800cdb8 <prvIdleTask+0x28>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d9f9      	bls.n	800cd98 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cda4:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <prvIdleTask+0x2c>)
 800cda6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cdb4:	e7f0      	b.n	800cd98 <prvIdleTask+0x8>
 800cdb6:	bf00      	nop
 800cdb8:	20000ff0 	.word	0x20000ff0
 800cdbc:	e000ed04 	.word	0xe000ed04

0800cdc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	607b      	str	r3, [r7, #4]
 800cdca:	e00c      	b.n	800cde6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	009b      	lsls	r3, r3, #2
 800cdd2:	4413      	add	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4a12      	ldr	r2, [pc, #72]	; (800ce20 <prvInitialiseTaskLists+0x60>)
 800cdd8:	4413      	add	r3, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe f896 	bl	800af0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	3301      	adds	r3, #1
 800cde4:	607b      	str	r3, [r7, #4]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b37      	cmp	r3, #55	; 0x37
 800cdea:	d9ef      	bls.n	800cdcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cdec:	480d      	ldr	r0, [pc, #52]	; (800ce24 <prvInitialiseTaskLists+0x64>)
 800cdee:	f7fe f88d 	bl	800af0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cdf2:	480d      	ldr	r0, [pc, #52]	; (800ce28 <prvInitialiseTaskLists+0x68>)
 800cdf4:	f7fe f88a 	bl	800af0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cdf8:	480c      	ldr	r0, [pc, #48]	; (800ce2c <prvInitialiseTaskLists+0x6c>)
 800cdfa:	f7fe f887 	bl	800af0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cdfe:	480c      	ldr	r0, [pc, #48]	; (800ce30 <prvInitialiseTaskLists+0x70>)
 800ce00:	f7fe f884 	bl	800af0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce04:	480b      	ldr	r0, [pc, #44]	; (800ce34 <prvInitialiseTaskLists+0x74>)
 800ce06:	f7fe f881 	bl	800af0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce0a:	4b0b      	ldr	r3, [pc, #44]	; (800ce38 <prvInitialiseTaskLists+0x78>)
 800ce0c:	4a05      	ldr	r2, [pc, #20]	; (800ce24 <prvInitialiseTaskLists+0x64>)
 800ce0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce10:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <prvInitialiseTaskLists+0x7c>)
 800ce12:	4a05      	ldr	r2, [pc, #20]	; (800ce28 <prvInitialiseTaskLists+0x68>)
 800ce14:	601a      	str	r2, [r3, #0]
}
 800ce16:	bf00      	nop
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20000ff0 	.word	0x20000ff0
 800ce24:	20001450 	.word	0x20001450
 800ce28:	20001464 	.word	0x20001464
 800ce2c:	20001480 	.word	0x20001480
 800ce30:	20001494 	.word	0x20001494
 800ce34:	200014ac 	.word	0x200014ac
 800ce38:	20001478 	.word	0x20001478
 800ce3c:	2000147c 	.word	0x2000147c

0800ce40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b082      	sub	sp, #8
 800ce44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce46:	e019      	b.n	800ce7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce48:	f001 f9a4 	bl	800e194 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce4c:	4b10      	ldr	r3, [pc, #64]	; (800ce90 <prvCheckTasksWaitingTermination+0x50>)
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	68db      	ldr	r3, [r3, #12]
 800ce52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3304      	adds	r3, #4
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fe f8e1 	bl	800b020 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce5e:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <prvCheckTasksWaitingTermination+0x54>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	3b01      	subs	r3, #1
 800ce64:	4a0b      	ldr	r2, [pc, #44]	; (800ce94 <prvCheckTasksWaitingTermination+0x54>)
 800ce66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ce68:	4b0b      	ldr	r3, [pc, #44]	; (800ce98 <prvCheckTasksWaitingTermination+0x58>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	3b01      	subs	r3, #1
 800ce6e:	4a0a      	ldr	r2, [pc, #40]	; (800ce98 <prvCheckTasksWaitingTermination+0x58>)
 800ce70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ce72:	f001 f9bf 	bl	800e1f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 f810 	bl	800ce9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce7c:	4b06      	ldr	r3, [pc, #24]	; (800ce98 <prvCheckTasksWaitingTermination+0x58>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d1e1      	bne.n	800ce48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ce84:	bf00      	nop
 800ce86:	bf00      	nop
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	20001494 	.word	0x20001494
 800ce94:	200014c0 	.word	0x200014c0
 800ce98:	200014a8 	.word	0x200014a8

0800ce9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b084      	sub	sp, #16
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	3354      	adds	r3, #84	; 0x54
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f002 f9f5 	bl	800f298 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d108      	bne.n	800ceca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cebc:	4618      	mov	r0, r3
 800cebe:	f001 fb57 	bl	800e570 <vPortFree>
				vPortFree( pxTCB );
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f001 fb54 	bl	800e570 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cec8:	e018      	b.n	800cefc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d103      	bne.n	800cedc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f001 fb4b 	bl	800e570 <vPortFree>
	}
 800ceda:	e00f      	b.n	800cefc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800cee2:	2b02      	cmp	r3, #2
 800cee4:	d00a      	beq.n	800cefc <prvDeleteTCB+0x60>
	__asm volatile
 800cee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceea:	f383 8811 	msr	BASEPRI, r3
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	60fb      	str	r3, [r7, #12]
}
 800cef8:	bf00      	nop
 800cefa:	e7fe      	b.n	800cefa <prvDeleteTCB+0x5e>
	}
 800cefc:	bf00      	nop
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf0a:	4b0c      	ldr	r3, [pc, #48]	; (800cf3c <prvResetNextTaskUnblockTime+0x38>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d104      	bne.n	800cf1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf14:	4b0a      	ldr	r3, [pc, #40]	; (800cf40 <prvResetNextTaskUnblockTime+0x3c>)
 800cf16:	f04f 32ff 	mov.w	r2, #4294967295
 800cf1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf1c:	e008      	b.n	800cf30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf1e:	4b07      	ldr	r3, [pc, #28]	; (800cf3c <prvResetNextTaskUnblockTime+0x38>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685b      	ldr	r3, [r3, #4]
 800cf2c:	4a04      	ldr	r2, [pc, #16]	; (800cf40 <prvResetNextTaskUnblockTime+0x3c>)
 800cf2e:	6013      	str	r3, [r2, #0]
}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	20001478 	.word	0x20001478
 800cf40:	200014e0 	.word	0x200014e0

0800cf44 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800cf4a:	4b05      	ldr	r3, [pc, #20]	; (800cf60 <xTaskGetCurrentTaskHandle+0x1c>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800cf50:	687b      	ldr	r3, [r7, #4]
	}
 800cf52:	4618      	mov	r0, r3
 800cf54:	370c      	adds	r7, #12
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	20000fec 	.word	0x20000fec

0800cf64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf6a:	4b0b      	ldr	r3, [pc, #44]	; (800cf98 <xTaskGetSchedulerState+0x34>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d102      	bne.n	800cf78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf72:	2301      	movs	r3, #1
 800cf74:	607b      	str	r3, [r7, #4]
 800cf76:	e008      	b.n	800cf8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf78:	4b08      	ldr	r3, [pc, #32]	; (800cf9c <xTaskGetSchedulerState+0x38>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d102      	bne.n	800cf86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf80:	2302      	movs	r3, #2
 800cf82:	607b      	str	r3, [r7, #4]
 800cf84:	e001      	b.n	800cf8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf86:	2300      	movs	r3, #0
 800cf88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cf8a:	687b      	ldr	r3, [r7, #4]
	}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr
 800cf98:	200014cc 	.word	0x200014cc
 800cf9c:	200014e8 	.word	0x200014e8

0800cfa0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cfac:	2300      	movs	r3, #0
 800cfae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d051      	beq.n	800d05a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfba:	4b2a      	ldr	r3, [pc, #168]	; (800d064 <xTaskPriorityInherit+0xc4>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d241      	bcs.n	800d048 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	699b      	ldr	r3, [r3, #24]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	db06      	blt.n	800cfda <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfcc:	4b25      	ldr	r3, [pc, #148]	; (800d064 <xTaskPriorityInherit+0xc4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	6959      	ldr	r1, [r3, #20]
 800cfde:	68bb      	ldr	r3, [r7, #8]
 800cfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	4a1f      	ldr	r2, [pc, #124]	; (800d068 <xTaskPriorityInherit+0xc8>)
 800cfec:	4413      	add	r3, r2
 800cfee:	4299      	cmp	r1, r3
 800cff0:	d122      	bne.n	800d038 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	3304      	adds	r3, #4
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7fe f812 	bl	800b020 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cffc:	4b19      	ldr	r3, [pc, #100]	; (800d064 <xTaskPriorityInherit+0xc4>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d00a:	4b18      	ldr	r3, [pc, #96]	; (800d06c <xTaskPriorityInherit+0xcc>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d903      	bls.n	800d01a <xTaskPriorityInherit+0x7a>
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d016:	4a15      	ldr	r2, [pc, #84]	; (800d06c <xTaskPriorityInherit+0xcc>)
 800d018:	6013      	str	r3, [r2, #0]
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d01e:	4613      	mov	r3, r2
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4413      	add	r3, r2
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	4a10      	ldr	r2, [pc, #64]	; (800d068 <xTaskPriorityInherit+0xc8>)
 800d028:	441a      	add	r2, r3
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	3304      	adds	r3, #4
 800d02e:	4619      	mov	r1, r3
 800d030:	4610      	mov	r0, r2
 800d032:	f7fd ff98 	bl	800af66 <vListInsertEnd>
 800d036:	e004      	b.n	800d042 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d038:	4b0a      	ldr	r3, [pc, #40]	; (800d064 <xTaskPriorityInherit+0xc4>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d042:	2301      	movs	r3, #1
 800d044:	60fb      	str	r3, [r7, #12]
 800d046:	e008      	b.n	800d05a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d04c:	4b05      	ldr	r3, [pc, #20]	; (800d064 <xTaskPriorityInherit+0xc4>)
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d052:	429a      	cmp	r2, r3
 800d054:	d201      	bcs.n	800d05a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d056:	2301      	movs	r3, #1
 800d058:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d05a:	68fb      	ldr	r3, [r7, #12]
	}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	20000fec 	.word	0x20000fec
 800d068:	20000ff0 	.word	0x20000ff0
 800d06c:	200014c8 	.word	0x200014c8

0800d070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d070:	b580      	push	{r7, lr}
 800d072:	b086      	sub	sp, #24
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d07c:	2300      	movs	r3, #0
 800d07e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d056      	beq.n	800d134 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d086:	4b2e      	ldr	r3, [pc, #184]	; (800d140 <xTaskPriorityDisinherit+0xd0>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d00a      	beq.n	800d0a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	60fb      	str	r3, [r7, #12]
}
 800d0a2:	bf00      	nop
 800d0a4:	e7fe      	b.n	800d0a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10a      	bne.n	800d0c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	60bb      	str	r3, [r7, #8]
}
 800d0c0:	bf00      	nop
 800d0c2:	e7fe      	b.n	800d0c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0c8:	1e5a      	subs	r2, r3, #1
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d02c      	beq.n	800d134 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d128      	bne.n	800d134 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d0e2:	693b      	ldr	r3, [r7, #16]
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f7fd ff9a 	bl	800b020 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d104:	4b0f      	ldr	r3, [pc, #60]	; (800d144 <xTaskPriorityDisinherit+0xd4>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d903      	bls.n	800d114 <xTaskPriorityDisinherit+0xa4>
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d110:	4a0c      	ldr	r2, [pc, #48]	; (800d144 <xTaskPriorityDisinherit+0xd4>)
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d118:	4613      	mov	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4413      	add	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4a09      	ldr	r2, [pc, #36]	; (800d148 <xTaskPriorityDisinherit+0xd8>)
 800d122:	441a      	add	r2, r3
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	3304      	adds	r3, #4
 800d128:	4619      	mov	r1, r3
 800d12a:	4610      	mov	r0, r2
 800d12c:	f7fd ff1b 	bl	800af66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d130:	2301      	movs	r3, #1
 800d132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d134:	697b      	ldr	r3, [r7, #20]
	}
 800d136:	4618      	mov	r0, r3
 800d138:	3718      	adds	r7, #24
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20000fec 	.word	0x20000fec
 800d144:	200014c8 	.word	0x200014c8
 800d148:	20000ff0 	.word	0x20000ff0

0800d14c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b088      	sub	sp, #32
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d15a:	2301      	movs	r3, #1
 800d15c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d06a      	beq.n	800d23a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d164:	69bb      	ldr	r3, [r7, #24]
 800d166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10a      	bne.n	800d182 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d170:	f383 8811 	msr	BASEPRI, r3
 800d174:	f3bf 8f6f 	isb	sy
 800d178:	f3bf 8f4f 	dsb	sy
 800d17c:	60fb      	str	r3, [r7, #12]
}
 800d17e:	bf00      	nop
 800d180:	e7fe      	b.n	800d180 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d186:	683a      	ldr	r2, [r7, #0]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d902      	bls.n	800d192 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	61fb      	str	r3, [r7, #28]
 800d190:	e002      	b.n	800d198 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d196:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19c:	69fa      	ldr	r2, [r7, #28]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d04b      	beq.n	800d23a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1a6:	697a      	ldr	r2, [r7, #20]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d146      	bne.n	800d23a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d1ac:	4b25      	ldr	r3, [pc, #148]	; (800d244 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	69ba      	ldr	r2, [r7, #24]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d10a      	bne.n	800d1cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ba:	f383 8811 	msr	BASEPRI, r3
 800d1be:	f3bf 8f6f 	isb	sy
 800d1c2:	f3bf 8f4f 	dsb	sy
 800d1c6:	60bb      	str	r3, [r7, #8]
}
 800d1c8:	bf00      	nop
 800d1ca:	e7fe      	b.n	800d1ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	69fa      	ldr	r2, [r7, #28]
 800d1d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1d8:	69bb      	ldr	r3, [r7, #24]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	db04      	blt.n	800d1ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1e0:	69fb      	ldr	r3, [r7, #28]
 800d1e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d1ea:	69bb      	ldr	r3, [r7, #24]
 800d1ec:	6959      	ldr	r1, [r3, #20]
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	4a13      	ldr	r2, [pc, #76]	; (800d248 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d1fa:	4413      	add	r3, r2
 800d1fc:	4299      	cmp	r1, r3
 800d1fe:	d11c      	bne.n	800d23a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d200:	69bb      	ldr	r3, [r7, #24]
 800d202:	3304      	adds	r3, #4
 800d204:	4618      	mov	r0, r3
 800d206:	f7fd ff0b 	bl	800b020 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d20a:	69bb      	ldr	r3, [r7, #24]
 800d20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d20e:	4b0f      	ldr	r3, [pc, #60]	; (800d24c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	429a      	cmp	r2, r3
 800d214:	d903      	bls.n	800d21e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d21a:	4a0c      	ldr	r2, [pc, #48]	; (800d24c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d222:	4613      	mov	r3, r2
 800d224:	009b      	lsls	r3, r3, #2
 800d226:	4413      	add	r3, r2
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	4a07      	ldr	r2, [pc, #28]	; (800d248 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800d22c:	441a      	add	r2, r3
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	3304      	adds	r3, #4
 800d232:	4619      	mov	r1, r3
 800d234:	4610      	mov	r0, r2
 800d236:	f7fd fe96 	bl	800af66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d23a:	bf00      	nop
 800d23c:	3720      	adds	r7, #32
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	20000fec 	.word	0x20000fec
 800d248:	20000ff0 	.word	0x20000ff0
 800d24c:	200014c8 	.word	0x200014c8

0800d250 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d250:	b480      	push	{r7}
 800d252:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d254:	4b07      	ldr	r3, [pc, #28]	; (800d274 <pvTaskIncrementMutexHeldCount+0x24>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d004      	beq.n	800d266 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d25c:	4b05      	ldr	r3, [pc, #20]	; (800d274 <pvTaskIncrementMutexHeldCount+0x24>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d262:	3201      	adds	r2, #1
 800d264:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d266:	4b03      	ldr	r3, [pc, #12]	; (800d274 <pvTaskIncrementMutexHeldCount+0x24>)
 800d268:	681b      	ldr	r3, [r3, #0]
	}
 800d26a:	4618      	mov	r0, r3
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	20000fec 	.word	0x20000fec

0800d278 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	60f8      	str	r0, [r7, #12]
 800d280:	60b9      	str	r1, [r7, #8]
 800d282:	607a      	str	r2, [r7, #4]
 800d284:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800d286:	f000 ff85 	bl	800e194 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d28a:	4b29      	ldr	r3, [pc, #164]	; (800d330 <xTaskNotifyWait+0xb8>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d292:	b2db      	uxtb	r3, r3
 800d294:	2b02      	cmp	r3, #2
 800d296:	d01c      	beq.n	800d2d2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800d298:	4b25      	ldr	r3, [pc, #148]	; (800d330 <xTaskNotifyWait+0xb8>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	43d2      	mvns	r2, r2
 800d2a4:	400a      	ands	r2, r1
 800d2a6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d2aa:	4b21      	ldr	r3, [pc, #132]	; (800d330 <xTaskNotifyWait+0xb8>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00b      	beq.n	800d2d2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d2ba:	2101      	movs	r1, #1
 800d2bc:	6838      	ldr	r0, [r7, #0]
 800d2be:	f000 f9dd 	bl	800d67c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d2c2:	4b1c      	ldr	r3, [pc, #112]	; (800d334 <xTaskNotifyWait+0xbc>)
 800d2c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2c8:	601a      	str	r2, [r3, #0]
 800d2ca:	f3bf 8f4f 	dsb	sy
 800d2ce:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d2d2:	f000 ff8f 	bl	800e1f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800d2d6:	f000 ff5d 	bl	800e194 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d005      	beq.n	800d2ec <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800d2e0:	4b13      	ldr	r3, [pc, #76]	; (800d330 <xTaskNotifyWait+0xb8>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800d2ec:	4b10      	ldr	r3, [pc, #64]	; (800d330 <xTaskNotifyWait+0xb8>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	d002      	beq.n	800d300 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	617b      	str	r3, [r7, #20]
 800d2fe:	e00a      	b.n	800d316 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800d300:	4b0b      	ldr	r3, [pc, #44]	; (800d330 <xTaskNotifyWait+0xb8>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800d308:	68ba      	ldr	r2, [r7, #8]
 800d30a:	43d2      	mvns	r2, r2
 800d30c:	400a      	ands	r2, r1
 800d30e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 800d312:	2301      	movs	r3, #1
 800d314:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d316:	4b06      	ldr	r3, [pc, #24]	; (800d330 <xTaskNotifyWait+0xb8>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 800d320:	f000 ff68 	bl	800e1f4 <vPortExitCritical>

		return xReturn;
 800d324:	697b      	ldr	r3, [r7, #20]
	}
 800d326:	4618      	mov	r0, r3
 800d328:	3718      	adds	r7, #24
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	20000fec 	.word	0x20000fec
 800d334:	e000ed04 	.word	0xe000ed04

0800d338 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b08a      	sub	sp, #40	; 0x28
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	60f8      	str	r0, [r7, #12]
 800d340:	60b9      	str	r1, [r7, #8]
 800d342:	603b      	str	r3, [r7, #0]
 800d344:	4613      	mov	r3, r2
 800d346:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800d348:	2301      	movs	r3, #1
 800d34a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d10a      	bne.n	800d368 <xTaskGenericNotify+0x30>
	__asm volatile
 800d352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d356:	f383 8811 	msr	BASEPRI, r3
 800d35a:	f3bf 8f6f 	isb	sy
 800d35e:	f3bf 8f4f 	dsb	sy
 800d362:	61bb      	str	r3, [r7, #24]
}
 800d364:	bf00      	nop
 800d366:	e7fe      	b.n	800d366 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800d36c:	f000 ff12 	bl	800e194 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d004      	beq.n	800d380 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d376:	6a3b      	ldr	r3, [r7, #32]
 800d378:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d380:	6a3b      	ldr	r3, [r7, #32]
 800d382:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d386:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d388:	6a3b      	ldr	r3, [r7, #32]
 800d38a:	2202      	movs	r2, #2
 800d38c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800d390:	79fb      	ldrb	r3, [r7, #7]
 800d392:	2b04      	cmp	r3, #4
 800d394:	d82d      	bhi.n	800d3f2 <xTaskGenericNotify+0xba>
 800d396:	a201      	add	r2, pc, #4	; (adr r2, 800d39c <xTaskGenericNotify+0x64>)
 800d398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d39c:	0800d415 	.word	0x0800d415
 800d3a0:	0800d3b1 	.word	0x0800d3b1
 800d3a4:	0800d3c3 	.word	0x0800d3c3
 800d3a8:	0800d3d3 	.word	0x0800d3d3
 800d3ac:	0800d3dd 	.word	0x0800d3dd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d3b0:	6a3b      	ldr	r3, [r7, #32]
 800d3b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	431a      	orrs	r2, r3
 800d3ba:	6a3b      	ldr	r3, [r7, #32]
 800d3bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d3c0:	e02b      	b.n	800d41a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d3c2:	6a3b      	ldr	r3, [r7, #32]
 800d3c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d3c8:	1c5a      	adds	r2, r3, #1
 800d3ca:	6a3b      	ldr	r3, [r7, #32]
 800d3cc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d3d0:	e023      	b.n	800d41a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d3d2:	6a3b      	ldr	r3, [r7, #32]
 800d3d4:	68ba      	ldr	r2, [r7, #8]
 800d3d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d3da:	e01e      	b.n	800d41a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d3dc:	7ffb      	ldrb	r3, [r7, #31]
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d004      	beq.n	800d3ec <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d3ea:	e016      	b.n	800d41a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800d3f0:	e013      	b.n	800d41a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d3f2:	6a3b      	ldr	r3, [r7, #32]
 800d3f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3fc:	d00c      	beq.n	800d418 <xTaskGenericNotify+0xe0>
	__asm volatile
 800d3fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d402:	f383 8811 	msr	BASEPRI, r3
 800d406:	f3bf 8f6f 	isb	sy
 800d40a:	f3bf 8f4f 	dsb	sy
 800d40e:	617b      	str	r3, [r7, #20]
}
 800d410:	bf00      	nop
 800d412:	e7fe      	b.n	800d412 <xTaskGenericNotify+0xda>
					break;
 800d414:	bf00      	nop
 800d416:	e000      	b.n	800d41a <xTaskGenericNotify+0xe2>

					break;
 800d418:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d41a:	7ffb      	ldrb	r3, [r7, #31]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d13a      	bne.n	800d496 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d420:	6a3b      	ldr	r3, [r7, #32]
 800d422:	3304      	adds	r3, #4
 800d424:	4618      	mov	r0, r3
 800d426:	f7fd fdfb 	bl	800b020 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800d42a:	6a3b      	ldr	r3, [r7, #32]
 800d42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d42e:	4b1d      	ldr	r3, [pc, #116]	; (800d4a4 <xTaskGenericNotify+0x16c>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	429a      	cmp	r2, r3
 800d434:	d903      	bls.n	800d43e <xTaskGenericNotify+0x106>
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43a:	4a1a      	ldr	r2, [pc, #104]	; (800d4a4 <xTaskGenericNotify+0x16c>)
 800d43c:	6013      	str	r3, [r2, #0]
 800d43e:	6a3b      	ldr	r3, [r7, #32]
 800d440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d442:	4613      	mov	r3, r2
 800d444:	009b      	lsls	r3, r3, #2
 800d446:	4413      	add	r3, r2
 800d448:	009b      	lsls	r3, r3, #2
 800d44a:	4a17      	ldr	r2, [pc, #92]	; (800d4a8 <xTaskGenericNotify+0x170>)
 800d44c:	441a      	add	r2, r3
 800d44e:	6a3b      	ldr	r3, [r7, #32]
 800d450:	3304      	adds	r3, #4
 800d452:	4619      	mov	r1, r3
 800d454:	4610      	mov	r0, r2
 800d456:	f7fd fd86 	bl	800af66 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d45a:	6a3b      	ldr	r3, [r7, #32]
 800d45c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00a      	beq.n	800d478 <xTaskGenericNotify+0x140>
	__asm volatile
 800d462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d466:	f383 8811 	msr	BASEPRI, r3
 800d46a:	f3bf 8f6f 	isb	sy
 800d46e:	f3bf 8f4f 	dsb	sy
 800d472:	613b      	str	r3, [r7, #16]
}
 800d474:	bf00      	nop
 800d476:	e7fe      	b.n	800d476 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d478:	6a3b      	ldr	r3, [r7, #32]
 800d47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d47c:	4b0b      	ldr	r3, [pc, #44]	; (800d4ac <xTaskGenericNotify+0x174>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d482:	429a      	cmp	r2, r3
 800d484:	d907      	bls.n	800d496 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800d486:	4b0a      	ldr	r3, [pc, #40]	; (800d4b0 <xTaskGenericNotify+0x178>)
 800d488:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d48c:	601a      	str	r2, [r3, #0]
 800d48e:	f3bf 8f4f 	dsb	sy
 800d492:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d496:	f000 fead 	bl	800e1f4 <vPortExitCritical>

		return xReturn;
 800d49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3728      	adds	r7, #40	; 0x28
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	200014c8 	.word	0x200014c8
 800d4a8:	20000ff0 	.word	0x20000ff0
 800d4ac:	20000fec 	.word	0x20000fec
 800d4b0:	e000ed04 	.word	0xe000ed04

0800d4b4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b08e      	sub	sp, #56	; 0x38
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60f8      	str	r0, [r7, #12]
 800d4bc:	60b9      	str	r1, [r7, #8]
 800d4be:	603b      	str	r3, [r7, #0]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d10a      	bne.n	800d4e4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800d4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4d2:	f383 8811 	msr	BASEPRI, r3
 800d4d6:	f3bf 8f6f 	isb	sy
 800d4da:	f3bf 8f4f 	dsb	sy
 800d4de:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4e0:	bf00      	nop
 800d4e2:	e7fe      	b.n	800d4e2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4e4:	f000 ff38 	bl	800e358 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800d4ec:	f3ef 8211 	mrs	r2, BASEPRI
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	623a      	str	r2, [r7, #32]
 800d502:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800d504:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d506:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d004      	beq.n	800d518 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d524:	2202      	movs	r2, #2
 800d526:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800d52a:	79fb      	ldrb	r3, [r7, #7]
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	d82f      	bhi.n	800d590 <xTaskGenericNotifyFromISR+0xdc>
 800d530:	a201      	add	r2, pc, #4	; (adr r2, 800d538 <xTaskGenericNotifyFromISR+0x84>)
 800d532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d536:	bf00      	nop
 800d538:	0800d5b3 	.word	0x0800d5b3
 800d53c:	0800d54d 	.word	0x0800d54d
 800d540:	0800d55f 	.word	0x0800d55f
 800d544:	0800d56f 	.word	0x0800d56f
 800d548:	0800d579 	.word	0x0800d579
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800d54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	431a      	orrs	r2, r3
 800d556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d558:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d55c:	e02c      	b.n	800d5b8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d564:	1c5a      	adds	r2, r3, #1
 800d566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d568:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d56c:	e024      	b.n	800d5b8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800d56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800d576:	e01f      	b.n	800d5b8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800d578:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d004      	beq.n	800d58a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800d580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d582:	68ba      	ldr	r2, [r7, #8]
 800d584:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800d588:	e016      	b.n	800d5b8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800d58a:	2300      	movs	r3, #0
 800d58c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800d58e:	e013      	b.n	800d5b8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800d590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d592:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d59a:	d00c      	beq.n	800d5b6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a0:	f383 8811 	msr	BASEPRI, r3
 800d5a4:	f3bf 8f6f 	isb	sy
 800d5a8:	f3bf 8f4f 	dsb	sy
 800d5ac:	61bb      	str	r3, [r7, #24]
}
 800d5ae:	bf00      	nop
 800d5b0:	e7fe      	b.n	800d5b0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800d5b2:	bf00      	nop
 800d5b4:	e000      	b.n	800d5b8 <xTaskGenericNotifyFromISR+0x104>
					break;
 800d5b6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d5b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	d146      	bne.n	800d64e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d00a      	beq.n	800d5de <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800d5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5cc:	f383 8811 	msr	BASEPRI, r3
 800d5d0:	f3bf 8f6f 	isb	sy
 800d5d4:	f3bf 8f4f 	dsb	sy
 800d5d8:	617b      	str	r3, [r7, #20]
}
 800d5da:	bf00      	nop
 800d5dc:	e7fe      	b.n	800d5dc <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5de:	4b21      	ldr	r3, [pc, #132]	; (800d664 <xTaskGenericNotifyFromISR+0x1b0>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d11d      	bne.n	800d622 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e8:	3304      	adds	r3, #4
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fd fd18 	bl	800b020 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f4:	4b1c      	ldr	r3, [pc, #112]	; (800d668 <xTaskGenericNotifyFromISR+0x1b4>)
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d903      	bls.n	800d604 <xTaskGenericNotifyFromISR+0x150>
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d600:	4a19      	ldr	r2, [pc, #100]	; (800d668 <xTaskGenericNotifyFromISR+0x1b4>)
 800d602:	6013      	str	r3, [r2, #0]
 800d604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d608:	4613      	mov	r3, r2
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	4413      	add	r3, r2
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	4a16      	ldr	r2, [pc, #88]	; (800d66c <xTaskGenericNotifyFromISR+0x1b8>)
 800d612:	441a      	add	r2, r3
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	3304      	adds	r3, #4
 800d618:	4619      	mov	r1, r3
 800d61a:	4610      	mov	r0, r2
 800d61c:	f7fd fca3 	bl	800af66 <vListInsertEnd>
 800d620:	e005      	b.n	800d62e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d624:	3318      	adds	r3, #24
 800d626:	4619      	mov	r1, r3
 800d628:	4811      	ldr	r0, [pc, #68]	; (800d670 <xTaskGenericNotifyFromISR+0x1bc>)
 800d62a:	f7fd fc9c 	bl	800af66 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d632:	4b10      	ldr	r3, [pc, #64]	; (800d674 <xTaskGenericNotifyFromISR+0x1c0>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d638:	429a      	cmp	r2, r3
 800d63a:	d908      	bls.n	800d64e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d63c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d002      	beq.n	800d648 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d644:	2201      	movs	r2, #1
 800d646:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d648:	4b0b      	ldr	r3, [pc, #44]	; (800d678 <xTaskGenericNotifyFromISR+0x1c4>)
 800d64a:	2201      	movs	r2, #1
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d650:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	f383 8811 	msr	BASEPRI, r3
}
 800d658:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800d65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3738      	adds	r7, #56	; 0x38
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	200014e8 	.word	0x200014e8
 800d668:	200014c8 	.word	0x200014c8
 800d66c:	20000ff0 	.word	0x20000ff0
 800d670:	20001480 	.word	0x20001480
 800d674:	20000fec 	.word	0x20000fec
 800d678:	200014d4 	.word	0x200014d4

0800d67c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d686:	4b21      	ldr	r3, [pc, #132]	; (800d70c <prvAddCurrentTaskToDelayedList+0x90>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d68c:	4b20      	ldr	r3, [pc, #128]	; (800d710 <prvAddCurrentTaskToDelayedList+0x94>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	3304      	adds	r3, #4
 800d692:	4618      	mov	r0, r3
 800d694:	f7fd fcc4 	bl	800b020 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69e:	d10a      	bne.n	800d6b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d007      	beq.n	800d6b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6a6:	4b1a      	ldr	r3, [pc, #104]	; (800d710 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	3304      	adds	r3, #4
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	4819      	ldr	r0, [pc, #100]	; (800d714 <prvAddCurrentTaskToDelayedList+0x98>)
 800d6b0:	f7fd fc59 	bl	800af66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d6b4:	e026      	b.n	800d704 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d6b6:	68fa      	ldr	r2, [r7, #12]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4413      	add	r3, r2
 800d6bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d6be:	4b14      	ldr	r3, [pc, #80]	; (800d710 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d209      	bcs.n	800d6e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6ce:	4b12      	ldr	r3, [pc, #72]	; (800d718 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	4b0f      	ldr	r3, [pc, #60]	; (800d710 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3304      	adds	r3, #4
 800d6d8:	4619      	mov	r1, r3
 800d6da:	4610      	mov	r0, r2
 800d6dc:	f7fd fc67 	bl	800afae <vListInsert>
}
 800d6e0:	e010      	b.n	800d704 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d6e2:	4b0e      	ldr	r3, [pc, #56]	; (800d71c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	4b0a      	ldr	r3, [pc, #40]	; (800d710 <prvAddCurrentTaskToDelayedList+0x94>)
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	3304      	adds	r3, #4
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	4610      	mov	r0, r2
 800d6f0:	f7fd fc5d 	bl	800afae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d6f4:	4b0a      	ldr	r3, [pc, #40]	; (800d720 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	68ba      	ldr	r2, [r7, #8]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d202      	bcs.n	800d704 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d6fe:	4a08      	ldr	r2, [pc, #32]	; (800d720 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	6013      	str	r3, [r2, #0]
}
 800d704:	bf00      	nop
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}
 800d70c:	200014c4 	.word	0x200014c4
 800d710:	20000fec 	.word	0x20000fec
 800d714:	200014ac 	.word	0x200014ac
 800d718:	2000147c 	.word	0x2000147c
 800d71c:	20001478 	.word	0x20001478
 800d720:	200014e0 	.word	0x200014e0

0800d724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b08a      	sub	sp, #40	; 0x28
 800d728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d72e:	f000 fba1 	bl	800de74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d732:	4b1c      	ldr	r3, [pc, #112]	; (800d7a4 <xTimerCreateTimerTask+0x80>)
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d021      	beq.n	800d77e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d73a:	2300      	movs	r3, #0
 800d73c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d73e:	2300      	movs	r3, #0
 800d740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d742:	1d3a      	adds	r2, r7, #4
 800d744:	f107 0108 	add.w	r1, r7, #8
 800d748:	f107 030c 	add.w	r3, r7, #12
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7fd fbc3 	bl	800aed8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	68fa      	ldr	r2, [r7, #12]
 800d758:	9202      	str	r2, [sp, #8]
 800d75a:	9301      	str	r3, [sp, #4]
 800d75c:	2302      	movs	r3, #2
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	2300      	movs	r3, #0
 800d762:	460a      	mov	r2, r1
 800d764:	4910      	ldr	r1, [pc, #64]	; (800d7a8 <xTimerCreateTimerTask+0x84>)
 800d766:	4811      	ldr	r0, [pc, #68]	; (800d7ac <xTimerCreateTimerTask+0x88>)
 800d768:	f7fe fd48 	bl	800c1fc <xTaskCreateStatic>
 800d76c:	4603      	mov	r3, r0
 800d76e:	4a10      	ldr	r2, [pc, #64]	; (800d7b0 <xTimerCreateTimerTask+0x8c>)
 800d770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d772:	4b0f      	ldr	r3, [pc, #60]	; (800d7b0 <xTimerCreateTimerTask+0x8c>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d001      	beq.n	800d77e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d77a:	2301      	movs	r3, #1
 800d77c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10a      	bne.n	800d79a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	613b      	str	r3, [r7, #16]
}
 800d796:	bf00      	nop
 800d798:	e7fe      	b.n	800d798 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d79a:	697b      	ldr	r3, [r7, #20]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	2000151c 	.word	0x2000151c
 800d7a8:	08011414 	.word	0x08011414
 800d7ac:	0800da1d 	.word	0x0800da1d
 800d7b0:	20001520 	.word	0x20001520

0800d7b4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b088      	sub	sp, #32
 800d7b8:	af02      	add	r7, sp, #8
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	607a      	str	r2, [r7, #4]
 800d7c0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d7c2:	202c      	movs	r0, #44	; 0x2c
 800d7c4:	f000 fe08 	bl	800e3d8 <pvPortMalloc>
 800d7c8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d00d      	beq.n	800d7ec <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	9301      	str	r3, [sp, #4]
 800d7dc:	6a3b      	ldr	r3, [r7, #32]
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	687a      	ldr	r2, [r7, #4]
 800d7e4:	68b9      	ldr	r1, [r7, #8]
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f000 f843 	bl	800d872 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d7ec:	697b      	ldr	r3, [r7, #20]
	}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3718      	adds	r7, #24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b08a      	sub	sp, #40	; 0x28
 800d7fa:	af02      	add	r7, sp, #8
 800d7fc:	60f8      	str	r0, [r7, #12]
 800d7fe:	60b9      	str	r1, [r7, #8]
 800d800:	607a      	str	r2, [r7, #4]
 800d802:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d804:	232c      	movs	r3, #44	; 0x2c
 800d806:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	2b2c      	cmp	r3, #44	; 0x2c
 800d80c:	d00a      	beq.n	800d824 <xTimerCreateStatic+0x2e>
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	61bb      	str	r3, [r7, #24]
}
 800d820:	bf00      	nop
 800d822:	e7fe      	b.n	800d822 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d824:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d10a      	bne.n	800d842 <xTimerCreateStatic+0x4c>
	__asm volatile
 800d82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d830:	f383 8811 	msr	BASEPRI, r3
 800d834:	f3bf 8f6f 	isb	sy
 800d838:	f3bf 8f4f 	dsb	sy
 800d83c:	617b      	str	r3, [r7, #20]
}
 800d83e:	bf00      	nop
 800d840:	e7fe      	b.n	800d840 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d844:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d846:	69fb      	ldr	r3, [r7, #28]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00d      	beq.n	800d868 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d84c:	69fb      	ldr	r3, [r7, #28]
 800d84e:	2202      	movs	r2, #2
 800d850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d854:	69fb      	ldr	r3, [r7, #28]
 800d856:	9301      	str	r3, [sp, #4]
 800d858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d85a:	9300      	str	r3, [sp, #0]
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	687a      	ldr	r2, [r7, #4]
 800d860:	68b9      	ldr	r1, [r7, #8]
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	f000 f805 	bl	800d872 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d868:	69fb      	ldr	r3, [r7, #28]
	}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3720      	adds	r7, #32
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b086      	sub	sp, #24
 800d876:	af00      	add	r7, sp, #0
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	60b9      	str	r1, [r7, #8]
 800d87c:	607a      	str	r2, [r7, #4]
 800d87e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10a      	bne.n	800d89c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800d886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d88a:	f383 8811 	msr	BASEPRI, r3
 800d88e:	f3bf 8f6f 	isb	sy
 800d892:	f3bf 8f4f 	dsb	sy
 800d896:	617b      	str	r3, [r7, #20]
}
 800d898:	bf00      	nop
 800d89a:	e7fe      	b.n	800d89a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800d89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d01e      	beq.n	800d8e0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d8a2:	f000 fae7 	bl	800de74 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ae:	68ba      	ldr	r2, [r7, #8]
 800d8b0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	683a      	ldr	r2, [r7, #0]
 800d8b6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ba:	6a3a      	ldr	r2, [r7, #32]
 800d8bc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c0:	3304      	adds	r3, #4
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	f7fd fb42 	bl	800af4c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d008      	beq.n	800d8e0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8d4:	f043 0304 	orr.w	r3, r3, #4
 800d8d8:	b2da      	uxtb	r2, r3
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d8e0:	bf00      	nop
 800d8e2:	3718      	adds	r7, #24
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08a      	sub	sp, #40	; 0x28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d10a      	bne.n	800d916 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d904:	f383 8811 	msr	BASEPRI, r3
 800d908:	f3bf 8f6f 	isb	sy
 800d90c:	f3bf 8f4f 	dsb	sy
 800d910:	623b      	str	r3, [r7, #32]
}
 800d912:	bf00      	nop
 800d914:	e7fe      	b.n	800d914 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d916:	4b1a      	ldr	r3, [pc, #104]	; (800d980 <xTimerGenericCommand+0x98>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d02a      	beq.n	800d974 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	2b05      	cmp	r3, #5
 800d92e:	dc18      	bgt.n	800d962 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d930:	f7ff fb18 	bl	800cf64 <xTaskGetSchedulerState>
 800d934:	4603      	mov	r3, r0
 800d936:	2b02      	cmp	r3, #2
 800d938:	d109      	bne.n	800d94e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d93a:	4b11      	ldr	r3, [pc, #68]	; (800d980 <xTimerGenericCommand+0x98>)
 800d93c:	6818      	ldr	r0, [r3, #0]
 800d93e:	f107 0110 	add.w	r1, r7, #16
 800d942:	2300      	movs	r3, #0
 800d944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d946:	f7fd fdf3 	bl	800b530 <xQueueGenericSend>
 800d94a:	6278      	str	r0, [r7, #36]	; 0x24
 800d94c:	e012      	b.n	800d974 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d94e:	4b0c      	ldr	r3, [pc, #48]	; (800d980 <xTimerGenericCommand+0x98>)
 800d950:	6818      	ldr	r0, [r3, #0]
 800d952:	f107 0110 	add.w	r1, r7, #16
 800d956:	2300      	movs	r3, #0
 800d958:	2200      	movs	r2, #0
 800d95a:	f7fd fde9 	bl	800b530 <xQueueGenericSend>
 800d95e:	6278      	str	r0, [r7, #36]	; 0x24
 800d960:	e008      	b.n	800d974 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d962:	4b07      	ldr	r3, [pc, #28]	; (800d980 <xTimerGenericCommand+0x98>)
 800d964:	6818      	ldr	r0, [r3, #0]
 800d966:	f107 0110 	add.w	r1, r7, #16
 800d96a:	2300      	movs	r3, #0
 800d96c:	683a      	ldr	r2, [r7, #0]
 800d96e:	f7fd fedd 	bl	800b72c <xQueueGenericSendFromISR>
 800d972:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d976:	4618      	mov	r0, r3
 800d978:	3728      	adds	r7, #40	; 0x28
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	2000151c 	.word	0x2000151c

0800d984 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b088      	sub	sp, #32
 800d988:	af02      	add	r7, sp, #8
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d98e:	4b22      	ldr	r3, [pc, #136]	; (800da18 <prvProcessExpiredTimer+0x94>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	3304      	adds	r3, #4
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fd fb3f 	bl	800b020 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d022      	beq.n	800d9f6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	699a      	ldr	r2, [r3, #24]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	18d1      	adds	r1, r2, r3
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	683a      	ldr	r2, [r7, #0]
 800d9bc:	6978      	ldr	r0, [r7, #20]
 800d9be:	f000 f8d1 	bl	800db64 <prvInsertTimerInActiveList>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d01f      	beq.n	800da08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	9300      	str	r3, [sp, #0]
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	6978      	ldr	r0, [r7, #20]
 800d9d4:	f7ff ff88 	bl	800d8e8 <xTimerGenericCommand>
 800d9d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d113      	bne.n	800da08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e4:	f383 8811 	msr	BASEPRI, r3
 800d9e8:	f3bf 8f6f 	isb	sy
 800d9ec:	f3bf 8f4f 	dsb	sy
 800d9f0:	60fb      	str	r3, [r7, #12]
}
 800d9f2:	bf00      	nop
 800d9f4:	e7fe      	b.n	800d9f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9fc:	f023 0301 	bic.w	r3, r3, #1
 800da00:	b2da      	uxtb	r2, r3
 800da02:	697b      	ldr	r3, [r7, #20]
 800da04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	6a1b      	ldr	r3, [r3, #32]
 800da0c:	6978      	ldr	r0, [r7, #20]
 800da0e:	4798      	blx	r3
}
 800da10:	bf00      	nop
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	20001514 	.word	0x20001514

0800da1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b084      	sub	sp, #16
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da24:	f107 0308 	add.w	r3, r7, #8
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 f857 	bl	800dadc <prvGetNextExpireTime>
 800da2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	4619      	mov	r1, r3
 800da34:	68f8      	ldr	r0, [r7, #12]
 800da36:	f000 f803 	bl	800da40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800da3a:	f000 f8d5 	bl	800dbe8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800da3e:	e7f1      	b.n	800da24 <prvTimerTask+0x8>

0800da40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800da4a:	f7fe fe7d 	bl	800c748 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800da4e:	f107 0308 	add.w	r3, r7, #8
 800da52:	4618      	mov	r0, r3
 800da54:	f000 f866 	bl	800db24 <prvSampleTimeNow>
 800da58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d130      	bne.n	800dac2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d10a      	bne.n	800da7c <prvProcessTimerOrBlockTask+0x3c>
 800da66:	687a      	ldr	r2, [r7, #4]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d806      	bhi.n	800da7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800da6e:	f7fe fe79 	bl	800c764 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800da72:	68f9      	ldr	r1, [r7, #12]
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f7ff ff85 	bl	800d984 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800da7a:	e024      	b.n	800dac6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d008      	beq.n	800da94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800da82:	4b13      	ldr	r3, [pc, #76]	; (800dad0 <prvProcessTimerOrBlockTask+0x90>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d101      	bne.n	800da90 <prvProcessTimerOrBlockTask+0x50>
 800da8c:	2301      	movs	r3, #1
 800da8e:	e000      	b.n	800da92 <prvProcessTimerOrBlockTask+0x52>
 800da90:	2300      	movs	r3, #0
 800da92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800da94:	4b0f      	ldr	r3, [pc, #60]	; (800dad4 <prvProcessTimerOrBlockTask+0x94>)
 800da96:	6818      	ldr	r0, [r3, #0]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	1ad3      	subs	r3, r2, r3
 800da9e:	683a      	ldr	r2, [r7, #0]
 800daa0:	4619      	mov	r1, r3
 800daa2:	f7fe fb77 	bl	800c194 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800daa6:	f7fe fe5d 	bl	800c764 <xTaskResumeAll>
 800daaa:	4603      	mov	r3, r0
 800daac:	2b00      	cmp	r3, #0
 800daae:	d10a      	bne.n	800dac6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dab0:	4b09      	ldr	r3, [pc, #36]	; (800dad8 <prvProcessTimerOrBlockTask+0x98>)
 800dab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dab6:	601a      	str	r2, [r3, #0]
 800dab8:	f3bf 8f4f 	dsb	sy
 800dabc:	f3bf 8f6f 	isb	sy
}
 800dac0:	e001      	b.n	800dac6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dac2:	f7fe fe4f 	bl	800c764 <xTaskResumeAll>
}
 800dac6:	bf00      	nop
 800dac8:	3710      	adds	r7, #16
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}
 800dace:	bf00      	nop
 800dad0:	20001518 	.word	0x20001518
 800dad4:	2000151c 	.word	0x2000151c
 800dad8:	e000ed04 	.word	0xe000ed04

0800dadc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dae4:	4b0e      	ldr	r3, [pc, #56]	; (800db20 <prvGetNextExpireTime+0x44>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d101      	bne.n	800daf2 <prvGetNextExpireTime+0x16>
 800daee:	2201      	movs	r2, #1
 800daf0:	e000      	b.n	800daf4 <prvGetNextExpireTime+0x18>
 800daf2:	2200      	movs	r2, #0
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d105      	bne.n	800db0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800db00:	4b07      	ldr	r3, [pc, #28]	; (800db20 <prvGetNextExpireTime+0x44>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	68db      	ldr	r3, [r3, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	60fb      	str	r3, [r7, #12]
 800db0a:	e001      	b.n	800db10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800db0c:	2300      	movs	r3, #0
 800db0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800db10:	68fb      	ldr	r3, [r7, #12]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3714      	adds	r7, #20
 800db16:	46bd      	mov	sp, r7
 800db18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1c:	4770      	bx	lr
 800db1e:	bf00      	nop
 800db20:	20001514 	.word	0x20001514

0800db24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800db2c:	f7fe feb8 	bl	800c8a0 <xTaskGetTickCount>
 800db30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800db32:	4b0b      	ldr	r3, [pc, #44]	; (800db60 <prvSampleTimeNow+0x3c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	68fa      	ldr	r2, [r7, #12]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d205      	bcs.n	800db48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800db3c:	f000 f936 	bl	800ddac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	601a      	str	r2, [r3, #0]
 800db46:	e002      	b.n	800db4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800db4e:	4a04      	ldr	r2, [pc, #16]	; (800db60 <prvSampleTimeNow+0x3c>)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800db54:	68fb      	ldr	r3, [r7, #12]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	20001524 	.word	0x20001524

0800db64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b086      	sub	sp, #24
 800db68:	af00      	add	r7, sp, #0
 800db6a:	60f8      	str	r0, [r7, #12]
 800db6c:	60b9      	str	r1, [r7, #8]
 800db6e:	607a      	str	r2, [r7, #4]
 800db70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800db72:	2300      	movs	r3, #0
 800db74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	68fa      	ldr	r2, [r7, #12]
 800db80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800db82:	68ba      	ldr	r2, [r7, #8]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	429a      	cmp	r2, r3
 800db88:	d812      	bhi.n	800dbb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	1ad2      	subs	r2, r2, r3
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	699b      	ldr	r3, [r3, #24]
 800db94:	429a      	cmp	r2, r3
 800db96:	d302      	bcc.n	800db9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db98:	2301      	movs	r3, #1
 800db9a:	617b      	str	r3, [r7, #20]
 800db9c:	e01b      	b.n	800dbd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db9e:	4b10      	ldr	r3, [pc, #64]	; (800dbe0 <prvInsertTimerInActiveList+0x7c>)
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3304      	adds	r3, #4
 800dba6:	4619      	mov	r1, r3
 800dba8:	4610      	mov	r0, r2
 800dbaa:	f7fd fa00 	bl	800afae <vListInsert>
 800dbae:	e012      	b.n	800dbd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d206      	bcs.n	800dbc6 <prvInsertTimerInActiveList+0x62>
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d302      	bcc.n	800dbc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	617b      	str	r3, [r7, #20]
 800dbc4:	e007      	b.n	800dbd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dbc6:	4b07      	ldr	r3, [pc, #28]	; (800dbe4 <prvInsertTimerInActiveList+0x80>)
 800dbc8:	681a      	ldr	r2, [r3, #0]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3304      	adds	r3, #4
 800dbce:	4619      	mov	r1, r3
 800dbd0:	4610      	mov	r0, r2
 800dbd2:	f7fd f9ec 	bl	800afae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dbd6:	697b      	ldr	r3, [r7, #20]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3718      	adds	r7, #24
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	20001518 	.word	0x20001518
 800dbe4:	20001514 	.word	0x20001514

0800dbe8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b08e      	sub	sp, #56	; 0x38
 800dbec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dbee:	e0ca      	b.n	800dd86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	da18      	bge.n	800dc28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800dbf6:	1d3b      	adds	r3, r7, #4
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800dbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10a      	bne.n	800dc18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800dc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc06:	f383 8811 	msr	BASEPRI, r3
 800dc0a:	f3bf 8f6f 	isb	sy
 800dc0e:	f3bf 8f4f 	dsb	sy
 800dc12:	61fb      	str	r3, [r7, #28]
}
 800dc14:	bf00      	nop
 800dc16:	e7fe      	b.n	800dc16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc1e:	6850      	ldr	r0, [r2, #4]
 800dc20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc22:	6892      	ldr	r2, [r2, #8]
 800dc24:	4611      	mov	r1, r2
 800dc26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f2c0 80ab 	blt.w	800dd86 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d004      	beq.n	800dc46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3e:	3304      	adds	r3, #4
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fd f9ed 	bl	800b020 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc46:	463b      	mov	r3, r7
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7ff ff6b 	bl	800db24 <prvSampleTimeNow>
 800dc4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2b09      	cmp	r3, #9
 800dc54:	f200 8096 	bhi.w	800dd84 <prvProcessReceivedCommands+0x19c>
 800dc58:	a201      	add	r2, pc, #4	; (adr r2, 800dc60 <prvProcessReceivedCommands+0x78>)
 800dc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc5e:	bf00      	nop
 800dc60:	0800dc89 	.word	0x0800dc89
 800dc64:	0800dc89 	.word	0x0800dc89
 800dc68:	0800dc89 	.word	0x0800dc89
 800dc6c:	0800dcfd 	.word	0x0800dcfd
 800dc70:	0800dd11 	.word	0x0800dd11
 800dc74:	0800dd5b 	.word	0x0800dd5b
 800dc78:	0800dc89 	.word	0x0800dc89
 800dc7c:	0800dc89 	.word	0x0800dc89
 800dc80:	0800dcfd 	.word	0x0800dcfd
 800dc84:	0800dd11 	.word	0x0800dd11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc8e:	f043 0301 	orr.w	r3, r3, #1
 800dc92:	b2da      	uxtb	r2, r3
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc9a:	68ba      	ldr	r2, [r7, #8]
 800dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9e:	699b      	ldr	r3, [r3, #24]
 800dca0:	18d1      	adds	r1, r2, r3
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dca8:	f7ff ff5c 	bl	800db64 <prvInsertTimerInActiveList>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d069      	beq.n	800dd86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb4:	6a1b      	ldr	r3, [r3, #32]
 800dcb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcc0:	f003 0304 	and.w	r3, r3, #4
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d05e      	beq.n	800dd86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dcc8:	68ba      	ldr	r2, [r7, #8]
 800dcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dccc:	699b      	ldr	r3, [r3, #24]
 800dcce:	441a      	add	r2, r3
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	9300      	str	r3, [sp, #0]
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcda:	f7ff fe05 	bl	800d8e8 <xTimerGenericCommand>
 800dcde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dce0:	6a3b      	ldr	r3, [r7, #32]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d14f      	bne.n	800dd86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcea:	f383 8811 	msr	BASEPRI, r3
 800dcee:	f3bf 8f6f 	isb	sy
 800dcf2:	f3bf 8f4f 	dsb	sy
 800dcf6:	61bb      	str	r3, [r7, #24]
}
 800dcf8:	bf00      	nop
 800dcfa:	e7fe      	b.n	800dcfa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd02:	f023 0301 	bic.w	r3, r3, #1
 800dd06:	b2da      	uxtb	r2, r3
 800dd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dd0e:	e03a      	b.n	800dd86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd16:	f043 0301 	orr.w	r3, r3, #1
 800dd1a:	b2da      	uxtb	r2, r3
 800dd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2a:	699b      	ldr	r3, [r3, #24]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d10a      	bne.n	800dd46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	617b      	str	r3, [r7, #20]
}
 800dd42:	bf00      	nop
 800dd44:	e7fe      	b.n	800dd44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd48:	699a      	ldr	r2, [r3, #24]
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd4c:	18d1      	adds	r1, r2, r3
 800dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd54:	f7ff ff06 	bl	800db64 <prvInsertTimerInActiveList>
					break;
 800dd58:	e015      	b.n	800dd86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd60:	f003 0302 	and.w	r3, r3, #2
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d103      	bne.n	800dd70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800dd68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd6a:	f000 fc01 	bl	800e570 <vPortFree>
 800dd6e:	e00a      	b.n	800dd86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd76:	f023 0301 	bic.w	r3, r3, #1
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dd82:	e000      	b.n	800dd86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800dd84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dd86:	4b08      	ldr	r3, [pc, #32]	; (800dda8 <prvProcessReceivedCommands+0x1c0>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	1d39      	adds	r1, r7, #4
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7fd fdf4 	bl	800b97c <xQueueReceive>
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f47f af2a 	bne.w	800dbf0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800dd9c:	bf00      	nop
 800dd9e:	bf00      	nop
 800dda0:	3730      	adds	r7, #48	; 0x30
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	2000151c 	.word	0x2000151c

0800ddac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b088      	sub	sp, #32
 800ddb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddb2:	e048      	b.n	800de46 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddb4:	4b2d      	ldr	r3, [pc, #180]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddbe:	4b2b      	ldr	r3, [pc, #172]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	68db      	ldr	r3, [r3, #12]
 800ddc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	3304      	adds	r3, #4
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f7fd f927 	bl	800b020 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dde0:	f003 0304 	and.w	r3, r3, #4
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d02e      	beq.n	800de46 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	699b      	ldr	r3, [r3, #24]
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	4413      	add	r3, r2
 800ddf0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ddf2:	68ba      	ldr	r2, [r7, #8]
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	429a      	cmp	r2, r3
 800ddf8:	d90e      	bls.n	800de18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	68ba      	ldr	r2, [r7, #8]
 800ddfe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	68fa      	ldr	r2, [r7, #12]
 800de04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800de06:	4b19      	ldr	r3, [pc, #100]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800de08:	681a      	ldr	r2, [r3, #0]
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	3304      	adds	r3, #4
 800de0e:	4619      	mov	r1, r3
 800de10:	4610      	mov	r0, r2
 800de12:	f7fd f8cc 	bl	800afae <vListInsert>
 800de16:	e016      	b.n	800de46 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800de18:	2300      	movs	r3, #0
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	2300      	movs	r3, #0
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	2100      	movs	r1, #0
 800de22:	68f8      	ldr	r0, [r7, #12]
 800de24:	f7ff fd60 	bl	800d8e8 <xTimerGenericCommand>
 800de28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d10a      	bne.n	800de46 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800de30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de34:	f383 8811 	msr	BASEPRI, r3
 800de38:	f3bf 8f6f 	isb	sy
 800de3c:	f3bf 8f4f 	dsb	sy
 800de40:	603b      	str	r3, [r7, #0]
}
 800de42:	bf00      	nop
 800de44:	e7fe      	b.n	800de44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800de46:	4b09      	ldr	r3, [pc, #36]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1b1      	bne.n	800ddb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800de50:	4b06      	ldr	r3, [pc, #24]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800de56:	4b06      	ldr	r3, [pc, #24]	; (800de70 <prvSwitchTimerLists+0xc4>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	4a04      	ldr	r2, [pc, #16]	; (800de6c <prvSwitchTimerLists+0xc0>)
 800de5c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800de5e:	4a04      	ldr	r2, [pc, #16]	; (800de70 <prvSwitchTimerLists+0xc4>)
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	6013      	str	r3, [r2, #0]
}
 800de64:	bf00      	nop
 800de66:	3718      	adds	r7, #24
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	20001514 	.word	0x20001514
 800de70:	20001518 	.word	0x20001518

0800de74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800de7a:	f000 f98b 	bl	800e194 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800de7e:	4b15      	ldr	r3, [pc, #84]	; (800ded4 <prvCheckForValidListAndQueue+0x60>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d120      	bne.n	800dec8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800de86:	4814      	ldr	r0, [pc, #80]	; (800ded8 <prvCheckForValidListAndQueue+0x64>)
 800de88:	f7fd f840 	bl	800af0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de8c:	4813      	ldr	r0, [pc, #76]	; (800dedc <prvCheckForValidListAndQueue+0x68>)
 800de8e:	f7fd f83d 	bl	800af0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de92:	4b13      	ldr	r3, [pc, #76]	; (800dee0 <prvCheckForValidListAndQueue+0x6c>)
 800de94:	4a10      	ldr	r2, [pc, #64]	; (800ded8 <prvCheckForValidListAndQueue+0x64>)
 800de96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de98:	4b12      	ldr	r3, [pc, #72]	; (800dee4 <prvCheckForValidListAndQueue+0x70>)
 800de9a:	4a10      	ldr	r2, [pc, #64]	; (800dedc <prvCheckForValidListAndQueue+0x68>)
 800de9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de9e:	2300      	movs	r3, #0
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	4b11      	ldr	r3, [pc, #68]	; (800dee8 <prvCheckForValidListAndQueue+0x74>)
 800dea4:	4a11      	ldr	r2, [pc, #68]	; (800deec <prvCheckForValidListAndQueue+0x78>)
 800dea6:	2110      	movs	r1, #16
 800dea8:	200a      	movs	r0, #10
 800deaa:	f7fd f94b 	bl	800b144 <xQueueGenericCreateStatic>
 800deae:	4603      	mov	r3, r0
 800deb0:	4a08      	ldr	r2, [pc, #32]	; (800ded4 <prvCheckForValidListAndQueue+0x60>)
 800deb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800deb4:	4b07      	ldr	r3, [pc, #28]	; (800ded4 <prvCheckForValidListAndQueue+0x60>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d005      	beq.n	800dec8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800debc:	4b05      	ldr	r3, [pc, #20]	; (800ded4 <prvCheckForValidListAndQueue+0x60>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	490b      	ldr	r1, [pc, #44]	; (800def0 <prvCheckForValidListAndQueue+0x7c>)
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7fe f912 	bl	800c0ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dec8:	f000 f994 	bl	800e1f4 <vPortExitCritical>
}
 800decc:	bf00      	nop
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	2000151c 	.word	0x2000151c
 800ded8:	200014ec 	.word	0x200014ec
 800dedc:	20001500 	.word	0x20001500
 800dee0:	20001514 	.word	0x20001514
 800dee4:	20001518 	.word	0x20001518
 800dee8:	200015c8 	.word	0x200015c8
 800deec:	20001528 	.word	0x20001528
 800def0:	0801141c 	.word	0x0801141c

0800def4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b086      	sub	sp, #24
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d10a      	bne.n	800df1c <pvTimerGetTimerID+0x28>
	__asm volatile
 800df06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df0a:	f383 8811 	msr	BASEPRI, r3
 800df0e:	f3bf 8f6f 	isb	sy
 800df12:	f3bf 8f4f 	dsb	sy
 800df16:	60fb      	str	r3, [r7, #12]
}
 800df18:	bf00      	nop
 800df1a:	e7fe      	b.n	800df1a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800df1c:	f000 f93a 	bl	800e194 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	69db      	ldr	r3, [r3, #28]
 800df24:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800df26:	f000 f965 	bl	800e1f4 <vPortExitCritical>

	return pvReturn;
 800df2a:	693b      	ldr	r3, [r7, #16]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3718      	adds	r7, #24
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800df34:	b480      	push	{r7}
 800df36:	b085      	sub	sp, #20
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	3b04      	subs	r3, #4
 800df44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800df4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	3b04      	subs	r3, #4
 800df52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	f023 0201 	bic.w	r2, r3, #1
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	3b04      	subs	r3, #4
 800df62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df64:	4a0c      	ldr	r2, [pc, #48]	; (800df98 <pxPortInitialiseStack+0x64>)
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	3b14      	subs	r3, #20
 800df6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	3b04      	subs	r3, #4
 800df7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f06f 0202 	mvn.w	r2, #2
 800df82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	3b20      	subs	r3, #32
 800df88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df8a:	68fb      	ldr	r3, [r7, #12]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3714      	adds	r7, #20
 800df90:	46bd      	mov	sp, r7
 800df92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df96:	4770      	bx	lr
 800df98:	0800df9d 	.word	0x0800df9d

0800df9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df9c:	b480      	push	{r7}
 800df9e:	b085      	sub	sp, #20
 800dfa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dfa6:	4b12      	ldr	r3, [pc, #72]	; (800dff0 <prvTaskExitError+0x54>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfae:	d00a      	beq.n	800dfc6 <prvTaskExitError+0x2a>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	60fb      	str	r3, [r7, #12]
}
 800dfc2:	bf00      	nop
 800dfc4:	e7fe      	b.n	800dfc4 <prvTaskExitError+0x28>
	__asm volatile
 800dfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	60bb      	str	r3, [r7, #8]
}
 800dfd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dfda:	bf00      	nop
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d0fc      	beq.n	800dfdc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dfe2:	bf00      	nop
 800dfe4:	bf00      	nop
 800dfe6:	3714      	adds	r7, #20
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfee:	4770      	bx	lr
 800dff0:	20000014 	.word	0x20000014
	...

0800e000 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e000:	4b07      	ldr	r3, [pc, #28]	; (800e020 <pxCurrentTCBConst2>)
 800e002:	6819      	ldr	r1, [r3, #0]
 800e004:	6808      	ldr	r0, [r1, #0]
 800e006:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00a:	f380 8809 	msr	PSP, r0
 800e00e:	f3bf 8f6f 	isb	sy
 800e012:	f04f 0000 	mov.w	r0, #0
 800e016:	f380 8811 	msr	BASEPRI, r0
 800e01a:	4770      	bx	lr
 800e01c:	f3af 8000 	nop.w

0800e020 <pxCurrentTCBConst2>:
 800e020:	20000fec 	.word	0x20000fec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e024:	bf00      	nop
 800e026:	bf00      	nop

0800e028 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e028:	4808      	ldr	r0, [pc, #32]	; (800e04c <prvPortStartFirstTask+0x24>)
 800e02a:	6800      	ldr	r0, [r0, #0]
 800e02c:	6800      	ldr	r0, [r0, #0]
 800e02e:	f380 8808 	msr	MSP, r0
 800e032:	f04f 0000 	mov.w	r0, #0
 800e036:	f380 8814 	msr	CONTROL, r0
 800e03a:	b662      	cpsie	i
 800e03c:	b661      	cpsie	f
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	f3bf 8f6f 	isb	sy
 800e046:	df00      	svc	0
 800e048:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e04a:	bf00      	nop
 800e04c:	e000ed08 	.word	0xe000ed08

0800e050 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b086      	sub	sp, #24
 800e054:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e056:	4b46      	ldr	r3, [pc, #280]	; (800e170 <xPortStartScheduler+0x120>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	4a46      	ldr	r2, [pc, #280]	; (800e174 <xPortStartScheduler+0x124>)
 800e05c:	4293      	cmp	r3, r2
 800e05e:	d10a      	bne.n	800e076 <xPortStartScheduler+0x26>
	__asm volatile
 800e060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e064:	f383 8811 	msr	BASEPRI, r3
 800e068:	f3bf 8f6f 	isb	sy
 800e06c:	f3bf 8f4f 	dsb	sy
 800e070:	613b      	str	r3, [r7, #16]
}
 800e072:	bf00      	nop
 800e074:	e7fe      	b.n	800e074 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e076:	4b3e      	ldr	r3, [pc, #248]	; (800e170 <xPortStartScheduler+0x120>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a3f      	ldr	r2, [pc, #252]	; (800e178 <xPortStartScheduler+0x128>)
 800e07c:	4293      	cmp	r3, r2
 800e07e:	d10a      	bne.n	800e096 <xPortStartScheduler+0x46>
	__asm volatile
 800e080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e084:	f383 8811 	msr	BASEPRI, r3
 800e088:	f3bf 8f6f 	isb	sy
 800e08c:	f3bf 8f4f 	dsb	sy
 800e090:	60fb      	str	r3, [r7, #12]
}
 800e092:	bf00      	nop
 800e094:	e7fe      	b.n	800e094 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e096:	4b39      	ldr	r3, [pc, #228]	; (800e17c <xPortStartScheduler+0x12c>)
 800e098:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e09a:	697b      	ldr	r3, [r7, #20]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	22ff      	movs	r2, #255	; 0xff
 800e0a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	781b      	ldrb	r3, [r3, #0]
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e0b0:	78fb      	ldrb	r3, [r7, #3]
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e0b8:	b2da      	uxtb	r2, r3
 800e0ba:	4b31      	ldr	r3, [pc, #196]	; (800e180 <xPortStartScheduler+0x130>)
 800e0bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e0be:	4b31      	ldr	r3, [pc, #196]	; (800e184 <xPortStartScheduler+0x134>)
 800e0c0:	2207      	movs	r2, #7
 800e0c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0c4:	e009      	b.n	800e0da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e0c6:	4b2f      	ldr	r3, [pc, #188]	; (800e184 <xPortStartScheduler+0x134>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	3b01      	subs	r3, #1
 800e0cc:	4a2d      	ldr	r2, [pc, #180]	; (800e184 <xPortStartScheduler+0x134>)
 800e0ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e0d0:	78fb      	ldrb	r3, [r7, #3]
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	b2db      	uxtb	r3, r3
 800e0d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e0da:	78fb      	ldrb	r3, [r7, #3]
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0e2:	2b80      	cmp	r3, #128	; 0x80
 800e0e4:	d0ef      	beq.n	800e0c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e0e6:	4b27      	ldr	r3, [pc, #156]	; (800e184 <xPortStartScheduler+0x134>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f1c3 0307 	rsb	r3, r3, #7
 800e0ee:	2b04      	cmp	r3, #4
 800e0f0:	d00a      	beq.n	800e108 <xPortStartScheduler+0xb8>
	__asm volatile
 800e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	60bb      	str	r3, [r7, #8]
}
 800e104:	bf00      	nop
 800e106:	e7fe      	b.n	800e106 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e108:	4b1e      	ldr	r3, [pc, #120]	; (800e184 <xPortStartScheduler+0x134>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	021b      	lsls	r3, r3, #8
 800e10e:	4a1d      	ldr	r2, [pc, #116]	; (800e184 <xPortStartScheduler+0x134>)
 800e110:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e112:	4b1c      	ldr	r3, [pc, #112]	; (800e184 <xPortStartScheduler+0x134>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e11a:	4a1a      	ldr	r2, [pc, #104]	; (800e184 <xPortStartScheduler+0x134>)
 800e11c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	b2da      	uxtb	r2, r3
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e126:	4b18      	ldr	r3, [pc, #96]	; (800e188 <xPortStartScheduler+0x138>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a17      	ldr	r2, [pc, #92]	; (800e188 <xPortStartScheduler+0x138>)
 800e12c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e130:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e132:	4b15      	ldr	r3, [pc, #84]	; (800e188 <xPortStartScheduler+0x138>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	4a14      	ldr	r2, [pc, #80]	; (800e188 <xPortStartScheduler+0x138>)
 800e138:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e13c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e13e:	f000 f8dd 	bl	800e2fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e142:	4b12      	ldr	r3, [pc, #72]	; (800e18c <xPortStartScheduler+0x13c>)
 800e144:	2200      	movs	r2, #0
 800e146:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e148:	f000 f8fc 	bl	800e344 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e14c:	4b10      	ldr	r3, [pc, #64]	; (800e190 <xPortStartScheduler+0x140>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	4a0f      	ldr	r2, [pc, #60]	; (800e190 <xPortStartScheduler+0x140>)
 800e152:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e156:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e158:	f7ff ff66 	bl	800e028 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e15c:	f7fe fc7c 	bl	800ca58 <vTaskSwitchContext>
	prvTaskExitError();
 800e160:	f7ff ff1c 	bl	800df9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e164:	2300      	movs	r3, #0
}
 800e166:	4618      	mov	r0, r3
 800e168:	3718      	adds	r7, #24
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	e000ed00 	.word	0xe000ed00
 800e174:	410fc271 	.word	0x410fc271
 800e178:	410fc270 	.word	0x410fc270
 800e17c:	e000e400 	.word	0xe000e400
 800e180:	20001618 	.word	0x20001618
 800e184:	2000161c 	.word	0x2000161c
 800e188:	e000ed20 	.word	0xe000ed20
 800e18c:	20000014 	.word	0x20000014
 800e190:	e000ef34 	.word	0xe000ef34

0800e194 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
	__asm volatile
 800e19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e19e:	f383 8811 	msr	BASEPRI, r3
 800e1a2:	f3bf 8f6f 	isb	sy
 800e1a6:	f3bf 8f4f 	dsb	sy
 800e1aa:	607b      	str	r3, [r7, #4]
}
 800e1ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e1ae:	4b0f      	ldr	r3, [pc, #60]	; (800e1ec <vPortEnterCritical+0x58>)
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	3301      	adds	r3, #1
 800e1b4:	4a0d      	ldr	r2, [pc, #52]	; (800e1ec <vPortEnterCritical+0x58>)
 800e1b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e1b8:	4b0c      	ldr	r3, [pc, #48]	; (800e1ec <vPortEnterCritical+0x58>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d10f      	bne.n	800e1e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e1c0:	4b0b      	ldr	r3, [pc, #44]	; (800e1f0 <vPortEnterCritical+0x5c>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00a      	beq.n	800e1e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800e1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1ce:	f383 8811 	msr	BASEPRI, r3
 800e1d2:	f3bf 8f6f 	isb	sy
 800e1d6:	f3bf 8f4f 	dsb	sy
 800e1da:	603b      	str	r3, [r7, #0]
}
 800e1dc:	bf00      	nop
 800e1de:	e7fe      	b.n	800e1de <vPortEnterCritical+0x4a>
	}
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	20000014 	.word	0x20000014
 800e1f0:	e000ed04 	.word	0xe000ed04

0800e1f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	b083      	sub	sp, #12
 800e1f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e1fa:	4b12      	ldr	r3, [pc, #72]	; (800e244 <vPortExitCritical+0x50>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d10a      	bne.n	800e218 <vPortExitCritical+0x24>
	__asm volatile
 800e202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	607b      	str	r3, [r7, #4]
}
 800e214:	bf00      	nop
 800e216:	e7fe      	b.n	800e216 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e218:	4b0a      	ldr	r3, [pc, #40]	; (800e244 <vPortExitCritical+0x50>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	3b01      	subs	r3, #1
 800e21e:	4a09      	ldr	r2, [pc, #36]	; (800e244 <vPortExitCritical+0x50>)
 800e220:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e222:	4b08      	ldr	r3, [pc, #32]	; (800e244 <vPortExitCritical+0x50>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d105      	bne.n	800e236 <vPortExitCritical+0x42>
 800e22a:	2300      	movs	r3, #0
 800e22c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	f383 8811 	msr	BASEPRI, r3
}
 800e234:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e236:	bf00      	nop
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr
 800e242:	bf00      	nop
 800e244:	20000014 	.word	0x20000014
	...

0800e250 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e250:	f3ef 8009 	mrs	r0, PSP
 800e254:	f3bf 8f6f 	isb	sy
 800e258:	4b15      	ldr	r3, [pc, #84]	; (800e2b0 <pxCurrentTCBConst>)
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	f01e 0f10 	tst.w	lr, #16
 800e260:	bf08      	it	eq
 800e262:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e266:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e26a:	6010      	str	r0, [r2, #0]
 800e26c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e270:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e274:	f380 8811 	msr	BASEPRI, r0
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	f3bf 8f6f 	isb	sy
 800e280:	f7fe fbea 	bl	800ca58 <vTaskSwitchContext>
 800e284:	f04f 0000 	mov.w	r0, #0
 800e288:	f380 8811 	msr	BASEPRI, r0
 800e28c:	bc09      	pop	{r0, r3}
 800e28e:	6819      	ldr	r1, [r3, #0]
 800e290:	6808      	ldr	r0, [r1, #0]
 800e292:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e296:	f01e 0f10 	tst.w	lr, #16
 800e29a:	bf08      	it	eq
 800e29c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e2a0:	f380 8809 	msr	PSP, r0
 800e2a4:	f3bf 8f6f 	isb	sy
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	f3af 8000 	nop.w

0800e2b0 <pxCurrentTCBConst>:
 800e2b0:	20000fec 	.word	0x20000fec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e2b4:	bf00      	nop
 800e2b6:	bf00      	nop

0800e2b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b082      	sub	sp, #8
 800e2bc:	af00      	add	r7, sp, #0
	__asm volatile
 800e2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c2:	f383 8811 	msr	BASEPRI, r3
 800e2c6:	f3bf 8f6f 	isb	sy
 800e2ca:	f3bf 8f4f 	dsb	sy
 800e2ce:	607b      	str	r3, [r7, #4]
}
 800e2d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e2d2:	f7fe fb07 	bl	800c8e4 <xTaskIncrementTick>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d003      	beq.n	800e2e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e2dc:	4b06      	ldr	r3, [pc, #24]	; (800e2f8 <xPortSysTickHandler+0x40>)
 800e2de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2e2:	601a      	str	r2, [r3, #0]
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	f383 8811 	msr	BASEPRI, r3
}
 800e2ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e2f0:	bf00      	nop
 800e2f2:	3708      	adds	r7, #8
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}
 800e2f8:	e000ed04 	.word	0xe000ed04

0800e2fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e2fc:	b480      	push	{r7}
 800e2fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e300:	4b0b      	ldr	r3, [pc, #44]	; (800e330 <vPortSetupTimerInterrupt+0x34>)
 800e302:	2200      	movs	r2, #0
 800e304:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e306:	4b0b      	ldr	r3, [pc, #44]	; (800e334 <vPortSetupTimerInterrupt+0x38>)
 800e308:	2200      	movs	r2, #0
 800e30a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e30c:	4b0a      	ldr	r3, [pc, #40]	; (800e338 <vPortSetupTimerInterrupt+0x3c>)
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a0a      	ldr	r2, [pc, #40]	; (800e33c <vPortSetupTimerInterrupt+0x40>)
 800e312:	fba2 2303 	umull	r2, r3, r2, r3
 800e316:	099b      	lsrs	r3, r3, #6
 800e318:	4a09      	ldr	r2, [pc, #36]	; (800e340 <vPortSetupTimerInterrupt+0x44>)
 800e31a:	3b01      	subs	r3, #1
 800e31c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e31e:	4b04      	ldr	r3, [pc, #16]	; (800e330 <vPortSetupTimerInterrupt+0x34>)
 800e320:	2207      	movs	r2, #7
 800e322:	601a      	str	r2, [r3, #0]
}
 800e324:	bf00      	nop
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop
 800e330:	e000e010 	.word	0xe000e010
 800e334:	e000e018 	.word	0xe000e018
 800e338:	20000008 	.word	0x20000008
 800e33c:	10624dd3 	.word	0x10624dd3
 800e340:	e000e014 	.word	0xe000e014

0800e344 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e344:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e354 <vPortEnableVFP+0x10>
 800e348:	6801      	ldr	r1, [r0, #0]
 800e34a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e34e:	6001      	str	r1, [r0, #0]
 800e350:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e352:	bf00      	nop
 800e354:	e000ed88 	.word	0xe000ed88

0800e358 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e358:	b480      	push	{r7}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e35e:	f3ef 8305 	mrs	r3, IPSR
 800e362:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2b0f      	cmp	r3, #15
 800e368:	d914      	bls.n	800e394 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e36a:	4a17      	ldr	r2, [pc, #92]	; (800e3c8 <vPortValidateInterruptPriority+0x70>)
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	4413      	add	r3, r2
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e374:	4b15      	ldr	r3, [pc, #84]	; (800e3cc <vPortValidateInterruptPriority+0x74>)
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	7afa      	ldrb	r2, [r7, #11]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d20a      	bcs.n	800e394 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e382:	f383 8811 	msr	BASEPRI, r3
 800e386:	f3bf 8f6f 	isb	sy
 800e38a:	f3bf 8f4f 	dsb	sy
 800e38e:	607b      	str	r3, [r7, #4]
}
 800e390:	bf00      	nop
 800e392:	e7fe      	b.n	800e392 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e394:	4b0e      	ldr	r3, [pc, #56]	; (800e3d0 <vPortValidateInterruptPriority+0x78>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e39c:	4b0d      	ldr	r3, [pc, #52]	; (800e3d4 <vPortValidateInterruptPriority+0x7c>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d90a      	bls.n	800e3ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a8:	f383 8811 	msr	BASEPRI, r3
 800e3ac:	f3bf 8f6f 	isb	sy
 800e3b0:	f3bf 8f4f 	dsb	sy
 800e3b4:	603b      	str	r3, [r7, #0]
}
 800e3b6:	bf00      	nop
 800e3b8:	e7fe      	b.n	800e3b8 <vPortValidateInterruptPriority+0x60>
	}
 800e3ba:	bf00      	nop
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr
 800e3c6:	bf00      	nop
 800e3c8:	e000e3f0 	.word	0xe000e3f0
 800e3cc:	20001618 	.word	0x20001618
 800e3d0:	e000ed0c 	.word	0xe000ed0c
 800e3d4:	2000161c 	.word	0x2000161c

0800e3d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b08a      	sub	sp, #40	; 0x28
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e3e4:	f7fe f9b0 	bl	800c748 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e3e8:	4b5b      	ldr	r3, [pc, #364]	; (800e558 <pvPortMalloc+0x180>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d101      	bne.n	800e3f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e3f0:	f000 f920 	bl	800e634 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e3f4:	4b59      	ldr	r3, [pc, #356]	; (800e55c <pvPortMalloc+0x184>)
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	4013      	ands	r3, r2
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	f040 8093 	bne.w	800e528 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	d01d      	beq.n	800e444 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e408:	2208      	movs	r2, #8
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	4413      	add	r3, r2
 800e40e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f003 0307 	and.w	r3, r3, #7
 800e416:	2b00      	cmp	r3, #0
 800e418:	d014      	beq.n	800e444 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f023 0307 	bic.w	r3, r3, #7
 800e420:	3308      	adds	r3, #8
 800e422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f003 0307 	and.w	r3, r3, #7
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d00a      	beq.n	800e444 <pvPortMalloc+0x6c>
	__asm volatile
 800e42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	617b      	str	r3, [r7, #20]
}
 800e440:	bf00      	nop
 800e442:	e7fe      	b.n	800e442 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d06e      	beq.n	800e528 <pvPortMalloc+0x150>
 800e44a:	4b45      	ldr	r3, [pc, #276]	; (800e560 <pvPortMalloc+0x188>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	429a      	cmp	r2, r3
 800e452:	d869      	bhi.n	800e528 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e454:	4b43      	ldr	r3, [pc, #268]	; (800e564 <pvPortMalloc+0x18c>)
 800e456:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e458:	4b42      	ldr	r3, [pc, #264]	; (800e564 <pvPortMalloc+0x18c>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e45e:	e004      	b.n	800e46a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e462:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	685b      	ldr	r3, [r3, #4]
 800e46e:	687a      	ldr	r2, [r7, #4]
 800e470:	429a      	cmp	r2, r3
 800e472:	d903      	bls.n	800e47c <pvPortMalloc+0xa4>
 800e474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d1f1      	bne.n	800e460 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e47c:	4b36      	ldr	r3, [pc, #216]	; (800e558 <pvPortMalloc+0x180>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e482:	429a      	cmp	r2, r3
 800e484:	d050      	beq.n	800e528 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e486:	6a3b      	ldr	r3, [r7, #32]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	2208      	movs	r2, #8
 800e48c:	4413      	add	r3, r2
 800e48e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	681a      	ldr	r2, [r3, #0]
 800e494:	6a3b      	ldr	r3, [r7, #32]
 800e496:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	685a      	ldr	r2, [r3, #4]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	1ad2      	subs	r2, r2, r3
 800e4a0:	2308      	movs	r3, #8
 800e4a2:	005b      	lsls	r3, r3, #1
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d91f      	bls.n	800e4e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e4a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4413      	add	r3, r2
 800e4ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	f003 0307 	and.w	r3, r3, #7
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d00a      	beq.n	800e4d0 <pvPortMalloc+0xf8>
	__asm volatile
 800e4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4be:	f383 8811 	msr	BASEPRI, r3
 800e4c2:	f3bf 8f6f 	isb	sy
 800e4c6:	f3bf 8f4f 	dsb	sy
 800e4ca:	613b      	str	r3, [r7, #16]
}
 800e4cc:	bf00      	nop
 800e4ce:	e7fe      	b.n	800e4ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	685a      	ldr	r2, [r3, #4]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	1ad2      	subs	r2, r2, r3
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e4e2:	69b8      	ldr	r0, [r7, #24]
 800e4e4:	f000 f908 	bl	800e6f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e4e8:	4b1d      	ldr	r3, [pc, #116]	; (800e560 <pvPortMalloc+0x188>)
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ee:	685b      	ldr	r3, [r3, #4]
 800e4f0:	1ad3      	subs	r3, r2, r3
 800e4f2:	4a1b      	ldr	r2, [pc, #108]	; (800e560 <pvPortMalloc+0x188>)
 800e4f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e4f6:	4b1a      	ldr	r3, [pc, #104]	; (800e560 <pvPortMalloc+0x188>)
 800e4f8:	681a      	ldr	r2, [r3, #0]
 800e4fa:	4b1b      	ldr	r3, [pc, #108]	; (800e568 <pvPortMalloc+0x190>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d203      	bcs.n	800e50a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e502:	4b17      	ldr	r3, [pc, #92]	; (800e560 <pvPortMalloc+0x188>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4a18      	ldr	r2, [pc, #96]	; (800e568 <pvPortMalloc+0x190>)
 800e508:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50c:	685a      	ldr	r2, [r3, #4]
 800e50e:	4b13      	ldr	r3, [pc, #76]	; (800e55c <pvPortMalloc+0x184>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	431a      	orrs	r2, r3
 800e514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e516:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	2200      	movs	r2, #0
 800e51c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e51e:	4b13      	ldr	r3, [pc, #76]	; (800e56c <pvPortMalloc+0x194>)
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	3301      	adds	r3, #1
 800e524:	4a11      	ldr	r2, [pc, #68]	; (800e56c <pvPortMalloc+0x194>)
 800e526:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e528:	f7fe f91c 	bl	800c764 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e52c:	69fb      	ldr	r3, [r7, #28]
 800e52e:	f003 0307 	and.w	r3, r3, #7
 800e532:	2b00      	cmp	r3, #0
 800e534:	d00a      	beq.n	800e54c <pvPortMalloc+0x174>
	__asm volatile
 800e536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e53a:	f383 8811 	msr	BASEPRI, r3
 800e53e:	f3bf 8f6f 	isb	sy
 800e542:	f3bf 8f4f 	dsb	sy
 800e546:	60fb      	str	r3, [r7, #12]
}
 800e548:	bf00      	nop
 800e54a:	e7fe      	b.n	800e54a <pvPortMalloc+0x172>
	return pvReturn;
 800e54c:	69fb      	ldr	r3, [r7, #28]
}
 800e54e:	4618      	mov	r0, r3
 800e550:	3728      	adds	r7, #40	; 0x28
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	20009568 	.word	0x20009568
 800e55c:	2000957c 	.word	0x2000957c
 800e560:	2000956c 	.word	0x2000956c
 800e564:	20009560 	.word	0x20009560
 800e568:	20009570 	.word	0x20009570
 800e56c:	20009574 	.word	0x20009574

0800e570 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d04d      	beq.n	800e61e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e582:	2308      	movs	r3, #8
 800e584:	425b      	negs	r3, r3
 800e586:	697a      	ldr	r2, [r7, #20]
 800e588:	4413      	add	r3, r2
 800e58a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e590:	693b      	ldr	r3, [r7, #16]
 800e592:	685a      	ldr	r2, [r3, #4]
 800e594:	4b24      	ldr	r3, [pc, #144]	; (800e628 <vPortFree+0xb8>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4013      	ands	r3, r2
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d10a      	bne.n	800e5b4 <vPortFree+0x44>
	__asm volatile
 800e59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5a2:	f383 8811 	msr	BASEPRI, r3
 800e5a6:	f3bf 8f6f 	isb	sy
 800e5aa:	f3bf 8f4f 	dsb	sy
 800e5ae:	60fb      	str	r3, [r7, #12]
}
 800e5b0:	bf00      	nop
 800e5b2:	e7fe      	b.n	800e5b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00a      	beq.n	800e5d2 <vPortFree+0x62>
	__asm volatile
 800e5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c0:	f383 8811 	msr	BASEPRI, r3
 800e5c4:	f3bf 8f6f 	isb	sy
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	60bb      	str	r3, [r7, #8]
}
 800e5ce:	bf00      	nop
 800e5d0:	e7fe      	b.n	800e5d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	685a      	ldr	r2, [r3, #4]
 800e5d6:	4b14      	ldr	r3, [pc, #80]	; (800e628 <vPortFree+0xb8>)
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4013      	ands	r3, r2
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d01e      	beq.n	800e61e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d11a      	bne.n	800e61e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e5e8:	693b      	ldr	r3, [r7, #16]
 800e5ea:	685a      	ldr	r2, [r3, #4]
 800e5ec:	4b0e      	ldr	r3, [pc, #56]	; (800e628 <vPortFree+0xb8>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	43db      	mvns	r3, r3
 800e5f2:	401a      	ands	r2, r3
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e5f8:	f7fe f8a6 	bl	800c748 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	685a      	ldr	r2, [r3, #4]
 800e600:	4b0a      	ldr	r3, [pc, #40]	; (800e62c <vPortFree+0xbc>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4413      	add	r3, r2
 800e606:	4a09      	ldr	r2, [pc, #36]	; (800e62c <vPortFree+0xbc>)
 800e608:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e60a:	6938      	ldr	r0, [r7, #16]
 800e60c:	f000 f874 	bl	800e6f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e610:	4b07      	ldr	r3, [pc, #28]	; (800e630 <vPortFree+0xc0>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3301      	adds	r3, #1
 800e616:	4a06      	ldr	r2, [pc, #24]	; (800e630 <vPortFree+0xc0>)
 800e618:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e61a:	f7fe f8a3 	bl	800c764 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e61e:	bf00      	nop
 800e620:	3718      	adds	r7, #24
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	2000957c 	.word	0x2000957c
 800e62c:	2000956c 	.word	0x2000956c
 800e630:	20009578 	.word	0x20009578

0800e634 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e634:	b480      	push	{r7}
 800e636:	b085      	sub	sp, #20
 800e638:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e63a:	f647 7340 	movw	r3, #32576	; 0x7f40
 800e63e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e640:	4b27      	ldr	r3, [pc, #156]	; (800e6e0 <prvHeapInit+0xac>)
 800e642:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f003 0307 	and.w	r3, r3, #7
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d00c      	beq.n	800e668 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	3307      	adds	r3, #7
 800e652:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	f023 0307 	bic.w	r3, r3, #7
 800e65a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e65c:	68ba      	ldr	r2, [r7, #8]
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	4a1f      	ldr	r2, [pc, #124]	; (800e6e0 <prvHeapInit+0xac>)
 800e664:	4413      	add	r3, r2
 800e666:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e66c:	4a1d      	ldr	r2, [pc, #116]	; (800e6e4 <prvHeapInit+0xb0>)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e672:	4b1c      	ldr	r3, [pc, #112]	; (800e6e4 <prvHeapInit+0xb0>)
 800e674:	2200      	movs	r2, #0
 800e676:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	68ba      	ldr	r2, [r7, #8]
 800e67c:	4413      	add	r3, r2
 800e67e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e680:	2208      	movs	r2, #8
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	1a9b      	subs	r3, r3, r2
 800e686:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	f023 0307 	bic.w	r3, r3, #7
 800e68e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	4a15      	ldr	r2, [pc, #84]	; (800e6e8 <prvHeapInit+0xb4>)
 800e694:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e696:	4b14      	ldr	r3, [pc, #80]	; (800e6e8 <prvHeapInit+0xb4>)
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	2200      	movs	r2, #0
 800e69c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e69e:	4b12      	ldr	r3, [pc, #72]	; (800e6e8 <prvHeapInit+0xb4>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	1ad2      	subs	r2, r2, r3
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e6b4:	4b0c      	ldr	r3, [pc, #48]	; (800e6e8 <prvHeapInit+0xb4>)
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	4a0a      	ldr	r2, [pc, #40]	; (800e6ec <prvHeapInit+0xb8>)
 800e6c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	4a09      	ldr	r2, [pc, #36]	; (800e6f0 <prvHeapInit+0xbc>)
 800e6ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e6cc:	4b09      	ldr	r3, [pc, #36]	; (800e6f4 <prvHeapInit+0xc0>)
 800e6ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e6d2:	601a      	str	r2, [r3, #0]
}
 800e6d4:	bf00      	nop
 800e6d6:	3714      	adds	r7, #20
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr
 800e6e0:	20001620 	.word	0x20001620
 800e6e4:	20009560 	.word	0x20009560
 800e6e8:	20009568 	.word	0x20009568
 800e6ec:	20009570 	.word	0x20009570
 800e6f0:	2000956c 	.word	0x2000956c
 800e6f4:	2000957c 	.word	0x2000957c

0800e6f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e700:	4b28      	ldr	r3, [pc, #160]	; (800e7a4 <prvInsertBlockIntoFreeList+0xac>)
 800e702:	60fb      	str	r3, [r7, #12]
 800e704:	e002      	b.n	800e70c <prvInsertBlockIntoFreeList+0x14>
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	60fb      	str	r3, [r7, #12]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	429a      	cmp	r2, r3
 800e714:	d8f7      	bhi.n	800e706 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	4413      	add	r3, r2
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	429a      	cmp	r2, r3
 800e726:	d108      	bne.n	800e73a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	685a      	ldr	r2, [r3, #4]
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	441a      	add	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	441a      	add	r2, r3
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d118      	bne.n	800e780 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	681a      	ldr	r2, [r3, #0]
 800e752:	4b15      	ldr	r3, [pc, #84]	; (800e7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	429a      	cmp	r2, r3
 800e758:	d00d      	beq.n	800e776 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	685a      	ldr	r2, [r3, #4]
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	441a      	add	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	e008      	b.n	800e788 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e776:	4b0c      	ldr	r3, [pc, #48]	; (800e7a8 <prvInsertBlockIntoFreeList+0xb0>)
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	601a      	str	r2, [r3, #0]
 800e77e:	e003      	b.n	800e788 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d002      	beq.n	800e796 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e796:	bf00      	nop
 800e798:	3714      	adds	r7, #20
 800e79a:	46bd      	mov	sp, r7
 800e79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	20009560 	.word	0x20009560
 800e7a8:	20009568 	.word	0x20009568

0800e7ac <__cvt>:
 800e7ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7b0:	ec55 4b10 	vmov	r4, r5, d0
 800e7b4:	2d00      	cmp	r5, #0
 800e7b6:	460e      	mov	r6, r1
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	462b      	mov	r3, r5
 800e7bc:	bfbb      	ittet	lt
 800e7be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e7c2:	461d      	movlt	r5, r3
 800e7c4:	2300      	movge	r3, #0
 800e7c6:	232d      	movlt	r3, #45	; 0x2d
 800e7c8:	700b      	strb	r3, [r1, #0]
 800e7ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e7d0:	4691      	mov	r9, r2
 800e7d2:	f023 0820 	bic.w	r8, r3, #32
 800e7d6:	bfbc      	itt	lt
 800e7d8:	4622      	movlt	r2, r4
 800e7da:	4614      	movlt	r4, r2
 800e7dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e7e0:	d005      	beq.n	800e7ee <__cvt+0x42>
 800e7e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e7e6:	d100      	bne.n	800e7ea <__cvt+0x3e>
 800e7e8:	3601      	adds	r6, #1
 800e7ea:	2102      	movs	r1, #2
 800e7ec:	e000      	b.n	800e7f0 <__cvt+0x44>
 800e7ee:	2103      	movs	r1, #3
 800e7f0:	ab03      	add	r3, sp, #12
 800e7f2:	9301      	str	r3, [sp, #4]
 800e7f4:	ab02      	add	r3, sp, #8
 800e7f6:	9300      	str	r3, [sp, #0]
 800e7f8:	ec45 4b10 	vmov	d0, r4, r5
 800e7fc:	4653      	mov	r3, sl
 800e7fe:	4632      	mov	r2, r6
 800e800:	f000 fe9a 	bl	800f538 <_dtoa_r>
 800e804:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e808:	4607      	mov	r7, r0
 800e80a:	d102      	bne.n	800e812 <__cvt+0x66>
 800e80c:	f019 0f01 	tst.w	r9, #1
 800e810:	d022      	beq.n	800e858 <__cvt+0xac>
 800e812:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e816:	eb07 0906 	add.w	r9, r7, r6
 800e81a:	d110      	bne.n	800e83e <__cvt+0x92>
 800e81c:	783b      	ldrb	r3, [r7, #0]
 800e81e:	2b30      	cmp	r3, #48	; 0x30
 800e820:	d10a      	bne.n	800e838 <__cvt+0x8c>
 800e822:	2200      	movs	r2, #0
 800e824:	2300      	movs	r3, #0
 800e826:	4620      	mov	r0, r4
 800e828:	4629      	mov	r1, r5
 800e82a:	f7f2 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800e82e:	b918      	cbnz	r0, 800e838 <__cvt+0x8c>
 800e830:	f1c6 0601 	rsb	r6, r6, #1
 800e834:	f8ca 6000 	str.w	r6, [sl]
 800e838:	f8da 3000 	ldr.w	r3, [sl]
 800e83c:	4499      	add	r9, r3
 800e83e:	2200      	movs	r2, #0
 800e840:	2300      	movs	r3, #0
 800e842:	4620      	mov	r0, r4
 800e844:	4629      	mov	r1, r5
 800e846:	f7f2 f947 	bl	8000ad8 <__aeabi_dcmpeq>
 800e84a:	b108      	cbz	r0, 800e850 <__cvt+0xa4>
 800e84c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e850:	2230      	movs	r2, #48	; 0x30
 800e852:	9b03      	ldr	r3, [sp, #12]
 800e854:	454b      	cmp	r3, r9
 800e856:	d307      	bcc.n	800e868 <__cvt+0xbc>
 800e858:	9b03      	ldr	r3, [sp, #12]
 800e85a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e85c:	1bdb      	subs	r3, r3, r7
 800e85e:	4638      	mov	r0, r7
 800e860:	6013      	str	r3, [r2, #0]
 800e862:	b004      	add	sp, #16
 800e864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e868:	1c59      	adds	r1, r3, #1
 800e86a:	9103      	str	r1, [sp, #12]
 800e86c:	701a      	strb	r2, [r3, #0]
 800e86e:	e7f0      	b.n	800e852 <__cvt+0xa6>

0800e870 <__exponent>:
 800e870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e872:	4603      	mov	r3, r0
 800e874:	2900      	cmp	r1, #0
 800e876:	bfb8      	it	lt
 800e878:	4249      	neglt	r1, r1
 800e87a:	f803 2b02 	strb.w	r2, [r3], #2
 800e87e:	bfb4      	ite	lt
 800e880:	222d      	movlt	r2, #45	; 0x2d
 800e882:	222b      	movge	r2, #43	; 0x2b
 800e884:	2909      	cmp	r1, #9
 800e886:	7042      	strb	r2, [r0, #1]
 800e888:	dd2a      	ble.n	800e8e0 <__exponent+0x70>
 800e88a:	f10d 0207 	add.w	r2, sp, #7
 800e88e:	4617      	mov	r7, r2
 800e890:	260a      	movs	r6, #10
 800e892:	4694      	mov	ip, r2
 800e894:	fb91 f5f6 	sdiv	r5, r1, r6
 800e898:	fb06 1415 	mls	r4, r6, r5, r1
 800e89c:	3430      	adds	r4, #48	; 0x30
 800e89e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e8a2:	460c      	mov	r4, r1
 800e8a4:	2c63      	cmp	r4, #99	; 0x63
 800e8a6:	f102 32ff 	add.w	r2, r2, #4294967295
 800e8aa:	4629      	mov	r1, r5
 800e8ac:	dcf1      	bgt.n	800e892 <__exponent+0x22>
 800e8ae:	3130      	adds	r1, #48	; 0x30
 800e8b0:	f1ac 0402 	sub.w	r4, ip, #2
 800e8b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e8b8:	1c41      	adds	r1, r0, #1
 800e8ba:	4622      	mov	r2, r4
 800e8bc:	42ba      	cmp	r2, r7
 800e8be:	d30a      	bcc.n	800e8d6 <__exponent+0x66>
 800e8c0:	f10d 0209 	add.w	r2, sp, #9
 800e8c4:	eba2 020c 	sub.w	r2, r2, ip
 800e8c8:	42bc      	cmp	r4, r7
 800e8ca:	bf88      	it	hi
 800e8cc:	2200      	movhi	r2, #0
 800e8ce:	4413      	add	r3, r2
 800e8d0:	1a18      	subs	r0, r3, r0
 800e8d2:	b003      	add	sp, #12
 800e8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e8da:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e8de:	e7ed      	b.n	800e8bc <__exponent+0x4c>
 800e8e0:	2330      	movs	r3, #48	; 0x30
 800e8e2:	3130      	adds	r1, #48	; 0x30
 800e8e4:	7083      	strb	r3, [r0, #2]
 800e8e6:	70c1      	strb	r1, [r0, #3]
 800e8e8:	1d03      	adds	r3, r0, #4
 800e8ea:	e7f1      	b.n	800e8d0 <__exponent+0x60>

0800e8ec <_printf_float>:
 800e8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f0:	ed2d 8b02 	vpush	{d8}
 800e8f4:	b08d      	sub	sp, #52	; 0x34
 800e8f6:	460c      	mov	r4, r1
 800e8f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e8fc:	4616      	mov	r6, r2
 800e8fe:	461f      	mov	r7, r3
 800e900:	4605      	mov	r5, r0
 800e902:	f000 fcb5 	bl	800f270 <_localeconv_r>
 800e906:	f8d0 a000 	ldr.w	sl, [r0]
 800e90a:	4650      	mov	r0, sl
 800e90c:	f7f1 fcb8 	bl	8000280 <strlen>
 800e910:	2300      	movs	r3, #0
 800e912:	930a      	str	r3, [sp, #40]	; 0x28
 800e914:	6823      	ldr	r3, [r4, #0]
 800e916:	9305      	str	r3, [sp, #20]
 800e918:	f8d8 3000 	ldr.w	r3, [r8]
 800e91c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e920:	3307      	adds	r3, #7
 800e922:	f023 0307 	bic.w	r3, r3, #7
 800e926:	f103 0208 	add.w	r2, r3, #8
 800e92a:	f8c8 2000 	str.w	r2, [r8]
 800e92e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e932:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e936:	9307      	str	r3, [sp, #28]
 800e938:	f8cd 8018 	str.w	r8, [sp, #24]
 800e93c:	ee08 0a10 	vmov	s16, r0
 800e940:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e944:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e948:	4b9e      	ldr	r3, [pc, #632]	; (800ebc4 <_printf_float+0x2d8>)
 800e94a:	f04f 32ff 	mov.w	r2, #4294967295
 800e94e:	f7f2 f8f5 	bl	8000b3c <__aeabi_dcmpun>
 800e952:	bb88      	cbnz	r0, 800e9b8 <_printf_float+0xcc>
 800e954:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e958:	4b9a      	ldr	r3, [pc, #616]	; (800ebc4 <_printf_float+0x2d8>)
 800e95a:	f04f 32ff 	mov.w	r2, #4294967295
 800e95e:	f7f2 f8cf 	bl	8000b00 <__aeabi_dcmple>
 800e962:	bb48      	cbnz	r0, 800e9b8 <_printf_float+0xcc>
 800e964:	2200      	movs	r2, #0
 800e966:	2300      	movs	r3, #0
 800e968:	4640      	mov	r0, r8
 800e96a:	4649      	mov	r1, r9
 800e96c:	f7f2 f8be 	bl	8000aec <__aeabi_dcmplt>
 800e970:	b110      	cbz	r0, 800e978 <_printf_float+0x8c>
 800e972:	232d      	movs	r3, #45	; 0x2d
 800e974:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e978:	4a93      	ldr	r2, [pc, #588]	; (800ebc8 <_printf_float+0x2dc>)
 800e97a:	4b94      	ldr	r3, [pc, #592]	; (800ebcc <_printf_float+0x2e0>)
 800e97c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e980:	bf94      	ite	ls
 800e982:	4690      	movls	r8, r2
 800e984:	4698      	movhi	r8, r3
 800e986:	2303      	movs	r3, #3
 800e988:	6123      	str	r3, [r4, #16]
 800e98a:	9b05      	ldr	r3, [sp, #20]
 800e98c:	f023 0304 	bic.w	r3, r3, #4
 800e990:	6023      	str	r3, [r4, #0]
 800e992:	f04f 0900 	mov.w	r9, #0
 800e996:	9700      	str	r7, [sp, #0]
 800e998:	4633      	mov	r3, r6
 800e99a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e99c:	4621      	mov	r1, r4
 800e99e:	4628      	mov	r0, r5
 800e9a0:	f000 f9da 	bl	800ed58 <_printf_common>
 800e9a4:	3001      	adds	r0, #1
 800e9a6:	f040 8090 	bne.w	800eaca <_printf_float+0x1de>
 800e9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ae:	b00d      	add	sp, #52	; 0x34
 800e9b0:	ecbd 8b02 	vpop	{d8}
 800e9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b8:	4642      	mov	r2, r8
 800e9ba:	464b      	mov	r3, r9
 800e9bc:	4640      	mov	r0, r8
 800e9be:	4649      	mov	r1, r9
 800e9c0:	f7f2 f8bc 	bl	8000b3c <__aeabi_dcmpun>
 800e9c4:	b140      	cbz	r0, 800e9d8 <_printf_float+0xec>
 800e9c6:	464b      	mov	r3, r9
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	bfbc      	itt	lt
 800e9cc:	232d      	movlt	r3, #45	; 0x2d
 800e9ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e9d2:	4a7f      	ldr	r2, [pc, #508]	; (800ebd0 <_printf_float+0x2e4>)
 800e9d4:	4b7f      	ldr	r3, [pc, #508]	; (800ebd4 <_printf_float+0x2e8>)
 800e9d6:	e7d1      	b.n	800e97c <_printf_float+0x90>
 800e9d8:	6863      	ldr	r3, [r4, #4]
 800e9da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e9de:	9206      	str	r2, [sp, #24]
 800e9e0:	1c5a      	adds	r2, r3, #1
 800e9e2:	d13f      	bne.n	800ea64 <_printf_float+0x178>
 800e9e4:	2306      	movs	r3, #6
 800e9e6:	6063      	str	r3, [r4, #4]
 800e9e8:	9b05      	ldr	r3, [sp, #20]
 800e9ea:	6861      	ldr	r1, [r4, #4]
 800e9ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	9303      	str	r3, [sp, #12]
 800e9f4:	ab0a      	add	r3, sp, #40	; 0x28
 800e9f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e9fa:	ab09      	add	r3, sp, #36	; 0x24
 800e9fc:	ec49 8b10 	vmov	d0, r8, r9
 800ea00:	9300      	str	r3, [sp, #0]
 800ea02:	6022      	str	r2, [r4, #0]
 800ea04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea08:	4628      	mov	r0, r5
 800ea0a:	f7ff fecf 	bl	800e7ac <__cvt>
 800ea0e:	9b06      	ldr	r3, [sp, #24]
 800ea10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea12:	2b47      	cmp	r3, #71	; 0x47
 800ea14:	4680      	mov	r8, r0
 800ea16:	d108      	bne.n	800ea2a <_printf_float+0x13e>
 800ea18:	1cc8      	adds	r0, r1, #3
 800ea1a:	db02      	blt.n	800ea22 <_printf_float+0x136>
 800ea1c:	6863      	ldr	r3, [r4, #4]
 800ea1e:	4299      	cmp	r1, r3
 800ea20:	dd41      	ble.n	800eaa6 <_printf_float+0x1ba>
 800ea22:	f1ab 0302 	sub.w	r3, fp, #2
 800ea26:	fa5f fb83 	uxtb.w	fp, r3
 800ea2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea2e:	d820      	bhi.n	800ea72 <_printf_float+0x186>
 800ea30:	3901      	subs	r1, #1
 800ea32:	465a      	mov	r2, fp
 800ea34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea38:	9109      	str	r1, [sp, #36]	; 0x24
 800ea3a:	f7ff ff19 	bl	800e870 <__exponent>
 800ea3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea40:	1813      	adds	r3, r2, r0
 800ea42:	2a01      	cmp	r2, #1
 800ea44:	4681      	mov	r9, r0
 800ea46:	6123      	str	r3, [r4, #16]
 800ea48:	dc02      	bgt.n	800ea50 <_printf_float+0x164>
 800ea4a:	6822      	ldr	r2, [r4, #0]
 800ea4c:	07d2      	lsls	r2, r2, #31
 800ea4e:	d501      	bpl.n	800ea54 <_printf_float+0x168>
 800ea50:	3301      	adds	r3, #1
 800ea52:	6123      	str	r3, [r4, #16]
 800ea54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d09c      	beq.n	800e996 <_printf_float+0xaa>
 800ea5c:	232d      	movs	r3, #45	; 0x2d
 800ea5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea62:	e798      	b.n	800e996 <_printf_float+0xaa>
 800ea64:	9a06      	ldr	r2, [sp, #24]
 800ea66:	2a47      	cmp	r2, #71	; 0x47
 800ea68:	d1be      	bne.n	800e9e8 <_printf_float+0xfc>
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d1bc      	bne.n	800e9e8 <_printf_float+0xfc>
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e7b9      	b.n	800e9e6 <_printf_float+0xfa>
 800ea72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ea76:	d118      	bne.n	800eaaa <_printf_float+0x1be>
 800ea78:	2900      	cmp	r1, #0
 800ea7a:	6863      	ldr	r3, [r4, #4]
 800ea7c:	dd0b      	ble.n	800ea96 <_printf_float+0x1aa>
 800ea7e:	6121      	str	r1, [r4, #16]
 800ea80:	b913      	cbnz	r3, 800ea88 <_printf_float+0x19c>
 800ea82:	6822      	ldr	r2, [r4, #0]
 800ea84:	07d0      	lsls	r0, r2, #31
 800ea86:	d502      	bpl.n	800ea8e <_printf_float+0x1a2>
 800ea88:	3301      	adds	r3, #1
 800ea8a:	440b      	add	r3, r1
 800ea8c:	6123      	str	r3, [r4, #16]
 800ea8e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ea90:	f04f 0900 	mov.w	r9, #0
 800ea94:	e7de      	b.n	800ea54 <_printf_float+0x168>
 800ea96:	b913      	cbnz	r3, 800ea9e <_printf_float+0x1b2>
 800ea98:	6822      	ldr	r2, [r4, #0]
 800ea9a:	07d2      	lsls	r2, r2, #31
 800ea9c:	d501      	bpl.n	800eaa2 <_printf_float+0x1b6>
 800ea9e:	3302      	adds	r3, #2
 800eaa0:	e7f4      	b.n	800ea8c <_printf_float+0x1a0>
 800eaa2:	2301      	movs	r3, #1
 800eaa4:	e7f2      	b.n	800ea8c <_printf_float+0x1a0>
 800eaa6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eaaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaac:	4299      	cmp	r1, r3
 800eaae:	db05      	blt.n	800eabc <_printf_float+0x1d0>
 800eab0:	6823      	ldr	r3, [r4, #0]
 800eab2:	6121      	str	r1, [r4, #16]
 800eab4:	07d8      	lsls	r0, r3, #31
 800eab6:	d5ea      	bpl.n	800ea8e <_printf_float+0x1a2>
 800eab8:	1c4b      	adds	r3, r1, #1
 800eaba:	e7e7      	b.n	800ea8c <_printf_float+0x1a0>
 800eabc:	2900      	cmp	r1, #0
 800eabe:	bfd4      	ite	le
 800eac0:	f1c1 0202 	rsble	r2, r1, #2
 800eac4:	2201      	movgt	r2, #1
 800eac6:	4413      	add	r3, r2
 800eac8:	e7e0      	b.n	800ea8c <_printf_float+0x1a0>
 800eaca:	6823      	ldr	r3, [r4, #0]
 800eacc:	055a      	lsls	r2, r3, #21
 800eace:	d407      	bmi.n	800eae0 <_printf_float+0x1f4>
 800ead0:	6923      	ldr	r3, [r4, #16]
 800ead2:	4642      	mov	r2, r8
 800ead4:	4631      	mov	r1, r6
 800ead6:	4628      	mov	r0, r5
 800ead8:	47b8      	blx	r7
 800eada:	3001      	adds	r0, #1
 800eadc:	d12c      	bne.n	800eb38 <_printf_float+0x24c>
 800eade:	e764      	b.n	800e9aa <_printf_float+0xbe>
 800eae0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eae4:	f240 80e0 	bls.w	800eca8 <_printf_float+0x3bc>
 800eae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eaec:	2200      	movs	r2, #0
 800eaee:	2300      	movs	r3, #0
 800eaf0:	f7f1 fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d034      	beq.n	800eb62 <_printf_float+0x276>
 800eaf8:	4a37      	ldr	r2, [pc, #220]	; (800ebd8 <_printf_float+0x2ec>)
 800eafa:	2301      	movs	r3, #1
 800eafc:	4631      	mov	r1, r6
 800eafe:	4628      	mov	r0, r5
 800eb00:	47b8      	blx	r7
 800eb02:	3001      	adds	r0, #1
 800eb04:	f43f af51 	beq.w	800e9aa <_printf_float+0xbe>
 800eb08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	db02      	blt.n	800eb16 <_printf_float+0x22a>
 800eb10:	6823      	ldr	r3, [r4, #0]
 800eb12:	07d8      	lsls	r0, r3, #31
 800eb14:	d510      	bpl.n	800eb38 <_printf_float+0x24c>
 800eb16:	ee18 3a10 	vmov	r3, s16
 800eb1a:	4652      	mov	r2, sl
 800eb1c:	4631      	mov	r1, r6
 800eb1e:	4628      	mov	r0, r5
 800eb20:	47b8      	blx	r7
 800eb22:	3001      	adds	r0, #1
 800eb24:	f43f af41 	beq.w	800e9aa <_printf_float+0xbe>
 800eb28:	f04f 0800 	mov.w	r8, #0
 800eb2c:	f104 091a 	add.w	r9, r4, #26
 800eb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb32:	3b01      	subs	r3, #1
 800eb34:	4543      	cmp	r3, r8
 800eb36:	dc09      	bgt.n	800eb4c <_printf_float+0x260>
 800eb38:	6823      	ldr	r3, [r4, #0]
 800eb3a:	079b      	lsls	r3, r3, #30
 800eb3c:	f100 8107 	bmi.w	800ed4e <_printf_float+0x462>
 800eb40:	68e0      	ldr	r0, [r4, #12]
 800eb42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb44:	4298      	cmp	r0, r3
 800eb46:	bfb8      	it	lt
 800eb48:	4618      	movlt	r0, r3
 800eb4a:	e730      	b.n	800e9ae <_printf_float+0xc2>
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	464a      	mov	r2, r9
 800eb50:	4631      	mov	r1, r6
 800eb52:	4628      	mov	r0, r5
 800eb54:	47b8      	blx	r7
 800eb56:	3001      	adds	r0, #1
 800eb58:	f43f af27 	beq.w	800e9aa <_printf_float+0xbe>
 800eb5c:	f108 0801 	add.w	r8, r8, #1
 800eb60:	e7e6      	b.n	800eb30 <_printf_float+0x244>
 800eb62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	dc39      	bgt.n	800ebdc <_printf_float+0x2f0>
 800eb68:	4a1b      	ldr	r2, [pc, #108]	; (800ebd8 <_printf_float+0x2ec>)
 800eb6a:	2301      	movs	r3, #1
 800eb6c:	4631      	mov	r1, r6
 800eb6e:	4628      	mov	r0, r5
 800eb70:	47b8      	blx	r7
 800eb72:	3001      	adds	r0, #1
 800eb74:	f43f af19 	beq.w	800e9aa <_printf_float+0xbe>
 800eb78:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eb7c:	4313      	orrs	r3, r2
 800eb7e:	d102      	bne.n	800eb86 <_printf_float+0x29a>
 800eb80:	6823      	ldr	r3, [r4, #0]
 800eb82:	07d9      	lsls	r1, r3, #31
 800eb84:	d5d8      	bpl.n	800eb38 <_printf_float+0x24c>
 800eb86:	ee18 3a10 	vmov	r3, s16
 800eb8a:	4652      	mov	r2, sl
 800eb8c:	4631      	mov	r1, r6
 800eb8e:	4628      	mov	r0, r5
 800eb90:	47b8      	blx	r7
 800eb92:	3001      	adds	r0, #1
 800eb94:	f43f af09 	beq.w	800e9aa <_printf_float+0xbe>
 800eb98:	f04f 0900 	mov.w	r9, #0
 800eb9c:	f104 0a1a 	add.w	sl, r4, #26
 800eba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eba2:	425b      	negs	r3, r3
 800eba4:	454b      	cmp	r3, r9
 800eba6:	dc01      	bgt.n	800ebac <_printf_float+0x2c0>
 800eba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebaa:	e792      	b.n	800ead2 <_printf_float+0x1e6>
 800ebac:	2301      	movs	r3, #1
 800ebae:	4652      	mov	r2, sl
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	f43f aef7 	beq.w	800e9aa <_printf_float+0xbe>
 800ebbc:	f109 0901 	add.w	r9, r9, #1
 800ebc0:	e7ee      	b.n	800eba0 <_printf_float+0x2b4>
 800ebc2:	bf00      	nop
 800ebc4:	7fefffff 	.word	0x7fefffff
 800ebc8:	080118f8 	.word	0x080118f8
 800ebcc:	080118fc 	.word	0x080118fc
 800ebd0:	08011900 	.word	0x08011900
 800ebd4:	08011904 	.word	0x08011904
 800ebd8:	08011908 	.word	0x08011908
 800ebdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	bfa8      	it	ge
 800ebe4:	461a      	movge	r2, r3
 800ebe6:	2a00      	cmp	r2, #0
 800ebe8:	4691      	mov	r9, r2
 800ebea:	dc37      	bgt.n	800ec5c <_printf_float+0x370>
 800ebec:	f04f 0b00 	mov.w	fp, #0
 800ebf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebf4:	f104 021a 	add.w	r2, r4, #26
 800ebf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebfa:	9305      	str	r3, [sp, #20]
 800ebfc:	eba3 0309 	sub.w	r3, r3, r9
 800ec00:	455b      	cmp	r3, fp
 800ec02:	dc33      	bgt.n	800ec6c <_printf_float+0x380>
 800ec04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	db3b      	blt.n	800ec84 <_printf_float+0x398>
 800ec0c:	6823      	ldr	r3, [r4, #0]
 800ec0e:	07da      	lsls	r2, r3, #31
 800ec10:	d438      	bmi.n	800ec84 <_printf_float+0x398>
 800ec12:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ec16:	eba2 0903 	sub.w	r9, r2, r3
 800ec1a:	9b05      	ldr	r3, [sp, #20]
 800ec1c:	1ad2      	subs	r2, r2, r3
 800ec1e:	4591      	cmp	r9, r2
 800ec20:	bfa8      	it	ge
 800ec22:	4691      	movge	r9, r2
 800ec24:	f1b9 0f00 	cmp.w	r9, #0
 800ec28:	dc35      	bgt.n	800ec96 <_printf_float+0x3aa>
 800ec2a:	f04f 0800 	mov.w	r8, #0
 800ec2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec32:	f104 0a1a 	add.w	sl, r4, #26
 800ec36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec3a:	1a9b      	subs	r3, r3, r2
 800ec3c:	eba3 0309 	sub.w	r3, r3, r9
 800ec40:	4543      	cmp	r3, r8
 800ec42:	f77f af79 	ble.w	800eb38 <_printf_float+0x24c>
 800ec46:	2301      	movs	r3, #1
 800ec48:	4652      	mov	r2, sl
 800ec4a:	4631      	mov	r1, r6
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	47b8      	blx	r7
 800ec50:	3001      	adds	r0, #1
 800ec52:	f43f aeaa 	beq.w	800e9aa <_printf_float+0xbe>
 800ec56:	f108 0801 	add.w	r8, r8, #1
 800ec5a:	e7ec      	b.n	800ec36 <_printf_float+0x34a>
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	4631      	mov	r1, r6
 800ec60:	4642      	mov	r2, r8
 800ec62:	4628      	mov	r0, r5
 800ec64:	47b8      	blx	r7
 800ec66:	3001      	adds	r0, #1
 800ec68:	d1c0      	bne.n	800ebec <_printf_float+0x300>
 800ec6a:	e69e      	b.n	800e9aa <_printf_float+0xbe>
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	4631      	mov	r1, r6
 800ec70:	4628      	mov	r0, r5
 800ec72:	9205      	str	r2, [sp, #20]
 800ec74:	47b8      	blx	r7
 800ec76:	3001      	adds	r0, #1
 800ec78:	f43f ae97 	beq.w	800e9aa <_printf_float+0xbe>
 800ec7c:	9a05      	ldr	r2, [sp, #20]
 800ec7e:	f10b 0b01 	add.w	fp, fp, #1
 800ec82:	e7b9      	b.n	800ebf8 <_printf_float+0x30c>
 800ec84:	ee18 3a10 	vmov	r3, s16
 800ec88:	4652      	mov	r2, sl
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	47b8      	blx	r7
 800ec90:	3001      	adds	r0, #1
 800ec92:	d1be      	bne.n	800ec12 <_printf_float+0x326>
 800ec94:	e689      	b.n	800e9aa <_printf_float+0xbe>
 800ec96:	9a05      	ldr	r2, [sp, #20]
 800ec98:	464b      	mov	r3, r9
 800ec9a:	4442      	add	r2, r8
 800ec9c:	4631      	mov	r1, r6
 800ec9e:	4628      	mov	r0, r5
 800eca0:	47b8      	blx	r7
 800eca2:	3001      	adds	r0, #1
 800eca4:	d1c1      	bne.n	800ec2a <_printf_float+0x33e>
 800eca6:	e680      	b.n	800e9aa <_printf_float+0xbe>
 800eca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecaa:	2a01      	cmp	r2, #1
 800ecac:	dc01      	bgt.n	800ecb2 <_printf_float+0x3c6>
 800ecae:	07db      	lsls	r3, r3, #31
 800ecb0:	d53a      	bpl.n	800ed28 <_printf_float+0x43c>
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	4642      	mov	r2, r8
 800ecb6:	4631      	mov	r1, r6
 800ecb8:	4628      	mov	r0, r5
 800ecba:	47b8      	blx	r7
 800ecbc:	3001      	adds	r0, #1
 800ecbe:	f43f ae74 	beq.w	800e9aa <_printf_float+0xbe>
 800ecc2:	ee18 3a10 	vmov	r3, s16
 800ecc6:	4652      	mov	r2, sl
 800ecc8:	4631      	mov	r1, r6
 800ecca:	4628      	mov	r0, r5
 800eccc:	47b8      	blx	r7
 800ecce:	3001      	adds	r0, #1
 800ecd0:	f43f ae6b 	beq.w	800e9aa <_printf_float+0xbe>
 800ecd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ecd8:	2200      	movs	r2, #0
 800ecda:	2300      	movs	r3, #0
 800ecdc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ece0:	f7f1 fefa 	bl	8000ad8 <__aeabi_dcmpeq>
 800ece4:	b9d8      	cbnz	r0, 800ed1e <_printf_float+0x432>
 800ece6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ecea:	f108 0201 	add.w	r2, r8, #1
 800ecee:	4631      	mov	r1, r6
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	47b8      	blx	r7
 800ecf4:	3001      	adds	r0, #1
 800ecf6:	d10e      	bne.n	800ed16 <_printf_float+0x42a>
 800ecf8:	e657      	b.n	800e9aa <_printf_float+0xbe>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	4652      	mov	r2, sl
 800ecfe:	4631      	mov	r1, r6
 800ed00:	4628      	mov	r0, r5
 800ed02:	47b8      	blx	r7
 800ed04:	3001      	adds	r0, #1
 800ed06:	f43f ae50 	beq.w	800e9aa <_printf_float+0xbe>
 800ed0a:	f108 0801 	add.w	r8, r8, #1
 800ed0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed10:	3b01      	subs	r3, #1
 800ed12:	4543      	cmp	r3, r8
 800ed14:	dcf1      	bgt.n	800ecfa <_printf_float+0x40e>
 800ed16:	464b      	mov	r3, r9
 800ed18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed1c:	e6da      	b.n	800ead4 <_printf_float+0x1e8>
 800ed1e:	f04f 0800 	mov.w	r8, #0
 800ed22:	f104 0a1a 	add.w	sl, r4, #26
 800ed26:	e7f2      	b.n	800ed0e <_printf_float+0x422>
 800ed28:	2301      	movs	r3, #1
 800ed2a:	4642      	mov	r2, r8
 800ed2c:	e7df      	b.n	800ecee <_printf_float+0x402>
 800ed2e:	2301      	movs	r3, #1
 800ed30:	464a      	mov	r2, r9
 800ed32:	4631      	mov	r1, r6
 800ed34:	4628      	mov	r0, r5
 800ed36:	47b8      	blx	r7
 800ed38:	3001      	adds	r0, #1
 800ed3a:	f43f ae36 	beq.w	800e9aa <_printf_float+0xbe>
 800ed3e:	f108 0801 	add.w	r8, r8, #1
 800ed42:	68e3      	ldr	r3, [r4, #12]
 800ed44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed46:	1a5b      	subs	r3, r3, r1
 800ed48:	4543      	cmp	r3, r8
 800ed4a:	dcf0      	bgt.n	800ed2e <_printf_float+0x442>
 800ed4c:	e6f8      	b.n	800eb40 <_printf_float+0x254>
 800ed4e:	f04f 0800 	mov.w	r8, #0
 800ed52:	f104 0919 	add.w	r9, r4, #25
 800ed56:	e7f4      	b.n	800ed42 <_printf_float+0x456>

0800ed58 <_printf_common>:
 800ed58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed5c:	4616      	mov	r6, r2
 800ed5e:	4699      	mov	r9, r3
 800ed60:	688a      	ldr	r2, [r1, #8]
 800ed62:	690b      	ldr	r3, [r1, #16]
 800ed64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	bfb8      	it	lt
 800ed6c:	4613      	movlt	r3, r2
 800ed6e:	6033      	str	r3, [r6, #0]
 800ed70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed74:	4607      	mov	r7, r0
 800ed76:	460c      	mov	r4, r1
 800ed78:	b10a      	cbz	r2, 800ed7e <_printf_common+0x26>
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	6033      	str	r3, [r6, #0]
 800ed7e:	6823      	ldr	r3, [r4, #0]
 800ed80:	0699      	lsls	r1, r3, #26
 800ed82:	bf42      	ittt	mi
 800ed84:	6833      	ldrmi	r3, [r6, #0]
 800ed86:	3302      	addmi	r3, #2
 800ed88:	6033      	strmi	r3, [r6, #0]
 800ed8a:	6825      	ldr	r5, [r4, #0]
 800ed8c:	f015 0506 	ands.w	r5, r5, #6
 800ed90:	d106      	bne.n	800eda0 <_printf_common+0x48>
 800ed92:	f104 0a19 	add.w	sl, r4, #25
 800ed96:	68e3      	ldr	r3, [r4, #12]
 800ed98:	6832      	ldr	r2, [r6, #0]
 800ed9a:	1a9b      	subs	r3, r3, r2
 800ed9c:	42ab      	cmp	r3, r5
 800ed9e:	dc26      	bgt.n	800edee <_printf_common+0x96>
 800eda0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eda4:	1e13      	subs	r3, r2, #0
 800eda6:	6822      	ldr	r2, [r4, #0]
 800eda8:	bf18      	it	ne
 800edaa:	2301      	movne	r3, #1
 800edac:	0692      	lsls	r2, r2, #26
 800edae:	d42b      	bmi.n	800ee08 <_printf_common+0xb0>
 800edb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edb4:	4649      	mov	r1, r9
 800edb6:	4638      	mov	r0, r7
 800edb8:	47c0      	blx	r8
 800edba:	3001      	adds	r0, #1
 800edbc:	d01e      	beq.n	800edfc <_printf_common+0xa4>
 800edbe:	6823      	ldr	r3, [r4, #0]
 800edc0:	6922      	ldr	r2, [r4, #16]
 800edc2:	f003 0306 	and.w	r3, r3, #6
 800edc6:	2b04      	cmp	r3, #4
 800edc8:	bf02      	ittt	eq
 800edca:	68e5      	ldreq	r5, [r4, #12]
 800edcc:	6833      	ldreq	r3, [r6, #0]
 800edce:	1aed      	subeq	r5, r5, r3
 800edd0:	68a3      	ldr	r3, [r4, #8]
 800edd2:	bf0c      	ite	eq
 800edd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800edd8:	2500      	movne	r5, #0
 800edda:	4293      	cmp	r3, r2
 800eddc:	bfc4      	itt	gt
 800edde:	1a9b      	subgt	r3, r3, r2
 800ede0:	18ed      	addgt	r5, r5, r3
 800ede2:	2600      	movs	r6, #0
 800ede4:	341a      	adds	r4, #26
 800ede6:	42b5      	cmp	r5, r6
 800ede8:	d11a      	bne.n	800ee20 <_printf_common+0xc8>
 800edea:	2000      	movs	r0, #0
 800edec:	e008      	b.n	800ee00 <_printf_common+0xa8>
 800edee:	2301      	movs	r3, #1
 800edf0:	4652      	mov	r2, sl
 800edf2:	4649      	mov	r1, r9
 800edf4:	4638      	mov	r0, r7
 800edf6:	47c0      	blx	r8
 800edf8:	3001      	adds	r0, #1
 800edfa:	d103      	bne.n	800ee04 <_printf_common+0xac>
 800edfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ee00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee04:	3501      	adds	r5, #1
 800ee06:	e7c6      	b.n	800ed96 <_printf_common+0x3e>
 800ee08:	18e1      	adds	r1, r4, r3
 800ee0a:	1c5a      	adds	r2, r3, #1
 800ee0c:	2030      	movs	r0, #48	; 0x30
 800ee0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee12:	4422      	add	r2, r4
 800ee14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee1c:	3302      	adds	r3, #2
 800ee1e:	e7c7      	b.n	800edb0 <_printf_common+0x58>
 800ee20:	2301      	movs	r3, #1
 800ee22:	4622      	mov	r2, r4
 800ee24:	4649      	mov	r1, r9
 800ee26:	4638      	mov	r0, r7
 800ee28:	47c0      	blx	r8
 800ee2a:	3001      	adds	r0, #1
 800ee2c:	d0e6      	beq.n	800edfc <_printf_common+0xa4>
 800ee2e:	3601      	adds	r6, #1
 800ee30:	e7d9      	b.n	800ede6 <_printf_common+0x8e>
	...

0800ee34 <_printf_i>:
 800ee34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee38:	7e0f      	ldrb	r7, [r1, #24]
 800ee3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee3c:	2f78      	cmp	r7, #120	; 0x78
 800ee3e:	4691      	mov	r9, r2
 800ee40:	4680      	mov	r8, r0
 800ee42:	460c      	mov	r4, r1
 800ee44:	469a      	mov	sl, r3
 800ee46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee4a:	d807      	bhi.n	800ee5c <_printf_i+0x28>
 800ee4c:	2f62      	cmp	r7, #98	; 0x62
 800ee4e:	d80a      	bhi.n	800ee66 <_printf_i+0x32>
 800ee50:	2f00      	cmp	r7, #0
 800ee52:	f000 80d4 	beq.w	800effe <_printf_i+0x1ca>
 800ee56:	2f58      	cmp	r7, #88	; 0x58
 800ee58:	f000 80c0 	beq.w	800efdc <_printf_i+0x1a8>
 800ee5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee64:	e03a      	b.n	800eedc <_printf_i+0xa8>
 800ee66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee6a:	2b15      	cmp	r3, #21
 800ee6c:	d8f6      	bhi.n	800ee5c <_printf_i+0x28>
 800ee6e:	a101      	add	r1, pc, #4	; (adr r1, 800ee74 <_printf_i+0x40>)
 800ee70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee74:	0800eecd 	.word	0x0800eecd
 800ee78:	0800eee1 	.word	0x0800eee1
 800ee7c:	0800ee5d 	.word	0x0800ee5d
 800ee80:	0800ee5d 	.word	0x0800ee5d
 800ee84:	0800ee5d 	.word	0x0800ee5d
 800ee88:	0800ee5d 	.word	0x0800ee5d
 800ee8c:	0800eee1 	.word	0x0800eee1
 800ee90:	0800ee5d 	.word	0x0800ee5d
 800ee94:	0800ee5d 	.word	0x0800ee5d
 800ee98:	0800ee5d 	.word	0x0800ee5d
 800ee9c:	0800ee5d 	.word	0x0800ee5d
 800eea0:	0800efe5 	.word	0x0800efe5
 800eea4:	0800ef0d 	.word	0x0800ef0d
 800eea8:	0800ef9f 	.word	0x0800ef9f
 800eeac:	0800ee5d 	.word	0x0800ee5d
 800eeb0:	0800ee5d 	.word	0x0800ee5d
 800eeb4:	0800f007 	.word	0x0800f007
 800eeb8:	0800ee5d 	.word	0x0800ee5d
 800eebc:	0800ef0d 	.word	0x0800ef0d
 800eec0:	0800ee5d 	.word	0x0800ee5d
 800eec4:	0800ee5d 	.word	0x0800ee5d
 800eec8:	0800efa7 	.word	0x0800efa7
 800eecc:	682b      	ldr	r3, [r5, #0]
 800eece:	1d1a      	adds	r2, r3, #4
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	602a      	str	r2, [r5, #0]
 800eed4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eed8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eedc:	2301      	movs	r3, #1
 800eede:	e09f      	b.n	800f020 <_printf_i+0x1ec>
 800eee0:	6820      	ldr	r0, [r4, #0]
 800eee2:	682b      	ldr	r3, [r5, #0]
 800eee4:	0607      	lsls	r7, r0, #24
 800eee6:	f103 0104 	add.w	r1, r3, #4
 800eeea:	6029      	str	r1, [r5, #0]
 800eeec:	d501      	bpl.n	800eef2 <_printf_i+0xbe>
 800eeee:	681e      	ldr	r6, [r3, #0]
 800eef0:	e003      	b.n	800eefa <_printf_i+0xc6>
 800eef2:	0646      	lsls	r6, r0, #25
 800eef4:	d5fb      	bpl.n	800eeee <_printf_i+0xba>
 800eef6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eefa:	2e00      	cmp	r6, #0
 800eefc:	da03      	bge.n	800ef06 <_printf_i+0xd2>
 800eefe:	232d      	movs	r3, #45	; 0x2d
 800ef00:	4276      	negs	r6, r6
 800ef02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef06:	485a      	ldr	r0, [pc, #360]	; (800f070 <_printf_i+0x23c>)
 800ef08:	230a      	movs	r3, #10
 800ef0a:	e012      	b.n	800ef32 <_printf_i+0xfe>
 800ef0c:	682b      	ldr	r3, [r5, #0]
 800ef0e:	6820      	ldr	r0, [r4, #0]
 800ef10:	1d19      	adds	r1, r3, #4
 800ef12:	6029      	str	r1, [r5, #0]
 800ef14:	0605      	lsls	r5, r0, #24
 800ef16:	d501      	bpl.n	800ef1c <_printf_i+0xe8>
 800ef18:	681e      	ldr	r6, [r3, #0]
 800ef1a:	e002      	b.n	800ef22 <_printf_i+0xee>
 800ef1c:	0641      	lsls	r1, r0, #25
 800ef1e:	d5fb      	bpl.n	800ef18 <_printf_i+0xe4>
 800ef20:	881e      	ldrh	r6, [r3, #0]
 800ef22:	4853      	ldr	r0, [pc, #332]	; (800f070 <_printf_i+0x23c>)
 800ef24:	2f6f      	cmp	r7, #111	; 0x6f
 800ef26:	bf0c      	ite	eq
 800ef28:	2308      	moveq	r3, #8
 800ef2a:	230a      	movne	r3, #10
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef32:	6865      	ldr	r5, [r4, #4]
 800ef34:	60a5      	str	r5, [r4, #8]
 800ef36:	2d00      	cmp	r5, #0
 800ef38:	bfa2      	ittt	ge
 800ef3a:	6821      	ldrge	r1, [r4, #0]
 800ef3c:	f021 0104 	bicge.w	r1, r1, #4
 800ef40:	6021      	strge	r1, [r4, #0]
 800ef42:	b90e      	cbnz	r6, 800ef48 <_printf_i+0x114>
 800ef44:	2d00      	cmp	r5, #0
 800ef46:	d04b      	beq.n	800efe0 <_printf_i+0x1ac>
 800ef48:	4615      	mov	r5, r2
 800ef4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef4e:	fb03 6711 	mls	r7, r3, r1, r6
 800ef52:	5dc7      	ldrb	r7, [r0, r7]
 800ef54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef58:	4637      	mov	r7, r6
 800ef5a:	42bb      	cmp	r3, r7
 800ef5c:	460e      	mov	r6, r1
 800ef5e:	d9f4      	bls.n	800ef4a <_printf_i+0x116>
 800ef60:	2b08      	cmp	r3, #8
 800ef62:	d10b      	bne.n	800ef7c <_printf_i+0x148>
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	07de      	lsls	r6, r3, #31
 800ef68:	d508      	bpl.n	800ef7c <_printf_i+0x148>
 800ef6a:	6923      	ldr	r3, [r4, #16]
 800ef6c:	6861      	ldr	r1, [r4, #4]
 800ef6e:	4299      	cmp	r1, r3
 800ef70:	bfde      	ittt	le
 800ef72:	2330      	movle	r3, #48	; 0x30
 800ef74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ef7c:	1b52      	subs	r2, r2, r5
 800ef7e:	6122      	str	r2, [r4, #16]
 800ef80:	f8cd a000 	str.w	sl, [sp]
 800ef84:	464b      	mov	r3, r9
 800ef86:	aa03      	add	r2, sp, #12
 800ef88:	4621      	mov	r1, r4
 800ef8a:	4640      	mov	r0, r8
 800ef8c:	f7ff fee4 	bl	800ed58 <_printf_common>
 800ef90:	3001      	adds	r0, #1
 800ef92:	d14a      	bne.n	800f02a <_printf_i+0x1f6>
 800ef94:	f04f 30ff 	mov.w	r0, #4294967295
 800ef98:	b004      	add	sp, #16
 800ef9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef9e:	6823      	ldr	r3, [r4, #0]
 800efa0:	f043 0320 	orr.w	r3, r3, #32
 800efa4:	6023      	str	r3, [r4, #0]
 800efa6:	4833      	ldr	r0, [pc, #204]	; (800f074 <_printf_i+0x240>)
 800efa8:	2778      	movs	r7, #120	; 0x78
 800efaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	6829      	ldr	r1, [r5, #0]
 800efb2:	061f      	lsls	r7, r3, #24
 800efb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800efb8:	d402      	bmi.n	800efc0 <_printf_i+0x18c>
 800efba:	065f      	lsls	r7, r3, #25
 800efbc:	bf48      	it	mi
 800efbe:	b2b6      	uxthmi	r6, r6
 800efc0:	07df      	lsls	r7, r3, #31
 800efc2:	bf48      	it	mi
 800efc4:	f043 0320 	orrmi.w	r3, r3, #32
 800efc8:	6029      	str	r1, [r5, #0]
 800efca:	bf48      	it	mi
 800efcc:	6023      	strmi	r3, [r4, #0]
 800efce:	b91e      	cbnz	r6, 800efd8 <_printf_i+0x1a4>
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	f023 0320 	bic.w	r3, r3, #32
 800efd6:	6023      	str	r3, [r4, #0]
 800efd8:	2310      	movs	r3, #16
 800efda:	e7a7      	b.n	800ef2c <_printf_i+0xf8>
 800efdc:	4824      	ldr	r0, [pc, #144]	; (800f070 <_printf_i+0x23c>)
 800efde:	e7e4      	b.n	800efaa <_printf_i+0x176>
 800efe0:	4615      	mov	r5, r2
 800efe2:	e7bd      	b.n	800ef60 <_printf_i+0x12c>
 800efe4:	682b      	ldr	r3, [r5, #0]
 800efe6:	6826      	ldr	r6, [r4, #0]
 800efe8:	6961      	ldr	r1, [r4, #20]
 800efea:	1d18      	adds	r0, r3, #4
 800efec:	6028      	str	r0, [r5, #0]
 800efee:	0635      	lsls	r5, r6, #24
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	d501      	bpl.n	800eff8 <_printf_i+0x1c4>
 800eff4:	6019      	str	r1, [r3, #0]
 800eff6:	e002      	b.n	800effe <_printf_i+0x1ca>
 800eff8:	0670      	lsls	r0, r6, #25
 800effa:	d5fb      	bpl.n	800eff4 <_printf_i+0x1c0>
 800effc:	8019      	strh	r1, [r3, #0]
 800effe:	2300      	movs	r3, #0
 800f000:	6123      	str	r3, [r4, #16]
 800f002:	4615      	mov	r5, r2
 800f004:	e7bc      	b.n	800ef80 <_printf_i+0x14c>
 800f006:	682b      	ldr	r3, [r5, #0]
 800f008:	1d1a      	adds	r2, r3, #4
 800f00a:	602a      	str	r2, [r5, #0]
 800f00c:	681d      	ldr	r5, [r3, #0]
 800f00e:	6862      	ldr	r2, [r4, #4]
 800f010:	2100      	movs	r1, #0
 800f012:	4628      	mov	r0, r5
 800f014:	f7f1 f8e4 	bl	80001e0 <memchr>
 800f018:	b108      	cbz	r0, 800f01e <_printf_i+0x1ea>
 800f01a:	1b40      	subs	r0, r0, r5
 800f01c:	6060      	str	r0, [r4, #4]
 800f01e:	6863      	ldr	r3, [r4, #4]
 800f020:	6123      	str	r3, [r4, #16]
 800f022:	2300      	movs	r3, #0
 800f024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f028:	e7aa      	b.n	800ef80 <_printf_i+0x14c>
 800f02a:	6923      	ldr	r3, [r4, #16]
 800f02c:	462a      	mov	r2, r5
 800f02e:	4649      	mov	r1, r9
 800f030:	4640      	mov	r0, r8
 800f032:	47d0      	blx	sl
 800f034:	3001      	adds	r0, #1
 800f036:	d0ad      	beq.n	800ef94 <_printf_i+0x160>
 800f038:	6823      	ldr	r3, [r4, #0]
 800f03a:	079b      	lsls	r3, r3, #30
 800f03c:	d413      	bmi.n	800f066 <_printf_i+0x232>
 800f03e:	68e0      	ldr	r0, [r4, #12]
 800f040:	9b03      	ldr	r3, [sp, #12]
 800f042:	4298      	cmp	r0, r3
 800f044:	bfb8      	it	lt
 800f046:	4618      	movlt	r0, r3
 800f048:	e7a6      	b.n	800ef98 <_printf_i+0x164>
 800f04a:	2301      	movs	r3, #1
 800f04c:	4632      	mov	r2, r6
 800f04e:	4649      	mov	r1, r9
 800f050:	4640      	mov	r0, r8
 800f052:	47d0      	blx	sl
 800f054:	3001      	adds	r0, #1
 800f056:	d09d      	beq.n	800ef94 <_printf_i+0x160>
 800f058:	3501      	adds	r5, #1
 800f05a:	68e3      	ldr	r3, [r4, #12]
 800f05c:	9903      	ldr	r1, [sp, #12]
 800f05e:	1a5b      	subs	r3, r3, r1
 800f060:	42ab      	cmp	r3, r5
 800f062:	dcf2      	bgt.n	800f04a <_printf_i+0x216>
 800f064:	e7eb      	b.n	800f03e <_printf_i+0x20a>
 800f066:	2500      	movs	r5, #0
 800f068:	f104 0619 	add.w	r6, r4, #25
 800f06c:	e7f5      	b.n	800f05a <_printf_i+0x226>
 800f06e:	bf00      	nop
 800f070:	0801190a 	.word	0x0801190a
 800f074:	0801191b 	.word	0x0801191b

0800f078 <std>:
 800f078:	2300      	movs	r3, #0
 800f07a:	b510      	push	{r4, lr}
 800f07c:	4604      	mov	r4, r0
 800f07e:	e9c0 3300 	strd	r3, r3, [r0]
 800f082:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f086:	6083      	str	r3, [r0, #8]
 800f088:	8181      	strh	r1, [r0, #12]
 800f08a:	6643      	str	r3, [r0, #100]	; 0x64
 800f08c:	81c2      	strh	r2, [r0, #14]
 800f08e:	6183      	str	r3, [r0, #24]
 800f090:	4619      	mov	r1, r3
 800f092:	2208      	movs	r2, #8
 800f094:	305c      	adds	r0, #92	; 0x5c
 800f096:	f000 f8e2 	bl	800f25e <memset>
 800f09a:	4b05      	ldr	r3, [pc, #20]	; (800f0b0 <std+0x38>)
 800f09c:	6263      	str	r3, [r4, #36]	; 0x24
 800f09e:	4b05      	ldr	r3, [pc, #20]	; (800f0b4 <std+0x3c>)
 800f0a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0a2:	4b05      	ldr	r3, [pc, #20]	; (800f0b8 <std+0x40>)
 800f0a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0a6:	4b05      	ldr	r3, [pc, #20]	; (800f0bc <std+0x44>)
 800f0a8:	6224      	str	r4, [r4, #32]
 800f0aa:	6323      	str	r3, [r4, #48]	; 0x30
 800f0ac:	bd10      	pop	{r4, pc}
 800f0ae:	bf00      	nop
 800f0b0:	0800f1d9 	.word	0x0800f1d9
 800f0b4:	0800f1fb 	.word	0x0800f1fb
 800f0b8:	0800f233 	.word	0x0800f233
 800f0bc:	0800f257 	.word	0x0800f257

0800f0c0 <stdio_exit_handler>:
 800f0c0:	4a02      	ldr	r2, [pc, #8]	; (800f0cc <stdio_exit_handler+0xc>)
 800f0c2:	4903      	ldr	r1, [pc, #12]	; (800f0d0 <stdio_exit_handler+0x10>)
 800f0c4:	4803      	ldr	r0, [pc, #12]	; (800f0d4 <stdio_exit_handler+0x14>)
 800f0c6:	f000 b869 	b.w	800f19c <_fwalk_sglue>
 800f0ca:	bf00      	nop
 800f0cc:	20000018 	.word	0x20000018
 800f0d0:	08010b21 	.word	0x08010b21
 800f0d4:	20000024 	.word	0x20000024

0800f0d8 <cleanup_stdio>:
 800f0d8:	6841      	ldr	r1, [r0, #4]
 800f0da:	4b0c      	ldr	r3, [pc, #48]	; (800f10c <cleanup_stdio+0x34>)
 800f0dc:	4299      	cmp	r1, r3
 800f0de:	b510      	push	{r4, lr}
 800f0e0:	4604      	mov	r4, r0
 800f0e2:	d001      	beq.n	800f0e8 <cleanup_stdio+0x10>
 800f0e4:	f001 fd1c 	bl	8010b20 <_fflush_r>
 800f0e8:	68a1      	ldr	r1, [r4, #8]
 800f0ea:	4b09      	ldr	r3, [pc, #36]	; (800f110 <cleanup_stdio+0x38>)
 800f0ec:	4299      	cmp	r1, r3
 800f0ee:	d002      	beq.n	800f0f6 <cleanup_stdio+0x1e>
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f001 fd15 	bl	8010b20 <_fflush_r>
 800f0f6:	68e1      	ldr	r1, [r4, #12]
 800f0f8:	4b06      	ldr	r3, [pc, #24]	; (800f114 <cleanup_stdio+0x3c>)
 800f0fa:	4299      	cmp	r1, r3
 800f0fc:	d004      	beq.n	800f108 <cleanup_stdio+0x30>
 800f0fe:	4620      	mov	r0, r4
 800f100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f104:	f001 bd0c 	b.w	8010b20 <_fflush_r>
 800f108:	bd10      	pop	{r4, pc}
 800f10a:	bf00      	nop
 800f10c:	20009580 	.word	0x20009580
 800f110:	200095e8 	.word	0x200095e8
 800f114:	20009650 	.word	0x20009650

0800f118 <global_stdio_init.part.0>:
 800f118:	b510      	push	{r4, lr}
 800f11a:	4b0b      	ldr	r3, [pc, #44]	; (800f148 <global_stdio_init.part.0+0x30>)
 800f11c:	4c0b      	ldr	r4, [pc, #44]	; (800f14c <global_stdio_init.part.0+0x34>)
 800f11e:	4a0c      	ldr	r2, [pc, #48]	; (800f150 <global_stdio_init.part.0+0x38>)
 800f120:	601a      	str	r2, [r3, #0]
 800f122:	4620      	mov	r0, r4
 800f124:	2200      	movs	r2, #0
 800f126:	2104      	movs	r1, #4
 800f128:	f7ff ffa6 	bl	800f078 <std>
 800f12c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f130:	2201      	movs	r2, #1
 800f132:	2109      	movs	r1, #9
 800f134:	f7ff ffa0 	bl	800f078 <std>
 800f138:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f13c:	2202      	movs	r2, #2
 800f13e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f142:	2112      	movs	r1, #18
 800f144:	f7ff bf98 	b.w	800f078 <std>
 800f148:	200096b8 	.word	0x200096b8
 800f14c:	20009580 	.word	0x20009580
 800f150:	0800f0c1 	.word	0x0800f0c1

0800f154 <__sfp_lock_acquire>:
 800f154:	4801      	ldr	r0, [pc, #4]	; (800f15c <__sfp_lock_acquire+0x8>)
 800f156:	f000 b955 	b.w	800f404 <__retarget_lock_acquire_recursive>
 800f15a:	bf00      	nop
 800f15c:	200096c1 	.word	0x200096c1

0800f160 <__sfp_lock_release>:
 800f160:	4801      	ldr	r0, [pc, #4]	; (800f168 <__sfp_lock_release+0x8>)
 800f162:	f000 b950 	b.w	800f406 <__retarget_lock_release_recursive>
 800f166:	bf00      	nop
 800f168:	200096c1 	.word	0x200096c1

0800f16c <__sinit>:
 800f16c:	b510      	push	{r4, lr}
 800f16e:	4604      	mov	r4, r0
 800f170:	f7ff fff0 	bl	800f154 <__sfp_lock_acquire>
 800f174:	6a23      	ldr	r3, [r4, #32]
 800f176:	b11b      	cbz	r3, 800f180 <__sinit+0x14>
 800f178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f17c:	f7ff bff0 	b.w	800f160 <__sfp_lock_release>
 800f180:	4b04      	ldr	r3, [pc, #16]	; (800f194 <__sinit+0x28>)
 800f182:	6223      	str	r3, [r4, #32]
 800f184:	4b04      	ldr	r3, [pc, #16]	; (800f198 <__sinit+0x2c>)
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d1f5      	bne.n	800f178 <__sinit+0xc>
 800f18c:	f7ff ffc4 	bl	800f118 <global_stdio_init.part.0>
 800f190:	e7f2      	b.n	800f178 <__sinit+0xc>
 800f192:	bf00      	nop
 800f194:	0800f0d9 	.word	0x0800f0d9
 800f198:	200096b8 	.word	0x200096b8

0800f19c <_fwalk_sglue>:
 800f19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a0:	4607      	mov	r7, r0
 800f1a2:	4688      	mov	r8, r1
 800f1a4:	4614      	mov	r4, r2
 800f1a6:	2600      	movs	r6, #0
 800f1a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1ac:	f1b9 0901 	subs.w	r9, r9, #1
 800f1b0:	d505      	bpl.n	800f1be <_fwalk_sglue+0x22>
 800f1b2:	6824      	ldr	r4, [r4, #0]
 800f1b4:	2c00      	cmp	r4, #0
 800f1b6:	d1f7      	bne.n	800f1a8 <_fwalk_sglue+0xc>
 800f1b8:	4630      	mov	r0, r6
 800f1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1be:	89ab      	ldrh	r3, [r5, #12]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d907      	bls.n	800f1d4 <_fwalk_sglue+0x38>
 800f1c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	d003      	beq.n	800f1d4 <_fwalk_sglue+0x38>
 800f1cc:	4629      	mov	r1, r5
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	47c0      	blx	r8
 800f1d2:	4306      	orrs	r6, r0
 800f1d4:	3568      	adds	r5, #104	; 0x68
 800f1d6:	e7e9      	b.n	800f1ac <_fwalk_sglue+0x10>

0800f1d8 <__sread>:
 800f1d8:	b510      	push	{r4, lr}
 800f1da:	460c      	mov	r4, r1
 800f1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e0:	f000 f8c2 	bl	800f368 <_read_r>
 800f1e4:	2800      	cmp	r0, #0
 800f1e6:	bfab      	itete	ge
 800f1e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f1ea:	89a3      	ldrhlt	r3, [r4, #12]
 800f1ec:	181b      	addge	r3, r3, r0
 800f1ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f1f2:	bfac      	ite	ge
 800f1f4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f1f6:	81a3      	strhlt	r3, [r4, #12]
 800f1f8:	bd10      	pop	{r4, pc}

0800f1fa <__swrite>:
 800f1fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fe:	461f      	mov	r7, r3
 800f200:	898b      	ldrh	r3, [r1, #12]
 800f202:	05db      	lsls	r3, r3, #23
 800f204:	4605      	mov	r5, r0
 800f206:	460c      	mov	r4, r1
 800f208:	4616      	mov	r6, r2
 800f20a:	d505      	bpl.n	800f218 <__swrite+0x1e>
 800f20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f210:	2302      	movs	r3, #2
 800f212:	2200      	movs	r2, #0
 800f214:	f000 f896 	bl	800f344 <_lseek_r>
 800f218:	89a3      	ldrh	r3, [r4, #12]
 800f21a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f21e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f222:	81a3      	strh	r3, [r4, #12]
 800f224:	4632      	mov	r2, r6
 800f226:	463b      	mov	r3, r7
 800f228:	4628      	mov	r0, r5
 800f22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f22e:	f000 b8ad 	b.w	800f38c <_write_r>

0800f232 <__sseek>:
 800f232:	b510      	push	{r4, lr}
 800f234:	460c      	mov	r4, r1
 800f236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f23a:	f000 f883 	bl	800f344 <_lseek_r>
 800f23e:	1c43      	adds	r3, r0, #1
 800f240:	89a3      	ldrh	r3, [r4, #12]
 800f242:	bf15      	itete	ne
 800f244:	6560      	strne	r0, [r4, #84]	; 0x54
 800f246:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f24a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f24e:	81a3      	strheq	r3, [r4, #12]
 800f250:	bf18      	it	ne
 800f252:	81a3      	strhne	r3, [r4, #12]
 800f254:	bd10      	pop	{r4, pc}

0800f256 <__sclose>:
 800f256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f25a:	f000 b80d 	b.w	800f278 <_close_r>

0800f25e <memset>:
 800f25e:	4402      	add	r2, r0
 800f260:	4603      	mov	r3, r0
 800f262:	4293      	cmp	r3, r2
 800f264:	d100      	bne.n	800f268 <memset+0xa>
 800f266:	4770      	bx	lr
 800f268:	f803 1b01 	strb.w	r1, [r3], #1
 800f26c:	e7f9      	b.n	800f262 <memset+0x4>
	...

0800f270 <_localeconv_r>:
 800f270:	4800      	ldr	r0, [pc, #0]	; (800f274 <_localeconv_r+0x4>)
 800f272:	4770      	bx	lr
 800f274:	20000164 	.word	0x20000164

0800f278 <_close_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4d06      	ldr	r5, [pc, #24]	; (800f294 <_close_r+0x1c>)
 800f27c:	2300      	movs	r3, #0
 800f27e:	4604      	mov	r4, r0
 800f280:	4608      	mov	r0, r1
 800f282:	602b      	str	r3, [r5, #0]
 800f284:	f7f5 ff71 	bl	800516a <_close>
 800f288:	1c43      	adds	r3, r0, #1
 800f28a:	d102      	bne.n	800f292 <_close_r+0x1a>
 800f28c:	682b      	ldr	r3, [r5, #0]
 800f28e:	b103      	cbz	r3, 800f292 <_close_r+0x1a>
 800f290:	6023      	str	r3, [r4, #0]
 800f292:	bd38      	pop	{r3, r4, r5, pc}
 800f294:	200096bc 	.word	0x200096bc

0800f298 <_reclaim_reent>:
 800f298:	4b29      	ldr	r3, [pc, #164]	; (800f340 <_reclaim_reent+0xa8>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	4283      	cmp	r3, r0
 800f29e:	b570      	push	{r4, r5, r6, lr}
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	d04b      	beq.n	800f33c <_reclaim_reent+0xa4>
 800f2a4:	69c3      	ldr	r3, [r0, #28]
 800f2a6:	b143      	cbz	r3, 800f2ba <_reclaim_reent+0x22>
 800f2a8:	68db      	ldr	r3, [r3, #12]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d144      	bne.n	800f338 <_reclaim_reent+0xa0>
 800f2ae:	69e3      	ldr	r3, [r4, #28]
 800f2b0:	6819      	ldr	r1, [r3, #0]
 800f2b2:	b111      	cbz	r1, 800f2ba <_reclaim_reent+0x22>
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f000 ff31 	bl	801011c <_free_r>
 800f2ba:	6961      	ldr	r1, [r4, #20]
 800f2bc:	b111      	cbz	r1, 800f2c4 <_reclaim_reent+0x2c>
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f000 ff2c 	bl	801011c <_free_r>
 800f2c4:	69e1      	ldr	r1, [r4, #28]
 800f2c6:	b111      	cbz	r1, 800f2ce <_reclaim_reent+0x36>
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f000 ff27 	bl	801011c <_free_r>
 800f2ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f2d0:	b111      	cbz	r1, 800f2d8 <_reclaim_reent+0x40>
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f000 ff22 	bl	801011c <_free_r>
 800f2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2da:	b111      	cbz	r1, 800f2e2 <_reclaim_reent+0x4a>
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f000 ff1d 	bl	801011c <_free_r>
 800f2e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f2e4:	b111      	cbz	r1, 800f2ec <_reclaim_reent+0x54>
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f000 ff18 	bl	801011c <_free_r>
 800f2ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f2ee:	b111      	cbz	r1, 800f2f6 <_reclaim_reent+0x5e>
 800f2f0:	4620      	mov	r0, r4
 800f2f2:	f000 ff13 	bl	801011c <_free_r>
 800f2f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800f2f8:	b111      	cbz	r1, 800f300 <_reclaim_reent+0x68>
 800f2fa:	4620      	mov	r0, r4
 800f2fc:	f000 ff0e 	bl	801011c <_free_r>
 800f300:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800f302:	b111      	cbz	r1, 800f30a <_reclaim_reent+0x72>
 800f304:	4620      	mov	r0, r4
 800f306:	f000 ff09 	bl	801011c <_free_r>
 800f30a:	6a23      	ldr	r3, [r4, #32]
 800f30c:	b1b3      	cbz	r3, 800f33c <_reclaim_reent+0xa4>
 800f30e:	4620      	mov	r0, r4
 800f310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f314:	4718      	bx	r3
 800f316:	5949      	ldr	r1, [r1, r5]
 800f318:	b941      	cbnz	r1, 800f32c <_reclaim_reent+0x94>
 800f31a:	3504      	adds	r5, #4
 800f31c:	69e3      	ldr	r3, [r4, #28]
 800f31e:	2d80      	cmp	r5, #128	; 0x80
 800f320:	68d9      	ldr	r1, [r3, #12]
 800f322:	d1f8      	bne.n	800f316 <_reclaim_reent+0x7e>
 800f324:	4620      	mov	r0, r4
 800f326:	f000 fef9 	bl	801011c <_free_r>
 800f32a:	e7c0      	b.n	800f2ae <_reclaim_reent+0x16>
 800f32c:	680e      	ldr	r6, [r1, #0]
 800f32e:	4620      	mov	r0, r4
 800f330:	f000 fef4 	bl	801011c <_free_r>
 800f334:	4631      	mov	r1, r6
 800f336:	e7ef      	b.n	800f318 <_reclaim_reent+0x80>
 800f338:	2500      	movs	r5, #0
 800f33a:	e7ef      	b.n	800f31c <_reclaim_reent+0x84>
 800f33c:	bd70      	pop	{r4, r5, r6, pc}
 800f33e:	bf00      	nop
 800f340:	20000070 	.word	0x20000070

0800f344 <_lseek_r>:
 800f344:	b538      	push	{r3, r4, r5, lr}
 800f346:	4d07      	ldr	r5, [pc, #28]	; (800f364 <_lseek_r+0x20>)
 800f348:	4604      	mov	r4, r0
 800f34a:	4608      	mov	r0, r1
 800f34c:	4611      	mov	r1, r2
 800f34e:	2200      	movs	r2, #0
 800f350:	602a      	str	r2, [r5, #0]
 800f352:	461a      	mov	r2, r3
 800f354:	f7f5 ff30 	bl	80051b8 <_lseek>
 800f358:	1c43      	adds	r3, r0, #1
 800f35a:	d102      	bne.n	800f362 <_lseek_r+0x1e>
 800f35c:	682b      	ldr	r3, [r5, #0]
 800f35e:	b103      	cbz	r3, 800f362 <_lseek_r+0x1e>
 800f360:	6023      	str	r3, [r4, #0]
 800f362:	bd38      	pop	{r3, r4, r5, pc}
 800f364:	200096bc 	.word	0x200096bc

0800f368 <_read_r>:
 800f368:	b538      	push	{r3, r4, r5, lr}
 800f36a:	4d07      	ldr	r5, [pc, #28]	; (800f388 <_read_r+0x20>)
 800f36c:	4604      	mov	r4, r0
 800f36e:	4608      	mov	r0, r1
 800f370:	4611      	mov	r1, r2
 800f372:	2200      	movs	r2, #0
 800f374:	602a      	str	r2, [r5, #0]
 800f376:	461a      	mov	r2, r3
 800f378:	f7f5 febe 	bl	80050f8 <_read>
 800f37c:	1c43      	adds	r3, r0, #1
 800f37e:	d102      	bne.n	800f386 <_read_r+0x1e>
 800f380:	682b      	ldr	r3, [r5, #0]
 800f382:	b103      	cbz	r3, 800f386 <_read_r+0x1e>
 800f384:	6023      	str	r3, [r4, #0]
 800f386:	bd38      	pop	{r3, r4, r5, pc}
 800f388:	200096bc 	.word	0x200096bc

0800f38c <_write_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4d07      	ldr	r5, [pc, #28]	; (800f3ac <_write_r+0x20>)
 800f390:	4604      	mov	r4, r0
 800f392:	4608      	mov	r0, r1
 800f394:	4611      	mov	r1, r2
 800f396:	2200      	movs	r2, #0
 800f398:	602a      	str	r2, [r5, #0]
 800f39a:	461a      	mov	r2, r3
 800f39c:	f7f5 fec9 	bl	8005132 <_write>
 800f3a0:	1c43      	adds	r3, r0, #1
 800f3a2:	d102      	bne.n	800f3aa <_write_r+0x1e>
 800f3a4:	682b      	ldr	r3, [r5, #0]
 800f3a6:	b103      	cbz	r3, 800f3aa <_write_r+0x1e>
 800f3a8:	6023      	str	r3, [r4, #0]
 800f3aa:	bd38      	pop	{r3, r4, r5, pc}
 800f3ac:	200096bc 	.word	0x200096bc

0800f3b0 <__errno>:
 800f3b0:	4b01      	ldr	r3, [pc, #4]	; (800f3b8 <__errno+0x8>)
 800f3b2:	6818      	ldr	r0, [r3, #0]
 800f3b4:	4770      	bx	lr
 800f3b6:	bf00      	nop
 800f3b8:	20000070 	.word	0x20000070

0800f3bc <__libc_init_array>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	4d0d      	ldr	r5, [pc, #52]	; (800f3f4 <__libc_init_array+0x38>)
 800f3c0:	4c0d      	ldr	r4, [pc, #52]	; (800f3f8 <__libc_init_array+0x3c>)
 800f3c2:	1b64      	subs	r4, r4, r5
 800f3c4:	10a4      	asrs	r4, r4, #2
 800f3c6:	2600      	movs	r6, #0
 800f3c8:	42a6      	cmp	r6, r4
 800f3ca:	d109      	bne.n	800f3e0 <__libc_init_array+0x24>
 800f3cc:	4d0b      	ldr	r5, [pc, #44]	; (800f3fc <__libc_init_array+0x40>)
 800f3ce:	4c0c      	ldr	r4, [pc, #48]	; (800f400 <__libc_init_array+0x44>)
 800f3d0:	f001 feec 	bl	80111ac <_init>
 800f3d4:	1b64      	subs	r4, r4, r5
 800f3d6:	10a4      	asrs	r4, r4, #2
 800f3d8:	2600      	movs	r6, #0
 800f3da:	42a6      	cmp	r6, r4
 800f3dc:	d105      	bne.n	800f3ea <__libc_init_array+0x2e>
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3e4:	4798      	blx	r3
 800f3e6:	3601      	adds	r6, #1
 800f3e8:	e7ee      	b.n	800f3c8 <__libc_init_array+0xc>
 800f3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3ee:	4798      	blx	r3
 800f3f0:	3601      	adds	r6, #1
 800f3f2:	e7f2      	b.n	800f3da <__libc_init_array+0x1e>
 800f3f4:	08011c74 	.word	0x08011c74
 800f3f8:	08011c74 	.word	0x08011c74
 800f3fc:	08011c74 	.word	0x08011c74
 800f400:	08011c78 	.word	0x08011c78

0800f404 <__retarget_lock_acquire_recursive>:
 800f404:	4770      	bx	lr

0800f406 <__retarget_lock_release_recursive>:
 800f406:	4770      	bx	lr

0800f408 <memcpy>:
 800f408:	440a      	add	r2, r1
 800f40a:	4291      	cmp	r1, r2
 800f40c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f410:	d100      	bne.n	800f414 <memcpy+0xc>
 800f412:	4770      	bx	lr
 800f414:	b510      	push	{r4, lr}
 800f416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f41a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f41e:	4291      	cmp	r1, r2
 800f420:	d1f9      	bne.n	800f416 <memcpy+0xe>
 800f422:	bd10      	pop	{r4, pc}

0800f424 <quorem>:
 800f424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f428:	6903      	ldr	r3, [r0, #16]
 800f42a:	690c      	ldr	r4, [r1, #16]
 800f42c:	42a3      	cmp	r3, r4
 800f42e:	4607      	mov	r7, r0
 800f430:	db7e      	blt.n	800f530 <quorem+0x10c>
 800f432:	3c01      	subs	r4, #1
 800f434:	f101 0814 	add.w	r8, r1, #20
 800f438:	f100 0514 	add.w	r5, r0, #20
 800f43c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f440:	9301      	str	r3, [sp, #4]
 800f442:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f446:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f44a:	3301      	adds	r3, #1
 800f44c:	429a      	cmp	r2, r3
 800f44e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f452:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f456:	fbb2 f6f3 	udiv	r6, r2, r3
 800f45a:	d331      	bcc.n	800f4c0 <quorem+0x9c>
 800f45c:	f04f 0e00 	mov.w	lr, #0
 800f460:	4640      	mov	r0, r8
 800f462:	46ac      	mov	ip, r5
 800f464:	46f2      	mov	sl, lr
 800f466:	f850 2b04 	ldr.w	r2, [r0], #4
 800f46a:	b293      	uxth	r3, r2
 800f46c:	fb06 e303 	mla	r3, r6, r3, lr
 800f470:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f474:	0c1a      	lsrs	r2, r3, #16
 800f476:	b29b      	uxth	r3, r3
 800f478:	ebaa 0303 	sub.w	r3, sl, r3
 800f47c:	f8dc a000 	ldr.w	sl, [ip]
 800f480:	fa13 f38a 	uxtah	r3, r3, sl
 800f484:	fb06 220e 	mla	r2, r6, lr, r2
 800f488:	9300      	str	r3, [sp, #0]
 800f48a:	9b00      	ldr	r3, [sp, #0]
 800f48c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f490:	b292      	uxth	r2, r2
 800f492:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f496:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f49a:	f8bd 3000 	ldrh.w	r3, [sp]
 800f49e:	4581      	cmp	r9, r0
 800f4a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4a4:	f84c 3b04 	str.w	r3, [ip], #4
 800f4a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f4ac:	d2db      	bcs.n	800f466 <quorem+0x42>
 800f4ae:	f855 300b 	ldr.w	r3, [r5, fp]
 800f4b2:	b92b      	cbnz	r3, 800f4c0 <quorem+0x9c>
 800f4b4:	9b01      	ldr	r3, [sp, #4]
 800f4b6:	3b04      	subs	r3, #4
 800f4b8:	429d      	cmp	r5, r3
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	d32c      	bcc.n	800f518 <quorem+0xf4>
 800f4be:	613c      	str	r4, [r7, #16]
 800f4c0:	4638      	mov	r0, r7
 800f4c2:	f001 f9a7 	bl	8010814 <__mcmp>
 800f4c6:	2800      	cmp	r0, #0
 800f4c8:	db22      	blt.n	800f510 <quorem+0xec>
 800f4ca:	3601      	adds	r6, #1
 800f4cc:	4629      	mov	r1, r5
 800f4ce:	2000      	movs	r0, #0
 800f4d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800f4d4:	f8d1 c000 	ldr.w	ip, [r1]
 800f4d8:	b293      	uxth	r3, r2
 800f4da:	1ac3      	subs	r3, r0, r3
 800f4dc:	0c12      	lsrs	r2, r2, #16
 800f4de:	fa13 f38c 	uxtah	r3, r3, ip
 800f4e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f4e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f4f0:	45c1      	cmp	r9, r8
 800f4f2:	f841 3b04 	str.w	r3, [r1], #4
 800f4f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f4fa:	d2e9      	bcs.n	800f4d0 <quorem+0xac>
 800f4fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f500:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f504:	b922      	cbnz	r2, 800f510 <quorem+0xec>
 800f506:	3b04      	subs	r3, #4
 800f508:	429d      	cmp	r5, r3
 800f50a:	461a      	mov	r2, r3
 800f50c:	d30a      	bcc.n	800f524 <quorem+0x100>
 800f50e:	613c      	str	r4, [r7, #16]
 800f510:	4630      	mov	r0, r6
 800f512:	b003      	add	sp, #12
 800f514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f518:	6812      	ldr	r2, [r2, #0]
 800f51a:	3b04      	subs	r3, #4
 800f51c:	2a00      	cmp	r2, #0
 800f51e:	d1ce      	bne.n	800f4be <quorem+0x9a>
 800f520:	3c01      	subs	r4, #1
 800f522:	e7c9      	b.n	800f4b8 <quorem+0x94>
 800f524:	6812      	ldr	r2, [r2, #0]
 800f526:	3b04      	subs	r3, #4
 800f528:	2a00      	cmp	r2, #0
 800f52a:	d1f0      	bne.n	800f50e <quorem+0xea>
 800f52c:	3c01      	subs	r4, #1
 800f52e:	e7eb      	b.n	800f508 <quorem+0xe4>
 800f530:	2000      	movs	r0, #0
 800f532:	e7ee      	b.n	800f512 <quorem+0xee>
 800f534:	0000      	movs	r0, r0
	...

0800f538 <_dtoa_r>:
 800f538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f53c:	ed2d 8b04 	vpush	{d8-d9}
 800f540:	69c5      	ldr	r5, [r0, #28]
 800f542:	b093      	sub	sp, #76	; 0x4c
 800f544:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f548:	ec57 6b10 	vmov	r6, r7, d0
 800f54c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f550:	9107      	str	r1, [sp, #28]
 800f552:	4604      	mov	r4, r0
 800f554:	920a      	str	r2, [sp, #40]	; 0x28
 800f556:	930d      	str	r3, [sp, #52]	; 0x34
 800f558:	b975      	cbnz	r5, 800f578 <_dtoa_r+0x40>
 800f55a:	2010      	movs	r0, #16
 800f55c:	f000 fe2a 	bl	80101b4 <malloc>
 800f560:	4602      	mov	r2, r0
 800f562:	61e0      	str	r0, [r4, #28]
 800f564:	b920      	cbnz	r0, 800f570 <_dtoa_r+0x38>
 800f566:	4bae      	ldr	r3, [pc, #696]	; (800f820 <_dtoa_r+0x2e8>)
 800f568:	21ef      	movs	r1, #239	; 0xef
 800f56a:	48ae      	ldr	r0, [pc, #696]	; (800f824 <_dtoa_r+0x2ec>)
 800f56c:	f001 fb10 	bl	8010b90 <__assert_func>
 800f570:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f574:	6005      	str	r5, [r0, #0]
 800f576:	60c5      	str	r5, [r0, #12]
 800f578:	69e3      	ldr	r3, [r4, #28]
 800f57a:	6819      	ldr	r1, [r3, #0]
 800f57c:	b151      	cbz	r1, 800f594 <_dtoa_r+0x5c>
 800f57e:	685a      	ldr	r2, [r3, #4]
 800f580:	604a      	str	r2, [r1, #4]
 800f582:	2301      	movs	r3, #1
 800f584:	4093      	lsls	r3, r2
 800f586:	608b      	str	r3, [r1, #8]
 800f588:	4620      	mov	r0, r4
 800f58a:	f000 ff07 	bl	801039c <_Bfree>
 800f58e:	69e3      	ldr	r3, [r4, #28]
 800f590:	2200      	movs	r2, #0
 800f592:	601a      	str	r2, [r3, #0]
 800f594:	1e3b      	subs	r3, r7, #0
 800f596:	bfbb      	ittet	lt
 800f598:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f59c:	9303      	strlt	r3, [sp, #12]
 800f59e:	2300      	movge	r3, #0
 800f5a0:	2201      	movlt	r2, #1
 800f5a2:	bfac      	ite	ge
 800f5a4:	f8c8 3000 	strge.w	r3, [r8]
 800f5a8:	f8c8 2000 	strlt.w	r2, [r8]
 800f5ac:	4b9e      	ldr	r3, [pc, #632]	; (800f828 <_dtoa_r+0x2f0>)
 800f5ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f5b2:	ea33 0308 	bics.w	r3, r3, r8
 800f5b6:	d11b      	bne.n	800f5f0 <_dtoa_r+0xb8>
 800f5b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f5ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800f5be:	6013      	str	r3, [r2, #0]
 800f5c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f5c4:	4333      	orrs	r3, r6
 800f5c6:	f000 8593 	beq.w	80100f0 <_dtoa_r+0xbb8>
 800f5ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f5cc:	b963      	cbnz	r3, 800f5e8 <_dtoa_r+0xb0>
 800f5ce:	4b97      	ldr	r3, [pc, #604]	; (800f82c <_dtoa_r+0x2f4>)
 800f5d0:	e027      	b.n	800f622 <_dtoa_r+0xea>
 800f5d2:	4b97      	ldr	r3, [pc, #604]	; (800f830 <_dtoa_r+0x2f8>)
 800f5d4:	9300      	str	r3, [sp, #0]
 800f5d6:	3308      	adds	r3, #8
 800f5d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f5da:	6013      	str	r3, [r2, #0]
 800f5dc:	9800      	ldr	r0, [sp, #0]
 800f5de:	b013      	add	sp, #76	; 0x4c
 800f5e0:	ecbd 8b04 	vpop	{d8-d9}
 800f5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5e8:	4b90      	ldr	r3, [pc, #576]	; (800f82c <_dtoa_r+0x2f4>)
 800f5ea:	9300      	str	r3, [sp, #0]
 800f5ec:	3303      	adds	r3, #3
 800f5ee:	e7f3      	b.n	800f5d8 <_dtoa_r+0xa0>
 800f5f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	ec51 0b17 	vmov	r0, r1, d7
 800f5fa:	eeb0 8a47 	vmov.f32	s16, s14
 800f5fe:	eef0 8a67 	vmov.f32	s17, s15
 800f602:	2300      	movs	r3, #0
 800f604:	f7f1 fa68 	bl	8000ad8 <__aeabi_dcmpeq>
 800f608:	4681      	mov	r9, r0
 800f60a:	b160      	cbz	r0, 800f626 <_dtoa_r+0xee>
 800f60c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f60e:	2301      	movs	r3, #1
 800f610:	6013      	str	r3, [r2, #0]
 800f612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f614:	2b00      	cmp	r3, #0
 800f616:	f000 8568 	beq.w	80100ea <_dtoa_r+0xbb2>
 800f61a:	4b86      	ldr	r3, [pc, #536]	; (800f834 <_dtoa_r+0x2fc>)
 800f61c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f61e:	6013      	str	r3, [r2, #0]
 800f620:	3b01      	subs	r3, #1
 800f622:	9300      	str	r3, [sp, #0]
 800f624:	e7da      	b.n	800f5dc <_dtoa_r+0xa4>
 800f626:	aa10      	add	r2, sp, #64	; 0x40
 800f628:	a911      	add	r1, sp, #68	; 0x44
 800f62a:	4620      	mov	r0, r4
 800f62c:	eeb0 0a48 	vmov.f32	s0, s16
 800f630:	eef0 0a68 	vmov.f32	s1, s17
 800f634:	f001 f994 	bl	8010960 <__d2b>
 800f638:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f63c:	4682      	mov	sl, r0
 800f63e:	2d00      	cmp	r5, #0
 800f640:	d07f      	beq.n	800f742 <_dtoa_r+0x20a>
 800f642:	ee18 3a90 	vmov	r3, s17
 800f646:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f64a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f64e:	ec51 0b18 	vmov	r0, r1, d8
 800f652:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f656:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f65a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f65e:	4619      	mov	r1, r3
 800f660:	2200      	movs	r2, #0
 800f662:	4b75      	ldr	r3, [pc, #468]	; (800f838 <_dtoa_r+0x300>)
 800f664:	f7f0 fe18 	bl	8000298 <__aeabi_dsub>
 800f668:	a367      	add	r3, pc, #412	; (adr r3, 800f808 <_dtoa_r+0x2d0>)
 800f66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f66e:	f7f0 ffcb 	bl	8000608 <__aeabi_dmul>
 800f672:	a367      	add	r3, pc, #412	; (adr r3, 800f810 <_dtoa_r+0x2d8>)
 800f674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f678:	f7f0 fe10 	bl	800029c <__adddf3>
 800f67c:	4606      	mov	r6, r0
 800f67e:	4628      	mov	r0, r5
 800f680:	460f      	mov	r7, r1
 800f682:	f7f0 ff57 	bl	8000534 <__aeabi_i2d>
 800f686:	a364      	add	r3, pc, #400	; (adr r3, 800f818 <_dtoa_r+0x2e0>)
 800f688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68c:	f7f0 ffbc 	bl	8000608 <__aeabi_dmul>
 800f690:	4602      	mov	r2, r0
 800f692:	460b      	mov	r3, r1
 800f694:	4630      	mov	r0, r6
 800f696:	4639      	mov	r1, r7
 800f698:	f7f0 fe00 	bl	800029c <__adddf3>
 800f69c:	4606      	mov	r6, r0
 800f69e:	460f      	mov	r7, r1
 800f6a0:	f7f1 fa62 	bl	8000b68 <__aeabi_d2iz>
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	4683      	mov	fp, r0
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4630      	mov	r0, r6
 800f6ac:	4639      	mov	r1, r7
 800f6ae:	f7f1 fa1d 	bl	8000aec <__aeabi_dcmplt>
 800f6b2:	b148      	cbz	r0, 800f6c8 <_dtoa_r+0x190>
 800f6b4:	4658      	mov	r0, fp
 800f6b6:	f7f0 ff3d 	bl	8000534 <__aeabi_i2d>
 800f6ba:	4632      	mov	r2, r6
 800f6bc:	463b      	mov	r3, r7
 800f6be:	f7f1 fa0b 	bl	8000ad8 <__aeabi_dcmpeq>
 800f6c2:	b908      	cbnz	r0, 800f6c8 <_dtoa_r+0x190>
 800f6c4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f6c8:	f1bb 0f16 	cmp.w	fp, #22
 800f6cc:	d857      	bhi.n	800f77e <_dtoa_r+0x246>
 800f6ce:	4b5b      	ldr	r3, [pc, #364]	; (800f83c <_dtoa_r+0x304>)
 800f6d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d8:	ec51 0b18 	vmov	r0, r1, d8
 800f6dc:	f7f1 fa06 	bl	8000aec <__aeabi_dcmplt>
 800f6e0:	2800      	cmp	r0, #0
 800f6e2:	d04e      	beq.n	800f782 <_dtoa_r+0x24a>
 800f6e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	930c      	str	r3, [sp, #48]	; 0x30
 800f6ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6ee:	1b5b      	subs	r3, r3, r5
 800f6f0:	1e5a      	subs	r2, r3, #1
 800f6f2:	bf45      	ittet	mi
 800f6f4:	f1c3 0301 	rsbmi	r3, r3, #1
 800f6f8:	9305      	strmi	r3, [sp, #20]
 800f6fa:	2300      	movpl	r3, #0
 800f6fc:	2300      	movmi	r3, #0
 800f6fe:	9206      	str	r2, [sp, #24]
 800f700:	bf54      	ite	pl
 800f702:	9305      	strpl	r3, [sp, #20]
 800f704:	9306      	strmi	r3, [sp, #24]
 800f706:	f1bb 0f00 	cmp.w	fp, #0
 800f70a:	db3c      	blt.n	800f786 <_dtoa_r+0x24e>
 800f70c:	9b06      	ldr	r3, [sp, #24]
 800f70e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f712:	445b      	add	r3, fp
 800f714:	9306      	str	r3, [sp, #24]
 800f716:	2300      	movs	r3, #0
 800f718:	9308      	str	r3, [sp, #32]
 800f71a:	9b07      	ldr	r3, [sp, #28]
 800f71c:	2b09      	cmp	r3, #9
 800f71e:	d868      	bhi.n	800f7f2 <_dtoa_r+0x2ba>
 800f720:	2b05      	cmp	r3, #5
 800f722:	bfc4      	itt	gt
 800f724:	3b04      	subgt	r3, #4
 800f726:	9307      	strgt	r3, [sp, #28]
 800f728:	9b07      	ldr	r3, [sp, #28]
 800f72a:	f1a3 0302 	sub.w	r3, r3, #2
 800f72e:	bfcc      	ite	gt
 800f730:	2500      	movgt	r5, #0
 800f732:	2501      	movle	r5, #1
 800f734:	2b03      	cmp	r3, #3
 800f736:	f200 8085 	bhi.w	800f844 <_dtoa_r+0x30c>
 800f73a:	e8df f003 	tbb	[pc, r3]
 800f73e:	3b2e      	.short	0x3b2e
 800f740:	5839      	.short	0x5839
 800f742:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f746:	441d      	add	r5, r3
 800f748:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f74c:	2b20      	cmp	r3, #32
 800f74e:	bfc1      	itttt	gt
 800f750:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f754:	fa08 f803 	lslgt.w	r8, r8, r3
 800f758:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f75c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f760:	bfd6      	itet	le
 800f762:	f1c3 0320 	rsble	r3, r3, #32
 800f766:	ea48 0003 	orrgt.w	r0, r8, r3
 800f76a:	fa06 f003 	lslle.w	r0, r6, r3
 800f76e:	f7f0 fed1 	bl	8000514 <__aeabi_ui2d>
 800f772:	2201      	movs	r2, #1
 800f774:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f778:	3d01      	subs	r5, #1
 800f77a:	920e      	str	r2, [sp, #56]	; 0x38
 800f77c:	e76f      	b.n	800f65e <_dtoa_r+0x126>
 800f77e:	2301      	movs	r3, #1
 800f780:	e7b3      	b.n	800f6ea <_dtoa_r+0x1b2>
 800f782:	900c      	str	r0, [sp, #48]	; 0x30
 800f784:	e7b2      	b.n	800f6ec <_dtoa_r+0x1b4>
 800f786:	9b05      	ldr	r3, [sp, #20]
 800f788:	eba3 030b 	sub.w	r3, r3, fp
 800f78c:	9305      	str	r3, [sp, #20]
 800f78e:	f1cb 0300 	rsb	r3, fp, #0
 800f792:	9308      	str	r3, [sp, #32]
 800f794:	2300      	movs	r3, #0
 800f796:	930b      	str	r3, [sp, #44]	; 0x2c
 800f798:	e7bf      	b.n	800f71a <_dtoa_r+0x1e2>
 800f79a:	2300      	movs	r3, #0
 800f79c:	9309      	str	r3, [sp, #36]	; 0x24
 800f79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	dc52      	bgt.n	800f84a <_dtoa_r+0x312>
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	9301      	str	r3, [sp, #4]
 800f7a8:	9304      	str	r3, [sp, #16]
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	920a      	str	r2, [sp, #40]	; 0x28
 800f7ae:	e00b      	b.n	800f7c8 <_dtoa_r+0x290>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	e7f3      	b.n	800f79c <_dtoa_r+0x264>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ba:	445b      	add	r3, fp
 800f7bc:	9301      	str	r3, [sp, #4]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	2b01      	cmp	r3, #1
 800f7c2:	9304      	str	r3, [sp, #16]
 800f7c4:	bfb8      	it	lt
 800f7c6:	2301      	movlt	r3, #1
 800f7c8:	69e0      	ldr	r0, [r4, #28]
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	2204      	movs	r2, #4
 800f7ce:	f102 0614 	add.w	r6, r2, #20
 800f7d2:	429e      	cmp	r6, r3
 800f7d4:	d93d      	bls.n	800f852 <_dtoa_r+0x31a>
 800f7d6:	6041      	str	r1, [r0, #4]
 800f7d8:	4620      	mov	r0, r4
 800f7da:	f000 fd9f 	bl	801031c <_Balloc>
 800f7de:	9000      	str	r0, [sp, #0]
 800f7e0:	2800      	cmp	r0, #0
 800f7e2:	d139      	bne.n	800f858 <_dtoa_r+0x320>
 800f7e4:	4b16      	ldr	r3, [pc, #88]	; (800f840 <_dtoa_r+0x308>)
 800f7e6:	4602      	mov	r2, r0
 800f7e8:	f240 11af 	movw	r1, #431	; 0x1af
 800f7ec:	e6bd      	b.n	800f56a <_dtoa_r+0x32>
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	e7e1      	b.n	800f7b6 <_dtoa_r+0x27e>
 800f7f2:	2501      	movs	r5, #1
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	9307      	str	r3, [sp, #28]
 800f7f8:	9509      	str	r5, [sp, #36]	; 0x24
 800f7fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f7fe:	9301      	str	r3, [sp, #4]
 800f800:	9304      	str	r3, [sp, #16]
 800f802:	2200      	movs	r2, #0
 800f804:	2312      	movs	r3, #18
 800f806:	e7d1      	b.n	800f7ac <_dtoa_r+0x274>
 800f808:	636f4361 	.word	0x636f4361
 800f80c:	3fd287a7 	.word	0x3fd287a7
 800f810:	8b60c8b3 	.word	0x8b60c8b3
 800f814:	3fc68a28 	.word	0x3fc68a28
 800f818:	509f79fb 	.word	0x509f79fb
 800f81c:	3fd34413 	.word	0x3fd34413
 800f820:	08011939 	.word	0x08011939
 800f824:	08011950 	.word	0x08011950
 800f828:	7ff00000 	.word	0x7ff00000
 800f82c:	08011935 	.word	0x08011935
 800f830:	0801192c 	.word	0x0801192c
 800f834:	08011909 	.word	0x08011909
 800f838:	3ff80000 	.word	0x3ff80000
 800f83c:	08011a40 	.word	0x08011a40
 800f840:	080119a8 	.word	0x080119a8
 800f844:	2301      	movs	r3, #1
 800f846:	9309      	str	r3, [sp, #36]	; 0x24
 800f848:	e7d7      	b.n	800f7fa <_dtoa_r+0x2c2>
 800f84a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f84c:	9301      	str	r3, [sp, #4]
 800f84e:	9304      	str	r3, [sp, #16]
 800f850:	e7ba      	b.n	800f7c8 <_dtoa_r+0x290>
 800f852:	3101      	adds	r1, #1
 800f854:	0052      	lsls	r2, r2, #1
 800f856:	e7ba      	b.n	800f7ce <_dtoa_r+0x296>
 800f858:	69e3      	ldr	r3, [r4, #28]
 800f85a:	9a00      	ldr	r2, [sp, #0]
 800f85c:	601a      	str	r2, [r3, #0]
 800f85e:	9b04      	ldr	r3, [sp, #16]
 800f860:	2b0e      	cmp	r3, #14
 800f862:	f200 80a8 	bhi.w	800f9b6 <_dtoa_r+0x47e>
 800f866:	2d00      	cmp	r5, #0
 800f868:	f000 80a5 	beq.w	800f9b6 <_dtoa_r+0x47e>
 800f86c:	f1bb 0f00 	cmp.w	fp, #0
 800f870:	dd38      	ble.n	800f8e4 <_dtoa_r+0x3ac>
 800f872:	4bc0      	ldr	r3, [pc, #768]	; (800fb74 <_dtoa_r+0x63c>)
 800f874:	f00b 020f 	and.w	r2, fp, #15
 800f878:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f87c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f880:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f884:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f888:	d019      	beq.n	800f8be <_dtoa_r+0x386>
 800f88a:	4bbb      	ldr	r3, [pc, #748]	; (800fb78 <_dtoa_r+0x640>)
 800f88c:	ec51 0b18 	vmov	r0, r1, d8
 800f890:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f894:	f7f0 ffe2 	bl	800085c <__aeabi_ddiv>
 800f898:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f89c:	f008 080f 	and.w	r8, r8, #15
 800f8a0:	2503      	movs	r5, #3
 800f8a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fb78 <_dtoa_r+0x640>
 800f8a6:	f1b8 0f00 	cmp.w	r8, #0
 800f8aa:	d10a      	bne.n	800f8c2 <_dtoa_r+0x38a>
 800f8ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8b0:	4632      	mov	r2, r6
 800f8b2:	463b      	mov	r3, r7
 800f8b4:	f7f0 ffd2 	bl	800085c <__aeabi_ddiv>
 800f8b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f8bc:	e02b      	b.n	800f916 <_dtoa_r+0x3de>
 800f8be:	2502      	movs	r5, #2
 800f8c0:	e7ef      	b.n	800f8a2 <_dtoa_r+0x36a>
 800f8c2:	f018 0f01 	tst.w	r8, #1
 800f8c6:	d008      	beq.n	800f8da <_dtoa_r+0x3a2>
 800f8c8:	4630      	mov	r0, r6
 800f8ca:	4639      	mov	r1, r7
 800f8cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f8d0:	f7f0 fe9a 	bl	8000608 <__aeabi_dmul>
 800f8d4:	3501      	adds	r5, #1
 800f8d6:	4606      	mov	r6, r0
 800f8d8:	460f      	mov	r7, r1
 800f8da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f8de:	f109 0908 	add.w	r9, r9, #8
 800f8e2:	e7e0      	b.n	800f8a6 <_dtoa_r+0x36e>
 800f8e4:	f000 809f 	beq.w	800fa26 <_dtoa_r+0x4ee>
 800f8e8:	f1cb 0600 	rsb	r6, fp, #0
 800f8ec:	4ba1      	ldr	r3, [pc, #644]	; (800fb74 <_dtoa_r+0x63c>)
 800f8ee:	4fa2      	ldr	r7, [pc, #648]	; (800fb78 <_dtoa_r+0x640>)
 800f8f0:	f006 020f 	and.w	r2, r6, #15
 800f8f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fc:	ec51 0b18 	vmov	r0, r1, d8
 800f900:	f7f0 fe82 	bl	8000608 <__aeabi_dmul>
 800f904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f908:	1136      	asrs	r6, r6, #4
 800f90a:	2300      	movs	r3, #0
 800f90c:	2502      	movs	r5, #2
 800f90e:	2e00      	cmp	r6, #0
 800f910:	d17e      	bne.n	800fa10 <_dtoa_r+0x4d8>
 800f912:	2b00      	cmp	r3, #0
 800f914:	d1d0      	bne.n	800f8b8 <_dtoa_r+0x380>
 800f916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f918:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	f000 8084 	beq.w	800fa2a <_dtoa_r+0x4f2>
 800f922:	4b96      	ldr	r3, [pc, #600]	; (800fb7c <_dtoa_r+0x644>)
 800f924:	2200      	movs	r2, #0
 800f926:	4640      	mov	r0, r8
 800f928:	4649      	mov	r1, r9
 800f92a:	f7f1 f8df 	bl	8000aec <__aeabi_dcmplt>
 800f92e:	2800      	cmp	r0, #0
 800f930:	d07b      	beq.n	800fa2a <_dtoa_r+0x4f2>
 800f932:	9b04      	ldr	r3, [sp, #16]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d078      	beq.n	800fa2a <_dtoa_r+0x4f2>
 800f938:	9b01      	ldr	r3, [sp, #4]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	dd39      	ble.n	800f9b2 <_dtoa_r+0x47a>
 800f93e:	4b90      	ldr	r3, [pc, #576]	; (800fb80 <_dtoa_r+0x648>)
 800f940:	2200      	movs	r2, #0
 800f942:	4640      	mov	r0, r8
 800f944:	4649      	mov	r1, r9
 800f946:	f7f0 fe5f 	bl	8000608 <__aeabi_dmul>
 800f94a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f94e:	9e01      	ldr	r6, [sp, #4]
 800f950:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f954:	3501      	adds	r5, #1
 800f956:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f95a:	4628      	mov	r0, r5
 800f95c:	f7f0 fdea 	bl	8000534 <__aeabi_i2d>
 800f960:	4642      	mov	r2, r8
 800f962:	464b      	mov	r3, r9
 800f964:	f7f0 fe50 	bl	8000608 <__aeabi_dmul>
 800f968:	4b86      	ldr	r3, [pc, #536]	; (800fb84 <_dtoa_r+0x64c>)
 800f96a:	2200      	movs	r2, #0
 800f96c:	f7f0 fc96 	bl	800029c <__adddf3>
 800f970:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f978:	9303      	str	r3, [sp, #12]
 800f97a:	2e00      	cmp	r6, #0
 800f97c:	d158      	bne.n	800fa30 <_dtoa_r+0x4f8>
 800f97e:	4b82      	ldr	r3, [pc, #520]	; (800fb88 <_dtoa_r+0x650>)
 800f980:	2200      	movs	r2, #0
 800f982:	4640      	mov	r0, r8
 800f984:	4649      	mov	r1, r9
 800f986:	f7f0 fc87 	bl	8000298 <__aeabi_dsub>
 800f98a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f98e:	4680      	mov	r8, r0
 800f990:	4689      	mov	r9, r1
 800f992:	f7f1 f8c9 	bl	8000b28 <__aeabi_dcmpgt>
 800f996:	2800      	cmp	r0, #0
 800f998:	f040 8296 	bne.w	800fec8 <_dtoa_r+0x990>
 800f99c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f9a6:	4649      	mov	r1, r9
 800f9a8:	f7f1 f8a0 	bl	8000aec <__aeabi_dcmplt>
 800f9ac:	2800      	cmp	r0, #0
 800f9ae:	f040 8289 	bne.w	800fec4 <_dtoa_r+0x98c>
 800f9b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f9b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f2c0 814e 	blt.w	800fc5a <_dtoa_r+0x722>
 800f9be:	f1bb 0f0e 	cmp.w	fp, #14
 800f9c2:	f300 814a 	bgt.w	800fc5a <_dtoa_r+0x722>
 800f9c6:	4b6b      	ldr	r3, [pc, #428]	; (800fb74 <_dtoa_r+0x63c>)
 800f9c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f9cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	f280 80dc 	bge.w	800fb90 <_dtoa_r+0x658>
 800f9d8:	9b04      	ldr	r3, [sp, #16]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f300 80d8 	bgt.w	800fb90 <_dtoa_r+0x658>
 800f9e0:	f040 826f 	bne.w	800fec2 <_dtoa_r+0x98a>
 800f9e4:	4b68      	ldr	r3, [pc, #416]	; (800fb88 <_dtoa_r+0x650>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	4649      	mov	r1, r9
 800f9ec:	f7f0 fe0c 	bl	8000608 <__aeabi_dmul>
 800f9f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9f4:	f7f1 f88e 	bl	8000b14 <__aeabi_dcmpge>
 800f9f8:	9e04      	ldr	r6, [sp, #16]
 800f9fa:	4637      	mov	r7, r6
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	f040 8245 	bne.w	800fe8c <_dtoa_r+0x954>
 800fa02:	9d00      	ldr	r5, [sp, #0]
 800fa04:	2331      	movs	r3, #49	; 0x31
 800fa06:	f805 3b01 	strb.w	r3, [r5], #1
 800fa0a:	f10b 0b01 	add.w	fp, fp, #1
 800fa0e:	e241      	b.n	800fe94 <_dtoa_r+0x95c>
 800fa10:	07f2      	lsls	r2, r6, #31
 800fa12:	d505      	bpl.n	800fa20 <_dtoa_r+0x4e8>
 800fa14:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fa18:	f7f0 fdf6 	bl	8000608 <__aeabi_dmul>
 800fa1c:	3501      	adds	r5, #1
 800fa1e:	2301      	movs	r3, #1
 800fa20:	1076      	asrs	r6, r6, #1
 800fa22:	3708      	adds	r7, #8
 800fa24:	e773      	b.n	800f90e <_dtoa_r+0x3d6>
 800fa26:	2502      	movs	r5, #2
 800fa28:	e775      	b.n	800f916 <_dtoa_r+0x3de>
 800fa2a:	9e04      	ldr	r6, [sp, #16]
 800fa2c:	465f      	mov	r7, fp
 800fa2e:	e792      	b.n	800f956 <_dtoa_r+0x41e>
 800fa30:	9900      	ldr	r1, [sp, #0]
 800fa32:	4b50      	ldr	r3, [pc, #320]	; (800fb74 <_dtoa_r+0x63c>)
 800fa34:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa38:	4431      	add	r1, r6
 800fa3a:	9102      	str	r1, [sp, #8]
 800fa3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa3e:	eeb0 9a47 	vmov.f32	s18, s14
 800fa42:	eef0 9a67 	vmov.f32	s19, s15
 800fa46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fa4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fa4e:	2900      	cmp	r1, #0
 800fa50:	d044      	beq.n	800fadc <_dtoa_r+0x5a4>
 800fa52:	494e      	ldr	r1, [pc, #312]	; (800fb8c <_dtoa_r+0x654>)
 800fa54:	2000      	movs	r0, #0
 800fa56:	f7f0 ff01 	bl	800085c <__aeabi_ddiv>
 800fa5a:	ec53 2b19 	vmov	r2, r3, d9
 800fa5e:	f7f0 fc1b 	bl	8000298 <__aeabi_dsub>
 800fa62:	9d00      	ldr	r5, [sp, #0]
 800fa64:	ec41 0b19 	vmov	d9, r0, r1
 800fa68:	4649      	mov	r1, r9
 800fa6a:	4640      	mov	r0, r8
 800fa6c:	f7f1 f87c 	bl	8000b68 <__aeabi_d2iz>
 800fa70:	4606      	mov	r6, r0
 800fa72:	f7f0 fd5f 	bl	8000534 <__aeabi_i2d>
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	4640      	mov	r0, r8
 800fa7c:	4649      	mov	r1, r9
 800fa7e:	f7f0 fc0b 	bl	8000298 <__aeabi_dsub>
 800fa82:	3630      	adds	r6, #48	; 0x30
 800fa84:	f805 6b01 	strb.w	r6, [r5], #1
 800fa88:	ec53 2b19 	vmov	r2, r3, d9
 800fa8c:	4680      	mov	r8, r0
 800fa8e:	4689      	mov	r9, r1
 800fa90:	f7f1 f82c 	bl	8000aec <__aeabi_dcmplt>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	d164      	bne.n	800fb62 <_dtoa_r+0x62a>
 800fa98:	4642      	mov	r2, r8
 800fa9a:	464b      	mov	r3, r9
 800fa9c:	4937      	ldr	r1, [pc, #220]	; (800fb7c <_dtoa_r+0x644>)
 800fa9e:	2000      	movs	r0, #0
 800faa0:	f7f0 fbfa 	bl	8000298 <__aeabi_dsub>
 800faa4:	ec53 2b19 	vmov	r2, r3, d9
 800faa8:	f7f1 f820 	bl	8000aec <__aeabi_dcmplt>
 800faac:	2800      	cmp	r0, #0
 800faae:	f040 80b6 	bne.w	800fc1e <_dtoa_r+0x6e6>
 800fab2:	9b02      	ldr	r3, [sp, #8]
 800fab4:	429d      	cmp	r5, r3
 800fab6:	f43f af7c 	beq.w	800f9b2 <_dtoa_r+0x47a>
 800faba:	4b31      	ldr	r3, [pc, #196]	; (800fb80 <_dtoa_r+0x648>)
 800fabc:	ec51 0b19 	vmov	r0, r1, d9
 800fac0:	2200      	movs	r2, #0
 800fac2:	f7f0 fda1 	bl	8000608 <__aeabi_dmul>
 800fac6:	4b2e      	ldr	r3, [pc, #184]	; (800fb80 <_dtoa_r+0x648>)
 800fac8:	ec41 0b19 	vmov	d9, r0, r1
 800facc:	2200      	movs	r2, #0
 800face:	4640      	mov	r0, r8
 800fad0:	4649      	mov	r1, r9
 800fad2:	f7f0 fd99 	bl	8000608 <__aeabi_dmul>
 800fad6:	4680      	mov	r8, r0
 800fad8:	4689      	mov	r9, r1
 800fada:	e7c5      	b.n	800fa68 <_dtoa_r+0x530>
 800fadc:	ec51 0b17 	vmov	r0, r1, d7
 800fae0:	f7f0 fd92 	bl	8000608 <__aeabi_dmul>
 800fae4:	9b02      	ldr	r3, [sp, #8]
 800fae6:	9d00      	ldr	r5, [sp, #0]
 800fae8:	930f      	str	r3, [sp, #60]	; 0x3c
 800faea:	ec41 0b19 	vmov	d9, r0, r1
 800faee:	4649      	mov	r1, r9
 800faf0:	4640      	mov	r0, r8
 800faf2:	f7f1 f839 	bl	8000b68 <__aeabi_d2iz>
 800faf6:	4606      	mov	r6, r0
 800faf8:	f7f0 fd1c 	bl	8000534 <__aeabi_i2d>
 800fafc:	3630      	adds	r6, #48	; 0x30
 800fafe:	4602      	mov	r2, r0
 800fb00:	460b      	mov	r3, r1
 800fb02:	4640      	mov	r0, r8
 800fb04:	4649      	mov	r1, r9
 800fb06:	f7f0 fbc7 	bl	8000298 <__aeabi_dsub>
 800fb0a:	f805 6b01 	strb.w	r6, [r5], #1
 800fb0e:	9b02      	ldr	r3, [sp, #8]
 800fb10:	429d      	cmp	r5, r3
 800fb12:	4680      	mov	r8, r0
 800fb14:	4689      	mov	r9, r1
 800fb16:	f04f 0200 	mov.w	r2, #0
 800fb1a:	d124      	bne.n	800fb66 <_dtoa_r+0x62e>
 800fb1c:	4b1b      	ldr	r3, [pc, #108]	; (800fb8c <_dtoa_r+0x654>)
 800fb1e:	ec51 0b19 	vmov	r0, r1, d9
 800fb22:	f7f0 fbbb 	bl	800029c <__adddf3>
 800fb26:	4602      	mov	r2, r0
 800fb28:	460b      	mov	r3, r1
 800fb2a:	4640      	mov	r0, r8
 800fb2c:	4649      	mov	r1, r9
 800fb2e:	f7f0 fffb 	bl	8000b28 <__aeabi_dcmpgt>
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d173      	bne.n	800fc1e <_dtoa_r+0x6e6>
 800fb36:	ec53 2b19 	vmov	r2, r3, d9
 800fb3a:	4914      	ldr	r1, [pc, #80]	; (800fb8c <_dtoa_r+0x654>)
 800fb3c:	2000      	movs	r0, #0
 800fb3e:	f7f0 fbab 	bl	8000298 <__aeabi_dsub>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	4640      	mov	r0, r8
 800fb48:	4649      	mov	r1, r9
 800fb4a:	f7f0 ffcf 	bl	8000aec <__aeabi_dcmplt>
 800fb4e:	2800      	cmp	r0, #0
 800fb50:	f43f af2f 	beq.w	800f9b2 <_dtoa_r+0x47a>
 800fb54:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fb56:	1e6b      	subs	r3, r5, #1
 800fb58:	930f      	str	r3, [sp, #60]	; 0x3c
 800fb5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb5e:	2b30      	cmp	r3, #48	; 0x30
 800fb60:	d0f8      	beq.n	800fb54 <_dtoa_r+0x61c>
 800fb62:	46bb      	mov	fp, r7
 800fb64:	e04a      	b.n	800fbfc <_dtoa_r+0x6c4>
 800fb66:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <_dtoa_r+0x648>)
 800fb68:	f7f0 fd4e 	bl	8000608 <__aeabi_dmul>
 800fb6c:	4680      	mov	r8, r0
 800fb6e:	4689      	mov	r9, r1
 800fb70:	e7bd      	b.n	800faee <_dtoa_r+0x5b6>
 800fb72:	bf00      	nop
 800fb74:	08011a40 	.word	0x08011a40
 800fb78:	08011a18 	.word	0x08011a18
 800fb7c:	3ff00000 	.word	0x3ff00000
 800fb80:	40240000 	.word	0x40240000
 800fb84:	401c0000 	.word	0x401c0000
 800fb88:	40140000 	.word	0x40140000
 800fb8c:	3fe00000 	.word	0x3fe00000
 800fb90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fb94:	9d00      	ldr	r5, [sp, #0]
 800fb96:	4642      	mov	r2, r8
 800fb98:	464b      	mov	r3, r9
 800fb9a:	4630      	mov	r0, r6
 800fb9c:	4639      	mov	r1, r7
 800fb9e:	f7f0 fe5d 	bl	800085c <__aeabi_ddiv>
 800fba2:	f7f0 ffe1 	bl	8000b68 <__aeabi_d2iz>
 800fba6:	9001      	str	r0, [sp, #4]
 800fba8:	f7f0 fcc4 	bl	8000534 <__aeabi_i2d>
 800fbac:	4642      	mov	r2, r8
 800fbae:	464b      	mov	r3, r9
 800fbb0:	f7f0 fd2a 	bl	8000608 <__aeabi_dmul>
 800fbb4:	4602      	mov	r2, r0
 800fbb6:	460b      	mov	r3, r1
 800fbb8:	4630      	mov	r0, r6
 800fbba:	4639      	mov	r1, r7
 800fbbc:	f7f0 fb6c 	bl	8000298 <__aeabi_dsub>
 800fbc0:	9e01      	ldr	r6, [sp, #4]
 800fbc2:	9f04      	ldr	r7, [sp, #16]
 800fbc4:	3630      	adds	r6, #48	; 0x30
 800fbc6:	f805 6b01 	strb.w	r6, [r5], #1
 800fbca:	9e00      	ldr	r6, [sp, #0]
 800fbcc:	1bae      	subs	r6, r5, r6
 800fbce:	42b7      	cmp	r7, r6
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	d134      	bne.n	800fc40 <_dtoa_r+0x708>
 800fbd6:	f7f0 fb61 	bl	800029c <__adddf3>
 800fbda:	4642      	mov	r2, r8
 800fbdc:	464b      	mov	r3, r9
 800fbde:	4606      	mov	r6, r0
 800fbe0:	460f      	mov	r7, r1
 800fbe2:	f7f0 ffa1 	bl	8000b28 <__aeabi_dcmpgt>
 800fbe6:	b9c8      	cbnz	r0, 800fc1c <_dtoa_r+0x6e4>
 800fbe8:	4642      	mov	r2, r8
 800fbea:	464b      	mov	r3, r9
 800fbec:	4630      	mov	r0, r6
 800fbee:	4639      	mov	r1, r7
 800fbf0:	f7f0 ff72 	bl	8000ad8 <__aeabi_dcmpeq>
 800fbf4:	b110      	cbz	r0, 800fbfc <_dtoa_r+0x6c4>
 800fbf6:	9b01      	ldr	r3, [sp, #4]
 800fbf8:	07db      	lsls	r3, r3, #31
 800fbfa:	d40f      	bmi.n	800fc1c <_dtoa_r+0x6e4>
 800fbfc:	4651      	mov	r1, sl
 800fbfe:	4620      	mov	r0, r4
 800fc00:	f000 fbcc 	bl	801039c <_Bfree>
 800fc04:	2300      	movs	r3, #0
 800fc06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fc08:	702b      	strb	r3, [r5, #0]
 800fc0a:	f10b 0301 	add.w	r3, fp, #1
 800fc0e:	6013      	str	r3, [r2, #0]
 800fc10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	f43f ace2 	beq.w	800f5dc <_dtoa_r+0xa4>
 800fc18:	601d      	str	r5, [r3, #0]
 800fc1a:	e4df      	b.n	800f5dc <_dtoa_r+0xa4>
 800fc1c:	465f      	mov	r7, fp
 800fc1e:	462b      	mov	r3, r5
 800fc20:	461d      	mov	r5, r3
 800fc22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc26:	2a39      	cmp	r2, #57	; 0x39
 800fc28:	d106      	bne.n	800fc38 <_dtoa_r+0x700>
 800fc2a:	9a00      	ldr	r2, [sp, #0]
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d1f7      	bne.n	800fc20 <_dtoa_r+0x6e8>
 800fc30:	9900      	ldr	r1, [sp, #0]
 800fc32:	2230      	movs	r2, #48	; 0x30
 800fc34:	3701      	adds	r7, #1
 800fc36:	700a      	strb	r2, [r1, #0]
 800fc38:	781a      	ldrb	r2, [r3, #0]
 800fc3a:	3201      	adds	r2, #1
 800fc3c:	701a      	strb	r2, [r3, #0]
 800fc3e:	e790      	b.n	800fb62 <_dtoa_r+0x62a>
 800fc40:	4ba3      	ldr	r3, [pc, #652]	; (800fed0 <_dtoa_r+0x998>)
 800fc42:	2200      	movs	r2, #0
 800fc44:	f7f0 fce0 	bl	8000608 <__aeabi_dmul>
 800fc48:	2200      	movs	r2, #0
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	4606      	mov	r6, r0
 800fc4e:	460f      	mov	r7, r1
 800fc50:	f7f0 ff42 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc54:	2800      	cmp	r0, #0
 800fc56:	d09e      	beq.n	800fb96 <_dtoa_r+0x65e>
 800fc58:	e7d0      	b.n	800fbfc <_dtoa_r+0x6c4>
 800fc5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc5c:	2a00      	cmp	r2, #0
 800fc5e:	f000 80ca 	beq.w	800fdf6 <_dtoa_r+0x8be>
 800fc62:	9a07      	ldr	r2, [sp, #28]
 800fc64:	2a01      	cmp	r2, #1
 800fc66:	f300 80ad 	bgt.w	800fdc4 <_dtoa_r+0x88c>
 800fc6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fc6c:	2a00      	cmp	r2, #0
 800fc6e:	f000 80a5 	beq.w	800fdbc <_dtoa_r+0x884>
 800fc72:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fc76:	9e08      	ldr	r6, [sp, #32]
 800fc78:	9d05      	ldr	r5, [sp, #20]
 800fc7a:	9a05      	ldr	r2, [sp, #20]
 800fc7c:	441a      	add	r2, r3
 800fc7e:	9205      	str	r2, [sp, #20]
 800fc80:	9a06      	ldr	r2, [sp, #24]
 800fc82:	2101      	movs	r1, #1
 800fc84:	441a      	add	r2, r3
 800fc86:	4620      	mov	r0, r4
 800fc88:	9206      	str	r2, [sp, #24]
 800fc8a:	f000 fc3d 	bl	8010508 <__i2b>
 800fc8e:	4607      	mov	r7, r0
 800fc90:	b165      	cbz	r5, 800fcac <_dtoa_r+0x774>
 800fc92:	9b06      	ldr	r3, [sp, #24]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	dd09      	ble.n	800fcac <_dtoa_r+0x774>
 800fc98:	42ab      	cmp	r3, r5
 800fc9a:	9a05      	ldr	r2, [sp, #20]
 800fc9c:	bfa8      	it	ge
 800fc9e:	462b      	movge	r3, r5
 800fca0:	1ad2      	subs	r2, r2, r3
 800fca2:	9205      	str	r2, [sp, #20]
 800fca4:	9a06      	ldr	r2, [sp, #24]
 800fca6:	1aed      	subs	r5, r5, r3
 800fca8:	1ad3      	subs	r3, r2, r3
 800fcaa:	9306      	str	r3, [sp, #24]
 800fcac:	9b08      	ldr	r3, [sp, #32]
 800fcae:	b1f3      	cbz	r3, 800fcee <_dtoa_r+0x7b6>
 800fcb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	f000 80a3 	beq.w	800fdfe <_dtoa_r+0x8c6>
 800fcb8:	2e00      	cmp	r6, #0
 800fcba:	dd10      	ble.n	800fcde <_dtoa_r+0x7a6>
 800fcbc:	4639      	mov	r1, r7
 800fcbe:	4632      	mov	r2, r6
 800fcc0:	4620      	mov	r0, r4
 800fcc2:	f000 fce1 	bl	8010688 <__pow5mult>
 800fcc6:	4652      	mov	r2, sl
 800fcc8:	4601      	mov	r1, r0
 800fcca:	4607      	mov	r7, r0
 800fccc:	4620      	mov	r0, r4
 800fcce:	f000 fc31 	bl	8010534 <__multiply>
 800fcd2:	4651      	mov	r1, sl
 800fcd4:	4680      	mov	r8, r0
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f000 fb60 	bl	801039c <_Bfree>
 800fcdc:	46c2      	mov	sl, r8
 800fcde:	9b08      	ldr	r3, [sp, #32]
 800fce0:	1b9a      	subs	r2, r3, r6
 800fce2:	d004      	beq.n	800fcee <_dtoa_r+0x7b6>
 800fce4:	4651      	mov	r1, sl
 800fce6:	4620      	mov	r0, r4
 800fce8:	f000 fcce 	bl	8010688 <__pow5mult>
 800fcec:	4682      	mov	sl, r0
 800fcee:	2101      	movs	r1, #1
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	f000 fc09 	bl	8010508 <__i2b>
 800fcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	4606      	mov	r6, r0
 800fcfc:	f340 8081 	ble.w	800fe02 <_dtoa_r+0x8ca>
 800fd00:	461a      	mov	r2, r3
 800fd02:	4601      	mov	r1, r0
 800fd04:	4620      	mov	r0, r4
 800fd06:	f000 fcbf 	bl	8010688 <__pow5mult>
 800fd0a:	9b07      	ldr	r3, [sp, #28]
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	4606      	mov	r6, r0
 800fd10:	dd7a      	ble.n	800fe08 <_dtoa_r+0x8d0>
 800fd12:	f04f 0800 	mov.w	r8, #0
 800fd16:	6933      	ldr	r3, [r6, #16]
 800fd18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fd1c:	6918      	ldr	r0, [r3, #16]
 800fd1e:	f000 fba5 	bl	801046c <__hi0bits>
 800fd22:	f1c0 0020 	rsb	r0, r0, #32
 800fd26:	9b06      	ldr	r3, [sp, #24]
 800fd28:	4418      	add	r0, r3
 800fd2a:	f010 001f 	ands.w	r0, r0, #31
 800fd2e:	f000 8094 	beq.w	800fe5a <_dtoa_r+0x922>
 800fd32:	f1c0 0320 	rsb	r3, r0, #32
 800fd36:	2b04      	cmp	r3, #4
 800fd38:	f340 8085 	ble.w	800fe46 <_dtoa_r+0x90e>
 800fd3c:	9b05      	ldr	r3, [sp, #20]
 800fd3e:	f1c0 001c 	rsb	r0, r0, #28
 800fd42:	4403      	add	r3, r0
 800fd44:	9305      	str	r3, [sp, #20]
 800fd46:	9b06      	ldr	r3, [sp, #24]
 800fd48:	4403      	add	r3, r0
 800fd4a:	4405      	add	r5, r0
 800fd4c:	9306      	str	r3, [sp, #24]
 800fd4e:	9b05      	ldr	r3, [sp, #20]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	dd05      	ble.n	800fd60 <_dtoa_r+0x828>
 800fd54:	4651      	mov	r1, sl
 800fd56:	461a      	mov	r2, r3
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f000 fcef 	bl	801073c <__lshift>
 800fd5e:	4682      	mov	sl, r0
 800fd60:	9b06      	ldr	r3, [sp, #24]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	dd05      	ble.n	800fd72 <_dtoa_r+0x83a>
 800fd66:	4631      	mov	r1, r6
 800fd68:	461a      	mov	r2, r3
 800fd6a:	4620      	mov	r0, r4
 800fd6c:	f000 fce6 	bl	801073c <__lshift>
 800fd70:	4606      	mov	r6, r0
 800fd72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d072      	beq.n	800fe5e <_dtoa_r+0x926>
 800fd78:	4631      	mov	r1, r6
 800fd7a:	4650      	mov	r0, sl
 800fd7c:	f000 fd4a 	bl	8010814 <__mcmp>
 800fd80:	2800      	cmp	r0, #0
 800fd82:	da6c      	bge.n	800fe5e <_dtoa_r+0x926>
 800fd84:	2300      	movs	r3, #0
 800fd86:	4651      	mov	r1, sl
 800fd88:	220a      	movs	r2, #10
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	f000 fb28 	bl	80103e0 <__multadd>
 800fd90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd92:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fd96:	4682      	mov	sl, r0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f000 81b0 	beq.w	80100fe <_dtoa_r+0xbc6>
 800fd9e:	2300      	movs	r3, #0
 800fda0:	4639      	mov	r1, r7
 800fda2:	220a      	movs	r2, #10
 800fda4:	4620      	mov	r0, r4
 800fda6:	f000 fb1b 	bl	80103e0 <__multadd>
 800fdaa:	9b01      	ldr	r3, [sp, #4]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	4607      	mov	r7, r0
 800fdb0:	f300 8096 	bgt.w	800fee0 <_dtoa_r+0x9a8>
 800fdb4:	9b07      	ldr	r3, [sp, #28]
 800fdb6:	2b02      	cmp	r3, #2
 800fdb8:	dc59      	bgt.n	800fe6e <_dtoa_r+0x936>
 800fdba:	e091      	b.n	800fee0 <_dtoa_r+0x9a8>
 800fdbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fdbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fdc2:	e758      	b.n	800fc76 <_dtoa_r+0x73e>
 800fdc4:	9b04      	ldr	r3, [sp, #16]
 800fdc6:	1e5e      	subs	r6, r3, #1
 800fdc8:	9b08      	ldr	r3, [sp, #32]
 800fdca:	42b3      	cmp	r3, r6
 800fdcc:	bfbf      	itttt	lt
 800fdce:	9b08      	ldrlt	r3, [sp, #32]
 800fdd0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fdd2:	9608      	strlt	r6, [sp, #32]
 800fdd4:	1af3      	sublt	r3, r6, r3
 800fdd6:	bfb4      	ite	lt
 800fdd8:	18d2      	addlt	r2, r2, r3
 800fdda:	1b9e      	subge	r6, r3, r6
 800fddc:	9b04      	ldr	r3, [sp, #16]
 800fdde:	bfbc      	itt	lt
 800fde0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fde2:	2600      	movlt	r6, #0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	bfb7      	itett	lt
 800fde8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fdec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fdf0:	1a9d      	sublt	r5, r3, r2
 800fdf2:	2300      	movlt	r3, #0
 800fdf4:	e741      	b.n	800fc7a <_dtoa_r+0x742>
 800fdf6:	9e08      	ldr	r6, [sp, #32]
 800fdf8:	9d05      	ldr	r5, [sp, #20]
 800fdfa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fdfc:	e748      	b.n	800fc90 <_dtoa_r+0x758>
 800fdfe:	9a08      	ldr	r2, [sp, #32]
 800fe00:	e770      	b.n	800fce4 <_dtoa_r+0x7ac>
 800fe02:	9b07      	ldr	r3, [sp, #28]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	dc19      	bgt.n	800fe3c <_dtoa_r+0x904>
 800fe08:	9b02      	ldr	r3, [sp, #8]
 800fe0a:	b9bb      	cbnz	r3, 800fe3c <_dtoa_r+0x904>
 800fe0c:	9b03      	ldr	r3, [sp, #12]
 800fe0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe12:	b99b      	cbnz	r3, 800fe3c <_dtoa_r+0x904>
 800fe14:	9b03      	ldr	r3, [sp, #12]
 800fe16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe1a:	0d1b      	lsrs	r3, r3, #20
 800fe1c:	051b      	lsls	r3, r3, #20
 800fe1e:	b183      	cbz	r3, 800fe42 <_dtoa_r+0x90a>
 800fe20:	9b05      	ldr	r3, [sp, #20]
 800fe22:	3301      	adds	r3, #1
 800fe24:	9305      	str	r3, [sp, #20]
 800fe26:	9b06      	ldr	r3, [sp, #24]
 800fe28:	3301      	adds	r3, #1
 800fe2a:	9306      	str	r3, [sp, #24]
 800fe2c:	f04f 0801 	mov.w	r8, #1
 800fe30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	f47f af6f 	bne.w	800fd16 <_dtoa_r+0x7de>
 800fe38:	2001      	movs	r0, #1
 800fe3a:	e774      	b.n	800fd26 <_dtoa_r+0x7ee>
 800fe3c:	f04f 0800 	mov.w	r8, #0
 800fe40:	e7f6      	b.n	800fe30 <_dtoa_r+0x8f8>
 800fe42:	4698      	mov	r8, r3
 800fe44:	e7f4      	b.n	800fe30 <_dtoa_r+0x8f8>
 800fe46:	d082      	beq.n	800fd4e <_dtoa_r+0x816>
 800fe48:	9a05      	ldr	r2, [sp, #20]
 800fe4a:	331c      	adds	r3, #28
 800fe4c:	441a      	add	r2, r3
 800fe4e:	9205      	str	r2, [sp, #20]
 800fe50:	9a06      	ldr	r2, [sp, #24]
 800fe52:	441a      	add	r2, r3
 800fe54:	441d      	add	r5, r3
 800fe56:	9206      	str	r2, [sp, #24]
 800fe58:	e779      	b.n	800fd4e <_dtoa_r+0x816>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	e7f4      	b.n	800fe48 <_dtoa_r+0x910>
 800fe5e:	9b04      	ldr	r3, [sp, #16]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	dc37      	bgt.n	800fed4 <_dtoa_r+0x99c>
 800fe64:	9b07      	ldr	r3, [sp, #28]
 800fe66:	2b02      	cmp	r3, #2
 800fe68:	dd34      	ble.n	800fed4 <_dtoa_r+0x99c>
 800fe6a:	9b04      	ldr	r3, [sp, #16]
 800fe6c:	9301      	str	r3, [sp, #4]
 800fe6e:	9b01      	ldr	r3, [sp, #4]
 800fe70:	b963      	cbnz	r3, 800fe8c <_dtoa_r+0x954>
 800fe72:	4631      	mov	r1, r6
 800fe74:	2205      	movs	r2, #5
 800fe76:	4620      	mov	r0, r4
 800fe78:	f000 fab2 	bl	80103e0 <__multadd>
 800fe7c:	4601      	mov	r1, r0
 800fe7e:	4606      	mov	r6, r0
 800fe80:	4650      	mov	r0, sl
 800fe82:	f000 fcc7 	bl	8010814 <__mcmp>
 800fe86:	2800      	cmp	r0, #0
 800fe88:	f73f adbb 	bgt.w	800fa02 <_dtoa_r+0x4ca>
 800fe8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe8e:	9d00      	ldr	r5, [sp, #0]
 800fe90:	ea6f 0b03 	mvn.w	fp, r3
 800fe94:	f04f 0800 	mov.w	r8, #0
 800fe98:	4631      	mov	r1, r6
 800fe9a:	4620      	mov	r0, r4
 800fe9c:	f000 fa7e 	bl	801039c <_Bfree>
 800fea0:	2f00      	cmp	r7, #0
 800fea2:	f43f aeab 	beq.w	800fbfc <_dtoa_r+0x6c4>
 800fea6:	f1b8 0f00 	cmp.w	r8, #0
 800feaa:	d005      	beq.n	800feb8 <_dtoa_r+0x980>
 800feac:	45b8      	cmp	r8, r7
 800feae:	d003      	beq.n	800feb8 <_dtoa_r+0x980>
 800feb0:	4641      	mov	r1, r8
 800feb2:	4620      	mov	r0, r4
 800feb4:	f000 fa72 	bl	801039c <_Bfree>
 800feb8:	4639      	mov	r1, r7
 800feba:	4620      	mov	r0, r4
 800febc:	f000 fa6e 	bl	801039c <_Bfree>
 800fec0:	e69c      	b.n	800fbfc <_dtoa_r+0x6c4>
 800fec2:	2600      	movs	r6, #0
 800fec4:	4637      	mov	r7, r6
 800fec6:	e7e1      	b.n	800fe8c <_dtoa_r+0x954>
 800fec8:	46bb      	mov	fp, r7
 800feca:	4637      	mov	r7, r6
 800fecc:	e599      	b.n	800fa02 <_dtoa_r+0x4ca>
 800fece:	bf00      	nop
 800fed0:	40240000 	.word	0x40240000
 800fed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	f000 80c8 	beq.w	801006c <_dtoa_r+0xb34>
 800fedc:	9b04      	ldr	r3, [sp, #16]
 800fede:	9301      	str	r3, [sp, #4]
 800fee0:	2d00      	cmp	r5, #0
 800fee2:	dd05      	ble.n	800fef0 <_dtoa_r+0x9b8>
 800fee4:	4639      	mov	r1, r7
 800fee6:	462a      	mov	r2, r5
 800fee8:	4620      	mov	r0, r4
 800feea:	f000 fc27 	bl	801073c <__lshift>
 800feee:	4607      	mov	r7, r0
 800fef0:	f1b8 0f00 	cmp.w	r8, #0
 800fef4:	d05b      	beq.n	800ffae <_dtoa_r+0xa76>
 800fef6:	6879      	ldr	r1, [r7, #4]
 800fef8:	4620      	mov	r0, r4
 800fefa:	f000 fa0f 	bl	801031c <_Balloc>
 800fefe:	4605      	mov	r5, r0
 800ff00:	b928      	cbnz	r0, 800ff0e <_dtoa_r+0x9d6>
 800ff02:	4b83      	ldr	r3, [pc, #524]	; (8010110 <_dtoa_r+0xbd8>)
 800ff04:	4602      	mov	r2, r0
 800ff06:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ff0a:	f7ff bb2e 	b.w	800f56a <_dtoa_r+0x32>
 800ff0e:	693a      	ldr	r2, [r7, #16]
 800ff10:	3202      	adds	r2, #2
 800ff12:	0092      	lsls	r2, r2, #2
 800ff14:	f107 010c 	add.w	r1, r7, #12
 800ff18:	300c      	adds	r0, #12
 800ff1a:	f7ff fa75 	bl	800f408 <memcpy>
 800ff1e:	2201      	movs	r2, #1
 800ff20:	4629      	mov	r1, r5
 800ff22:	4620      	mov	r0, r4
 800ff24:	f000 fc0a 	bl	801073c <__lshift>
 800ff28:	9b00      	ldr	r3, [sp, #0]
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	9304      	str	r3, [sp, #16]
 800ff2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff32:	4413      	add	r3, r2
 800ff34:	9308      	str	r3, [sp, #32]
 800ff36:	9b02      	ldr	r3, [sp, #8]
 800ff38:	f003 0301 	and.w	r3, r3, #1
 800ff3c:	46b8      	mov	r8, r7
 800ff3e:	9306      	str	r3, [sp, #24]
 800ff40:	4607      	mov	r7, r0
 800ff42:	9b04      	ldr	r3, [sp, #16]
 800ff44:	4631      	mov	r1, r6
 800ff46:	3b01      	subs	r3, #1
 800ff48:	4650      	mov	r0, sl
 800ff4a:	9301      	str	r3, [sp, #4]
 800ff4c:	f7ff fa6a 	bl	800f424 <quorem>
 800ff50:	4641      	mov	r1, r8
 800ff52:	9002      	str	r0, [sp, #8]
 800ff54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ff58:	4650      	mov	r0, sl
 800ff5a:	f000 fc5b 	bl	8010814 <__mcmp>
 800ff5e:	463a      	mov	r2, r7
 800ff60:	9005      	str	r0, [sp, #20]
 800ff62:	4631      	mov	r1, r6
 800ff64:	4620      	mov	r0, r4
 800ff66:	f000 fc71 	bl	801084c <__mdiff>
 800ff6a:	68c2      	ldr	r2, [r0, #12]
 800ff6c:	4605      	mov	r5, r0
 800ff6e:	bb02      	cbnz	r2, 800ffb2 <_dtoa_r+0xa7a>
 800ff70:	4601      	mov	r1, r0
 800ff72:	4650      	mov	r0, sl
 800ff74:	f000 fc4e 	bl	8010814 <__mcmp>
 800ff78:	4602      	mov	r2, r0
 800ff7a:	4629      	mov	r1, r5
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ff80:	f000 fa0c 	bl	801039c <_Bfree>
 800ff84:	9b07      	ldr	r3, [sp, #28]
 800ff86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff88:	9d04      	ldr	r5, [sp, #16]
 800ff8a:	ea43 0102 	orr.w	r1, r3, r2
 800ff8e:	9b06      	ldr	r3, [sp, #24]
 800ff90:	4319      	orrs	r1, r3
 800ff92:	d110      	bne.n	800ffb6 <_dtoa_r+0xa7e>
 800ff94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ff98:	d029      	beq.n	800ffee <_dtoa_r+0xab6>
 800ff9a:	9b05      	ldr	r3, [sp, #20]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	dd02      	ble.n	800ffa6 <_dtoa_r+0xa6e>
 800ffa0:	9b02      	ldr	r3, [sp, #8]
 800ffa2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ffa6:	9b01      	ldr	r3, [sp, #4]
 800ffa8:	f883 9000 	strb.w	r9, [r3]
 800ffac:	e774      	b.n	800fe98 <_dtoa_r+0x960>
 800ffae:	4638      	mov	r0, r7
 800ffb0:	e7ba      	b.n	800ff28 <_dtoa_r+0x9f0>
 800ffb2:	2201      	movs	r2, #1
 800ffb4:	e7e1      	b.n	800ff7a <_dtoa_r+0xa42>
 800ffb6:	9b05      	ldr	r3, [sp, #20]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	db04      	blt.n	800ffc6 <_dtoa_r+0xa8e>
 800ffbc:	9907      	ldr	r1, [sp, #28]
 800ffbe:	430b      	orrs	r3, r1
 800ffc0:	9906      	ldr	r1, [sp, #24]
 800ffc2:	430b      	orrs	r3, r1
 800ffc4:	d120      	bne.n	8010008 <_dtoa_r+0xad0>
 800ffc6:	2a00      	cmp	r2, #0
 800ffc8:	dded      	ble.n	800ffa6 <_dtoa_r+0xa6e>
 800ffca:	4651      	mov	r1, sl
 800ffcc:	2201      	movs	r2, #1
 800ffce:	4620      	mov	r0, r4
 800ffd0:	f000 fbb4 	bl	801073c <__lshift>
 800ffd4:	4631      	mov	r1, r6
 800ffd6:	4682      	mov	sl, r0
 800ffd8:	f000 fc1c 	bl	8010814 <__mcmp>
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	dc03      	bgt.n	800ffe8 <_dtoa_r+0xab0>
 800ffe0:	d1e1      	bne.n	800ffa6 <_dtoa_r+0xa6e>
 800ffe2:	f019 0f01 	tst.w	r9, #1
 800ffe6:	d0de      	beq.n	800ffa6 <_dtoa_r+0xa6e>
 800ffe8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ffec:	d1d8      	bne.n	800ffa0 <_dtoa_r+0xa68>
 800ffee:	9a01      	ldr	r2, [sp, #4]
 800fff0:	2339      	movs	r3, #57	; 0x39
 800fff2:	7013      	strb	r3, [r2, #0]
 800fff4:	462b      	mov	r3, r5
 800fff6:	461d      	mov	r5, r3
 800fff8:	3b01      	subs	r3, #1
 800fffa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fffe:	2a39      	cmp	r2, #57	; 0x39
 8010000:	d06c      	beq.n	80100dc <_dtoa_r+0xba4>
 8010002:	3201      	adds	r2, #1
 8010004:	701a      	strb	r2, [r3, #0]
 8010006:	e747      	b.n	800fe98 <_dtoa_r+0x960>
 8010008:	2a00      	cmp	r2, #0
 801000a:	dd07      	ble.n	801001c <_dtoa_r+0xae4>
 801000c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010010:	d0ed      	beq.n	800ffee <_dtoa_r+0xab6>
 8010012:	9a01      	ldr	r2, [sp, #4]
 8010014:	f109 0301 	add.w	r3, r9, #1
 8010018:	7013      	strb	r3, [r2, #0]
 801001a:	e73d      	b.n	800fe98 <_dtoa_r+0x960>
 801001c:	9b04      	ldr	r3, [sp, #16]
 801001e:	9a08      	ldr	r2, [sp, #32]
 8010020:	f803 9c01 	strb.w	r9, [r3, #-1]
 8010024:	4293      	cmp	r3, r2
 8010026:	d043      	beq.n	80100b0 <_dtoa_r+0xb78>
 8010028:	4651      	mov	r1, sl
 801002a:	2300      	movs	r3, #0
 801002c:	220a      	movs	r2, #10
 801002e:	4620      	mov	r0, r4
 8010030:	f000 f9d6 	bl	80103e0 <__multadd>
 8010034:	45b8      	cmp	r8, r7
 8010036:	4682      	mov	sl, r0
 8010038:	f04f 0300 	mov.w	r3, #0
 801003c:	f04f 020a 	mov.w	r2, #10
 8010040:	4641      	mov	r1, r8
 8010042:	4620      	mov	r0, r4
 8010044:	d107      	bne.n	8010056 <_dtoa_r+0xb1e>
 8010046:	f000 f9cb 	bl	80103e0 <__multadd>
 801004a:	4680      	mov	r8, r0
 801004c:	4607      	mov	r7, r0
 801004e:	9b04      	ldr	r3, [sp, #16]
 8010050:	3301      	adds	r3, #1
 8010052:	9304      	str	r3, [sp, #16]
 8010054:	e775      	b.n	800ff42 <_dtoa_r+0xa0a>
 8010056:	f000 f9c3 	bl	80103e0 <__multadd>
 801005a:	4639      	mov	r1, r7
 801005c:	4680      	mov	r8, r0
 801005e:	2300      	movs	r3, #0
 8010060:	220a      	movs	r2, #10
 8010062:	4620      	mov	r0, r4
 8010064:	f000 f9bc 	bl	80103e0 <__multadd>
 8010068:	4607      	mov	r7, r0
 801006a:	e7f0      	b.n	801004e <_dtoa_r+0xb16>
 801006c:	9b04      	ldr	r3, [sp, #16]
 801006e:	9301      	str	r3, [sp, #4]
 8010070:	9d00      	ldr	r5, [sp, #0]
 8010072:	4631      	mov	r1, r6
 8010074:	4650      	mov	r0, sl
 8010076:	f7ff f9d5 	bl	800f424 <quorem>
 801007a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801007e:	9b00      	ldr	r3, [sp, #0]
 8010080:	f805 9b01 	strb.w	r9, [r5], #1
 8010084:	1aea      	subs	r2, r5, r3
 8010086:	9b01      	ldr	r3, [sp, #4]
 8010088:	4293      	cmp	r3, r2
 801008a:	dd07      	ble.n	801009c <_dtoa_r+0xb64>
 801008c:	4651      	mov	r1, sl
 801008e:	2300      	movs	r3, #0
 8010090:	220a      	movs	r2, #10
 8010092:	4620      	mov	r0, r4
 8010094:	f000 f9a4 	bl	80103e0 <__multadd>
 8010098:	4682      	mov	sl, r0
 801009a:	e7ea      	b.n	8010072 <_dtoa_r+0xb3a>
 801009c:	9b01      	ldr	r3, [sp, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	bfc8      	it	gt
 80100a2:	461d      	movgt	r5, r3
 80100a4:	9b00      	ldr	r3, [sp, #0]
 80100a6:	bfd8      	it	le
 80100a8:	2501      	movle	r5, #1
 80100aa:	441d      	add	r5, r3
 80100ac:	f04f 0800 	mov.w	r8, #0
 80100b0:	4651      	mov	r1, sl
 80100b2:	2201      	movs	r2, #1
 80100b4:	4620      	mov	r0, r4
 80100b6:	f000 fb41 	bl	801073c <__lshift>
 80100ba:	4631      	mov	r1, r6
 80100bc:	4682      	mov	sl, r0
 80100be:	f000 fba9 	bl	8010814 <__mcmp>
 80100c2:	2800      	cmp	r0, #0
 80100c4:	dc96      	bgt.n	800fff4 <_dtoa_r+0xabc>
 80100c6:	d102      	bne.n	80100ce <_dtoa_r+0xb96>
 80100c8:	f019 0f01 	tst.w	r9, #1
 80100cc:	d192      	bne.n	800fff4 <_dtoa_r+0xabc>
 80100ce:	462b      	mov	r3, r5
 80100d0:	461d      	mov	r5, r3
 80100d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100d6:	2a30      	cmp	r2, #48	; 0x30
 80100d8:	d0fa      	beq.n	80100d0 <_dtoa_r+0xb98>
 80100da:	e6dd      	b.n	800fe98 <_dtoa_r+0x960>
 80100dc:	9a00      	ldr	r2, [sp, #0]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d189      	bne.n	800fff6 <_dtoa_r+0xabe>
 80100e2:	f10b 0b01 	add.w	fp, fp, #1
 80100e6:	2331      	movs	r3, #49	; 0x31
 80100e8:	e796      	b.n	8010018 <_dtoa_r+0xae0>
 80100ea:	4b0a      	ldr	r3, [pc, #40]	; (8010114 <_dtoa_r+0xbdc>)
 80100ec:	f7ff ba99 	b.w	800f622 <_dtoa_r+0xea>
 80100f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f47f aa6d 	bne.w	800f5d2 <_dtoa_r+0x9a>
 80100f8:	4b07      	ldr	r3, [pc, #28]	; (8010118 <_dtoa_r+0xbe0>)
 80100fa:	f7ff ba92 	b.w	800f622 <_dtoa_r+0xea>
 80100fe:	9b01      	ldr	r3, [sp, #4]
 8010100:	2b00      	cmp	r3, #0
 8010102:	dcb5      	bgt.n	8010070 <_dtoa_r+0xb38>
 8010104:	9b07      	ldr	r3, [sp, #28]
 8010106:	2b02      	cmp	r3, #2
 8010108:	f73f aeb1 	bgt.w	800fe6e <_dtoa_r+0x936>
 801010c:	e7b0      	b.n	8010070 <_dtoa_r+0xb38>
 801010e:	bf00      	nop
 8010110:	080119a8 	.word	0x080119a8
 8010114:	08011908 	.word	0x08011908
 8010118:	0801192c 	.word	0x0801192c

0801011c <_free_r>:
 801011c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801011e:	2900      	cmp	r1, #0
 8010120:	d044      	beq.n	80101ac <_free_r+0x90>
 8010122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010126:	9001      	str	r0, [sp, #4]
 8010128:	2b00      	cmp	r3, #0
 801012a:	f1a1 0404 	sub.w	r4, r1, #4
 801012e:	bfb8      	it	lt
 8010130:	18e4      	addlt	r4, r4, r3
 8010132:	f000 f8e7 	bl	8010304 <__malloc_lock>
 8010136:	4a1e      	ldr	r2, [pc, #120]	; (80101b0 <_free_r+0x94>)
 8010138:	9801      	ldr	r0, [sp, #4]
 801013a:	6813      	ldr	r3, [r2, #0]
 801013c:	b933      	cbnz	r3, 801014c <_free_r+0x30>
 801013e:	6063      	str	r3, [r4, #4]
 8010140:	6014      	str	r4, [r2, #0]
 8010142:	b003      	add	sp, #12
 8010144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010148:	f000 b8e2 	b.w	8010310 <__malloc_unlock>
 801014c:	42a3      	cmp	r3, r4
 801014e:	d908      	bls.n	8010162 <_free_r+0x46>
 8010150:	6825      	ldr	r5, [r4, #0]
 8010152:	1961      	adds	r1, r4, r5
 8010154:	428b      	cmp	r3, r1
 8010156:	bf01      	itttt	eq
 8010158:	6819      	ldreq	r1, [r3, #0]
 801015a:	685b      	ldreq	r3, [r3, #4]
 801015c:	1949      	addeq	r1, r1, r5
 801015e:	6021      	streq	r1, [r4, #0]
 8010160:	e7ed      	b.n	801013e <_free_r+0x22>
 8010162:	461a      	mov	r2, r3
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	b10b      	cbz	r3, 801016c <_free_r+0x50>
 8010168:	42a3      	cmp	r3, r4
 801016a:	d9fa      	bls.n	8010162 <_free_r+0x46>
 801016c:	6811      	ldr	r1, [r2, #0]
 801016e:	1855      	adds	r5, r2, r1
 8010170:	42a5      	cmp	r5, r4
 8010172:	d10b      	bne.n	801018c <_free_r+0x70>
 8010174:	6824      	ldr	r4, [r4, #0]
 8010176:	4421      	add	r1, r4
 8010178:	1854      	adds	r4, r2, r1
 801017a:	42a3      	cmp	r3, r4
 801017c:	6011      	str	r1, [r2, #0]
 801017e:	d1e0      	bne.n	8010142 <_free_r+0x26>
 8010180:	681c      	ldr	r4, [r3, #0]
 8010182:	685b      	ldr	r3, [r3, #4]
 8010184:	6053      	str	r3, [r2, #4]
 8010186:	440c      	add	r4, r1
 8010188:	6014      	str	r4, [r2, #0]
 801018a:	e7da      	b.n	8010142 <_free_r+0x26>
 801018c:	d902      	bls.n	8010194 <_free_r+0x78>
 801018e:	230c      	movs	r3, #12
 8010190:	6003      	str	r3, [r0, #0]
 8010192:	e7d6      	b.n	8010142 <_free_r+0x26>
 8010194:	6825      	ldr	r5, [r4, #0]
 8010196:	1961      	adds	r1, r4, r5
 8010198:	428b      	cmp	r3, r1
 801019a:	bf04      	itt	eq
 801019c:	6819      	ldreq	r1, [r3, #0]
 801019e:	685b      	ldreq	r3, [r3, #4]
 80101a0:	6063      	str	r3, [r4, #4]
 80101a2:	bf04      	itt	eq
 80101a4:	1949      	addeq	r1, r1, r5
 80101a6:	6021      	streq	r1, [r4, #0]
 80101a8:	6054      	str	r4, [r2, #4]
 80101aa:	e7ca      	b.n	8010142 <_free_r+0x26>
 80101ac:	b003      	add	sp, #12
 80101ae:	bd30      	pop	{r4, r5, pc}
 80101b0:	200096c4 	.word	0x200096c4

080101b4 <malloc>:
 80101b4:	4b02      	ldr	r3, [pc, #8]	; (80101c0 <malloc+0xc>)
 80101b6:	4601      	mov	r1, r0
 80101b8:	6818      	ldr	r0, [r3, #0]
 80101ba:	f000 b823 	b.w	8010204 <_malloc_r>
 80101be:	bf00      	nop
 80101c0:	20000070 	.word	0x20000070

080101c4 <sbrk_aligned>:
 80101c4:	b570      	push	{r4, r5, r6, lr}
 80101c6:	4e0e      	ldr	r6, [pc, #56]	; (8010200 <sbrk_aligned+0x3c>)
 80101c8:	460c      	mov	r4, r1
 80101ca:	6831      	ldr	r1, [r6, #0]
 80101cc:	4605      	mov	r5, r0
 80101ce:	b911      	cbnz	r1, 80101d6 <sbrk_aligned+0x12>
 80101d0:	f000 fcce 	bl	8010b70 <_sbrk_r>
 80101d4:	6030      	str	r0, [r6, #0]
 80101d6:	4621      	mov	r1, r4
 80101d8:	4628      	mov	r0, r5
 80101da:	f000 fcc9 	bl	8010b70 <_sbrk_r>
 80101de:	1c43      	adds	r3, r0, #1
 80101e0:	d00a      	beq.n	80101f8 <sbrk_aligned+0x34>
 80101e2:	1cc4      	adds	r4, r0, #3
 80101e4:	f024 0403 	bic.w	r4, r4, #3
 80101e8:	42a0      	cmp	r0, r4
 80101ea:	d007      	beq.n	80101fc <sbrk_aligned+0x38>
 80101ec:	1a21      	subs	r1, r4, r0
 80101ee:	4628      	mov	r0, r5
 80101f0:	f000 fcbe 	bl	8010b70 <_sbrk_r>
 80101f4:	3001      	adds	r0, #1
 80101f6:	d101      	bne.n	80101fc <sbrk_aligned+0x38>
 80101f8:	f04f 34ff 	mov.w	r4, #4294967295
 80101fc:	4620      	mov	r0, r4
 80101fe:	bd70      	pop	{r4, r5, r6, pc}
 8010200:	200096c8 	.word	0x200096c8

08010204 <_malloc_r>:
 8010204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010208:	1ccd      	adds	r5, r1, #3
 801020a:	f025 0503 	bic.w	r5, r5, #3
 801020e:	3508      	adds	r5, #8
 8010210:	2d0c      	cmp	r5, #12
 8010212:	bf38      	it	cc
 8010214:	250c      	movcc	r5, #12
 8010216:	2d00      	cmp	r5, #0
 8010218:	4607      	mov	r7, r0
 801021a:	db01      	blt.n	8010220 <_malloc_r+0x1c>
 801021c:	42a9      	cmp	r1, r5
 801021e:	d905      	bls.n	801022c <_malloc_r+0x28>
 8010220:	230c      	movs	r3, #12
 8010222:	603b      	str	r3, [r7, #0]
 8010224:	2600      	movs	r6, #0
 8010226:	4630      	mov	r0, r6
 8010228:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801022c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010300 <_malloc_r+0xfc>
 8010230:	f000 f868 	bl	8010304 <__malloc_lock>
 8010234:	f8d8 3000 	ldr.w	r3, [r8]
 8010238:	461c      	mov	r4, r3
 801023a:	bb5c      	cbnz	r4, 8010294 <_malloc_r+0x90>
 801023c:	4629      	mov	r1, r5
 801023e:	4638      	mov	r0, r7
 8010240:	f7ff ffc0 	bl	80101c4 <sbrk_aligned>
 8010244:	1c43      	adds	r3, r0, #1
 8010246:	4604      	mov	r4, r0
 8010248:	d155      	bne.n	80102f6 <_malloc_r+0xf2>
 801024a:	f8d8 4000 	ldr.w	r4, [r8]
 801024e:	4626      	mov	r6, r4
 8010250:	2e00      	cmp	r6, #0
 8010252:	d145      	bne.n	80102e0 <_malloc_r+0xdc>
 8010254:	2c00      	cmp	r4, #0
 8010256:	d048      	beq.n	80102ea <_malloc_r+0xe6>
 8010258:	6823      	ldr	r3, [r4, #0]
 801025a:	4631      	mov	r1, r6
 801025c:	4638      	mov	r0, r7
 801025e:	eb04 0903 	add.w	r9, r4, r3
 8010262:	f000 fc85 	bl	8010b70 <_sbrk_r>
 8010266:	4581      	cmp	r9, r0
 8010268:	d13f      	bne.n	80102ea <_malloc_r+0xe6>
 801026a:	6821      	ldr	r1, [r4, #0]
 801026c:	1a6d      	subs	r5, r5, r1
 801026e:	4629      	mov	r1, r5
 8010270:	4638      	mov	r0, r7
 8010272:	f7ff ffa7 	bl	80101c4 <sbrk_aligned>
 8010276:	3001      	adds	r0, #1
 8010278:	d037      	beq.n	80102ea <_malloc_r+0xe6>
 801027a:	6823      	ldr	r3, [r4, #0]
 801027c:	442b      	add	r3, r5
 801027e:	6023      	str	r3, [r4, #0]
 8010280:	f8d8 3000 	ldr.w	r3, [r8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d038      	beq.n	80102fa <_malloc_r+0xf6>
 8010288:	685a      	ldr	r2, [r3, #4]
 801028a:	42a2      	cmp	r2, r4
 801028c:	d12b      	bne.n	80102e6 <_malloc_r+0xe2>
 801028e:	2200      	movs	r2, #0
 8010290:	605a      	str	r2, [r3, #4]
 8010292:	e00f      	b.n	80102b4 <_malloc_r+0xb0>
 8010294:	6822      	ldr	r2, [r4, #0]
 8010296:	1b52      	subs	r2, r2, r5
 8010298:	d41f      	bmi.n	80102da <_malloc_r+0xd6>
 801029a:	2a0b      	cmp	r2, #11
 801029c:	d917      	bls.n	80102ce <_malloc_r+0xca>
 801029e:	1961      	adds	r1, r4, r5
 80102a0:	42a3      	cmp	r3, r4
 80102a2:	6025      	str	r5, [r4, #0]
 80102a4:	bf18      	it	ne
 80102a6:	6059      	strne	r1, [r3, #4]
 80102a8:	6863      	ldr	r3, [r4, #4]
 80102aa:	bf08      	it	eq
 80102ac:	f8c8 1000 	streq.w	r1, [r8]
 80102b0:	5162      	str	r2, [r4, r5]
 80102b2:	604b      	str	r3, [r1, #4]
 80102b4:	4638      	mov	r0, r7
 80102b6:	f104 060b 	add.w	r6, r4, #11
 80102ba:	f000 f829 	bl	8010310 <__malloc_unlock>
 80102be:	f026 0607 	bic.w	r6, r6, #7
 80102c2:	1d23      	adds	r3, r4, #4
 80102c4:	1af2      	subs	r2, r6, r3
 80102c6:	d0ae      	beq.n	8010226 <_malloc_r+0x22>
 80102c8:	1b9b      	subs	r3, r3, r6
 80102ca:	50a3      	str	r3, [r4, r2]
 80102cc:	e7ab      	b.n	8010226 <_malloc_r+0x22>
 80102ce:	42a3      	cmp	r3, r4
 80102d0:	6862      	ldr	r2, [r4, #4]
 80102d2:	d1dd      	bne.n	8010290 <_malloc_r+0x8c>
 80102d4:	f8c8 2000 	str.w	r2, [r8]
 80102d8:	e7ec      	b.n	80102b4 <_malloc_r+0xb0>
 80102da:	4623      	mov	r3, r4
 80102dc:	6864      	ldr	r4, [r4, #4]
 80102de:	e7ac      	b.n	801023a <_malloc_r+0x36>
 80102e0:	4634      	mov	r4, r6
 80102e2:	6876      	ldr	r6, [r6, #4]
 80102e4:	e7b4      	b.n	8010250 <_malloc_r+0x4c>
 80102e6:	4613      	mov	r3, r2
 80102e8:	e7cc      	b.n	8010284 <_malloc_r+0x80>
 80102ea:	230c      	movs	r3, #12
 80102ec:	603b      	str	r3, [r7, #0]
 80102ee:	4638      	mov	r0, r7
 80102f0:	f000 f80e 	bl	8010310 <__malloc_unlock>
 80102f4:	e797      	b.n	8010226 <_malloc_r+0x22>
 80102f6:	6025      	str	r5, [r4, #0]
 80102f8:	e7dc      	b.n	80102b4 <_malloc_r+0xb0>
 80102fa:	605b      	str	r3, [r3, #4]
 80102fc:	deff      	udf	#255	; 0xff
 80102fe:	bf00      	nop
 8010300:	200096c4 	.word	0x200096c4

08010304 <__malloc_lock>:
 8010304:	4801      	ldr	r0, [pc, #4]	; (801030c <__malloc_lock+0x8>)
 8010306:	f7ff b87d 	b.w	800f404 <__retarget_lock_acquire_recursive>
 801030a:	bf00      	nop
 801030c:	200096c0 	.word	0x200096c0

08010310 <__malloc_unlock>:
 8010310:	4801      	ldr	r0, [pc, #4]	; (8010318 <__malloc_unlock+0x8>)
 8010312:	f7ff b878 	b.w	800f406 <__retarget_lock_release_recursive>
 8010316:	bf00      	nop
 8010318:	200096c0 	.word	0x200096c0

0801031c <_Balloc>:
 801031c:	b570      	push	{r4, r5, r6, lr}
 801031e:	69c6      	ldr	r6, [r0, #28]
 8010320:	4604      	mov	r4, r0
 8010322:	460d      	mov	r5, r1
 8010324:	b976      	cbnz	r6, 8010344 <_Balloc+0x28>
 8010326:	2010      	movs	r0, #16
 8010328:	f7ff ff44 	bl	80101b4 <malloc>
 801032c:	4602      	mov	r2, r0
 801032e:	61e0      	str	r0, [r4, #28]
 8010330:	b920      	cbnz	r0, 801033c <_Balloc+0x20>
 8010332:	4b18      	ldr	r3, [pc, #96]	; (8010394 <_Balloc+0x78>)
 8010334:	4818      	ldr	r0, [pc, #96]	; (8010398 <_Balloc+0x7c>)
 8010336:	216b      	movs	r1, #107	; 0x6b
 8010338:	f000 fc2a 	bl	8010b90 <__assert_func>
 801033c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010340:	6006      	str	r6, [r0, #0]
 8010342:	60c6      	str	r6, [r0, #12]
 8010344:	69e6      	ldr	r6, [r4, #28]
 8010346:	68f3      	ldr	r3, [r6, #12]
 8010348:	b183      	cbz	r3, 801036c <_Balloc+0x50>
 801034a:	69e3      	ldr	r3, [r4, #28]
 801034c:	68db      	ldr	r3, [r3, #12]
 801034e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010352:	b9b8      	cbnz	r0, 8010384 <_Balloc+0x68>
 8010354:	2101      	movs	r1, #1
 8010356:	fa01 f605 	lsl.w	r6, r1, r5
 801035a:	1d72      	adds	r2, r6, #5
 801035c:	0092      	lsls	r2, r2, #2
 801035e:	4620      	mov	r0, r4
 8010360:	f000 fc34 	bl	8010bcc <_calloc_r>
 8010364:	b160      	cbz	r0, 8010380 <_Balloc+0x64>
 8010366:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801036a:	e00e      	b.n	801038a <_Balloc+0x6e>
 801036c:	2221      	movs	r2, #33	; 0x21
 801036e:	2104      	movs	r1, #4
 8010370:	4620      	mov	r0, r4
 8010372:	f000 fc2b 	bl	8010bcc <_calloc_r>
 8010376:	69e3      	ldr	r3, [r4, #28]
 8010378:	60f0      	str	r0, [r6, #12]
 801037a:	68db      	ldr	r3, [r3, #12]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1e4      	bne.n	801034a <_Balloc+0x2e>
 8010380:	2000      	movs	r0, #0
 8010382:	bd70      	pop	{r4, r5, r6, pc}
 8010384:	6802      	ldr	r2, [r0, #0]
 8010386:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801038a:	2300      	movs	r3, #0
 801038c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010390:	e7f7      	b.n	8010382 <_Balloc+0x66>
 8010392:	bf00      	nop
 8010394:	08011939 	.word	0x08011939
 8010398:	080119b9 	.word	0x080119b9

0801039c <_Bfree>:
 801039c:	b570      	push	{r4, r5, r6, lr}
 801039e:	69c6      	ldr	r6, [r0, #28]
 80103a0:	4605      	mov	r5, r0
 80103a2:	460c      	mov	r4, r1
 80103a4:	b976      	cbnz	r6, 80103c4 <_Bfree+0x28>
 80103a6:	2010      	movs	r0, #16
 80103a8:	f7ff ff04 	bl	80101b4 <malloc>
 80103ac:	4602      	mov	r2, r0
 80103ae:	61e8      	str	r0, [r5, #28]
 80103b0:	b920      	cbnz	r0, 80103bc <_Bfree+0x20>
 80103b2:	4b09      	ldr	r3, [pc, #36]	; (80103d8 <_Bfree+0x3c>)
 80103b4:	4809      	ldr	r0, [pc, #36]	; (80103dc <_Bfree+0x40>)
 80103b6:	218f      	movs	r1, #143	; 0x8f
 80103b8:	f000 fbea 	bl	8010b90 <__assert_func>
 80103bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103c0:	6006      	str	r6, [r0, #0]
 80103c2:	60c6      	str	r6, [r0, #12]
 80103c4:	b13c      	cbz	r4, 80103d6 <_Bfree+0x3a>
 80103c6:	69eb      	ldr	r3, [r5, #28]
 80103c8:	6862      	ldr	r2, [r4, #4]
 80103ca:	68db      	ldr	r3, [r3, #12]
 80103cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103d0:	6021      	str	r1, [r4, #0]
 80103d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80103d6:	bd70      	pop	{r4, r5, r6, pc}
 80103d8:	08011939 	.word	0x08011939
 80103dc:	080119b9 	.word	0x080119b9

080103e0 <__multadd>:
 80103e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103e4:	690d      	ldr	r5, [r1, #16]
 80103e6:	4607      	mov	r7, r0
 80103e8:	460c      	mov	r4, r1
 80103ea:	461e      	mov	r6, r3
 80103ec:	f101 0c14 	add.w	ip, r1, #20
 80103f0:	2000      	movs	r0, #0
 80103f2:	f8dc 3000 	ldr.w	r3, [ip]
 80103f6:	b299      	uxth	r1, r3
 80103f8:	fb02 6101 	mla	r1, r2, r1, r6
 80103fc:	0c1e      	lsrs	r6, r3, #16
 80103fe:	0c0b      	lsrs	r3, r1, #16
 8010400:	fb02 3306 	mla	r3, r2, r6, r3
 8010404:	b289      	uxth	r1, r1
 8010406:	3001      	adds	r0, #1
 8010408:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801040c:	4285      	cmp	r5, r0
 801040e:	f84c 1b04 	str.w	r1, [ip], #4
 8010412:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010416:	dcec      	bgt.n	80103f2 <__multadd+0x12>
 8010418:	b30e      	cbz	r6, 801045e <__multadd+0x7e>
 801041a:	68a3      	ldr	r3, [r4, #8]
 801041c:	42ab      	cmp	r3, r5
 801041e:	dc19      	bgt.n	8010454 <__multadd+0x74>
 8010420:	6861      	ldr	r1, [r4, #4]
 8010422:	4638      	mov	r0, r7
 8010424:	3101      	adds	r1, #1
 8010426:	f7ff ff79 	bl	801031c <_Balloc>
 801042a:	4680      	mov	r8, r0
 801042c:	b928      	cbnz	r0, 801043a <__multadd+0x5a>
 801042e:	4602      	mov	r2, r0
 8010430:	4b0c      	ldr	r3, [pc, #48]	; (8010464 <__multadd+0x84>)
 8010432:	480d      	ldr	r0, [pc, #52]	; (8010468 <__multadd+0x88>)
 8010434:	21ba      	movs	r1, #186	; 0xba
 8010436:	f000 fbab 	bl	8010b90 <__assert_func>
 801043a:	6922      	ldr	r2, [r4, #16]
 801043c:	3202      	adds	r2, #2
 801043e:	f104 010c 	add.w	r1, r4, #12
 8010442:	0092      	lsls	r2, r2, #2
 8010444:	300c      	adds	r0, #12
 8010446:	f7fe ffdf 	bl	800f408 <memcpy>
 801044a:	4621      	mov	r1, r4
 801044c:	4638      	mov	r0, r7
 801044e:	f7ff ffa5 	bl	801039c <_Bfree>
 8010452:	4644      	mov	r4, r8
 8010454:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010458:	3501      	adds	r5, #1
 801045a:	615e      	str	r6, [r3, #20]
 801045c:	6125      	str	r5, [r4, #16]
 801045e:	4620      	mov	r0, r4
 8010460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010464:	080119a8 	.word	0x080119a8
 8010468:	080119b9 	.word	0x080119b9

0801046c <__hi0bits>:
 801046c:	0c03      	lsrs	r3, r0, #16
 801046e:	041b      	lsls	r3, r3, #16
 8010470:	b9d3      	cbnz	r3, 80104a8 <__hi0bits+0x3c>
 8010472:	0400      	lsls	r0, r0, #16
 8010474:	2310      	movs	r3, #16
 8010476:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801047a:	bf04      	itt	eq
 801047c:	0200      	lsleq	r0, r0, #8
 801047e:	3308      	addeq	r3, #8
 8010480:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010484:	bf04      	itt	eq
 8010486:	0100      	lsleq	r0, r0, #4
 8010488:	3304      	addeq	r3, #4
 801048a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801048e:	bf04      	itt	eq
 8010490:	0080      	lsleq	r0, r0, #2
 8010492:	3302      	addeq	r3, #2
 8010494:	2800      	cmp	r0, #0
 8010496:	db05      	blt.n	80104a4 <__hi0bits+0x38>
 8010498:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801049c:	f103 0301 	add.w	r3, r3, #1
 80104a0:	bf08      	it	eq
 80104a2:	2320      	moveq	r3, #32
 80104a4:	4618      	mov	r0, r3
 80104a6:	4770      	bx	lr
 80104a8:	2300      	movs	r3, #0
 80104aa:	e7e4      	b.n	8010476 <__hi0bits+0xa>

080104ac <__lo0bits>:
 80104ac:	6803      	ldr	r3, [r0, #0]
 80104ae:	f013 0207 	ands.w	r2, r3, #7
 80104b2:	d00c      	beq.n	80104ce <__lo0bits+0x22>
 80104b4:	07d9      	lsls	r1, r3, #31
 80104b6:	d422      	bmi.n	80104fe <__lo0bits+0x52>
 80104b8:	079a      	lsls	r2, r3, #30
 80104ba:	bf49      	itett	mi
 80104bc:	085b      	lsrmi	r3, r3, #1
 80104be:	089b      	lsrpl	r3, r3, #2
 80104c0:	6003      	strmi	r3, [r0, #0]
 80104c2:	2201      	movmi	r2, #1
 80104c4:	bf5c      	itt	pl
 80104c6:	6003      	strpl	r3, [r0, #0]
 80104c8:	2202      	movpl	r2, #2
 80104ca:	4610      	mov	r0, r2
 80104cc:	4770      	bx	lr
 80104ce:	b299      	uxth	r1, r3
 80104d0:	b909      	cbnz	r1, 80104d6 <__lo0bits+0x2a>
 80104d2:	0c1b      	lsrs	r3, r3, #16
 80104d4:	2210      	movs	r2, #16
 80104d6:	b2d9      	uxtb	r1, r3
 80104d8:	b909      	cbnz	r1, 80104de <__lo0bits+0x32>
 80104da:	3208      	adds	r2, #8
 80104dc:	0a1b      	lsrs	r3, r3, #8
 80104de:	0719      	lsls	r1, r3, #28
 80104e0:	bf04      	itt	eq
 80104e2:	091b      	lsreq	r3, r3, #4
 80104e4:	3204      	addeq	r2, #4
 80104e6:	0799      	lsls	r1, r3, #30
 80104e8:	bf04      	itt	eq
 80104ea:	089b      	lsreq	r3, r3, #2
 80104ec:	3202      	addeq	r2, #2
 80104ee:	07d9      	lsls	r1, r3, #31
 80104f0:	d403      	bmi.n	80104fa <__lo0bits+0x4e>
 80104f2:	085b      	lsrs	r3, r3, #1
 80104f4:	f102 0201 	add.w	r2, r2, #1
 80104f8:	d003      	beq.n	8010502 <__lo0bits+0x56>
 80104fa:	6003      	str	r3, [r0, #0]
 80104fc:	e7e5      	b.n	80104ca <__lo0bits+0x1e>
 80104fe:	2200      	movs	r2, #0
 8010500:	e7e3      	b.n	80104ca <__lo0bits+0x1e>
 8010502:	2220      	movs	r2, #32
 8010504:	e7e1      	b.n	80104ca <__lo0bits+0x1e>
	...

08010508 <__i2b>:
 8010508:	b510      	push	{r4, lr}
 801050a:	460c      	mov	r4, r1
 801050c:	2101      	movs	r1, #1
 801050e:	f7ff ff05 	bl	801031c <_Balloc>
 8010512:	4602      	mov	r2, r0
 8010514:	b928      	cbnz	r0, 8010522 <__i2b+0x1a>
 8010516:	4b05      	ldr	r3, [pc, #20]	; (801052c <__i2b+0x24>)
 8010518:	4805      	ldr	r0, [pc, #20]	; (8010530 <__i2b+0x28>)
 801051a:	f240 1145 	movw	r1, #325	; 0x145
 801051e:	f000 fb37 	bl	8010b90 <__assert_func>
 8010522:	2301      	movs	r3, #1
 8010524:	6144      	str	r4, [r0, #20]
 8010526:	6103      	str	r3, [r0, #16]
 8010528:	bd10      	pop	{r4, pc}
 801052a:	bf00      	nop
 801052c:	080119a8 	.word	0x080119a8
 8010530:	080119b9 	.word	0x080119b9

08010534 <__multiply>:
 8010534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010538:	4691      	mov	r9, r2
 801053a:	690a      	ldr	r2, [r1, #16]
 801053c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010540:	429a      	cmp	r2, r3
 8010542:	bfb8      	it	lt
 8010544:	460b      	movlt	r3, r1
 8010546:	460c      	mov	r4, r1
 8010548:	bfbc      	itt	lt
 801054a:	464c      	movlt	r4, r9
 801054c:	4699      	movlt	r9, r3
 801054e:	6927      	ldr	r7, [r4, #16]
 8010550:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010554:	68a3      	ldr	r3, [r4, #8]
 8010556:	6861      	ldr	r1, [r4, #4]
 8010558:	eb07 060a 	add.w	r6, r7, sl
 801055c:	42b3      	cmp	r3, r6
 801055e:	b085      	sub	sp, #20
 8010560:	bfb8      	it	lt
 8010562:	3101      	addlt	r1, #1
 8010564:	f7ff feda 	bl	801031c <_Balloc>
 8010568:	b930      	cbnz	r0, 8010578 <__multiply+0x44>
 801056a:	4602      	mov	r2, r0
 801056c:	4b44      	ldr	r3, [pc, #272]	; (8010680 <__multiply+0x14c>)
 801056e:	4845      	ldr	r0, [pc, #276]	; (8010684 <__multiply+0x150>)
 8010570:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010574:	f000 fb0c 	bl	8010b90 <__assert_func>
 8010578:	f100 0514 	add.w	r5, r0, #20
 801057c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010580:	462b      	mov	r3, r5
 8010582:	2200      	movs	r2, #0
 8010584:	4543      	cmp	r3, r8
 8010586:	d321      	bcc.n	80105cc <__multiply+0x98>
 8010588:	f104 0314 	add.w	r3, r4, #20
 801058c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010590:	f109 0314 	add.w	r3, r9, #20
 8010594:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010598:	9202      	str	r2, [sp, #8]
 801059a:	1b3a      	subs	r2, r7, r4
 801059c:	3a15      	subs	r2, #21
 801059e:	f022 0203 	bic.w	r2, r2, #3
 80105a2:	3204      	adds	r2, #4
 80105a4:	f104 0115 	add.w	r1, r4, #21
 80105a8:	428f      	cmp	r7, r1
 80105aa:	bf38      	it	cc
 80105ac:	2204      	movcc	r2, #4
 80105ae:	9201      	str	r2, [sp, #4]
 80105b0:	9a02      	ldr	r2, [sp, #8]
 80105b2:	9303      	str	r3, [sp, #12]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d80c      	bhi.n	80105d2 <__multiply+0x9e>
 80105b8:	2e00      	cmp	r6, #0
 80105ba:	dd03      	ble.n	80105c4 <__multiply+0x90>
 80105bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d05b      	beq.n	801067c <__multiply+0x148>
 80105c4:	6106      	str	r6, [r0, #16]
 80105c6:	b005      	add	sp, #20
 80105c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105cc:	f843 2b04 	str.w	r2, [r3], #4
 80105d0:	e7d8      	b.n	8010584 <__multiply+0x50>
 80105d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80105d6:	f1ba 0f00 	cmp.w	sl, #0
 80105da:	d024      	beq.n	8010626 <__multiply+0xf2>
 80105dc:	f104 0e14 	add.w	lr, r4, #20
 80105e0:	46a9      	mov	r9, r5
 80105e2:	f04f 0c00 	mov.w	ip, #0
 80105e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80105ea:	f8d9 1000 	ldr.w	r1, [r9]
 80105ee:	fa1f fb82 	uxth.w	fp, r2
 80105f2:	b289      	uxth	r1, r1
 80105f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80105f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80105fc:	f8d9 2000 	ldr.w	r2, [r9]
 8010600:	4461      	add	r1, ip
 8010602:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010606:	fb0a c20b 	mla	r2, sl, fp, ip
 801060a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801060e:	b289      	uxth	r1, r1
 8010610:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010614:	4577      	cmp	r7, lr
 8010616:	f849 1b04 	str.w	r1, [r9], #4
 801061a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801061e:	d8e2      	bhi.n	80105e6 <__multiply+0xb2>
 8010620:	9a01      	ldr	r2, [sp, #4]
 8010622:	f845 c002 	str.w	ip, [r5, r2]
 8010626:	9a03      	ldr	r2, [sp, #12]
 8010628:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801062c:	3304      	adds	r3, #4
 801062e:	f1b9 0f00 	cmp.w	r9, #0
 8010632:	d021      	beq.n	8010678 <__multiply+0x144>
 8010634:	6829      	ldr	r1, [r5, #0]
 8010636:	f104 0c14 	add.w	ip, r4, #20
 801063a:	46ae      	mov	lr, r5
 801063c:	f04f 0a00 	mov.w	sl, #0
 8010640:	f8bc b000 	ldrh.w	fp, [ip]
 8010644:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010648:	fb09 220b 	mla	r2, r9, fp, r2
 801064c:	4452      	add	r2, sl
 801064e:	b289      	uxth	r1, r1
 8010650:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010654:	f84e 1b04 	str.w	r1, [lr], #4
 8010658:	f85c 1b04 	ldr.w	r1, [ip], #4
 801065c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010660:	f8be 1000 	ldrh.w	r1, [lr]
 8010664:	fb09 110a 	mla	r1, r9, sl, r1
 8010668:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801066c:	4567      	cmp	r7, ip
 801066e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010672:	d8e5      	bhi.n	8010640 <__multiply+0x10c>
 8010674:	9a01      	ldr	r2, [sp, #4]
 8010676:	50a9      	str	r1, [r5, r2]
 8010678:	3504      	adds	r5, #4
 801067a:	e799      	b.n	80105b0 <__multiply+0x7c>
 801067c:	3e01      	subs	r6, #1
 801067e:	e79b      	b.n	80105b8 <__multiply+0x84>
 8010680:	080119a8 	.word	0x080119a8
 8010684:	080119b9 	.word	0x080119b9

08010688 <__pow5mult>:
 8010688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801068c:	4615      	mov	r5, r2
 801068e:	f012 0203 	ands.w	r2, r2, #3
 8010692:	4606      	mov	r6, r0
 8010694:	460f      	mov	r7, r1
 8010696:	d007      	beq.n	80106a8 <__pow5mult+0x20>
 8010698:	4c25      	ldr	r4, [pc, #148]	; (8010730 <__pow5mult+0xa8>)
 801069a:	3a01      	subs	r2, #1
 801069c:	2300      	movs	r3, #0
 801069e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80106a2:	f7ff fe9d 	bl	80103e0 <__multadd>
 80106a6:	4607      	mov	r7, r0
 80106a8:	10ad      	asrs	r5, r5, #2
 80106aa:	d03d      	beq.n	8010728 <__pow5mult+0xa0>
 80106ac:	69f4      	ldr	r4, [r6, #28]
 80106ae:	b97c      	cbnz	r4, 80106d0 <__pow5mult+0x48>
 80106b0:	2010      	movs	r0, #16
 80106b2:	f7ff fd7f 	bl	80101b4 <malloc>
 80106b6:	4602      	mov	r2, r0
 80106b8:	61f0      	str	r0, [r6, #28]
 80106ba:	b928      	cbnz	r0, 80106c8 <__pow5mult+0x40>
 80106bc:	4b1d      	ldr	r3, [pc, #116]	; (8010734 <__pow5mult+0xac>)
 80106be:	481e      	ldr	r0, [pc, #120]	; (8010738 <__pow5mult+0xb0>)
 80106c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80106c4:	f000 fa64 	bl	8010b90 <__assert_func>
 80106c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106cc:	6004      	str	r4, [r0, #0]
 80106ce:	60c4      	str	r4, [r0, #12]
 80106d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80106d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106d8:	b94c      	cbnz	r4, 80106ee <__pow5mult+0x66>
 80106da:	f240 2171 	movw	r1, #625	; 0x271
 80106de:	4630      	mov	r0, r6
 80106e0:	f7ff ff12 	bl	8010508 <__i2b>
 80106e4:	2300      	movs	r3, #0
 80106e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80106ea:	4604      	mov	r4, r0
 80106ec:	6003      	str	r3, [r0, #0]
 80106ee:	f04f 0900 	mov.w	r9, #0
 80106f2:	07eb      	lsls	r3, r5, #31
 80106f4:	d50a      	bpl.n	801070c <__pow5mult+0x84>
 80106f6:	4639      	mov	r1, r7
 80106f8:	4622      	mov	r2, r4
 80106fa:	4630      	mov	r0, r6
 80106fc:	f7ff ff1a 	bl	8010534 <__multiply>
 8010700:	4639      	mov	r1, r7
 8010702:	4680      	mov	r8, r0
 8010704:	4630      	mov	r0, r6
 8010706:	f7ff fe49 	bl	801039c <_Bfree>
 801070a:	4647      	mov	r7, r8
 801070c:	106d      	asrs	r5, r5, #1
 801070e:	d00b      	beq.n	8010728 <__pow5mult+0xa0>
 8010710:	6820      	ldr	r0, [r4, #0]
 8010712:	b938      	cbnz	r0, 8010724 <__pow5mult+0x9c>
 8010714:	4622      	mov	r2, r4
 8010716:	4621      	mov	r1, r4
 8010718:	4630      	mov	r0, r6
 801071a:	f7ff ff0b 	bl	8010534 <__multiply>
 801071e:	6020      	str	r0, [r4, #0]
 8010720:	f8c0 9000 	str.w	r9, [r0]
 8010724:	4604      	mov	r4, r0
 8010726:	e7e4      	b.n	80106f2 <__pow5mult+0x6a>
 8010728:	4638      	mov	r0, r7
 801072a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801072e:	bf00      	nop
 8010730:	08011b08 	.word	0x08011b08
 8010734:	08011939 	.word	0x08011939
 8010738:	080119b9 	.word	0x080119b9

0801073c <__lshift>:
 801073c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010740:	460c      	mov	r4, r1
 8010742:	6849      	ldr	r1, [r1, #4]
 8010744:	6923      	ldr	r3, [r4, #16]
 8010746:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801074a:	68a3      	ldr	r3, [r4, #8]
 801074c:	4607      	mov	r7, r0
 801074e:	4691      	mov	r9, r2
 8010750:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010754:	f108 0601 	add.w	r6, r8, #1
 8010758:	42b3      	cmp	r3, r6
 801075a:	db0b      	blt.n	8010774 <__lshift+0x38>
 801075c:	4638      	mov	r0, r7
 801075e:	f7ff fddd 	bl	801031c <_Balloc>
 8010762:	4605      	mov	r5, r0
 8010764:	b948      	cbnz	r0, 801077a <__lshift+0x3e>
 8010766:	4602      	mov	r2, r0
 8010768:	4b28      	ldr	r3, [pc, #160]	; (801080c <__lshift+0xd0>)
 801076a:	4829      	ldr	r0, [pc, #164]	; (8010810 <__lshift+0xd4>)
 801076c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010770:	f000 fa0e 	bl	8010b90 <__assert_func>
 8010774:	3101      	adds	r1, #1
 8010776:	005b      	lsls	r3, r3, #1
 8010778:	e7ee      	b.n	8010758 <__lshift+0x1c>
 801077a:	2300      	movs	r3, #0
 801077c:	f100 0114 	add.w	r1, r0, #20
 8010780:	f100 0210 	add.w	r2, r0, #16
 8010784:	4618      	mov	r0, r3
 8010786:	4553      	cmp	r3, sl
 8010788:	db33      	blt.n	80107f2 <__lshift+0xb6>
 801078a:	6920      	ldr	r0, [r4, #16]
 801078c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010790:	f104 0314 	add.w	r3, r4, #20
 8010794:	f019 091f 	ands.w	r9, r9, #31
 8010798:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801079c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80107a0:	d02b      	beq.n	80107fa <__lshift+0xbe>
 80107a2:	f1c9 0e20 	rsb	lr, r9, #32
 80107a6:	468a      	mov	sl, r1
 80107a8:	2200      	movs	r2, #0
 80107aa:	6818      	ldr	r0, [r3, #0]
 80107ac:	fa00 f009 	lsl.w	r0, r0, r9
 80107b0:	4310      	orrs	r0, r2
 80107b2:	f84a 0b04 	str.w	r0, [sl], #4
 80107b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80107ba:	459c      	cmp	ip, r3
 80107bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80107c0:	d8f3      	bhi.n	80107aa <__lshift+0x6e>
 80107c2:	ebac 0304 	sub.w	r3, ip, r4
 80107c6:	3b15      	subs	r3, #21
 80107c8:	f023 0303 	bic.w	r3, r3, #3
 80107cc:	3304      	adds	r3, #4
 80107ce:	f104 0015 	add.w	r0, r4, #21
 80107d2:	4584      	cmp	ip, r0
 80107d4:	bf38      	it	cc
 80107d6:	2304      	movcc	r3, #4
 80107d8:	50ca      	str	r2, [r1, r3]
 80107da:	b10a      	cbz	r2, 80107e0 <__lshift+0xa4>
 80107dc:	f108 0602 	add.w	r6, r8, #2
 80107e0:	3e01      	subs	r6, #1
 80107e2:	4638      	mov	r0, r7
 80107e4:	612e      	str	r6, [r5, #16]
 80107e6:	4621      	mov	r1, r4
 80107e8:	f7ff fdd8 	bl	801039c <_Bfree>
 80107ec:	4628      	mov	r0, r5
 80107ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80107f6:	3301      	adds	r3, #1
 80107f8:	e7c5      	b.n	8010786 <__lshift+0x4a>
 80107fa:	3904      	subs	r1, #4
 80107fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010800:	f841 2f04 	str.w	r2, [r1, #4]!
 8010804:	459c      	cmp	ip, r3
 8010806:	d8f9      	bhi.n	80107fc <__lshift+0xc0>
 8010808:	e7ea      	b.n	80107e0 <__lshift+0xa4>
 801080a:	bf00      	nop
 801080c:	080119a8 	.word	0x080119a8
 8010810:	080119b9 	.word	0x080119b9

08010814 <__mcmp>:
 8010814:	b530      	push	{r4, r5, lr}
 8010816:	6902      	ldr	r2, [r0, #16]
 8010818:	690c      	ldr	r4, [r1, #16]
 801081a:	1b12      	subs	r2, r2, r4
 801081c:	d10e      	bne.n	801083c <__mcmp+0x28>
 801081e:	f100 0314 	add.w	r3, r0, #20
 8010822:	3114      	adds	r1, #20
 8010824:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010828:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801082c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010830:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010834:	42a5      	cmp	r5, r4
 8010836:	d003      	beq.n	8010840 <__mcmp+0x2c>
 8010838:	d305      	bcc.n	8010846 <__mcmp+0x32>
 801083a:	2201      	movs	r2, #1
 801083c:	4610      	mov	r0, r2
 801083e:	bd30      	pop	{r4, r5, pc}
 8010840:	4283      	cmp	r3, r0
 8010842:	d3f3      	bcc.n	801082c <__mcmp+0x18>
 8010844:	e7fa      	b.n	801083c <__mcmp+0x28>
 8010846:	f04f 32ff 	mov.w	r2, #4294967295
 801084a:	e7f7      	b.n	801083c <__mcmp+0x28>

0801084c <__mdiff>:
 801084c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010850:	460c      	mov	r4, r1
 8010852:	4606      	mov	r6, r0
 8010854:	4611      	mov	r1, r2
 8010856:	4620      	mov	r0, r4
 8010858:	4690      	mov	r8, r2
 801085a:	f7ff ffdb 	bl	8010814 <__mcmp>
 801085e:	1e05      	subs	r5, r0, #0
 8010860:	d110      	bne.n	8010884 <__mdiff+0x38>
 8010862:	4629      	mov	r1, r5
 8010864:	4630      	mov	r0, r6
 8010866:	f7ff fd59 	bl	801031c <_Balloc>
 801086a:	b930      	cbnz	r0, 801087a <__mdiff+0x2e>
 801086c:	4b3a      	ldr	r3, [pc, #232]	; (8010958 <__mdiff+0x10c>)
 801086e:	4602      	mov	r2, r0
 8010870:	f240 2137 	movw	r1, #567	; 0x237
 8010874:	4839      	ldr	r0, [pc, #228]	; (801095c <__mdiff+0x110>)
 8010876:	f000 f98b 	bl	8010b90 <__assert_func>
 801087a:	2301      	movs	r3, #1
 801087c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010880:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010884:	bfa4      	itt	ge
 8010886:	4643      	movge	r3, r8
 8010888:	46a0      	movge	r8, r4
 801088a:	4630      	mov	r0, r6
 801088c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010890:	bfa6      	itte	ge
 8010892:	461c      	movge	r4, r3
 8010894:	2500      	movge	r5, #0
 8010896:	2501      	movlt	r5, #1
 8010898:	f7ff fd40 	bl	801031c <_Balloc>
 801089c:	b920      	cbnz	r0, 80108a8 <__mdiff+0x5c>
 801089e:	4b2e      	ldr	r3, [pc, #184]	; (8010958 <__mdiff+0x10c>)
 80108a0:	4602      	mov	r2, r0
 80108a2:	f240 2145 	movw	r1, #581	; 0x245
 80108a6:	e7e5      	b.n	8010874 <__mdiff+0x28>
 80108a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80108ac:	6926      	ldr	r6, [r4, #16]
 80108ae:	60c5      	str	r5, [r0, #12]
 80108b0:	f104 0914 	add.w	r9, r4, #20
 80108b4:	f108 0514 	add.w	r5, r8, #20
 80108b8:	f100 0e14 	add.w	lr, r0, #20
 80108bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80108c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80108c4:	f108 0210 	add.w	r2, r8, #16
 80108c8:	46f2      	mov	sl, lr
 80108ca:	2100      	movs	r1, #0
 80108cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80108d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80108d4:	fa11 f88b 	uxtah	r8, r1, fp
 80108d8:	b299      	uxth	r1, r3
 80108da:	0c1b      	lsrs	r3, r3, #16
 80108dc:	eba8 0801 	sub.w	r8, r8, r1
 80108e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80108e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80108e8:	fa1f f888 	uxth.w	r8, r8
 80108ec:	1419      	asrs	r1, r3, #16
 80108ee:	454e      	cmp	r6, r9
 80108f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80108f4:	f84a 3b04 	str.w	r3, [sl], #4
 80108f8:	d8e8      	bhi.n	80108cc <__mdiff+0x80>
 80108fa:	1b33      	subs	r3, r6, r4
 80108fc:	3b15      	subs	r3, #21
 80108fe:	f023 0303 	bic.w	r3, r3, #3
 8010902:	3304      	adds	r3, #4
 8010904:	3415      	adds	r4, #21
 8010906:	42a6      	cmp	r6, r4
 8010908:	bf38      	it	cc
 801090a:	2304      	movcc	r3, #4
 801090c:	441d      	add	r5, r3
 801090e:	4473      	add	r3, lr
 8010910:	469e      	mov	lr, r3
 8010912:	462e      	mov	r6, r5
 8010914:	4566      	cmp	r6, ip
 8010916:	d30e      	bcc.n	8010936 <__mdiff+0xea>
 8010918:	f10c 0203 	add.w	r2, ip, #3
 801091c:	1b52      	subs	r2, r2, r5
 801091e:	f022 0203 	bic.w	r2, r2, #3
 8010922:	3d03      	subs	r5, #3
 8010924:	45ac      	cmp	ip, r5
 8010926:	bf38      	it	cc
 8010928:	2200      	movcc	r2, #0
 801092a:	4413      	add	r3, r2
 801092c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010930:	b17a      	cbz	r2, 8010952 <__mdiff+0x106>
 8010932:	6107      	str	r7, [r0, #16]
 8010934:	e7a4      	b.n	8010880 <__mdiff+0x34>
 8010936:	f856 8b04 	ldr.w	r8, [r6], #4
 801093a:	fa11 f288 	uxtah	r2, r1, r8
 801093e:	1414      	asrs	r4, r2, #16
 8010940:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010944:	b292      	uxth	r2, r2
 8010946:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801094a:	f84e 2b04 	str.w	r2, [lr], #4
 801094e:	1421      	asrs	r1, r4, #16
 8010950:	e7e0      	b.n	8010914 <__mdiff+0xc8>
 8010952:	3f01      	subs	r7, #1
 8010954:	e7ea      	b.n	801092c <__mdiff+0xe0>
 8010956:	bf00      	nop
 8010958:	080119a8 	.word	0x080119a8
 801095c:	080119b9 	.word	0x080119b9

08010960 <__d2b>:
 8010960:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010964:	460f      	mov	r7, r1
 8010966:	2101      	movs	r1, #1
 8010968:	ec59 8b10 	vmov	r8, r9, d0
 801096c:	4616      	mov	r6, r2
 801096e:	f7ff fcd5 	bl	801031c <_Balloc>
 8010972:	4604      	mov	r4, r0
 8010974:	b930      	cbnz	r0, 8010984 <__d2b+0x24>
 8010976:	4602      	mov	r2, r0
 8010978:	4b24      	ldr	r3, [pc, #144]	; (8010a0c <__d2b+0xac>)
 801097a:	4825      	ldr	r0, [pc, #148]	; (8010a10 <__d2b+0xb0>)
 801097c:	f240 310f 	movw	r1, #783	; 0x30f
 8010980:	f000 f906 	bl	8010b90 <__assert_func>
 8010984:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010988:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801098c:	bb2d      	cbnz	r5, 80109da <__d2b+0x7a>
 801098e:	9301      	str	r3, [sp, #4]
 8010990:	f1b8 0300 	subs.w	r3, r8, #0
 8010994:	d026      	beq.n	80109e4 <__d2b+0x84>
 8010996:	4668      	mov	r0, sp
 8010998:	9300      	str	r3, [sp, #0]
 801099a:	f7ff fd87 	bl	80104ac <__lo0bits>
 801099e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80109a2:	b1e8      	cbz	r0, 80109e0 <__d2b+0x80>
 80109a4:	f1c0 0320 	rsb	r3, r0, #32
 80109a8:	fa02 f303 	lsl.w	r3, r2, r3
 80109ac:	430b      	orrs	r3, r1
 80109ae:	40c2      	lsrs	r2, r0
 80109b0:	6163      	str	r3, [r4, #20]
 80109b2:	9201      	str	r2, [sp, #4]
 80109b4:	9b01      	ldr	r3, [sp, #4]
 80109b6:	61a3      	str	r3, [r4, #24]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	bf14      	ite	ne
 80109bc:	2202      	movne	r2, #2
 80109be:	2201      	moveq	r2, #1
 80109c0:	6122      	str	r2, [r4, #16]
 80109c2:	b1bd      	cbz	r5, 80109f4 <__d2b+0x94>
 80109c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80109c8:	4405      	add	r5, r0
 80109ca:	603d      	str	r5, [r7, #0]
 80109cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80109d0:	6030      	str	r0, [r6, #0]
 80109d2:	4620      	mov	r0, r4
 80109d4:	b003      	add	sp, #12
 80109d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109de:	e7d6      	b.n	801098e <__d2b+0x2e>
 80109e0:	6161      	str	r1, [r4, #20]
 80109e2:	e7e7      	b.n	80109b4 <__d2b+0x54>
 80109e4:	a801      	add	r0, sp, #4
 80109e6:	f7ff fd61 	bl	80104ac <__lo0bits>
 80109ea:	9b01      	ldr	r3, [sp, #4]
 80109ec:	6163      	str	r3, [r4, #20]
 80109ee:	3020      	adds	r0, #32
 80109f0:	2201      	movs	r2, #1
 80109f2:	e7e5      	b.n	80109c0 <__d2b+0x60>
 80109f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80109f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80109fc:	6038      	str	r0, [r7, #0]
 80109fe:	6918      	ldr	r0, [r3, #16]
 8010a00:	f7ff fd34 	bl	801046c <__hi0bits>
 8010a04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a08:	e7e2      	b.n	80109d0 <__d2b+0x70>
 8010a0a:	bf00      	nop
 8010a0c:	080119a8 	.word	0x080119a8
 8010a10:	080119b9 	.word	0x080119b9

08010a14 <__sflush_r>:
 8010a14:	898a      	ldrh	r2, [r1, #12]
 8010a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a1a:	4605      	mov	r5, r0
 8010a1c:	0710      	lsls	r0, r2, #28
 8010a1e:	460c      	mov	r4, r1
 8010a20:	d458      	bmi.n	8010ad4 <__sflush_r+0xc0>
 8010a22:	684b      	ldr	r3, [r1, #4]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	dc05      	bgt.n	8010a34 <__sflush_r+0x20>
 8010a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	dc02      	bgt.n	8010a34 <__sflush_r+0x20>
 8010a2e:	2000      	movs	r0, #0
 8010a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a36:	2e00      	cmp	r6, #0
 8010a38:	d0f9      	beq.n	8010a2e <__sflush_r+0x1a>
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010a40:	682f      	ldr	r7, [r5, #0]
 8010a42:	6a21      	ldr	r1, [r4, #32]
 8010a44:	602b      	str	r3, [r5, #0]
 8010a46:	d032      	beq.n	8010aae <__sflush_r+0x9a>
 8010a48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010a4a:	89a3      	ldrh	r3, [r4, #12]
 8010a4c:	075a      	lsls	r2, r3, #29
 8010a4e:	d505      	bpl.n	8010a5c <__sflush_r+0x48>
 8010a50:	6863      	ldr	r3, [r4, #4]
 8010a52:	1ac0      	subs	r0, r0, r3
 8010a54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a56:	b10b      	cbz	r3, 8010a5c <__sflush_r+0x48>
 8010a58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010a5a:	1ac0      	subs	r0, r0, r3
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	4602      	mov	r2, r0
 8010a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010a62:	6a21      	ldr	r1, [r4, #32]
 8010a64:	4628      	mov	r0, r5
 8010a66:	47b0      	blx	r6
 8010a68:	1c43      	adds	r3, r0, #1
 8010a6a:	89a3      	ldrh	r3, [r4, #12]
 8010a6c:	d106      	bne.n	8010a7c <__sflush_r+0x68>
 8010a6e:	6829      	ldr	r1, [r5, #0]
 8010a70:	291d      	cmp	r1, #29
 8010a72:	d82b      	bhi.n	8010acc <__sflush_r+0xb8>
 8010a74:	4a29      	ldr	r2, [pc, #164]	; (8010b1c <__sflush_r+0x108>)
 8010a76:	410a      	asrs	r2, r1
 8010a78:	07d6      	lsls	r6, r2, #31
 8010a7a:	d427      	bmi.n	8010acc <__sflush_r+0xb8>
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	6062      	str	r2, [r4, #4]
 8010a80:	04d9      	lsls	r1, r3, #19
 8010a82:	6922      	ldr	r2, [r4, #16]
 8010a84:	6022      	str	r2, [r4, #0]
 8010a86:	d504      	bpl.n	8010a92 <__sflush_r+0x7e>
 8010a88:	1c42      	adds	r2, r0, #1
 8010a8a:	d101      	bne.n	8010a90 <__sflush_r+0x7c>
 8010a8c:	682b      	ldr	r3, [r5, #0]
 8010a8e:	b903      	cbnz	r3, 8010a92 <__sflush_r+0x7e>
 8010a90:	6560      	str	r0, [r4, #84]	; 0x54
 8010a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010a94:	602f      	str	r7, [r5, #0]
 8010a96:	2900      	cmp	r1, #0
 8010a98:	d0c9      	beq.n	8010a2e <__sflush_r+0x1a>
 8010a9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010a9e:	4299      	cmp	r1, r3
 8010aa0:	d002      	beq.n	8010aa8 <__sflush_r+0x94>
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	f7ff fb3a 	bl	801011c <_free_r>
 8010aa8:	2000      	movs	r0, #0
 8010aaa:	6360      	str	r0, [r4, #52]	; 0x34
 8010aac:	e7c0      	b.n	8010a30 <__sflush_r+0x1c>
 8010aae:	2301      	movs	r3, #1
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	47b0      	blx	r6
 8010ab4:	1c41      	adds	r1, r0, #1
 8010ab6:	d1c8      	bne.n	8010a4a <__sflush_r+0x36>
 8010ab8:	682b      	ldr	r3, [r5, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d0c5      	beq.n	8010a4a <__sflush_r+0x36>
 8010abe:	2b1d      	cmp	r3, #29
 8010ac0:	d001      	beq.n	8010ac6 <__sflush_r+0xb2>
 8010ac2:	2b16      	cmp	r3, #22
 8010ac4:	d101      	bne.n	8010aca <__sflush_r+0xb6>
 8010ac6:	602f      	str	r7, [r5, #0]
 8010ac8:	e7b1      	b.n	8010a2e <__sflush_r+0x1a>
 8010aca:	89a3      	ldrh	r3, [r4, #12]
 8010acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ad0:	81a3      	strh	r3, [r4, #12]
 8010ad2:	e7ad      	b.n	8010a30 <__sflush_r+0x1c>
 8010ad4:	690f      	ldr	r7, [r1, #16]
 8010ad6:	2f00      	cmp	r7, #0
 8010ad8:	d0a9      	beq.n	8010a2e <__sflush_r+0x1a>
 8010ada:	0793      	lsls	r3, r2, #30
 8010adc:	680e      	ldr	r6, [r1, #0]
 8010ade:	bf08      	it	eq
 8010ae0:	694b      	ldreq	r3, [r1, #20]
 8010ae2:	600f      	str	r7, [r1, #0]
 8010ae4:	bf18      	it	ne
 8010ae6:	2300      	movne	r3, #0
 8010ae8:	eba6 0807 	sub.w	r8, r6, r7
 8010aec:	608b      	str	r3, [r1, #8]
 8010aee:	f1b8 0f00 	cmp.w	r8, #0
 8010af2:	dd9c      	ble.n	8010a2e <__sflush_r+0x1a>
 8010af4:	6a21      	ldr	r1, [r4, #32]
 8010af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010af8:	4643      	mov	r3, r8
 8010afa:	463a      	mov	r2, r7
 8010afc:	4628      	mov	r0, r5
 8010afe:	47b0      	blx	r6
 8010b00:	2800      	cmp	r0, #0
 8010b02:	dc06      	bgt.n	8010b12 <__sflush_r+0xfe>
 8010b04:	89a3      	ldrh	r3, [r4, #12]
 8010b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b0a:	81a3      	strh	r3, [r4, #12]
 8010b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b10:	e78e      	b.n	8010a30 <__sflush_r+0x1c>
 8010b12:	4407      	add	r7, r0
 8010b14:	eba8 0800 	sub.w	r8, r8, r0
 8010b18:	e7e9      	b.n	8010aee <__sflush_r+0xda>
 8010b1a:	bf00      	nop
 8010b1c:	dfbffffe 	.word	0xdfbffffe

08010b20 <_fflush_r>:
 8010b20:	b538      	push	{r3, r4, r5, lr}
 8010b22:	690b      	ldr	r3, [r1, #16]
 8010b24:	4605      	mov	r5, r0
 8010b26:	460c      	mov	r4, r1
 8010b28:	b913      	cbnz	r3, 8010b30 <_fflush_r+0x10>
 8010b2a:	2500      	movs	r5, #0
 8010b2c:	4628      	mov	r0, r5
 8010b2e:	bd38      	pop	{r3, r4, r5, pc}
 8010b30:	b118      	cbz	r0, 8010b3a <_fflush_r+0x1a>
 8010b32:	6a03      	ldr	r3, [r0, #32]
 8010b34:	b90b      	cbnz	r3, 8010b3a <_fflush_r+0x1a>
 8010b36:	f7fe fb19 	bl	800f16c <__sinit>
 8010b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d0f3      	beq.n	8010b2a <_fflush_r+0xa>
 8010b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010b44:	07d0      	lsls	r0, r2, #31
 8010b46:	d404      	bmi.n	8010b52 <_fflush_r+0x32>
 8010b48:	0599      	lsls	r1, r3, #22
 8010b4a:	d402      	bmi.n	8010b52 <_fflush_r+0x32>
 8010b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b4e:	f7fe fc59 	bl	800f404 <__retarget_lock_acquire_recursive>
 8010b52:	4628      	mov	r0, r5
 8010b54:	4621      	mov	r1, r4
 8010b56:	f7ff ff5d 	bl	8010a14 <__sflush_r>
 8010b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010b5c:	07da      	lsls	r2, r3, #31
 8010b5e:	4605      	mov	r5, r0
 8010b60:	d4e4      	bmi.n	8010b2c <_fflush_r+0xc>
 8010b62:	89a3      	ldrh	r3, [r4, #12]
 8010b64:	059b      	lsls	r3, r3, #22
 8010b66:	d4e1      	bmi.n	8010b2c <_fflush_r+0xc>
 8010b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010b6a:	f7fe fc4c 	bl	800f406 <__retarget_lock_release_recursive>
 8010b6e:	e7dd      	b.n	8010b2c <_fflush_r+0xc>

08010b70 <_sbrk_r>:
 8010b70:	b538      	push	{r3, r4, r5, lr}
 8010b72:	4d06      	ldr	r5, [pc, #24]	; (8010b8c <_sbrk_r+0x1c>)
 8010b74:	2300      	movs	r3, #0
 8010b76:	4604      	mov	r4, r0
 8010b78:	4608      	mov	r0, r1
 8010b7a:	602b      	str	r3, [r5, #0]
 8010b7c:	f7f4 fb2a 	bl	80051d4 <_sbrk>
 8010b80:	1c43      	adds	r3, r0, #1
 8010b82:	d102      	bne.n	8010b8a <_sbrk_r+0x1a>
 8010b84:	682b      	ldr	r3, [r5, #0]
 8010b86:	b103      	cbz	r3, 8010b8a <_sbrk_r+0x1a>
 8010b88:	6023      	str	r3, [r4, #0]
 8010b8a:	bd38      	pop	{r3, r4, r5, pc}
 8010b8c:	200096bc 	.word	0x200096bc

08010b90 <__assert_func>:
 8010b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010b92:	4614      	mov	r4, r2
 8010b94:	461a      	mov	r2, r3
 8010b96:	4b09      	ldr	r3, [pc, #36]	; (8010bbc <__assert_func+0x2c>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4605      	mov	r5, r0
 8010b9c:	68d8      	ldr	r0, [r3, #12]
 8010b9e:	b14c      	cbz	r4, 8010bb4 <__assert_func+0x24>
 8010ba0:	4b07      	ldr	r3, [pc, #28]	; (8010bc0 <__assert_func+0x30>)
 8010ba2:	9100      	str	r1, [sp, #0]
 8010ba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ba8:	4906      	ldr	r1, [pc, #24]	; (8010bc4 <__assert_func+0x34>)
 8010baa:	462b      	mov	r3, r5
 8010bac:	f000 f844 	bl	8010c38 <fiprintf>
 8010bb0:	f000 f854 	bl	8010c5c <abort>
 8010bb4:	4b04      	ldr	r3, [pc, #16]	; (8010bc8 <__assert_func+0x38>)
 8010bb6:	461c      	mov	r4, r3
 8010bb8:	e7f3      	b.n	8010ba2 <__assert_func+0x12>
 8010bba:	bf00      	nop
 8010bbc:	20000070 	.word	0x20000070
 8010bc0:	08011b1e 	.word	0x08011b1e
 8010bc4:	08011b2b 	.word	0x08011b2b
 8010bc8:	08011b59 	.word	0x08011b59

08010bcc <_calloc_r>:
 8010bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010bce:	fba1 2402 	umull	r2, r4, r1, r2
 8010bd2:	b94c      	cbnz	r4, 8010be8 <_calloc_r+0x1c>
 8010bd4:	4611      	mov	r1, r2
 8010bd6:	9201      	str	r2, [sp, #4]
 8010bd8:	f7ff fb14 	bl	8010204 <_malloc_r>
 8010bdc:	9a01      	ldr	r2, [sp, #4]
 8010bde:	4605      	mov	r5, r0
 8010be0:	b930      	cbnz	r0, 8010bf0 <_calloc_r+0x24>
 8010be2:	4628      	mov	r0, r5
 8010be4:	b003      	add	sp, #12
 8010be6:	bd30      	pop	{r4, r5, pc}
 8010be8:	220c      	movs	r2, #12
 8010bea:	6002      	str	r2, [r0, #0]
 8010bec:	2500      	movs	r5, #0
 8010bee:	e7f8      	b.n	8010be2 <_calloc_r+0x16>
 8010bf0:	4621      	mov	r1, r4
 8010bf2:	f7fe fb34 	bl	800f25e <memset>
 8010bf6:	e7f4      	b.n	8010be2 <_calloc_r+0x16>

08010bf8 <__ascii_mbtowc>:
 8010bf8:	b082      	sub	sp, #8
 8010bfa:	b901      	cbnz	r1, 8010bfe <__ascii_mbtowc+0x6>
 8010bfc:	a901      	add	r1, sp, #4
 8010bfe:	b142      	cbz	r2, 8010c12 <__ascii_mbtowc+0x1a>
 8010c00:	b14b      	cbz	r3, 8010c16 <__ascii_mbtowc+0x1e>
 8010c02:	7813      	ldrb	r3, [r2, #0]
 8010c04:	600b      	str	r3, [r1, #0]
 8010c06:	7812      	ldrb	r2, [r2, #0]
 8010c08:	1e10      	subs	r0, r2, #0
 8010c0a:	bf18      	it	ne
 8010c0c:	2001      	movne	r0, #1
 8010c0e:	b002      	add	sp, #8
 8010c10:	4770      	bx	lr
 8010c12:	4610      	mov	r0, r2
 8010c14:	e7fb      	b.n	8010c0e <__ascii_mbtowc+0x16>
 8010c16:	f06f 0001 	mvn.w	r0, #1
 8010c1a:	e7f8      	b.n	8010c0e <__ascii_mbtowc+0x16>

08010c1c <__ascii_wctomb>:
 8010c1c:	b149      	cbz	r1, 8010c32 <__ascii_wctomb+0x16>
 8010c1e:	2aff      	cmp	r2, #255	; 0xff
 8010c20:	bf85      	ittet	hi
 8010c22:	238a      	movhi	r3, #138	; 0x8a
 8010c24:	6003      	strhi	r3, [r0, #0]
 8010c26:	700a      	strbls	r2, [r1, #0]
 8010c28:	f04f 30ff 	movhi.w	r0, #4294967295
 8010c2c:	bf98      	it	ls
 8010c2e:	2001      	movls	r0, #1
 8010c30:	4770      	bx	lr
 8010c32:	4608      	mov	r0, r1
 8010c34:	4770      	bx	lr
	...

08010c38 <fiprintf>:
 8010c38:	b40e      	push	{r1, r2, r3}
 8010c3a:	b503      	push	{r0, r1, lr}
 8010c3c:	4601      	mov	r1, r0
 8010c3e:	ab03      	add	r3, sp, #12
 8010c40:	4805      	ldr	r0, [pc, #20]	; (8010c58 <fiprintf+0x20>)
 8010c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c46:	6800      	ldr	r0, [r0, #0]
 8010c48:	9301      	str	r3, [sp, #4]
 8010c4a:	f000 f837 	bl	8010cbc <_vfiprintf_r>
 8010c4e:	b002      	add	sp, #8
 8010c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c54:	b003      	add	sp, #12
 8010c56:	4770      	bx	lr
 8010c58:	20000070 	.word	0x20000070

08010c5c <abort>:
 8010c5c:	b508      	push	{r3, lr}
 8010c5e:	2006      	movs	r0, #6
 8010c60:	f000 fa04 	bl	801106c <raise>
 8010c64:	2001      	movs	r0, #1
 8010c66:	f7f4 fa3d 	bl	80050e4 <_exit>

08010c6a <__sfputc_r>:
 8010c6a:	6893      	ldr	r3, [r2, #8]
 8010c6c:	3b01      	subs	r3, #1
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	b410      	push	{r4}
 8010c72:	6093      	str	r3, [r2, #8]
 8010c74:	da08      	bge.n	8010c88 <__sfputc_r+0x1e>
 8010c76:	6994      	ldr	r4, [r2, #24]
 8010c78:	42a3      	cmp	r3, r4
 8010c7a:	db01      	blt.n	8010c80 <__sfputc_r+0x16>
 8010c7c:	290a      	cmp	r1, #10
 8010c7e:	d103      	bne.n	8010c88 <__sfputc_r+0x1e>
 8010c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c84:	f000 b934 	b.w	8010ef0 <__swbuf_r>
 8010c88:	6813      	ldr	r3, [r2, #0]
 8010c8a:	1c58      	adds	r0, r3, #1
 8010c8c:	6010      	str	r0, [r2, #0]
 8010c8e:	7019      	strb	r1, [r3, #0]
 8010c90:	4608      	mov	r0, r1
 8010c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c96:	4770      	bx	lr

08010c98 <__sfputs_r>:
 8010c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c9a:	4606      	mov	r6, r0
 8010c9c:	460f      	mov	r7, r1
 8010c9e:	4614      	mov	r4, r2
 8010ca0:	18d5      	adds	r5, r2, r3
 8010ca2:	42ac      	cmp	r4, r5
 8010ca4:	d101      	bne.n	8010caa <__sfputs_r+0x12>
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	e007      	b.n	8010cba <__sfputs_r+0x22>
 8010caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cae:	463a      	mov	r2, r7
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	f7ff ffda 	bl	8010c6a <__sfputc_r>
 8010cb6:	1c43      	adds	r3, r0, #1
 8010cb8:	d1f3      	bne.n	8010ca2 <__sfputs_r+0xa>
 8010cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010cbc <_vfiprintf_r>:
 8010cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cc0:	460d      	mov	r5, r1
 8010cc2:	b09d      	sub	sp, #116	; 0x74
 8010cc4:	4614      	mov	r4, r2
 8010cc6:	4698      	mov	r8, r3
 8010cc8:	4606      	mov	r6, r0
 8010cca:	b118      	cbz	r0, 8010cd4 <_vfiprintf_r+0x18>
 8010ccc:	6a03      	ldr	r3, [r0, #32]
 8010cce:	b90b      	cbnz	r3, 8010cd4 <_vfiprintf_r+0x18>
 8010cd0:	f7fe fa4c 	bl	800f16c <__sinit>
 8010cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cd6:	07d9      	lsls	r1, r3, #31
 8010cd8:	d405      	bmi.n	8010ce6 <_vfiprintf_r+0x2a>
 8010cda:	89ab      	ldrh	r3, [r5, #12]
 8010cdc:	059a      	lsls	r2, r3, #22
 8010cde:	d402      	bmi.n	8010ce6 <_vfiprintf_r+0x2a>
 8010ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ce2:	f7fe fb8f 	bl	800f404 <__retarget_lock_acquire_recursive>
 8010ce6:	89ab      	ldrh	r3, [r5, #12]
 8010ce8:	071b      	lsls	r3, r3, #28
 8010cea:	d501      	bpl.n	8010cf0 <_vfiprintf_r+0x34>
 8010cec:	692b      	ldr	r3, [r5, #16]
 8010cee:	b99b      	cbnz	r3, 8010d18 <_vfiprintf_r+0x5c>
 8010cf0:	4629      	mov	r1, r5
 8010cf2:	4630      	mov	r0, r6
 8010cf4:	f000 f93a 	bl	8010f6c <__swsetup_r>
 8010cf8:	b170      	cbz	r0, 8010d18 <_vfiprintf_r+0x5c>
 8010cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010cfc:	07dc      	lsls	r4, r3, #31
 8010cfe:	d504      	bpl.n	8010d0a <_vfiprintf_r+0x4e>
 8010d00:	f04f 30ff 	mov.w	r0, #4294967295
 8010d04:	b01d      	add	sp, #116	; 0x74
 8010d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d0a:	89ab      	ldrh	r3, [r5, #12]
 8010d0c:	0598      	lsls	r0, r3, #22
 8010d0e:	d4f7      	bmi.n	8010d00 <_vfiprintf_r+0x44>
 8010d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d12:	f7fe fb78 	bl	800f406 <__retarget_lock_release_recursive>
 8010d16:	e7f3      	b.n	8010d00 <_vfiprintf_r+0x44>
 8010d18:	2300      	movs	r3, #0
 8010d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8010d1c:	2320      	movs	r3, #32
 8010d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d26:	2330      	movs	r3, #48	; 0x30
 8010d28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010edc <_vfiprintf_r+0x220>
 8010d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d30:	f04f 0901 	mov.w	r9, #1
 8010d34:	4623      	mov	r3, r4
 8010d36:	469a      	mov	sl, r3
 8010d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d3c:	b10a      	cbz	r2, 8010d42 <_vfiprintf_r+0x86>
 8010d3e:	2a25      	cmp	r2, #37	; 0x25
 8010d40:	d1f9      	bne.n	8010d36 <_vfiprintf_r+0x7a>
 8010d42:	ebba 0b04 	subs.w	fp, sl, r4
 8010d46:	d00b      	beq.n	8010d60 <_vfiprintf_r+0xa4>
 8010d48:	465b      	mov	r3, fp
 8010d4a:	4622      	mov	r2, r4
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	4630      	mov	r0, r6
 8010d50:	f7ff ffa2 	bl	8010c98 <__sfputs_r>
 8010d54:	3001      	adds	r0, #1
 8010d56:	f000 80a9 	beq.w	8010eac <_vfiprintf_r+0x1f0>
 8010d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d5c:	445a      	add	r2, fp
 8010d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8010d60:	f89a 3000 	ldrb.w	r3, [sl]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	f000 80a1 	beq.w	8010eac <_vfiprintf_r+0x1f0>
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d74:	f10a 0a01 	add.w	sl, sl, #1
 8010d78:	9304      	str	r3, [sp, #16]
 8010d7a:	9307      	str	r3, [sp, #28]
 8010d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010d80:	931a      	str	r3, [sp, #104]	; 0x68
 8010d82:	4654      	mov	r4, sl
 8010d84:	2205      	movs	r2, #5
 8010d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d8a:	4854      	ldr	r0, [pc, #336]	; (8010edc <_vfiprintf_r+0x220>)
 8010d8c:	f7ef fa28 	bl	80001e0 <memchr>
 8010d90:	9a04      	ldr	r2, [sp, #16]
 8010d92:	b9d8      	cbnz	r0, 8010dcc <_vfiprintf_r+0x110>
 8010d94:	06d1      	lsls	r1, r2, #27
 8010d96:	bf44      	itt	mi
 8010d98:	2320      	movmi	r3, #32
 8010d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010d9e:	0713      	lsls	r3, r2, #28
 8010da0:	bf44      	itt	mi
 8010da2:	232b      	movmi	r3, #43	; 0x2b
 8010da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010da8:	f89a 3000 	ldrb.w	r3, [sl]
 8010dac:	2b2a      	cmp	r3, #42	; 0x2a
 8010dae:	d015      	beq.n	8010ddc <_vfiprintf_r+0x120>
 8010db0:	9a07      	ldr	r2, [sp, #28]
 8010db2:	4654      	mov	r4, sl
 8010db4:	2000      	movs	r0, #0
 8010db6:	f04f 0c0a 	mov.w	ip, #10
 8010dba:	4621      	mov	r1, r4
 8010dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010dc0:	3b30      	subs	r3, #48	; 0x30
 8010dc2:	2b09      	cmp	r3, #9
 8010dc4:	d94d      	bls.n	8010e62 <_vfiprintf_r+0x1a6>
 8010dc6:	b1b0      	cbz	r0, 8010df6 <_vfiprintf_r+0x13a>
 8010dc8:	9207      	str	r2, [sp, #28]
 8010dca:	e014      	b.n	8010df6 <_vfiprintf_r+0x13a>
 8010dcc:	eba0 0308 	sub.w	r3, r0, r8
 8010dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8010dd4:	4313      	orrs	r3, r2
 8010dd6:	9304      	str	r3, [sp, #16]
 8010dd8:	46a2      	mov	sl, r4
 8010dda:	e7d2      	b.n	8010d82 <_vfiprintf_r+0xc6>
 8010ddc:	9b03      	ldr	r3, [sp, #12]
 8010dde:	1d19      	adds	r1, r3, #4
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	9103      	str	r1, [sp, #12]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	bfbb      	ittet	lt
 8010de8:	425b      	neglt	r3, r3
 8010dea:	f042 0202 	orrlt.w	r2, r2, #2
 8010dee:	9307      	strge	r3, [sp, #28]
 8010df0:	9307      	strlt	r3, [sp, #28]
 8010df2:	bfb8      	it	lt
 8010df4:	9204      	strlt	r2, [sp, #16]
 8010df6:	7823      	ldrb	r3, [r4, #0]
 8010df8:	2b2e      	cmp	r3, #46	; 0x2e
 8010dfa:	d10c      	bne.n	8010e16 <_vfiprintf_r+0x15a>
 8010dfc:	7863      	ldrb	r3, [r4, #1]
 8010dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8010e00:	d134      	bne.n	8010e6c <_vfiprintf_r+0x1b0>
 8010e02:	9b03      	ldr	r3, [sp, #12]
 8010e04:	1d1a      	adds	r2, r3, #4
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	9203      	str	r2, [sp, #12]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	bfb8      	it	lt
 8010e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010e12:	3402      	adds	r4, #2
 8010e14:	9305      	str	r3, [sp, #20]
 8010e16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010eec <_vfiprintf_r+0x230>
 8010e1a:	7821      	ldrb	r1, [r4, #0]
 8010e1c:	2203      	movs	r2, #3
 8010e1e:	4650      	mov	r0, sl
 8010e20:	f7ef f9de 	bl	80001e0 <memchr>
 8010e24:	b138      	cbz	r0, 8010e36 <_vfiprintf_r+0x17a>
 8010e26:	9b04      	ldr	r3, [sp, #16]
 8010e28:	eba0 000a 	sub.w	r0, r0, sl
 8010e2c:	2240      	movs	r2, #64	; 0x40
 8010e2e:	4082      	lsls	r2, r0
 8010e30:	4313      	orrs	r3, r2
 8010e32:	3401      	adds	r4, #1
 8010e34:	9304      	str	r3, [sp, #16]
 8010e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e3a:	4829      	ldr	r0, [pc, #164]	; (8010ee0 <_vfiprintf_r+0x224>)
 8010e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e40:	2206      	movs	r2, #6
 8010e42:	f7ef f9cd 	bl	80001e0 <memchr>
 8010e46:	2800      	cmp	r0, #0
 8010e48:	d03f      	beq.n	8010eca <_vfiprintf_r+0x20e>
 8010e4a:	4b26      	ldr	r3, [pc, #152]	; (8010ee4 <_vfiprintf_r+0x228>)
 8010e4c:	bb1b      	cbnz	r3, 8010e96 <_vfiprintf_r+0x1da>
 8010e4e:	9b03      	ldr	r3, [sp, #12]
 8010e50:	3307      	adds	r3, #7
 8010e52:	f023 0307 	bic.w	r3, r3, #7
 8010e56:	3308      	adds	r3, #8
 8010e58:	9303      	str	r3, [sp, #12]
 8010e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e5c:	443b      	add	r3, r7
 8010e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8010e60:	e768      	b.n	8010d34 <_vfiprintf_r+0x78>
 8010e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e66:	460c      	mov	r4, r1
 8010e68:	2001      	movs	r0, #1
 8010e6a:	e7a6      	b.n	8010dba <_vfiprintf_r+0xfe>
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	3401      	adds	r4, #1
 8010e70:	9305      	str	r3, [sp, #20]
 8010e72:	4619      	mov	r1, r3
 8010e74:	f04f 0c0a 	mov.w	ip, #10
 8010e78:	4620      	mov	r0, r4
 8010e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e7e:	3a30      	subs	r2, #48	; 0x30
 8010e80:	2a09      	cmp	r2, #9
 8010e82:	d903      	bls.n	8010e8c <_vfiprintf_r+0x1d0>
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d0c6      	beq.n	8010e16 <_vfiprintf_r+0x15a>
 8010e88:	9105      	str	r1, [sp, #20]
 8010e8a:	e7c4      	b.n	8010e16 <_vfiprintf_r+0x15a>
 8010e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010e90:	4604      	mov	r4, r0
 8010e92:	2301      	movs	r3, #1
 8010e94:	e7f0      	b.n	8010e78 <_vfiprintf_r+0x1bc>
 8010e96:	ab03      	add	r3, sp, #12
 8010e98:	9300      	str	r3, [sp, #0]
 8010e9a:	462a      	mov	r2, r5
 8010e9c:	4b12      	ldr	r3, [pc, #72]	; (8010ee8 <_vfiprintf_r+0x22c>)
 8010e9e:	a904      	add	r1, sp, #16
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	f7fd fd23 	bl	800e8ec <_printf_float>
 8010ea6:	4607      	mov	r7, r0
 8010ea8:	1c78      	adds	r0, r7, #1
 8010eaa:	d1d6      	bne.n	8010e5a <_vfiprintf_r+0x19e>
 8010eac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010eae:	07d9      	lsls	r1, r3, #31
 8010eb0:	d405      	bmi.n	8010ebe <_vfiprintf_r+0x202>
 8010eb2:	89ab      	ldrh	r3, [r5, #12]
 8010eb4:	059a      	lsls	r2, r3, #22
 8010eb6:	d402      	bmi.n	8010ebe <_vfiprintf_r+0x202>
 8010eb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010eba:	f7fe faa4 	bl	800f406 <__retarget_lock_release_recursive>
 8010ebe:	89ab      	ldrh	r3, [r5, #12]
 8010ec0:	065b      	lsls	r3, r3, #25
 8010ec2:	f53f af1d 	bmi.w	8010d00 <_vfiprintf_r+0x44>
 8010ec6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ec8:	e71c      	b.n	8010d04 <_vfiprintf_r+0x48>
 8010eca:	ab03      	add	r3, sp, #12
 8010ecc:	9300      	str	r3, [sp, #0]
 8010ece:	462a      	mov	r2, r5
 8010ed0:	4b05      	ldr	r3, [pc, #20]	; (8010ee8 <_vfiprintf_r+0x22c>)
 8010ed2:	a904      	add	r1, sp, #16
 8010ed4:	4630      	mov	r0, r6
 8010ed6:	f7fd ffad 	bl	800ee34 <_printf_i>
 8010eda:	e7e4      	b.n	8010ea6 <_vfiprintf_r+0x1ea>
 8010edc:	08011c5b 	.word	0x08011c5b
 8010ee0:	08011c65 	.word	0x08011c65
 8010ee4:	0800e8ed 	.word	0x0800e8ed
 8010ee8:	08010c99 	.word	0x08010c99
 8010eec:	08011c61 	.word	0x08011c61

08010ef0 <__swbuf_r>:
 8010ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ef2:	460e      	mov	r6, r1
 8010ef4:	4614      	mov	r4, r2
 8010ef6:	4605      	mov	r5, r0
 8010ef8:	b118      	cbz	r0, 8010f02 <__swbuf_r+0x12>
 8010efa:	6a03      	ldr	r3, [r0, #32]
 8010efc:	b90b      	cbnz	r3, 8010f02 <__swbuf_r+0x12>
 8010efe:	f7fe f935 	bl	800f16c <__sinit>
 8010f02:	69a3      	ldr	r3, [r4, #24]
 8010f04:	60a3      	str	r3, [r4, #8]
 8010f06:	89a3      	ldrh	r3, [r4, #12]
 8010f08:	071a      	lsls	r2, r3, #28
 8010f0a:	d525      	bpl.n	8010f58 <__swbuf_r+0x68>
 8010f0c:	6923      	ldr	r3, [r4, #16]
 8010f0e:	b31b      	cbz	r3, 8010f58 <__swbuf_r+0x68>
 8010f10:	6823      	ldr	r3, [r4, #0]
 8010f12:	6922      	ldr	r2, [r4, #16]
 8010f14:	1a98      	subs	r0, r3, r2
 8010f16:	6963      	ldr	r3, [r4, #20]
 8010f18:	b2f6      	uxtb	r6, r6
 8010f1a:	4283      	cmp	r3, r0
 8010f1c:	4637      	mov	r7, r6
 8010f1e:	dc04      	bgt.n	8010f2a <__swbuf_r+0x3a>
 8010f20:	4621      	mov	r1, r4
 8010f22:	4628      	mov	r0, r5
 8010f24:	f7ff fdfc 	bl	8010b20 <_fflush_r>
 8010f28:	b9e0      	cbnz	r0, 8010f64 <__swbuf_r+0x74>
 8010f2a:	68a3      	ldr	r3, [r4, #8]
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	60a3      	str	r3, [r4, #8]
 8010f30:	6823      	ldr	r3, [r4, #0]
 8010f32:	1c5a      	adds	r2, r3, #1
 8010f34:	6022      	str	r2, [r4, #0]
 8010f36:	701e      	strb	r6, [r3, #0]
 8010f38:	6962      	ldr	r2, [r4, #20]
 8010f3a:	1c43      	adds	r3, r0, #1
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d004      	beq.n	8010f4a <__swbuf_r+0x5a>
 8010f40:	89a3      	ldrh	r3, [r4, #12]
 8010f42:	07db      	lsls	r3, r3, #31
 8010f44:	d506      	bpl.n	8010f54 <__swbuf_r+0x64>
 8010f46:	2e0a      	cmp	r6, #10
 8010f48:	d104      	bne.n	8010f54 <__swbuf_r+0x64>
 8010f4a:	4621      	mov	r1, r4
 8010f4c:	4628      	mov	r0, r5
 8010f4e:	f7ff fde7 	bl	8010b20 <_fflush_r>
 8010f52:	b938      	cbnz	r0, 8010f64 <__swbuf_r+0x74>
 8010f54:	4638      	mov	r0, r7
 8010f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010f58:	4621      	mov	r1, r4
 8010f5a:	4628      	mov	r0, r5
 8010f5c:	f000 f806 	bl	8010f6c <__swsetup_r>
 8010f60:	2800      	cmp	r0, #0
 8010f62:	d0d5      	beq.n	8010f10 <__swbuf_r+0x20>
 8010f64:	f04f 37ff 	mov.w	r7, #4294967295
 8010f68:	e7f4      	b.n	8010f54 <__swbuf_r+0x64>
	...

08010f6c <__swsetup_r>:
 8010f6c:	b538      	push	{r3, r4, r5, lr}
 8010f6e:	4b2a      	ldr	r3, [pc, #168]	; (8011018 <__swsetup_r+0xac>)
 8010f70:	4605      	mov	r5, r0
 8010f72:	6818      	ldr	r0, [r3, #0]
 8010f74:	460c      	mov	r4, r1
 8010f76:	b118      	cbz	r0, 8010f80 <__swsetup_r+0x14>
 8010f78:	6a03      	ldr	r3, [r0, #32]
 8010f7a:	b90b      	cbnz	r3, 8010f80 <__swsetup_r+0x14>
 8010f7c:	f7fe f8f6 	bl	800f16c <__sinit>
 8010f80:	89a3      	ldrh	r3, [r4, #12]
 8010f82:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f86:	0718      	lsls	r0, r3, #28
 8010f88:	d422      	bmi.n	8010fd0 <__swsetup_r+0x64>
 8010f8a:	06d9      	lsls	r1, r3, #27
 8010f8c:	d407      	bmi.n	8010f9e <__swsetup_r+0x32>
 8010f8e:	2309      	movs	r3, #9
 8010f90:	602b      	str	r3, [r5, #0]
 8010f92:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f96:	81a3      	strh	r3, [r4, #12]
 8010f98:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9c:	e034      	b.n	8011008 <__swsetup_r+0x9c>
 8010f9e:	0758      	lsls	r0, r3, #29
 8010fa0:	d512      	bpl.n	8010fc8 <__swsetup_r+0x5c>
 8010fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010fa4:	b141      	cbz	r1, 8010fb8 <__swsetup_r+0x4c>
 8010fa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010faa:	4299      	cmp	r1, r3
 8010fac:	d002      	beq.n	8010fb4 <__swsetup_r+0x48>
 8010fae:	4628      	mov	r0, r5
 8010fb0:	f7ff f8b4 	bl	801011c <_free_r>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	6363      	str	r3, [r4, #52]	; 0x34
 8010fb8:	89a3      	ldrh	r3, [r4, #12]
 8010fba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010fbe:	81a3      	strh	r3, [r4, #12]
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	6063      	str	r3, [r4, #4]
 8010fc4:	6923      	ldr	r3, [r4, #16]
 8010fc6:	6023      	str	r3, [r4, #0]
 8010fc8:	89a3      	ldrh	r3, [r4, #12]
 8010fca:	f043 0308 	orr.w	r3, r3, #8
 8010fce:	81a3      	strh	r3, [r4, #12]
 8010fd0:	6923      	ldr	r3, [r4, #16]
 8010fd2:	b94b      	cbnz	r3, 8010fe8 <__swsetup_r+0x7c>
 8010fd4:	89a3      	ldrh	r3, [r4, #12]
 8010fd6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010fde:	d003      	beq.n	8010fe8 <__swsetup_r+0x7c>
 8010fe0:	4621      	mov	r1, r4
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	f000 f884 	bl	80110f0 <__smakebuf_r>
 8010fe8:	89a0      	ldrh	r0, [r4, #12]
 8010fea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fee:	f010 0301 	ands.w	r3, r0, #1
 8010ff2:	d00a      	beq.n	801100a <__swsetup_r+0x9e>
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	60a3      	str	r3, [r4, #8]
 8010ff8:	6963      	ldr	r3, [r4, #20]
 8010ffa:	425b      	negs	r3, r3
 8010ffc:	61a3      	str	r3, [r4, #24]
 8010ffe:	6923      	ldr	r3, [r4, #16]
 8011000:	b943      	cbnz	r3, 8011014 <__swsetup_r+0xa8>
 8011002:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011006:	d1c4      	bne.n	8010f92 <__swsetup_r+0x26>
 8011008:	bd38      	pop	{r3, r4, r5, pc}
 801100a:	0781      	lsls	r1, r0, #30
 801100c:	bf58      	it	pl
 801100e:	6963      	ldrpl	r3, [r4, #20]
 8011010:	60a3      	str	r3, [r4, #8]
 8011012:	e7f4      	b.n	8010ffe <__swsetup_r+0x92>
 8011014:	2000      	movs	r0, #0
 8011016:	e7f7      	b.n	8011008 <__swsetup_r+0x9c>
 8011018:	20000070 	.word	0x20000070

0801101c <_raise_r>:
 801101c:	291f      	cmp	r1, #31
 801101e:	b538      	push	{r3, r4, r5, lr}
 8011020:	4604      	mov	r4, r0
 8011022:	460d      	mov	r5, r1
 8011024:	d904      	bls.n	8011030 <_raise_r+0x14>
 8011026:	2316      	movs	r3, #22
 8011028:	6003      	str	r3, [r0, #0]
 801102a:	f04f 30ff 	mov.w	r0, #4294967295
 801102e:	bd38      	pop	{r3, r4, r5, pc}
 8011030:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011032:	b112      	cbz	r2, 801103a <_raise_r+0x1e>
 8011034:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011038:	b94b      	cbnz	r3, 801104e <_raise_r+0x32>
 801103a:	4620      	mov	r0, r4
 801103c:	f000 f830 	bl	80110a0 <_getpid_r>
 8011040:	462a      	mov	r2, r5
 8011042:	4601      	mov	r1, r0
 8011044:	4620      	mov	r0, r4
 8011046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801104a:	f000 b817 	b.w	801107c <_kill_r>
 801104e:	2b01      	cmp	r3, #1
 8011050:	d00a      	beq.n	8011068 <_raise_r+0x4c>
 8011052:	1c59      	adds	r1, r3, #1
 8011054:	d103      	bne.n	801105e <_raise_r+0x42>
 8011056:	2316      	movs	r3, #22
 8011058:	6003      	str	r3, [r0, #0]
 801105a:	2001      	movs	r0, #1
 801105c:	e7e7      	b.n	801102e <_raise_r+0x12>
 801105e:	2400      	movs	r4, #0
 8011060:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011064:	4628      	mov	r0, r5
 8011066:	4798      	blx	r3
 8011068:	2000      	movs	r0, #0
 801106a:	e7e0      	b.n	801102e <_raise_r+0x12>

0801106c <raise>:
 801106c:	4b02      	ldr	r3, [pc, #8]	; (8011078 <raise+0xc>)
 801106e:	4601      	mov	r1, r0
 8011070:	6818      	ldr	r0, [r3, #0]
 8011072:	f7ff bfd3 	b.w	801101c <_raise_r>
 8011076:	bf00      	nop
 8011078:	20000070 	.word	0x20000070

0801107c <_kill_r>:
 801107c:	b538      	push	{r3, r4, r5, lr}
 801107e:	4d07      	ldr	r5, [pc, #28]	; (801109c <_kill_r+0x20>)
 8011080:	2300      	movs	r3, #0
 8011082:	4604      	mov	r4, r0
 8011084:	4608      	mov	r0, r1
 8011086:	4611      	mov	r1, r2
 8011088:	602b      	str	r3, [r5, #0]
 801108a:	f7f4 f81b 	bl	80050c4 <_kill>
 801108e:	1c43      	adds	r3, r0, #1
 8011090:	d102      	bne.n	8011098 <_kill_r+0x1c>
 8011092:	682b      	ldr	r3, [r5, #0]
 8011094:	b103      	cbz	r3, 8011098 <_kill_r+0x1c>
 8011096:	6023      	str	r3, [r4, #0]
 8011098:	bd38      	pop	{r3, r4, r5, pc}
 801109a:	bf00      	nop
 801109c:	200096bc 	.word	0x200096bc

080110a0 <_getpid_r>:
 80110a0:	f7f4 b808 	b.w	80050b4 <_getpid>

080110a4 <__swhatbuf_r>:
 80110a4:	b570      	push	{r4, r5, r6, lr}
 80110a6:	460c      	mov	r4, r1
 80110a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80110ac:	2900      	cmp	r1, #0
 80110ae:	b096      	sub	sp, #88	; 0x58
 80110b0:	4615      	mov	r5, r2
 80110b2:	461e      	mov	r6, r3
 80110b4:	da0d      	bge.n	80110d2 <__swhatbuf_r+0x2e>
 80110b6:	89a3      	ldrh	r3, [r4, #12]
 80110b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80110bc:	f04f 0100 	mov.w	r1, #0
 80110c0:	bf0c      	ite	eq
 80110c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80110c6:	2340      	movne	r3, #64	; 0x40
 80110c8:	2000      	movs	r0, #0
 80110ca:	6031      	str	r1, [r6, #0]
 80110cc:	602b      	str	r3, [r5, #0]
 80110ce:	b016      	add	sp, #88	; 0x58
 80110d0:	bd70      	pop	{r4, r5, r6, pc}
 80110d2:	466a      	mov	r2, sp
 80110d4:	f000 f848 	bl	8011168 <_fstat_r>
 80110d8:	2800      	cmp	r0, #0
 80110da:	dbec      	blt.n	80110b6 <__swhatbuf_r+0x12>
 80110dc:	9901      	ldr	r1, [sp, #4]
 80110de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80110e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80110e6:	4259      	negs	r1, r3
 80110e8:	4159      	adcs	r1, r3
 80110ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80110ee:	e7eb      	b.n	80110c8 <__swhatbuf_r+0x24>

080110f0 <__smakebuf_r>:
 80110f0:	898b      	ldrh	r3, [r1, #12]
 80110f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80110f4:	079d      	lsls	r5, r3, #30
 80110f6:	4606      	mov	r6, r0
 80110f8:	460c      	mov	r4, r1
 80110fa:	d507      	bpl.n	801110c <__smakebuf_r+0x1c>
 80110fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011100:	6023      	str	r3, [r4, #0]
 8011102:	6123      	str	r3, [r4, #16]
 8011104:	2301      	movs	r3, #1
 8011106:	6163      	str	r3, [r4, #20]
 8011108:	b002      	add	sp, #8
 801110a:	bd70      	pop	{r4, r5, r6, pc}
 801110c:	ab01      	add	r3, sp, #4
 801110e:	466a      	mov	r2, sp
 8011110:	f7ff ffc8 	bl	80110a4 <__swhatbuf_r>
 8011114:	9900      	ldr	r1, [sp, #0]
 8011116:	4605      	mov	r5, r0
 8011118:	4630      	mov	r0, r6
 801111a:	f7ff f873 	bl	8010204 <_malloc_r>
 801111e:	b948      	cbnz	r0, 8011134 <__smakebuf_r+0x44>
 8011120:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011124:	059a      	lsls	r2, r3, #22
 8011126:	d4ef      	bmi.n	8011108 <__smakebuf_r+0x18>
 8011128:	f023 0303 	bic.w	r3, r3, #3
 801112c:	f043 0302 	orr.w	r3, r3, #2
 8011130:	81a3      	strh	r3, [r4, #12]
 8011132:	e7e3      	b.n	80110fc <__smakebuf_r+0xc>
 8011134:	89a3      	ldrh	r3, [r4, #12]
 8011136:	6020      	str	r0, [r4, #0]
 8011138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801113c:	81a3      	strh	r3, [r4, #12]
 801113e:	9b00      	ldr	r3, [sp, #0]
 8011140:	6163      	str	r3, [r4, #20]
 8011142:	9b01      	ldr	r3, [sp, #4]
 8011144:	6120      	str	r0, [r4, #16]
 8011146:	b15b      	cbz	r3, 8011160 <__smakebuf_r+0x70>
 8011148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801114c:	4630      	mov	r0, r6
 801114e:	f000 f81d 	bl	801118c <_isatty_r>
 8011152:	b128      	cbz	r0, 8011160 <__smakebuf_r+0x70>
 8011154:	89a3      	ldrh	r3, [r4, #12]
 8011156:	f023 0303 	bic.w	r3, r3, #3
 801115a:	f043 0301 	orr.w	r3, r3, #1
 801115e:	81a3      	strh	r3, [r4, #12]
 8011160:	89a3      	ldrh	r3, [r4, #12]
 8011162:	431d      	orrs	r5, r3
 8011164:	81a5      	strh	r5, [r4, #12]
 8011166:	e7cf      	b.n	8011108 <__smakebuf_r+0x18>

08011168 <_fstat_r>:
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	4d07      	ldr	r5, [pc, #28]	; (8011188 <_fstat_r+0x20>)
 801116c:	2300      	movs	r3, #0
 801116e:	4604      	mov	r4, r0
 8011170:	4608      	mov	r0, r1
 8011172:	4611      	mov	r1, r2
 8011174:	602b      	str	r3, [r5, #0]
 8011176:	f7f4 f804 	bl	8005182 <_fstat>
 801117a:	1c43      	adds	r3, r0, #1
 801117c:	d102      	bne.n	8011184 <_fstat_r+0x1c>
 801117e:	682b      	ldr	r3, [r5, #0]
 8011180:	b103      	cbz	r3, 8011184 <_fstat_r+0x1c>
 8011182:	6023      	str	r3, [r4, #0]
 8011184:	bd38      	pop	{r3, r4, r5, pc}
 8011186:	bf00      	nop
 8011188:	200096bc 	.word	0x200096bc

0801118c <_isatty_r>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	4d06      	ldr	r5, [pc, #24]	; (80111a8 <_isatty_r+0x1c>)
 8011190:	2300      	movs	r3, #0
 8011192:	4604      	mov	r4, r0
 8011194:	4608      	mov	r0, r1
 8011196:	602b      	str	r3, [r5, #0]
 8011198:	f7f4 f803 	bl	80051a2 <_isatty>
 801119c:	1c43      	adds	r3, r0, #1
 801119e:	d102      	bne.n	80111a6 <_isatty_r+0x1a>
 80111a0:	682b      	ldr	r3, [r5, #0]
 80111a2:	b103      	cbz	r3, 80111a6 <_isatty_r+0x1a>
 80111a4:	6023      	str	r3, [r4, #0]
 80111a6:	bd38      	pop	{r3, r4, r5, pc}
 80111a8:	200096bc 	.word	0x200096bc

080111ac <_init>:
 80111ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ae:	bf00      	nop
 80111b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111b2:	bc08      	pop	{r3}
 80111b4:	469e      	mov	lr, r3
 80111b6:	4770      	bx	lr

080111b8 <_fini>:
 80111b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ba:	bf00      	nop
 80111bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111be:	bc08      	pop	{r3}
 80111c0:	469e      	mov	lr, r3
 80111c2:	4770      	bx	lr


Stm32_ApiaryWaterDispensingSystem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b98  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08009d68  08009d68  00019d68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a090  0800a090  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a098  0800a098  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a098  0800a098  0001a098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800a0a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000505c  20000064  0800a104  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050c0  0800a104  000250c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f351  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004568  00000000  00000000  0003f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a28  00000000  00000000  00043990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001464  00000000  00000000  000453b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000267d1  00000000  00000000  0004681c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021377  00000000  00000000  0006cfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e509b  00000000  00000000  0008e364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007340  00000000  00000000  00173400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0017a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d50 	.word	0x08009d50

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08009d50 	.word	0x08009d50

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_d2iz>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d215      	bcs.n	8000af2 <__aeabi_d2iz+0x36>
 8000ac6:	d511      	bpl.n	8000aec <__aeabi_d2iz+0x30>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d912      	bls.n	8000af8 <__aeabi_d2iz+0x3c>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d105      	bne.n	8000b04 <__aeabi_d2iz+0x48>
 8000af8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	bf08      	it	eq
 8000afe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_d2uiz>:
 8000b0c:	004a      	lsls	r2, r1, #1
 8000b0e:	d211      	bcs.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b14:	d211      	bcs.n	8000b3a <__aeabi_d2uiz+0x2e>
 8000b16:	d50d      	bpl.n	8000b34 <__aeabi_d2uiz+0x28>
 8000b18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b20:	d40e      	bmi.n	8000b40 <__aeabi_d2uiz+0x34>
 8000b22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	4770      	bx	lr
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3e:	d102      	bne.n	8000b46 <__aeabi_d2uiz+0x3a>
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b970 	b.w	8000e44 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9e08      	ldr	r6, [sp, #32]
 8000b82:	460d      	mov	r5, r1
 8000b84:	4604      	mov	r4, r0
 8000b86:	460f      	mov	r7, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14a      	bne.n	8000c22 <__udivmoddi4+0xa6>
 8000b8c:	428a      	cmp	r2, r1
 8000b8e:	4694      	mov	ip, r2
 8000b90:	d965      	bls.n	8000c5e <__udivmoddi4+0xe2>
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	b143      	cbz	r3, 8000baa <__udivmoddi4+0x2e>
 8000b98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b9c:	f1c3 0220 	rsb	r2, r3, #32
 8000ba0:	409f      	lsls	r7, r3
 8000ba2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba6:	4317      	orrs	r7, r2
 8000ba8:	409c      	lsls	r4, r3
 8000baa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bae:	fa1f f58c 	uxth.w	r5, ip
 8000bb2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bb6:	0c22      	lsrs	r2, r4, #16
 8000bb8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bbc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bc0:	fb01 f005 	mul.w	r0, r1, r5
 8000bc4:	4290      	cmp	r0, r2
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x62>
 8000bc8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bcc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bd0:	f080 811c 	bcs.w	8000e0c <__udivmoddi4+0x290>
 8000bd4:	4290      	cmp	r0, r2
 8000bd6:	f240 8119 	bls.w	8000e0c <__udivmoddi4+0x290>
 8000bda:	3902      	subs	r1, #2
 8000bdc:	4462      	add	r2, ip
 8000bde:	1a12      	subs	r2, r2, r0
 8000be0:	b2a4      	uxth	r4, r4
 8000be2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000be6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bea:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bee:	fb00 f505 	mul.w	r5, r0, r5
 8000bf2:	42a5      	cmp	r5, r4
 8000bf4:	d90a      	bls.n	8000c0c <__udivmoddi4+0x90>
 8000bf6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bfa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bfe:	f080 8107 	bcs.w	8000e10 <__udivmoddi4+0x294>
 8000c02:	42a5      	cmp	r5, r4
 8000c04:	f240 8104 	bls.w	8000e10 <__udivmoddi4+0x294>
 8000c08:	4464      	add	r4, ip
 8000c0a:	3802      	subs	r0, #2
 8000c0c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c10:	1b64      	subs	r4, r4, r5
 8000c12:	2100      	movs	r1, #0
 8000c14:	b11e      	cbz	r6, 8000c1e <__udivmoddi4+0xa2>
 8000c16:	40dc      	lsrs	r4, r3
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0xbc>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	f000 80ed 	beq.w	8000e06 <__udivmoddi4+0x28a>
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c32:	4608      	mov	r0, r1
 8000c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c38:	fab3 f183 	clz	r1, r3
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	d149      	bne.n	8000cd4 <__udivmoddi4+0x158>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	d302      	bcc.n	8000c4a <__udivmoddi4+0xce>
 8000c44:	4282      	cmp	r2, r0
 8000c46:	f200 80f8 	bhi.w	8000e3a <__udivmoddi4+0x2be>
 8000c4a:	1a84      	subs	r4, r0, r2
 8000c4c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c50:	2001      	movs	r0, #1
 8000c52:	4617      	mov	r7, r2
 8000c54:	2e00      	cmp	r6, #0
 8000c56:	d0e2      	beq.n	8000c1e <__udivmoddi4+0xa2>
 8000c58:	e9c6 4700 	strd	r4, r7, [r6]
 8000c5c:	e7df      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000c5e:	b902      	cbnz	r2, 8000c62 <__udivmoddi4+0xe6>
 8000c60:	deff      	udf	#255	; 0xff
 8000c62:	fab2 f382 	clz	r3, r2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x210>
 8000c6c:	1a8a      	subs	r2, r1, r2
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f fe8c 	uxth.w	lr, ip
 8000c76:	2101      	movs	r1, #1
 8000c78:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c7c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c80:	0c22      	lsrs	r2, r4, #16
 8000c82:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c86:	fb0e f005 	mul.w	r0, lr, r5
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	d908      	bls.n	8000ca0 <__udivmoddi4+0x124>
 8000c8e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c92:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x122>
 8000c98:	4290      	cmp	r0, r2
 8000c9a:	f200 80cb 	bhi.w	8000e34 <__udivmoddi4+0x2b8>
 8000c9e:	4645      	mov	r5, r8
 8000ca0:	1a12      	subs	r2, r2, r0
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ca8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb4:	45a6      	cmp	lr, r4
 8000cb6:	d908      	bls.n	8000cca <__udivmoddi4+0x14e>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cc0:	d202      	bcs.n	8000cc8 <__udivmoddi4+0x14c>
 8000cc2:	45a6      	cmp	lr, r4
 8000cc4:	f200 80bb 	bhi.w	8000e3e <__udivmoddi4+0x2c2>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	eba4 040e 	sub.w	r4, r4, lr
 8000cce:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cd2:	e79f      	b.n	8000c14 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0720 	rsb	r7, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cde:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ce6:	fa20 f307 	lsr.w	r3, r0, r7
 8000cea:	40fd      	lsrs	r5, r7
 8000cec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d04:	fb08 f50e 	mul.w	r5, r8, lr
 8000d08:	42a5      	cmp	r5, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d12:	d90b      	bls.n	8000d2c <__udivmoddi4+0x1b0>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d1c:	f080 8088 	bcs.w	8000e30 <__udivmoddi4+0x2b4>
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	f240 8085 	bls.w	8000e30 <__udivmoddi4+0x2b4>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	4464      	add	r4, ip
 8000d2c:	1b64      	subs	r4, r4, r5
 8000d2e:	b29d      	uxth	r5, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d3c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1da>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d4c:	d26c      	bcs.n	8000e28 <__udivmoddi4+0x2ac>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	d96a      	bls.n	8000e28 <__udivmoddi4+0x2ac>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	4464      	add	r4, ip
 8000d56:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d5a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	46c8      	mov	r8, r9
 8000d66:	46ae      	mov	lr, r5
 8000d68:	d356      	bcc.n	8000e18 <__udivmoddi4+0x29c>
 8000d6a:	d053      	beq.n	8000e14 <__udivmoddi4+0x298>
 8000d6c:	b156      	cbz	r6, 8000d84 <__udivmoddi4+0x208>
 8000d6e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d72:	eb64 040e 	sbc.w	r4, r4, lr
 8000d76:	fa04 f707 	lsl.w	r7, r4, r7
 8000d7a:	40ca      	lsrs	r2, r1
 8000d7c:	40cc      	lsrs	r4, r1
 8000d7e:	4317      	orrs	r7, r2
 8000d80:	e9c6 7400 	strd	r7, r4, [r6]
 8000d84:	4618      	mov	r0, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8c:	f1c3 0120 	rsb	r1, r3, #32
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	fa20 f201 	lsr.w	r2, r0, r1
 8000d98:	fa25 f101 	lsr.w	r1, r5, r1
 8000d9c:	409d      	lsls	r5, r3
 8000d9e:	432a      	orrs	r2, r5
 8000da0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1510 	mls	r5, r7, r0, r1
 8000db0:	0c11      	lsrs	r1, r2, #16
 8000db2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000db6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dba:	428d      	cmp	r5, r1
 8000dbc:	fa04 f403 	lsl.w	r4, r4, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x258>
 8000dc2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dca:	d22f      	bcs.n	8000e2c <__udivmoddi4+0x2b0>
 8000dcc:	428d      	cmp	r5, r1
 8000dce:	d92d      	bls.n	8000e2c <__udivmoddi4+0x2b0>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1b49      	subs	r1, r1, r5
 8000dd6:	b292      	uxth	r2, r2
 8000dd8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ddc:	fb07 1115 	mls	r1, r7, r5, r1
 8000de0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000de4:	fb05 f10e 	mul.w	r1, r5, lr
 8000de8:	4291      	cmp	r1, r2
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x282>
 8000dec:	eb1c 0202 	adds.w	r2, ip, r2
 8000df0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df4:	d216      	bcs.n	8000e24 <__udivmoddi4+0x2a8>
 8000df6:	4291      	cmp	r1, r2
 8000df8:	d914      	bls.n	8000e24 <__udivmoddi4+0x2a8>
 8000dfa:	3d02      	subs	r5, #2
 8000dfc:	4462      	add	r2, ip
 8000dfe:	1a52      	subs	r2, r2, r1
 8000e00:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e04:	e738      	b.n	8000c78 <__udivmoddi4+0xfc>
 8000e06:	4631      	mov	r1, r6
 8000e08:	4630      	mov	r0, r6
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xa2>
 8000e0c:	4639      	mov	r1, r7
 8000e0e:	e6e6      	b.n	8000bde <__udivmoddi4+0x62>
 8000e10:	4610      	mov	r0, r2
 8000e12:	e6fb      	b.n	8000c0c <__udivmoddi4+0x90>
 8000e14:	4548      	cmp	r0, r9
 8000e16:	d2a9      	bcs.n	8000d6c <__udivmoddi4+0x1f0>
 8000e18:	ebb9 0802 	subs.w	r8, r9, r2
 8000e1c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e20:	3b01      	subs	r3, #1
 8000e22:	e7a3      	b.n	8000d6c <__udivmoddi4+0x1f0>
 8000e24:	4645      	mov	r5, r8
 8000e26:	e7ea      	b.n	8000dfe <__udivmoddi4+0x282>
 8000e28:	462b      	mov	r3, r5
 8000e2a:	e794      	b.n	8000d56 <__udivmoddi4+0x1da>
 8000e2c:	4640      	mov	r0, r8
 8000e2e:	e7d1      	b.n	8000dd4 <__udivmoddi4+0x258>
 8000e30:	46d0      	mov	r8, sl
 8000e32:	e77b      	b.n	8000d2c <__udivmoddi4+0x1b0>
 8000e34:	3d02      	subs	r5, #2
 8000e36:	4462      	add	r2, ip
 8000e38:	e732      	b.n	8000ca0 <__udivmoddi4+0x124>
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e70a      	b.n	8000c54 <__udivmoddi4+0xd8>
 8000e3e:	4464      	add	r4, ip
 8000e40:	3802      	subs	r0, #2
 8000e42:	e742      	b.n	8000cca <__udivmoddi4+0x14e>

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <GFX_SetFont+0x1c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000080 	.word	0x20000080

08000e68 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b089      	sub	sp, #36	; 0x24
 8000e6c:	af02      	add	r7, sp, #8
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	4611      	mov	r1, r2
 8000e74:	461a      	mov	r2, r3
 8000e76:	460b      	mov	r3, r1
 8000e78:	71fb      	strb	r3, [r7, #7]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	2b7e      	cmp	r3, #126	; 0x7e
 8000e82:	f200 80a3 	bhi.w	8000fcc <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000e86:	2300      	movs	r3, #0
 8000e88:	75fb      	strb	r3, [r7, #23]
 8000e8a:	e096      	b.n	8000fba <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8000e8c:	4b51      	ldr	r3, [pc, #324]	; (8000fd4 <GFX_DrawChar+0x16c>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	3b20      	subs	r3, #32
 8000e94:	494f      	ldr	r1, [pc, #316]	; (8000fd4 <GFX_DrawChar+0x16c>)
 8000e96:	6809      	ldr	r1, [r1, #0]
 8000e98:	3101      	adds	r1, #1
 8000e9a:	7809      	ldrb	r1, [r1, #0]
 8000e9c:	fb03 f101 	mul.w	r1, r3, r1
 8000ea0:	7dfb      	ldrb	r3, [r7, #23]
 8000ea2:	440b      	add	r3, r1
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000eac:	2300      	movs	r3, #0
 8000eae:	757b      	strb	r3, [r7, #21]
 8000eb0:	e078      	b.n	8000fa4 <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 8000eb2:	7dbb      	ldrb	r3, [r7, #22]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d032      	beq.n	8000f22 <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 8000ebc:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d113      	bne.n	8000eec <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 8000ec4:	7dfb      	ldrb	r3, [r7, #23]
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	4413      	add	r3, r2
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b218      	sxth	r0, r3
 8000ed2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4413      	add	r3, r2
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	79ba      	ldrb	r2, [r7, #6]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f000 f9d3 	bl	8001290 <SSD1306_DrawPixel>
 8000eea:	e052      	b.n	8000f92 <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 8000eec:	7dfb      	ldrb	r3, [r7, #23]
 8000eee:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	fb03 f202 	mul.w	r2, r3, r2
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	18d0      	adds	r0, r2, r3
 8000efa:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000efe:	4a36      	ldr	r2, [pc, #216]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	fb03 f202 	mul.w	r2, r3, r2
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	18d1      	adds	r1, r2, r3
 8000f0a:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	b29c      	uxth	r4, r3
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	4623      	mov	r3, r4
 8000f1c:	f000 f960 	bl	80011e0 <GFX_DrawFillRectangle>
 8000f20:	e037      	b.n	8000f92 <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 8000f22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d133      	bne.n	8000f92 <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d114      	bne.n	8000f5c <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	b218      	sxth	r0, r3
 8000f40:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000f54:	4619      	mov	r1, r3
 8000f56:	f000 f99b 	bl	8001290 <SSD1306_DrawPixel>
 8000f5a:	e01a      	b.n	8000f92 <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000f60:	7812      	ldrb	r2, [r2, #0]
 8000f62:	fb03 f202 	mul.w	r2, r3, r2
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	18d0      	adds	r0, r2, r3
 8000f6a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f6e:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000f70:	7812      	ldrb	r2, [r2, #0]
 8000f72:	fb03 f202 	mul.w	r2, r3, r2
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	18d1      	adds	r1, r2, r3
 8000f7a:	4b17      	ldr	r3, [pc, #92]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <GFX_DrawChar+0x170>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b29c      	uxth	r4, r3
 8000f86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	4623      	mov	r3, r4
 8000f8e:	f000 f927 	bl	80011e0 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 8000f92:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	3301      	adds	r3, #1
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	757b      	strb	r3, [r7, #21]
 8000f9e:	7dbb      	ldrb	r3, [r7, #22]
 8000fa0:	085b      	lsrs	r3, r3, #1
 8000fa2:	75bb      	strb	r3, [r7, #22]
 8000fa4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <GFX_DrawChar+0x16c>)
 8000faa:	6812      	ldr	r2, [r2, #0]
 8000fac:	7812      	ldrb	r2, [r2, #0]
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	f6ff af7f 	blt.w	8000eb2 <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 8000fb4:	7dfb      	ldrb	r3, [r7, #23]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	75fb      	strb	r3, [r7, #23]
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <GFX_DrawChar+0x16c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	7dfa      	ldrb	r2, [r7, #23]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f4ff af61 	bcc.w	8000e8c <GFX_DrawChar+0x24>
 8000fca:	e000      	b.n	8000fce <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 8000fcc:	bf00      	nop
            }
        }
    }
}
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd90      	pop	{r4, r7, pc}
 8000fd4:	20000080 	.word	0x20000080
 8000fd8:	20000000 	.word	0x20000000

08000fdc <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b088      	sub	sp, #32
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 8000ff4:	e03e      	b.n	8001074 <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 8000ff6:	78f9      	ldrb	r1, [r7, #3]
 8000ff8:	7cfa      	ldrb	r2, [r7, #19]
 8000ffa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	460b      	mov	r3, r1
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f7ff ff2f 	bl	8000e68 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <GFX_DrawString+0xb0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	3301      	adds	r3, #1
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <GFX_DrawString+0xb4>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	fb02 f303 	mul.w	r3, r2, r3
 800101c:	3301      	adds	r3, #1
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	4413      	add	r3, r2
 8001022:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 8001024:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d120      	bne.n	800106e <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 800102c:	2300      	movs	r3, #0
 800102e:	74bb      	strb	r3, [r7, #18]
 8001030:	e012      	b.n	8001058 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	b29b      	uxth	r3, r3
 8001036:	3b01      	subs	r3, #1
 8001038:	b29b      	uxth	r3, r3
 800103a:	b218      	sxth	r0, r3
 800103c:	7cbb      	ldrb	r3, [r7, #18]
 800103e:	b29a      	uxth	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	b29b      	uxth	r3, r3
 8001044:	4413      	add	r3, r2
 8001046:	b29b      	uxth	r3, r3
 8001048:	b21b      	sxth	r3, r3
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	f000 f91f 	bl	8001290 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001052:	7cbb      	ldrb	r3, [r7, #18]
 8001054:	3301      	adds	r3, #1
 8001056:	74bb      	strb	r3, [r7, #18]
 8001058:	7cba      	ldrb	r2, [r7, #18]
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <GFX_DrawString+0xb0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <GFX_DrawString+0xb4>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	fb01 f303 	mul.w	r3, r1, r3
 800106a:	429a      	cmp	r2, r3
 800106c:	dbe1      	blt.n	8001032 <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1ba      	bne.n	8000ff6 <GFX_DrawString+0x1a>
	}
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000080 	.word	0x20000080
 8001090:	20000000 	.word	0x20000000

08001094 <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08c      	sub	sp, #48	; 0x30
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010ac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80010b0:	6879      	ldr	r1, [r7, #4]
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1acb      	subs	r3, r1, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	bfb8      	it	lt
 80010ba:	425b      	neglt	r3, r3
 80010bc:	429a      	cmp	r2, r3
 80010be:	bfcc      	ite	gt
 80010c0:	2301      	movgt	r3, #1
 80010c2:	2300      	movle	r3, #0
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80010c8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00b      	beq.n	80010e8 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	627b      	str	r3, [r7, #36]	; 0x24
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	623b      	str	r3, [r7, #32]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dd0b      	ble.n	8001108 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	b29a      	uxth	r2, r3
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	b29b      	uxth	r3, r3
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	bfb8      	it	lt
 8001120:	425b      	neglt	r3, r3
 8001122:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 8001124:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001128:	0fda      	lsrs	r2, r3, #31
 800112a:	4413      	add	r3, r2
 800112c:	105b      	asrs	r3, r3, #1
 800112e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	429a      	cmp	r2, r3
 8001136:	da02      	bge.n	800113e <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001138:	2301      	movs	r3, #1
 800113a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800113c:	e030      	b.n	80011a0 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 800113e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001142:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 8001144:	e02c      	b.n	80011a0 <GFX_WriteLine+0x10c>
	        if (steep) {
 8001146:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800114a:	2b00      	cmp	r3, #0
 800114c:	d009      	beq.n	8001162 <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	b21b      	sxth	r3, r3
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	b211      	sxth	r1, r2
 8001156:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f898 	bl	8001290 <SSD1306_DrawPixel>
 8001160:	e008      	b.n	8001174 <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	b21b      	sxth	r3, r3
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	b211      	sxth	r1, r2
 800116a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f88e 	bl	8001290 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 8001174:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001176:	8abb      	ldrh	r3, [r7, #20]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	b29b      	uxth	r3, r3
 800117c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800117e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001182:	2b00      	cmp	r3, #0
 8001184:	da09      	bge.n	800119a <GFX_WriteLine+0x106>
	            y_start += ystep;
 8001186:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	4413      	add	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001190:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001192:	8afb      	ldrh	r3, [r7, #22]
 8001194:	4413      	add	r3, r2
 8001196:	b29b      	uxth	r3, r3
 8001198:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	3301      	adds	r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	ddce      	ble.n	8001146 <GFX_WriteLine+0xb2>
	        }
	    }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3730      	adds	r7, #48	; 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af02      	add	r7, sp, #8
 80011b8:	60f8      	str	r0, [r7, #12]
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	1e5a      	subs	r2, r3, #1
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	68b9      	ldr	r1, [r7, #8]
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff ff5e 	bl	8001094 <GFX_WriteLine>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	460b      	mov	r3, r1
 80011f0:	80fb      	strh	r3, [r7, #6]
 80011f2:	4613      	mov	r3, r2
 80011f4:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e009      	b.n	8001210 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80011fc:	88ba      	ldrh	r2, [r7, #4]
 80011fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001202:	68b9      	ldr	r1, [r7, #8]
 8001204:	6978      	ldr	r0, [r7, #20]
 8001206:	f7ff ffd4 	bl	80011b2 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	88fa      	ldrh	r2, [r7, #6]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4413      	add	r3, r2
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	dbef      	blt.n	80011fc <GFX_DrawFillRectangle+0x1c>
    }

}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <SSD1306_Command>:
I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

void SSD1306_Command(uint8_t Command)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af04      	add	r7, sp, #16
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <SSD1306_Command+0x30>)
 8001234:	6818      	ldr	r0, [r3, #0]
 8001236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	2301      	movs	r3, #1
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	2200      	movs	r2, #0
 8001248:	2178      	movs	r1, #120	; 0x78
 800124a:	f002 fe55 	bl	8003ef8 <HAL_I2C_Mem_Write>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000084 	.word	0x20000084

0800125c <SSD1306_Data>:

void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af04      	add	r7, sp, #16
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size);
	}
#else
	HAL_I2C_Mem_Write(oled_i2c, (SSD1306_ADDRESS<<1), 0x40, 1, Data, Size, SSD1306_TIMEOUT);
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <SSD1306_Data+0x30>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	2240      	movs	r2, #64	; 0x40
 800127e:	2178      	movs	r1, #120	; 0x78
 8001280:	f002 fe3a 	bl	8003ef8 <HAL_I2C_Mem_Write>
#endif
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000084 	.word	0x20000084

08001290 <SSD1306_DrawPixel>:
//
// Functions
//

void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	460b      	mov	r3, r1
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	70fb      	strb	r3, [r7, #3]
	if((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80012a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db79      	blt.n	800139e <SSD1306_DrawPixel+0x10e>
 80012aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ae:	2b7f      	cmp	r3, #127	; 0x7f
 80012b0:	dc75      	bgt.n	800139e <SSD1306_DrawPixel+0x10e>
 80012b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db71      	blt.n	800139e <SSD1306_DrawPixel+0x10e>
 80012ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012be:	2b3f      	cmp	r3, #63	; 0x3f
 80012c0:	dc6d      	bgt.n	800139e <SSD1306_DrawPixel+0x10e>
	  return;

    switch(Color)
 80012c2:	78fb      	ldrb	r3, [r7, #3]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d049      	beq.n	800135c <SSD1306_DrawPixel+0xcc>
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	dc69      	bgt.n	80013a0 <SSD1306_DrawPixel+0x110>
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d022      	beq.n	8001316 <SSD1306_DrawPixel+0x86>
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d165      	bne.n	80013a0 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80012d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da00      	bge.n	80012e2 <SSD1306_DrawPixel+0x52>
 80012e0:	3307      	adds	r3, #7
 80012e2:	10db      	asrs	r3, r3, #3
 80012e4:	b218      	sxth	r0, r3
 80012e6:	4603      	mov	r3, r0
 80012e8:	01db      	lsls	r3, r3, #7
 80012ea:	4413      	add	r3, r2
 80012ec:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <SSD1306_DrawPixel+0x11c>)
 80012ee:	5cd3      	ldrb	r3, [r2, r3]
 80012f0:	b25a      	sxtb	r2, r3
 80012f2:	88bb      	ldrh	r3, [r7, #4]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	4313      	orrs	r3, r2
 8001302:	b259      	sxtb	r1, r3
 8001304:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001308:	4603      	mov	r3, r0
 800130a:	01db      	lsls	r3, r3, #7
 800130c:	4413      	add	r3, r2
 800130e:	b2c9      	uxtb	r1, r1
 8001310:	4a26      	ldr	r2, [pc, #152]	; (80013ac <SSD1306_DrawPixel+0x11c>)
 8001312:	54d1      	strb	r1, [r2, r3]
      break;
 8001314:	e044      	b.n	80013a0 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 8001316:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800131a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	da00      	bge.n	8001324 <SSD1306_DrawPixel+0x94>
 8001322:	3307      	adds	r3, #7
 8001324:	10db      	asrs	r3, r3, #3
 8001326:	b218      	sxth	r0, r3
 8001328:	4603      	mov	r3, r0
 800132a:	01db      	lsls	r3, r3, #7
 800132c:	4413      	add	r3, r2
 800132e:	4a1f      	ldr	r2, [pc, #124]	; (80013ac <SSD1306_DrawPixel+0x11c>)
 8001330:	5cd3      	ldrb	r3, [r2, r3]
 8001332:	b25a      	sxtb	r2, r3
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	2101      	movs	r1, #1
 800133c:	fa01 f303 	lsl.w	r3, r1, r3
 8001340:	b25b      	sxtb	r3, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	b25b      	sxtb	r3, r3
 8001346:	4013      	ands	r3, r2
 8001348:	b259      	sxtb	r1, r3
 800134a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800134e:	4603      	mov	r3, r0
 8001350:	01db      	lsls	r3, r3, #7
 8001352:	4413      	add	r3, r2
 8001354:	b2c9      	uxtb	r1, r1
 8001356:	4a15      	ldr	r2, [pc, #84]	; (80013ac <SSD1306_DrawPixel+0x11c>)
 8001358:	54d1      	strb	r1, [r2, r3]
      break;
 800135a:	e021      	b.n	80013a0 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 800135c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001360:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	da00      	bge.n	800136a <SSD1306_DrawPixel+0xda>
 8001368:	3307      	adds	r3, #7
 800136a:	10db      	asrs	r3, r3, #3
 800136c:	b218      	sxth	r0, r3
 800136e:	4603      	mov	r3, r0
 8001370:	01db      	lsls	r3, r3, #7
 8001372:	4413      	add	r3, r2
 8001374:	4a0d      	ldr	r2, [pc, #52]	; (80013ac <SSD1306_DrawPixel+0x11c>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	b25a      	sxtb	r2, r3
 800137a:	88bb      	ldrh	r3, [r7, #4]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f303 	lsl.w	r3, r1, r3
 8001386:	b25b      	sxtb	r3, r3
 8001388:	4053      	eors	r3, r2
 800138a:	b259      	sxtb	r1, r3
 800138c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001390:	4603      	mov	r3, r0
 8001392:	01db      	lsls	r3, r3, #7
 8001394:	4413      	add	r3, r2
 8001396:	b2c9      	uxtb	r1, r1
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <SSD1306_DrawPixel+0x11c>)
 800139a:	54d1      	strb	r1, [r2, r3]
      break;
 800139c:	e000      	b.n	80013a0 <SSD1306_DrawPixel+0x110>
	  return;
 800139e:	bf00      	nop
    }
}
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000088 	.word	0x20000088

080013b0 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d008      	beq.n	80013d2 <SSD1306_Clear+0x22>
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d10d      	bne.n	80013e0 <SSD1306_Clear+0x30>
	{
	case WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80013c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c8:	21ff      	movs	r1, #255	; 0xff
 80013ca:	4807      	ldr	r0, [pc, #28]	; (80013e8 <SSD1306_Clear+0x38>)
 80013cc:	f008 fbd6 	bl	8009b7c <memset>
		break;
 80013d0:	e006      	b.n	80013e0 <SSD1306_Clear+0x30>

	case BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80013d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d6:	2100      	movs	r1, #0
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <SSD1306_Clear+0x38>)
 80013da:	f008 fbcf 	bl	8009b7c <memset>
		break;
 80013de:	bf00      	nop
	}
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000088 	.word	0x20000088

080013ec <SSD1306_Display>:

void SSD1306_Display(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 80013f0:	2022      	movs	r0, #34	; 0x22
 80013f2:	f7ff ff19 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0);                      // Page start address
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff ff16 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0xFF);                   // Page end (not really, but works here)
 80013fc:	20ff      	movs	r0, #255	; 0xff
 80013fe:	f7ff ff13 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001402:	2021      	movs	r0, #33	; 0x21
 8001404:	f7ff ff10 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff ff0d 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 800140e:	207f      	movs	r0, #127	; 0x7f
 8001410:	f7ff ff0a 	bl	8001228 <SSD1306_Command>

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001418:	4802      	ldr	r0, [pc, #8]	; (8001424 <SSD1306_Display+0x38>)
 800141a:	f7ff ff1f 	bl	800125c <SSD1306_Data>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000088 	.word	0x20000088

08001428 <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001430:	4a28      	ldr	r2, [pc, #160]	; (80014d4 <SSD1306_Init+0xac>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF);
 8001436:	20ae      	movs	r0, #174	; 0xae
 8001438:	f7ff fef6 	bl	8001228 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV);
 800143c:	20d5      	movs	r0, #213	; 0xd5
 800143e:	f7ff fef3 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0x80);
 8001442:	2080      	movs	r0, #128	; 0x80
 8001444:	f7ff fef0 	bl	8001228 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001448:	203f      	movs	r0, #63	; 0x3f
 800144a:	f7ff feed 	bl	8001228 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET);
 800144e:	20d3      	movs	r0, #211	; 0xd3
 8001450:	f7ff feea 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0x00);
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fee7 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE);
 800145a:	2040      	movs	r0, #64	; 0x40
 800145c:	f7ff fee4 	bl	8001228 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP);
 8001460:	208d      	movs	r0, #141	; 0x8d
 8001462:	f7ff fee1 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0x14);
 8001466:	2014      	movs	r0, #20
 8001468:	f7ff fede 	bl	8001228 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 800146c:	2020      	movs	r0, #32
 800146e:	f7ff fedb 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 8001472:	2000      	movs	r0, #0
 8001474:	f7ff fed8 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001478:	20a1      	movs	r0, #161	; 0xa1
 800147a:	f7ff fed5 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 800147e:	20c8      	movs	r0, #200	; 0xc8
 8001480:	f7ff fed2 	bl	8001228 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 8001484:	20da      	movs	r0, #218	; 0xda
 8001486:	f7ff fecf 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0x12);
 800148a:	2012      	movs	r0, #18
 800148c:	f7ff fecc 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 8001490:	2081      	movs	r0, #129	; 0x81
 8001492:	f7ff fec9 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0xFF);
 8001496:	20ff      	movs	r0, #255	; 0xff
 8001498:	f7ff fec6 	bl	8001228 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 800149c:	20d9      	movs	r0, #217	; 0xd9
 800149e:	f7ff fec3 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80014a2:	20f1      	movs	r0, #241	; 0xf1
 80014a4:	f7ff fec0 	bl	8001228 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80014a8:	20db      	movs	r0, #219	; 0xdb
 80014aa:	f7ff febd 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(0x40);
 80014ae:	2040      	movs	r0, #64	; 0x40
 80014b0:	f7ff feba 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80014b4:	20a4      	movs	r0, #164	; 0xa4
 80014b6:	f7ff feb7 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80014ba:	20a6      	movs	r0, #166	; 0xa6
 80014bc:	f7ff feb4 	bl	8001228 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80014c0:	202e      	movs	r0, #46	; 0x2e
 80014c2:	f7ff feb1 	bl	8001228 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80014c6:	20af      	movs	r0, #175	; 0xaf
 80014c8:	f7ff feae 	bl	8001228 <SSD1306_Command>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000084 	.word	0x20000084

080014d8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of MutexPrintf */
  MutexPrintfHandle = osMutexNew(&MutexPrintf_attributes);
 80014dc:	480b      	ldr	r0, [pc, #44]	; (800150c <MX_FREERTOS_Init+0x34>)
 80014de:	f005 fa3c 	bl	800695a <osMutexNew>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <MX_FREERTOS_Init+0x38>)
 80014e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014e8:	4a0a      	ldr	r2, [pc, #40]	; (8001514 <MX_FREERTOS_Init+0x3c>)
 80014ea:	2100      	movs	r1, #0
 80014ec:	480a      	ldr	r0, [pc, #40]	; (8001518 <MX_FREERTOS_Init+0x40>)
 80014ee:	f005 f975 	bl	80067dc <osThreadNew>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a09      	ldr	r2, [pc, #36]	; (800151c <MX_FREERTOS_Init+0x44>)
 80014f6:	6013      	str	r3, [r2, #0]

  /* creation of TaskRTC */
  TaskRTCHandle = osThreadNew(StartTaskTaskRTC, NULL, &TaskRTC_attributes);
 80014f8:	4a09      	ldr	r2, [pc, #36]	; (8001520 <MX_FREERTOS_Init+0x48>)
 80014fa:	2100      	movs	r1, #0
 80014fc:	4809      	ldr	r0, [pc, #36]	; (8001524 <MX_FREERTOS_Init+0x4c>)
 80014fe:	f005 f96d 	bl	80067dc <osThreadNew>
 8001502:	4603      	mov	r3, r0
 8001504:	4a08      	ldr	r2, [pc, #32]	; (8001528 <MX_FREERTOS_Init+0x50>)
 8001506:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001508:	bf00      	nop
 800150a:	bd80      	pop	{r7, pc}
 800150c:	0800a014 	.word	0x0800a014
 8001510:	20000490 	.word	0x20000490
 8001514:	08009fcc 	.word	0x08009fcc
 8001518:	0800152d 	.word	0x0800152d
 800151c:	20000488 	.word	0x20000488
 8001520:	08009ff0 	.word	0x08009ff0
 8001524:	08001579 	.word	0x08001579
 8001528:	2000048c 	.word	0x2000048c

0800152c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	uint32_t tick;
	tick = osKernelGetTickCount();
 8001534:	f005 f934 	bl	80067a0 <osKernelGetTickCount>
 8001538:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800153a:	2120      	movs	r1, #32
 800153c:	480b      	ldr	r0, [pc, #44]	; (800156c <StartDefaultTask+0x40>)
 800153e:	f002 fb58 	bl	8003bf2 <HAL_GPIO_TogglePin>
	  printf("LED2 TASK \n\r");
 8001542:	480b      	ldr	r0, [pc, #44]	; (8001570 <StartDefaultTask+0x44>)
 8001544:	f001 fe76 	bl	8003234 <printf_>
	  tick += (300 * osKernelGetTickFreq()) / 1000;
 8001548:	f005 f93f 	bl	80067ca <osKernelGetTickFreq>
 800154c:	4603      	mov	r3, r0
 800154e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <StartDefaultTask+0x48>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4413      	add	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]
	  osDelayUntil(tick);
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f005 f9cb 	bl	8006900 <osDelayUntil>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800156a:	e7e6      	b.n	800153a <StartDefaultTask+0xe>
 800156c:	40020000 	.word	0x40020000
 8001570:	08009d88 	.word	0x08009d88
 8001574:	10624dd3 	.word	0x10624dd3

08001578 <StartTaskTaskRTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTaskRTC */
void StartTaskTaskRTC(void *argument)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af02      	add	r7, sp, #8
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTaskRTC */

	char MessageTemp[32];

	SSD1306_Init(&hi2c1);
 8001580:	481a      	ldr	r0, [pc, #104]	; (80015ec <StartTaskTaskRTC+0x74>)
 8001582:	f7ff ff51 	bl	8001428 <SSD1306_Init>

	GFX_SetFont(font_8x5);
 8001586:	481a      	ldr	r0, [pc, #104]	; (80015f0 <StartTaskTaskRTC+0x78>)
 8001588:	f7ff fc5e 	bl	8000e48 <GFX_SetFont>

	SSD1306_Clear(BLACK);
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff ff0f 	bl	80013b0 <SSD1306_Clear>

	SSD1306_Display();
 8001592:	f7ff ff2b 	bl	80013ec <SSD1306_Display>

	uint32_t tick2 = osKernelGetTickCount();
 8001596:	f005 f903 	bl	80067a0 <osKernelGetTickCount>
 800159a:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Infinite loop */
  for(;;)
  {
	  SSD1306_Clear(BLACK);
 800159c:	2000      	movs	r0, #0
 800159e:	f7ff ff07 	bl	80013b0 <SSD1306_Clear>
	  sprintf(MessageTemp, "Temperature: 28 ");
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4913      	ldr	r1, [pc, #76]	; (80015f4 <StartTaskTaskRTC+0x7c>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 fe5f 	bl	800326c <sprintf_>
	  GFX_DrawString(0, 0, MessageTemp, WHITE, 0);
 80015ae:	f107 020c 	add.w	r2, r7, #12
 80015b2:	2300      	movs	r3, #0
 80015b4:	9300      	str	r3, [sp, #0]
 80015b6:	2301      	movs	r3, #1
 80015b8:	2100      	movs	r1, #0
 80015ba:	2000      	movs	r0, #0
 80015bc:	f7ff fd0e 	bl	8000fdc <GFX_DrawString>

	  SSD1306_Display();
 80015c0:	f7ff ff14 	bl	80013ec <SSD1306_Display>
	  printf("TASK OLED \n\r");
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <StartTaskTaskRTC+0x80>)
 80015c6:	f001 fe35 	bl	8003234 <printf_>

	tick2 += (100 * osKernelGetTickFreq()) / 1000;
 80015ca:	f005 f8fe 	bl	80067ca <osKernelGetTickFreq>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2264      	movs	r2, #100	; 0x64
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <StartTaskTaskRTC+0x84>)
 80015d8:	fba2 2303 	umull	r2, r3, r2, r3
 80015dc:	099b      	lsrs	r3, r3, #6
 80015de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e0:	4413      	add	r3, r2
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	osDelayUntil(tick2);
 80015e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015e6:	f005 f98b 	bl	8006900 <osDelayUntil>
	  SSD1306_Clear(BLACK);
 80015ea:	e7d7      	b.n	800159c <StartTaskTaskRTC+0x24>
 80015ec:	20000494 	.word	0x20000494
 80015f0:	08009dec 	.word	0x08009dec
 80015f4:	08009d98 	.word	0x08009d98
 80015f8:	08009dac 	.word	0x08009dac
 80015fc:	10624dd3 	.word	0x10624dd3

08001600 <_putchar>:
  /* USER CODE END StartTaskTaskRTC */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void _putchar(char character) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	// send char to console etc.
	osMutexAcquire(MutexPrintfHandle, osWaitForever);
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <_putchar+0x38>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f04f 31ff 	mov.w	r1, #4294967295
 8001612:	4618      	mov	r0, r3
 8001614:	f005 fa27 	bl	8006a66 <osMutexAcquire>
	HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, 1000);
 8001618:	1df9      	adds	r1, r7, #7
 800161a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800161e:	2201      	movs	r2, #1
 8001620:	4806      	ldr	r0, [pc, #24]	; (800163c <_putchar+0x3c>)
 8001622:	f004 fcba 	bl	8005f9a <HAL_UART_Transmit>

	osMutexRelease(MutexPrintfHandle);
 8001626:	4b04      	ldr	r3, [pc, #16]	; (8001638 <_putchar+0x38>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f005 fa66 	bl	8006afc <osMutexRelease>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000490 	.word	0x20000490
 800163c:	20000550 	.word	0x20000550

08001640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <MX_GPIO_Init+0xd0>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a2c      	ldr	r2, [pc, #176]	; (8001710 <MX_GPIO_Init+0xd0>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b2a      	ldr	r3, [pc, #168]	; (8001710 <MX_GPIO_Init+0xd0>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	613b      	str	r3, [r7, #16]
 8001670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <MX_GPIO_Init+0xd0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a25      	ldr	r2, [pc, #148]	; (8001710 <MX_GPIO_Init+0xd0>)
 800167c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <MX_GPIO_Init+0xd0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <MX_GPIO_Init+0xd0>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a1e      	ldr	r2, [pc, #120]	; (8001710 <MX_GPIO_Init+0xd0>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_GPIO_Init+0xd0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_GPIO_Init+0xd0>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <MX_GPIO_Init+0xd0>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_GPIO_Init+0xd0>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2120      	movs	r1, #32
 80016ca:	4812      	ldr	r0, [pc, #72]	; (8001714 <MX_GPIO_Init+0xd4>)
 80016cc:	f002 fa78 	bl	8003bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016d0:	2320      	movs	r3, #32
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480b      	ldr	r0, [pc, #44]	; (8001714 <MX_GPIO_Init+0xd4>)
 80016e8:	f002 f8d6 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	4619      	mov	r1, r3
 8001702:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_GPIO_Init+0xd4>)
 8001704:	f002 f8c8 	bl	8003898 <HAL_GPIO_Init>

}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40020000 	.word	0x40020000

08001718 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800171c:	4b12      	ldr	r3, [pc, #72]	; (8001768 <MX_I2C1_Init+0x50>)
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <MX_I2C1_Init+0x54>)
 8001720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <MX_I2C1_Init+0x50>)
 8001724:	4a12      	ldr	r2, [pc, #72]	; (8001770 <MX_I2C1_Init+0x58>)
 8001726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001728:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <MX_I2C1_Init+0x50>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <MX_I2C1_Init+0x50>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <MX_I2C1_Init+0x50>)
 8001736:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800173c:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <MX_I2C1_Init+0x50>)
 800173e:	2200      	movs	r2, #0
 8001740:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_I2C1_Init+0x50>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <MX_I2C1_Init+0x50>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <MX_I2C1_Init+0x50>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001754:	4804      	ldr	r0, [pc, #16]	; (8001768 <MX_I2C1_Init+0x50>)
 8001756:	f002 fa8b 	bl	8003c70 <HAL_I2C_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001760:	f000 f8fe 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000494 	.word	0x20000494
 800176c:	40005400 	.word	0x40005400
 8001770:	000186a0 	.word	0x000186a0

08001774 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <HAL_I2C_MspInit+0x84>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12c      	bne.n	80017f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_I2C_MspInit+0x88>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b8:	2312      	movs	r3, #18
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017c4:	2304      	movs	r3, #4
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <HAL_I2C_MspInit+0x8c>)
 80017d0:	f002 f862 	bl	8003898 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e2:	6413      	str	r3, [r2, #64]	; 0x40
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_I2C_MspInit+0x88>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40005400 	.word	0x40005400
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020400 	.word	0x40020400

08001804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001808:	f001 ff22 	bl	8003650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800180c:	f000 f812 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001810:	f7ff ff16 	bl	8001640 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001814:	f7ff ff80 	bl	8001718 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001818:	f001 fe7e 	bl	8003518 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800181c:	f001 fd42 	bl	80032a4 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001820:	f000 f878 	bl	8001914 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001824:	f004 ff72 	bl	800670c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001828:	f7ff fe56 	bl	80014d8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800182c:	f004 ff92 	bl	8006754 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0x2c>
	...

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	2234      	movs	r2, #52	; 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f008 f99a 	bl	8009b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <SystemClock_Config+0xd8>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a2a      	ldr	r2, [pc, #168]	; (800190c <SystemClock_Config+0xd8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b28      	ldr	r3, [pc, #160]	; (800190c <SystemClock_Config+0xd8>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001874:	2300      	movs	r3, #0
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <SystemClock_Config+0xdc>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001880:	4a23      	ldr	r2, [pc, #140]	; (8001910 <SystemClock_Config+0xdc>)
 8001882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <SystemClock_Config+0xdc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001894:	2306      	movs	r3, #6
 8001896:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001898:	2301      	movs	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800189c:	2301      	movs	r3, #1
 800189e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a0:	2310      	movs	r3, #16
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a4:	2302      	movs	r3, #2
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80018ac:	2310      	movs	r3, #16
 80018ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80018b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80018b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80018b6:	2304      	movs	r3, #4
 80018b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018be:	2302      	movs	r3, #2
 80018c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4618      	mov	r0, r3
 80018c8:	f003 fcd4 	bl	8005274 <HAL_RCC_OscConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80018d2:	f000 f845 	bl	8001960 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d6:	230f      	movs	r3, #15
 80018d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018da:	2302      	movs	r3, #2
 80018dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ec:	f107 0308 	add.w	r3, r7, #8
 80018f0:	2102      	movs	r1, #2
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fe18 	bl	8004528 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80018fe:	f000 f82f 	bl	8001960 <Error_Handler>
  }
}
 8001902:	bf00      	nop
 8001904:	3750      	adds	r7, #80	; 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000

08001914 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2105      	movs	r1, #5
 800191c:	2005      	movs	r0, #5
 800191e:	f001 ff91 	bl	8003844 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001922:	2005      	movs	r0, #5
 8001924:	f001 ffaa 	bl	800387c <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	2017      	movs	r0, #23
 800192e:	f001 ff89 	bl	8003844 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001932:	2017      	movs	r0, #23
 8001934:	f001 ffa2 	bl	800387c <HAL_NVIC_EnableIRQ>
}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800194e:	f001 fea1 	bl	8003694 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40002000 	.word	0x40002000

08001960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
}
 8001966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001968:	e7fe      	b.n	8001968 <Error_Handler+0x8>

0800196a <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	4603      	mov	r3, r0
 8001978:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d204      	bcs.n	800198c <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4413      	add	r3, r2
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	701a      	strb	r2, [r3, #0]
  }
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4603      	mov	r3, r0
 80019a6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <_out_char+0x1e>
    _putchar(character);
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fe17 	bl	8001600 <_putchar>
  }
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
 80019e2:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e002      	b.n	80019f0 <_strnlen_s+0x16>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d004      	beq.n	8001a02 <_strnlen_s+0x28>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	603a      	str	r2, [r7, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f3      	bne.n	80019ea <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	1ad3      	subs	r3, r2, r3
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b2f      	cmp	r3, #47	; 0x2f
 8001a22:	d904      	bls.n	8001a2e <_is_digit+0x1a>
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	2b39      	cmp	r3, #57	; 0x39
 8001a28:	d801      	bhi.n	8001a2e <_is_digit+0x1a>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <_is_digit+0x1c>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f003 0301 	and.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b084      	sub	sp, #16
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001a4e:	e00e      	b.n	8001a6e <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	4613      	mov	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	1c59      	adds	r1, r3, #1
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6011      	str	r1, [r2, #0]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	4403      	add	r3, r0
 8001a6a:	3b30      	subs	r3, #48	; 0x30
 8001a6c:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ffcd 	bl	8001a14 <_is_digit>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e7      	bne.n	8001a50 <_atoi+0xe>
  }
  return i;
 8001a80:	68fb      	ldr	r3, [r7, #12]
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001a8a:	b590      	push	{r4, r7, lr}
 8001a8c:	b087      	sub	sp, #28
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d125      	bne.n	8001af2 <_out_rev+0x68>
 8001aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d120      	bne.n	8001af2 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e00a      	b.n	8001acc <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	1c53      	adds	r3, r2, #1
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	68fc      	ldr	r4, [r7, #12]
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	2020      	movs	r0, #32
 8001ac4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d3f0      	bcc.n	8001ab6 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8001ad4:	e00d      	b.n	8001af2 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8001ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae0:	4413      	add	r3, r2
 8001ae2:	7818      	ldrb	r0, [r3, #0]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	1c53      	adds	r3, r2, #1
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	68fc      	ldr	r4, [r7, #12]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68b9      	ldr	r1, [r7, #8]
 8001af0:	47a0      	blx	r4
  while (len) {
 8001af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1ee      	bne.n	8001ad6 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00e      	beq.n	8001b20 <_out_rev+0x96>
    while (idx - start_idx < width) {
 8001b02:	e007      	b.n	8001b14 <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	1c53      	adds	r3, r2, #1
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	68fc      	ldr	r4, [r7, #12]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	68b9      	ldr	r1, [r7, #8]
 8001b10:	2020      	movs	r0, #32
 8001b12:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f1      	bhi.n	8001b04 <_out_rev+0x7a>
    }
  }

  return idx;
 8001b20:	687b      	ldr	r3, [r7, #4]
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	371c      	adds	r7, #28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd90      	pop	{r4, r7, pc}

08001b2a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b088      	sub	sp, #32
 8001b2e:	af04      	add	r7, sp, #16
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8001b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d136      	bne.n	8001bb0 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8001b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d018      	beq.n	8001b7a <_ntoa_format+0x50>
 8001b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d013      	beq.n	8001b7a <_ntoa_format+0x50>
 8001b52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <_ntoa_format+0x3a>
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	f003 030c 	and.w	r3, r3, #12
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d00a      	beq.n	8001b7a <_ntoa_format+0x50>
      width--;
 8001b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b66:	3b01      	subs	r3, #1
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b6a:	e006      	b.n	8001b7a <_ntoa_format+0x50>
      buf[len++] = '0';
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	61fa      	str	r2, [r7, #28]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4413      	add	r3, r2
 8001b76:	2230      	movs	r2, #48	; 0x30
 8001b78:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d20a      	bcs.n	8001b98 <_ntoa_format+0x6e>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2b1f      	cmp	r3, #31
 8001b86:	d9f1      	bls.n	8001b6c <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b88:	e006      	b.n	8001b98 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	61fa      	str	r2, [r7, #28]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4413      	add	r3, r2
 8001b94:	2230      	movs	r2, #48	; 0x30
 8001b96:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <_ntoa_format+0x86>
 8001ba2:	69fa      	ldr	r2, [r7, #28]
 8001ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d202      	bcs.n	8001bb0 <_ntoa_format+0x86>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b1f      	cmp	r3, #31
 8001bae:	d9ec      	bls.n	8001b8a <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8001bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d058      	beq.n	8001c6c <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8001bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d116      	bne.n	8001bf2 <_ntoa_format+0xc8>
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d013      	beq.n	8001bf2 <_ntoa_format+0xc8>
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d003      	beq.n	8001bda <_ntoa_format+0xb0>
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d10b      	bne.n	8001bf2 <_ntoa_format+0xc8>
      len--;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d005      	beq.n	8001bf2 <_ntoa_format+0xc8>
 8001be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be8:	2b10      	cmp	r3, #16
 8001bea:	d102      	bne.n	8001bf2 <_ntoa_format+0xc8>
        len--;
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf4:	2b10      	cmp	r3, #16
 8001bf6:	d10f      	bne.n	8001c18 <_ntoa_format+0xee>
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10a      	bne.n	8001c18 <_ntoa_format+0xee>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	2b1f      	cmp	r3, #31
 8001c06:	d807      	bhi.n	8001c18 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	61fa      	str	r2, [r7, #28]
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4413      	add	r3, r2
 8001c12:	2278      	movs	r2, #120	; 0x78
 8001c14:	701a      	strb	r2, [r3, #0]
 8001c16:	e01f      	b.n	8001c58 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d10f      	bne.n	8001c3e <_ntoa_format+0x114>
 8001c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c20:	f003 0320 	and.w	r3, r3, #32
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00a      	beq.n	8001c3e <_ntoa_format+0x114>
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	2b1f      	cmp	r3, #31
 8001c2c:	d807      	bhi.n	8001c3e <_ntoa_format+0x114>
      buf[len++] = 'X';
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	61fa      	str	r2, [r7, #28]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4413      	add	r3, r2
 8001c38:	2258      	movs	r2, #88	; 0x58
 8001c3a:	701a      	strb	r2, [r3, #0]
 8001c3c:	e00c      	b.n	8001c58 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d109      	bne.n	8001c58 <_ntoa_format+0x12e>
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2b1f      	cmp	r3, #31
 8001c48:	d806      	bhi.n	8001c58 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	61fa      	str	r2, [r7, #28]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4413      	add	r3, r2
 8001c54:	2262      	movs	r2, #98	; 0x62
 8001c56:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b1f      	cmp	r3, #31
 8001c5c:	d806      	bhi.n	8001c6c <_ntoa_format+0x142>
      buf[len++] = '0';
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	1c5a      	adds	r2, r3, #1
 8001c62:	61fa      	str	r2, [r7, #28]
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4413      	add	r3, r2
 8001c68:	2230      	movs	r2, #48	; 0x30
 8001c6a:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	2b1f      	cmp	r3, #31
 8001c70:	d824      	bhi.n	8001cbc <_ntoa_format+0x192>
    if (negative) {
 8001c72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <_ntoa_format+0x160>
      buf[len++] = '-';
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	61fa      	str	r2, [r7, #28]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4413      	add	r3, r2
 8001c84:	222d      	movs	r2, #45	; 0x2d
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e018      	b.n	8001cbc <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	61fa      	str	r2, [r7, #28]
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	222b      	movs	r2, #43	; 0x2b
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	e00b      	b.n	8001cbc <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8001ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d006      	beq.n	8001cbc <_ntoa_format+0x192>
      buf[len++] = ' ';
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	1c5a      	adds	r2, r3, #1
 8001cb2:	61fa      	str	r2, [r7, #28]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	2220      	movs	r2, #32
 8001cba:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	9303      	str	r3, [sp, #12]
 8001cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	9301      	str	r3, [sp, #4]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68b9      	ldr	r1, [r7, #8]
 8001cd2:	68f8      	ldr	r0, [r7, #12]
 8001cd4:	f7ff fed9 	bl	8001a8a <_out_rev>
 8001cd8:	4603      	mov	r3, r0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b096      	sub	sp, #88	; 0x58
 8001ce6:	af08      	add	r7, sp, #32
 8001ce8:	60f8      	str	r0, [r7, #12]
 8001cea:	60b9      	str	r1, [r7, #8]
 8001cec:	607a      	str	r2, [r7, #4]
 8001cee:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d103      	bne.n	8001d02 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8001cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cfc:	f023 0310 	bic.w	r3, r3, #16
 8001d00:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001d02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <_ntoa_long+0x30>
 8001d0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d032      	beq.n	8001d78 <_ntoa_long+0x96>
    do {
      const char digit = (char)(value % base);
 8001d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d16:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d1a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d1c:	fb01 f202 	mul.w	r2, r1, r2
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001d26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d2a:	2b09      	cmp	r3, #9
 8001d2c:	d804      	bhi.n	8001d38 <_ntoa_long+0x56>
 8001d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d32:	3330      	adds	r3, #48	; 0x30
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	e00d      	b.n	8001d54 <_ntoa_long+0x72>
 8001d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d3a:	f003 0320 	and.w	r3, r3, #32
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <_ntoa_long+0x64>
 8001d42:	2241      	movs	r2, #65	; 0x41
 8001d44:	e000      	b.n	8001d48 <_ntoa_long+0x66>
 8001d46:	2261      	movs	r2, #97	; 0x61
 8001d48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d4c:	4413      	add	r3, r2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	3b0a      	subs	r3, #10
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d56:	1c59      	adds	r1, r3, #1
 8001d58:	6379      	str	r1, [r7, #52]	; 0x34
 8001d5a:	3338      	adds	r3, #56	; 0x38
 8001d5c:	443b      	add	r3, r7
 8001d5e:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001d62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6a:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <_ntoa_long+0x96>
 8001d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d74:	2b1f      	cmp	r3, #31
 8001d76:	d9cc      	bls.n	8001d12 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d7a:	9306      	str	r3, [sp, #24]
 8001d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d7e:	9305      	str	r3, [sp, #20]
 8001d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d82:	9304      	str	r3, [sp, #16]
 8001d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d86:	9303      	str	r3, [sp, #12]
 8001d88:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001d8c:	9302      	str	r3, [sp, #8]
 8001d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68b9      	ldr	r1, [r7, #8]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fec3 	bl	8001b2a <_ntoa_format>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3738      	adds	r7, #56	; 0x38
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b096      	sub	sp, #88	; 0x58
 8001db2:	af08      	add	r7, sp, #32
 8001db4:	60f8      	str	r0, [r7, #12]
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8001dc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	d103      	bne.n	8001dd0 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8001dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dca:	f023 0310 	bic.w	r3, r3, #16
 8001dce:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8001dd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <_ntoa_long_long+0x34>
 8001dda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dde:	4313      	orrs	r3, r2
 8001de0:	d037      	beq.n	8001e52 <_ntoa_long_long+0xa4>
    do {
      const char digit = (char)(value % base);
 8001de2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001de6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001dea:	f7fe feaf 	bl	8000b4c <__aeabi_uldivmod>
 8001dee:	4613      	mov	r3, r2
 8001df0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8001df4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001df8:	2b09      	cmp	r3, #9
 8001dfa:	d804      	bhi.n	8001e06 <_ntoa_long_long+0x58>
 8001dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e00:	3330      	adds	r3, #48	; 0x30
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	e00d      	b.n	8001e22 <_ntoa_long_long+0x74>
 8001e06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e08:	f003 0320 	and.w	r3, r3, #32
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <_ntoa_long_long+0x66>
 8001e10:	2241      	movs	r2, #65	; 0x41
 8001e12:	e000      	b.n	8001e16 <_ntoa_long_long+0x68>
 8001e14:	2261      	movs	r2, #97	; 0x61
 8001e16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3b0a      	subs	r3, #10
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e24:	1c59      	adds	r1, r3, #1
 8001e26:	6379      	str	r1, [r7, #52]	; 0x34
 8001e28:	3338      	adds	r3, #56	; 0x38
 8001e2a:	443b      	add	r3, r7
 8001e2c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8001e30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e34:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001e38:	f7fe fe88 	bl	8000b4c <__aeabi_uldivmod>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8001e44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	d002      	beq.n	8001e52 <_ntoa_long_long+0xa4>
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4e:	2b1f      	cmp	r3, #31
 8001e50:	d9c7      	bls.n	8001de2 <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8001e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e56:	9206      	str	r2, [sp, #24]
 8001e58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001e5a:	9205      	str	r2, [sp, #20]
 8001e5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e5e:	9204      	str	r2, [sp, #16]
 8001e60:	9303      	str	r3, [sp, #12]
 8001e62:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	f107 0310 	add.w	r3, r7, #16
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	68b9      	ldr	r1, [r7, #8]
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fe56 	bl	8001b2a <_ntoa_format>
 8001e7e:	4603      	mov	r3, r0
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3738      	adds	r7, #56	; 0x38
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b09d      	sub	sp, #116	; 0x74
 8001e8c:	af04      	add	r7, sp, #16
 8001e8e:	6178      	str	r0, [r7, #20]
 8001e90:	6139      	str	r1, [r7, #16]
 8001e92:	60fa      	str	r2, [r7, #12]
 8001e94:	60bb      	str	r3, [r7, #8]
 8001e96:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8001eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001eae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eb2:	f7fe fdd1 	bl	8000a58 <__aeabi_dcmpeq>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10f      	bne.n	8001edc <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8001ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ebe:	9303      	str	r3, [sp, #12]
 8001ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec2:	9302      	str	r3, [sp, #8]
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	4ba7      	ldr	r3, [pc, #668]	; (8002168 <_ftoa+0x2e0>)
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	6939      	ldr	r1, [r7, #16]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff fdd9 	bl	8001a8a <_out_rev>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	e222      	b.n	8002322 <_ftoa+0x49a>
  if (value < -DBL_MAX)
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8001ee4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee8:	f7fe fdc0 	bl	8000a6c <__aeabi_dcmplt>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00f      	beq.n	8001f12 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8001ef2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef4:	9303      	str	r3, [sp, #12]
 8001ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	2304      	movs	r3, #4
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	4b9b      	ldr	r3, [pc, #620]	; (800216c <_ftoa+0x2e4>)
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	6939      	ldr	r1, [r7, #16]
 8001f08:	6978      	ldr	r0, [r7, #20]
 8001f0a:	f7ff fdbe 	bl	8001a8a <_out_rev>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	e207      	b.n	8002322 <_ftoa+0x49a>
  if (value > DBL_MAX)
 8001f12:	f04f 32ff 	mov.w	r2, #4294967295
 8001f16:	4b96      	ldr	r3, [pc, #600]	; (8002170 <_ftoa+0x2e8>)
 8001f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f1c:	f7fe fdc4 	bl	8000aa8 <__aeabi_dcmpgt>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01d      	beq.n	8001f62 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8001f26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <_ftoa+0xac>
 8001f30:	4b90      	ldr	r3, [pc, #576]	; (8002174 <_ftoa+0x2ec>)
 8001f32:	e000      	b.n	8001f36 <_ftoa+0xae>
 8001f34:	4b90      	ldr	r3, [pc, #576]	; (8002178 <_ftoa+0x2f0>)
 8001f36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8001f38:	f002 0204 	and.w	r2, r2, #4
 8001f3c:	2a00      	cmp	r2, #0
 8001f3e:	d001      	beq.n	8001f44 <_ftoa+0xbc>
 8001f40:	2204      	movs	r2, #4
 8001f42:	e000      	b.n	8001f46 <_ftoa+0xbe>
 8001f44:	2203      	movs	r2, #3
 8001f46:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001f48:	9103      	str	r1, [sp, #12]
 8001f4a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001f4c:	9102      	str	r1, [sp, #8]
 8001f4e:	9201      	str	r2, [sp, #4]
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	6939      	ldr	r1, [r7, #16]
 8001f58:	6978      	ldr	r0, [r7, #20]
 8001f5a:	f7ff fd96 	bl	8001a8a <_out_rev>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	e1df      	b.n	8002322 <_ftoa+0x49a>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8001f62:	a37d      	add	r3, pc, #500	; (adr r3, 8002158 <_ftoa+0x2d0>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f6c:	f7fe fd9c 	bl	8000aa8 <__aeabi_dcmpgt>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d109      	bne.n	8001f8a <_ftoa+0x102>
 8001f76:	a37a      	add	r3, pc, #488	; (adr r3, 8002160 <_ftoa+0x2d8>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f80:	f7fe fd74 	bl	8000a6c <__aeabi_dcmplt>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00f      	beq.n	8001faa <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8001f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	ed97 0b00 	vldr	d0, [r7]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	6939      	ldr	r1, [r7, #16]
 8001fa0:	6978      	ldr	r0, [r7, #20]
 8001fa2:	f000 f9c9 	bl	8002338 <_etoa>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	e1bb      	b.n	8002322 <_ftoa+0x49a>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fbc:	f7fe fd56 	bl	8000a6c <__aeabi_dcmplt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00e      	beq.n	8001fe4 <_ftoa+0x15c>
    negative = true;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8001fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001fd0:	f04f 0000 	mov.w	r0, #0
 8001fd4:	f04f 0100 	mov.w	r1, #0
 8001fd8:	f7fe f91e 	bl	8000218 <__aeabi_dsub>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8001fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10d      	bne.n	800200a <_ftoa+0x182>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8001fee:	2306      	movs	r3, #6
 8001ff0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8001ff2:	e00a      	b.n	800200a <_ftoa+0x182>
    buf[len++] = '0';
 8001ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001ffa:	3360      	adds	r3, #96	; 0x60
 8001ffc:	443b      	add	r3, r7
 8001ffe:	2230      	movs	r2, #48	; 0x30
 8002000:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8002004:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002006:	3b01      	subs	r3, #1
 8002008:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800200a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200c:	2b1f      	cmp	r3, #31
 800200e:	d802      	bhi.n	8002016 <_ftoa+0x18e>
 8002010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002012:	2b09      	cmp	r3, #9
 8002014:	d8ee      	bhi.n	8001ff4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8002016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800201a:	f7fe fd4f 	bl	8000abc <__aeabi_d2iz>
 800201e:	4603      	mov	r3, r0
 8002020:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8002022:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002024:	f7fe fa46 	bl	80004b4 <__aeabi_i2d>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002030:	f7fe f8f2 	bl	8000218 <__aeabi_dsub>
 8002034:	4602      	mov	r2, r0
 8002036:	460b      	mov	r3, r1
 8002038:	4610      	mov	r0, r2
 800203a:	4619      	mov	r1, r3
 800203c:	4a4f      	ldr	r2, [pc, #316]	; (800217c <_ftoa+0x2f4>)
 800203e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002048:	f7fe fa9e 	bl	8000588 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8002054:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002058:	f7fe fd58 	bl	8000b0c <__aeabi_d2uiz>
 800205c:	4603      	mov	r3, r0
 800205e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8002060:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002062:	f7fe fa17 	bl	8000494 <__aeabi_ui2d>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800206e:	f7fe f8d3 	bl	8000218 <__aeabi_dsub>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	4b40      	ldr	r3, [pc, #256]	; (8002180 <_ftoa+0x2f8>)
 8002080:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002084:	f7fe fd10 	bl	8000aa8 <__aeabi_dcmpgt>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <_ftoa+0x234>
    ++frac;
 800208e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002090:	3301      	adds	r3, #1
 8002092:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8002094:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002096:	f7fe f9fd 	bl	8000494 <__aeabi_ui2d>
 800209a:	4a38      	ldr	r2, [pc, #224]	; (800217c <_ftoa+0x2f4>)
 800209c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	4413      	add	r3, r2
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe fcf5 	bl	8000a94 <__aeabi_dcmpge>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d01a      	beq.n	80020e6 <_ftoa+0x25e>
      frac = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80020b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020b6:	3301      	adds	r3, #1
 80020b8:	657b      	str	r3, [r7, #84]	; 0x54
 80020ba:	e014      	b.n	80020e6 <_ftoa+0x25e>
    }
  }
  else if (diff < 0.5) {
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <_ftoa+0x2f8>)
 80020c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80020c6:	f7fe fcd1 	bl	8000a6c <__aeabi_dcmplt>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10a      	bne.n	80020e6 <_ftoa+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80020d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <_ftoa+0x258>
 80020d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <_ftoa+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80020e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020e2:	3301      	adds	r3, #1
 80020e4:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80020e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d14b      	bne.n	8002184 <_ftoa+0x2fc>
    diff = value - (double)whole;
 80020ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80020ee:	f7fe f9e1 	bl	80004b4 <__aeabi_i2d>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020fa:	f7fe f88d 	bl	8000218 <__aeabi_dsub>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8002106:	2301      	movs	r3, #1
 8002108:	461c      	mov	r4, r3
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <_ftoa+0x2f8>)
 8002110:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002114:	f7fe fcaa 	bl	8000a6c <__aeabi_dcmplt>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <_ftoa+0x29a>
 800211e:	2300      	movs	r3, #0
 8002120:	461c      	mov	r4, r3
 8002122:	b2e3      	uxtb	r3, r4
 8002124:	f083 0301 	eor.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d109      	bne.n	8002142 <_ftoa+0x2ba>
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <_ftoa+0x2f8>)
 8002134:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002138:	f7fe fcb6 	bl	8000aa8 <__aeabi_dcmpgt>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d064      	beq.n	800220c <_ftoa+0x384>
 8002142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8081 	beq.w	8002250 <_ftoa+0x3c8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800214e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002150:	3301      	adds	r3, #1
 8002152:	657b      	str	r3, [r7, #84]	; 0x54
 8002154:	e07c      	b.n	8002250 <_ftoa+0x3c8>
 8002156:	bf00      	nop
 8002158:	00000000 	.word	0x00000000
 800215c:	41cdcd65 	.word	0x41cdcd65
 8002160:	00000000 	.word	0x00000000
 8002164:	c1cdcd65 	.word	0xc1cdcd65
 8002168:	08009dbc 	.word	0x08009dbc
 800216c:	08009dc0 	.word	0x08009dc0
 8002170:	7fefffff 	.word	0x7fefffff
 8002174:	08009dc8 	.word	0x08009dc8
 8002178:	08009dd0 	.word	0x08009dd0
 800217c:	0800a028 	.word	0x0800a028
 8002180:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8002184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002186:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002188:	e01f      	b.n	80021ca <_ftoa+0x342>
      --count;
 800218a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800218c:	3b01      	subs	r3, #1
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8002190:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002192:	4b66      	ldr	r3, [pc, #408]	; (800232c <_ftoa+0x4a4>)
 8002194:	fba3 2301 	umull	r2, r3, r3, r1
 8002198:	08da      	lsrs	r2, r3, #3
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	1aca      	subs	r2, r1, r3
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a8:	1c59      	adds	r1, r3, #1
 80021aa:	65f9      	str	r1, [r7, #92]	; 0x5c
 80021ac:	3230      	adds	r2, #48	; 0x30
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	3360      	adds	r3, #96	; 0x60
 80021b2:	443b      	add	r3, r7
 80021b4:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80021b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021ba:	4a5c      	ldr	r2, [pc, #368]	; (800232c <_ftoa+0x4a4>)
 80021bc:	fba2 2303 	umull	r2, r3, r2, r3
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	653b      	str	r3, [r7, #80]	; 0x50
 80021c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <_ftoa+0x34a>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80021ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021cc:	2b1f      	cmp	r3, #31
 80021ce:	d9dc      	bls.n	800218a <_ftoa+0x302>
 80021d0:	e009      	b.n	80021e6 <_ftoa+0x35e>
        break;
 80021d2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80021d4:	e007      	b.n	80021e6 <_ftoa+0x35e>
      buf[len++] = '0';
 80021d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d8:	1c5a      	adds	r2, r3, #1
 80021da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021dc:	3360      	adds	r3, #96	; 0x60
 80021de:	443b      	add	r3, r7
 80021e0:	2230      	movs	r2, #48	; 0x30
 80021e2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80021e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e8:	2b1f      	cmp	r3, #31
 80021ea:	d804      	bhi.n	80021f6 <_ftoa+0x36e>
 80021ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021ee:	1e5a      	subs	r2, r3, #1
 80021f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1ef      	bne.n	80021d6 <_ftoa+0x34e>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80021f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021f8:	2b1f      	cmp	r3, #31
 80021fa:	d829      	bhi.n	8002250 <_ftoa+0x3c8>
      // add decimal
      buf[len++] = '.';
 80021fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fe:	1c5a      	adds	r2, r3, #1
 8002200:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002202:	3360      	adds	r3, #96	; 0x60
 8002204:	443b      	add	r3, r7
 8002206:	222e      	movs	r2, #46	; 0x2e
 8002208:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800220c:	e020      	b.n	8002250 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 800220e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002210:	4b47      	ldr	r3, [pc, #284]	; (8002330 <_ftoa+0x4a8>)
 8002212:	fb83 1302 	smull	r1, r3, r3, r2
 8002216:	1099      	asrs	r1, r3, #2
 8002218:	17d3      	asrs	r3, r2, #31
 800221a:	1ac9      	subs	r1, r1, r3
 800221c:	460b      	mov	r3, r1
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	1ad1      	subs	r1, r2, r3
 8002226:	b2ca      	uxtb	r2, r1
 8002228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800222a:	1c59      	adds	r1, r3, #1
 800222c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800222e:	3230      	adds	r2, #48	; 0x30
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	443b      	add	r3, r7
 8002236:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800223a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800223c:	4a3c      	ldr	r2, [pc, #240]	; (8002330 <_ftoa+0x4a8>)
 800223e:	fb82 1203 	smull	r1, r2, r2, r3
 8002242:	1092      	asrs	r2, r2, #2
 8002244:	17db      	asrs	r3, r3, #31
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	657b      	str	r3, [r7, #84]	; 0x54
 800224a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <_ftoa+0x3d0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002252:	2b1f      	cmp	r3, #31
 8002254:	d9db      	bls.n	800220e <_ftoa+0x386>
 8002256:	e000      	b.n	800225a <_ftoa+0x3d2>
      break;
 8002258:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800225a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d123      	bne.n	80022ac <_ftoa+0x424>
 8002264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01e      	beq.n	80022ac <_ftoa+0x424>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800226e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002270:	2b00      	cmp	r3, #0
 8002272:	d014      	beq.n	800229e <_ftoa+0x416>
 8002274:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <_ftoa+0x3fe>
 800227c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00b      	beq.n	800229e <_ftoa+0x416>
      width--;
 8002286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002288:	3b01      	subs	r3, #1
 800228a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800228c:	e007      	b.n	800229e <_ftoa+0x416>
      buf[len++] = '0';
 800228e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002294:	3360      	adds	r3, #96	; 0x60
 8002296:	443b      	add	r3, r7
 8002298:	2230      	movs	r2, #48	; 0x30
 800229a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800229e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80022a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d202      	bcs.n	80022ac <_ftoa+0x424>
 80022a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a8:	2b1f      	cmp	r3, #31
 80022aa:	d9f0      	bls.n	800228e <_ftoa+0x406>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80022ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ae:	2b1f      	cmp	r3, #31
 80022b0:	d827      	bhi.n	8002302 <_ftoa+0x47a>
    if (negative) {
 80022b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <_ftoa+0x444>
      buf[len++] = '-';
 80022ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022c0:	3360      	adds	r3, #96	; 0x60
 80022c2:	443b      	add	r3, r7
 80022c4:	222d      	movs	r2, #45	; 0x2d
 80022c6:	f803 2c48 	strb.w	r2, [r3, #-72]
 80022ca:	e01a      	b.n	8002302 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_PLUS) {
 80022cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d008      	beq.n	80022e8 <_ftoa+0x460>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80022d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022dc:	3360      	adds	r3, #96	; 0x60
 80022de:	443b      	add	r3, r7
 80022e0:	222b      	movs	r2, #43	; 0x2b
 80022e2:	f803 2c48 	strb.w	r2, [r3, #-72]
 80022e6:	e00c      	b.n	8002302 <_ftoa+0x47a>
    }
    else if (flags & FLAGS_SPACE) {
 80022e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <_ftoa+0x47a>
      buf[len++] = ' ';
 80022f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022f8:	3360      	adds	r3, #96	; 0x60
 80022fa:	443b      	add	r3, r7
 80022fc:	2220      	movs	r2, #32
 80022fe:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002304:	9303      	str	r3, [sp, #12]
 8002306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002308:	9302      	str	r3, [sp, #8]
 800230a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	f107 0318 	add.w	r3, r7, #24
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	6939      	ldr	r1, [r7, #16]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff fbb5 	bl	8001a8a <_out_rev>
 8002320:	4603      	mov	r3, r0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3764      	adds	r7, #100	; 0x64
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}
 800232a:	bf00      	nop
 800232c:	cccccccd 	.word	0xcccccccd
 8002330:	66666667 	.word	0x66666667
 8002334:	00000000 	.word	0x00000000

08002338 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800233c:	b09f      	sub	sp, #124	; 0x7c
 800233e:	af06      	add	r7, sp, #24
 8002340:	6278      	str	r0, [r7, #36]	; 0x24
 8002342:	6239      	str	r1, [r7, #32]
 8002344:	61fa      	str	r2, [r7, #28]
 8002346:	61bb      	str	r3, [r7, #24]
 8002348:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800234c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002350:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002354:	f7fe fb80 	bl	8000a58 <__aeabi_dcmpeq>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d014      	beq.n	8002388 <_etoa+0x50>
 800235e:	f04f 32ff 	mov.w	r2, #4294967295
 8002362:	4bc1      	ldr	r3, [pc, #772]	; (8002668 <_etoa+0x330>)
 8002364:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002368:	f7fe fb9e 	bl	8000aa8 <__aeabi_dcmpgt>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10a      	bne.n	8002388 <_etoa+0x50>
 8002372:	f04f 32ff 	mov.w	r2, #4294967295
 8002376:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800237a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800237e:	f7fe fb75 	bl	8000a6c <__aeabi_dcmplt>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d012      	beq.n	80023ae <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800238c:	9302      	str	r3, [sp, #8]
 800238e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	ed97 0b04 	vldr	d0, [r7, #16]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	6a39      	ldr	r1, [r7, #32]
 80023a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023a6:	f7ff fd6f 	bl	8001e88 <_ftoa>
 80023aa:	4603      	mov	r3, r0
 80023ac:	e23f      	b.n	800282e <_etoa+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 80023ae:	2301      	movs	r3, #1
 80023b0:	461e      	mov	r6, r3
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023be:	f7fe fb55 	bl	8000a6c <__aeabi_dcmplt>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <_etoa+0x94>
 80023c8:	2300      	movs	r3, #0
 80023ca:	461e      	mov	r6, r3
 80023cc:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 80023d0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d009      	beq.n	80023ec <_etoa+0xb4>
    value = -value;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	ed97 7b00 	vldr	d7, [r7]
 80023e8:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80023ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_etoa+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80023f8:	2306      	movs	r3, #6
 80023fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80023fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002402:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8002406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	0d0a      	lsrs	r2, r1, #20
 8002414:	2300      	movs	r3, #0
 8002416:	4613      	mov	r3, r2
 8002418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800241c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002420:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8002422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002426:	4690      	mov	r8, r2
 8002428:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800242c:	4644      	mov	r4, r8
 800242e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8002432:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002436:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800243a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800243c:	f7fe f83a 	bl	80004b4 <__aeabi_i2d>
 8002440:	a37d      	add	r3, pc, #500	; (adr r3, 8002638 <_etoa+0x300>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe f89f 	bl	8000588 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	a37b      	add	r3, pc, #492	; (adr r3, 8002640 <_etoa+0x308>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fd fee0 	bl	800021c <__adddf3>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4614      	mov	r4, r2
 8002462:	461d      	mov	r5, r3
 8002464:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	4b7f      	ldr	r3, [pc, #508]	; (800266c <_etoa+0x334>)
 800246e:	f7fd fed3 	bl	8000218 <__aeabi_dsub>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	a373      	add	r3, pc, #460	; (adr r3, 8002648 <_etoa+0x310>)
 800247c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002480:	f7fe f882 	bl	8000588 <__aeabi_dmul>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4620      	mov	r0, r4
 800248a:	4629      	mov	r1, r5
 800248c:	f7fd fec6 	bl	800021c <__adddf3>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe fb10 	bl	8000abc <__aeabi_d2iz>
 800249c:	4603      	mov	r3, r0
 800249e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80024a0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80024a2:	f7fe f807 	bl	80004b4 <__aeabi_i2d>
 80024a6:	a36a      	add	r3, pc, #424	; (adr r3, 8002650 <_etoa+0x318>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f86c 	bl	8000588 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <_etoa+0x338>)
 80024be:	f7fd fead 	bl	800021c <__adddf3>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	f7fe faf7 	bl	8000abc <__aeabi_d2iz>
 80024ce:	4603      	mov	r3, r0
 80024d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80024d2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80024d4:	f7fd ffee 	bl	80004b4 <__aeabi_i2d>
 80024d8:	a35f      	add	r3, pc, #380	; (adr r3, 8002658 <_etoa+0x320>)
 80024da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024de:	f7fe f853 	bl	8000588 <__aeabi_dmul>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	4614      	mov	r4, r2
 80024e8:	461d      	mov	r5, r3
 80024ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80024ec:	f7fd ffe2 	bl	80004b4 <__aeabi_i2d>
 80024f0:	a35b      	add	r3, pc, #364	; (adr r3, 8002660 <_etoa+0x328>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f847 	bl	8000588 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fd fe89 	bl	8000218 <__aeabi_dsub>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800250e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002512:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002516:	f7fe f837 	bl	8000588 <__aeabi_dmul>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8002522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002524:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002528:	17da      	asrs	r2, r3, #31
 800252a:	469a      	mov	sl, r3
 800252c:	4693      	mov	fp, r2
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800253a:	2200      	movs	r2, #0
 800253c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002540:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002544:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	f7fd fe66 	bl	800021c <__adddf3>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4690      	mov	r8, r2
 8002556:	4699      	mov	r9, r3
 8002558:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800255c:	f04f 0000 	mov.w	r0, #0
 8002560:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002564:	f7fd fe58 	bl	8000218 <__aeabi_dsub>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4692      	mov	sl, r2
 800256e:	469b      	mov	fp, r3
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	4b3f      	ldr	r3, [pc, #252]	; (8002674 <_etoa+0x33c>)
 8002576:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800257a:	f7fe f92f 	bl	80007dc <__aeabi_ddiv>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <_etoa+0x340>)
 800258c:	f7fd fe46 	bl	800021c <__adddf3>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002598:	f7fe f920 	bl	80007dc <__aeabi_ddiv>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	4b34      	ldr	r3, [pc, #208]	; (800267c <_etoa+0x344>)
 80025aa:	f7fd fe37 	bl	800021c <__adddf3>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80025b6:	f7fe f911 	bl	80007dc <__aeabi_ddiv>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
 80025be:	4650      	mov	r0, sl
 80025c0:	4659      	mov	r1, fp
 80025c2:	f7fd fe2b 	bl	800021c <__adddf3>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4640      	mov	r0, r8
 80025cc:	4649      	mov	r1, r9
 80025ce:	f7fe f905 	bl	80007dc <__aeabi_ddiv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	4b28      	ldr	r3, [pc, #160]	; (8002680 <_etoa+0x348>)
 80025e0:	f7fd fe1c 	bl	800021c <__adddf3>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4620      	mov	r0, r4
 80025ea:	4629      	mov	r1, r5
 80025ec:	f7fd ffcc 	bl	8000588 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 80025f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002600:	f7fe fa34 	bl	8000a6c <__aeabi_dcmplt>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00d      	beq.n	8002626 <_etoa+0x2ee>
    expval--;
 800260a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800260c:	3b01      	subs	r3, #1
 800260e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8002610:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	4b17      	ldr	r3, [pc, #92]	; (8002678 <_etoa+0x340>)
 800261a:	f7fe f8df 	bl	80007dc <__aeabi_ddiv>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8002626:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002628:	2b63      	cmp	r3, #99	; 0x63
 800262a:	dc2b      	bgt.n	8002684 <_etoa+0x34c>
 800262c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800262e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8002632:	db27      	blt.n	8002684 <_etoa+0x34c>
 8002634:	2304      	movs	r3, #4
 8002636:	e026      	b.n	8002686 <_etoa+0x34e>
 8002638:	509f79fb 	.word	0x509f79fb
 800263c:	3fd34413 	.word	0x3fd34413
 8002640:	8b60c8b3 	.word	0x8b60c8b3
 8002644:	3fc68a28 	.word	0x3fc68a28
 8002648:	636f4361 	.word	0x636f4361
 800264c:	3fd287a7 	.word	0x3fd287a7
 8002650:	0979a371 	.word	0x0979a371
 8002654:	400a934f 	.word	0x400a934f
 8002658:	bbb55516 	.word	0xbbb55516
 800265c:	40026bb1 	.word	0x40026bb1
 8002660:	fefa39ef 	.word	0xfefa39ef
 8002664:	3fe62e42 	.word	0x3fe62e42
 8002668:	7fefffff 	.word	0x7fefffff
 800266c:	3ff80000 	.word	0x3ff80000
 8002670:	3fe00000 	.word	0x3fe00000
 8002674:	402c0000 	.word	0x402c0000
 8002678:	40240000 	.word	0x40240000
 800267c:	40180000 	.word	0x40180000
 8002680:	3ff00000 	.word	0x3ff00000
 8002684:	2305      	movs	r3, #5
 8002686:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8002688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800268c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002690:	2b00      	cmp	r3, #0
 8002692:	d03d      	beq.n	8002710 <_etoa+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8002694:	a368      	add	r3, pc, #416	; (adr r3, 8002838 <_etoa+0x500>)
 8002696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800269e:	f7fe f9f9 	bl	8000a94 <__aeabi_dcmpge>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d024      	beq.n	80026f2 <_etoa+0x3ba>
 80026a8:	a365      	add	r3, pc, #404	; (adr r3, 8002840 <_etoa+0x508>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80026b2:	f7fe f9db 	bl	8000a6c <__aeabi_dcmplt>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01a      	beq.n	80026f2 <_etoa+0x3ba>
      if ((int)prec > expval) {
 80026bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80026c2:	429a      	cmp	r2, r3
 80026c4:	da07      	bge.n	80026d6 <_etoa+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80026c6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80026ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026d4:	e002      	b.n	80026dc <_etoa+0x3a4>
      }
      else {
        prec = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80026dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f0:	e00e      	b.n	8002710 <_etoa+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80026f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <_etoa+0x3d8>
 80026fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <_etoa+0x3d8>
        --prec;
 8002706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800270a:	3b01      	subs	r3, #1
 800270c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8002710:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002714:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8002716:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800271a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800271c:	429a      	cmp	r2, r3
 800271e:	d904      	bls.n	800272a <_etoa+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8002720:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	657b      	str	r3, [r7, #84]	; 0x54
 8002728:	e001      	b.n	800272e <_etoa+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800272e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <_etoa+0x40c>
 800273a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <_etoa+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 8002744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d009      	beq.n	800275e <_etoa+0x426>
    value /= conv.F;
 800274a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800274e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002752:	f7fe f843 	bl	80007dc <__aeabi_ddiv>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8002762:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <_etoa+0x440>
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	e003      	b.n	8002780 <_etoa+0x448>
 8002778:	ed97 7b04 	vldr	d7, [r7, #16]
 800277c:	ed87 7b02 	vstr	d7, [r7, #8]
 8002780:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002788:	9302      	str	r3, [sp, #8]
 800278a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	ed97 0b02 	vldr	d0, [r7, #8]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	6a39      	ldr	r1, [r7, #32]
 800279e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027a0:	f7ff fb72 	bl	8001e88 <_ftoa>
 80027a4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80027a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d03f      	beq.n	800282c <_etoa+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80027ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <_etoa+0x484>
 80027b8:	2045      	movs	r0, #69	; 0x45
 80027ba:	e000      	b.n	80027be <_etoa+0x486>
 80027bc:	2065      	movs	r0, #101	; 0x65
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	1c53      	adds	r3, r2, #1
 80027c2:	61fb      	str	r3, [r7, #28]
 80027c4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80027cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bfb8      	it	lt
 80027d2:	425b      	neglt	r3, r3
 80027d4:	4618      	mov	r0, r3
 80027d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027d8:	0fdb      	lsrs	r3, r3, #31
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027de:	3a01      	subs	r2, #1
 80027e0:	2105      	movs	r1, #5
 80027e2:	9105      	str	r1, [sp, #20]
 80027e4:	9204      	str	r2, [sp, #16]
 80027e6:	2200      	movs	r2, #0
 80027e8:	9203      	str	r2, [sp, #12]
 80027ea:	220a      	movs	r2, #10
 80027ec:	9202      	str	r2, [sp, #8]
 80027ee:	9301      	str	r3, [sp, #4]
 80027f0:	9000      	str	r0, [sp, #0]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	6a39      	ldr	r1, [r7, #32]
 80027f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027fa:	f7ff fa72 	bl	8001ce2 <_ntoa_long>
 80027fe:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8002800:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00f      	beq.n	800282c <_etoa+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800280c:	e007      	b.n	800281e <_etoa+0x4e6>
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	1c53      	adds	r3, r2, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	6a39      	ldr	r1, [r7, #32]
 800281a:	2020      	movs	r0, #32
 800281c:	47a0      	blx	r4
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002828:	429a      	cmp	r2, r3
 800282a:	d8f0      	bhi.n	800280e <_etoa+0x4d6>
    }
  }
  return idx;
 800282c:	69fb      	ldr	r3, [r7, #28]
}
 800282e:	4618      	mov	r0, r3
 8002830:	3764      	adds	r7, #100	; 0x64
 8002832:	46bd      	mov	sp, r7
 8002834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002838:	eb1c432d 	.word	0xeb1c432d
 800283c:	3f1a36e2 	.word	0x3f1a36e2
 8002840:	00000000 	.word	0x00000000
 8002844:	412e8480 	.word	0x412e8480

08002848 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800284c:	b0a3      	sub	sp, #140	; 0x8c
 800284e:	af0a      	add	r7, sp, #40	; 0x28
 8002850:	6178      	str	r0, [r7, #20]
 8002852:	6139      	str	r1, [r7, #16]
 8002854:	60fa      	str	r2, [r7, #12]
 8002856:	60bb      	str	r3, [r7, #8]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!buffer) {
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 84cf 	bne.w	8003202 <_vsnprintf+0x9ba>
    // use null output function
    out = _out_null;
 8002864:	4ba8      	ldr	r3, [pc, #672]	; (8002b08 <_vsnprintf+0x2c0>)
 8002866:	617b      	str	r3, [r7, #20]
  }

  while (*format)
 8002868:	f000 bccb 	b.w	8003202 <_vsnprintf+0x9ba>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b25      	cmp	r3, #37	; 0x25
 8002872:	d00d      	beq.n	8002890 <_vsnprintf+0x48>
      // no
      out(*format, buffer, idx++, maxlen);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	7818      	ldrb	r0, [r3, #0]
 8002878:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800287a:	1c53      	adds	r3, r2, #1
 800287c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800287e:	697c      	ldr	r4, [r7, #20]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6939      	ldr	r1, [r7, #16]
 8002884:	47a0      	blx	r4
      format++;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3301      	adds	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
      continue;
 800288c:	f000 bcb9 	b.w	8003202 <_vsnprintf+0x9ba>
    }
    else {
      // yes, evaluate it
      format++;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	3301      	adds	r3, #1
 8002894:	60bb      	str	r3, [r7, #8]
    }

    // evaluate flags
    flags = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	65fb      	str	r3, [r7, #92]	; 0x5c
    do {
      switch (*format) {
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	3b20      	subs	r3, #32
 80028a0:	2b10      	cmp	r3, #16
 80028a2:	d857      	bhi.n	8002954 <_vsnprintf+0x10c>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <_vsnprintf+0x64>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	0800292d 	.word	0x0800292d
 80028b0:	08002955 	.word	0x08002955
 80028b4:	08002955 	.word	0x08002955
 80028b8:	08002941 	.word	0x08002941
 80028bc:	08002955 	.word	0x08002955
 80028c0:	08002955 	.word	0x08002955
 80028c4:	08002955 	.word	0x08002955
 80028c8:	08002955 	.word	0x08002955
 80028cc:	08002955 	.word	0x08002955
 80028d0:	08002955 	.word	0x08002955
 80028d4:	08002955 	.word	0x08002955
 80028d8:	08002919 	.word	0x08002919
 80028dc:	08002955 	.word	0x08002955
 80028e0:	08002905 	.word	0x08002905
 80028e4:	08002955 	.word	0x08002955
 80028e8:	08002955 	.word	0x08002955
 80028ec:	080028f1 	.word	0x080028f1
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80028f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	3301      	adds	r3, #1
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	2301      	movs	r3, #1
 8002900:	653b      	str	r3, [r7, #80]	; 0x50
 8002902:	e02a      	b.n	800295a <_vsnprintf+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002906:	f043 0302 	orr.w	r3, r3, #2
 800290a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	3301      	adds	r3, #1
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	2301      	movs	r3, #1
 8002914:	653b      	str	r3, [r7, #80]	; 0x50
 8002916:	e020      	b.n	800295a <_vsnprintf+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002918:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3301      	adds	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	2301      	movs	r3, #1
 8002928:	653b      	str	r3, [r7, #80]	; 0x50
 800292a:	e016      	b.n	800295a <_vsnprintf+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800292c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	3301      	adds	r3, #1
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	2301      	movs	r3, #1
 800293c:	653b      	str	r3, [r7, #80]	; 0x50
 800293e:	e00c      	b.n	800295a <_vsnprintf+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002940:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002942:	f043 0310 	orr.w	r3, r3, #16
 8002946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	3301      	adds	r3, #1
 800294c:	60bb      	str	r3, [r7, #8]
 800294e:	2301      	movs	r3, #1
 8002950:	653b      	str	r3, [r7, #80]	; 0x50
 8002952:	e002      	b.n	800295a <_vsnprintf+0x112>
        default :                                   n = 0U; break;
 8002954:	2300      	movs	r3, #0
 8002956:	653b      	str	r3, [r7, #80]	; 0x50
 8002958:	bf00      	nop
      }
    } while (n);
 800295a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800295c:	2b00      	cmp	r3, #0
 800295e:	d19c      	bne.n	800289a <_vsnprintf+0x52>

    // evaluate width field
    width = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	65bb      	str	r3, [r7, #88]	; 0x58
    if (_is_digit(*format)) {
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff f853 	bl	8001a14 <_is_digit>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <_vsnprintf+0x13a>
      width = _atoi(&format);
 8002974:	f107 0308 	add.w	r3, r7, #8
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff f862 	bl	8001a42 <_atoi>
 800297e:	65b8      	str	r0, [r7, #88]	; 0x58
 8002980:	e01a      	b.n	80029b8 <_vsnprintf+0x170>
    }
    else if (*format == '*') {
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b2a      	cmp	r3, #42	; 0x2a
 8002988:	d116      	bne.n	80029b8 <_vsnprintf+0x170>
      const int w = va_arg(va, int);
 800298a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800298e:	1d1a      	adds	r2, r3, #4
 8002990:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	63bb      	str	r3, [r7, #56]	; 0x38
      if (w < 0) {
 8002998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800299a:	2b00      	cmp	r3, #0
 800299c:	da07      	bge.n	80029ae <_vsnprintf+0x166>
        flags |= FLAGS_LEFT;    // reverse padding
 800299e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        width = (unsigned int)-w;
 80029a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029a8:	425b      	negs	r3, r3
 80029aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80029ac:	e001      	b.n	80029b2 <_vsnprintf+0x16a>
      }
      else {
        width = (unsigned int)w;
 80029ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b0:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      format++;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
    }

    // evaluate precision field
    precision = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	657b      	str	r3, [r7, #84]	; 0x54
    if (*format == '.') {
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b2e      	cmp	r3, #46	; 0x2e
 80029c2:	d127      	bne.n	8002a14 <_vsnprintf+0x1cc>
      flags |= FLAGS_PRECISION;
 80029c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ca:	65fb      	str	r3, [r7, #92]	; 0x5c
      format++;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	3301      	adds	r3, #1
 80029d0:	60bb      	str	r3, [r7, #8]
      if (_is_digit(*format)) {
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff f81c 	bl	8001a14 <_is_digit>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d006      	beq.n	80029f0 <_vsnprintf+0x1a8>
        precision = _atoi(&format);
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff f82b 	bl	8001a42 <_atoi>
 80029ec:	6578      	str	r0, [r7, #84]	; 0x54
 80029ee:	e011      	b.n	8002a14 <_vsnprintf+0x1cc>
      }
      else if (*format == '*') {
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b2a      	cmp	r3, #42	; 0x2a
 80029f6:	d10d      	bne.n	8002a14 <_vsnprintf+0x1cc>
        const int prec = (int)va_arg(va, int);
 80029f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029fc:	1d1a      	adds	r2, r3, #4
 80029fe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	637b      	str	r3, [r7, #52]	; 0x34
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8002a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002a0c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	3301      	adds	r3, #1
 8002a12:	60bb      	str	r3, [r7, #8]
      }
    }

    // evaluate length field
    switch (*format) {
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	3b68      	subs	r3, #104	; 0x68
 8002a1a:	2b12      	cmp	r3, #18
 8002a1c:	d866      	bhi.n	8002aec <_vsnprintf+0x2a4>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <_vsnprintf+0x1dc>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a97 	.word	0x08002a97
 8002a28:	08002aed 	.word	0x08002aed
 8002a2c:	08002acd 	.word	0x08002acd
 8002a30:	08002aed 	.word	0x08002aed
 8002a34:	08002a71 	.word	0x08002a71
 8002a38:	08002aed 	.word	0x08002aed
 8002a3c:	08002aed 	.word	0x08002aed
 8002a40:	08002aed 	.word	0x08002aed
 8002a44:	08002aed 	.word	0x08002aed
 8002a48:	08002aed 	.word	0x08002aed
 8002a4c:	08002aed 	.word	0x08002aed
 8002a50:	08002aed 	.word	0x08002aed
 8002a54:	08002abd 	.word	0x08002abd
 8002a58:	08002aed 	.word	0x08002aed
 8002a5c:	08002aed 	.word	0x08002aed
 8002a60:	08002aed 	.word	0x08002aed
 8002a64:	08002aed 	.word	0x08002aed
 8002a68:	08002aed 	.word	0x08002aed
 8002a6c:	08002add 	.word	0x08002add
      case 'l' :
        flags |= FLAGS_LONG;
 8002a70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a76:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
        if (*format == 'l') {
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b6c      	cmp	r3, #108	; 0x6c
 8002a84:	d134      	bne.n	8002af0 <_vsnprintf+0x2a8>
          flags |= FLAGS_LONG_LONG;
 8002a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3301      	adds	r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002a94:	e02c      	b.n	8002af0 <_vsnprintf+0x2a8>
      case 'h' :
        flags |= FLAGS_SHORT;
 8002a96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
        if (*format == 'h') {
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b68      	cmp	r3, #104	; 0x68
 8002aaa:	d123      	bne.n	8002af4 <_vsnprintf+0x2ac>
          flags |= FLAGS_CHAR;
 8002aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002aae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ab2:	65fb      	str	r3, [r7, #92]	; 0x5c
          format++;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	60bb      	str	r3, [r7, #8]
        }
        break;
 8002aba:	e01b      	b.n	8002af4 <_vsnprintf+0x2ac>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	60bb      	str	r3, [r7, #8]
        break;
 8002aca:	e014      	b.n	8002af6 <_vsnprintf+0x2ae>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ace:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60bb      	str	r3, [r7, #8]
        break;
 8002ada:	e00c      	b.n	8002af6 <_vsnprintf+0x2ae>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ae2:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	60bb      	str	r3, [r7, #8]
        break;
 8002aea:	e004      	b.n	8002af6 <_vsnprintf+0x2ae>
      default :
        break;
 8002aec:	bf00      	nop
 8002aee:	e002      	b.n	8002af6 <_vsnprintf+0x2ae>
        break;
 8002af0:	bf00      	nop
 8002af2:	e000      	b.n	8002af6 <_vsnprintf+0x2ae>
        break;
 8002af4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b67      	cmp	r3, #103	; 0x67
 8002afc:	f300 80b8 	bgt.w	8002c70 <_vsnprintf+0x428>
 8002b00:	2b25      	cmp	r3, #37	; 0x25
 8002b02:	da27      	bge.n	8002b54 <_vsnprintf+0x30c>
 8002b04:	e370      	b.n	80031e8 <_vsnprintf+0x9a0>
 8002b06:	bf00      	nop
 8002b08:	08001999 	.word	0x08001999
 8002b0c:	3b69      	subs	r3, #105	; 0x69
 8002b0e:	2201      	movs	r2, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	f249 0241 	movw	r2, #36929	; 0x9041
 8002b18:	401a      	ands	r2, r3
 8002b1a:	2a00      	cmp	r2, #0
 8002b1c:	bf14      	ite	ne
 8002b1e:	2201      	movne	r2, #1
 8002b20:	2200      	moveq	r2, #0
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	2a00      	cmp	r2, #0
 8002b26:	f040 80aa 	bne.w	8002c7e <_vsnprintf+0x436>
 8002b2a:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002b2e:	2a00      	cmp	r2, #0
 8002b30:	bf14      	ite	ne
 8002b32:	2201      	movne	r2, #1
 8002b34:	2200      	moveq	r2, #0
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	2a00      	cmp	r2, #0
 8002b3a:	f040 82fb 	bne.w	8003134 <_vsnprintf+0x8ec>
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf14      	ite	ne
 8002b46:	2301      	movne	r3, #1
 8002b48:	2300      	moveq	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f040 828d 	bne.w	800306c <_vsnprintf+0x824>
 8002b52:	e349      	b.n	80031e8 <_vsnprintf+0x9a0>
 8002b54:	3b25      	subs	r3, #37	; 0x25
 8002b56:	2b42      	cmp	r3, #66	; 0x42
 8002b58:	f200 8346 	bhi.w	80031e8 <_vsnprintf+0x9a0>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <_vsnprintf+0x31c>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	080031d1 	.word	0x080031d1
 8002b68:	080031e9 	.word	0x080031e9
 8002b6c:	080031e9 	.word	0x080031e9
 8002b70:	080031e9 	.word	0x080031e9
 8002b74:	080031e9 	.word	0x080031e9
 8002b78:	080031e9 	.word	0x080031e9
 8002b7c:	080031e9 	.word	0x080031e9
 8002b80:	080031e9 	.word	0x080031e9
 8002b84:	080031e9 	.word	0x080031e9
 8002b88:	080031e9 	.word	0x080031e9
 8002b8c:	080031e9 	.word	0x080031e9
 8002b90:	080031e9 	.word	0x080031e9
 8002b94:	080031e9 	.word	0x080031e9
 8002b98:	080031e9 	.word	0x080031e9
 8002b9c:	080031e9 	.word	0x080031e9
 8002ba0:	080031e9 	.word	0x080031e9
 8002ba4:	080031e9 	.word	0x080031e9
 8002ba8:	080031e9 	.word	0x080031e9
 8002bac:	080031e9 	.word	0x080031e9
 8002bb0:	080031e9 	.word	0x080031e9
 8002bb4:	080031e9 	.word	0x080031e9
 8002bb8:	080031e9 	.word	0x080031e9
 8002bbc:	080031e9 	.word	0x080031e9
 8002bc0:	080031e9 	.word	0x080031e9
 8002bc4:	080031e9 	.word	0x080031e9
 8002bc8:	080031e9 	.word	0x080031e9
 8002bcc:	080031e9 	.word	0x080031e9
 8002bd0:	080031e9 	.word	0x080031e9
 8002bd4:	080031e9 	.word	0x080031e9
 8002bd8:	080031e9 	.word	0x080031e9
 8002bdc:	080031e9 	.word	0x080031e9
 8002be0:	080031e9 	.word	0x080031e9
 8002be4:	08002f85 	.word	0x08002f85
 8002be8:	08002f35 	.word	0x08002f35
 8002bec:	08002f85 	.word	0x08002f85
 8002bf0:	080031e9 	.word	0x080031e9
 8002bf4:	080031e9 	.word	0x080031e9
 8002bf8:	080031e9 	.word	0x080031e9
 8002bfc:	080031e9 	.word	0x080031e9
 8002c00:	080031e9 	.word	0x080031e9
 8002c04:	080031e9 	.word	0x080031e9
 8002c08:	080031e9 	.word	0x080031e9
 8002c0c:	080031e9 	.word	0x080031e9
 8002c10:	080031e9 	.word	0x080031e9
 8002c14:	080031e9 	.word	0x080031e9
 8002c18:	080031e9 	.word	0x080031e9
 8002c1c:	080031e9 	.word	0x080031e9
 8002c20:	080031e9 	.word	0x080031e9
 8002c24:	080031e9 	.word	0x080031e9
 8002c28:	080031e9 	.word	0x080031e9
 8002c2c:	080031e9 	.word	0x080031e9
 8002c30:	08002c7f 	.word	0x08002c7f
 8002c34:	080031e9 	.word	0x080031e9
 8002c38:	080031e9 	.word	0x080031e9
 8002c3c:	080031e9 	.word	0x080031e9
 8002c40:	080031e9 	.word	0x080031e9
 8002c44:	080031e9 	.word	0x080031e9
 8002c48:	080031e9 	.word	0x080031e9
 8002c4c:	080031e9 	.word	0x080031e9
 8002c50:	080031e9 	.word	0x080031e9
 8002c54:	080031e9 	.word	0x080031e9
 8002c58:	08002c7f 	.word	0x08002c7f
 8002c5c:	08002ff5 	.word	0x08002ff5
 8002c60:	08002c7f 	.word	0x08002c7f
 8002c64:	08002f85 	.word	0x08002f85
 8002c68:	08002f35 	.word	0x08002f35
 8002c6c:	08002f85 	.word	0x08002f85
 8002c70:	2b78      	cmp	r3, #120	; 0x78
 8002c72:	f300 82b9 	bgt.w	80031e8 <_vsnprintf+0x9a0>
 8002c76:	2b69      	cmp	r3, #105	; 0x69
 8002c78:	f6bf af48 	bge.w	8002b0c <_vsnprintf+0x2c4>
 8002c7c:	e2b4      	b.n	80031e8 <_vsnprintf+0x9a0>
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b78      	cmp	r3, #120	; 0x78
 8002c84:	d003      	beq.n	8002c8e <_vsnprintf+0x446>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b58      	cmp	r3, #88	; 0x58
 8002c8c:	d102      	bne.n	8002c94 <_vsnprintf+0x44c>
          base = 16U;
 8002c8e:	2310      	movs	r3, #16
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c92:	e013      	b.n	8002cbc <_vsnprintf+0x474>
        }
        else if (*format == 'o') {
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b6f      	cmp	r3, #111	; 0x6f
 8002c9a:	d102      	bne.n	8002ca2 <_vsnprintf+0x45a>
          base =  8U;
 8002c9c:	2308      	movs	r3, #8
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca0:	e00c      	b.n	8002cbc <_vsnprintf+0x474>
        }
        else if (*format == 'b') {
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b62      	cmp	r3, #98	; 0x62
 8002ca8:	d102      	bne.n	8002cb0 <_vsnprintf+0x468>
          base =  2U;
 8002caa:	2302      	movs	r3, #2
 8002cac:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cae:	e005      	b.n	8002cbc <_vsnprintf+0x474>
        }
        else {
          base = 10U;
 8002cb0:	230a      	movs	r3, #10
 8002cb2:	64bb      	str	r3, [r7, #72]	; 0x48
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb6:	f023 0310 	bic.w	r3, r3, #16
 8002cba:	65fb      	str	r3, [r7, #92]	; 0x5c
        }
        // uppercase
        if (*format == 'X') {
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b58      	cmp	r3, #88	; 0x58
 8002cc2:	d103      	bne.n	8002ccc <_vsnprintf+0x484>
          flags |= FLAGS_UPPERCASE;
 8002cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc6:	f043 0320 	orr.w	r3, r3, #32
 8002cca:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b69      	cmp	r3, #105	; 0x69
 8002cd2:	d007      	beq.n	8002ce4 <_vsnprintf+0x49c>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b64      	cmp	r3, #100	; 0x64
 8002cda:	d003      	beq.n	8002ce4 <_vsnprintf+0x49c>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8002cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cde:	f023 030c 	bic.w	r3, r3, #12
 8002ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8002ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <_vsnprintf+0x4ae>
          flags &= ~FLAGS_ZEROPAD;
 8002cee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf0:	f023 0301 	bic.w	r3, r3, #1
 8002cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b69      	cmp	r3, #105	; 0x69
 8002cfc:	d004      	beq.n	8002d08 <_vsnprintf+0x4c0>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b64      	cmp	r3, #100	; 0x64
 8002d04:	f040 8098 	bne.w	8002e38 <_vsnprintf+0x5f0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8002d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d031      	beq.n	8002d76 <_vsnprintf+0x52e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8002d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d16:	3307      	adds	r3, #7
 8002d18:	f023 0307 	bic.w	r3, r3, #7
 8002d1c:	f103 0208 	add.w	r2, r3, #8
 8002d20:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	e9c7 2306 	strd	r2, r3, [r7, #24]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	da06      	bge.n	8002d42 <_vsnprintf+0x4fa>
 8002d34:	2100      	movs	r1, #0
 8002d36:	f1d2 0800 	rsbs	r8, r2, #0
 8002d3a:	eb61 0903 	sbc.w	r9, r1, r3
 8002d3e:	4642      	mov	r2, r8
 8002d40:	464b      	mov	r3, r9
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	0fc9      	lsrs	r1, r1, #31
 8002d46:	b2c9      	uxtb	r1, r1
 8002d48:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002d4a:	2400      	movs	r4, #0
 8002d4c:	4682      	mov	sl, r0
 8002d4e:	46a3      	mov	fp, r4
 8002d50:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002d52:	9008      	str	r0, [sp, #32]
 8002d54:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002d56:	9007      	str	r0, [sp, #28]
 8002d58:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002d5a:	9006      	str	r0, [sp, #24]
 8002d5c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002d60:	9102      	str	r1, [sp, #8]
 8002d62:	e9cd 2300 	strd	r2, r3, [sp]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d6a:	6939      	ldr	r1, [r7, #16]
 8002d6c:	6978      	ldr	r0, [r7, #20]
 8002d6e:	f7ff f81e 	bl	8001dae <_ntoa_long_long>
 8002d72:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002d74:	e0da      	b.n	8002f2c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d020      	beq.n	8002dc2 <_vsnprintf+0x57a>
            const long value = va_arg(va, long);
 8002d80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d84:	1d1a      	adds	r2, r3, #4
 8002d86:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bfb8      	it	lt
 8002d94:	425b      	neglt	r3, r3
 8002d96:	4619      	mov	r1, r3
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	0fdb      	lsrs	r3, r3, #31
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002da0:	9205      	str	r2, [sp, #20]
 8002da2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002da4:	9204      	str	r2, [sp, #16]
 8002da6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002da8:	9203      	str	r2, [sp, #12]
 8002daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dac:	9202      	str	r2, [sp, #8]
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	9100      	str	r1, [sp, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002db6:	6939      	ldr	r1, [r7, #16]
 8002db8:	6978      	ldr	r0, [r7, #20]
 8002dba:	f7fe ff92 	bl	8001ce2 <_ntoa_long>
 8002dbe:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002dc0:	e0b4      	b.n	8002f2c <_vsnprintf+0x6e4>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <_vsnprintf+0x594>
 8002dcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dd0:	1d1a      	adds	r2, r3, #4
 8002dd2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	e012      	b.n	8002e02 <_vsnprintf+0x5ba>
 8002ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d007      	beq.n	8002df6 <_vsnprintf+0x5ae>
 8002de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dea:	1d1a      	adds	r2, r3, #4
 8002dec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	b21b      	sxth	r3, r3
 8002df4:	e005      	b.n	8002e02 <_vsnprintf+0x5ba>
 8002df6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dfa:	1d1a      	adds	r2, r3, #4
 8002dfc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bfb8      	it	lt
 8002e0a:	425b      	neglt	r3, r3
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	0fdb      	lsrs	r3, r3, #31
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e16:	9205      	str	r2, [sp, #20]
 8002e18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e1a:	9204      	str	r2, [sp, #16]
 8002e1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e1e:	9203      	str	r2, [sp, #12]
 8002e20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e22:	9202      	str	r2, [sp, #8]
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	9100      	str	r1, [sp, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e2c:	6939      	ldr	r1, [r7, #16]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7fe ff57 	bl	8001ce2 <_ntoa_long>
 8002e34:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (flags & FLAGS_LONG_LONG) {
 8002e36:	e079      	b.n	8002f2c <_vsnprintf+0x6e4>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8002e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d022      	beq.n	8002e88 <_vsnprintf+0x640>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8002e42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e46:	3307      	adds	r3, #7
 8002e48:	f023 0307 	bic.w	r3, r3, #7
 8002e4c:	f103 0208 	add.w	r2, r3, #8
 8002e50:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	460d      	mov	r5, r1
 8002e5e:	4606      	mov	r6, r0
 8002e60:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002e62:	9108      	str	r1, [sp, #32]
 8002e64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e66:	9107      	str	r1, [sp, #28]
 8002e68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e6a:	9106      	str	r1, [sp, #24]
 8002e6c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8002e70:	2100      	movs	r1, #0
 8002e72:	9102      	str	r1, [sp, #8]
 8002e74:	e9cd 2300 	strd	r2, r3, [sp]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e7c:	6939      	ldr	r1, [r7, #16]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7fe ff95 	bl	8001dae <_ntoa_long_long>
 8002e84:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002e86:	e051      	b.n	8002f2c <_vsnprintf+0x6e4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8002e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d018      	beq.n	8002ec4 <_vsnprintf+0x67c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8002e92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e96:	1d1a      	adds	r2, r3, #4
 8002e98:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ea0:	9205      	str	r2, [sp, #20]
 8002ea2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ea4:	9204      	str	r2, [sp, #16]
 8002ea6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002ea8:	9203      	str	r2, [sp, #12]
 8002eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eac:	9202      	str	r2, [sp, #8]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	9201      	str	r2, [sp, #4]
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eb8:	6939      	ldr	r1, [r7, #16]
 8002eba:	6978      	ldr	r0, [r7, #20]
 8002ebc:	f7fe ff11 	bl	8001ce2 <_ntoa_long>
 8002ec0:	64f8      	str	r0, [r7, #76]	; 0x4c
 8002ec2:	e033      	b.n	8002f2c <_vsnprintf+0x6e4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8002ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <_vsnprintf+0x696>
 8002ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ed2:	1d1a      	adds	r2, r3, #4
 8002ed4:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	e012      	b.n	8002f04 <_vsnprintf+0x6bc>
 8002ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <_vsnprintf+0x6b0>
 8002ee8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eec:	1d1a      	adds	r2, r3, #4
 8002eee:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	e005      	b.n	8002f04 <_vsnprintf+0x6bc>
 8002ef8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002efc:	1d1a      	adds	r2, r3, #4
 8002efe:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8002f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f08:	9305      	str	r3, [sp, #20]
 8002f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f0c:	9304      	str	r3, [sp, #16]
 8002f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f10:	9303      	str	r3, [sp, #12]
 8002f12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f14:	9302      	str	r3, [sp, #8]
 8002f16:	2300      	movs	r3, #0
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f22:	6939      	ldr	r1, [r7, #16]
 8002f24:	6978      	ldr	r0, [r7, #20]
 8002f26:	f7fe fedc 	bl	8001ce2 <_ntoa_long>
 8002f2a:	64f8      	str	r0, [r7, #76]	; 0x4c
          }
        }
        format++;
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	60bb      	str	r3, [r7, #8]
        break;
 8002f32:	e166      	b.n	8003202 <_vsnprintf+0x9ba>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b46      	cmp	r3, #70	; 0x46
 8002f3a:	d103      	bne.n	8002f44 <_vsnprintf+0x6fc>
 8002f3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3e:	f043 0320 	orr.w	r3, r3, #32
 8002f42:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002f44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f48:	3307      	adds	r3, #7
 8002f4a:	f023 0307 	bic.w	r3, r3, #7
 8002f4e:	f103 0208 	add.w	r2, r3, #8
 8002f52:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002f56:	ed93 7b00 	vldr	d7, [r3]
 8002f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f5c:	9302      	str	r3, [sp, #8]
 8002f5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	eeb0 0a47 	vmov.f32	s0, s14
 8002f6a:	eef0 0a67 	vmov.f32	s1, s15
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f72:	6939      	ldr	r1, [r7, #16]
 8002f74:	6978      	ldr	r0, [r7, #20]
 8002f76:	f7fe ff87 	bl	8001e88 <_ftoa>
 8002f7a:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	60bb      	str	r3, [r7, #8]
        break;
 8002f82:	e13e      	b.n	8003202 <_vsnprintf+0x9ba>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b67      	cmp	r3, #103	; 0x67
 8002f8a:	d003      	beq.n	8002f94 <_vsnprintf+0x74c>
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b47      	cmp	r3, #71	; 0x47
 8002f92:	d103      	bne.n	8002f9c <_vsnprintf+0x754>
 8002f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f9a:	65fb      	str	r3, [r7, #92]	; 0x5c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b45      	cmp	r3, #69	; 0x45
 8002fa2:	d003      	beq.n	8002fac <_vsnprintf+0x764>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b47      	cmp	r3, #71	; 0x47
 8002faa:	d103      	bne.n	8002fb4 <_vsnprintf+0x76c>
 8002fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fae:	f043 0320 	orr.w	r3, r3, #32
 8002fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8002fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fb8:	3307      	adds	r3, #7
 8002fba:	f023 0307 	bic.w	r3, r3, #7
 8002fbe:	f103 0208 	add.w	r2, r3, #8
 8002fc2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002fc6:	ed93 7b00 	vldr	d7, [r3]
 8002fca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fcc:	9302      	str	r3, [sp, #8]
 8002fce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	eeb0 0a47 	vmov.f32	s0, s14
 8002fda:	eef0 0a67 	vmov.f32	s1, s15
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fe2:	6939      	ldr	r1, [r7, #16]
 8002fe4:	6978      	ldr	r0, [r7, #20]
 8002fe6:	f7ff f9a7 	bl	8002338 <_etoa>
 8002fea:	64f8      	str	r0, [r7, #76]	; 0x4c
        format++;
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	60bb      	str	r3, [r7, #8]
        break;
 8002ff2:	e106      	b.n	8003202 <_vsnprintf+0x9ba>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	647b      	str	r3, [r7, #68]	; 0x44
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8002ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <_vsnprintf+0x7d8>
          while (l++ < width) {
 8003002:	e007      	b.n	8003014 <_vsnprintf+0x7cc>
            out(' ', buffer, idx++, maxlen);
 8003004:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003006:	1c53      	adds	r3, r2, #1
 8003008:	64fb      	str	r3, [r7, #76]	; 0x4c
 800300a:	697c      	ldr	r4, [r7, #20]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6939      	ldr	r1, [r7, #16]
 8003010:	2020      	movs	r0, #32
 8003012:	47a0      	blx	r4
          while (l++ < width) {
 8003014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	647a      	str	r2, [r7, #68]	; 0x44
 800301a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800301c:	429a      	cmp	r2, r3
 800301e:	d8f1      	bhi.n	8003004 <_vsnprintf+0x7bc>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003020:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003024:	1d1a      	adds	r2, r3, #4
 8003026:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	b2d8      	uxtb	r0, r3
 800302e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003030:	1c53      	adds	r3, r2, #1
 8003032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003034:	697c      	ldr	r4, [r7, #20]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6939      	ldr	r1, [r7, #16]
 800303a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800303c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00e      	beq.n	8003064 <_vsnprintf+0x81c>
          while (l++ < width) {
 8003046:	e007      	b.n	8003058 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8003048:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800304a:	1c53      	adds	r3, r2, #1
 800304c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800304e:	697c      	ldr	r4, [r7, #20]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6939      	ldr	r1, [r7, #16]
 8003054:	2020      	movs	r0, #32
 8003056:	47a0      	blx	r4
          while (l++ < width) {
 8003058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305a:	1c5a      	adds	r2, r3, #1
 800305c:	647a      	str	r2, [r7, #68]	; 0x44
 800305e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003060:	429a      	cmp	r2, r3
 8003062:	d8f1      	bhi.n	8003048 <_vsnprintf+0x800>
          }
        }
        format++;
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
        break;
 800306a:	e0ca      	b.n	8003202 <_vsnprintf+0x9ba>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800306c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003070:	1d1a      	adds	r2, r3, #4
 8003072:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	643b      	str	r3, [r7, #64]	; 0x40
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800307a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <_vsnprintf+0x83c>
 8003080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003082:	e001      	b.n	8003088 <_vsnprintf+0x840>
 8003084:	f04f 33ff 	mov.w	r3, #4294967295
 8003088:	4619      	mov	r1, r3
 800308a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800308c:	f7fe fca5 	bl	80019da <_strnlen_s>
 8003090:	63f8      	str	r0, [r7, #60]	; 0x3c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <_vsnprintf+0x860>
          l = (l < precision ? l : precision);
 800309c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800309e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a0:	4293      	cmp	r3, r2
 80030a2:	bf28      	it	cs
 80030a4:	4613      	movcs	r3, r2
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        if (!(flags & FLAGS_LEFT)) {
 80030a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11a      	bne.n	80030e8 <_vsnprintf+0x8a0>
          while (l++ < width) {
 80030b2:	e007      	b.n	80030c4 <_vsnprintf+0x87c>
            out(' ', buffer, idx++, maxlen);
 80030b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030b6:	1c53      	adds	r3, r2, #1
 80030b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030ba:	697c      	ldr	r4, [r7, #20]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6939      	ldr	r1, [r7, #16]
 80030c0:	2020      	movs	r0, #32
 80030c2:	47a0      	blx	r4
          while (l++ < width) {
 80030c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d8f1      	bhi.n	80030b4 <_vsnprintf+0x86c>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80030d0:	e00a      	b.n	80030e8 <_vsnprintf+0x8a0>
          out(*(p++), buffer, idx++, maxlen);
 80030d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	643a      	str	r2, [r7, #64]	; 0x40
 80030d8:	7818      	ldrb	r0, [r3, #0]
 80030da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030dc:	1c53      	adds	r3, r2, #1
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e0:	697c      	ldr	r4, [r7, #20]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6939      	ldr	r1, [r7, #16]
 80030e6:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80030e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d009      	beq.n	8003104 <_vsnprintf+0x8bc>
 80030f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0eb      	beq.n	80030d2 <_vsnprintf+0x88a>
 80030fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030fc:	1e5a      	subs	r2, r3, #1
 80030fe:	657a      	str	r2, [r7, #84]	; 0x54
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e6      	bne.n	80030d2 <_vsnprintf+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003104:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00e      	beq.n	800312c <_vsnprintf+0x8e4>
          while (l++ < width) {
 800310e:	e007      	b.n	8003120 <_vsnprintf+0x8d8>
            out(' ', buffer, idx++, maxlen);
 8003110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003112:	1c53      	adds	r3, r2, #1
 8003114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003116:	697c      	ldr	r4, [r7, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6939      	ldr	r1, [r7, #16]
 800311c:	2020      	movs	r0, #32
 800311e:	47a0      	blx	r4
          while (l++ < width) {
 8003120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003126:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003128:	429a      	cmp	r2, r3
 800312a:	d8f1      	bhi.n	8003110 <_vsnprintf+0x8c8>
          }
        }
        format++;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	3301      	adds	r3, #1
 8003130:	60bb      	str	r3, [r7, #8]
        break;
 8003132:	e066      	b.n	8003202 <_vsnprintf+0x9ba>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8003134:	2308      	movs	r3, #8
 8003136:	65bb      	str	r3, [r7, #88]	; 0x58
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8003138:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313a:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800313e:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (is_ll) {
 8003146:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800314a:	2b00      	cmp	r3, #0
 800314c:	d023      	beq.n	8003196 <_vsnprintf+0x94e>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800314e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003152:	1d1a      	adds	r2, r3, #4
 8003154:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	2300      	movs	r3, #0
 800315e:	603a      	str	r2, [r7, #0]
 8003160:	607b      	str	r3, [r7, #4]
 8003162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003164:	9308      	str	r3, [sp, #32]
 8003166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003168:	9307      	str	r3, [sp, #28]
 800316a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800316c:	9306      	str	r3, [sp, #24]
 800316e:	f04f 0210 	mov.w	r2, #16
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800317a:	2300      	movs	r3, #0
 800317c:	9302      	str	r3, [sp, #8]
 800317e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003182:	e9cd 3400 	strd	r3, r4, [sp]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800318a:	6939      	ldr	r1, [r7, #16]
 800318c:	6978      	ldr	r0, [r7, #20]
 800318e:	f7fe fe0e 	bl	8001dae <_ntoa_long_long>
 8003192:	64f8      	str	r0, [r7, #76]	; 0x4c
 8003194:	e018      	b.n	80031c8 <_vsnprintf+0x980>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8003196:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800319a:	1d1a      	adds	r2, r3, #4
 800319c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a6:	9305      	str	r3, [sp, #20]
 80031a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031aa:	9304      	str	r3, [sp, #16]
 80031ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ae:	9303      	str	r3, [sp, #12]
 80031b0:	2310      	movs	r3, #16
 80031b2:	9302      	str	r3, [sp, #8]
 80031b4:	2300      	movs	r3, #0
 80031b6:	9301      	str	r3, [sp, #4]
 80031b8:	9200      	str	r2, [sp, #0]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	6978      	ldr	r0, [r7, #20]
 80031c2:	f7fe fd8e 	bl	8001ce2 <_ntoa_long>
 80031c6:	64f8      	str	r0, [r7, #76]	; 0x4c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
        break;
 80031ce:	e018      	b.n	8003202 <_vsnprintf+0x9ba>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80031d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031d2:	1c53      	adds	r3, r2, #1
 80031d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031d6:	697c      	ldr	r4, [r7, #20]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6939      	ldr	r1, [r7, #16]
 80031dc:	2025      	movs	r0, #37	; 0x25
 80031de:	47a0      	blx	r4
        format++;
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
        break;
 80031e6:	e00c      	b.n	8003202 <_vsnprintf+0x9ba>

      default :
        out(*format, buffer, idx++, maxlen);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	7818      	ldrb	r0, [r3, #0]
 80031ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031ee:	1c53      	adds	r3, r2, #1
 80031f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031f2:	697c      	ldr	r4, [r7, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6939      	ldr	r1, [r7, #16]
 80031f8:	47a0      	blx	r4
        format++;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	3301      	adds	r3, #1
 80031fe:	60bb      	str	r3, [r7, #8]
        break;
 8003200:	bf00      	nop
  while (*format)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	f47f ab30 	bne.w	800286c <_vsnprintf+0x24>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800320c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	429a      	cmp	r2, r3
 8003212:	d302      	bcc.n	800321a <_vsnprintf+0x9d2>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	1e5a      	subs	r2, r3, #1
 8003218:	e000      	b.n	800321c <_vsnprintf+0x9d4>
 800321a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800321c:	697c      	ldr	r4, [r7, #20]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6939      	ldr	r1, [r7, #16]
 8003222:	2000      	movs	r0, #0
 8003224:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8003228:	4618      	mov	r0, r3
 800322a:	3764      	adds	r7, #100	; 0x64
 800322c:	46bd      	mov	sp, r7
 800322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003232:	bf00      	nop

08003234 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8003234:	b40f      	push	{r0, r1, r2, r3}
 8003236:	b580      	push	{r7, lr}
 8003238:	b086      	sub	sp, #24
 800323a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800323c:	f107 031c 	add.w	r3, r7, #28
 8003240:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8003242:	1d39      	adds	r1, r7, #4
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f04f 32ff 	mov.w	r2, #4294967295
 800324e:	4806      	ldr	r0, [pc, #24]	; (8003268 <printf_+0x34>)
 8003250:	f7ff fafa 	bl	8002848 <_vsnprintf>
 8003254:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003256:	68fb      	ldr	r3, [r7, #12]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003262:	b004      	add	sp, #16
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	080019b5 	.word	0x080019b5

0800326c <sprintf_>:


int sprintf_(char* buffer, const char* format, ...)
{
 800326c:	b40e      	push	{r1, r2, r3}
 800326e:	b580      	push	{r7, lr}
 8003270:	b087      	sub	sp, #28
 8003272:	af02      	add	r7, sp, #8
 8003274:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 8003276:	f107 0320 	add.w	r3, r7, #32
 800327a:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f04f 32ff 	mov.w	r2, #4294967295
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4805      	ldr	r0, [pc, #20]	; (80032a0 <sprintf_+0x34>)
 800328a:	f7ff fadd 	bl	8002848 <_vsnprintf>
 800328e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8003290:	68fb      	ldr	r3, [r7, #12]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800329c:	b003      	add	sp, #12
 800329e:	4770      	bx	lr
 80032a0:	0800196b 	.word	0x0800196b

080032a4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032a8:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <MX_RTC_Init+0x44>)
 80032aa:	4a10      	ldr	r2, [pc, #64]	; (80032ec <MX_RTC_Init+0x48>)
 80032ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032ae:	4b0e      	ldr	r3, [pc, #56]	; (80032e8 <MX_RTC_Init+0x44>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80032b4:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <MX_RTC_Init+0x44>)
 80032b6:	227f      	movs	r2, #127	; 0x7f
 80032b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80032ba:	4b0b      	ldr	r3, [pc, #44]	; (80032e8 <MX_RTC_Init+0x44>)
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032c0:	4b09      	ldr	r3, [pc, #36]	; (80032e8 <MX_RTC_Init+0x44>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032c6:	4b08      	ldr	r3, [pc, #32]	; (80032e8 <MX_RTC_Init+0x44>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <MX_RTC_Init+0x44>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032d2:	4805      	ldr	r0, [pc, #20]	; (80032e8 <MX_RTC_Init+0x44>)
 80032d4:	f002 fa6c 	bl	80057b0 <HAL_RTC_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80032de:	f7fe fb3f 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200004e8 	.word	0x200004e8
 80032ec:	40002800 	.word	0x40002800

080032f0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b09a      	sub	sp, #104	; 0x68
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032f8:	f107 030c 	add.w	r3, r7, #12
 80032fc:	225c      	movs	r2, #92	; 0x5c
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f006 fc3b 	bl	8009b7c <memset>
  if(rtcHandle->Instance==RTC)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a0c      	ldr	r2, [pc, #48]	; (800333c <HAL_RTC_MspInit+0x4c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d111      	bne.n	8003334 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003310:	2320      	movs	r3, #32
 8003312:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003318:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800331a:	f107 030c 	add.w	r3, r7, #12
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fa4e 	bl	80047c0 <HAL_RCCEx_PeriphCLKConfig>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800332a:	f7fe fb19 	bl	8001960 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <HAL_RTC_MspInit+0x50>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003334:	bf00      	nop
 8003336:	3768      	adds	r7, #104	; 0x68
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40002800 	.word	0x40002800
 8003340:	42470e3c 	.word	0x42470e3c

08003344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800334a:	2300      	movs	r3, #0
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	4b12      	ldr	r3, [pc, #72]	; (8003398 <HAL_MspInit+0x54>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	4a11      	ldr	r2, [pc, #68]	; (8003398 <HAL_MspInit+0x54>)
 8003354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003358:	6453      	str	r3, [r2, #68]	; 0x44
 800335a:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_MspInit+0x54>)
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	603b      	str	r3, [r7, #0]
 800336a:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_MspInit+0x54>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a0a      	ldr	r2, [pc, #40]	; (8003398 <HAL_MspInit+0x54>)
 8003370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b08      	ldr	r3, [pc, #32]	; (8003398 <HAL_MspInit+0x54>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	210f      	movs	r1, #15
 8003386:	f06f 0001 	mvn.w	r0, #1
 800338a:	f000 fa5b 	bl	8003844 <HAL_NVIC_SetPriority>
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800

0800339c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08e      	sub	sp, #56	; 0x38
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	4b33      	ldr	r3, [pc, #204]	; (8003480 <HAL_InitTick+0xe4>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	4a32      	ldr	r2, [pc, #200]	; (8003480 <HAL_InitTick+0xe4>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ba:	6413      	str	r3, [r2, #64]	; 0x40
 80033bc:	4b30      	ldr	r3, [pc, #192]	; (8003480 <HAL_InitTick+0xe4>)
 80033be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80033c8:	f107 0210 	add.w	r2, r7, #16
 80033cc:	f107 0314 	add.w	r3, r7, #20
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 f9c2 	bl	800475c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033e2:	f001 f993 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 80033e6:	6378      	str	r0, [r7, #52]	; 0x34
 80033e8:	e004      	b.n	80033f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033ea:	f001 f98f 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 80033ee:	4603      	mov	r3, r0
 80033f0:	005b      	lsls	r3, r3, #1
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f6:	4a23      	ldr	r2, [pc, #140]	; (8003484 <HAL_InitTick+0xe8>)
 80033f8:	fba2 2303 	umull	r2, r3, r2, r3
 80033fc:	0c9b      	lsrs	r3, r3, #18
 80033fe:	3b01      	subs	r3, #1
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003402:	4b21      	ldr	r3, [pc, #132]	; (8003488 <HAL_InitTick+0xec>)
 8003404:	4a21      	ldr	r2, [pc, #132]	; (800348c <HAL_InitTick+0xf0>)
 8003406:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003408:	4b1f      	ldr	r3, [pc, #124]	; (8003488 <HAL_InitTick+0xec>)
 800340a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800340e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003410:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <HAL_InitTick+0xec>)
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003416:	4b1c      	ldr	r3, [pc, #112]	; (8003488 <HAL_InitTick+0xec>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800341c:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_InitTick+0xec>)
 800341e:	2200      	movs	r2, #0
 8003420:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003422:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_InitTick+0xec>)
 8003424:	2200      	movs	r2, #0
 8003426:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003428:	4817      	ldr	r0, [pc, #92]	; (8003488 <HAL_InitTick+0xec>)
 800342a:	f002 fabb 	bl	80059a4 <HAL_TIM_Base_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003434:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003438:	2b00      	cmp	r3, #0
 800343a:	d11b      	bne.n	8003474 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800343c:	4812      	ldr	r0, [pc, #72]	; (8003488 <HAL_InitTick+0xec>)
 800343e:	f002 fb0b 	bl	8005a58 <HAL_TIM_Base_Start_IT>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003448:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800344c:	2b00      	cmp	r3, #0
 800344e:	d111      	bne.n	8003474 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003450:	202d      	movs	r0, #45	; 0x2d
 8003452:	f000 fa13 	bl	800387c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d808      	bhi.n	800346e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 800345c:	2200      	movs	r2, #0
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	202d      	movs	r0, #45	; 0x2d
 8003462:	f000 f9ef 	bl	8003844 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_InitTick+0xf4>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	e002      	b.n	8003474 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003478:	4618      	mov	r0, r3
 800347a:	3738      	adds	r7, #56	; 0x38
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	431bde83 	.word	0x431bde83
 8003488:	20000508 	.word	0x20000508
 800348c:	40002000 	.word	0x40002000
 8003490:	20000008 	.word	0x20000008

08003494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003498:	e7fe      	b.n	8003498 <NMI_Handler+0x4>

0800349a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800349e:	e7fe      	b.n	800349e <HardFault_Handler+0x4>

080034a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034a4:	e7fe      	b.n	80034a4 <MemManage_Handler+0x4>

080034a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034a6:	b480      	push	{r7}
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034aa:	e7fe      	b.n	80034aa <BusFault_Handler+0x4>

080034ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <UsageFault_Handler+0x4>

080034b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80034d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034d6:	f000 fba7 	bl	8003c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80034e6:	f002 fb27 	bl	8005b38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	20000508 	.word	0x20000508

080034f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034f8:	4b06      	ldr	r3, [pc, #24]	; (8003514 <SystemInit+0x20>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	4a05      	ldr	r2, [pc, #20]	; (8003514 <SystemInit+0x20>)
 8003500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003508:	bf00      	nop
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	e000ed00 	.word	0xe000ed00

08003518 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 800351e:	4a12      	ldr	r2, [pc, #72]	; (8003568 <MX_USART2_UART_Init+0x50>)
 8003520:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003528:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800352a:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 800352c:	2200      	movs	r2, #0
 800352e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003530:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003532:	2200      	movs	r2, #0
 8003534:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003536:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003538:	2200      	movs	r2, #0
 800353a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 800353e:	220c      	movs	r2, #12
 8003540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003544:	2200      	movs	r2, #0
 8003546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 800354a:	2200      	movs	r2, #0
 800354c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800354e:	4805      	ldr	r0, [pc, #20]	; (8003564 <MX_USART2_UART_Init+0x4c>)
 8003550:	f002 fcd6 	bl	8005f00 <HAL_UART_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800355a:	f7fe fa01 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000550 	.word	0x20000550
 8003568:	40004400 	.word	0x40004400

0800356c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	605a      	str	r2, [r3, #4]
 800357e:	609a      	str	r2, [r3, #8]
 8003580:	60da      	str	r2, [r3, #12]
 8003582:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_UART_MspInit+0x84>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d12b      	bne.n	80035e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <HAL_UART_MspInit+0x88>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a17      	ldr	r2, [pc, #92]	; (80035f4 <HAL_UART_MspInit+0x88>)
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_UART_MspInit+0x88>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	613b      	str	r3, [r7, #16]
 80035a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_UART_MspInit+0x88>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a10      	ldr	r2, [pc, #64]	; (80035f4 <HAL_UART_MspInit+0x88>)
 80035b4:	f043 0301 	orr.w	r3, r3, #1
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b0e      	ldr	r3, [pc, #56]	; (80035f4 <HAL_UART_MspInit+0x88>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	60fb      	str	r3, [r7, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80035c6:	230c      	movs	r3, #12
 80035c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d2:	2303      	movs	r3, #3
 80035d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80035d6:	2307      	movs	r3, #7
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	4805      	ldr	r0, [pc, #20]	; (80035f8 <HAL_UART_MspInit+0x8c>)
 80035e2:	f000 f959 	bl	8003898 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035e6:	bf00      	nop
 80035e8:	3728      	adds	r7, #40	; 0x28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40004400 	.word	0x40004400
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020000 	.word	0x40020000

080035fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003634 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003602:	490e      	ldr	r1, [pc, #56]	; (800363c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003604:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003608:	e002      	b.n	8003610 <LoopCopyDataInit>

0800360a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800360a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800360c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800360e:	3304      	adds	r3, #4

08003610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003614:	d3f9      	bcc.n	800360a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003618:	4c0b      	ldr	r4, [pc, #44]	; (8003648 <LoopFillZerobss+0x26>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800361c:	e001      	b.n	8003622 <LoopFillZerobss>

0800361e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800361e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003620:	3204      	adds	r2, #4

08003622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003624:	d3fb      	bcc.n	800361e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003626:	f7ff ff65 	bl	80034f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800362a:	f006 fb05 	bl	8009c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800362e:	f7fe f8e9 	bl	8001804 <main>
  bx  lr    
 8003632:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800363c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003640:	0800a0a0 	.word	0x0800a0a0
  ldr r2, =_sbss
 8003644:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8003648:	200050c0 	.word	0x200050c0

0800364c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800364c:	e7fe      	b.n	800364c <ADC_IRQHandler>
	...

08003650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <HAL_Init+0x40>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <HAL_Init+0x40>)
 800365a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800365e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_Init+0x40>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <HAL_Init+0x40>)
 8003666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800366a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_Init+0x40>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a07      	ldr	r2, [pc, #28]	; (8003690 <HAL_Init+0x40>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003678:	2003      	movs	r0, #3
 800367a:	f000 f8d8 	bl	800382e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800367e:	200f      	movs	r0, #15
 8003680:	f7ff fe8c 	bl	800339c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003684:	f7ff fe5e 	bl	8003344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023c00 	.word	0x40023c00

08003694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_IncTick+0x20>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	461a      	mov	r2, r3
 800369e:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_IncTick+0x24>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4413      	add	r3, r2
 80036a4:	4a04      	ldr	r2, [pc, #16]	; (80036b8 <HAL_IncTick+0x24>)
 80036a6:	6013      	str	r3, [r2, #0]
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c
 80036b8:	20000594 	.word	0x20000594

080036bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return uwTick;
 80036c0:	4b03      	ldr	r3, [pc, #12]	; (80036d0 <HAL_GetTick+0x14>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	20000594 	.word	0x20000594

080036d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e4:	4b0c      	ldr	r3, [pc, #48]	; (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f0:	4013      	ands	r3, r2
 80036f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003706:	4a04      	ldr	r2, [pc, #16]	; (8003718 <__NVIC_SetPriorityGrouping+0x44>)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	60d3      	str	r3, [r2, #12]
}
 800370c:	bf00      	nop
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	e000ed00 	.word	0xe000ed00

0800371c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <__NVIC_GetPriorityGrouping+0x18>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	0a1b      	lsrs	r3, r3, #8
 8003726:	f003 0307 	and.w	r3, r3, #7
}
 800372a:	4618      	mov	r0, r3
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	2b00      	cmp	r3, #0
 8003748:	db0b      	blt.n	8003762 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	f003 021f 	and.w	r2, r3, #31
 8003750:	4907      	ldr	r1, [pc, #28]	; (8003770 <__NVIC_EnableIRQ+0x38>)
 8003752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2001      	movs	r0, #1
 800375a:	fa00 f202 	lsl.w	r2, r0, r2
 800375e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000e100 	.word	0xe000e100

08003774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	6039      	str	r1, [r7, #0]
 800377e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003784:	2b00      	cmp	r3, #0
 8003786:	db0a      	blt.n	800379e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	b2da      	uxtb	r2, r3
 800378c:	490c      	ldr	r1, [pc, #48]	; (80037c0 <__NVIC_SetPriority+0x4c>)
 800378e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003792:	0112      	lsls	r2, r2, #4
 8003794:	b2d2      	uxtb	r2, r2
 8003796:	440b      	add	r3, r1
 8003798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800379c:	e00a      	b.n	80037b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4908      	ldr	r1, [pc, #32]	; (80037c4 <__NVIC_SetPriority+0x50>)
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	3b04      	subs	r3, #4
 80037ac:	0112      	lsls	r2, r2, #4
 80037ae:	b2d2      	uxtb	r2, r2
 80037b0:	440b      	add	r3, r1
 80037b2:	761a      	strb	r2, [r3, #24]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	e000e100 	.word	0xe000e100
 80037c4:	e000ed00 	.word	0xe000ed00

080037c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b089      	sub	sp, #36	; 0x24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f1c3 0307 	rsb	r3, r3, #7
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	bf28      	it	cs
 80037e6:	2304      	movcs	r3, #4
 80037e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3304      	adds	r3, #4
 80037ee:	2b06      	cmp	r3, #6
 80037f0:	d902      	bls.n	80037f8 <NVIC_EncodePriority+0x30>
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3b03      	subs	r3, #3
 80037f6:	e000      	b.n	80037fa <NVIC_EncodePriority+0x32>
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	fa02 f303 	lsl.w	r3, r2, r3
 8003806:	43da      	mvns	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	401a      	ands	r2, r3
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003810:	f04f 31ff 	mov.w	r1, #4294967295
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	fa01 f303 	lsl.w	r3, r1, r3
 800381a:	43d9      	mvns	r1, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003820:	4313      	orrs	r3, r2
         );
}
 8003822:	4618      	mov	r0, r3
 8003824:	3724      	adds	r7, #36	; 0x24
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7ff ff4c 	bl	80036d4 <__NVIC_SetPriorityGrouping>
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003856:	f7ff ff61 	bl	800371c <__NVIC_GetPriorityGrouping>
 800385a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	68b9      	ldr	r1, [r7, #8]
 8003860:	6978      	ldr	r0, [r7, #20]
 8003862:	f7ff ffb1 	bl	80037c8 <NVIC_EncodePriority>
 8003866:	4602      	mov	r2, r0
 8003868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f7ff ff80 	bl	8003774 <__NVIC_SetPriority>
}
 8003874:	bf00      	nop
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff ff54 	bl	8003738 <__NVIC_EnableIRQ>
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e165      	b.n	8003b80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4013      	ands	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	f040 8154 	bne.w	8003b7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d005      	beq.n	80038ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d130      	bne.n	800394c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	2203      	movs	r2, #3
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	43db      	mvns	r3, r3
 80038fc:	69ba      	ldr	r2, [r7, #24]
 80038fe:	4013      	ands	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003920:	2201      	movs	r2, #1
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	091b      	lsrs	r3, r3, #4
 8003936:	f003 0201 	and.w	r2, r3, #1
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f003 0303 	and.w	r3, r3, #3
 8003954:	2b03      	cmp	r3, #3
 8003956:	d017      	beq.n	8003988 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	2203      	movs	r2, #3
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d123      	bne.n	80039dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	08da      	lsrs	r2, r3, #3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3208      	adds	r2, #8
 800399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	220f      	movs	r2, #15
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	08da      	lsrs	r2, r3, #3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3208      	adds	r2, #8
 80039d6:	69b9      	ldr	r1, [r7, #24]
 80039d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	005b      	lsls	r3, r3, #1
 80039e6:	2203      	movs	r2, #3
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0203 	and.w	r2, r3, #3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80ae 	beq.w	8003b7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a2e:	4b5a      	ldr	r3, [pc, #360]	; (8003b98 <HAL_GPIO_Init+0x300>)
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a3a:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	089b      	lsrs	r3, r3, #2
 8003a40:	3302      	adds	r3, #2
 8003a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	220f      	movs	r2, #15
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a4f      	ldr	r2, [pc, #316]	; (8003ba0 <HAL_GPIO_Init+0x308>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d025      	beq.n	8003ab2 <HAL_GPIO_Init+0x21a>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4e      	ldr	r2, [pc, #312]	; (8003ba4 <HAL_GPIO_Init+0x30c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d01f      	beq.n	8003aae <HAL_GPIO_Init+0x216>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4d      	ldr	r2, [pc, #308]	; (8003ba8 <HAL_GPIO_Init+0x310>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d019      	beq.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4c      	ldr	r2, [pc, #304]	; (8003bac <HAL_GPIO_Init+0x314>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d013      	beq.n	8003aa6 <HAL_GPIO_Init+0x20e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4b      	ldr	r2, [pc, #300]	; (8003bb0 <HAL_GPIO_Init+0x318>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d00d      	beq.n	8003aa2 <HAL_GPIO_Init+0x20a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4a      	ldr	r2, [pc, #296]	; (8003bb4 <HAL_GPIO_Init+0x31c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d007      	beq.n	8003a9e <HAL_GPIO_Init+0x206>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a49      	ldr	r2, [pc, #292]	; (8003bb8 <HAL_GPIO_Init+0x320>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <HAL_GPIO_Init+0x202>
 8003a96:	2306      	movs	r3, #6
 8003a98:	e00c      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003a9a:	2307      	movs	r3, #7
 8003a9c:	e00a      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003a9e:	2305      	movs	r3, #5
 8003aa0:	e008      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e004      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_GPIO_Init+0x21c>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	f002 0203 	and.w	r2, r2, #3
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	4093      	lsls	r3, r2
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ac4:	4935      	ldr	r1, [pc, #212]	; (8003b9c <HAL_GPIO_Init+0x304>)
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	089b      	lsrs	r3, r3, #2
 8003aca:	3302      	adds	r3, #2
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ad2:	4b3a      	ldr	r3, [pc, #232]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	43db      	mvns	r3, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af6:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003afc:	4b2f      	ldr	r3, [pc, #188]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b20:	4a26      	ldr	r2, [pc, #152]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b26:	4b25      	ldr	r3, [pc, #148]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b4a:	4a1c      	ldr	r2, [pc, #112]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b74:	4a11      	ldr	r2, [pc, #68]	; (8003bbc <HAL_GPIO_Init+0x324>)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b0f      	cmp	r3, #15
 8003b84:	f67f ae96 	bls.w	80038b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b88:	bf00      	nop
 8003b8a:	bf00      	nop
 8003b8c:	3724      	adds	r7, #36	; 0x24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40013800 	.word	0x40013800
 8003ba0:	40020000 	.word	0x40020000
 8003ba4:	40020400 	.word	0x40020400
 8003ba8:	40020800 	.word	0x40020800
 8003bac:	40020c00 	.word	0x40020c00
 8003bb0:	40021000 	.word	0x40021000
 8003bb4:	40021400 	.word	0x40021400
 8003bb8:	40021800 	.word	0x40021800
 8003bbc:	40013c00 	.word	0x40013c00

08003bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bd0:	787b      	ldrb	r3, [r7, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bdc:	e003      	b.n	8003be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bde:	887b      	ldrh	r3, [r7, #2]
 8003be0:	041a      	lsls	r2, r3, #16
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	619a      	str	r2, [r3, #24]
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c04:	887a      	ldrh	r2, [r7, #2]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	041a      	lsls	r2, r3, #16
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	43d9      	mvns	r1, r3
 8003c10:	887b      	ldrh	r3, [r7, #2]
 8003c12:	400b      	ands	r3, r1
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	619a      	str	r2, [r3, #24]
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
	...

08003c28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	4603      	mov	r3, r0
 8003c30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c34:	695a      	ldr	r2, [r3, #20]
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d006      	beq.n	8003c4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c44:	88fb      	ldrh	r3, [r7, #6]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 f806 	bl	8003c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40013c00 	.word	0x40013c00

08003c58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
	...

08003c70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e12b      	b.n	8003eda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7fd fd6c 	bl	8001774 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2224      	movs	r2, #36	; 0x24
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003cd4:	f000 fd1a 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 8003cd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4a81      	ldr	r2, [pc, #516]	; (8003ee4 <HAL_I2C_Init+0x274>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d807      	bhi.n	8003cf4 <HAL_I2C_Init+0x84>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4a80      	ldr	r2, [pc, #512]	; (8003ee8 <HAL_I2C_Init+0x278>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	bf94      	ite	ls
 8003cec:	2301      	movls	r3, #1
 8003cee:	2300      	movhi	r3, #0
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	e006      	b.n	8003d02 <HAL_I2C_Init+0x92>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4a7d      	ldr	r2, [pc, #500]	; (8003eec <HAL_I2C_Init+0x27c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	bf94      	ite	ls
 8003cfc:	2301      	movls	r3, #1
 8003cfe:	2300      	movhi	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0e7      	b.n	8003eda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a78      	ldr	r2, [pc, #480]	; (8003ef0 <HAL_I2C_Init+0x280>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	0c9b      	lsrs	r3, r3, #18
 8003d14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4a6a      	ldr	r2, [pc, #424]	; (8003ee4 <HAL_I2C_Init+0x274>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d802      	bhi.n	8003d44 <HAL_I2C_Init+0xd4>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	3301      	adds	r3, #1
 8003d42:	e009      	b.n	8003d58 <HAL_I2C_Init+0xe8>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	4a69      	ldr	r2, [pc, #420]	; (8003ef4 <HAL_I2C_Init+0x284>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	099b      	lsrs	r3, r3, #6
 8003d56:	3301      	adds	r3, #1
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	495c      	ldr	r1, [pc, #368]	; (8003ee4 <HAL_I2C_Init+0x274>)
 8003d74:	428b      	cmp	r3, r1
 8003d76:	d819      	bhi.n	8003dac <HAL_I2C_Init+0x13c>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1e59      	subs	r1, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d86:	1c59      	adds	r1, r3, #1
 8003d88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_I2C_Init+0x138>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	1e59      	subs	r1, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003da0:	3301      	adds	r3, #1
 8003da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da6:	e051      	b.n	8003e4c <HAL_I2C_Init+0x1dc>
 8003da8:	2304      	movs	r3, #4
 8003daa:	e04f      	b.n	8003e4c <HAL_I2C_Init+0x1dc>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d111      	bne.n	8003dd8 <HAL_I2C_Init+0x168>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	1e58      	subs	r0, r3, #1
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	440b      	add	r3, r1
 8003dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	bf0c      	ite	eq
 8003dd0:	2301      	moveq	r3, #1
 8003dd2:	2300      	movne	r3, #0
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	e012      	b.n	8003dfe <HAL_I2C_Init+0x18e>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	1e58      	subs	r0, r3, #1
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	440b      	add	r3, r1
 8003de6:	0099      	lsls	r1, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dee:	3301      	adds	r3, #1
 8003df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf0c      	ite	eq
 8003df8:	2301      	moveq	r3, #1
 8003dfa:	2300      	movne	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_I2C_Init+0x196>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e022      	b.n	8003e4c <HAL_I2C_Init+0x1dc>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10e      	bne.n	8003e2c <HAL_I2C_Init+0x1bc>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	1e58      	subs	r0, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6859      	ldr	r1, [r3, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	440b      	add	r3, r1
 8003e1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e20:	3301      	adds	r3, #1
 8003e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e2a:	e00f      	b.n	8003e4c <HAL_I2C_Init+0x1dc>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1e58      	subs	r0, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	0099      	lsls	r1, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	6809      	ldr	r1, [r1, #0]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6911      	ldr	r1, [r2, #16]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	68d2      	ldr	r2, [r2, #12]
 8003e86:	4311      	orrs	r1, r2
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0201 	orr.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	000186a0 	.word	0x000186a0
 8003ee8:	001e847f 	.word	0x001e847f
 8003eec:	003d08ff 	.word	0x003d08ff
 8003ef0:	431bde83 	.word	0x431bde83
 8003ef4:	10624dd3 	.word	0x10624dd3

08003ef8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	4608      	mov	r0, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	461a      	mov	r2, r3
 8003f06:	4603      	mov	r3, r0
 8003f08:	817b      	strh	r3, [r7, #10]
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	813b      	strh	r3, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f12:	f7ff fbd3 	bl	80036bc <HAL_GetTick>
 8003f16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b20      	cmp	r3, #32
 8003f22:	f040 80d9 	bne.w	80040d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	2319      	movs	r3, #25
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	496d      	ldr	r1, [pc, #436]	; (80040e4 <HAL_I2C_Mem_Write+0x1ec>)
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 f971 	bl	8004218 <I2C_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e0cc      	b.n	80040da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_I2C_Mem_Write+0x56>
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	e0c5      	b.n	80040da <HAL_I2C_Mem_Write+0x1e2>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d007      	beq.n	8003f74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2221      	movs	r2, #33	; 0x21
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2240      	movs	r2, #64	; 0x40
 8003f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a3a      	ldr	r2, [r7, #32]
 8003f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a4d      	ldr	r2, [pc, #308]	; (80040e8 <HAL_I2C_Mem_Write+0x1f0>)
 8003fb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb6:	88f8      	ldrh	r0, [r7, #6]
 8003fb8:	893a      	ldrh	r2, [r7, #8]
 8003fba:	8979      	ldrh	r1, [r7, #10]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 f890 	bl	80040ec <I2C_RequestMemoryWrite>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d052      	beq.n	8004078 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e081      	b.n	80040da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f9f2 	bl	80043c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d107      	bne.n	8003ffe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e06b      	b.n	80040da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	1c5a      	adds	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401c:	3b01      	subs	r3, #1
 800401e:	b29a      	uxth	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b29a      	uxth	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b04      	cmp	r3, #4
 800403e:	d11b      	bne.n	8004078 <HAL_I2C_Mem_Write+0x180>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	d017      	beq.n	8004078 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	781a      	ldrb	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1aa      	bne.n	8003fd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f9de 	bl	8004446 <I2C_WaitOnBTFFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	2b04      	cmp	r3, #4
 8004096:	d107      	bne.n	80040a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e016      	b.n	80040da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e000      	b.n	80040da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80040d8:	2302      	movs	r3, #2
  }
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	00100002 	.word	0x00100002
 80040e8:	ffff0000 	.word	0xffff0000

080040ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b088      	sub	sp, #32
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	4608      	mov	r0, r1
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	817b      	strh	r3, [r7, #10]
 80040fe:	460b      	mov	r3, r1
 8004100:	813b      	strh	r3, [r7, #8]
 8004102:	4613      	mov	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004114:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	2200      	movs	r2, #0
 800411e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004122:	68f8      	ldr	r0, [r7, #12]
 8004124:	f000 f878 	bl	8004218 <I2C_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00d      	beq.n	800414a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413c:	d103      	bne.n	8004146 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e05f      	b.n	800420a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004158:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	6a3a      	ldr	r2, [r7, #32]
 800415e:	492d      	ldr	r1, [pc, #180]	; (8004214 <I2C_RequestMemoryWrite+0x128>)
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f8b0 	bl	80042c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e04c      	b.n	800420a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	6a39      	ldr	r1, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f91a 	bl	80043c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	2b04      	cmp	r3, #4
 800419c:	d107      	bne.n	80041ae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e02b      	b.n	800420a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d105      	bne.n	80041c4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b8:	893b      	ldrh	r3, [r7, #8]
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	611a      	str	r2, [r3, #16]
 80041c2:	e021      	b.n	8004208 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041c4:	893b      	ldrh	r3, [r7, #8]
 80041c6:	0a1b      	lsrs	r3, r3, #8
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d4:	6a39      	ldr	r1, [r7, #32]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f8f4 	bl	80043c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d107      	bne.n	80041fa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e005      	b.n	800420a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041fe:	893b      	ldrh	r3, [r7, #8]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	00010002 	.word	0x00010002

08004218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004228:	e025      	b.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d021      	beq.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7ff fa43 	bl	80036bc <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d116      	bne.n	8004276 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	f043 0220 	orr.w	r2, r3, #32
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e023      	b.n	80042be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10d      	bne.n	800429c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf0c      	ite	eq
 8004292:	2301      	moveq	r3, #1
 8004294:	2300      	movne	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	e00c      	b.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d0b6      	beq.n	800422a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3710      	adds	r7, #16
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b084      	sub	sp, #16
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	60f8      	str	r0, [r7, #12]
 80042ce:	60b9      	str	r1, [r7, #8]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042d4:	e051      	b.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e4:	d123      	bne.n	800432e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f043 0204 	orr.w	r2, r3, #4
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e046      	b.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d021      	beq.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7ff f9c1 	bl	80036bc <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d116      	bne.n	800437a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2220      	movs	r2, #32
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f043 0220 	orr.w	r2, r3, #32
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e020      	b.n	80043bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10c      	bne.n	800439e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	43da      	mvns	r2, r3
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4013      	ands	r3, r2
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	bf14      	ite	ne
 8004396:	2301      	movne	r3, #1
 8004398:	2300      	moveq	r3, #0
 800439a:	b2db      	uxtb	r3, r3
 800439c:	e00b      	b.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	43da      	mvns	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4013      	ands	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d18d      	bne.n	80042d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043d0:	e02d      	b.n	800442e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f878 	bl	80044c8 <I2C_IsAcknowledgeFailed>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e02d      	b.n	800443e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d021      	beq.n	800442e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ea:	f7ff f967 	bl	80036bc <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d116      	bne.n	800442e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f043 0220 	orr.w	r2, r3, #32
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e007      	b.n	800443e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004438:	2b80      	cmp	r3, #128	; 0x80
 800443a:	d1ca      	bne.n	80043d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004452:	e02d      	b.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f000 f837 	bl	80044c8 <I2C_IsAcknowledgeFailed>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e02d      	b.n	80044c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446a:	d021      	beq.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446c:	f7ff f926 	bl	80036bc <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	d302      	bcc.n	8004482 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d116      	bne.n	80044b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e007      	b.n	80044c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d1ca      	bne.n	8004454 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044de:	d11b      	bne.n	8004518 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f043 0204 	orr.w	r2, r3, #4
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0cc      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800453c:	4b68      	ldr	r3, [pc, #416]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 030f 	and.w	r3, r3, #15
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d90c      	bls.n	8004564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b65      	ldr	r3, [pc, #404]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b63      	ldr	r3, [pc, #396]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e0b8      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d020      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800457c:	4b59      	ldr	r3, [pc, #356]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a58      	ldr	r2, [pc, #352]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0308 	and.w	r3, r3, #8
 8004590:	2b00      	cmp	r3, #0
 8004592:	d005      	beq.n	80045a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004594:	4b53      	ldr	r3, [pc, #332]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	4a52      	ldr	r2, [pc, #328]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a0:	4b50      	ldr	r3, [pc, #320]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	494d      	ldr	r1, [pc, #308]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d044      	beq.n	8004648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b47      	ldr	r3, [pc, #284]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d119      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e07f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d003      	beq.n	80045e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e6:	4b3f      	ldr	r3, [pc, #252]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e06f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f6:	4b3b      	ldr	r3, [pc, #236]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e067      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004606:	4b37      	ldr	r3, [pc, #220]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f023 0203 	bic.w	r2, r3, #3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4934      	ldr	r1, [pc, #208]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	4313      	orrs	r3, r2
 8004616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004618:	f7ff f850 	bl	80036bc <HAL_GetTick>
 800461c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	e00a      	b.n	8004636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004620:	f7ff f84c 	bl	80036bc <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	f241 3288 	movw	r2, #5000	; 0x1388
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e04f      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	4b2b      	ldr	r3, [pc, #172]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f003 020c 	and.w	r2, r3, #12
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	429a      	cmp	r2, r3
 8004646:	d1eb      	bne.n	8004620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004648:	4b25      	ldr	r3, [pc, #148]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 030f 	and.w	r3, r3, #15
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	429a      	cmp	r2, r3
 8004654:	d20c      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004656:	4b22      	ldr	r3, [pc, #136]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b20      	ldr	r3, [pc, #128]	; (80046e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e032      	b.n	80046d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467c:	4b19      	ldr	r3, [pc, #100]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4916      	ldr	r1, [pc, #88]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469a:	4b12      	ldr	r3, [pc, #72]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	490e      	ldr	r1, [pc, #56]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ae:	f000 fbb1 	bl	8004e14 <HAL_RCC_GetSysClockFreq>
 80046b2:	4602      	mov	r2, r0
 80046b4:	4b0b      	ldr	r3, [pc, #44]	; (80046e4 <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	091b      	lsrs	r3, r3, #4
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	490a      	ldr	r1, [pc, #40]	; (80046e8 <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	5ccb      	ldrb	r3, [r1, r3]
 80046c2:	fa22 f303 	lsr.w	r3, r2, r3
 80046c6:	4a09      	ldr	r2, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1c4>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_RCC_ClockConfig+0x1c8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fe fe64 	bl	800339c <HAL_InitTick>

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	40023c00 	.word	0x40023c00
 80046e4:	40023800 	.word	0x40023800
 80046e8:	0800a078 	.word	0x0800a078
 80046ec:	20000004 	.word	0x20000004
 80046f0:	20000008 	.word	0x20000008

080046f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046f8:	4b03      	ldr	r3, [pc, #12]	; (8004708 <HAL_RCC_GetHCLKFreq+0x14>)
 80046fa:	681b      	ldr	r3, [r3, #0]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	20000004 	.word	0x20000004

0800470c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004710:	f7ff fff0 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b05      	ldr	r3, [pc, #20]	; (800472c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	0a9b      	lsrs	r3, r3, #10
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	4903      	ldr	r1, [pc, #12]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004722:	5ccb      	ldrb	r3, [r1, r3]
 8004724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004728:	4618      	mov	r0, r3
 800472a:	bd80      	pop	{r7, pc}
 800472c:	40023800 	.word	0x40023800
 8004730:	0800a088 	.word	0x0800a088

08004734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004738:	f7ff ffdc 	bl	80046f4 <HAL_RCC_GetHCLKFreq>
 800473c:	4602      	mov	r2, r0
 800473e:	4b05      	ldr	r3, [pc, #20]	; (8004754 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	0b5b      	lsrs	r3, r3, #13
 8004744:	f003 0307 	and.w	r3, r3, #7
 8004748:	4903      	ldr	r1, [pc, #12]	; (8004758 <HAL_RCC_GetPCLK2Freq+0x24>)
 800474a:	5ccb      	ldrb	r3, [r1, r3]
 800474c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004750:	4618      	mov	r0, r3
 8004752:	bd80      	pop	{r7, pc}
 8004754:	40023800 	.word	0x40023800
 8004758:	0800a088 	.word	0x0800a088

0800475c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	220f      	movs	r2, #15
 800476a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800476c:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_RCC_GetClockConfig+0x5c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0203 	and.w	r2, r3, #3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004778:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <HAL_RCC_GetClockConfig+0x5c>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004784:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <HAL_RCC_GetClockConfig+0x5c>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	08db      	lsrs	r3, r3, #3
 8004796:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800479e:	4b07      	ldr	r3, [pc, #28]	; (80047bc <HAL_RCC_GetClockConfig+0x60>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 020f 	and.w	r2, r3, #15
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	601a      	str	r2, [r3, #0]
}
 80047aa:	bf00      	nop
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40023c00 	.word	0x40023c00

080047c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08c      	sub	sp, #48	; 0x30
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80047cc:	2300      	movs	r3, #0
 80047ce:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80047d0:	2300      	movs	r3, #0
 80047d2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d010      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80047f8:	4b6f      	ldr	r3, [pc, #444]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	496c      	ldr	r1, [pc, #432]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004816:	2301      	movs	r3, #1
 8004818:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004826:	4b64      	ldr	r3, [pc, #400]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004834:	4960      	ldr	r1, [pc, #384]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004844:	2301      	movs	r3, #1
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d017      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004854:	4b58      	ldr	r3, [pc, #352]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800485a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004862:	4955      	ldr	r1, [pc, #340]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004872:	d101      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004874:	2301      	movs	r3, #1
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8004880:	2301      	movs	r3, #1
 8004882:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d017      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004890:	4b49      	ldr	r3, [pc, #292]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004896:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	4946      	ldr	r1, [pc, #280]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ae:	d101      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80048b0:	2301      	movs	r3, #1
 80048b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80048bc:	2301      	movs	r3, #1
 80048be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 808a 	beq.w	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a38      	ldr	r2, [pc, #224]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
 80048de:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048e6:	60bb      	str	r3, [r7, #8]
 80048e8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80048ea:	4b34      	ldr	r3, [pc, #208]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a33      	ldr	r2, [pc, #204]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80048f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80048f6:	f7fe fee1 	bl	80036bc <HAL_GetTick>
 80048fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80048fc:	e008      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048fe:	f7fe fedd 	bl	80036bc <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e278      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004910:	4b2a      	ldr	r3, [pc, #168]	; (80049bc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800491c:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800491e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004924:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d02f      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004934:	6a3a      	ldr	r2, [r7, #32]
 8004936:	429a      	cmp	r2, r3
 8004938:	d028      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800493a:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004942:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004944:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800494a:	4b1d      	ldr	r3, [pc, #116]	; (80049c0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004950:	4a19      	ldr	r2, [pc, #100]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004956:	4b18      	ldr	r3, [pc, #96]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b01      	cmp	r3, #1
 8004960:	d114      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004962:	f7fe feab 	bl	80036bc <HAL_GetTick>
 8004966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004968:	e00a      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800496a:	f7fe fea7 	bl	80036bc <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f241 3288 	movw	r2, #5000	; 0x1388
 8004978:	4293      	cmp	r3, r2
 800497a:	d901      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e240      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004980:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ee      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004994:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004998:	d114      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800499a:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ae:	4902      	ldr	r1, [pc, #8]	; (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]
 80049b4:	e00c      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40007000 	.word	0x40007000
 80049c0:	42470e40 	.word	0x42470e40
 80049c4:	4b4a      	ldr	r3, [pc, #296]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	4a49      	ldr	r2, [pc, #292]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049ce:	6093      	str	r3, [r2, #8]
 80049d0:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049dc:	4944      	ldr	r1, [pc, #272]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80049f4:	4b3f      	ldr	r3, [pc, #252]	; (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80049f6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004a04:	4b3a      	ldr	r3, [pc, #232]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a12:	4937      	ldr	r1, [pc, #220]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a26:	4b32      	ldr	r3, [pc, #200]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a34:	492e      	ldr	r1, [pc, #184]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d011      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004a48:	4b29      	ldr	r3, [pc, #164]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a4e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a56:	4926      	ldr	r1, [pc, #152]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a66:	d101      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004a78:	4b1d      	ldr	r3, [pc, #116]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	491a      	ldr	r1, [pc, #104]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d011      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004a9a:	4b15      	ldr	r3, [pc, #84]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa8:	4911      	ldr	r1, [pc, #68]	; (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab8:	d101      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004aba:	2301      	movs	r3, #1
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d005      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004acc:	f040 80ff 	bne.w	8004cce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ad6:	f7fe fdf1 	bl	80036bc <HAL_GetTick>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004adc:	e00e      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ade:	f7fe fded 	bl	80036bc <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d907      	bls.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e188      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004af0:	40023800 	.word	0x40023800
 8004af4:	424711e0 	.word	0x424711e0
 8004af8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004afc:	4b7e      	ldr	r3, [pc, #504]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ea      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d009      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d028      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d124      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004b30:	4b71      	ldr	r3, [pc, #452]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b42:	4b6d      	ldr	r3, [pc, #436]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b48:	0e1b      	lsrs	r3, r3, #24
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	019b      	lsls	r3, r3, #6
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	3b01      	subs	r3, #1
 8004b62:	041b      	lsls	r3, r3, #16
 8004b64:	431a      	orrs	r2, r3
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	071b      	lsls	r3, r3, #28
 8004b72:	4961      	ldr	r1, [pc, #388]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0304 	and.w	r3, r3, #4
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d004      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d035      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba4:	d130      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004ba6:	4b54      	ldr	r3, [pc, #336]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bac:	0c1b      	lsrs	r3, r3, #16
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bb8:	4b4f      	ldr	r3, [pc, #316]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bbe:	0f1b      	lsrs	r3, r3, #28
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	019b      	lsls	r3, r3, #6
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	085b      	lsrs	r3, r3, #1
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	061b      	lsls	r3, r3, #24
 8004be2:	431a      	orrs	r2, r3
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	071b      	lsls	r3, r3, #28
 8004be8:	4943      	ldr	r1, [pc, #268]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bf0:	4b41      	ldr	r3, [pc, #260]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bf6:	f023 021f 	bic.w	r2, r3, #31
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	493d      	ldr	r1, [pc, #244]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d029      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1c:	d124      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004c1e:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c30:	4b31      	ldr	r3, [pc, #196]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c36:	0f1b      	lsrs	r3, r3, #28
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	019b      	lsls	r3, r3, #6
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	085b      	lsrs	r3, r3, #1
 8004c50:	3b01      	subs	r3, #1
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	431a      	orrs	r2, r3
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	071b      	lsls	r3, r3, #28
 8004c60:	4925      	ldr	r1, [pc, #148]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d016      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	019b      	lsls	r3, r3, #6
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	3b01      	subs	r3, #1
 8004c88:	041b      	lsls	r3, r3, #16
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	061b      	lsls	r3, r3, #24
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	071b      	lsls	r3, r3, #28
 8004c9a:	4917      	ldr	r1, [pc, #92]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ca2:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ca8:	f7fe fd08 	bl	80036bc <HAL_GetTick>
 8004cac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cb0:	f7fe fd04 	bl	80036bc <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e09f      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	f040 8095 	bne.w	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cdc:	f7fe fcee 	bl	80036bc <HAL_GetTick>
 8004ce0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ce2:	e00f      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004ce4:	f7fe fcea 	bl	80036bc <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d908      	bls.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e085      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	42470068 	.word	0x42470068
 8004d00:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d04:	4b41      	ldr	r3, [pc, #260]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d10:	d0e8      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d009      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d02b      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d127      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004d3a:	4b34      	ldr	r3, [pc, #208]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	0c1b      	lsrs	r3, r3, #16
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	3301      	adds	r3, #1
 8004d48:	005b      	lsls	r3, r3, #1
 8004d4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	699a      	ldr	r2, [r3, #24]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	019b      	lsls	r3, r3, #6
 8004d56:	431a      	orrs	r2, r3
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	4928      	ldr	r1, [pc, #160]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d70:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	021b      	lsls	r3, r3, #8
 8004d82:	4922      	ldr	r1, [pc, #136]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01d      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d9e:	d118      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da6:	0e1b      	lsrs	r3, r3, #24
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	019b      	lsls	r3, r3, #6
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	085b      	lsrs	r3, r3, #1
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	041b      	lsls	r3, r3, #16
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	061b      	lsls	r3, r3, #24
 8004dca:	4910      	ldr	r1, [pc, #64]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004dd8:	f7fe fc70 	bl	80036bc <HAL_GetTick>
 8004ddc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dde:	e008      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004de0:	f7fe fc6c 	bl	80036bc <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e007      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfe:	d1ef      	bne.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3730      	adds	r7, #48	; 0x30
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	40023800 	.word	0x40023800
 8004e10:	42470070 	.word	0x42470070

08004e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e18:	b0ae      	sub	sp, #184	; 0xb8
 8004e1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e3a:	4bcb      	ldr	r3, [pc, #812]	; (8005168 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
 8004e42:	2b0c      	cmp	r3, #12
 8004e44:	f200 8206 	bhi.w	8005254 <HAL_RCC_GetSysClockFreq+0x440>
 8004e48:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e4e:	bf00      	nop
 8004e50:	08004e85 	.word	0x08004e85
 8004e54:	08005255 	.word	0x08005255
 8004e58:	08005255 	.word	0x08005255
 8004e5c:	08005255 	.word	0x08005255
 8004e60:	08004e8d 	.word	0x08004e8d
 8004e64:	08005255 	.word	0x08005255
 8004e68:	08005255 	.word	0x08005255
 8004e6c:	08005255 	.word	0x08005255
 8004e70:	08004e95 	.word	0x08004e95
 8004e74:	08005255 	.word	0x08005255
 8004e78:	08005255 	.word	0x08005255
 8004e7c:	08005255 	.word	0x08005255
 8004e80:	08005085 	.word	0x08005085
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e84:	4bb9      	ldr	r3, [pc, #740]	; (800516c <HAL_RCC_GetSysClockFreq+0x358>)
 8004e86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8004e8a:	e1e7      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e8c:	4bb8      	ldr	r3, [pc, #736]	; (8005170 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004e92:	e1e3      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e94:	4bb4      	ldr	r3, [pc, #720]	; (8005168 <HAL_RCC_GetSysClockFreq+0x354>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ea0:	4bb1      	ldr	r3, [pc, #708]	; (8005168 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d071      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eac:	4bae      	ldr	r3, [pc, #696]	; (8005168 <HAL_RCC_GetSysClockFreq+0x354>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	099b      	lsrs	r3, r3, #6
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004eb8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ed2:	4622      	mov	r2, r4
 8004ed4:	462b      	mov	r3, r5
 8004ed6:	f04f 0000 	mov.w	r0, #0
 8004eda:	f04f 0100 	mov.w	r1, #0
 8004ede:	0159      	lsls	r1, r3, #5
 8004ee0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee4:	0150      	lsls	r0, r2, #5
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4621      	mov	r1, r4
 8004eec:	1a51      	subs	r1, r2, r1
 8004eee:	6439      	str	r1, [r7, #64]	; 0x40
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f04f 0300 	mov.w	r3, #0
 8004f00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004f04:	4649      	mov	r1, r9
 8004f06:	018b      	lsls	r3, r1, #6
 8004f08:	4641      	mov	r1, r8
 8004f0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f0e:	4641      	mov	r1, r8
 8004f10:	018a      	lsls	r2, r1, #6
 8004f12:	4641      	mov	r1, r8
 8004f14:	1a51      	subs	r1, r2, r1
 8004f16:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f18:	4649      	mov	r1, r9
 8004f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	00cb      	lsls	r3, r1, #3
 8004f30:	4641      	mov	r1, r8
 8004f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f36:	4641      	mov	r1, r8
 8004f38:	00ca      	lsls	r2, r1, #3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4603      	mov	r3, r0
 8004f40:	4622      	mov	r2, r4
 8004f42:	189b      	adds	r3, r3, r2
 8004f44:	633b      	str	r3, [r7, #48]	; 0x30
 8004f46:	462b      	mov	r3, r5
 8004f48:	460a      	mov	r2, r1
 8004f4a:	eb42 0303 	adc.w	r3, r2, r3
 8004f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	024b      	lsls	r3, r1, #9
 8004f60:	4621      	mov	r1, r4
 8004f62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f66:	4621      	mov	r1, r4
 8004f68:	024a      	lsls	r2, r1, #9
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f72:	2200      	movs	r2, #0
 8004f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004f80:	f7fb fde4 	bl	8000b4c <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4613      	mov	r3, r2
 8004f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f8e:	e067      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f90:	4b75      	ldr	r3, [pc, #468]	; (8005168 <HAL_RCC_GetSysClockFreq+0x354>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	099b      	lsrs	r3, r3, #6
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004faa:	2300      	movs	r3, #0
 8004fac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004fb2:	4622      	mov	r2, r4
 8004fb4:	462b      	mov	r3, r5
 8004fb6:	f04f 0000 	mov.w	r0, #0
 8004fba:	f04f 0100 	mov.w	r1, #0
 8004fbe:	0159      	lsls	r1, r3, #5
 8004fc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc4:	0150      	lsls	r0, r2, #5
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4621      	mov	r1, r4
 8004fcc:	1a51      	subs	r1, r2, r1
 8004fce:	62b9      	str	r1, [r7, #40]	; 0x28
 8004fd0:	4629      	mov	r1, r5
 8004fd2:	eb63 0301 	sbc.w	r3, r3, r1
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	018b      	lsls	r3, r1, #6
 8004fe8:	4641      	mov	r1, r8
 8004fea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fee:	4641      	mov	r1, r8
 8004ff0:	018a      	lsls	r2, r1, #6
 8004ff2:	4641      	mov	r1, r8
 8004ff4:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800500a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800500e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005012:	4692      	mov	sl, r2
 8005014:	469b      	mov	fp, r3
 8005016:	4623      	mov	r3, r4
 8005018:	eb1a 0303 	adds.w	r3, sl, r3
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	462b      	mov	r3, r5
 8005020:	eb4b 0303 	adc.w	r3, fp, r3
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8005032:	4629      	mov	r1, r5
 8005034:	028b      	lsls	r3, r1, #10
 8005036:	4621      	mov	r1, r4
 8005038:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800503c:	4621      	mov	r1, r4
 800503e:	028a      	lsls	r2, r1, #10
 8005040:	4610      	mov	r0, r2
 8005042:	4619      	mov	r1, r3
 8005044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005048:	2200      	movs	r2, #0
 800504a:	673b      	str	r3, [r7, #112]	; 0x70
 800504c:	677a      	str	r2, [r7, #116]	; 0x74
 800504e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005052:	f7fb fd7b 	bl	8000b4c <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4613      	mov	r3, r2
 800505c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005060:	4b41      	ldr	r3, [pc, #260]	; (8005168 <HAL_RCC_GetSysClockFreq+0x354>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	3301      	adds	r3, #1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8005072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005076:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800507a:	fbb2 f3f3 	udiv	r3, r2, r3
 800507e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005082:	e0eb      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005084:	4b38      	ldr	r3, [pc, #224]	; (8005168 <HAL_RCC_GetSysClockFreq+0x354>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800508c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005090:	4b35      	ldr	r3, [pc, #212]	; (8005168 <HAL_RCC_GetSysClockFreq+0x354>)
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d06b      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509c:	4b32      	ldr	r3, [pc, #200]	; (8005168 <HAL_RCC_GetSysClockFreq+0x354>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	099b      	lsrs	r3, r3, #6
 80050a2:	2200      	movs	r2, #0
 80050a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80050a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ae:	663b      	str	r3, [r7, #96]	; 0x60
 80050b0:	2300      	movs	r3, #0
 80050b2:	667b      	str	r3, [r7, #100]	; 0x64
 80050b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80050b8:	4622      	mov	r2, r4
 80050ba:	462b      	mov	r3, r5
 80050bc:	f04f 0000 	mov.w	r0, #0
 80050c0:	f04f 0100 	mov.w	r1, #0
 80050c4:	0159      	lsls	r1, r3, #5
 80050c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ca:	0150      	lsls	r0, r2, #5
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4621      	mov	r1, r4
 80050d2:	1a51      	subs	r1, r2, r1
 80050d4:	61b9      	str	r1, [r7, #24]
 80050d6:	4629      	mov	r1, r5
 80050d8:	eb63 0301 	sbc.w	r3, r3, r1
 80050dc:	61fb      	str	r3, [r7, #28]
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80050ea:	4659      	mov	r1, fp
 80050ec:	018b      	lsls	r3, r1, #6
 80050ee:	4651      	mov	r1, sl
 80050f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050f4:	4651      	mov	r1, sl
 80050f6:	018a      	lsls	r2, r1, #6
 80050f8:	4651      	mov	r1, sl
 80050fa:	ebb2 0801 	subs.w	r8, r2, r1
 80050fe:	4659      	mov	r1, fp
 8005100:	eb63 0901 	sbc.w	r9, r3, r1
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005110:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005114:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005118:	4690      	mov	r8, r2
 800511a:	4699      	mov	r9, r3
 800511c:	4623      	mov	r3, r4
 800511e:	eb18 0303 	adds.w	r3, r8, r3
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	462b      	mov	r3, r5
 8005126:	eb49 0303 	adc.w	r3, r9, r3
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	f04f 0200 	mov.w	r2, #0
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005138:	4629      	mov	r1, r5
 800513a:	024b      	lsls	r3, r1, #9
 800513c:	4621      	mov	r1, r4
 800513e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005142:	4621      	mov	r1, r4
 8005144:	024a      	lsls	r2, r1, #9
 8005146:	4610      	mov	r0, r2
 8005148:	4619      	mov	r1, r3
 800514a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800514e:	2200      	movs	r2, #0
 8005150:	65bb      	str	r3, [r7, #88]	; 0x58
 8005152:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005154:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005158:	f7fb fcf8 	bl	8000b4c <__aeabi_uldivmod>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4613      	mov	r3, r2
 8005162:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005166:	e065      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x420>
 8005168:	40023800 	.word	0x40023800
 800516c:	00f42400 	.word	0x00f42400
 8005170:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005174:	4b3d      	ldr	r3, [pc, #244]	; (800526c <HAL_RCC_GetSysClockFreq+0x458>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	099b      	lsrs	r3, r3, #6
 800517a:	2200      	movs	r2, #0
 800517c:	4618      	mov	r0, r3
 800517e:	4611      	mov	r1, r2
 8005180:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005184:	653b      	str	r3, [r7, #80]	; 0x50
 8005186:	2300      	movs	r3, #0
 8005188:	657b      	str	r3, [r7, #84]	; 0x54
 800518a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800518e:	4642      	mov	r2, r8
 8005190:	464b      	mov	r3, r9
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f04f 0100 	mov.w	r1, #0
 800519a:	0159      	lsls	r1, r3, #5
 800519c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051a0:	0150      	lsls	r0, r2, #5
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4641      	mov	r1, r8
 80051a8:	1a51      	subs	r1, r2, r1
 80051aa:	60b9      	str	r1, [r7, #8]
 80051ac:	4649      	mov	r1, r9
 80051ae:	eb63 0301 	sbc.w	r3, r3, r1
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80051c0:	4659      	mov	r1, fp
 80051c2:	018b      	lsls	r3, r1, #6
 80051c4:	4651      	mov	r1, sl
 80051c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ca:	4651      	mov	r1, sl
 80051cc:	018a      	lsls	r2, r1, #6
 80051ce:	4651      	mov	r1, sl
 80051d0:	1a54      	subs	r4, r2, r1
 80051d2:	4659      	mov	r1, fp
 80051d4:	eb63 0501 	sbc.w	r5, r3, r1
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	00eb      	lsls	r3, r5, #3
 80051e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051e6:	00e2      	lsls	r2, r4, #3
 80051e8:	4614      	mov	r4, r2
 80051ea:	461d      	mov	r5, r3
 80051ec:	4643      	mov	r3, r8
 80051ee:	18e3      	adds	r3, r4, r3
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	464b      	mov	r3, r9
 80051f4:	eb45 0303 	adc.w	r3, r5, r3
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	f04f 0200 	mov.w	r2, #0
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005206:	4629      	mov	r1, r5
 8005208:	028b      	lsls	r3, r1, #10
 800520a:	4621      	mov	r1, r4
 800520c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005210:	4621      	mov	r1, r4
 8005212:	028a      	lsls	r2, r1, #10
 8005214:	4610      	mov	r0, r2
 8005216:	4619      	mov	r1, r3
 8005218:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800521c:	2200      	movs	r2, #0
 800521e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005220:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005222:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005226:	f7fb fc91 	bl	8000b4c <__aeabi_uldivmod>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4613      	mov	r3, r2
 8005230:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005234:	4b0d      	ldr	r3, [pc, #52]	; (800526c <HAL_RCC_GetSysClockFreq+0x458>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	0f1b      	lsrs	r3, r3, #28
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8005242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005246:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800524a:	fbb2 f3f3 	udiv	r3, r2, r3
 800524e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005252:	e003      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <HAL_RCC_GetSysClockFreq+0x45c>)
 8005256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800525a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800525c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8005260:	4618      	mov	r0, r3
 8005262:	37b8      	adds	r7, #184	; 0xb8
 8005264:	46bd      	mov	sp, r7
 8005266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800526a:	bf00      	nop
 800526c:	40023800 	.word	0x40023800
 8005270:	00f42400 	.word	0x00f42400

08005274 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e28d      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 8083 	beq.w	800539a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005294:	4b94      	ldr	r3, [pc, #592]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 030c 	and.w	r3, r3, #12
 800529c:	2b04      	cmp	r3, #4
 800529e:	d019      	beq.n	80052d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052a0:	4b91      	ldr	r3, [pc, #580]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d106      	bne.n	80052ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052ac:	4b8e      	ldr	r3, [pc, #568]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b8:	d00c      	beq.n	80052d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ba:	4b8b      	ldr	r3, [pc, #556]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80052c2:	2b0c      	cmp	r3, #12
 80052c4:	d112      	bne.n	80052ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c6:	4b88      	ldr	r3, [pc, #544]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052d2:	d10b      	bne.n	80052ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	4b84      	ldr	r3, [pc, #528]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05b      	beq.n	8005398 <HAL_RCC_OscConfig+0x124>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d157      	bne.n	8005398 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e25a      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f4:	d106      	bne.n	8005304 <HAL_RCC_OscConfig+0x90>
 80052f6:	4b7c      	ldr	r3, [pc, #496]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a7b      	ldr	r2, [pc, #492]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e01d      	b.n	8005340 <HAL_RCC_OscConfig+0xcc>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0xb4>
 800530e:	4b76      	ldr	r3, [pc, #472]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a75      	ldr	r2, [pc, #468]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 8005314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	4b73      	ldr	r3, [pc, #460]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a72      	ldr	r2, [pc, #456]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 8005320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0xcc>
 8005328:	4b6f      	ldr	r3, [pc, #444]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a6e      	ldr	r2, [pc, #440]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	4b6c      	ldr	r3, [pc, #432]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a6b      	ldr	r2, [pc, #428]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 800533a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d013      	beq.n	8005370 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005348:	f7fe f9b8 	bl	80036bc <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005350:	f7fe f9b4 	bl	80036bc <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e21f      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b61      	ldr	r3, [pc, #388]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0xdc>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005370:	f7fe f9a4 	bl	80036bc <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005378:	f7fe f9a0 	bl	80036bc <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e20b      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800538a:	4b57      	ldr	r3, [pc, #348]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0x104>
 8005396:	e000      	b.n	800539a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d06f      	beq.n	8005486 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053a6:	4b50      	ldr	r3, [pc, #320]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d017      	beq.n	80053e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053b2:	4b4d      	ldr	r3, [pc, #308]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d105      	bne.n	80053ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053be:	4b4a      	ldr	r3, [pc, #296]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00b      	beq.n	80053e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ca:	4b47      	ldr	r3, [pc, #284]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80053d2:	2b0c      	cmp	r3, #12
 80053d4:	d11c      	bne.n	8005410 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053d6:	4b44      	ldr	r3, [pc, #272]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d116      	bne.n	8005410 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e2:	4b41      	ldr	r3, [pc, #260]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_RCC_OscConfig+0x186>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d001      	beq.n	80053fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e1d3      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053fa:	4b3b      	ldr	r3, [pc, #236]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	00db      	lsls	r3, r3, #3
 8005408:	4937      	ldr	r1, [pc, #220]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 800540a:	4313      	orrs	r3, r2
 800540c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800540e:	e03a      	b.n	8005486 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d020      	beq.n	800545a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005418:	4b34      	ldr	r3, [pc, #208]	; (80054ec <HAL_RCC_OscConfig+0x278>)
 800541a:	2201      	movs	r2, #1
 800541c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541e:	f7fe f94d 	bl	80036bc <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005424:	e008      	b.n	8005438 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005426:	f7fe f949 	bl	80036bc <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	2b02      	cmp	r3, #2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e1b4      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005438:	4b2b      	ldr	r3, [pc, #172]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d0f0      	beq.n	8005426 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005444:	4b28      	ldr	r3, [pc, #160]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	00db      	lsls	r3, r3, #3
 8005452:	4925      	ldr	r1, [pc, #148]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 8005454:	4313      	orrs	r3, r2
 8005456:	600b      	str	r3, [r1, #0]
 8005458:	e015      	b.n	8005486 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800545a:	4b24      	ldr	r3, [pc, #144]	; (80054ec <HAL_RCC_OscConfig+0x278>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fe f92c 	bl	80036bc <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005468:	f7fe f928 	bl	80036bc <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e193      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547a:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d036      	beq.n	8005500 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d016      	beq.n	80054c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800549a:	4b15      	ldr	r3, [pc, #84]	; (80054f0 <HAL_RCC_OscConfig+0x27c>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a0:	f7fe f90c 	bl	80036bc <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054a8:	f7fe f908 	bl	80036bc <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e173      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ba:	4b0b      	ldr	r3, [pc, #44]	; (80054e8 <HAL_RCC_OscConfig+0x274>)
 80054bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d0f0      	beq.n	80054a8 <HAL_RCC_OscConfig+0x234>
 80054c6:	e01b      	b.n	8005500 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_RCC_OscConfig+0x27c>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ce:	f7fe f8f5 	bl	80036bc <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d4:	e00e      	b.n	80054f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d6:	f7fe f8f1 	bl	80036bc <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d907      	bls.n	80054f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e15c      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
 80054e8:	40023800 	.word	0x40023800
 80054ec:	42470000 	.word	0x42470000
 80054f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f4:	4b8a      	ldr	r3, [pc, #552]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80054f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ea      	bne.n	80054d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	f000 8097 	beq.w	800563c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550e:	2300      	movs	r3, #0
 8005510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005512:	4b83      	ldr	r3, [pc, #524]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	4b7f      	ldr	r3, [pc, #508]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005526:	4a7e      	ldr	r2, [pc, #504]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552c:	6413      	str	r3, [r2, #64]	; 0x40
 800552e:	4b7c      	ldr	r3, [pc, #496]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005536:	60bb      	str	r3, [r7, #8]
 8005538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800553a:	2301      	movs	r3, #1
 800553c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800553e:	4b79      	ldr	r3, [pc, #484]	; (8005724 <HAL_RCC_OscConfig+0x4b0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d118      	bne.n	800557c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800554a:	4b76      	ldr	r3, [pc, #472]	; (8005724 <HAL_RCC_OscConfig+0x4b0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a75      	ldr	r2, [pc, #468]	; (8005724 <HAL_RCC_OscConfig+0x4b0>)
 8005550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005556:	f7fe f8b1 	bl	80036bc <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555e:	f7fe f8ad 	bl	80036bc <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e118      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005570:	4b6c      	ldr	r3, [pc, #432]	; (8005724 <HAL_RCC_OscConfig+0x4b0>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d106      	bne.n	8005592 <HAL_RCC_OscConfig+0x31e>
 8005584:	4b66      	ldr	r3, [pc, #408]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005588:	4a65      	ldr	r2, [pc, #404]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	6713      	str	r3, [r2, #112]	; 0x70
 8005590:	e01c      	b.n	80055cc <HAL_RCC_OscConfig+0x358>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b05      	cmp	r3, #5
 8005598:	d10c      	bne.n	80055b4 <HAL_RCC_OscConfig+0x340>
 800559a:	4b61      	ldr	r3, [pc, #388]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	4a60      	ldr	r2, [pc, #384]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80055a0:	f043 0304 	orr.w	r3, r3, #4
 80055a4:	6713      	str	r3, [r2, #112]	; 0x70
 80055a6:	4b5e      	ldr	r3, [pc, #376]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	4a5d      	ldr	r2, [pc, #372]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	6713      	str	r3, [r2, #112]	; 0x70
 80055b2:	e00b      	b.n	80055cc <HAL_RCC_OscConfig+0x358>
 80055b4:	4b5a      	ldr	r3, [pc, #360]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80055b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b8:	4a59      	ldr	r2, [pc, #356]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80055ba:	f023 0301 	bic.w	r3, r3, #1
 80055be:	6713      	str	r3, [r2, #112]	; 0x70
 80055c0:	4b57      	ldr	r3, [pc, #348]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80055c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c4:	4a56      	ldr	r2, [pc, #344]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80055c6:	f023 0304 	bic.w	r3, r3, #4
 80055ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d015      	beq.n	8005600 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d4:	f7fe f872 	bl	80036bc <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055da:	e00a      	b.n	80055f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055dc:	f7fe f86e 	bl	80036bc <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e0d7      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f2:	4b4b      	ldr	r3, [pc, #300]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80055f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0ee      	beq.n	80055dc <HAL_RCC_OscConfig+0x368>
 80055fe:	e014      	b.n	800562a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fe f85c 	bl	80036bc <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005606:	e00a      	b.n	800561e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005608:	f7fe f858 	bl	80036bc <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	f241 3288 	movw	r2, #5000	; 0x1388
 8005616:	4293      	cmp	r3, r2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e0c1      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561e:	4b40      	ldr	r3, [pc, #256]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ee      	bne.n	8005608 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005630:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005634:	4a3a      	ldr	r2, [pc, #232]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005636:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80ad 	beq.w	80057a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005646:	4b36      	ldr	r3, [pc, #216]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b08      	cmp	r3, #8
 8005650:	d060      	beq.n	8005714 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d145      	bne.n	80056e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800565a:	4b33      	ldr	r3, [pc, #204]	; (8005728 <HAL_RCC_OscConfig+0x4b4>)
 800565c:	2200      	movs	r2, #0
 800565e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005660:	f7fe f82c 	bl	80036bc <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005668:	f7fe f828 	bl	80036bc <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e093      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800567a:	4b29      	ldr	r3, [pc, #164]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	431a      	orrs	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	019b      	lsls	r3, r3, #6
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569c:	085b      	lsrs	r3, r3, #1
 800569e:	3b01      	subs	r3, #1
 80056a0:	041b      	lsls	r3, r3, #16
 80056a2:	431a      	orrs	r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a8:	061b      	lsls	r3, r3, #24
 80056aa:	431a      	orrs	r2, r3
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	071b      	lsls	r3, r3, #28
 80056b2:	491b      	ldr	r1, [pc, #108]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056b8:	4b1b      	ldr	r3, [pc, #108]	; (8005728 <HAL_RCC_OscConfig+0x4b4>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd fffd 	bl	80036bc <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c6:	f7fd fff9 	bl	80036bc <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e064      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d8:	4b11      	ldr	r3, [pc, #68]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x452>
 80056e4:	e05c      	b.n	80057a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e6:	4b10      	ldr	r3, [pc, #64]	; (8005728 <HAL_RCC_OscConfig+0x4b4>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ec:	f7fd ffe6 	bl	80036bc <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f4:	f7fd ffe2 	bl	80036bc <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e04d      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005706:	4b06      	ldr	r3, [pc, #24]	; (8005720 <HAL_RCC_OscConfig+0x4ac>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f0      	bne.n	80056f4 <HAL_RCC_OscConfig+0x480>
 8005712:	e045      	b.n	80057a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d107      	bne.n	800572c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e040      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
 8005720:	40023800 	.word	0x40023800
 8005724:	40007000 	.word	0x40007000
 8005728:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800572c:	4b1f      	ldr	r3, [pc, #124]	; (80057ac <HAL_RCC_OscConfig+0x538>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d030      	beq.n	800579c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005744:	429a      	cmp	r2, r3
 8005746:	d129      	bne.n	800579c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005752:	429a      	cmp	r2, r3
 8005754:	d122      	bne.n	800579c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800575c:	4013      	ands	r3, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005762:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005764:	4293      	cmp	r3, r2
 8005766:	d119      	bne.n	800579c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005772:	085b      	lsrs	r3, r3, #1
 8005774:	3b01      	subs	r3, #1
 8005776:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005778:	429a      	cmp	r2, r3
 800577a:	d10f      	bne.n	800579c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005786:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005788:	429a      	cmp	r2, r3
 800578a:	d107      	bne.n	800579c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005798:	429a      	cmp	r2, r3
 800579a:	d001      	beq.n	80057a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3718      	adds	r7, #24
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40023800 	.word	0x40023800

080057b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e066      	b.n	8005894 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	7f5b      	ldrb	r3, [r3, #29]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d105      	bne.n	80057dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fd fd8a 	bl	80032f0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	22ca      	movs	r2, #202	; 0xca
 80057e8:	625a      	str	r2, [r3, #36]	; 0x24
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2253      	movs	r2, #83	; 0x53
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f87a 	bl	80058ec <RTC_EnterInitMode>
 80057f8:	4603      	mov	r3, r0
 80057fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d12c      	bne.n	800585c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005810:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005814:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	6899      	ldr	r1, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	68d2      	ldr	r2, [r2, #12]
 800583c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6919      	ldr	r1, [r3, #16]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	041a      	lsls	r2, r3, #16
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f881 	bl	800595a <RTC_ExitInitMode>
 8005858:	4603      	mov	r3, r0
 800585a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d113      	bne.n	800588a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005870:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	22ff      	movs	r2, #255	; 0xff
 8005890:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005892:	7bfb      	ldrb	r3, [r7, #15]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058b6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058b8:	f7fd ff00 	bl	80036bc <HAL_GetTick>
 80058bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058be:	e009      	b.n	80058d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058c0:	f7fd fefc 	bl	80036bc <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ce:	d901      	bls.n	80058d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e007      	b.n	80058e4 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	f003 0320 	and.w	r3, r3, #32
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0ee      	beq.n	80058c0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d122      	bne.n	8005950 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68da      	ldr	r2, [r3, #12]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005918:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800591a:	f7fd fecf 	bl	80036bc <HAL_GetTick>
 800591e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005920:	e00c      	b.n	800593c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005922:	f7fd fecb 	bl	80036bc <HAL_GetTick>
 8005926:	4602      	mov	r2, r0
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	1ad3      	subs	r3, r2, r3
 800592c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005930:	d904      	bls.n	800593c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2204      	movs	r2, #4
 8005936:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d102      	bne.n	8005950 <RTC_EnterInitMode+0x64>
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d1e8      	bne.n	8005922 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b084      	sub	sp, #16
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005962:	2300      	movs	r3, #0
 8005964:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005974:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10a      	bne.n	800599a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff ff89 	bl	800589c <HAL_RTC_WaitForSynchro>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2204      	movs	r2, #4
 8005994:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800599a:	7bfb      	ldrb	r3, [r7, #15]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e041      	b.n	8005a3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d106      	bne.n	80059d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f839 	bl	8005a42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3304      	adds	r3, #4
 80059e0:	4619      	mov	r1, r3
 80059e2:	4610      	mov	r0, r2
 80059e4:	f000 f9d8 	bl	8005d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
	...

08005a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d001      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e04e      	b.n	8005b0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a23      	ldr	r2, [pc, #140]	; (8005b1c <HAL_TIM_Base_Start_IT+0xc4>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d022      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9a:	d01d      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <HAL_TIM_Base_Start_IT+0xc8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <HAL_TIM_Base_Start_IT+0xcc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1c      	ldr	r2, [pc, #112]	; (8005b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1b      	ldr	r2, [pc, #108]	; (8005b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a19      	ldr	r2, [pc, #100]	; (8005b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_TIM_Base_Start_IT+0x80>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a18      	ldr	r2, [pc, #96]	; (8005b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d111      	bne.n	8005afc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b06      	cmp	r3, #6
 8005ae8:	d010      	beq.n	8005b0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005afa:	e007      	b.n	8005b0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40000400 	.word	0x40000400
 8005b24:	40000800 	.word	0x40000800
 8005b28:	40000c00 	.word	0x40000c00
 8005b2c:	40010400 	.word	0x40010400
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40001800 	.word	0x40001800

08005b38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d122      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0302 	and.w	r3, r3, #2
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d11b      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0202 	mvn.w	r2, #2
 8005b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8ee 	bl	8005d5c <HAL_TIM_IC_CaptureCallback>
 8005b80:	e005      	b.n	8005b8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 f8e0 	bl	8005d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 f8f1 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d122      	bne.n	8005be8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0304 	and.w	r3, r3, #4
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d11b      	bne.n	8005be8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0204 	mvn.w	r2, #4
 8005bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d003      	beq.n	8005bd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8c4 	bl	8005d5c <HAL_TIM_IC_CaptureCallback>
 8005bd4:	e005      	b.n	8005be2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f8b6 	bl	8005d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 f8c7 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d122      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b08      	cmp	r3, #8
 8005c02:	d11b      	bne.n	8005c3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f06f 0208 	mvn.w	r2, #8
 8005c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2204      	movs	r2, #4
 8005c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f89a 	bl	8005d5c <HAL_TIM_IC_CaptureCallback>
 8005c28:	e005      	b.n	8005c36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f88c 	bl	8005d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 f89d 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d122      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b10      	cmp	r3, #16
 8005c56:	d11b      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0210 	mvn.w	r2, #16
 8005c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2208      	movs	r2, #8
 8005c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d003      	beq.n	8005c7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f870 	bl	8005d5c <HAL_TIM_IC_CaptureCallback>
 8005c7c:	e005      	b.n	8005c8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f862 	bl	8005d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f873 	bl	8005d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d10e      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0301 	and.w	r3, r3, #1
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d107      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0201 	mvn.w	r2, #1
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fb fe40 	bl	800193c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b80      	cmp	r3, #128	; 0x80
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd4:	2b80      	cmp	r3, #128	; 0x80
 8005cd6:	d107      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 f902 	bl	8005eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d10e      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d107      	bne.n	8005d14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f838 	bl	8005d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d10e      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	f003 0320 	and.w	r3, r3, #32
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d107      	bne.n	8005d40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f06f 0220 	mvn.w	r2, #32
 8005d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f8cc 	bl	8005ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a40      	ldr	r2, [pc, #256]	; (8005eac <TIM_Base_SetConfig+0x114>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d013      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d00f      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a3d      	ldr	r2, [pc, #244]	; (8005eb0 <TIM_Base_SetConfig+0x118>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00b      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a3c      	ldr	r2, [pc, #240]	; (8005eb4 <TIM_Base_SetConfig+0x11c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d007      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a3b      	ldr	r2, [pc, #236]	; (8005eb8 <TIM_Base_SetConfig+0x120>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d003      	beq.n	8005dd8 <TIM_Base_SetConfig+0x40>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a3a      	ldr	r2, [pc, #232]	; (8005ebc <TIM_Base_SetConfig+0x124>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d108      	bne.n	8005dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a2f      	ldr	r2, [pc, #188]	; (8005eac <TIM_Base_SetConfig+0x114>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d02b      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df8:	d027      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a2c      	ldr	r2, [pc, #176]	; (8005eb0 <TIM_Base_SetConfig+0x118>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d023      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a2b      	ldr	r2, [pc, #172]	; (8005eb4 <TIM_Base_SetConfig+0x11c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01f      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2a      	ldr	r2, [pc, #168]	; (8005eb8 <TIM_Base_SetConfig+0x120>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d01b      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a29      	ldr	r2, [pc, #164]	; (8005ebc <TIM_Base_SetConfig+0x124>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d017      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a28      	ldr	r2, [pc, #160]	; (8005ec0 <TIM_Base_SetConfig+0x128>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d013      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <TIM_Base_SetConfig+0x12c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00f      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a26      	ldr	r2, [pc, #152]	; (8005ec8 <TIM_Base_SetConfig+0x130>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00b      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a25      	ldr	r2, [pc, #148]	; (8005ecc <TIM_Base_SetConfig+0x134>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d007      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a24      	ldr	r2, [pc, #144]	; (8005ed0 <TIM_Base_SetConfig+0x138>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d003      	beq.n	8005e4a <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a23      	ldr	r2, [pc, #140]	; (8005ed4 <TIM_Base_SetConfig+0x13c>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d108      	bne.n	8005e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681a      	ldr	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a0a      	ldr	r2, [pc, #40]	; (8005eac <TIM_Base_SetConfig+0x114>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_Base_SetConfig+0xf8>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a0c      	ldr	r2, [pc, #48]	; (8005ebc <TIM_Base_SetConfig+0x124>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d103      	bne.n	8005e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	691a      	ldr	r2, [r3, #16]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	615a      	str	r2, [r3, #20]
}
 8005e9e:	bf00      	nop
 8005ea0:	3714      	adds	r7, #20
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	40010000 	.word	0x40010000
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	40010400 	.word	0x40010400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800
 8005ecc:	40001800 	.word	0x40001800
 8005ed0:	40001c00 	.word	0x40001c00
 8005ed4:	40002000 	.word	0x40002000

08005ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ee0:	bf00      	nop
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ef4:	bf00      	nop
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e03f      	b.n	8005f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d106      	bne.n	8005f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fd fb20 	bl	800356c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68da      	ldr	r2, [r3, #12]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f929 	bl	800619c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3708      	adds	r7, #8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}

08005f9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f9a:	b580      	push	{r7, lr}
 8005f9c:	b08a      	sub	sp, #40	; 0x28
 8005f9e:	af02      	add	r7, sp, #8
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	60b9      	str	r1, [r7, #8]
 8005fa4:	603b      	str	r3, [r7, #0]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	d17c      	bne.n	80060b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UART_Transmit+0x2c>
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e075      	b.n	80060b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d101      	bne.n	8005fd8 <HAL_UART_Transmit+0x3e>
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	e06e      	b.n	80060b6 <HAL_UART_Transmit+0x11c>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2221      	movs	r2, #33	; 0x21
 8005fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fee:	f7fd fb65 	bl	80036bc <HAL_GetTick>
 8005ff2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	88fa      	ldrh	r2, [r7, #6]
 8005ff8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	88fa      	ldrh	r2, [r7, #6]
 8005ffe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006008:	d108      	bne.n	800601c <HAL_UART_Transmit+0x82>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d104      	bne.n	800601c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e003      	b.n	8006024 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006020:	2300      	movs	r3, #0
 8006022:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800602c:	e02a      	b.n	8006084 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	2180      	movs	r1, #128	; 0x80
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f000 f840 	bl	80060be <UART_WaitOnFlagUntilTimeout>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e036      	b.n	80060b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10b      	bne.n	8006066 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800605c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	3302      	adds	r3, #2
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	e007      	b.n	8006076 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	781a      	ldrb	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	3301      	adds	r3, #1
 8006074:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800607a:	b29b      	uxth	r3, r3
 800607c:	3b01      	subs	r3, #1
 800607e:	b29a      	uxth	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1cf      	bne.n	800602e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2200      	movs	r2, #0
 8006096:	2140      	movs	r1, #64	; 0x40
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 f810 	bl	80060be <UART_WaitOnFlagUntilTimeout>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e006      	b.n	80060b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e000      	b.n	80060b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060b4:	2302      	movs	r3, #2
  }
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3720      	adds	r7, #32
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b090      	sub	sp, #64	; 0x40
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	4613      	mov	r3, r2
 80060cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060ce:	e050      	b.n	8006172 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d04c      	beq.n	8006172 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <UART_WaitOnFlagUntilTimeout+0x30>
 80060de:	f7fd faed 	bl	80036bc <HAL_GetTick>
 80060e2:	4602      	mov	r2, r0
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d241      	bcs.n	8006172 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	330c      	adds	r3, #12
 800610c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800610e:	637a      	str	r2, [r7, #52]	; 0x34
 8006110:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006114:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e5      	bne.n	80060ee <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	3314      	adds	r3, #20
 8006128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	e853 3f00 	ldrex	r3, [r3]
 8006130:	613b      	str	r3, [r7, #16]
   return(result);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f023 0301 	bic.w	r3, r3, #1
 8006138:	63bb      	str	r3, [r7, #56]	; 0x38
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3314      	adds	r3, #20
 8006140:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006142:	623a      	str	r2, [r7, #32]
 8006144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	69f9      	ldr	r1, [r7, #28]
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e5      	bne.n	8006122 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2220      	movs	r2, #32
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e00f      	b.n	8006192 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4013      	ands	r3, r2
 800617c:	68ba      	ldr	r2, [r7, #8]
 800617e:	429a      	cmp	r2, r3
 8006180:	bf0c      	ite	eq
 8006182:	2301      	moveq	r3, #1
 8006184:	2300      	movne	r3, #0
 8006186:	b2db      	uxtb	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	429a      	cmp	r2, r3
 800618e:	d09f      	beq.n	80060d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3740      	adds	r7, #64	; 0x40
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800619c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a0:	b0c0      	sub	sp, #256	; 0x100
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80061b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b8:	68d9      	ldr	r1, [r3, #12]
 80061ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	ea40 0301 	orr.w	r3, r0, r1
 80061c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	431a      	orrs	r2, r3
 80061dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80061e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80061f4:	f021 010c 	bic.w	r1, r1, #12
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006202:	430b      	orrs	r3, r1
 8006204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006216:	6999      	ldr	r1, [r3, #24]
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	ea40 0301 	orr.w	r3, r0, r1
 8006222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	4b8f      	ldr	r3, [pc, #572]	; (8006468 <UART_SetConfig+0x2cc>)
 800622c:	429a      	cmp	r2, r3
 800622e:	d005      	beq.n	800623c <UART_SetConfig+0xa0>
 8006230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	4b8d      	ldr	r3, [pc, #564]	; (800646c <UART_SetConfig+0x2d0>)
 8006238:	429a      	cmp	r2, r3
 800623a:	d104      	bne.n	8006246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800623c:	f7fe fa7a 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 8006240:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006244:	e003      	b.n	800624e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006246:	f7fe fa61 	bl	800470c <HAL_RCC_GetPCLK1Freq>
 800624a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800624e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006258:	f040 810c 	bne.w	8006474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800625c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006260:	2200      	movs	r2, #0
 8006262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006266:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800626a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800626e:	4622      	mov	r2, r4
 8006270:	462b      	mov	r3, r5
 8006272:	1891      	adds	r1, r2, r2
 8006274:	65b9      	str	r1, [r7, #88]	; 0x58
 8006276:	415b      	adcs	r3, r3
 8006278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800627a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800627e:	4621      	mov	r1, r4
 8006280:	eb12 0801 	adds.w	r8, r2, r1
 8006284:	4629      	mov	r1, r5
 8006286:	eb43 0901 	adc.w	r9, r3, r1
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800629a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800629e:	4690      	mov	r8, r2
 80062a0:	4699      	mov	r9, r3
 80062a2:	4623      	mov	r3, r4
 80062a4:	eb18 0303 	adds.w	r3, r8, r3
 80062a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062ac:	462b      	mov	r3, r5
 80062ae:	eb49 0303 	adc.w	r3, r9, r3
 80062b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80062c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80062ca:	460b      	mov	r3, r1
 80062cc:	18db      	adds	r3, r3, r3
 80062ce:	653b      	str	r3, [r7, #80]	; 0x50
 80062d0:	4613      	mov	r3, r2
 80062d2:	eb42 0303 	adc.w	r3, r2, r3
 80062d6:	657b      	str	r3, [r7, #84]	; 0x54
 80062d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80062dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80062e0:	f7fa fc34 	bl	8000b4c <__aeabi_uldivmod>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4b61      	ldr	r3, [pc, #388]	; (8006470 <UART_SetConfig+0x2d4>)
 80062ea:	fba3 2302 	umull	r2, r3, r3, r2
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	011c      	lsls	r4, r3, #4
 80062f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
 8006308:	1891      	adds	r1, r2, r2
 800630a:	64b9      	str	r1, [r7, #72]	; 0x48
 800630c:	415b      	adcs	r3, r3
 800630e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006314:	4641      	mov	r1, r8
 8006316:	eb12 0a01 	adds.w	sl, r2, r1
 800631a:	4649      	mov	r1, r9
 800631c:	eb43 0b01 	adc.w	fp, r3, r1
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800632c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006334:	4692      	mov	sl, r2
 8006336:	469b      	mov	fp, r3
 8006338:	4643      	mov	r3, r8
 800633a:	eb1a 0303 	adds.w	r3, sl, r3
 800633e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006342:	464b      	mov	r3, r9
 8006344:	eb4b 0303 	adc.w	r3, fp, r3
 8006348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800634c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006358:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800635c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006360:	460b      	mov	r3, r1
 8006362:	18db      	adds	r3, r3, r3
 8006364:	643b      	str	r3, [r7, #64]	; 0x40
 8006366:	4613      	mov	r3, r2
 8006368:	eb42 0303 	adc.w	r3, r2, r3
 800636c:	647b      	str	r3, [r7, #68]	; 0x44
 800636e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006376:	f7fa fbe9 	bl	8000b4c <__aeabi_uldivmod>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4611      	mov	r1, r2
 8006380:	4b3b      	ldr	r3, [pc, #236]	; (8006470 <UART_SetConfig+0x2d4>)
 8006382:	fba3 2301 	umull	r2, r3, r3, r1
 8006386:	095b      	lsrs	r3, r3, #5
 8006388:	2264      	movs	r2, #100	; 0x64
 800638a:	fb02 f303 	mul.w	r3, r2, r3
 800638e:	1acb      	subs	r3, r1, r3
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006396:	4b36      	ldr	r3, [pc, #216]	; (8006470 <UART_SetConfig+0x2d4>)
 8006398:	fba3 2302 	umull	r2, r3, r3, r2
 800639c:	095b      	lsrs	r3, r3, #5
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80063a4:	441c      	add	r4, r3
 80063a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80063b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	1891      	adds	r1, r2, r2
 80063be:	63b9      	str	r1, [r7, #56]	; 0x38
 80063c0:	415b      	adcs	r3, r3
 80063c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80063c8:	4641      	mov	r1, r8
 80063ca:	1851      	adds	r1, r2, r1
 80063cc:	6339      	str	r1, [r7, #48]	; 0x30
 80063ce:	4649      	mov	r1, r9
 80063d0:	414b      	adcs	r3, r1
 80063d2:	637b      	str	r3, [r7, #52]	; 0x34
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80063e0:	4659      	mov	r1, fp
 80063e2:	00cb      	lsls	r3, r1, #3
 80063e4:	4651      	mov	r1, sl
 80063e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ea:	4651      	mov	r1, sl
 80063ec:	00ca      	lsls	r2, r1, #3
 80063ee:	4610      	mov	r0, r2
 80063f0:	4619      	mov	r1, r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	4642      	mov	r2, r8
 80063f6:	189b      	adds	r3, r3, r2
 80063f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063fc:	464b      	mov	r3, r9
 80063fe:	460a      	mov	r2, r1
 8006400:	eb42 0303 	adc.w	r3, r2, r3
 8006404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006414:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800641c:	460b      	mov	r3, r1
 800641e:	18db      	adds	r3, r3, r3
 8006420:	62bb      	str	r3, [r7, #40]	; 0x28
 8006422:	4613      	mov	r3, r2
 8006424:	eb42 0303 	adc.w	r3, r2, r3
 8006428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800642a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800642e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006432:	f7fa fb8b 	bl	8000b4c <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4b0d      	ldr	r3, [pc, #52]	; (8006470 <UART_SetConfig+0x2d4>)
 800643c:	fba3 1302 	umull	r1, r3, r3, r2
 8006440:	095b      	lsrs	r3, r3, #5
 8006442:	2164      	movs	r1, #100	; 0x64
 8006444:	fb01 f303 	mul.w	r3, r1, r3
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	00db      	lsls	r3, r3, #3
 800644c:	3332      	adds	r3, #50	; 0x32
 800644e:	4a08      	ldr	r2, [pc, #32]	; (8006470 <UART_SetConfig+0x2d4>)
 8006450:	fba2 2303 	umull	r2, r3, r2, r3
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	f003 0207 	and.w	r2, r3, #7
 800645a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4422      	add	r2, r4
 8006462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006464:	e106      	b.n	8006674 <UART_SetConfig+0x4d8>
 8006466:	bf00      	nop
 8006468:	40011000 	.word	0x40011000
 800646c:	40011400 	.word	0x40011400
 8006470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006478:	2200      	movs	r2, #0
 800647a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800647e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006486:	4642      	mov	r2, r8
 8006488:	464b      	mov	r3, r9
 800648a:	1891      	adds	r1, r2, r2
 800648c:	6239      	str	r1, [r7, #32]
 800648e:	415b      	adcs	r3, r3
 8006490:	627b      	str	r3, [r7, #36]	; 0x24
 8006492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006496:	4641      	mov	r1, r8
 8006498:	1854      	adds	r4, r2, r1
 800649a:	4649      	mov	r1, r9
 800649c:	eb43 0501 	adc.w	r5, r3, r1
 80064a0:	f04f 0200 	mov.w	r2, #0
 80064a4:	f04f 0300 	mov.w	r3, #0
 80064a8:	00eb      	lsls	r3, r5, #3
 80064aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064ae:	00e2      	lsls	r2, r4, #3
 80064b0:	4614      	mov	r4, r2
 80064b2:	461d      	mov	r5, r3
 80064b4:	4643      	mov	r3, r8
 80064b6:	18e3      	adds	r3, r4, r3
 80064b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064bc:	464b      	mov	r3, r9
 80064be:	eb45 0303 	adc.w	r3, r5, r3
 80064c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80064e2:	4629      	mov	r1, r5
 80064e4:	008b      	lsls	r3, r1, #2
 80064e6:	4621      	mov	r1, r4
 80064e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ec:	4621      	mov	r1, r4
 80064ee:	008a      	lsls	r2, r1, #2
 80064f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80064f4:	f7fa fb2a 	bl	8000b4c <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4b60      	ldr	r3, [pc, #384]	; (8006680 <UART_SetConfig+0x4e4>)
 80064fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	011c      	lsls	r4, r3, #4
 8006506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800650a:	2200      	movs	r2, #0
 800650c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006510:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006518:	4642      	mov	r2, r8
 800651a:	464b      	mov	r3, r9
 800651c:	1891      	adds	r1, r2, r2
 800651e:	61b9      	str	r1, [r7, #24]
 8006520:	415b      	adcs	r3, r3
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006528:	4641      	mov	r1, r8
 800652a:	1851      	adds	r1, r2, r1
 800652c:	6139      	str	r1, [r7, #16]
 800652e:	4649      	mov	r1, r9
 8006530:	414b      	adcs	r3, r1
 8006532:	617b      	str	r3, [r7, #20]
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006540:	4659      	mov	r1, fp
 8006542:	00cb      	lsls	r3, r1, #3
 8006544:	4651      	mov	r1, sl
 8006546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800654a:	4651      	mov	r1, sl
 800654c:	00ca      	lsls	r2, r1, #3
 800654e:	4610      	mov	r0, r2
 8006550:	4619      	mov	r1, r3
 8006552:	4603      	mov	r3, r0
 8006554:	4642      	mov	r2, r8
 8006556:	189b      	adds	r3, r3, r2
 8006558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800655c:	464b      	mov	r3, r9
 800655e:	460a      	mov	r2, r1
 8006560:	eb42 0303 	adc.w	r3, r2, r3
 8006564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	67bb      	str	r3, [r7, #120]	; 0x78
 8006572:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006574:	f04f 0200 	mov.w	r2, #0
 8006578:	f04f 0300 	mov.w	r3, #0
 800657c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006580:	4649      	mov	r1, r9
 8006582:	008b      	lsls	r3, r1, #2
 8006584:	4641      	mov	r1, r8
 8006586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800658a:	4641      	mov	r1, r8
 800658c:	008a      	lsls	r2, r1, #2
 800658e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006592:	f7fa fadb 	bl	8000b4c <__aeabi_uldivmod>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4611      	mov	r1, r2
 800659c:	4b38      	ldr	r3, [pc, #224]	; (8006680 <UART_SetConfig+0x4e4>)
 800659e:	fba3 2301 	umull	r2, r3, r3, r1
 80065a2:	095b      	lsrs	r3, r3, #5
 80065a4:	2264      	movs	r2, #100	; 0x64
 80065a6:	fb02 f303 	mul.w	r3, r2, r3
 80065aa:	1acb      	subs	r3, r1, r3
 80065ac:	011b      	lsls	r3, r3, #4
 80065ae:	3332      	adds	r3, #50	; 0x32
 80065b0:	4a33      	ldr	r2, [pc, #204]	; (8006680 <UART_SetConfig+0x4e4>)
 80065b2:	fba2 2303 	umull	r2, r3, r2, r3
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065bc:	441c      	add	r4, r3
 80065be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065c2:	2200      	movs	r2, #0
 80065c4:	673b      	str	r3, [r7, #112]	; 0x70
 80065c6:	677a      	str	r2, [r7, #116]	; 0x74
 80065c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80065cc:	4642      	mov	r2, r8
 80065ce:	464b      	mov	r3, r9
 80065d0:	1891      	adds	r1, r2, r2
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	415b      	adcs	r3, r3
 80065d6:	60fb      	str	r3, [r7, #12]
 80065d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065dc:	4641      	mov	r1, r8
 80065de:	1851      	adds	r1, r2, r1
 80065e0:	6039      	str	r1, [r7, #0]
 80065e2:	4649      	mov	r1, r9
 80065e4:	414b      	adcs	r3, r1
 80065e6:	607b      	str	r3, [r7, #4]
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80065f4:	4659      	mov	r1, fp
 80065f6:	00cb      	lsls	r3, r1, #3
 80065f8:	4651      	mov	r1, sl
 80065fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065fe:	4651      	mov	r1, sl
 8006600:	00ca      	lsls	r2, r1, #3
 8006602:	4610      	mov	r0, r2
 8006604:	4619      	mov	r1, r3
 8006606:	4603      	mov	r3, r0
 8006608:	4642      	mov	r2, r8
 800660a:	189b      	adds	r3, r3, r2
 800660c:	66bb      	str	r3, [r7, #104]	; 0x68
 800660e:	464b      	mov	r3, r9
 8006610:	460a      	mov	r2, r1
 8006612:	eb42 0303 	adc.w	r3, r2, r3
 8006616:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	663b      	str	r3, [r7, #96]	; 0x60
 8006622:	667a      	str	r2, [r7, #100]	; 0x64
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	f04f 0300 	mov.w	r3, #0
 800662c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006630:	4649      	mov	r1, r9
 8006632:	008b      	lsls	r3, r1, #2
 8006634:	4641      	mov	r1, r8
 8006636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800663a:	4641      	mov	r1, r8
 800663c:	008a      	lsls	r2, r1, #2
 800663e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006642:	f7fa fa83 	bl	8000b4c <__aeabi_uldivmod>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4b0d      	ldr	r3, [pc, #52]	; (8006680 <UART_SetConfig+0x4e4>)
 800664c:	fba3 1302 	umull	r1, r3, r3, r2
 8006650:	095b      	lsrs	r3, r3, #5
 8006652:	2164      	movs	r1, #100	; 0x64
 8006654:	fb01 f303 	mul.w	r3, r1, r3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	011b      	lsls	r3, r3, #4
 800665c:	3332      	adds	r3, #50	; 0x32
 800665e:	4a08      	ldr	r2, [pc, #32]	; (8006680 <UART_SetConfig+0x4e4>)
 8006660:	fba2 2303 	umull	r2, r3, r2, r3
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	f003 020f 	and.w	r2, r3, #15
 800666a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4422      	add	r2, r4
 8006672:	609a      	str	r2, [r3, #8]
}
 8006674:	bf00      	nop
 8006676:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800667a:	46bd      	mov	sp, r7
 800667c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006680:	51eb851f 	.word	0x51eb851f

08006684 <__NVIC_SetPriority>:
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	6039      	str	r1, [r7, #0]
 800668e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006694:	2b00      	cmp	r3, #0
 8006696:	db0a      	blt.n	80066ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	b2da      	uxtb	r2, r3
 800669c:	490c      	ldr	r1, [pc, #48]	; (80066d0 <__NVIC_SetPriority+0x4c>)
 800669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a2:	0112      	lsls	r2, r2, #4
 80066a4:	b2d2      	uxtb	r2, r2
 80066a6:	440b      	add	r3, r1
 80066a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80066ac:	e00a      	b.n	80066c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	4908      	ldr	r1, [pc, #32]	; (80066d4 <__NVIC_SetPriority+0x50>)
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	3b04      	subs	r3, #4
 80066bc:	0112      	lsls	r2, r2, #4
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	440b      	add	r3, r1
 80066c2:	761a      	strb	r2, [r3, #24]
}
 80066c4:	bf00      	nop
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr
 80066d0:	e000e100 	.word	0xe000e100
 80066d4:	e000ed00 	.word	0xe000ed00

080066d8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80066dc:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <SysTick_Handler+0x1c>)
 80066de:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066e0:	f002 f8e6 	bl	80088b0 <xTaskGetSchedulerState>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d001      	beq.n	80066ee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066ea:	f002 ffcd 	bl	8009688 <xPortSysTickHandler>
  }
}
 80066ee:	bf00      	nop
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	e000e010 	.word	0xe000e010

080066f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066fc:	2100      	movs	r1, #0
 80066fe:	f06f 0004 	mvn.w	r0, #4
 8006702:	f7ff ffbf 	bl	8006684 <__NVIC_SetPriority>
#endif
}
 8006706:	bf00      	nop
 8006708:	bd80      	pop	{r7, pc}
	...

0800670c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006712:	f3ef 8305 	mrs	r3, IPSR
 8006716:	603b      	str	r3, [r7, #0]
  return(result);
 8006718:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800671e:	f06f 0305 	mvn.w	r3, #5
 8006722:	607b      	str	r3, [r7, #4]
 8006724:	e00c      	b.n	8006740 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006726:	4b0a      	ldr	r3, [pc, #40]	; (8006750 <osKernelInitialize+0x44>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800672e:	4b08      	ldr	r3, [pc, #32]	; (8006750 <osKernelInitialize+0x44>)
 8006730:	2201      	movs	r2, #1
 8006732:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006734:	2300      	movs	r3, #0
 8006736:	607b      	str	r3, [r7, #4]
 8006738:	e002      	b.n	8006740 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800673a:	f04f 33ff 	mov.w	r3, #4294967295
 800673e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006740:	687b      	ldr	r3, [r7, #4]
}
 8006742:	4618      	mov	r0, r3
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	20000598 	.word	0x20000598

08006754 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800675a:	f3ef 8305 	mrs	r3, IPSR
 800675e:	603b      	str	r3, [r7, #0]
  return(result);
 8006760:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006762:	2b00      	cmp	r3, #0
 8006764:	d003      	beq.n	800676e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006766:	f06f 0305 	mvn.w	r3, #5
 800676a:	607b      	str	r3, [r7, #4]
 800676c:	e010      	b.n	8006790 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800676e:	4b0b      	ldr	r3, [pc, #44]	; (800679c <osKernelStart+0x48>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d109      	bne.n	800678a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006776:	f7ff ffbf 	bl	80066f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800677a:	4b08      	ldr	r3, [pc, #32]	; (800679c <osKernelStart+0x48>)
 800677c:	2202      	movs	r2, #2
 800677e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006780:	f001 fc18 	bl	8007fb4 <vTaskStartScheduler>
      stat = osOK;
 8006784:	2300      	movs	r3, #0
 8006786:	607b      	str	r3, [r7, #4]
 8006788:	e002      	b.n	8006790 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800678a:	f04f 33ff 	mov.w	r3, #4294967295
 800678e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006790:	687b      	ldr	r3, [r7, #4]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3708      	adds	r7, #8
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20000598 	.word	0x20000598

080067a0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067a6:	f3ef 8305 	mrs	r3, IPSR
 80067aa:	603b      	str	r3, [r7, #0]
  return(result);
 80067ac:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80067b2:	f001 fd2b 	bl	800820c <xTaskGetTickCountFromISR>
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	e002      	b.n	80067c0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80067ba:	f001 fd17 	bl	80081ec <xTaskGetTickCount>
 80067be:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80067c0:	687b      	ldr	r3, [r7, #4]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 80067ca:	b480      	push	{r7}
 80067cc:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 80067ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08e      	sub	sp, #56	; 0x38
 80067e0:	af04      	add	r7, sp, #16
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ec:	f3ef 8305 	mrs	r3, IPSR
 80067f0:	617b      	str	r3, [r7, #20]
  return(result);
 80067f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d17e      	bne.n	80068f6 <osThreadNew+0x11a>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d07b      	beq.n	80068f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006802:	2318      	movs	r3, #24
 8006804:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800680a:	f04f 33ff 	mov.w	r3, #4294967295
 800680e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d045      	beq.n	80068a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <osThreadNew+0x48>
        name = attr->name;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d008      	beq.n	800684a <osThreadNew+0x6e>
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	2b38      	cmp	r3, #56	; 0x38
 800683c:	d805      	bhi.n	800684a <osThreadNew+0x6e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d001      	beq.n	800684e <osThreadNew+0x72>
        return (NULL);
 800684a:	2300      	movs	r3, #0
 800684c:	e054      	b.n	80068f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00e      	beq.n	8006884 <osThreadNew+0xa8>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2ba7      	cmp	r3, #167	; 0xa7
 800686c:	d90a      	bls.n	8006884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <osThreadNew+0xa8>
        mem = 1;
 800687e:	2301      	movs	r3, #1
 8006880:	61bb      	str	r3, [r7, #24]
 8006882:	e010      	b.n	80068a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d10c      	bne.n	80068a6 <osThreadNew+0xca>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d108      	bne.n	80068a6 <osThreadNew+0xca>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <osThreadNew+0xca>
          mem = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	e001      	b.n	80068a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d110      	bne.n	80068ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80068b4:	9202      	str	r2, [sp, #8]
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	6a3a      	ldr	r2, [r7, #32]
 80068c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f001 f940 	bl	8007b48 <xTaskCreateStatic>
 80068c8:	4603      	mov	r3, r0
 80068ca:	613b      	str	r3, [r7, #16]
 80068cc:	e013      	b.n	80068f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d110      	bne.n	80068f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	f107 0310 	add.w	r3, r7, #16
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f001 f98b 	bl	8007c02 <xTaskCreate>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d001      	beq.n	80068f6 <osThreadNew+0x11a>
            hTask = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068f6:	693b      	ldr	r3, [r7, #16]
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3728      	adds	r7, #40	; 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <osDelayUntil>:
  }

  return (stat);
}

osStatus_t osDelayUntil (uint32_t ticks) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006908:	f3ef 8305 	mrs	r3, IPSR
 800690c:	60fb      	str	r3, [r7, #12]
  return(result);
 800690e:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <osDelayUntil+0x1c>
    stat = osErrorISR;
 8006914:	f06f 0305 	mvn.w	r3, #5
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	e019      	b.n	8006950 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800691c:	2300      	movs	r3, #0
 800691e:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8006920:	f001 fc64 	bl	80081ec <xTaskGetTickCount>
 8006924:	4603      	mov	r3, r0
 8006926:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <osDelayUntil+0x4a>
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	db06      	blt.n	800694a <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800693c:	f107 0308 	add.w	r3, r7, #8
 8006940:	6939      	ldr	r1, [r7, #16]
 8006942:	4618      	mov	r0, r3
 8006944:	f001 fab8 	bl	8007eb8 <vTaskDelayUntil>
 8006948:	e002      	b.n	8006950 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800694a:	f06f 0303 	mvn.w	r3, #3
 800694e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006950:	697b      	ldr	r3, [r7, #20]
}
 8006952:	4618      	mov	r0, r3
 8006954:	3718      	adds	r7, #24
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800695a:	b580      	push	{r7, lr}
 800695c:	b088      	sub	sp, #32
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006966:	f3ef 8305 	mrs	r3, IPSR
 800696a:	60bb      	str	r3, [r7, #8]
  return(result);
 800696c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800696e:	2b00      	cmp	r3, #0
 8006970:	d174      	bne.n	8006a5c <osMutexNew+0x102>
    if (attr != NULL) {
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	e001      	b.n	8006984 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <osMutexNew+0x3a>
      rmtx = 1U;
 800698e:	2301      	movs	r3, #1
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	e001      	b.n	8006998 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f003 0308 	and.w	r3, r3, #8
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d15c      	bne.n	8006a5c <osMutexNew+0x102>
      mem = -1;
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295
 80069a6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d015      	beq.n	80069da <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d006      	beq.n	80069c4 <osMutexNew+0x6a>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2b4f      	cmp	r3, #79	; 0x4f
 80069bc:	d902      	bls.n	80069c4 <osMutexNew+0x6a>
          mem = 1;
 80069be:	2301      	movs	r3, #1
 80069c0:	613b      	str	r3, [r7, #16]
 80069c2:	e00c      	b.n	80069de <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d108      	bne.n	80069de <osMutexNew+0x84>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d104      	bne.n	80069de <osMutexNew+0x84>
            mem = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	e001      	b.n	80069de <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d112      	bne.n	8006a0a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d007      	beq.n	80069fa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	4619      	mov	r1, r3
 80069f0:	2004      	movs	r0, #4
 80069f2:	f000 fb18 	bl	8007026 <xQueueCreateMutexStatic>
 80069f6:	61f8      	str	r0, [r7, #28]
 80069f8:	e016      	b.n	8006a28 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4619      	mov	r1, r3
 8006a00:	2001      	movs	r0, #1
 8006a02:	f000 fb10 	bl	8007026 <xQueueCreateMutexStatic>
 8006a06:	61f8      	str	r0, [r7, #28]
 8006a08:	e00e      	b.n	8006a28 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10b      	bne.n	8006a28 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d004      	beq.n	8006a20 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006a16:	2004      	movs	r0, #4
 8006a18:	f000 faed 	bl	8006ff6 <xQueueCreateMutex>
 8006a1c:	61f8      	str	r0, [r7, #28]
 8006a1e:	e003      	b.n	8006a28 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006a20:	2001      	movs	r0, #1
 8006a22:	f000 fae8 	bl	8006ff6 <xQueueCreateMutex>
 8006a26:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <osMutexNew+0xee>
        if (attr != NULL) {
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d003      	beq.n	8006a3c <osMutexNew+0xe2>
          name = attr->name;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60fb      	str	r3, [r7, #12]
 8006a3a:	e001      	b.n	8006a40 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006a40:	68f9      	ldr	r1, [r7, #12]
 8006a42:	69f8      	ldr	r0, [r7, #28]
 8006a44:	f001 f822 	bl	8007a8c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d006      	beq.n	8006a5c <osMutexNew+0x102>
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d003      	beq.n	8006a5c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f043 0301 	orr.w	r3, r3, #1
 8006a5a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006a5c:	69fb      	ldr	r3, [r7, #28]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b086      	sub	sp, #24
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f023 0301 	bic.w	r3, r3, #1
 8006a76:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f003 0301 	and.w	r3, r3, #1
 8006a7e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006a80:	2300      	movs	r3, #0
 8006a82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a84:	f3ef 8305 	mrs	r3, IPSR
 8006a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a8a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d003      	beq.n	8006a98 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006a90:	f06f 0305 	mvn.w	r3, #5
 8006a94:	617b      	str	r3, [r7, #20]
 8006a96:	e02c      	b.n	8006af2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d103      	bne.n	8006aa6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006a9e:	f06f 0303 	mvn.w	r3, #3
 8006aa2:	617b      	str	r3, [r7, #20]
 8006aa4:	e025      	b.n	8006af2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d011      	beq.n	8006ad0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6938      	ldr	r0, [r7, #16]
 8006ab0:	f000 fb08 	bl	80070c4 <xQueueTakeMutexRecursive>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d01b      	beq.n	8006af2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006ac0:	f06f 0301 	mvn.w	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
 8006ac6:	e014      	b.n	8006af2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006ac8:	f06f 0302 	mvn.w	r3, #2
 8006acc:	617b      	str	r3, [r7, #20]
 8006ace:	e010      	b.n	8006af2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006ad0:	6839      	ldr	r1, [r7, #0]
 8006ad2:	6938      	ldr	r0, [r7, #16]
 8006ad4:	f000 fda6 	bl	8007624 <xQueueSemaphoreTake>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d009      	beq.n	8006af2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006ae4:	f06f 0301 	mvn.w	r3, #1
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	e002      	b.n	8006af2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006aec:	f06f 0302 	mvn.w	r3, #2
 8006af0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006af2:	697b      	ldr	r3, [r7, #20]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f023 0301 	bic.w	r3, r3, #1
 8006b0a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b18:	f3ef 8305 	mrs	r3, IPSR
 8006b1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b1e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <osMutexRelease+0x30>
    stat = osErrorISR;
 8006b24:	f06f 0305 	mvn.w	r3, #5
 8006b28:	617b      	str	r3, [r7, #20]
 8006b2a:	e01f      	b.n	8006b6c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d103      	bne.n	8006b3a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006b32:	f06f 0303 	mvn.w	r3, #3
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	e018      	b.n	8006b6c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006b40:	6938      	ldr	r0, [r7, #16]
 8006b42:	f000 fa8b 	bl	800705c <xQueueGiveMutexRecursive>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d00f      	beq.n	8006b6c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006b4c:	f06f 0302 	mvn.w	r3, #2
 8006b50:	617b      	str	r3, [r7, #20]
 8006b52:	e00b      	b.n	8006b6c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006b54:	2300      	movs	r3, #0
 8006b56:	2200      	movs	r2, #0
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6938      	ldr	r0, [r7, #16]
 8006b5c:	f000 fae8 	bl	8007130 <xQueueGenericSend>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d002      	beq.n	8006b6c <osMutexRelease+0x70>
        stat = osErrorResource;
 8006b66:	f06f 0302 	mvn.w	r3, #2
 8006b6a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006b6c:	697b      	ldr	r3, [r7, #20]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4a07      	ldr	r2, [pc, #28]	; (8006ba4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006b88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	4a06      	ldr	r2, [pc, #24]	; (8006ba8 <vApplicationGetIdleTaskMemory+0x30>)
 8006b8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2280      	movs	r2, #128	; 0x80
 8006b94:	601a      	str	r2, [r3, #0]
}
 8006b96:	bf00      	nop
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	2000059c 	.word	0x2000059c
 8006ba8:	20000644 	.word	0x20000644

08006bac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006bac:	b480      	push	{r7}
 8006bae:	b085      	sub	sp, #20
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	4a07      	ldr	r2, [pc, #28]	; (8006bd8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006bbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	4a06      	ldr	r2, [pc, #24]	; (8006bdc <vApplicationGetTimerTaskMemory+0x30>)
 8006bc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bca:	601a      	str	r2, [r3, #0]
}
 8006bcc:	bf00      	nop
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	20000844 	.word	0x20000844
 8006bdc:	200008ec 	.word	0x200008ec

08006be0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f103 0208 	add.w	r2, r3, #8
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f103 0208 	add.w	r2, r3, #8
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f103 0208 	add.w	r2, r3, #8
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d103      	bne.n	8006ca2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	e00c      	b.n	8006cbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	60fb      	str	r3, [r7, #12]
 8006ca8:	e002      	b.n	8006cb0 <vListInsert+0x2e>
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d2f6      	bcs.n	8006caa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	601a      	str	r2, [r3, #0]
}
 8006ce8:	bf00      	nop
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	691b      	ldr	r3, [r3, #16]
 8006d00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6892      	ldr	r2, [r2, #8]
 8006d0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6852      	ldr	r2, [r2, #4]
 8006d14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d103      	bne.n	8006d28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	1e5a      	subs	r2, r3, #1
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10a      	bne.n	8006d72 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d6e:	bf00      	nop
 8006d70:	e7fe      	b.n	8006d70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006d72:	f002 fbf7 	bl	8009564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7e:	68f9      	ldr	r1, [r7, #12]
 8006d80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d82:	fb01 f303 	mul.w	r3, r1, r3
 8006d86:	441a      	add	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da2:	3b01      	subs	r3, #1
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	441a      	add	r2, r3
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	22ff      	movs	r2, #255	; 0xff
 8006db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d114      	bne.n	8006df2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01a      	beq.n	8006e06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	3310      	adds	r3, #16
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f001 fb99 	bl	800850c <xTaskRemoveFromEventList>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d012      	beq.n	8006e06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006de0:	4b0c      	ldr	r3, [pc, #48]	; (8006e14 <xQueueGenericReset+0xcc>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	e009      	b.n	8006e06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3310      	adds	r3, #16
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff fef2 	bl	8006be0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3324      	adds	r3, #36	; 0x24
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff feed 	bl	8006be0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e06:	f002 fbdd 	bl	80095c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e0a:	2301      	movs	r3, #1
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08e      	sub	sp, #56	; 0x38
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
 8006e24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d10a      	bne.n	8006e42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e30:	f383 8811 	msr	BASEPRI, r3
 8006e34:	f3bf 8f6f 	isb	sy
 8006e38:	f3bf 8f4f 	dsb	sy
 8006e3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <xQueueGenericCreateStatic+0x52>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <xQueueGenericCreateStatic+0x56>
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e000      	b.n	8006e70 <xQueueGenericCreateStatic+0x58>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	623b      	str	r3, [r7, #32]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <xQueueGenericCreateStatic+0x7e>
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <xQueueGenericCreateStatic+0x82>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e000      	b.n	8006e9c <xQueueGenericCreateStatic+0x84>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10a      	bne.n	8006eb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	61fb      	str	r3, [r7, #28]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006eb6:	2350      	movs	r3, #80	; 0x50
 8006eb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b50      	cmp	r3, #80	; 0x50
 8006ebe:	d00a      	beq.n	8006ed6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec4:	f383 8811 	msr	BASEPRI, r3
 8006ec8:	f3bf 8f6f 	isb	sy
 8006ecc:	f3bf 8f4f 	dsb	sy
 8006ed0:	61bb      	str	r3, [r7, #24]
}
 8006ed2:	bf00      	nop
 8006ed4:	e7fe      	b.n	8006ed4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ed6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00d      	beq.n	8006efe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006eea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 f83f 	bl	8006f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3730      	adds	r7, #48	; 0x30
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b08a      	sub	sp, #40	; 0x28
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4613      	mov	r3, r2
 8006f14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	613b      	str	r3, [r7, #16]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	fb02 f303 	mul.w	r3, r2, r3
 8006f3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	3350      	adds	r3, #80	; 0x50
 8006f40:	4618      	mov	r0, r3
 8006f42:	f002 fc31 	bl	80097a8 <pvPortMalloc>
 8006f46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d011      	beq.n	8006f72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	3350      	adds	r3, #80	; 0x50
 8006f56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f60:	79fa      	ldrb	r2, [r7, #7]
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	4613      	mov	r3, r2
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	68b9      	ldr	r1, [r7, #8]
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f000 f805 	bl	8006f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f72:	69bb      	ldr	r3, [r7, #24]
	}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3720      	adds	r7, #32
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d103      	bne.n	8006f98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	601a      	str	r2, [r3, #0]
 8006f96:	e002      	b.n	8006f9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006faa:	2101      	movs	r1, #1
 8006fac:	69b8      	ldr	r0, [r7, #24]
 8006fae:	f7ff fecb 	bl	8006d48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006fb2:	69bb      	ldr	r3, [r7, #24]
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006fba:	bf00      	nop
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b082      	sub	sp, #8
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00e      	beq.n	8006fee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2100      	movs	r1, #0
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f8a1 	bl	8007130 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006fee:	bf00      	nop
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b086      	sub	sp, #24
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007000:	2301      	movs	r3, #1
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	461a      	mov	r2, r3
 800700c:	6939      	ldr	r1, [r7, #16]
 800700e:	6978      	ldr	r0, [r7, #20]
 8007010:	f7ff ff7a 	bl	8006f08 <xQueueGenericCreate>
 8007014:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f7ff ffd3 	bl	8006fc2 <prvInitialiseMutex>

		return xNewQueue;
 800701c:	68fb      	ldr	r3, [r7, #12]
	}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007026:	b580      	push	{r7, lr}
 8007028:	b088      	sub	sp, #32
 800702a:	af02      	add	r7, sp, #8
 800702c:	4603      	mov	r3, r0
 800702e:	6039      	str	r1, [r7, #0]
 8007030:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007032:	2301      	movs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
 8007036:	2300      	movs	r3, #0
 8007038:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2200      	movs	r2, #0
 8007042:	6939      	ldr	r1, [r7, #16]
 8007044:	6978      	ldr	r0, [r7, #20]
 8007046:	f7ff fee7 	bl	8006e18 <xQueueGenericCreateStatic>
 800704a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800704c:	68f8      	ldr	r0, [r7, #12]
 800704e:	f7ff ffb8 	bl	8006fc2 <prvInitialiseMutex>

		return xNewQueue;
 8007052:	68fb      	ldr	r3, [r7, #12]
	}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800705c:	b590      	push	{r4, r7, lr}
 800705e:	b087      	sub	sp, #28
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	60fb      	str	r3, [r7, #12]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	689c      	ldr	r4, [r3, #8]
 8007088:	f001 fc02 	bl	8008890 <xTaskGetCurrentTaskHandle>
 800708c:	4603      	mov	r3, r0
 800708e:	429c      	cmp	r4, r3
 8007090:	d111      	bne.n	80070b6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	1e5a      	subs	r2, r3, #1
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d105      	bne.n	80070b0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80070a4:	2300      	movs	r3, #0
 80070a6:	2200      	movs	r2, #0
 80070a8:	2100      	movs	r1, #0
 80070aa:	6938      	ldr	r0, [r7, #16]
 80070ac:	f000 f840 	bl	8007130 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80070b0:	2301      	movs	r3, #1
 80070b2:	617b      	str	r3, [r7, #20]
 80070b4:	e001      	b.n	80070ba <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80070ba:	697b      	ldr	r3, [r7, #20]
	}
 80070bc:	4618      	mov	r0, r3
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd90      	pop	{r4, r7, pc}

080070c4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80070c4:	b590      	push	{r4, r7, lr}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	60fb      	str	r3, [r7, #12]
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	689c      	ldr	r4, [r3, #8]
 80070f2:	f001 fbcd 	bl	8008890 <xTaskGetCurrentTaskHandle>
 80070f6:	4603      	mov	r3, r0
 80070f8:	429c      	cmp	r4, r3
 80070fa:	d107      	bne.n	800710c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007106:	2301      	movs	r3, #1
 8007108:	617b      	str	r3, [r7, #20]
 800710a:	e00c      	b.n	8007126 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6938      	ldr	r0, [r7, #16]
 8007110:	f000 fa88 	bl	8007624 <xQueueSemaphoreTake>
 8007114:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007126:	697b      	ldr	r3, [r7, #20]
	}
 8007128:	4618      	mov	r0, r3
 800712a:	371c      	adds	r7, #28
 800712c:	46bd      	mov	sp, r7
 800712e:	bd90      	pop	{r4, r7, pc}

08007130 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08e      	sub	sp, #56	; 0x38
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800713e:	2300      	movs	r3, #0
 8007140:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <xQueueGenericSend+0x32>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <xQueueGenericSend+0x40>
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <xQueueGenericSend+0x44>
 8007170:	2301      	movs	r3, #1
 8007172:	e000      	b.n	8007176 <xQueueGenericSend+0x46>
 8007174:	2300      	movs	r3, #0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <xQueueGenericSend+0x60>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b02      	cmp	r3, #2
 8007194:	d103      	bne.n	800719e <xQueueGenericSend+0x6e>
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719a:	2b01      	cmp	r3, #1
 800719c:	d101      	bne.n	80071a2 <xQueueGenericSend+0x72>
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <xQueueGenericSend+0x74>
 80071a2:	2300      	movs	r3, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10a      	bne.n	80071be <xQueueGenericSend+0x8e>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	623b      	str	r3, [r7, #32]
}
 80071ba:	bf00      	nop
 80071bc:	e7fe      	b.n	80071bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071be:	f001 fb77 	bl	80088b0 <xTaskGetSchedulerState>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <xQueueGenericSend+0x9e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <xQueueGenericSend+0xa2>
 80071ce:	2301      	movs	r3, #1
 80071d0:	e000      	b.n	80071d4 <xQueueGenericSend+0xa4>
 80071d2:	2300      	movs	r3, #0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xQueueGenericSend+0xbe>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	61fb      	str	r3, [r7, #28]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071ee:	f002 f9b9 	bl	8009564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d302      	bcc.n	8007204 <xQueueGenericSend+0xd4>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b02      	cmp	r3, #2
 8007202:	d129      	bne.n	8007258 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800720a:	f000 fb2f 	bl	800786c <prvCopyDataToQueue>
 800720e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	d010      	beq.n	800723a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	3324      	adds	r3, #36	; 0x24
 800721c:	4618      	mov	r0, r3
 800721e:	f001 f975 	bl	800850c <xTaskRemoveFromEventList>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d013      	beq.n	8007250 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007228:	4b3f      	ldr	r3, [pc, #252]	; (8007328 <xQueueGenericSend+0x1f8>)
 800722a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	e00a      	b.n	8007250 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007240:	4b39      	ldr	r3, [pc, #228]	; (8007328 <xQueueGenericSend+0x1f8>)
 8007242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007250:	f002 f9b8 	bl	80095c4 <vPortExitCritical>
				return pdPASS;
 8007254:	2301      	movs	r3, #1
 8007256:	e063      	b.n	8007320 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800725e:	f002 f9b1 	bl	80095c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007262:	2300      	movs	r3, #0
 8007264:	e05c      	b.n	8007320 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007268:	2b00      	cmp	r3, #0
 800726a:	d106      	bne.n	800727a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800726c:	f107 0314 	add.w	r3, r7, #20
 8007270:	4618      	mov	r0, r3
 8007272:	f001 f9af 	bl	80085d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007276:	2301      	movs	r3, #1
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800727a:	f002 f9a3 	bl	80095c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800727e:	f000 ff09 	bl	8008094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007282:	f002 f96f 	bl	8009564 <vPortEnterCritical>
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800728c:	b25b      	sxtb	r3, r3
 800728e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007292:	d103      	bne.n	800729c <xQueueGenericSend+0x16c>
 8007294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800729c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072a2:	b25b      	sxtb	r3, r3
 80072a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a8:	d103      	bne.n	80072b2 <xQueueGenericSend+0x182>
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072b2:	f002 f987 	bl	80095c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072b6:	1d3a      	adds	r2, r7, #4
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	4611      	mov	r1, r2
 80072be:	4618      	mov	r0, r3
 80072c0:	f001 f99e 	bl	8008600 <xTaskCheckForTimeOut>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d124      	bne.n	8007314 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072cc:	f000 fbc6 	bl	8007a5c <prvIsQueueFull>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d018      	beq.n	8007308 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d8:	3310      	adds	r3, #16
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	4611      	mov	r1, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 f8c4 	bl	800846c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072e6:	f000 fb51 	bl	800798c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072ea:	f000 fee1 	bl	80080b0 <xTaskResumeAll>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f47f af7c 	bne.w	80071ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80072f6:	4b0c      	ldr	r3, [pc, #48]	; (8007328 <xQueueGenericSend+0x1f8>)
 80072f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	e772      	b.n	80071ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800730a:	f000 fb3f 	bl	800798c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800730e:	f000 fecf 	bl	80080b0 <xTaskResumeAll>
 8007312:	e76c      	b.n	80071ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007316:	f000 fb39 	bl	800798c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800731a:	f000 fec9 	bl	80080b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800731e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007320:	4618      	mov	r0, r3
 8007322:	3738      	adds	r7, #56	; 0x38
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	e000ed04 	.word	0xe000ed04

0800732c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b090      	sub	sp, #64	; 0x40
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800733e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d103      	bne.n	8007368 <xQueueGenericSendFromISR+0x3c>
 8007360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <xQueueGenericSendFromISR+0x40>
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <xQueueGenericSendFromISR+0x42>
 800736c:	2300      	movs	r3, #0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007376:	f383 8811 	msr	BASEPRI, r3
 800737a:	f3bf 8f6f 	isb	sy
 800737e:	f3bf 8f4f 	dsb	sy
 8007382:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007384:	bf00      	nop
 8007386:	e7fe      	b.n	8007386 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	2b02      	cmp	r3, #2
 800738c:	d103      	bne.n	8007396 <xQueueGenericSendFromISR+0x6a>
 800738e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <xQueueGenericSendFromISR+0x6e>
 8007396:	2301      	movs	r3, #1
 8007398:	e000      	b.n	800739c <xQueueGenericSendFromISR+0x70>
 800739a:	2300      	movs	r3, #0
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10a      	bne.n	80073b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80073a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	623b      	str	r3, [r7, #32]
}
 80073b2:	bf00      	nop
 80073b4:	e7fe      	b.n	80073b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073b6:	f002 f9b7 	bl	8009728 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073ba:	f3ef 8211 	mrs	r2, BASEPRI
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	61fa      	str	r2, [r7, #28]
 80073d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073de:	429a      	cmp	r2, r3
 80073e0:	d302      	bcc.n	80073e8 <xQueueGenericSendFromISR+0xbc>
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d12f      	bne.n	8007448 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	68b9      	ldr	r1, [r7, #8]
 80073fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073fe:	f000 fa35 	bl	800786c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007402:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740a:	d112      	bne.n	8007432 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007410:	2b00      	cmp	r3, #0
 8007412:	d016      	beq.n	8007442 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	3324      	adds	r3, #36	; 0x24
 8007418:	4618      	mov	r0, r3
 800741a:	f001 f877 	bl	800850c <xTaskRemoveFromEventList>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00e      	beq.n	8007442 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00b      	beq.n	8007442 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2201      	movs	r2, #1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	e007      	b.n	8007442 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007432:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007436:	3301      	adds	r3, #1
 8007438:	b2db      	uxtb	r3, r3
 800743a:	b25a      	sxtb	r2, r3
 800743c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007442:	2301      	movs	r3, #1
 8007444:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007446:	e001      	b.n	800744c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007448:	2300      	movs	r3, #0
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007456:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800745a:	4618      	mov	r0, r3
 800745c:	3740      	adds	r7, #64	; 0x40
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b08c      	sub	sp, #48	; 0x30
 8007468:	af00      	add	r7, sp, #0
 800746a:	60f8      	str	r0, [r7, #12]
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007470:	2300      	movs	r3, #0
 8007472:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10a      	bne.n	8007494 <xQueueReceive+0x30>
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	623b      	str	r3, [r7, #32]
}
 8007490:	bf00      	nop
 8007492:	e7fe      	b.n	8007492 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d103      	bne.n	80074a2 <xQueueReceive+0x3e>
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d101      	bne.n	80074a6 <xQueueReceive+0x42>
 80074a2:	2301      	movs	r3, #1
 80074a4:	e000      	b.n	80074a8 <xQueueReceive+0x44>
 80074a6:	2300      	movs	r3, #0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10a      	bne.n	80074c2 <xQueueReceive+0x5e>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	61fb      	str	r3, [r7, #28]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074c2:	f001 f9f5 	bl	80088b0 <xTaskGetSchedulerState>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d102      	bne.n	80074d2 <xQueueReceive+0x6e>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d101      	bne.n	80074d6 <xQueueReceive+0x72>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <xQueueReceive+0x74>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <xQueueReceive+0x8e>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	61bb      	str	r3, [r7, #24]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074f2:	f002 f837 	bl	8009564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d01f      	beq.n	8007542 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007502:	68b9      	ldr	r1, [r7, #8]
 8007504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007506:	f000 fa1b 	bl	8007940 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	1e5a      	subs	r2, r3, #1
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00f      	beq.n	800753a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	3310      	adds	r3, #16
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fff4 	bl	800850c <xTaskRemoveFromEventList>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800752a:	4b3d      	ldr	r3, [pc, #244]	; (8007620 <xQueueReceive+0x1bc>)
 800752c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800753a:	f002 f843 	bl	80095c4 <vPortExitCritical>
				return pdPASS;
 800753e:	2301      	movs	r3, #1
 8007540:	e069      	b.n	8007616 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d103      	bne.n	8007550 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007548:	f002 f83c 	bl	80095c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800754c:	2300      	movs	r3, #0
 800754e:	e062      	b.n	8007616 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007556:	f107 0310 	add.w	r3, r7, #16
 800755a:	4618      	mov	r0, r3
 800755c:	f001 f83a 	bl	80085d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007560:	2301      	movs	r3, #1
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007564:	f002 f82e 	bl	80095c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007568:	f000 fd94 	bl	8008094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800756c:	f001 fffa 	bl	8009564 <vPortEnterCritical>
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007576:	b25b      	sxtb	r3, r3
 8007578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757c:	d103      	bne.n	8007586 <xQueueReceive+0x122>
 800757e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800758c:	b25b      	sxtb	r3, r3
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d103      	bne.n	800759c <xQueueReceive+0x138>
 8007594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800759c:	f002 f812 	bl	80095c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80075a0:	1d3a      	adds	r2, r7, #4
 80075a2:	f107 0310 	add.w	r3, r7, #16
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f001 f829 	bl	8008600 <xTaskCheckForTimeOut>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d123      	bne.n	80075fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b6:	f000 fa3b 	bl	8007a30 <prvIsQueueEmpty>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d017      	beq.n	80075f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c2:	3324      	adds	r3, #36	; 0x24
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4611      	mov	r1, r2
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 ff4f 	bl	800846c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075d0:	f000 f9dc 	bl	800798c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075d4:	f000 fd6c 	bl	80080b0 <xTaskResumeAll>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d189      	bne.n	80074f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80075de:	4b10      	ldr	r3, [pc, #64]	; (8007620 <xQueueReceive+0x1bc>)
 80075e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	e780      	b.n	80074f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f2:	f000 f9cb 	bl	800798c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075f6:	f000 fd5b 	bl	80080b0 <xTaskResumeAll>
 80075fa:	e77a      	b.n	80074f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075fe:	f000 f9c5 	bl	800798c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007602:	f000 fd55 	bl	80080b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007608:	f000 fa12 	bl	8007a30 <prvIsQueueEmpty>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	f43f af6f 	beq.w	80074f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007614:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007616:	4618      	mov	r0, r3
 8007618:	3730      	adds	r7, #48	; 0x30
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08e      	sub	sp, #56	; 0x38
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800762e:	2300      	movs	r3, #0
 8007630:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007636:	2300      	movs	r3, #0
 8007638:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800763a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10a      	bne.n	8007656 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	623b      	str	r3, [r7, #32]
}
 8007652:	bf00      	nop
 8007654:	e7fe      	b.n	8007654 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	61fb      	str	r3, [r7, #28]
}
 8007670:	bf00      	nop
 8007672:	e7fe      	b.n	8007672 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007674:	f001 f91c 	bl	80088b0 <xTaskGetSchedulerState>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <xQueueSemaphoreTake+0x60>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <xQueueSemaphoreTake+0x64>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <xQueueSemaphoreTake+0x66>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10a      	bne.n	80076a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	61bb      	str	r3, [r7, #24]
}
 80076a0:	bf00      	nop
 80076a2:	e7fe      	b.n	80076a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076a4:	f001 ff5e 	bl	8009564 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80076ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d024      	beq.n	80076fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80076b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b6:	1e5a      	subs	r2, r3, #1
 80076b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076c4:	f001 fa6a 	bl	8008b9c <pvTaskIncrementMutexHeldCount>
 80076c8:	4602      	mov	r2, r0
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00f      	beq.n	80076f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	3310      	adds	r3, #16
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 ff16 	bl	800850c <xTaskRemoveFromEventList>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d007      	beq.n	80076f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076e6:	4b54      	ldr	r3, [pc, #336]	; (8007838 <xQueueSemaphoreTake+0x214>)
 80076e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	f3bf 8f4f 	dsb	sy
 80076f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076f6:	f001 ff65 	bl	80095c4 <vPortExitCritical>
				return pdPASS;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e097      	b.n	800782e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d111      	bne.n	8007728 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00a      	beq.n	8007720 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	617b      	str	r3, [r7, #20]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007720:	f001 ff50 	bl	80095c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007724:	2300      	movs	r3, #0
 8007726:	e082      	b.n	800782e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800772e:	f107 030c 	add.w	r3, r7, #12
 8007732:	4618      	mov	r0, r3
 8007734:	f000 ff4e 	bl	80085d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007738:	2301      	movs	r3, #1
 800773a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800773c:	f001 ff42 	bl	80095c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007740:	f000 fca8 	bl	8008094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007744:	f001 ff0e 	bl	8009564 <vPortEnterCritical>
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800774e:	b25b      	sxtb	r3, r3
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d103      	bne.n	800775e <xQueueSemaphoreTake+0x13a>
 8007756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800775e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007764:	b25b      	sxtb	r3, r3
 8007766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776a:	d103      	bne.n	8007774 <xQueueSemaphoreTake+0x150>
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007774:	f001 ff26 	bl	80095c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007778:	463a      	mov	r2, r7
 800777a:	f107 030c 	add.w	r3, r7, #12
 800777e:	4611      	mov	r1, r2
 8007780:	4618      	mov	r0, r3
 8007782:	f000 ff3d 	bl	8008600 <xTaskCheckForTimeOut>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d132      	bne.n	80077f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800778c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800778e:	f000 f94f 	bl	8007a30 <prvIsQueueEmpty>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d026      	beq.n	80077e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d109      	bne.n	80077b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80077a0:	f001 fee0 	bl	8009564 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 f89f 	bl	80088ec <xTaskPriorityInherit>
 80077ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80077b0:	f001 ff08 	bl	80095c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b6:	3324      	adds	r3, #36	; 0x24
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	4611      	mov	r1, r2
 80077bc:	4618      	mov	r0, r3
 80077be:	f000 fe55 	bl	800846c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077c4:	f000 f8e2 	bl	800798c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077c8:	f000 fc72 	bl	80080b0 <xTaskResumeAll>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f47f af68 	bne.w	80076a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80077d4:	4b18      	ldr	r3, [pc, #96]	; (8007838 <xQueueSemaphoreTake+0x214>)
 80077d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	f3bf 8f4f 	dsb	sy
 80077e0:	f3bf 8f6f 	isb	sy
 80077e4:	e75e      	b.n	80076a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80077e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077e8:	f000 f8d0 	bl	800798c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077ec:	f000 fc60 	bl	80080b0 <xTaskResumeAll>
 80077f0:	e758      	b.n	80076a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80077f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077f4:	f000 f8ca 	bl	800798c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077f8:	f000 fc5a 	bl	80080b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80077fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077fe:	f000 f917 	bl	8007a30 <prvIsQueueEmpty>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	f43f af4d 	beq.w	80076a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00d      	beq.n	800782c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007810:	f001 fea8 	bl	8009564 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007814:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007816:	f000 f811 	bl	800783c <prvGetDisinheritPriorityAfterTimeout>
 800781a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800781c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007822:	4618      	mov	r0, r3
 8007824:	f001 f938 	bl	8008a98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007828:	f001 fecc 	bl	80095c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800782c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800782e:	4618      	mov	r0, r3
 8007830:	3738      	adds	r7, #56	; 0x38
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	e000ed04 	.word	0xe000ed04

0800783c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800783c:	b480      	push	{r7}
 800783e:	b085      	sub	sp, #20
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	2b00      	cmp	r3, #0
 800784a:	d006      	beq.n	800785a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	e001      	b.n	800785e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800785e:	68fb      	ldr	r3, [r7, #12]
	}
 8007860:	4618      	mov	r0, r3
 8007862:	3714      	adds	r7, #20
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007878:	2300      	movs	r3, #0
 800787a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10d      	bne.n	80078a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d14d      	bne.n	800792e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	4618      	mov	r0, r3
 8007898:	f001 f890 	bl	80089bc <xTaskPriorityDisinherit>
 800789c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2200      	movs	r2, #0
 80078a2:	609a      	str	r2, [r3, #8]
 80078a4:	e043      	b.n	800792e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d119      	bne.n	80078e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6858      	ldr	r0, [r3, #4]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b4:	461a      	mov	r2, r3
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	f002 f9e4 	bl	8009c84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c4:	441a      	add	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d32b      	bcc.n	800792e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	605a      	str	r2, [r3, #4]
 80078de:	e026      	b.n	800792e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68d8      	ldr	r0, [r3, #12]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e8:	461a      	mov	r2, r3
 80078ea:	68b9      	ldr	r1, [r7, #8]
 80078ec:	f002 f9ca 	bl	8009c84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	425b      	negs	r3, r3
 80078fa:	441a      	add	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	68da      	ldr	r2, [r3, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d207      	bcs.n	800791c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007914:	425b      	negs	r3, r3
 8007916:	441a      	add	r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d105      	bne.n	800792e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	3b01      	subs	r3, #1
 800792c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007936:	697b      	ldr	r3, [r7, #20]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d018      	beq.n	8007984 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	441a      	add	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68da      	ldr	r2, [r3, #12]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	429a      	cmp	r2, r3
 800796a:	d303      	bcc.n	8007974 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68d9      	ldr	r1, [r3, #12]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797c:	461a      	mov	r2, r3
 800797e:	6838      	ldr	r0, [r7, #0]
 8007980:	f002 f980 	bl	8009c84 <memcpy>
	}
}
 8007984:	bf00      	nop
 8007986:	3708      	adds	r7, #8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007994:	f001 fde6 	bl	8009564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800799e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079a0:	e011      	b.n	80079c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d012      	beq.n	80079d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	3324      	adds	r3, #36	; 0x24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 fdac 	bl	800850c <xTaskRemoveFromEventList>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d001      	beq.n	80079be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80079ba:	f000 fe83 	bl	80086c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80079be:	7bfb      	ldrb	r3, [r7, #15]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80079c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	dce9      	bgt.n	80079a2 <prvUnlockQueue+0x16>
 80079ce:	e000      	b.n	80079d2 <prvUnlockQueue+0x46>
					break;
 80079d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	22ff      	movs	r2, #255	; 0xff
 80079d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80079da:	f001 fdf3 	bl	80095c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80079de:	f001 fdc1 	bl	8009564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80079ea:	e011      	b.n	8007a10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d012      	beq.n	8007a1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	3310      	adds	r3, #16
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 fd87 	bl	800850c <xTaskRemoveFromEventList>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007a04:	f000 fe5e 	bl	80086c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007a08:	7bbb      	ldrb	r3, [r7, #14]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dce9      	bgt.n	80079ec <prvUnlockQueue+0x60>
 8007a18:	e000      	b.n	8007a1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007a1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	22ff      	movs	r2, #255	; 0xff
 8007a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007a24:	f001 fdce 	bl	80095c4 <vPortExitCritical>
}
 8007a28:	bf00      	nop
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a38:	f001 fd94 	bl	8009564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d102      	bne.n	8007a4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	60fb      	str	r3, [r7, #12]
 8007a48:	e001      	b.n	8007a4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a4e:	f001 fdb9 	bl	80095c4 <vPortExitCritical>

	return xReturn;
 8007a52:	68fb      	ldr	r3, [r7, #12]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007a64:	f001 fd7e 	bl	8009564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d102      	bne.n	8007a7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e001      	b.n	8007a7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007a7e:	f001 fda1 	bl	80095c4 <vPortExitCritical>

	return xReturn;
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	e014      	b.n	8007ac6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a9c:	4a0f      	ldr	r2, [pc, #60]	; (8007adc <vQueueAddToRegistry+0x50>)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10b      	bne.n	8007ac0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007aa8:	490c      	ldr	r1, [pc, #48]	; (8007adc <vQueueAddToRegistry+0x50>)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ab2:	4a0a      	ldr	r2, [pc, #40]	; (8007adc <vQueueAddToRegistry+0x50>)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	4413      	add	r3, r2
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007abe:	e006      	b.n	8007ace <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	60fb      	str	r3, [r7, #12]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b07      	cmp	r3, #7
 8007aca:	d9e7      	bls.n	8007a9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	20000cec 	.word	0x20000cec

08007ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007af0:	f001 fd38 	bl	8009564 <vPortEnterCritical>
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007afa:	b25b      	sxtb	r3, r3
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d103      	bne.n	8007b0a <vQueueWaitForMessageRestricted+0x2a>
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d103      	bne.n	8007b20 <vQueueWaitForMessageRestricted+0x40>
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b20:	f001 fd50 	bl	80095c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	3324      	adds	r3, #36	; 0x24
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fcbd 	bl	80084b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007b3a:	6978      	ldr	r0, [r7, #20]
 8007b3c:	f7ff ff26 	bl	800798c <prvUnlockQueue>
	}
 8007b40:	bf00      	nop
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b08e      	sub	sp, #56	; 0x38
 8007b4c:	af04      	add	r7, sp, #16
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10a      	bne.n	8007b72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	623b      	str	r3, [r7, #32]
}
 8007b6e:	bf00      	nop
 8007b70:	e7fe      	b.n	8007b70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xTaskCreateStatic+0x46>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	61fb      	str	r3, [r7, #28]
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b8e:	23a8      	movs	r3, #168	; 0xa8
 8007b90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2ba8      	cmp	r3, #168	; 0xa8
 8007b96:	d00a      	beq.n	8007bae <xTaskCreateStatic+0x66>
	__asm volatile
 8007b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	61bb      	str	r3, [r7, #24]
}
 8007baa:	bf00      	nop
 8007bac:	e7fe      	b.n	8007bac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007bae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d01e      	beq.n	8007bf4 <xTaskCreateStatic+0xac>
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d01b      	beq.n	8007bf4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bc4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007bce:	2300      	movs	r3, #0
 8007bd0:	9303      	str	r3, [sp, #12]
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	9302      	str	r3, [sp, #8]
 8007bd6:	f107 0314 	add.w	r3, r7, #20
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	687a      	ldr	r2, [r7, #4]
 8007be4:	68b9      	ldr	r1, [r7, #8]
 8007be6:	68f8      	ldr	r0, [r7, #12]
 8007be8:	f000 f850 	bl	8007c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007bee:	f000 f8f3 	bl	8007dd8 <prvAddNewTaskToReadyList>
 8007bf2:	e001      	b.n	8007bf8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bf8:	697b      	ldr	r3, [r7, #20]
	}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3728      	adds	r7, #40	; 0x28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b08c      	sub	sp, #48	; 0x30
 8007c06:	af04      	add	r7, sp, #16
 8007c08:	60f8      	str	r0, [r7, #12]
 8007c0a:	60b9      	str	r1, [r7, #8]
 8007c0c:	603b      	str	r3, [r7, #0]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c12:	88fb      	ldrh	r3, [r7, #6]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4618      	mov	r0, r3
 8007c18:	f001 fdc6 	bl	80097a8 <pvPortMalloc>
 8007c1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00e      	beq.n	8007c42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c24:	20a8      	movs	r0, #168	; 0xa8
 8007c26:	f001 fdbf 	bl	80097a8 <pvPortMalloc>
 8007c2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	631a      	str	r2, [r3, #48]	; 0x30
 8007c38:	e005      	b.n	8007c46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c3a:	6978      	ldr	r0, [r7, #20]
 8007c3c:	f001 fe80 	bl	8009940 <vPortFree>
 8007c40:	e001      	b.n	8007c46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d017      	beq.n	8007c7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9303      	str	r3, [sp, #12]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	9302      	str	r3, [sp, #8]
 8007c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c60:	9301      	str	r3, [sp, #4]
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	68f8      	ldr	r0, [r7, #12]
 8007c6c:	f000 f80e 	bl	8007c8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c70:	69f8      	ldr	r0, [r7, #28]
 8007c72:	f000 f8b1 	bl	8007dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c76:	2301      	movs	r3, #1
 8007c78:	61bb      	str	r3, [r7, #24]
 8007c7a:	e002      	b.n	8007c82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c82:	69bb      	ldr	r3, [r7, #24]
	}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3720      	adds	r7, #32
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b088      	sub	sp, #32
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	21a5      	movs	r1, #165	; 0xa5
 8007ca6:	f001 ff69 	bl	8009b7c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	f023 0307 	bic.w	r3, r3, #7
 8007cc2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	617b      	str	r3, [r7, #20]
}
 8007ce0:	bf00      	nop
 8007ce2:	e7fe      	b.n	8007ce2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d01f      	beq.n	8007d2a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cea:	2300      	movs	r3, #0
 8007cec:	61fb      	str	r3, [r7, #28]
 8007cee:	e012      	b.n	8007d16 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cf0:	68ba      	ldr	r2, [r7, #8]
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	7819      	ldrb	r1, [r3, #0]
 8007cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	3334      	adds	r3, #52	; 0x34
 8007d00:	460a      	mov	r2, r1
 8007d02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	4413      	add	r3, r2
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d006      	beq.n	8007d1e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	3301      	adds	r3, #1
 8007d14:	61fb      	str	r3, [r7, #28]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	2b0f      	cmp	r3, #15
 8007d1a:	d9e9      	bls.n	8007cf0 <prvInitialiseNewTask+0x64>
 8007d1c:	e000      	b.n	8007d20 <prvInitialiseNewTask+0x94>
			{
				break;
 8007d1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d28:	e003      	b.n	8007d32 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	2b37      	cmp	r3, #55	; 0x37
 8007d36:	d901      	bls.n	8007d3c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d38:	2337      	movs	r3, #55	; 0x37
 8007d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	3304      	adds	r3, #4
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe ff64 	bl	8006c20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d5a:	3318      	adds	r3, #24
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe ff5f 	bl	8006c20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	3354      	adds	r3, #84	; 0x54
 8007d8c:	224c      	movs	r2, #76	; 0x4c
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 fef3 	bl	8009b7c <memset>
 8007d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d98:	4a0c      	ldr	r2, [pc, #48]	; (8007dcc <prvInitialiseNewTask+0x140>)
 8007d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	4a0c      	ldr	r2, [pc, #48]	; (8007dd0 <prvInitialiseNewTask+0x144>)
 8007da0:	65da      	str	r2, [r3, #92]	; 0x5c
 8007da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da4:	4a0b      	ldr	r2, [pc, #44]	; (8007dd4 <prvInitialiseNewTask+0x148>)
 8007da6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	68f9      	ldr	r1, [r7, #12]
 8007dac:	69b8      	ldr	r0, [r7, #24]
 8007dae:	f001 faab 	bl	8009308 <pxPortInitialiseStack>
 8007db2:	4602      	mov	r2, r0
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d002      	beq.n	8007dc4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007dc4:	bf00      	nop
 8007dc6:	3720      	adds	r7, #32
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	20004f80 	.word	0x20004f80
 8007dd0:	20004fe8 	.word	0x20004fe8
 8007dd4:	20005050 	.word	0x20005050

08007dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007de0:	f001 fbc0 	bl	8009564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007de4:	4b2d      	ldr	r3, [pc, #180]	; (8007e9c <prvAddNewTaskToReadyList+0xc4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3301      	adds	r3, #1
 8007dea:	4a2c      	ldr	r2, [pc, #176]	; (8007e9c <prvAddNewTaskToReadyList+0xc4>)
 8007dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007dee:	4b2c      	ldr	r3, [pc, #176]	; (8007ea0 <prvAddNewTaskToReadyList+0xc8>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d109      	bne.n	8007e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007df6:	4a2a      	ldr	r2, [pc, #168]	; (8007ea0 <prvAddNewTaskToReadyList+0xc8>)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007dfc:	4b27      	ldr	r3, [pc, #156]	; (8007e9c <prvAddNewTaskToReadyList+0xc4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d110      	bne.n	8007e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e04:	f000 fc82 	bl	800870c <prvInitialiseTaskLists>
 8007e08:	e00d      	b.n	8007e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e0a:	4b26      	ldr	r3, [pc, #152]	; (8007ea4 <prvAddNewTaskToReadyList+0xcc>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d109      	bne.n	8007e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e12:	4b23      	ldr	r3, [pc, #140]	; (8007ea0 <prvAddNewTaskToReadyList+0xc8>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d802      	bhi.n	8007e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e20:	4a1f      	ldr	r2, [pc, #124]	; (8007ea0 <prvAddNewTaskToReadyList+0xc8>)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e26:	4b20      	ldr	r3, [pc, #128]	; (8007ea8 <prvAddNewTaskToReadyList+0xd0>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <prvAddNewTaskToReadyList+0xd0>)
 8007e2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007e30:	4b1d      	ldr	r3, [pc, #116]	; (8007ea8 <prvAddNewTaskToReadyList+0xd0>)
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3c:	4b1b      	ldr	r3, [pc, #108]	; (8007eac <prvAddNewTaskToReadyList+0xd4>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d903      	bls.n	8007e4c <prvAddNewTaskToReadyList+0x74>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	4a18      	ldr	r2, [pc, #96]	; (8007eac <prvAddNewTaskToReadyList+0xd4>)
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <prvAddNewTaskToReadyList+0xd8>)
 8007e5a:	441a      	add	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4619      	mov	r1, r3
 8007e62:	4610      	mov	r0, r2
 8007e64:	f7fe fee9 	bl	8006c3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e68:	f001 fbac 	bl	80095c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ea4 <prvAddNewTaskToReadyList+0xcc>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00e      	beq.n	8007e92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <prvAddNewTaskToReadyList+0xc8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d207      	bcs.n	8007e92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e82:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <prvAddNewTaskToReadyList+0xdc>)
 8007e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	20001200 	.word	0x20001200
 8007ea0:	20000d2c 	.word	0x20000d2c
 8007ea4:	2000120c 	.word	0x2000120c
 8007ea8:	2000121c 	.word	0x2000121c
 8007eac:	20001208 	.word	0x20001208
 8007eb0:	20000d30 	.word	0x20000d30
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b08a      	sub	sp, #40	; 0x28
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d10a      	bne.n	8007ee2 <vTaskDelayUntil+0x2a>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	617b      	str	r3, [r7, #20]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <vTaskDelayUntil+0x46>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	613b      	str	r3, [r7, #16]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007efe:	4b2a      	ldr	r3, [pc, #168]	; (8007fa8 <vTaskDelayUntil+0xf0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00a      	beq.n	8007f1c <vTaskDelayUntil+0x64>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	f383 8811 	msr	BASEPRI, r3
 8007f0e:	f3bf 8f6f 	isb	sy
 8007f12:	f3bf 8f4f 	dsb	sy
 8007f16:	60fb      	str	r3, [r7, #12]
}
 8007f18:	bf00      	nop
 8007f1a:	e7fe      	b.n	8007f1a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007f1c:	f000 f8ba 	bl	8008094 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007f20:	4b22      	ldr	r3, [pc, #136]	; (8007fac <vTaskDelayUntil+0xf4>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6a3a      	ldr	r2, [r7, #32]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d20b      	bcs.n	8007f52 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d211      	bcs.n	8007f68 <vTaskDelayUntil+0xb0>
 8007f44:	69fa      	ldr	r2, [r7, #28]
 8007f46:	6a3b      	ldr	r3, [r7, #32]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d90d      	bls.n	8007f68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8007f50:	e00a      	b.n	8007f68 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69fa      	ldr	r2, [r7, #28]
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d303      	bcc.n	8007f64 <vTaskDelayUntil+0xac>
 8007f5c:	69fa      	ldr	r2, [r7, #28]
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d901      	bls.n	8007f68 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007f64:	2301      	movs	r3, #1
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d006      	beq.n	8007f82 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 fe21 	bl	8008bc4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007f82:	f000 f895 	bl	80080b0 <xTaskResumeAll>
 8007f86:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d107      	bne.n	8007f9e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007f8e:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <vTaskDelayUntil+0xf8>)
 8007f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f94:	601a      	str	r2, [r3, #0]
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f9e:	bf00      	nop
 8007fa0:	3728      	adds	r7, #40	; 0x28
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20001228 	.word	0x20001228
 8007fac:	20001204 	.word	0x20001204
 8007fb0:	e000ed04 	.word	0xe000ed04

08007fb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fc2:	463a      	mov	r2, r7
 8007fc4:	1d39      	adds	r1, r7, #4
 8007fc6:	f107 0308 	add.w	r3, r7, #8
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7fe fdd4 	bl	8006b78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	9202      	str	r2, [sp, #8]
 8007fd8:	9301      	str	r3, [sp, #4]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	2300      	movs	r3, #0
 8007fe0:	460a      	mov	r2, r1
 8007fe2:	4924      	ldr	r1, [pc, #144]	; (8008074 <vTaskStartScheduler+0xc0>)
 8007fe4:	4824      	ldr	r0, [pc, #144]	; (8008078 <vTaskStartScheduler+0xc4>)
 8007fe6:	f7ff fdaf 	bl	8007b48 <xTaskCreateStatic>
 8007fea:	4603      	mov	r3, r0
 8007fec:	4a23      	ldr	r2, [pc, #140]	; (800807c <vTaskStartScheduler+0xc8>)
 8007fee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ff0:	4b22      	ldr	r3, [pc, #136]	; (800807c <vTaskStartScheduler+0xc8>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	617b      	str	r3, [r7, #20]
 8007ffc:	e001      	b.n	8008002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d102      	bne.n	800800e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008008:	f000 fe30 	bl	8008c6c <xTimerCreateTimerTask>
 800800c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d11b      	bne.n	800804c <vTaskStartScheduler+0x98>
	__asm volatile
 8008014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008018:	f383 8811 	msr	BASEPRI, r3
 800801c:	f3bf 8f6f 	isb	sy
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	613b      	str	r3, [r7, #16]
}
 8008026:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008028:	4b15      	ldr	r3, [pc, #84]	; (8008080 <vTaskStartScheduler+0xcc>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	3354      	adds	r3, #84	; 0x54
 800802e:	4a15      	ldr	r2, [pc, #84]	; (8008084 <vTaskStartScheduler+0xd0>)
 8008030:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008032:	4b15      	ldr	r3, [pc, #84]	; (8008088 <vTaskStartScheduler+0xd4>)
 8008034:	f04f 32ff 	mov.w	r2, #4294967295
 8008038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800803a:	4b14      	ldr	r3, [pc, #80]	; (800808c <vTaskStartScheduler+0xd8>)
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008040:	4b13      	ldr	r3, [pc, #76]	; (8008090 <vTaskStartScheduler+0xdc>)
 8008042:	2200      	movs	r2, #0
 8008044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008046:	f001 f9eb 	bl	8009420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800804a:	e00e      	b.n	800806a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008052:	d10a      	bne.n	800806a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	60fb      	str	r3, [r7, #12]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <vTaskStartScheduler+0xb4>
}
 800806a:	bf00      	nop
 800806c:	3718      	adds	r7, #24
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	08009dd4 	.word	0x08009dd4
 8008078:	080086dd 	.word	0x080086dd
 800807c:	20001224 	.word	0x20001224
 8008080:	20000d2c 	.word	0x20000d2c
 8008084:	20000060 	.word	0x20000060
 8008088:	20001220 	.word	0x20001220
 800808c:	2000120c 	.word	0x2000120c
 8008090:	20001204 	.word	0x20001204

08008094 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008094:	b480      	push	{r7}
 8008096:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008098:	4b04      	ldr	r3, [pc, #16]	; (80080ac <vTaskSuspendAll+0x18>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	4a03      	ldr	r2, [pc, #12]	; (80080ac <vTaskSuspendAll+0x18>)
 80080a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080a2:	bf00      	nop
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	20001228 	.word	0x20001228

080080b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080be:	4b42      	ldr	r3, [pc, #264]	; (80081c8 <xTaskResumeAll+0x118>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d10a      	bne.n	80080dc <xTaskResumeAll+0x2c>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	603b      	str	r3, [r7, #0]
}
 80080d8:	bf00      	nop
 80080da:	e7fe      	b.n	80080da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080dc:	f001 fa42 	bl	8009564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080e0:	4b39      	ldr	r3, [pc, #228]	; (80081c8 <xTaskResumeAll+0x118>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3b01      	subs	r3, #1
 80080e6:	4a38      	ldr	r2, [pc, #224]	; (80081c8 <xTaskResumeAll+0x118>)
 80080e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080ea:	4b37      	ldr	r3, [pc, #220]	; (80081c8 <xTaskResumeAll+0x118>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d162      	bne.n	80081b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80080f2:	4b36      	ldr	r3, [pc, #216]	; (80081cc <xTaskResumeAll+0x11c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d05e      	beq.n	80081b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080fa:	e02f      	b.n	800815c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080fc:	4b34      	ldr	r3, [pc, #208]	; (80081d0 <xTaskResumeAll+0x120>)
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	3318      	adds	r3, #24
 8008108:	4618      	mov	r0, r3
 800810a:	f7fe fdf3 	bl	8006cf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3304      	adds	r3, #4
 8008112:	4618      	mov	r0, r3
 8008114:	f7fe fdee 	bl	8006cf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811c:	4b2d      	ldr	r3, [pc, #180]	; (80081d4 <xTaskResumeAll+0x124>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d903      	bls.n	800812c <xTaskResumeAll+0x7c>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008128:	4a2a      	ldr	r2, [pc, #168]	; (80081d4 <xTaskResumeAll+0x124>)
 800812a:	6013      	str	r3, [r2, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008130:	4613      	mov	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	4413      	add	r3, r2
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	4a27      	ldr	r2, [pc, #156]	; (80081d8 <xTaskResumeAll+0x128>)
 800813a:	441a      	add	r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f7fe fd79 	bl	8006c3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814c:	4b23      	ldr	r3, [pc, #140]	; (80081dc <xTaskResumeAll+0x12c>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	429a      	cmp	r2, r3
 8008154:	d302      	bcc.n	800815c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008156:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <xTaskResumeAll+0x130>)
 8008158:	2201      	movs	r2, #1
 800815a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800815c:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <xTaskResumeAll+0x120>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1cb      	bne.n	80080fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800816a:	f000 fb71 	bl	8008850 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800816e:	4b1d      	ldr	r3, [pc, #116]	; (80081e4 <xTaskResumeAll+0x134>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d010      	beq.n	800819c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800817a:	f000 f859 	bl	8008230 <xTaskIncrementTick>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008184:	4b16      	ldr	r3, [pc, #88]	; (80081e0 <xTaskResumeAll+0x130>)
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3b01      	subs	r3, #1
 800818e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f1      	bne.n	800817a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008196:	4b13      	ldr	r3, [pc, #76]	; (80081e4 <xTaskResumeAll+0x134>)
 8008198:	2200      	movs	r2, #0
 800819a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800819c:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <xTaskResumeAll+0x130>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081a4:	2301      	movs	r3, #1
 80081a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081a8:	4b0f      	ldr	r3, [pc, #60]	; (80081e8 <xTaskResumeAll+0x138>)
 80081aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	f3bf 8f4f 	dsb	sy
 80081b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081b8:	f001 fa04 	bl	80095c4 <vPortExitCritical>

	return xAlreadyYielded;
 80081bc:	68bb      	ldr	r3, [r7, #8]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20001228 	.word	0x20001228
 80081cc:	20001200 	.word	0x20001200
 80081d0:	200011c0 	.word	0x200011c0
 80081d4:	20001208 	.word	0x20001208
 80081d8:	20000d30 	.word	0x20000d30
 80081dc:	20000d2c 	.word	0x20000d2c
 80081e0:	20001214 	.word	0x20001214
 80081e4:	20001210 	.word	0x20001210
 80081e8:	e000ed04 	.word	0xe000ed04

080081ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <xTaskGetTickCount+0x1c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80081f8:	687b      	ldr	r3, [r7, #4]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	370c      	adds	r7, #12
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr
 8008206:	bf00      	nop
 8008208:	20001204 	.word	0x20001204

0800820c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008212:	f001 fa89 	bl	8009728 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008216:	2300      	movs	r3, #0
 8008218:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800821a:	4b04      	ldr	r3, [pc, #16]	; (800822c <xTaskGetTickCountFromISR+0x20>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008220:	683b      	ldr	r3, [r7, #0]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	20001204 	.word	0x20001204

08008230 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008236:	2300      	movs	r3, #0
 8008238:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800823a:	4b4f      	ldr	r3, [pc, #316]	; (8008378 <xTaskIncrementTick+0x148>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f040 808f 	bne.w	8008362 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008244:	4b4d      	ldr	r3, [pc, #308]	; (800837c <xTaskIncrementTick+0x14c>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3301      	adds	r3, #1
 800824a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800824c:	4a4b      	ldr	r2, [pc, #300]	; (800837c <xTaskIncrementTick+0x14c>)
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d120      	bne.n	800829a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008258:	4b49      	ldr	r3, [pc, #292]	; (8008380 <xTaskIncrementTick+0x150>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <xTaskIncrementTick+0x48>
	__asm volatile
 8008262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	603b      	str	r3, [r7, #0]
}
 8008274:	bf00      	nop
 8008276:	e7fe      	b.n	8008276 <xTaskIncrementTick+0x46>
 8008278:	4b41      	ldr	r3, [pc, #260]	; (8008380 <xTaskIncrementTick+0x150>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60fb      	str	r3, [r7, #12]
 800827e:	4b41      	ldr	r3, [pc, #260]	; (8008384 <xTaskIncrementTick+0x154>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a3f      	ldr	r2, [pc, #252]	; (8008380 <xTaskIncrementTick+0x150>)
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	4a3f      	ldr	r2, [pc, #252]	; (8008384 <xTaskIncrementTick+0x154>)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	4b3e      	ldr	r3, [pc, #248]	; (8008388 <xTaskIncrementTick+0x158>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3301      	adds	r3, #1
 8008292:	4a3d      	ldr	r2, [pc, #244]	; (8008388 <xTaskIncrementTick+0x158>)
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	f000 fadb 	bl	8008850 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800829a:	4b3c      	ldr	r3, [pc, #240]	; (800838c <xTaskIncrementTick+0x15c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d349      	bcc.n	8008338 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a4:	4b36      	ldr	r3, [pc, #216]	; (8008380 <xTaskIncrementTick+0x150>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d104      	bne.n	80082b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ae:	4b37      	ldr	r3, [pc, #220]	; (800838c <xTaskIncrementTick+0x15c>)
 80082b0:	f04f 32ff 	mov.w	r2, #4294967295
 80082b4:	601a      	str	r2, [r3, #0]
					break;
 80082b6:	e03f      	b.n	8008338 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b8:	4b31      	ldr	r3, [pc, #196]	; (8008380 <xTaskIncrementTick+0x150>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d203      	bcs.n	80082d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082d0:	4a2e      	ldr	r2, [pc, #184]	; (800838c <xTaskIncrementTick+0x15c>)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082d6:	e02f      	b.n	8008338 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	3304      	adds	r3, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fd09 	bl	8006cf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d004      	beq.n	80082f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	3318      	adds	r3, #24
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fd00 	bl	8006cf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f8:	4b25      	ldr	r3, [pc, #148]	; (8008390 <xTaskIncrementTick+0x160>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d903      	bls.n	8008308 <xTaskIncrementTick+0xd8>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008304:	4a22      	ldr	r2, [pc, #136]	; (8008390 <xTaskIncrementTick+0x160>)
 8008306:	6013      	str	r3, [r2, #0]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4613      	mov	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4a1f      	ldr	r2, [pc, #124]	; (8008394 <xTaskIncrementTick+0x164>)
 8008316:	441a      	add	r2, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	3304      	adds	r3, #4
 800831c:	4619      	mov	r1, r3
 800831e:	4610      	mov	r0, r2
 8008320:	f7fe fc8b 	bl	8006c3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008328:	4b1b      	ldr	r3, [pc, #108]	; (8008398 <xTaskIncrementTick+0x168>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832e:	429a      	cmp	r2, r3
 8008330:	d3b8      	bcc.n	80082a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008332:	2301      	movs	r3, #1
 8008334:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008336:	e7b5      	b.n	80082a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008338:	4b17      	ldr	r3, [pc, #92]	; (8008398 <xTaskIncrementTick+0x168>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833e:	4915      	ldr	r1, [pc, #84]	; (8008394 <xTaskIncrementTick+0x164>)
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d901      	bls.n	8008354 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008350:	2301      	movs	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <xTaskIncrementTick+0x16c>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d007      	beq.n	800836c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800835c:	2301      	movs	r3, #1
 800835e:	617b      	str	r3, [r7, #20]
 8008360:	e004      	b.n	800836c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008362:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <xTaskIncrementTick+0x170>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3301      	adds	r3, #1
 8008368:	4a0d      	ldr	r2, [pc, #52]	; (80083a0 <xTaskIncrementTick+0x170>)
 800836a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800836c:	697b      	ldr	r3, [r7, #20]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3718      	adds	r7, #24
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	20001228 	.word	0x20001228
 800837c:	20001204 	.word	0x20001204
 8008380:	200011b8 	.word	0x200011b8
 8008384:	200011bc 	.word	0x200011bc
 8008388:	20001218 	.word	0x20001218
 800838c:	20001220 	.word	0x20001220
 8008390:	20001208 	.word	0x20001208
 8008394:	20000d30 	.word	0x20000d30
 8008398:	20000d2c 	.word	0x20000d2c
 800839c:	20001214 	.word	0x20001214
 80083a0:	20001210 	.word	0x20001210

080083a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80083aa:	4b2a      	ldr	r3, [pc, #168]	; (8008454 <vTaskSwitchContext+0xb0>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d003      	beq.n	80083ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083b2:	4b29      	ldr	r3, [pc, #164]	; (8008458 <vTaskSwitchContext+0xb4>)
 80083b4:	2201      	movs	r2, #1
 80083b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083b8:	e046      	b.n	8008448 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80083ba:	4b27      	ldr	r3, [pc, #156]	; (8008458 <vTaskSwitchContext+0xb4>)
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083c0:	4b26      	ldr	r3, [pc, #152]	; (800845c <vTaskSwitchContext+0xb8>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	60fb      	str	r3, [r7, #12]
 80083c6:	e010      	b.n	80083ea <vTaskSwitchContext+0x46>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10a      	bne.n	80083e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	607b      	str	r3, [r7, #4]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <vTaskSwitchContext+0x3e>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	491d      	ldr	r1, [pc, #116]	; (8008460 <vTaskSwitchContext+0xbc>)
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4613      	mov	r3, r2
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	440b      	add	r3, r1
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0e4      	beq.n	80083c8 <vTaskSwitchContext+0x24>
 80083fe:	68fa      	ldr	r2, [r7, #12]
 8008400:	4613      	mov	r3, r2
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	4a15      	ldr	r2, [pc, #84]	; (8008460 <vTaskSwitchContext+0xbc>)
 800840a:	4413      	add	r3, r2
 800840c:	60bb      	str	r3, [r7, #8]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	605a      	str	r2, [r3, #4]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	3308      	adds	r3, #8
 8008420:	429a      	cmp	r2, r3
 8008422:	d104      	bne.n	800842e <vTaskSwitchContext+0x8a>
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	685a      	ldr	r2, [r3, #4]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	605a      	str	r2, [r3, #4]
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	4a0b      	ldr	r2, [pc, #44]	; (8008464 <vTaskSwitchContext+0xc0>)
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	4a08      	ldr	r2, [pc, #32]	; (800845c <vTaskSwitchContext+0xb8>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800843e:	4b09      	ldr	r3, [pc, #36]	; (8008464 <vTaskSwitchContext+0xc0>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3354      	adds	r3, #84	; 0x54
 8008444:	4a08      	ldr	r2, [pc, #32]	; (8008468 <vTaskSwitchContext+0xc4>)
 8008446:	6013      	str	r3, [r2, #0]
}
 8008448:	bf00      	nop
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	20001228 	.word	0x20001228
 8008458:	20001214 	.word	0x20001214
 800845c:	20001208 	.word	0x20001208
 8008460:	20000d30 	.word	0x20000d30
 8008464:	20000d2c 	.word	0x20000d2c
 8008468:	20000060 	.word	0x20000060

0800846c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	60fb      	str	r3, [r7, #12]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008492:	4b07      	ldr	r3, [pc, #28]	; (80084b0 <vTaskPlaceOnEventList+0x44>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3318      	adds	r3, #24
 8008498:	4619      	mov	r1, r3
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f7fe fbf1 	bl	8006c82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80084a0:	2101      	movs	r1, #1
 80084a2:	6838      	ldr	r0, [r7, #0]
 80084a4:	f000 fb8e 	bl	8008bc4 <prvAddCurrentTaskToDelayedList>
}
 80084a8:	bf00      	nop
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	20000d2c 	.word	0x20000d2c

080084b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10a      	bne.n	80084dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	617b      	str	r3, [r7, #20]
}
 80084d8:	bf00      	nop
 80084da:	e7fe      	b.n	80084da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <vTaskPlaceOnEventListRestricted+0x54>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3318      	adds	r3, #24
 80084e2:	4619      	mov	r1, r3
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f7fe fba8 	bl	8006c3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80084f0:	f04f 33ff 	mov.w	r3, #4294967295
 80084f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	68b8      	ldr	r0, [r7, #8]
 80084fa:	f000 fb63 	bl	8008bc4 <prvAddCurrentTaskToDelayedList>
	}
 80084fe:	bf00      	nop
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20000d2c 	.word	0x20000d2c

0800850c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10a      	bne.n	8008538 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	60fb      	str	r3, [r7, #12]
}
 8008534:	bf00      	nop
 8008536:	e7fe      	b.n	8008536 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	3318      	adds	r3, #24
 800853c:	4618      	mov	r0, r3
 800853e:	f7fe fbd9 	bl	8006cf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008542:	4b1e      	ldr	r3, [pc, #120]	; (80085bc <xTaskRemoveFromEventList+0xb0>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d11d      	bne.n	8008586 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe fbd0 	bl	8006cf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	4b19      	ldr	r3, [pc, #100]	; (80085c0 <xTaskRemoveFromEventList+0xb4>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	429a      	cmp	r2, r3
 800855e:	d903      	bls.n	8008568 <xTaskRemoveFromEventList+0x5c>
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008564:	4a16      	ldr	r2, [pc, #88]	; (80085c0 <xTaskRemoveFromEventList+0xb4>)
 8008566:	6013      	str	r3, [r2, #0]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4a13      	ldr	r2, [pc, #76]	; (80085c4 <xTaskRemoveFromEventList+0xb8>)
 8008576:	441a      	add	r2, r3
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f7fe fb5b 	bl	8006c3a <vListInsertEnd>
 8008584:	e005      	b.n	8008592 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	3318      	adds	r3, #24
 800858a:	4619      	mov	r1, r3
 800858c:	480e      	ldr	r0, [pc, #56]	; (80085c8 <xTaskRemoveFromEventList+0xbc>)
 800858e:	f7fe fb54 	bl	8006c3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008596:	4b0d      	ldr	r3, [pc, #52]	; (80085cc <xTaskRemoveFromEventList+0xc0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	429a      	cmp	r2, r3
 800859e:	d905      	bls.n	80085ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80085a0:	2301      	movs	r3, #1
 80085a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80085a4:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <xTaskRemoveFromEventList+0xc4>)
 80085a6:	2201      	movs	r2, #1
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	e001      	b.n	80085b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085b0:	697b      	ldr	r3, [r7, #20]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20001228 	.word	0x20001228
 80085c0:	20001208 	.word	0x20001208
 80085c4:	20000d30 	.word	0x20000d30
 80085c8:	200011c0 	.word	0x200011c0
 80085cc:	20000d2c 	.word	0x20000d2c
 80085d0:	20001214 	.word	0x20001214

080085d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085dc:	4b06      	ldr	r3, [pc, #24]	; (80085f8 <vTaskInternalSetTimeOutState+0x24>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085e4:	4b05      	ldr	r3, [pc, #20]	; (80085fc <vTaskInternalSetTimeOutState+0x28>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	20001218 	.word	0x20001218
 80085fc:	20001204 	.word	0x20001204

08008600 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b088      	sub	sp, #32
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	613b      	str	r3, [r7, #16]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10a      	bne.n	8008642 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	60fb      	str	r3, [r7, #12]
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008642:	f000 ff8f 	bl	8009564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008646:	4b1d      	ldr	r3, [pc, #116]	; (80086bc <xTaskCheckForTimeOut+0xbc>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	1ad3      	subs	r3, r2, r3
 8008654:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800865e:	d102      	bne.n	8008666 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008660:	2300      	movs	r3, #0
 8008662:	61fb      	str	r3, [r7, #28]
 8008664:	e023      	b.n	80086ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	4b15      	ldr	r3, [pc, #84]	; (80086c0 <xTaskCheckForTimeOut+0xc0>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	429a      	cmp	r2, r3
 8008670:	d007      	beq.n	8008682 <xTaskCheckForTimeOut+0x82>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	429a      	cmp	r2, r3
 800867a:	d302      	bcc.n	8008682 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800867c:	2301      	movs	r3, #1
 800867e:	61fb      	str	r3, [r7, #28]
 8008680:	e015      	b.n	80086ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	429a      	cmp	r2, r3
 800868a:	d20b      	bcs.n	80086a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f7ff ff9b 	bl	80085d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800869e:	2300      	movs	r3, #0
 80086a0:	61fb      	str	r3, [r7, #28]
 80086a2:	e004      	b.n	80086ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2200      	movs	r2, #0
 80086a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80086aa:	2301      	movs	r3, #1
 80086ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80086ae:	f000 ff89 	bl	80095c4 <vPortExitCritical>

	return xReturn;
 80086b2:	69fb      	ldr	r3, [r7, #28]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3720      	adds	r7, #32
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	20001204 	.word	0x20001204
 80086c0:	20001218 	.word	0x20001218

080086c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086c8:	4b03      	ldr	r3, [pc, #12]	; (80086d8 <vTaskMissedYield+0x14>)
 80086ca:	2201      	movs	r2, #1
 80086cc:	601a      	str	r2, [r3, #0]
}
 80086ce:	bf00      	nop
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	20001214 	.word	0x20001214

080086dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086e4:	f000 f852 	bl	800878c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086e8:	4b06      	ldr	r3, [pc, #24]	; (8008704 <prvIdleTask+0x28>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d9f9      	bls.n	80086e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086f0:	4b05      	ldr	r3, [pc, #20]	; (8008708 <prvIdleTask+0x2c>)
 80086f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008700:	e7f0      	b.n	80086e4 <prvIdleTask+0x8>
 8008702:	bf00      	nop
 8008704:	20000d30 	.word	0x20000d30
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008712:	2300      	movs	r3, #0
 8008714:	607b      	str	r3, [r7, #4]
 8008716:	e00c      	b.n	8008732 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4a12      	ldr	r2, [pc, #72]	; (800876c <prvInitialiseTaskLists+0x60>)
 8008724:	4413      	add	r3, r2
 8008726:	4618      	mov	r0, r3
 8008728:	f7fe fa5a 	bl	8006be0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	3301      	adds	r3, #1
 8008730:	607b      	str	r3, [r7, #4]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b37      	cmp	r3, #55	; 0x37
 8008736:	d9ef      	bls.n	8008718 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008738:	480d      	ldr	r0, [pc, #52]	; (8008770 <prvInitialiseTaskLists+0x64>)
 800873a:	f7fe fa51 	bl	8006be0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800873e:	480d      	ldr	r0, [pc, #52]	; (8008774 <prvInitialiseTaskLists+0x68>)
 8008740:	f7fe fa4e 	bl	8006be0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008744:	480c      	ldr	r0, [pc, #48]	; (8008778 <prvInitialiseTaskLists+0x6c>)
 8008746:	f7fe fa4b 	bl	8006be0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800874a:	480c      	ldr	r0, [pc, #48]	; (800877c <prvInitialiseTaskLists+0x70>)
 800874c:	f7fe fa48 	bl	8006be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008750:	480b      	ldr	r0, [pc, #44]	; (8008780 <prvInitialiseTaskLists+0x74>)
 8008752:	f7fe fa45 	bl	8006be0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008756:	4b0b      	ldr	r3, [pc, #44]	; (8008784 <prvInitialiseTaskLists+0x78>)
 8008758:	4a05      	ldr	r2, [pc, #20]	; (8008770 <prvInitialiseTaskLists+0x64>)
 800875a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800875c:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <prvInitialiseTaskLists+0x7c>)
 800875e:	4a05      	ldr	r2, [pc, #20]	; (8008774 <prvInitialiseTaskLists+0x68>)
 8008760:	601a      	str	r2, [r3, #0]
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20000d30 	.word	0x20000d30
 8008770:	20001190 	.word	0x20001190
 8008774:	200011a4 	.word	0x200011a4
 8008778:	200011c0 	.word	0x200011c0
 800877c:	200011d4 	.word	0x200011d4
 8008780:	200011ec 	.word	0x200011ec
 8008784:	200011b8 	.word	0x200011b8
 8008788:	200011bc 	.word	0x200011bc

0800878c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008792:	e019      	b.n	80087c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008794:	f000 fee6 	bl	8009564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008798:	4b10      	ldr	r3, [pc, #64]	; (80087dc <prvCheckTasksWaitingTermination+0x50>)
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	3304      	adds	r3, #4
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe faa5 	bl	8006cf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80087aa:	4b0d      	ldr	r3, [pc, #52]	; (80087e0 <prvCheckTasksWaitingTermination+0x54>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3b01      	subs	r3, #1
 80087b0:	4a0b      	ldr	r2, [pc, #44]	; (80087e0 <prvCheckTasksWaitingTermination+0x54>)
 80087b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087b4:	4b0b      	ldr	r3, [pc, #44]	; (80087e4 <prvCheckTasksWaitingTermination+0x58>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	3b01      	subs	r3, #1
 80087ba:	4a0a      	ldr	r2, [pc, #40]	; (80087e4 <prvCheckTasksWaitingTermination+0x58>)
 80087bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087be:	f000 ff01 	bl	80095c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 f810 	bl	80087e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087c8:	4b06      	ldr	r3, [pc, #24]	; (80087e4 <prvCheckTasksWaitingTermination+0x58>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e1      	bne.n	8008794 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	200011d4 	.word	0x200011d4
 80087e0:	20001200 	.word	0x20001200
 80087e4:	200011e8 	.word	0x200011e8

080087e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	3354      	adds	r3, #84	; 0x54
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 f9c9 	bl	8009b8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008800:	2b00      	cmp	r3, #0
 8008802:	d108      	bne.n	8008816 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	4618      	mov	r0, r3
 800880a:	f001 f899 	bl	8009940 <vPortFree>
				vPortFree( pxTCB );
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 f896 	bl	8009940 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008814:	e018      	b.n	8008848 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800881c:	2b01      	cmp	r3, #1
 800881e:	d103      	bne.n	8008828 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f001 f88d 	bl	8009940 <vPortFree>
	}
 8008826:	e00f      	b.n	8008848 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800882e:	2b02      	cmp	r3, #2
 8008830:	d00a      	beq.n	8008848 <prvDeleteTCB+0x60>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	60fb      	str	r3, [r7, #12]
}
 8008844:	bf00      	nop
 8008846:	e7fe      	b.n	8008846 <prvDeleteTCB+0x5e>
	}
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008856:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <prvResetNextTaskUnblockTime+0x38>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008860:	4b0a      	ldr	r3, [pc, #40]	; (800888c <prvResetNextTaskUnblockTime+0x3c>)
 8008862:	f04f 32ff 	mov.w	r2, #4294967295
 8008866:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008868:	e008      	b.n	800887c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <prvResetNextTaskUnblockTime+0x38>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4a04      	ldr	r2, [pc, #16]	; (800888c <prvResetNextTaskUnblockTime+0x3c>)
 800887a:	6013      	str	r3, [r2, #0]
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	200011b8 	.word	0x200011b8
 800888c:	20001220 	.word	0x20001220

08008890 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008896:	4b05      	ldr	r3, [pc, #20]	; (80088ac <xTaskGetCurrentTaskHandle+0x1c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800889c:	687b      	ldr	r3, [r7, #4]
	}
 800889e:	4618      	mov	r0, r3
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	20000d2c 	.word	0x20000d2c

080088b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088b6:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <xTaskGetSchedulerState+0x34>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d102      	bne.n	80088c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088be:	2301      	movs	r3, #1
 80088c0:	607b      	str	r3, [r7, #4]
 80088c2:	e008      	b.n	80088d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088c4:	4b08      	ldr	r3, [pc, #32]	; (80088e8 <xTaskGetSchedulerState+0x38>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088cc:	2302      	movs	r3, #2
 80088ce:	607b      	str	r3, [r7, #4]
 80088d0:	e001      	b.n	80088d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088d2:	2300      	movs	r3, #0
 80088d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088d6:	687b      	ldr	r3, [r7, #4]
	}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	2000120c 	.word	0x2000120c
 80088e8:	20001228 	.word	0x20001228

080088ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088f8:	2300      	movs	r3, #0
 80088fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d051      	beq.n	80089a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008906:	4b2a      	ldr	r3, [pc, #168]	; (80089b0 <xTaskPriorityInherit+0xc4>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	429a      	cmp	r2, r3
 800890e:	d241      	bcs.n	8008994 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	699b      	ldr	r3, [r3, #24]
 8008914:	2b00      	cmp	r3, #0
 8008916:	db06      	blt.n	8008926 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008918:	4b25      	ldr	r3, [pc, #148]	; (80089b0 <xTaskPriorityInherit+0xc4>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	6959      	ldr	r1, [r3, #20]
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4a1f      	ldr	r2, [pc, #124]	; (80089b4 <xTaskPriorityInherit+0xc8>)
 8008938:	4413      	add	r3, r2
 800893a:	4299      	cmp	r1, r3
 800893c:	d122      	bne.n	8008984 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	3304      	adds	r3, #4
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe f9d6 	bl	8006cf4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008948:	4b19      	ldr	r3, [pc, #100]	; (80089b0 <xTaskPriorityInherit+0xc4>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008956:	4b18      	ldr	r3, [pc, #96]	; (80089b8 <xTaskPriorityInherit+0xcc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	429a      	cmp	r2, r3
 800895c:	d903      	bls.n	8008966 <xTaskPriorityInherit+0x7a>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008962:	4a15      	ldr	r2, [pc, #84]	; (80089b8 <xTaskPriorityInherit+0xcc>)
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800896a:	4613      	mov	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4a10      	ldr	r2, [pc, #64]	; (80089b4 <xTaskPriorityInherit+0xc8>)
 8008974:	441a      	add	r2, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	3304      	adds	r3, #4
 800897a:	4619      	mov	r1, r3
 800897c:	4610      	mov	r0, r2
 800897e:	f7fe f95c 	bl	8006c3a <vListInsertEnd>
 8008982:	e004      	b.n	800898e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008984:	4b0a      	ldr	r3, [pc, #40]	; (80089b0 <xTaskPriorityInherit+0xc4>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800898e:	2301      	movs	r3, #1
 8008990:	60fb      	str	r3, [r7, #12]
 8008992:	e008      	b.n	80089a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008998:	4b05      	ldr	r3, [pc, #20]	; (80089b0 <xTaskPriorityInherit+0xc4>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	429a      	cmp	r2, r3
 80089a0:	d201      	bcs.n	80089a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80089a2:	2301      	movs	r3, #1
 80089a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089a6:	68fb      	ldr	r3, [r7, #12]
	}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3710      	adds	r7, #16
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	20000d2c 	.word	0x20000d2c
 80089b4:	20000d30 	.word	0x20000d30
 80089b8:	20001208 	.word	0x20001208

080089bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d056      	beq.n	8008a80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089d2:	4b2e      	ldr	r3, [pc, #184]	; (8008a8c <xTaskPriorityDisinherit+0xd0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	693a      	ldr	r2, [r7, #16]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d00a      	beq.n	80089f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80089dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e0:	f383 8811 	msr	BASEPRI, r3
 80089e4:	f3bf 8f6f 	isb	sy
 80089e8:	f3bf 8f4f 	dsb	sy
 80089ec:	60fb      	str	r3, [r7, #12]
}
 80089ee:	bf00      	nop
 80089f0:	e7fe      	b.n	80089f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	60bb      	str	r3, [r7, #8]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a14:	1e5a      	subs	r2, r3, #1
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d02c      	beq.n	8008a80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d128      	bne.n	8008a80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fe f95e 	bl	8006cf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a50:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <xTaskPriorityDisinherit+0xd4>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d903      	bls.n	8008a60 <xTaskPriorityDisinherit+0xa4>
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	4a0c      	ldr	r2, [pc, #48]	; (8008a90 <xTaskPriorityDisinherit+0xd4>)
 8008a5e:	6013      	str	r3, [r2, #0]
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a64:	4613      	mov	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4a09      	ldr	r2, [pc, #36]	; (8008a94 <xTaskPriorityDisinherit+0xd8>)
 8008a6e:	441a      	add	r2, r3
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	3304      	adds	r3, #4
 8008a74:	4619      	mov	r1, r3
 8008a76:	4610      	mov	r0, r2
 8008a78:	f7fe f8df 	bl	8006c3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a80:	697b      	ldr	r3, [r7, #20]
	}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3718      	adds	r7, #24
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	20000d2c 	.word	0x20000d2c
 8008a90:	20001208 	.word	0x20001208
 8008a94:	20000d30 	.word	0x20000d30

08008a98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b088      	sub	sp, #32
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d06a      	beq.n	8008b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	60fb      	str	r3, [r7, #12]
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d902      	bls.n	8008ade <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	61fb      	str	r3, [r7, #28]
 8008adc:	e002      	b.n	8008ae4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d04b      	beq.n	8008b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d146      	bne.n	8008b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008af8:	4b25      	ldr	r3, [pc, #148]	; (8008b90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d10a      	bne.n	8008b18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	60bb      	str	r3, [r7, #8]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b24:	69bb      	ldr	r3, [r7, #24]
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	db04      	blt.n	8008b36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	6959      	ldr	r1, [r3, #20]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4a13      	ldr	r2, [pc, #76]	; (8008b94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b46:	4413      	add	r3, r2
 8008b48:	4299      	cmp	r1, r3
 8008b4a:	d11c      	bne.n	8008b86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b4c:	69bb      	ldr	r3, [r7, #24]
 8008b4e:	3304      	adds	r3, #4
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe f8cf 	bl	8006cf4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5a:	4b0f      	ldr	r3, [pc, #60]	; (8008b98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d903      	bls.n	8008b6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b66:	4a0c      	ldr	r2, [pc, #48]	; (8008b98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4a07      	ldr	r2, [pc, #28]	; (8008b94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b78:	441a      	add	r2, r3
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4610      	mov	r0, r2
 8008b82:	f7fe f85a 	bl	8006c3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b86:	bf00      	nop
 8008b88:	3720      	adds	r7, #32
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	20000d2c 	.word	0x20000d2c
 8008b94:	20000d30 	.word	0x20000d30
 8008b98:	20001208 	.word	0x20001208

08008b9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008ba0:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d004      	beq.n	8008bb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008ba8:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bae:	3201      	adds	r2, #1
 8008bb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008bb2:	4b03      	ldr	r3, [pc, #12]	; (8008bc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
	}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	20000d2c 	.word	0x20000d2c

08008bc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bce:	4b21      	ldr	r3, [pc, #132]	; (8008c54 <prvAddCurrentTaskToDelayedList+0x90>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bd4:	4b20      	ldr	r3, [pc, #128]	; (8008c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	3304      	adds	r3, #4
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fe f88a 	bl	8006cf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be6:	d10a      	bne.n	8008bfe <prvAddCurrentTaskToDelayedList+0x3a>
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d007      	beq.n	8008bfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bee:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4819      	ldr	r0, [pc, #100]	; (8008c5c <prvAddCurrentTaskToDelayedList+0x98>)
 8008bf8:	f7fe f81f 	bl	8006c3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bfc:	e026      	b.n	8008c4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4413      	add	r3, r2
 8008c04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c06:	4b14      	ldr	r3, [pc, #80]	; (8008c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68ba      	ldr	r2, [r7, #8]
 8008c0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c0e:	68ba      	ldr	r2, [r7, #8]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d209      	bcs.n	8008c2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c16:	4b12      	ldr	r3, [pc, #72]	; (8008c60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	4b0f      	ldr	r3, [pc, #60]	; (8008c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	4619      	mov	r1, r3
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7fe f82d 	bl	8006c82 <vListInsert>
}
 8008c28:	e010      	b.n	8008c4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c2a:	4b0e      	ldr	r3, [pc, #56]	; (8008c64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7fe f823 	bl	8006c82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c3c:	4b0a      	ldr	r3, [pc, #40]	; (8008c68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d202      	bcs.n	8008c4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c46:	4a08      	ldr	r2, [pc, #32]	; (8008c68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	6013      	str	r3, [r2, #0]
}
 8008c4c:	bf00      	nop
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	20001204 	.word	0x20001204
 8008c58:	20000d2c 	.word	0x20000d2c
 8008c5c:	200011ec 	.word	0x200011ec
 8008c60:	200011bc 	.word	0x200011bc
 8008c64:	200011b8 	.word	0x200011b8
 8008c68:	20001220 	.word	0x20001220

08008c6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08a      	sub	sp, #40	; 0x28
 8008c70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c76:	f000 fb07 	bl	8009288 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c7a:	4b1c      	ldr	r3, [pc, #112]	; (8008cec <xTimerCreateTimerTask+0x80>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d021      	beq.n	8008cc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c8a:	1d3a      	adds	r2, r7, #4
 8008c8c:	f107 0108 	add.w	r1, r7, #8
 8008c90:	f107 030c 	add.w	r3, r7, #12
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fd ff89 	bl	8006bac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c9a:	6879      	ldr	r1, [r7, #4]
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	9202      	str	r2, [sp, #8]
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	2300      	movs	r3, #0
 8008caa:	460a      	mov	r2, r1
 8008cac:	4910      	ldr	r1, [pc, #64]	; (8008cf0 <xTimerCreateTimerTask+0x84>)
 8008cae:	4811      	ldr	r0, [pc, #68]	; (8008cf4 <xTimerCreateTimerTask+0x88>)
 8008cb0:	f7fe ff4a 	bl	8007b48 <xTaskCreateStatic>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	4a10      	ldr	r2, [pc, #64]	; (8008cf8 <xTimerCreateTimerTask+0x8c>)
 8008cb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008cba:	4b0f      	ldr	r3, [pc, #60]	; (8008cf8 <xTimerCreateTimerTask+0x8c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10a      	bne.n	8008ce2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	613b      	str	r3, [r7, #16]
}
 8008cde:	bf00      	nop
 8008ce0:	e7fe      	b.n	8008ce0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ce2:	697b      	ldr	r3, [r7, #20]
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	2000125c 	.word	0x2000125c
 8008cf0:	08009ddc 	.word	0x08009ddc
 8008cf4:	08008e31 	.word	0x08008e31
 8008cf8:	20001260 	.word	0x20001260

08008cfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b08a      	sub	sp, #40	; 0x28
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	623b      	str	r3, [r7, #32]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d2a:	4b1a      	ldr	r3, [pc, #104]	; (8008d94 <xTimerGenericCommand+0x98>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d02a      	beq.n	8008d88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	2b05      	cmp	r3, #5
 8008d42:	dc18      	bgt.n	8008d76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d44:	f7ff fdb4 	bl	80088b0 <xTaskGetSchedulerState>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d109      	bne.n	8008d62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <xTimerGenericCommand+0x98>)
 8008d50:	6818      	ldr	r0, [r3, #0]
 8008d52:	f107 0110 	add.w	r1, r7, #16
 8008d56:	2300      	movs	r3, #0
 8008d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d5a:	f7fe f9e9 	bl	8007130 <xQueueGenericSend>
 8008d5e:	6278      	str	r0, [r7, #36]	; 0x24
 8008d60:	e012      	b.n	8008d88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d62:	4b0c      	ldr	r3, [pc, #48]	; (8008d94 <xTimerGenericCommand+0x98>)
 8008d64:	6818      	ldr	r0, [r3, #0]
 8008d66:	f107 0110 	add.w	r1, r7, #16
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f7fe f9df 	bl	8007130 <xQueueGenericSend>
 8008d72:	6278      	str	r0, [r7, #36]	; 0x24
 8008d74:	e008      	b.n	8008d88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d76:	4b07      	ldr	r3, [pc, #28]	; (8008d94 <xTimerGenericCommand+0x98>)
 8008d78:	6818      	ldr	r0, [r3, #0]
 8008d7a:	f107 0110 	add.w	r1, r7, #16
 8008d7e:	2300      	movs	r3, #0
 8008d80:	683a      	ldr	r2, [r7, #0]
 8008d82:	f7fe fad3 	bl	800732c <xQueueGenericSendFromISR>
 8008d86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3728      	adds	r7, #40	; 0x28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	2000125c 	.word	0x2000125c

08008d98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af02      	add	r7, sp, #8
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008da2:	4b22      	ldr	r3, [pc, #136]	; (8008e2c <prvProcessExpiredTimer+0x94>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	3304      	adds	r3, #4
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fd ff9f 	bl	8006cf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dbc:	f003 0304 	and.w	r3, r3, #4
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d022      	beq.n	8008e0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	699a      	ldr	r2, [r3, #24]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	18d1      	adds	r1, r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	6978      	ldr	r0, [r7, #20]
 8008dd2:	f000 f8d1 	bl	8008f78 <prvInsertTimerInActiveList>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01f      	beq.n	8008e1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ddc:	2300      	movs	r3, #0
 8008dde:	9300      	str	r3, [sp, #0]
 8008de0:	2300      	movs	r3, #0
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	2100      	movs	r1, #0
 8008de6:	6978      	ldr	r0, [r7, #20]
 8008de8:	f7ff ff88 	bl	8008cfc <xTimerGenericCommand>
 8008dec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d113      	bne.n	8008e1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df8:	f383 8811 	msr	BASEPRI, r3
 8008dfc:	f3bf 8f6f 	isb	sy
 8008e00:	f3bf 8f4f 	dsb	sy
 8008e04:	60fb      	str	r3, [r7, #12]
}
 8008e06:	bf00      	nop
 8008e08:	e7fe      	b.n	8008e08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e10:	f023 0301 	bic.w	r3, r3, #1
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	6a1b      	ldr	r3, [r3, #32]
 8008e20:	6978      	ldr	r0, [r7, #20]
 8008e22:	4798      	blx	r3
}
 8008e24:	bf00      	nop
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20001254 	.word	0x20001254

08008e30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e38:	f107 0308 	add.w	r3, r7, #8
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 f857 	bl	8008ef0 <prvGetNextExpireTime>
 8008e42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4619      	mov	r1, r3
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f803 	bl	8008e54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e4e:	f000 f8d5 	bl	8008ffc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e52:	e7f1      	b.n	8008e38 <prvTimerTask+0x8>

08008e54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e5e:	f7ff f919 	bl	8008094 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e62:	f107 0308 	add.w	r3, r7, #8
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 f866 	bl	8008f38 <prvSampleTimeNow>
 8008e6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d130      	bne.n	8008ed6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10a      	bne.n	8008e90 <prvProcessTimerOrBlockTask+0x3c>
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d806      	bhi.n	8008e90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e82:	f7ff f915 	bl	80080b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7ff ff85 	bl	8008d98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e8e:	e024      	b.n	8008eda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d008      	beq.n	8008ea8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e96:	4b13      	ldr	r3, [pc, #76]	; (8008ee4 <prvProcessTimerOrBlockTask+0x90>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d101      	bne.n	8008ea4 <prvProcessTimerOrBlockTask+0x50>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e000      	b.n	8008ea6 <prvProcessTimerOrBlockTask+0x52>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008ea8:	4b0f      	ldr	r3, [pc, #60]	; (8008ee8 <prvProcessTimerOrBlockTask+0x94>)
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f7fe fe13 	bl	8007ae0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008eba:	f7ff f8f9 	bl	80080b0 <xTaskResumeAll>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10a      	bne.n	8008eda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008ec4:	4b09      	ldr	r3, [pc, #36]	; (8008eec <prvProcessTimerOrBlockTask+0x98>)
 8008ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eca:	601a      	str	r2, [r3, #0]
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	f3bf 8f6f 	isb	sy
}
 8008ed4:	e001      	b.n	8008eda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ed6:	f7ff f8eb 	bl	80080b0 <xTaskResumeAll>
}
 8008eda:	bf00      	nop
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20001258 	.word	0x20001258
 8008ee8:	2000125c 	.word	0x2000125c
 8008eec:	e000ed04 	.word	0xe000ed04

08008ef0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b085      	sub	sp, #20
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ef8:	4b0e      	ldr	r3, [pc, #56]	; (8008f34 <prvGetNextExpireTime+0x44>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <prvGetNextExpireTime+0x16>
 8008f02:	2201      	movs	r2, #1
 8008f04:	e000      	b.n	8008f08 <prvGetNextExpireTime+0x18>
 8008f06:	2200      	movs	r2, #0
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d105      	bne.n	8008f20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f14:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <prvGetNextExpireTime+0x44>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	e001      	b.n	8008f24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f24:	68fb      	ldr	r3, [r7, #12]
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3714      	adds	r7, #20
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	20001254 	.word	0x20001254

08008f38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f40:	f7ff f954 	bl	80081ec <xTaskGetTickCount>
 8008f44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f46:	4b0b      	ldr	r3, [pc, #44]	; (8008f74 <prvSampleTimeNow+0x3c>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	68fa      	ldr	r2, [r7, #12]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d205      	bcs.n	8008f5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f50:	f000 f936 	bl	80091c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	e002      	b.n	8008f62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f62:	4a04      	ldr	r2, [pc, #16]	; (8008f74 <prvSampleTimeNow+0x3c>)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f68:	68fb      	ldr	r3, [r7, #12]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	20001264 	.word	0x20001264

08008f78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d812      	bhi.n	8008fc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	1ad2      	subs	r2, r2, r3
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	699b      	ldr	r3, [r3, #24]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d302      	bcc.n	8008fb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008fac:	2301      	movs	r3, #1
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	e01b      	b.n	8008fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008fb2:	4b10      	ldr	r3, [pc, #64]	; (8008ff4 <prvInsertTimerInActiveList+0x7c>)
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f7fd fe60 	bl	8006c82 <vListInsert>
 8008fc2:	e012      	b.n	8008fea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d206      	bcs.n	8008fda <prvInsertTimerInActiveList+0x62>
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d302      	bcc.n	8008fda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	e007      	b.n	8008fea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fda:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <prvInsertTimerInActiveList+0x80>)
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	f7fd fe4c 	bl	8006c82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fea:	697b      	ldr	r3, [r7, #20]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	20001258 	.word	0x20001258
 8008ff8:	20001254 	.word	0x20001254

08008ffc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b08e      	sub	sp, #56	; 0x38
 8009000:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009002:	e0ca      	b.n	800919a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	da18      	bge.n	800903c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800900a:	1d3b      	adds	r3, r7, #4
 800900c:	3304      	adds	r3, #4
 800900e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d10a      	bne.n	800902c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	f383 8811 	msr	BASEPRI, r3
 800901e:	f3bf 8f6f 	isb	sy
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	61fb      	str	r3, [r7, #28]
}
 8009028:	bf00      	nop
 800902a:	e7fe      	b.n	800902a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009032:	6850      	ldr	r0, [r2, #4]
 8009034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009036:	6892      	ldr	r2, [r2, #8]
 8009038:	4611      	mov	r1, r2
 800903a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2b00      	cmp	r3, #0
 8009040:	f2c0 80ab 	blt.w	800919a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	3304      	adds	r3, #4
 8009054:	4618      	mov	r0, r3
 8009056:	f7fd fe4d 	bl	8006cf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800905a:	463b      	mov	r3, r7
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff ff6b 	bl	8008f38 <prvSampleTimeNow>
 8009062:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b09      	cmp	r3, #9
 8009068:	f200 8096 	bhi.w	8009198 <prvProcessReceivedCommands+0x19c>
 800906c:	a201      	add	r2, pc, #4	; (adr r2, 8009074 <prvProcessReceivedCommands+0x78>)
 800906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009072:	bf00      	nop
 8009074:	0800909d 	.word	0x0800909d
 8009078:	0800909d 	.word	0x0800909d
 800907c:	0800909d 	.word	0x0800909d
 8009080:	08009111 	.word	0x08009111
 8009084:	08009125 	.word	0x08009125
 8009088:	0800916f 	.word	0x0800916f
 800908c:	0800909d 	.word	0x0800909d
 8009090:	0800909d 	.word	0x0800909d
 8009094:	08009111 	.word	0x08009111
 8009098:	08009125 	.word	0x08009125
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090a2:	f043 0301 	orr.w	r3, r3, #1
 80090a6:	b2da      	uxtb	r2, r3
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	18d1      	adds	r1, r2, r3
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090bc:	f7ff ff5c 	bl	8008f78 <prvInsertTimerInActiveList>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d069      	beq.n	800919a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090d4:	f003 0304 	and.w	r3, r3, #4
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d05e      	beq.n	800919a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	441a      	add	r2, r3
 80090e4:	2300      	movs	r3, #0
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	2300      	movs	r3, #0
 80090ea:	2100      	movs	r1, #0
 80090ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ee:	f7ff fe05 	bl	8008cfc <xTimerGenericCommand>
 80090f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d14f      	bne.n	800919a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	61bb      	str	r3, [r7, #24]
}
 800910c:	bf00      	nop
 800910e:	e7fe      	b.n	800910e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009116:	f023 0301 	bic.w	r3, r3, #1
 800911a:	b2da      	uxtb	r2, r3
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009122:	e03a      	b.n	800919a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800912a:	f043 0301 	orr.w	r3, r3, #1
 800912e:	b2da      	uxtb	r2, r3
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10a      	bne.n	800915a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009148:	f383 8811 	msr	BASEPRI, r3
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	617b      	str	r3, [r7, #20]
}
 8009156:	bf00      	nop
 8009158:	e7fe      	b.n	8009158 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800915c:	699a      	ldr	r2, [r3, #24]
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	18d1      	adds	r1, r2, r3
 8009162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009168:	f7ff ff06 	bl	8008f78 <prvInsertTimerInActiveList>
					break;
 800916c:	e015      	b.n	800919a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800916e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009174:	f003 0302 	and.w	r3, r3, #2
 8009178:	2b00      	cmp	r3, #0
 800917a:	d103      	bne.n	8009184 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800917c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800917e:	f000 fbdf 	bl	8009940 <vPortFree>
 8009182:	e00a      	b.n	800919a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800918a:	f023 0301 	bic.w	r3, r3, #1
 800918e:	b2da      	uxtb	r2, r3
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009196:	e000      	b.n	800919a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009198:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800919a:	4b08      	ldr	r3, [pc, #32]	; (80091bc <prvProcessReceivedCommands+0x1c0>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	1d39      	adds	r1, r7, #4
 80091a0:	2200      	movs	r2, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7fe f95e 	bl	8007464 <xQueueReceive>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	f47f af2a 	bne.w	8009004 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
 80091b4:	3730      	adds	r7, #48	; 0x30
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	2000125c 	.word	0x2000125c

080091c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091c6:	e048      	b.n	800925a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091c8:	4b2d      	ldr	r3, [pc, #180]	; (8009280 <prvSwitchTimerLists+0xc0>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d2:	4b2b      	ldr	r3, [pc, #172]	; (8009280 <prvSwitchTimerLists+0xc0>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	3304      	adds	r3, #4
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7fd fd87 	bl	8006cf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091f4:	f003 0304 	and.w	r3, r3, #4
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d02e      	beq.n	800925a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	699b      	ldr	r3, [r3, #24]
 8009200:	693a      	ldr	r2, [r7, #16]
 8009202:	4413      	add	r3, r2
 8009204:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	429a      	cmp	r2, r3
 800920c:	d90e      	bls.n	800922c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800921a:	4b19      	ldr	r3, [pc, #100]	; (8009280 <prvSwitchTimerLists+0xc0>)
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3304      	adds	r3, #4
 8009222:	4619      	mov	r1, r3
 8009224:	4610      	mov	r0, r2
 8009226:	f7fd fd2c 	bl	8006c82 <vListInsert>
 800922a:	e016      	b.n	800925a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800922c:	2300      	movs	r3, #0
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	2300      	movs	r3, #0
 8009232:	693a      	ldr	r2, [r7, #16]
 8009234:	2100      	movs	r1, #0
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f7ff fd60 	bl	8008cfc <xTimerGenericCommand>
 800923c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10a      	bne.n	800925a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	603b      	str	r3, [r7, #0]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800925a:	4b09      	ldr	r3, [pc, #36]	; (8009280 <prvSwitchTimerLists+0xc0>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1b1      	bne.n	80091c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009264:	4b06      	ldr	r3, [pc, #24]	; (8009280 <prvSwitchTimerLists+0xc0>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800926a:	4b06      	ldr	r3, [pc, #24]	; (8009284 <prvSwitchTimerLists+0xc4>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a04      	ldr	r2, [pc, #16]	; (8009280 <prvSwitchTimerLists+0xc0>)
 8009270:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009272:	4a04      	ldr	r2, [pc, #16]	; (8009284 <prvSwitchTimerLists+0xc4>)
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	6013      	str	r3, [r2, #0]
}
 8009278:	bf00      	nop
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	20001254 	.word	0x20001254
 8009284:	20001258 	.word	0x20001258

08009288 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800928e:	f000 f969 	bl	8009564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009292:	4b15      	ldr	r3, [pc, #84]	; (80092e8 <prvCheckForValidListAndQueue+0x60>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d120      	bne.n	80092dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800929a:	4814      	ldr	r0, [pc, #80]	; (80092ec <prvCheckForValidListAndQueue+0x64>)
 800929c:	f7fd fca0 	bl	8006be0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80092a0:	4813      	ldr	r0, [pc, #76]	; (80092f0 <prvCheckForValidListAndQueue+0x68>)
 80092a2:	f7fd fc9d 	bl	8006be0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80092a6:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <prvCheckForValidListAndQueue+0x6c>)
 80092a8:	4a10      	ldr	r2, [pc, #64]	; (80092ec <prvCheckForValidListAndQueue+0x64>)
 80092aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80092ac:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <prvCheckForValidListAndQueue+0x70>)
 80092ae:	4a10      	ldr	r2, [pc, #64]	; (80092f0 <prvCheckForValidListAndQueue+0x68>)
 80092b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092b2:	2300      	movs	r3, #0
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	4b11      	ldr	r3, [pc, #68]	; (80092fc <prvCheckForValidListAndQueue+0x74>)
 80092b8:	4a11      	ldr	r2, [pc, #68]	; (8009300 <prvCheckForValidListAndQueue+0x78>)
 80092ba:	2110      	movs	r1, #16
 80092bc:	200a      	movs	r0, #10
 80092be:	f7fd fdab 	bl	8006e18 <xQueueGenericCreateStatic>
 80092c2:	4603      	mov	r3, r0
 80092c4:	4a08      	ldr	r2, [pc, #32]	; (80092e8 <prvCheckForValidListAndQueue+0x60>)
 80092c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80092c8:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <prvCheckForValidListAndQueue+0x60>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092d0:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <prvCheckForValidListAndQueue+0x60>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	490b      	ldr	r1, [pc, #44]	; (8009304 <prvCheckForValidListAndQueue+0x7c>)
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe fbd8 	bl	8007a8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092dc:	f000 f972 	bl	80095c4 <vPortExitCritical>
}
 80092e0:	bf00      	nop
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	2000125c 	.word	0x2000125c
 80092ec:	2000122c 	.word	0x2000122c
 80092f0:	20001240 	.word	0x20001240
 80092f4:	20001254 	.word	0x20001254
 80092f8:	20001258 	.word	0x20001258
 80092fc:	20001308 	.word	0x20001308
 8009300:	20001268 	.word	0x20001268
 8009304:	08009de4 	.word	0x08009de4

08009308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	3b04      	subs	r3, #4
 8009318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3b04      	subs	r3, #4
 8009326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f023 0201 	bic.w	r2, r3, #1
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3b04      	subs	r3, #4
 8009336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009338:	4a0c      	ldr	r2, [pc, #48]	; (800936c <pxPortInitialiseStack+0x64>)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3b14      	subs	r3, #20
 8009342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	3b04      	subs	r3, #4
 800934e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f06f 0202 	mvn.w	r2, #2
 8009356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	3b20      	subs	r3, #32
 800935c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800935e:	68fb      	ldr	r3, [r7, #12]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr
 800936c:	08009371 	.word	0x08009371

08009370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009376:	2300      	movs	r3, #0
 8009378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800937a:	4b12      	ldr	r3, [pc, #72]	; (80093c4 <prvTaskExitError+0x54>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009382:	d00a      	beq.n	800939a <prvTaskExitError+0x2a>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	60fb      	str	r3, [r7, #12]
}
 8009396:	bf00      	nop
 8009398:	e7fe      	b.n	8009398 <prvTaskExitError+0x28>
	__asm volatile
 800939a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939e:	f383 8811 	msr	BASEPRI, r3
 80093a2:	f3bf 8f6f 	isb	sy
 80093a6:	f3bf 8f4f 	dsb	sy
 80093aa:	60bb      	str	r3, [r7, #8]
}
 80093ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80093ae:	bf00      	nop
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0fc      	beq.n	80093b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	20000010 	.word	0x20000010
	...

080093d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093d0:	4b07      	ldr	r3, [pc, #28]	; (80093f0 <pxCurrentTCBConst2>)
 80093d2:	6819      	ldr	r1, [r3, #0]
 80093d4:	6808      	ldr	r0, [r1, #0]
 80093d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093da:	f380 8809 	msr	PSP, r0
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f04f 0000 	mov.w	r0, #0
 80093e6:	f380 8811 	msr	BASEPRI, r0
 80093ea:	4770      	bx	lr
 80093ec:	f3af 8000 	nop.w

080093f0 <pxCurrentTCBConst2>:
 80093f0:	20000d2c 	.word	0x20000d2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093f4:	bf00      	nop
 80093f6:	bf00      	nop

080093f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093f8:	4808      	ldr	r0, [pc, #32]	; (800941c <prvPortStartFirstTask+0x24>)
 80093fa:	6800      	ldr	r0, [r0, #0]
 80093fc:	6800      	ldr	r0, [r0, #0]
 80093fe:	f380 8808 	msr	MSP, r0
 8009402:	f04f 0000 	mov.w	r0, #0
 8009406:	f380 8814 	msr	CONTROL, r0
 800940a:	b662      	cpsie	i
 800940c:	b661      	cpsie	f
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	df00      	svc	0
 8009418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800941a:	bf00      	nop
 800941c:	e000ed08 	.word	0xe000ed08

08009420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009426:	4b46      	ldr	r3, [pc, #280]	; (8009540 <xPortStartScheduler+0x120>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a46      	ldr	r2, [pc, #280]	; (8009544 <xPortStartScheduler+0x124>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d10a      	bne.n	8009446 <xPortStartScheduler+0x26>
	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	613b      	str	r3, [r7, #16]
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009446:	4b3e      	ldr	r3, [pc, #248]	; (8009540 <xPortStartScheduler+0x120>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a3f      	ldr	r2, [pc, #252]	; (8009548 <xPortStartScheduler+0x128>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d10a      	bne.n	8009466 <xPortStartScheduler+0x46>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60fb      	str	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009466:	4b39      	ldr	r3, [pc, #228]	; (800954c <xPortStartScheduler+0x12c>)
 8009468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	b2db      	uxtb	r3, r3
 8009470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	22ff      	movs	r2, #255	; 0xff
 8009476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	b2db      	uxtb	r3, r3
 800947e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009480:	78fb      	ldrb	r3, [r7, #3]
 8009482:	b2db      	uxtb	r3, r3
 8009484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009488:	b2da      	uxtb	r2, r3
 800948a:	4b31      	ldr	r3, [pc, #196]	; (8009550 <xPortStartScheduler+0x130>)
 800948c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800948e:	4b31      	ldr	r3, [pc, #196]	; (8009554 <xPortStartScheduler+0x134>)
 8009490:	2207      	movs	r2, #7
 8009492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009494:	e009      	b.n	80094aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009496:	4b2f      	ldr	r3, [pc, #188]	; (8009554 <xPortStartScheduler+0x134>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	3b01      	subs	r3, #1
 800949c:	4a2d      	ldr	r2, [pc, #180]	; (8009554 <xPortStartScheduler+0x134>)
 800949e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80094a0:	78fb      	ldrb	r3, [r7, #3]
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80094aa:	78fb      	ldrb	r3, [r7, #3]
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b2:	2b80      	cmp	r3, #128	; 0x80
 80094b4:	d0ef      	beq.n	8009496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094b6:	4b27      	ldr	r3, [pc, #156]	; (8009554 <xPortStartScheduler+0x134>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f1c3 0307 	rsb	r3, r3, #7
 80094be:	2b04      	cmp	r3, #4
 80094c0:	d00a      	beq.n	80094d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80094c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c6:	f383 8811 	msr	BASEPRI, r3
 80094ca:	f3bf 8f6f 	isb	sy
 80094ce:	f3bf 8f4f 	dsb	sy
 80094d2:	60bb      	str	r3, [r7, #8]
}
 80094d4:	bf00      	nop
 80094d6:	e7fe      	b.n	80094d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094d8:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <xPortStartScheduler+0x134>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	4a1d      	ldr	r2, [pc, #116]	; (8009554 <xPortStartScheduler+0x134>)
 80094e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094e2:	4b1c      	ldr	r3, [pc, #112]	; (8009554 <xPortStartScheduler+0x134>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094ea:	4a1a      	ldr	r2, [pc, #104]	; (8009554 <xPortStartScheduler+0x134>)
 80094ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	b2da      	uxtb	r2, r3
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094f6:	4b18      	ldr	r3, [pc, #96]	; (8009558 <xPortStartScheduler+0x138>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a17      	ldr	r2, [pc, #92]	; (8009558 <xPortStartScheduler+0x138>)
 80094fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009502:	4b15      	ldr	r3, [pc, #84]	; (8009558 <xPortStartScheduler+0x138>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4a14      	ldr	r2, [pc, #80]	; (8009558 <xPortStartScheduler+0x138>)
 8009508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800950c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800950e:	f000 f8dd 	bl	80096cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009512:	4b12      	ldr	r3, [pc, #72]	; (800955c <xPortStartScheduler+0x13c>)
 8009514:	2200      	movs	r2, #0
 8009516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009518:	f000 f8fc 	bl	8009714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800951c:	4b10      	ldr	r3, [pc, #64]	; (8009560 <xPortStartScheduler+0x140>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a0f      	ldr	r2, [pc, #60]	; (8009560 <xPortStartScheduler+0x140>)
 8009522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009528:	f7ff ff66 	bl	80093f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800952c:	f7fe ff3a 	bl	80083a4 <vTaskSwitchContext>
	prvTaskExitError();
 8009530:	f7ff ff1e 	bl	8009370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3718      	adds	r7, #24
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	e000ed00 	.word	0xe000ed00
 8009544:	410fc271 	.word	0x410fc271
 8009548:	410fc270 	.word	0x410fc270
 800954c:	e000e400 	.word	0xe000e400
 8009550:	20001358 	.word	0x20001358
 8009554:	2000135c 	.word	0x2000135c
 8009558:	e000ed20 	.word	0xe000ed20
 800955c:	20000010 	.word	0x20000010
 8009560:	e000ef34 	.word	0xe000ef34

08009564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
	__asm volatile
 800956a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956e:	f383 8811 	msr	BASEPRI, r3
 8009572:	f3bf 8f6f 	isb	sy
 8009576:	f3bf 8f4f 	dsb	sy
 800957a:	607b      	str	r3, [r7, #4]
}
 800957c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800957e:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <vPortEnterCritical+0x58>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3301      	adds	r3, #1
 8009584:	4a0d      	ldr	r2, [pc, #52]	; (80095bc <vPortEnterCritical+0x58>)
 8009586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009588:	4b0c      	ldr	r3, [pc, #48]	; (80095bc <vPortEnterCritical+0x58>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d10f      	bne.n	80095b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009590:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <vPortEnterCritical+0x5c>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00a      	beq.n	80095b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	603b      	str	r3, [r7, #0]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <vPortEnterCritical+0x4a>
	}
}
 80095b0:	bf00      	nop
 80095b2:	370c      	adds	r7, #12
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	20000010 	.word	0x20000010
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095ca:	4b12      	ldr	r3, [pc, #72]	; (8009614 <vPortExitCritical+0x50>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <vPortExitCritical+0x24>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	607b      	str	r3, [r7, #4]
}
 80095e4:	bf00      	nop
 80095e6:	e7fe      	b.n	80095e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095e8:	4b0a      	ldr	r3, [pc, #40]	; (8009614 <vPortExitCritical+0x50>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3b01      	subs	r3, #1
 80095ee:	4a09      	ldr	r2, [pc, #36]	; (8009614 <vPortExitCritical+0x50>)
 80095f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095f2:	4b08      	ldr	r3, [pc, #32]	; (8009614 <vPortExitCritical+0x50>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <vPortExitCritical+0x42>
 80095fa:	2300      	movs	r3, #0
 80095fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	f383 8811 	msr	BASEPRI, r3
}
 8009604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009606:	bf00      	nop
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	20000010 	.word	0x20000010
	...

08009620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009620:	f3ef 8009 	mrs	r0, PSP
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	4b15      	ldr	r3, [pc, #84]	; (8009680 <pxCurrentTCBConst>)
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	f01e 0f10 	tst.w	lr, #16
 8009630:	bf08      	it	eq
 8009632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800963a:	6010      	str	r0, [r2, #0]
 800963c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009644:	f380 8811 	msr	BASEPRI, r0
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f7fe fea8 	bl	80083a4 <vTaskSwitchContext>
 8009654:	f04f 0000 	mov.w	r0, #0
 8009658:	f380 8811 	msr	BASEPRI, r0
 800965c:	bc09      	pop	{r0, r3}
 800965e:	6819      	ldr	r1, [r3, #0]
 8009660:	6808      	ldr	r0, [r1, #0]
 8009662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009666:	f01e 0f10 	tst.w	lr, #16
 800966a:	bf08      	it	eq
 800966c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009670:	f380 8809 	msr	PSP, r0
 8009674:	f3bf 8f6f 	isb	sy
 8009678:	4770      	bx	lr
 800967a:	bf00      	nop
 800967c:	f3af 8000 	nop.w

08009680 <pxCurrentTCBConst>:
 8009680:	20000d2c 	.word	0x20000d2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009684:	bf00      	nop
 8009686:	bf00      	nop

08009688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	607b      	str	r3, [r7, #4]
}
 80096a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80096a2:	f7fe fdc5 	bl	8008230 <xTaskIncrementTick>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d003      	beq.n	80096b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80096ac:	4b06      	ldr	r3, [pc, #24]	; (80096c8 <xPortSysTickHandler+0x40>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	2300      	movs	r3, #0
 80096b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	f383 8811 	msr	BASEPRI, r3
}
 80096be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	e000ed04 	.word	0xe000ed04

080096cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096d0:	4b0b      	ldr	r3, [pc, #44]	; (8009700 <vPortSetupTimerInterrupt+0x34>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096d6:	4b0b      	ldr	r3, [pc, #44]	; (8009704 <vPortSetupTimerInterrupt+0x38>)
 80096d8:	2200      	movs	r2, #0
 80096da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096dc:	4b0a      	ldr	r3, [pc, #40]	; (8009708 <vPortSetupTimerInterrupt+0x3c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a0a      	ldr	r2, [pc, #40]	; (800970c <vPortSetupTimerInterrupt+0x40>)
 80096e2:	fba2 2303 	umull	r2, r3, r2, r3
 80096e6:	099b      	lsrs	r3, r3, #6
 80096e8:	4a09      	ldr	r2, [pc, #36]	; (8009710 <vPortSetupTimerInterrupt+0x44>)
 80096ea:	3b01      	subs	r3, #1
 80096ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096ee:	4b04      	ldr	r3, [pc, #16]	; (8009700 <vPortSetupTimerInterrupt+0x34>)
 80096f0:	2207      	movs	r2, #7
 80096f2:	601a      	str	r2, [r3, #0]
}
 80096f4:	bf00      	nop
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	e000e010 	.word	0xe000e010
 8009704:	e000e018 	.word	0xe000e018
 8009708:	20000004 	.word	0x20000004
 800970c:	10624dd3 	.word	0x10624dd3
 8009710:	e000e014 	.word	0xe000e014

08009714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009724 <vPortEnableVFP+0x10>
 8009718:	6801      	ldr	r1, [r0, #0]
 800971a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800971e:	6001      	str	r1, [r0, #0]
 8009720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009722:	bf00      	nop
 8009724:	e000ed88 	.word	0xe000ed88

08009728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800972e:	f3ef 8305 	mrs	r3, IPSR
 8009732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	2b0f      	cmp	r3, #15
 8009738:	d914      	bls.n	8009764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800973a:	4a17      	ldr	r2, [pc, #92]	; (8009798 <vPortValidateInterruptPriority+0x70>)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4413      	add	r3, r2
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009744:	4b15      	ldr	r3, [pc, #84]	; (800979c <vPortValidateInterruptPriority+0x74>)
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	7afa      	ldrb	r2, [r7, #11]
 800974a:	429a      	cmp	r2, r3
 800974c:	d20a      	bcs.n	8009764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	607b      	str	r3, [r7, #4]
}
 8009760:	bf00      	nop
 8009762:	e7fe      	b.n	8009762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009764:	4b0e      	ldr	r3, [pc, #56]	; (80097a0 <vPortValidateInterruptPriority+0x78>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800976c:	4b0d      	ldr	r3, [pc, #52]	; (80097a4 <vPortValidateInterruptPriority+0x7c>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	429a      	cmp	r2, r3
 8009772:	d90a      	bls.n	800978a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	603b      	str	r3, [r7, #0]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <vPortValidateInterruptPriority+0x60>
	}
 800978a:	bf00      	nop
 800978c:	3714      	adds	r7, #20
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	e000e3f0 	.word	0xe000e3f0
 800979c:	20001358 	.word	0x20001358
 80097a0:	e000ed0c 	.word	0xe000ed0c
 80097a4:	2000135c 	.word	0x2000135c

080097a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08a      	sub	sp, #40	; 0x28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097b4:	f7fe fc6e 	bl	8008094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097b8:	4b5b      	ldr	r3, [pc, #364]	; (8009928 <pvPortMalloc+0x180>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d101      	bne.n	80097c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097c0:	f000 f920 	bl	8009a04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097c4:	4b59      	ldr	r3, [pc, #356]	; (800992c <pvPortMalloc+0x184>)
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4013      	ands	r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f040 8093 	bne.w	80098f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d01d      	beq.n	8009814 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097d8:	2208      	movs	r2, #8
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4413      	add	r3, r2
 80097de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d014      	beq.n	8009814 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f023 0307 	bic.w	r3, r3, #7
 80097f0:	3308      	adds	r3, #8
 80097f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f003 0307 	and.w	r3, r3, #7
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00a      	beq.n	8009814 <pvPortMalloc+0x6c>
	__asm volatile
 80097fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009802:	f383 8811 	msr	BASEPRI, r3
 8009806:	f3bf 8f6f 	isb	sy
 800980a:	f3bf 8f4f 	dsb	sy
 800980e:	617b      	str	r3, [r7, #20]
}
 8009810:	bf00      	nop
 8009812:	e7fe      	b.n	8009812 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d06e      	beq.n	80098f8 <pvPortMalloc+0x150>
 800981a:	4b45      	ldr	r3, [pc, #276]	; (8009930 <pvPortMalloc+0x188>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	429a      	cmp	r2, r3
 8009822:	d869      	bhi.n	80098f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009824:	4b43      	ldr	r3, [pc, #268]	; (8009934 <pvPortMalloc+0x18c>)
 8009826:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009828:	4b42      	ldr	r3, [pc, #264]	; (8009934 <pvPortMalloc+0x18c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800982e:	e004      	b.n	800983a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	429a      	cmp	r2, r3
 8009842:	d903      	bls.n	800984c <pvPortMalloc+0xa4>
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1f1      	bne.n	8009830 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800984c:	4b36      	ldr	r3, [pc, #216]	; (8009928 <pvPortMalloc+0x180>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009852:	429a      	cmp	r2, r3
 8009854:	d050      	beq.n	80098f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009856:	6a3b      	ldr	r3, [r7, #32]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2208      	movs	r2, #8
 800985c:	4413      	add	r3, r2
 800985e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	1ad2      	subs	r2, r2, r3
 8009870:	2308      	movs	r3, #8
 8009872:	005b      	lsls	r3, r3, #1
 8009874:	429a      	cmp	r2, r3
 8009876:	d91f      	bls.n	80098b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4413      	add	r3, r2
 800987e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	f003 0307 	and.w	r3, r3, #7
 8009886:	2b00      	cmp	r3, #0
 8009888:	d00a      	beq.n	80098a0 <pvPortMalloc+0xf8>
	__asm volatile
 800988a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800988e:	f383 8811 	msr	BASEPRI, r3
 8009892:	f3bf 8f6f 	isb	sy
 8009896:	f3bf 8f4f 	dsb	sy
 800989a:	613b      	str	r3, [r7, #16]
}
 800989c:	bf00      	nop
 800989e:	e7fe      	b.n	800989e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	687a      	ldr	r2, [r7, #4]
 80098b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098b2:	69b8      	ldr	r0, [r7, #24]
 80098b4:	f000 f908 	bl	8009ac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098b8:	4b1d      	ldr	r3, [pc, #116]	; (8009930 <pvPortMalloc+0x188>)
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	4a1b      	ldr	r2, [pc, #108]	; (8009930 <pvPortMalloc+0x188>)
 80098c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098c6:	4b1a      	ldr	r3, [pc, #104]	; (8009930 <pvPortMalloc+0x188>)
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4b1b      	ldr	r3, [pc, #108]	; (8009938 <pvPortMalloc+0x190>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d203      	bcs.n	80098da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098d2:	4b17      	ldr	r3, [pc, #92]	; (8009930 <pvPortMalloc+0x188>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a18      	ldr	r2, [pc, #96]	; (8009938 <pvPortMalloc+0x190>)
 80098d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	685a      	ldr	r2, [r3, #4]
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <pvPortMalloc+0x184>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	431a      	orrs	r2, r3
 80098e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ea:	2200      	movs	r2, #0
 80098ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <pvPortMalloc+0x194>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	3301      	adds	r3, #1
 80098f4:	4a11      	ldr	r2, [pc, #68]	; (800993c <pvPortMalloc+0x194>)
 80098f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098f8:	f7fe fbda 	bl	80080b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	f003 0307 	and.w	r3, r3, #7
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00a      	beq.n	800991c <pvPortMalloc+0x174>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60fb      	str	r3, [r7, #12]
}
 8009918:	bf00      	nop
 800991a:	e7fe      	b.n	800991a <pvPortMalloc+0x172>
	return pvReturn;
 800991c:	69fb      	ldr	r3, [r7, #28]
}
 800991e:	4618      	mov	r0, r3
 8009920:	3728      	adds	r7, #40	; 0x28
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20004f68 	.word	0x20004f68
 800992c:	20004f7c 	.word	0x20004f7c
 8009930:	20004f6c 	.word	0x20004f6c
 8009934:	20004f60 	.word	0x20004f60
 8009938:	20004f70 	.word	0x20004f70
 800993c:	20004f74 	.word	0x20004f74

08009940 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d04d      	beq.n	80099ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009952:	2308      	movs	r3, #8
 8009954:	425b      	negs	r3, r3
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	4413      	add	r3, r2
 800995a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	685a      	ldr	r2, [r3, #4]
 8009964:	4b24      	ldr	r3, [pc, #144]	; (80099f8 <vPortFree+0xb8>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4013      	ands	r3, r2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10a      	bne.n	8009984 <vPortFree+0x44>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	f383 8811 	msr	BASEPRI, r3
 8009976:	f3bf 8f6f 	isb	sy
 800997a:	f3bf 8f4f 	dsb	sy
 800997e:	60fb      	str	r3, [r7, #12]
}
 8009980:	bf00      	nop
 8009982:	e7fe      	b.n	8009982 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d00a      	beq.n	80099a2 <vPortFree+0x62>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	60bb      	str	r3, [r7, #8]
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	685a      	ldr	r2, [r3, #4]
 80099a6:	4b14      	ldr	r3, [pc, #80]	; (80099f8 <vPortFree+0xb8>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4013      	ands	r3, r2
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d01e      	beq.n	80099ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d11a      	bne.n	80099ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	685a      	ldr	r2, [r3, #4]
 80099bc:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <vPortFree+0xb8>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	43db      	mvns	r3, r3
 80099c2:	401a      	ands	r2, r3
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099c8:	f7fe fb64 	bl	8008094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	685a      	ldr	r2, [r3, #4]
 80099d0:	4b0a      	ldr	r3, [pc, #40]	; (80099fc <vPortFree+0xbc>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4413      	add	r3, r2
 80099d6:	4a09      	ldr	r2, [pc, #36]	; (80099fc <vPortFree+0xbc>)
 80099d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099da:	6938      	ldr	r0, [r7, #16]
 80099dc:	f000 f874 	bl	8009ac8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099e0:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <vPortFree+0xc0>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3301      	adds	r3, #1
 80099e6:	4a06      	ldr	r2, [pc, #24]	; (8009a00 <vPortFree+0xc0>)
 80099e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099ea:	f7fe fb61 	bl	80080b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099ee:	bf00      	nop
 80099f0:	3718      	adds	r7, #24
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20004f7c 	.word	0x20004f7c
 80099fc:	20004f6c 	.word	0x20004f6c
 8009a00:	20004f78 	.word	0x20004f78

08009a04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009a0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a10:	4b27      	ldr	r3, [pc, #156]	; (8009ab0 <prvHeapInit+0xac>)
 8009a12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f003 0307 	and.w	r3, r3, #7
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00c      	beq.n	8009a38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3307      	adds	r3, #7
 8009a22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 0307 	bic.w	r3, r3, #7
 8009a2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	4a1f      	ldr	r2, [pc, #124]	; (8009ab0 <prvHeapInit+0xac>)
 8009a34:	4413      	add	r3, r2
 8009a36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a3c:	4a1d      	ldr	r2, [pc, #116]	; (8009ab4 <prvHeapInit+0xb0>)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a42:	4b1c      	ldr	r3, [pc, #112]	; (8009ab4 <prvHeapInit+0xb0>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a50:	2208      	movs	r2, #8
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f023 0307 	bic.w	r3, r3, #7
 8009a5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	4a15      	ldr	r2, [pc, #84]	; (8009ab8 <prvHeapInit+0xb4>)
 8009a64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a66:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <prvHeapInit+0xb4>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a6e:	4b12      	ldr	r3, [pc, #72]	; (8009ab8 <prvHeapInit+0xb4>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	1ad2      	subs	r2, r2, r3
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a84:	4b0c      	ldr	r3, [pc, #48]	; (8009ab8 <prvHeapInit+0xb4>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	4a0a      	ldr	r2, [pc, #40]	; (8009abc <prvHeapInit+0xb8>)
 8009a92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	4a09      	ldr	r2, [pc, #36]	; (8009ac0 <prvHeapInit+0xbc>)
 8009a9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a9c:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <prvHeapInit+0xc0>)
 8009a9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009aa2:	601a      	str	r2, [r3, #0]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	20001360 	.word	0x20001360
 8009ab4:	20004f60 	.word	0x20004f60
 8009ab8:	20004f68 	.word	0x20004f68
 8009abc:	20004f70 	.word	0x20004f70
 8009ac0:	20004f6c 	.word	0x20004f6c
 8009ac4:	20004f7c 	.word	0x20004f7c

08009ac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b085      	sub	sp, #20
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ad0:	4b28      	ldr	r3, [pc, #160]	; (8009b74 <prvInsertBlockIntoFreeList+0xac>)
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	e002      	b.n	8009adc <prvInsertBlockIntoFreeList+0x14>
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	60fb      	str	r3, [r7, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d8f7      	bhi.n	8009ad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4413      	add	r3, r2
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d108      	bne.n	8009b0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	441a      	add	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	441a      	add	r2, r3
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d118      	bne.n	8009b50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	4b15      	ldr	r3, [pc, #84]	; (8009b78 <prvInsertBlockIntoFreeList+0xb0>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	429a      	cmp	r2, r3
 8009b28:	d00d      	beq.n	8009b46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	685a      	ldr	r2, [r3, #4]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	441a      	add	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	601a      	str	r2, [r3, #0]
 8009b44:	e008      	b.n	8009b58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b46:	4b0c      	ldr	r3, [pc, #48]	; (8009b78 <prvInsertBlockIntoFreeList+0xb0>)
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	e003      	b.n	8009b58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d002      	beq.n	8009b66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	687a      	ldr	r2, [r7, #4]
 8009b64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b66:	bf00      	nop
 8009b68:	3714      	adds	r7, #20
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20004f60 	.word	0x20004f60
 8009b78:	20004f68 	.word	0x20004f68

08009b7c <memset>:
 8009b7c:	4402      	add	r2, r0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d100      	bne.n	8009b86 <memset+0xa>
 8009b84:	4770      	bx	lr
 8009b86:	f803 1b01 	strb.w	r1, [r3], #1
 8009b8a:	e7f9      	b.n	8009b80 <memset+0x4>

08009b8c <_reclaim_reent>:
 8009b8c:	4b29      	ldr	r3, [pc, #164]	; (8009c34 <_reclaim_reent+0xa8>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4283      	cmp	r3, r0
 8009b92:	b570      	push	{r4, r5, r6, lr}
 8009b94:	4604      	mov	r4, r0
 8009b96:	d04b      	beq.n	8009c30 <_reclaim_reent+0xa4>
 8009b98:	69c3      	ldr	r3, [r0, #28]
 8009b9a:	b143      	cbz	r3, 8009bae <_reclaim_reent+0x22>
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d144      	bne.n	8009c2c <_reclaim_reent+0xa0>
 8009ba2:	69e3      	ldr	r3, [r4, #28]
 8009ba4:	6819      	ldr	r1, [r3, #0]
 8009ba6:	b111      	cbz	r1, 8009bae <_reclaim_reent+0x22>
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 f879 	bl	8009ca0 <_free_r>
 8009bae:	6961      	ldr	r1, [r4, #20]
 8009bb0:	b111      	cbz	r1, 8009bb8 <_reclaim_reent+0x2c>
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 f874 	bl	8009ca0 <_free_r>
 8009bb8:	69e1      	ldr	r1, [r4, #28]
 8009bba:	b111      	cbz	r1, 8009bc2 <_reclaim_reent+0x36>
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 f86f 	bl	8009ca0 <_free_r>
 8009bc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009bc4:	b111      	cbz	r1, 8009bcc <_reclaim_reent+0x40>
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 f86a 	bl	8009ca0 <_free_r>
 8009bcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bce:	b111      	cbz	r1, 8009bd6 <_reclaim_reent+0x4a>
 8009bd0:	4620      	mov	r0, r4
 8009bd2:	f000 f865 	bl	8009ca0 <_free_r>
 8009bd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009bd8:	b111      	cbz	r1, 8009be0 <_reclaim_reent+0x54>
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 f860 	bl	8009ca0 <_free_r>
 8009be0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009be2:	b111      	cbz	r1, 8009bea <_reclaim_reent+0x5e>
 8009be4:	4620      	mov	r0, r4
 8009be6:	f000 f85b 	bl	8009ca0 <_free_r>
 8009bea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009bec:	b111      	cbz	r1, 8009bf4 <_reclaim_reent+0x68>
 8009bee:	4620      	mov	r0, r4
 8009bf0:	f000 f856 	bl	8009ca0 <_free_r>
 8009bf4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009bf6:	b111      	cbz	r1, 8009bfe <_reclaim_reent+0x72>
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f000 f851 	bl	8009ca0 <_free_r>
 8009bfe:	6a23      	ldr	r3, [r4, #32]
 8009c00:	b1b3      	cbz	r3, 8009c30 <_reclaim_reent+0xa4>
 8009c02:	4620      	mov	r0, r4
 8009c04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c08:	4718      	bx	r3
 8009c0a:	5949      	ldr	r1, [r1, r5]
 8009c0c:	b941      	cbnz	r1, 8009c20 <_reclaim_reent+0x94>
 8009c0e:	3504      	adds	r5, #4
 8009c10:	69e3      	ldr	r3, [r4, #28]
 8009c12:	2d80      	cmp	r5, #128	; 0x80
 8009c14:	68d9      	ldr	r1, [r3, #12]
 8009c16:	d1f8      	bne.n	8009c0a <_reclaim_reent+0x7e>
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 f841 	bl	8009ca0 <_free_r>
 8009c1e:	e7c0      	b.n	8009ba2 <_reclaim_reent+0x16>
 8009c20:	680e      	ldr	r6, [r1, #0]
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 f83c 	bl	8009ca0 <_free_r>
 8009c28:	4631      	mov	r1, r6
 8009c2a:	e7ef      	b.n	8009c0c <_reclaim_reent+0x80>
 8009c2c:	2500      	movs	r5, #0
 8009c2e:	e7ef      	b.n	8009c10 <_reclaim_reent+0x84>
 8009c30:	bd70      	pop	{r4, r5, r6, pc}
 8009c32:	bf00      	nop
 8009c34:	20000060 	.word	0x20000060

08009c38 <__libc_init_array>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	4d0d      	ldr	r5, [pc, #52]	; (8009c70 <__libc_init_array+0x38>)
 8009c3c:	4c0d      	ldr	r4, [pc, #52]	; (8009c74 <__libc_init_array+0x3c>)
 8009c3e:	1b64      	subs	r4, r4, r5
 8009c40:	10a4      	asrs	r4, r4, #2
 8009c42:	2600      	movs	r6, #0
 8009c44:	42a6      	cmp	r6, r4
 8009c46:	d109      	bne.n	8009c5c <__libc_init_array+0x24>
 8009c48:	4d0b      	ldr	r5, [pc, #44]	; (8009c78 <__libc_init_array+0x40>)
 8009c4a:	4c0c      	ldr	r4, [pc, #48]	; (8009c7c <__libc_init_array+0x44>)
 8009c4c:	f000 f880 	bl	8009d50 <_init>
 8009c50:	1b64      	subs	r4, r4, r5
 8009c52:	10a4      	asrs	r4, r4, #2
 8009c54:	2600      	movs	r6, #0
 8009c56:	42a6      	cmp	r6, r4
 8009c58:	d105      	bne.n	8009c66 <__libc_init_array+0x2e>
 8009c5a:	bd70      	pop	{r4, r5, r6, pc}
 8009c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c60:	4798      	blx	r3
 8009c62:	3601      	adds	r6, #1
 8009c64:	e7ee      	b.n	8009c44 <__libc_init_array+0xc>
 8009c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c6a:	4798      	blx	r3
 8009c6c:	3601      	adds	r6, #1
 8009c6e:	e7f2      	b.n	8009c56 <__libc_init_array+0x1e>
 8009c70:	0800a098 	.word	0x0800a098
 8009c74:	0800a098 	.word	0x0800a098
 8009c78:	0800a098 	.word	0x0800a098
 8009c7c:	0800a09c 	.word	0x0800a09c

08009c80 <__retarget_lock_acquire_recursive>:
 8009c80:	4770      	bx	lr

08009c82 <__retarget_lock_release_recursive>:
 8009c82:	4770      	bx	lr

08009c84 <memcpy>:
 8009c84:	440a      	add	r2, r1
 8009c86:	4291      	cmp	r1, r2
 8009c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c8c:	d100      	bne.n	8009c90 <memcpy+0xc>
 8009c8e:	4770      	bx	lr
 8009c90:	b510      	push	{r4, lr}
 8009c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c9a:	4291      	cmp	r1, r2
 8009c9c:	d1f9      	bne.n	8009c92 <memcpy+0xe>
 8009c9e:	bd10      	pop	{r4, pc}

08009ca0 <_free_r>:
 8009ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009ca2:	2900      	cmp	r1, #0
 8009ca4:	d044      	beq.n	8009d30 <_free_r+0x90>
 8009ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009caa:	9001      	str	r0, [sp, #4]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f1a1 0404 	sub.w	r4, r1, #4
 8009cb2:	bfb8      	it	lt
 8009cb4:	18e4      	addlt	r4, r4, r3
 8009cb6:	f000 f83f 	bl	8009d38 <__malloc_lock>
 8009cba:	4a1e      	ldr	r2, [pc, #120]	; (8009d34 <_free_r+0x94>)
 8009cbc:	9801      	ldr	r0, [sp, #4]
 8009cbe:	6813      	ldr	r3, [r2, #0]
 8009cc0:	b933      	cbnz	r3, 8009cd0 <_free_r+0x30>
 8009cc2:	6063      	str	r3, [r4, #4]
 8009cc4:	6014      	str	r4, [r2, #0]
 8009cc6:	b003      	add	sp, #12
 8009cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ccc:	f000 b83a 	b.w	8009d44 <__malloc_unlock>
 8009cd0:	42a3      	cmp	r3, r4
 8009cd2:	d908      	bls.n	8009ce6 <_free_r+0x46>
 8009cd4:	6825      	ldr	r5, [r4, #0]
 8009cd6:	1961      	adds	r1, r4, r5
 8009cd8:	428b      	cmp	r3, r1
 8009cda:	bf01      	itttt	eq
 8009cdc:	6819      	ldreq	r1, [r3, #0]
 8009cde:	685b      	ldreq	r3, [r3, #4]
 8009ce0:	1949      	addeq	r1, r1, r5
 8009ce2:	6021      	streq	r1, [r4, #0]
 8009ce4:	e7ed      	b.n	8009cc2 <_free_r+0x22>
 8009ce6:	461a      	mov	r2, r3
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	b10b      	cbz	r3, 8009cf0 <_free_r+0x50>
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	d9fa      	bls.n	8009ce6 <_free_r+0x46>
 8009cf0:	6811      	ldr	r1, [r2, #0]
 8009cf2:	1855      	adds	r5, r2, r1
 8009cf4:	42a5      	cmp	r5, r4
 8009cf6:	d10b      	bne.n	8009d10 <_free_r+0x70>
 8009cf8:	6824      	ldr	r4, [r4, #0]
 8009cfa:	4421      	add	r1, r4
 8009cfc:	1854      	adds	r4, r2, r1
 8009cfe:	42a3      	cmp	r3, r4
 8009d00:	6011      	str	r1, [r2, #0]
 8009d02:	d1e0      	bne.n	8009cc6 <_free_r+0x26>
 8009d04:	681c      	ldr	r4, [r3, #0]
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	6053      	str	r3, [r2, #4]
 8009d0a:	440c      	add	r4, r1
 8009d0c:	6014      	str	r4, [r2, #0]
 8009d0e:	e7da      	b.n	8009cc6 <_free_r+0x26>
 8009d10:	d902      	bls.n	8009d18 <_free_r+0x78>
 8009d12:	230c      	movs	r3, #12
 8009d14:	6003      	str	r3, [r0, #0]
 8009d16:	e7d6      	b.n	8009cc6 <_free_r+0x26>
 8009d18:	6825      	ldr	r5, [r4, #0]
 8009d1a:	1961      	adds	r1, r4, r5
 8009d1c:	428b      	cmp	r3, r1
 8009d1e:	bf04      	itt	eq
 8009d20:	6819      	ldreq	r1, [r3, #0]
 8009d22:	685b      	ldreq	r3, [r3, #4]
 8009d24:	6063      	str	r3, [r4, #4]
 8009d26:	bf04      	itt	eq
 8009d28:	1949      	addeq	r1, r1, r5
 8009d2a:	6021      	streq	r1, [r4, #0]
 8009d2c:	6054      	str	r4, [r2, #4]
 8009d2e:	e7ca      	b.n	8009cc6 <_free_r+0x26>
 8009d30:	b003      	add	sp, #12
 8009d32:	bd30      	pop	{r4, r5, pc}
 8009d34:	200050bc 	.word	0x200050bc

08009d38 <__malloc_lock>:
 8009d38:	4801      	ldr	r0, [pc, #4]	; (8009d40 <__malloc_lock+0x8>)
 8009d3a:	f7ff bfa1 	b.w	8009c80 <__retarget_lock_acquire_recursive>
 8009d3e:	bf00      	nop
 8009d40:	200050b8 	.word	0x200050b8

08009d44 <__malloc_unlock>:
 8009d44:	4801      	ldr	r0, [pc, #4]	; (8009d4c <__malloc_unlock+0x8>)
 8009d46:	f7ff bf9c 	b.w	8009c82 <__retarget_lock_release_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	200050b8 	.word	0x200050b8

08009d50 <_init>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	bf00      	nop
 8009d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d56:	bc08      	pop	{r3}
 8009d58:	469e      	mov	lr, r3
 8009d5a:	4770      	bx	lr

08009d5c <_fini>:
 8009d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d5e:	bf00      	nop
 8009d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d62:	bc08      	pop	{r3}
 8009d64:	469e      	mov	lr, r3
 8009d66:	4770      	bx	lr
